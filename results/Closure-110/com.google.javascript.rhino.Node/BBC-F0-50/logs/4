* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 13293
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 1175742828
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 09:45:32.569 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 09:45:37.161 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;
[MASTER] 09:45:47.476 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 09:47:12.289 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 211
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 2016
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 2016
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 29351
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 2016
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 2016
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 2016
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 123
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 373
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 971
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 203
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 62
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 211
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 563
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 211
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 3623
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 16882
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 211
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 2016
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 211
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 2016
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 1100
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 211
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 822
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 713
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 1937
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 28194
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 211
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - true: 123
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 698: 211
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 10259
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 287
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 9891
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 2828
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 16
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 647
Number of times BBC is called for com.google.javascript.rhino.Node.getChangeTime()I: root-Branch: 298
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 454: 294
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 19101
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 1551
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 456: 294
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 971
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 455: 294
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 1680
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 595
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 2016
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 4725
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 298
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 2361
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - false: 1112
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 1688
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 20247
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 2154
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 12056
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: root-Branch: 211
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 8269
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 20192
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 834
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 4546
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 298
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 834
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 1570
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 2821
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: Line 1847: 2016
Number of times BBC is called for com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: Line 1323: 123
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 1412
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 20972
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 3156
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 3865
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 10946
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 36
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 6180
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 211
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 211
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 3179
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 498
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: root-Branch: 123
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 1545
Number of times BBC is called for com.google.javascript.rhino.Node.putProp(ILjava/lang/Object;)V: I8 Branch 108 IFNULL L846 - false: 2
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 1551
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 4884
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 26306
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 4584
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1356: 123
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 41
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 3509
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: root-Branch: 2016
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: root-Branch: 3172
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 93276
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 4
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 6181
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 2016
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: root-Branch: 1398
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 6181
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 1607
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 4226
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 2173
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 1081
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 2173
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1473: 1112
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 971
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 10559
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 5034
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 6491
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1358: 123
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1357: 123
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 971
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 68
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 595
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 68
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - false: 392
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 5680
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 195
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 195
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 211
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 195
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 226
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 211
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 342
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 24485
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 504
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 1286
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 12842
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 392
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 8640
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 3681
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 27533
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 21795
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - true: 139
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 595
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 11861
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 595
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 93276
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 27068
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 1551
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 7157
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 93276
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 1660
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 1011
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 1030
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 123
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 4361
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 2214
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 30776
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 43
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 319
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: Line 1344: 123
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 590
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 19178
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 5221
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 10259
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 10259
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 298
Number of times BBC is called for com.google.javascript.rhino.Node.isOptionalArg()Z: root-Branch: 1706
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 17699
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 4047
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 2757
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 3677
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 120
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 1202
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 392
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 3681
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 174
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 175
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 48
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 7170
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 37742
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 1068
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 4725
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 12842
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 20409
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 2016
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: root-Branch: 211
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 93276
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 4073
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 13512
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 10259
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 93276
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 1859
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 595
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 196
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 36
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 713
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 123
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 123
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 1410
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 51074
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 1706
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 4298
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 24485
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 791
Number of times BBC is called for com.google.javascript.rhino.Node.isVarArgs()Z: root-Branch: 123
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: Line 1839: 392
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 1674
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 16330
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 5502
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 2016
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 236
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 7875
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 226
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 8539
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 13736
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 1286
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 1264
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 12842
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 2173
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 24160
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2026: 211
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 595
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 37742
Number of times BBC is called for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: root-Branch: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 2173
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 93276
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 12842
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 2778
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 298
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 23952
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 2
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 1706
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 15422
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 4047
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 2778
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 392
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 12
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 195
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 298
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 4990
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 298
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 298
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 639
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 52012
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 123
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 220
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 123
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 3509
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 392
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 10259
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 20194
Number of times BBC is called for com.google.javascript.rhino.Node.getJSDocInfo()Lcom/google/javascript/rhino/JSDocInfo;: Line 1881: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 1036
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 4446
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 4583
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 31022
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 4583
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 111
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 93276
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 461
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1039: 392
Number of times BBC is called for com.google.javascript.rhino.Node.createProp(ILjava/lang/Object;Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 863: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 2825
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 4276
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1032: 392
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1033: 392
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 2173
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 298
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1036: 122
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1034: 392
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 4644
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 35
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1029: 392
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: Line 2135: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 3440
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 344
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - false: 713
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 406
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 6256
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 3681
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 1406
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 93276
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 123
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 94
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 211
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 460: 15
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 461: 15
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 462: 15
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 6768
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 11172
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 7248
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 39336
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 6768
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: Line 2166: 211
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 93276
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 4028
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 1112
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 298
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 36
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 3333
Number of times BBC is called for com.google.javascript.rhino.Node.getChangeTime()I: Line 1899: 298
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 60
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: root-Branch: 392
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: Line 2403: 2825
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 939
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 1068
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1099: 3172
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 1071
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 298
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 18
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 298
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1752: 392
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 31121
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 649
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 557
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1747: 392
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 649
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1100: 3172
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 649
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 649
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1743: 392
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 165
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: root-Branch: 392
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 5502
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 211
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 7219
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 8353
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 5529
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 5529
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 27068
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 5529
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 7654
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 5529
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 10112
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 2106
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 498
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 4201
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 6787
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 7
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1732: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 211
Number of times BBC is called for com.google.javascript.rhino.Node.getJSDocInfo()Lcom/google/javascript/rhino/JSDocInfo;: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 3604
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 5686
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 3703
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 3465
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 17677
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1720: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 1706
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1721: 43
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 1859
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 203
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 713
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 2332
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: Line 312: 713
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 834
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - true: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 211
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 3134
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 3040
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 12842
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 211
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 1272
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 123
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: root-Branch: 298
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 2016
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.<init>(ILjava/lang/Object;Lcom/google/javascript/rhino/Node$PropListItem;)V: root-Branch: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 25930
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 2825
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 132
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 17509
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 2997
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 4
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 392
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 174: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 482
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 173: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 3960
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 402
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 35
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch: 392
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 343
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 10791
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 211
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - false: 211
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 17249
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 36603
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 1551
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 5203
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 2016
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 312
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 453
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 845
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 1253
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 3644
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 1551
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 298
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - false: 16
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 93276
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 2561
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;)V: I9 Branch 284 IF_ACMPNE L194 - false: 135
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 4583
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 20419
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 123
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - true: 222
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 1907
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 4483
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 7108
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 134
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 1664
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 9891
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 1063
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 203
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 53
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 1706
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 211
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 1674
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 5686
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 595
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 1674
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - false: 222
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 1674
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 4454
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 257
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 1674
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 34423
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 1674
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 1674
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 713
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 132
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 13276
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 13276
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 16
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1015: 392
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 2173
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1017: 392
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 12
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 13235
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1016: 392
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1024: 392
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1025: 392
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 1630
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 27068
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 115
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 2265
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: root-Branch: 392
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 93276
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1646: 1253
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 1477
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1647: 1253
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 2016
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 713
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 2997
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 2825
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: Line 1010: 392
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 110
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 3573
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 10857
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1103: 713
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isVarArgs()Z: Line 1917: 123
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1650: 1253
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: Line 2084: 1398
Number of times BBC is called for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: Line 1888: 713
Number of times BBC is called for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: Line 1889: 713
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 53
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 39
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1104: 713
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 4951
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: Line 2085: 1398
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 48
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 6946
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 2032
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 17058
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 139
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 203
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 1219
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 203
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 595
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1634: 123
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 2934
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 855
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 595
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 2016
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - false: 713
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 1253
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 20311
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - true: 16
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 279
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 29155
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 211
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 136
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 1706
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 136
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 1813
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 6768
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 908
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 6644
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1978: 713
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 1087
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1974: 713
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1977: 713
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 32140
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 32140
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 403
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 5250
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 31871
Number of times BBC is called for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: Line 2147: 123
Number of times BBC is called for com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: root-Branch: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 1112
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 10849
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: root-Branch: 2825
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 2332
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 1706
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 1477
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 531: 1551
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 530: 1551
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 1556
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 14463
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 595
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - false: 921
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 1253
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 1706
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 3290
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - true: 392
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 742
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 1551
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 1551
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 2475
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 2022
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 1551
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 14
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 1008
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 34
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 2173
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 18976
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 204
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 4161
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 298
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 3530
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 110
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 54
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 32
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 84
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 32140
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 58
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 4951
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 1421
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 32140
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 993: 48
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 32140
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 32140
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 989: 48
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 4426
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 6516
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 992: 48
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 985: 48
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 32140
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 2016
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 32140
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: Line 987: 48
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 6516
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 6516
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 18564
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 211
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 2016
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 834
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 6181
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 1080
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 6181
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 13263
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: Line 1132: 2825
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 13263
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 12473
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 12842
Number of times BBC is called for com.google.javascript.rhino.Node.isOptionalArg()Z: Line 1935: 1706
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 12584
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 595
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - false: 211
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 130
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 971
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 337
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 37722
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 31315
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: Line 2060: 211
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 1253
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 1253
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 8387
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 27068
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 3681
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 2088
Number of times BBC is called for com.google.javascript.rhino.Node.getProp(I)Ljava/lang/Object;: I9 Branch 104 IFNONNULL L814 - true: 203
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 19648
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 21242
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 19864
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.<init>(ILjava/lang/Object;Lcom/google/javascript/rhino/Node$PropListItem;)V: Line 303: 123
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 68
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.<init>(ILjava/lang/Object;Lcom/google/javascript/rhino/Node$PropListItem;)V: Line 302: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 939
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 713
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 9051
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 595
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 9561
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 211
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 1706
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 2016
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 3005
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 2016
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 1253
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 1706
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.<init>(ILjava/lang/Object;Lcom/google/javascript/rhino/Node$PropListItem;)V: Line 301: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 22219
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 2627
Number of times BBC is called for com.google.javascript.rhino.Node.createProp(ILjava/lang/Object;Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 1217
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 43
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 5499
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 28
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 595
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 211
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 2378
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 1253
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 4015
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 595
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 8348
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: root-Branch: 1551
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 2173
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 971
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 13495
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 5529
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 211
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 971
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 30362
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 14380
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 123
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 23062
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 595
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 482
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 2771
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 2088
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1408: 123
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 2144
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 290
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1411: 123
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 45
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 1706
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: root-Branch: 123
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 28960
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 31121
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 1706
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1407: 123
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 971
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 971
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 84
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 971
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 971
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 392
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 392
Number of times BBC is called for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: root-Branch: 713
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 971
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 4082
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 1397
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 93276
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 1563
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 123
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 28960
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 36
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 5267
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 93276
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - false: 28
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 10562
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 649
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 71
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - false: 392
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 713
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1173: 298
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1172: 298
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 181
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 123
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 1774
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 4042
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 123
Number of times BBC is called in total: 4247030
* Search finished after 604s and 553 generations, 256529 statements, best individual has fitness: 2660.0
* Minimizing test suite
[MASTER] 09:56:55.780 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 853
* Number of covered goals: 812
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 714
* Number of covered goals: 628
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 108
* Number of covered goals: 108
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 530
* Number of covered goals: 471
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 52%
* Total number of goals: 4536
* Number of covered goals: 2364
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 714
* Number of covered goals: 584
* Generated 808 tests with total length 11731
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 09:58:04.168 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6767333333333333% of time used, but only 55/808 tests minimized), falling back to using all assertions
[MASTER] 09:58:23.628 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 15%
* Compiling and checking tests
[MASTER] 09:58:32.071 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 8 seconds more than allowed.
[MASTER] 09:58:38.679 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_82_1628157518534/com/google/javascript/rhino/Node_82_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_82_1628157518534/com/google/javascript/rhino/Node_82_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:38.679 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:38.679 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:38.682 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 767
[MASTER] 09:58:38.684 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_82_1628157518534/com/google/javascript/rhino/Node_82_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:38 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_82_tmp__ESTest extends Node_82_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = new Node(29, 48, 2810);
24:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
25:       assertEquals(40, Node.ORIGINALNAME_PROP);
26:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
27:       assertEquals(57, Node.REFLECTED_OBJECT);
28:       assertEquals(52, Node.LENGTH);
29:       assertEquals(8, Node.FLAG_NO_THROWS);
30:       assertEquals(50, Node.FREE_CALL);
31:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
32:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
33:       assertEquals(39, Node.EMPTY_BLOCK);
34:       assertEquals(15, Node.NO_SIDE_EFFECTS);
35:       assertEquals(57, Node.LAST_PROP);
36:       assertEquals(55, Node.INFERRED_FUNCTION);
37:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
38:       assertEquals(12, Node.COLUMN_BITS);
39:       assertEquals(36, Node.QUOTED_PROP);
40:       assertEquals(4095, Node.COLUMN_MASK);
41:       assertEquals(48, Node.DIRECTIVES);
42:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
43:       assertEquals(37, Node.OPT_ARG_NAME);
44:       assertEquals(56, Node.CHANGE_TIME);
45:       assertEquals(49, Node.DIRECT_EVAL);
46:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
47:       assertEquals(29, Node.JSDOC_INFO_PROP);
48:       assertEquals(47, Node.IS_DISPATCHER);
49:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
50:       assertEquals(2, Node.POST_FLAG);
51:       assertEquals(53, Node.INPUT_ID);
52:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
53:       assertEquals(32, Node.INCRDECR_PROP);
54:       assertEquals(1, Node.DECR_FLAG);
55:       assertEquals(51, Node.STATIC_SOURCE_FILE);
56:       assertEquals(30, Node.VAR_ARGS_NAME);
57:       assertEquals(46, Node.IS_NAMESPACE);
58:       assertEquals(54, Node.SLASH_V);
59:       assertEquals(43, Node.IS_CONSTANT_NAME);
60:       assertNotNull(node0);
61:       assertFalse(node0.isHook());
62:       assertEquals(29, node0.getType());
63:       assertFalse(node0.isFalse());
64:       assertFalse(node0.isBreak());
65:       assertFalse(node0.isSwitch());
66:       assertFalse(node0.isInstanceOf());
67:       assertFalse(node0.isComma());
68:       assertFalse(node0.isWith());
69:       assertFalse(node0.isNot());
70:       assertFalse(node0.isObjectLit());
71:       assertFalse(node0.isString());
72:       assertFalse(node0.isThis());
73:       assertFalse(node0.isFor());
74:       assertFalse(node0.isScript());
75:       assertFalse(node0.isGetProp());
76:       assertFalse(node0.isCase());
77:       assertEquals(48, node0.getLineno());
78:       assertFalse(node0.isCast());
79:       assertFalse(node0.isDebugger());
80:       assertFalse(node0.isRegExp());
81:       assertFalse(node0.isFunction());
82:       assertFalse(node0.isIf());
83:       assertFalse(node0.isNE());
84:       assertFalse(node0.isAnd());
85:       assertFalse(node0.isIn());
86:       assertFalse(node0.isContinue());
87:       assertFalse(node0.isSetterDef());
88:       assertFalse(node0.isInc());
89:       assertFalse(node0.isThrow());
90:       assertFalse(node0.isVar());
91:       assertFalse(node0.isAdd());
92:       assertFalse(node0.isCall());
93:       assertFalse(node0.isBlock());
94:       assertFalse(node0.isNull());
95:       assertFalse(node0.isStringKey());
96:       assertFalse(node0.isParamList());
97:       assertFalse(node0.isName());
98:       assertEquals(199418, node0.getSourcePosition());
99:       assertFalse(node0.isReturn());
100:       assertFalse(node0.isCatch());
101:       assertFalse(node0.hasMoreThanOneChild());
102:       assertFalse(node0.isTypeOf());
103:       assertFalse(node0.isNumber());
104:       assertFalse(node0.isDec());
105:       assertFalse(node0.hasChildren());
106:       assertFalse(node0.isWhile());
107:       assertFalse(node0.isTry());
108:       assertFalse(node0.hasOneChild());
109:       assertFalse(node0.isArrayLit());
110:       assertEquals(2810, node0.getCharno());
111:       assertFalse(node0.isAssign());
112:       assertFalse(node0.isGetterDef());
113:       assertFalse(node0.isTrue());
114:       assertFalse(node0.isExprResult());
115:       assertFalse(node0.isGetElem());
116:       assertFalse(node0.isLabelName());
117:       assertFalse(node0.isVoid());
118:       assertFalse(node0.isDelProp());
119:       assertEquals(0, node0.getChildCount());
120:       assertFalse(node0.isLabel());
121:       assertFalse(node0.isOr());
122:       assertFalse(node0.isDefaultCase());
123:       assertFalse(node0.isEmpty());
124:       assertFalse(node0.isNew());
125:       assertFalse(node0.isDo());
126:       assertFalse(node0.isAssignAdd());
127:       
128:       boolean boolean0 = node0.isNE();
129:       assertFalse(boolean0);
130:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
131:       assertEquals(40, Node.ORIGINALNAME_PROP);
132:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
133:       assertEquals(57, Node.REFLECTED_OBJECT);
134:       assertEquals(52, Node.LENGTH);
135:       assertEquals(8, Node.FLAG_NO_THROWS);
136:       assertEquals(50, Node.FREE_CALL);
137:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
138:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
139:       assertEquals(39, Node.EMPTY_BLOCK);
140:       assertEquals(15, Node.NO_SIDE_EFFECTS);
141:       assertEquals(57, Node.LAST_PROP);
142:       assertEquals(55, Node.INFERRED_FUNCTION);
143:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
144:       assertEquals(12, Node.COLUMN_BITS);
145:       assertEquals(36, Node.QUOTED_PROP);
146:       assertEquals(4095, Node.COLUMN_MASK);
147:       assertEquals(48, Node.DIRECTIVES);
148:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
149:       assertEquals(37, Node.OPT_ARG_NAME);
150:       assertEquals(56, Node.CHANGE_TIME);
151:       assertEquals(49, Node.DIRECT_EVAL);
152:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
153:       assertEquals(29, Node.JSDOC_INFO_PROP);
154:       assertEquals(47, Node.IS_DISPATCHER);
155:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
156:       assertEquals(2, Node.POST_FLAG);
157:       assertEquals(53, Node.INPUT_ID);
158:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
159:       assertEquals(32, Node.INCRDECR_PROP);
160:       assertEquals(1, Node.DECR_FLAG);
161:       assertEquals(51, Node.STATIC_SOURCE_FILE);
162:       assertEquals(30, Node.VAR_ARGS_NAME);
163:       assertEquals(46, Node.IS_NAMESPACE);
164:       assertEquals(54, Node.SLASH_V);
165:       assertEquals(43, Node.IS_CONSTANT_NAME);
166:       assertFalse(node0.isHook());
167:       assertEquals(29, node0.getType());
168:       assertFalse(node0.isFalse());
169:       assertFalse(node0.isBreak());
170:       assertFalse(node0.isSwitch());
171:       assertFalse(node0.isInstanceOf());
172:       assertFalse(node0.isComma());
173:       assertFalse(node0.isWith());
174:       assertFalse(node0.isNot());
175:       assertFalse(node0.isObjectLit());
176:       assertFalse(node0.isString());
177:       assertFalse(node0.isThis());
178:       assertFalse(node0.isFor());
179:       assertFalse(node0.isScript());
180:       assertFalse(node0.isGetProp());
181:       assertFalse(node0.isCase());
182:       assertEquals(48, node0.getLineno());
183:       assertFalse(node0.isCast());
184:       assertFalse(node0.isDebugger());
185:       assertFalse(node0.isRegExp());
186:       assertFalse(node0.isFunction());
187:       assertFalse(node0.isIf());
188:       assertFalse(node0.isNE());
189:       assertFalse(node0.isAnd());
190:       assertFalse(node0.isIn());
191:       assertFalse(node0.isContinue());
192:       assertFalse(node0.isSetterDef());
193:       assertFalse(node0.isInc());
194:       assertFalse(node0.isThrow());
195:       assertFalse(node0.isVar());
196:       assertFalse(node0.isAdd());
197:       assertFalse(node0.isCall());
198:       assertFalse(node0.isBlock());
199:       assertFalse(node0.isNull());
200:       assertFalse(node0.isStringKey());
201:       assertFalse(node0.isParamList());
202:       assertFalse(node0.isName());
203:       assertEquals(199418, node0.getSourcePosition());
204:       assertFalse(node0.isReturn());
205:       assertFalse(node0.isCatch());
206:       assertFalse(node0.hasMoreThanOneChild());
207:       assertFalse(node0.isTypeOf());
208:       assertFalse(node0.isNumber());
209:       assertFalse(node0.isDec());
210:       assertFalse(node0.hasChildren());
211:       assertFalse(node0.isWhile());
212:       assertFalse(node0.isTry());
213:       assertFalse(node0.hasOneChild());
214:       assertFalse(node0.isArrayLit());
215:       assertEquals(2810, node0.getCharno());
216:       assertFalse(node0.isAssign());
217:       assertFalse(node0.isGetterDef());
218:       assertFalse(node0.isTrue());
219:       assertFalse(node0.isExprResult());
220:       assertFalse(node0.isGetElem());
221:       assertFalse(node0.isLabelName());
222:       assertFalse(node0.isVoid());
223:       assertFalse(node0.isDelProp());
224:       assertEquals(0, node0.getChildCount());
225:       assertFalse(node0.isLabel());
226:       assertFalse(node0.isOr());
227:       assertFalse(node0.isDefaultCase());
228:       assertFalse(node0.isEmpty());
229:       assertFalse(node0.isNew());
230:       assertFalse(node0.isDo());
231:       assertFalse(node0.isAssignAdd());
232:       
233:       boolean boolean1 = node0.isFromExterns();
234:       assertFalse(boolean1);
235:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
236:       assertEquals(40, Node.ORIGINALNAME_PROP);
237:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
238:       assertEquals(57, Node.REFLECTED_OBJECT);
239:       assertEquals(52, Node.LENGTH);
240:       assertEquals(8, Node.FLAG_NO_THROWS);
241:       assertEquals(50, Node.FREE_CALL);
242:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
243:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
244:       assertEquals(39, Node.EMPTY_BLOCK);
245:       assertEquals(15, Node.NO_SIDE_EFFECTS);
246:       assertEquals(57, Node.LAST_PROP);
247:       assertEquals(55, Node.INFERRED_FUNCTION);
248:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
249:       assertEquals(12, Node.COLUMN_BITS);
250:       assertEquals(36, Node.QUOTED_PROP);
251:       assertEquals(4095, Node.COLUMN_MASK);
252:       assertEquals(48, Node.DIRECTIVES);
253:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
254:       assertEquals(37, Node.OPT_ARG_NAME);
255:       assertEquals(56, Node.CHANGE_TIME);
256:       assertEquals(49, Node.DIRECT_EVAL);
257:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
258:       assertEquals(29, Node.JSDOC_INFO_PROP);
259:       assertEquals(47, Node.IS_DISPATCHER);
260:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
261:       assertEquals(2, Node.POST_FLAG);
262:       assertEquals(53, Node.INPUT_ID);
263:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
264:       assertEquals(32, Node.INCRDECR_PROP);
265:       assertEquals(1, Node.DECR_FLAG);
266:       assertEquals(51, Node.STATIC_SOURCE_FILE);
267:       assertEquals(30, Node.VAR_ARGS_NAME);
268:       assertEquals(46, Node.IS_NAMESPACE);
269:       assertEquals(54, Node.SLASH_V);
270:       assertEquals(43, Node.IS_CONSTANT_NAME);
271:       assertTrue(boolean1 == boolean0);
272:       assertFalse(node0.isHook());
273:       assertEquals(29, node0.getType());
274:       assertFalse(node0.isFalse());
275:       assertFalse(node0.isBreak());
276:       assertFalse(node0.isSwitch());
277:       assertFalse(node0.isInstanceOf());
278:       assertFalse(node0.isComma());
279:       assertFalse(node0.isWith());
280:       assertFalse(node0.isNot());
281:       assertFalse(node0.isObjectLit());
282:       assertFalse(node0.isString());
283:       assertFalse(node0.isThis());
284:       assertFalse(node0.isFor());
285:       assertFalse(node0.isScript());
286:       assertFalse(node0.isGetProp());
287:       assertFalse(node0.isCase());
288:       assertEquals(48, node0.getLineno());
289:       assertFalse(node0.isCast());
290:       assertFalse(node0.isDebugger());
291:       assertFalse(node0.isRegExp());
292:       assertFalse(node0.isFunction());
293:       assertFalse(node0.isIf());
294:       assertFalse(node0.isNE());
295:       assertFalse(node0.isAnd());
296:       assertFalse(node0.isIn());
297:       assertFalse(node0.isContinue());
298:       assertFalse(node0.isSetterDef());
299:       assertFalse(node0.isInc());
300:       assertFalse(node0.isThrow());
301:       assertFalse(node0.isVar());
302:       assertFalse(node0.isAdd());
303:       assertFalse(node0.isCall());
304:       assertFalse(node0.isBlock());
305:       assertFalse(node0.isNull());
306:       assertFalse(node0.isStringKey());
307:       assertFalse(node0.isParamList());
308:       assertFalse(node0.isName());
309:       assertEquals(199418, node0.getSourcePosition());
310:       assertFalse(node0.isReturn());
311:       assertFalse(node0.isCatch());
312:       assertFalse(node0.hasMoreThanOneChild());
313:       assertFalse(node0.isTypeOf());
314:       assertFalse(node0.isNumber());
315:       assertFalse(node0.isDec());
316:       assertFalse(node0.hasChildren());
317:       assertFalse(node0.isWhile());
318:       assertFalse(node0.isTry());
319:       assertFalse(node0.hasOneChild());
320:       assertFalse(node0.isArrayLit());
321:       assertEquals(2810, node0.getCharno());
322:       assertFalse(node0.isAssign());
323:       assertFalse(node0.isGetterDef());
324:       assertFalse(node0.isTrue());
325:       assertFalse(node0.isExprResult());
326:       assertFalse(node0.isGetElem());
327:       assertFalse(node0.isLabelName());
328:       assertFalse(node0.isVoid());
329:       assertFalse(node0.isDelProp());
330:       assertEquals(0, node0.getChildCount());
331:       assertFalse(node0.isLabel());
332:       assertFalse(node0.isOr());
333:       assertFalse(node0.isDefaultCase());
334:       assertFalse(node0.isEmpty());
335:       assertFalse(node0.isNew());
336:       assertFalse(node0.isDo());
337:       assertFalse(node0.isAssignAdd());
338:       
339:       node0.putBooleanProp((-410), true);
340:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
341:       assertEquals(40, Node.ORIGINALNAME_PROP);
342:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
343:       assertEquals(57, Node.REFLECTED_OBJECT);
344:       assertEquals(52, Node.LENGTH);
345:       assertEquals(8, Node.FLAG_NO_THROWS);
346:       assertEquals(50, Node.FREE_CALL);
347:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
348:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
349:       assertEquals(39, Node.EMPTY_BLOCK);
350:       assertEquals(15, Node.NO_SIDE_EFFECTS);
351:       assertEquals(57, Node.LAST_PROP);
352:       assertEquals(55, Node.INFERRED_FUNCTION);
353:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
354:       assertEquals(12, Node.COLUMN_BITS);
355:       assertEquals(36, Node.QUOTED_PROP);
356:       assertEquals(4095, Node.COLUMN_MASK);
357:       assertEquals(48, Node.DIRECTIVES);
358:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
359:       assertEquals(37, Node.OPT_ARG_NAME);
360:       assertEquals(56, Node.CHANGE_TIME);
361:       assertEquals(49, Node.DIRECT_EVAL);
362:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
363:       assertEquals(29, Node.JSDOC_INFO_PROP);
364:       assertEquals(47, Node.IS_DISPATCHER);
365:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
366:       assertEquals(2, Node.POST_FLAG);
367:       assertEquals(53, Node.INPUT_ID);
368:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
369:       assertEquals(32, Node.INCRDECR_PROP);
370:       assertEquals(1, Node.DECR_FLAG);
371:       assertEquals(51, Node.STATIC_SOURCE_FILE);
372:       assertEquals(30, Node.VAR_ARGS_NAME);
373:       assertEquals(46, Node.IS_NAMESPACE);
374:       assertEquals(54, Node.SLASH_V);
375:       assertEquals(43, Node.IS_CONSTANT_NAME);
376:       assertFalse(node0.isHook());
377:       assertEquals(29, node0.getType());
378:       assertFalse(node0.isFalse());
379:       assertFalse(node0.isBreak());
380:       assertFalse(node0.isSwitch());
381:       assertFalse(node0.isInstanceOf());
382:       assertFalse(node0.isComma());
383:       assertFalse(node0.isWith());
384:       assertFalse(node0.isNot());
385:       assertFalse(node0.isObjectLit());
386:       assertFalse(node0.isString());
387:       assertFalse(node0.isThis());
388:       assertFalse(node0.isFor());
389:       assertFalse(node0.isScript());
390:       assertFalse(node0.isGetProp());
391:       assertFalse(node0.isCase());
392:       assertEquals(48, node0.getLineno());
393:       assertFalse(node0.isCast());
394:       assertFalse(node0.isDebugger());
395:       assertFalse(node0.isRegExp());
396:       assertFalse(node0.isFunction());
397:       assertFalse(node0.isIf());
398:       assertFalse(node0.isNE());
399:       assertFalse(node0.isAnd());
400:       assertFalse(node0.isIn());
401:       assertFalse(node0.isContinue());
402:       assertFalse(node0.isSetterDef());
403:       assertFalse(node0.isInc());
404:       assertFalse(node0.isThrow());
405:       assertFalse(node0.isVar());
406:       assertFalse(node0.isAdd());
407:       assertFalse(node0.isCall());
408:       assertFalse(node0.isBlock());
409:       assertFalse(node0.isNull());
410:       assertFalse(node0.isStringKey());
411:       assertFalse(node0.isParamList());
412:       assertFalse(node0.isName());
413:       assertEquals(199418, node0.getSourcePosition());
414:       assertFalse(node0.isReturn());
415:       assertFalse(node0.isCatch());
416:       assertFalse(node0.hasMoreThanOneChild());
417:       assertFalse(node0.isTypeOf());
418:       assertFalse(node0.isNumber());
419:       assertFalse(node0.isDec());
420:       assertFalse(node0.hasChildren());
421:       assertFalse(node0.isWhile());
422:       assertFalse(node0.isTry());
423:       assertFalse(node0.hasOneChild());
424:       assertFalse(node0.isArrayLit());
425:       assertEquals(2810, node0.getCharno());
426:       assertFalse(node0.isAssign());
427:       assertFalse(node0.isGetterDef());
428:       assertFalse(node0.isTrue());
429:       assertFalse(node0.isExprResult());
430:       assertFalse(node0.isGetElem());
431:       assertFalse(node0.isLabelName());
432:       assertFalse(node0.isVoid());
433:       assertFalse(node0.isDelProp());
434:       assertEquals(0, node0.getChildCount());
435:       assertFalse(node0.isLabel());
436:       assertFalse(node0.isOr());
437:       assertFalse(node0.isDefaultCase());
438:       assertFalse(node0.isEmpty());
439:       assertFalse(node0.isNew());
440:       assertFalse(node0.isDo());
441:       assertFalse(node0.isAssignAdd());
442:       
443:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
444:       assertNotNull(simpleErrorReporter0);
445:       
446:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
447:       assertNotNull(jSTypeRegistry0);
448:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
449:       
450:       Node node1 = new Node(38);
451:       assertEquals(52, Node.LENGTH);
452:       assertEquals(57, Node.REFLECTED_OBJECT);
453:       assertEquals(40, Node.ORIGINALNAME_PROP);
454:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
455:       assertEquals(15, Node.NO_SIDE_EFFECTS);
456:       assertEquals(57, Node.LAST_PROP);
457:       assertEquals(30, Node.VAR_ARGS_NAME);
458:       assertEquals(1, Node.DECR_FLAG);
459:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
460:       assertEquals(12, Node.COLUMN_BITS);
461:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
462:       assertEquals(48, Node.DIRECTIVES);
463:       assertEquals(37, Node.OPT_ARG_NAME);
464:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
465:       assertEquals(8, Node.FLAG_NO_THROWS);
466:       assertEquals(39, Node.EMPTY_BLOCK);
467:       assertEquals(4095, Node.COLUMN_MASK);
468:       assertEquals(55, Node.INFERRED_FUNCTION);
469:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
470:       assertEquals(49, Node.DIRECT_EVAL);
471:       assertEquals(36, Node.QUOTED_PROP);
472:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
473:       assertEquals(56, Node.CHANGE_TIME);
474:       assertEquals(29, Node.JSDOC_INFO_PROP);
475:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
476:       assertEquals(53, Node.INPUT_ID);
477:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
478:       assertEquals(47, Node.IS_DISPATCHER);
479:       assertEquals(2, Node.POST_FLAG);
480:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
481:       assertEquals(32, Node.INCRDECR_PROP);
482:       assertEquals(46, Node.IS_NAMESPACE);
483:       assertEquals(51, Node.STATIC_SOURCE_FILE);
484:       assertEquals(50, Node.FREE_CALL);
485:       assertEquals(54, Node.SLASH_V);
486:       assertEquals(43, Node.IS_CONSTANT_NAME);
487:       assertNotNull(node1);
488:       assertFalse(node1.equals((Object)node0));
489:       assertFalse(node1.isNew());
490:       assertFalse(node1.isAdd());
491:       assertFalse(node1.isCall());
492:       assertFalse(node1.isNull());
493:       assertFalse(node1.isStringKey());
494:       assertFalse(node1.isTypeOf());
495:       assertEquals((-1), node1.getSourcePosition());
496:       assertFalse(node1.isDec());
497:       assertEquals((-1), node1.getLineno());
498:       assertFalse(node1.isNumber());
499:       assertFalse(node1.isCatch());
500:       assertFalse(node1.hasMoreThanOneChild());
501:       assertFalse(node1.hasOneChild());
502:       assertFalse(node1.isAssign());
503:       assertFalse(node1.isWhile());
504:       assertFalse(node1.isReturn());
505:       assertFalse(node1.hasChildren());
506:       assertFalse(node1.isBlock());
507:       assertFalse(node1.isDebugger());
508:       assertFalse(node1.isFunction());
509:       assertFalse(node1.isRegExp());
510:       assertFalse(node1.isWith());
511:       assertFalse(node1.isCast());
512:       assertFalse(node1.isAnd());
513:       assertFalse(node1.isObjectLit());
514:       assertFalse(node1.isNot());
515:       assertFalse(node1.isIf());
516:       assertFalse(node1.isNE());
517:       assertTrue(node1.isName());
518:       assertFalse(node1.isSetterDef());
519:       assertFalse(node1.isIn());
520:       assertFalse(node1.isContinue());
521:       assertFalse(node1.isFalse());
522:       assertFalse(node1.isThrow());
523:       assertFalse(node1.isInc());
524:       assertEquals((-1), node1.getCharno());
525:       assertFalse(node1.isSwitch());
526:       assertFalse(node1.isString());
527:       assertFalse(node1.isThis());
528:       assertFalse(node1.isGetProp());
529:       assertFalse(node1.isComma());
530:       assertFalse(node1.isGetterDef());
531:       assertFalse(node1.isBreak());
532:       assertFalse(node1.isInstanceOf());
533:       assertFalse(node1.isCase());
534:       assertFalse(node1.isHook());
535:       assertFalse(node1.isFor());
536:       assertFalse(node1.isVoid());
537:       assertFalse(node1.isTrue());
538:       assertFalse(node1.isExprResult());
539:       assertFalse(node1.isTry());
540:       assertFalse(node1.isScript());
541:       assertFalse(node1.isGetElem());
542:       assertFalse(node1.isArrayLit());
543:       assertFalse(node1.isLabelName());
544:       assertFalse(node1.isDelProp());
545:       assertFalse(node1.isParamList());
546:       assertFalse(node1.isLabel());
547:       assertFalse(node1.isOr());
548:       assertFalse(node1.isEmpty());
549:       assertFalse(node1.isDo());
550:       assertEquals(0, node1.getChildCount());
551:       assertEquals(38, node1.getType());
552:       assertFalse(node1.isDefaultCase());
553:       assertFalse(node1.isAssignAdd());
554:       assertFalse(node1.isVar());
555:       
556:       Node node2 = new Node(42, node1);
557:       assertEquals(52, Node.LENGTH);
558:       assertEquals(57, Node.REFLECTED_OBJECT);
559:       assertEquals(40, Node.ORIGINALNAME_PROP);
560:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
561:       assertEquals(15, Node.NO_SIDE_EFFECTS);
562:       assertEquals(57, Node.LAST_PROP);
563:       assertEquals(30, Node.VAR_ARGS_NAME);
564:       assertEquals(1, Node.DECR_FLAG);
565:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
566:       assertEquals(12, Node.COLUMN_BITS);
567:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
568:       assertEquals(48, Node.DIRECTIVES);
569:       assertEquals(37, Node.OPT_ARG_NAME);
570:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
571:       assertEquals(8, Node.FLAG_NO_THROWS);
572:       assertEquals(39, Node.EMPTY_BLOCK);
573:       assertEquals(4095, Node.COLUMN_MASK);
574:       assertEquals(55, Node.INFERRED_FUNCTION);
575:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
576:       assertEquals(49, Node.DIRECT_EVAL);
577:       assertEquals(36, Node.QUOTED_PROP);
578:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
579:       assertEquals(56, Node.CHANGE_TIME);
580:       assertEquals(29, Node.JSDOC_INFO_PROP);
581:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
582:       assertEquals(53, Node.INPUT_ID);
583:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
584:       assertEquals(47, Node.IS_DISPATCHER);
585:       assertEquals(2, Node.POST_FLAG);
586:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
587:       assertEquals(32, Node.INCRDECR_PROP);
588:       assertEquals(46, Node.IS_NAMESPACE);
589:       assertEquals(51, Node.STATIC_SOURCE_FILE);
590:       assertEquals(50, Node.FREE_CALL);
591:       assertEquals(54, Node.SLASH_V);
592:       assertEquals(43, Node.IS_CONSTANT_NAME);
593:       assertEquals(32, Node.INCRDECR_PROP);
594:       assertEquals(12, Node.COLUMN_BITS);
595:       assertEquals(46, Node.IS_NAMESPACE);
596:       assertEquals(51, Node.STATIC_SOURCE_FILE);
597:       assertEquals(2, Node.POST_FLAG);
598:       assertEquals(30, Node.VAR_ARGS_NAME);
599:       assertEquals(56, Node.CHANGE_TIME);
600:       assertEquals(37, Node.OPT_ARG_NAME);
601:       assertEquals(49, Node.DIRECT_EVAL);
602:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
603:       assertEquals(54, Node.SLASH_V);
604:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
605:       assertEquals(50, Node.FREE_CALL);
606:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
607:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
608:       assertEquals(1, Node.DECR_FLAG);
609:       assertEquals(4095, Node.COLUMN_MASK);
610:       assertEquals(55, Node.INFERRED_FUNCTION);
611:       assertEquals(8, Node.FLAG_NO_THROWS);
612:       assertEquals(43, Node.IS_CONSTANT_NAME);
613:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
614:       assertEquals(40, Node.ORIGINALNAME_PROP);
615:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
616:       assertEquals(48, Node.DIRECTIVES);
617:       assertEquals(52, Node.LENGTH);
618:       assertEquals(53, Node.INPUT_ID);
619:       assertEquals(57, Node.REFLECTED_OBJECT);
620:       assertEquals(36, Node.QUOTED_PROP);
621:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
622:       assertEquals(15, Node.NO_SIDE_EFFECTS);
623:       assertEquals(57, Node.LAST_PROP);
624:       assertEquals(47, Node.IS_DISPATCHER);
625:       assertEquals(29, Node.JSDOC_INFO_PROP);
626:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
627:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
628:       assertEquals(39, Node.EMPTY_BLOCK);
629:       assertNotNull(node2);
630:       assertFalse(node1.equals((Object)node0));
631:       assertFalse(node2.equals((Object)node0));
632:       assertFalse(node2.equals((Object)node1));
633:       assertFalse(node1.isNew());
634:       assertFalse(node1.isAdd());
635:       assertFalse(node1.isCall());
636:       assertFalse(node1.isNull());
637:       assertFalse(node1.isStringKey());
638:       assertFalse(node1.isTypeOf());
639:       assertEquals((-1), node1.getSourcePosition());
640:       assertFalse(node1.isDec());
641:       assertEquals((-1), node1.getLineno());
642:       assertFalse(node1.isNumber());
643:       assertFalse(node1.isCatch());
644:       assertFalse(node1.hasMoreThanOneChild());
645:       assertFalse(node1.hasOneChild());
646:       assertFalse(node1.isAssign());
647:       assertFalse(node1.isWhile());
648:       assertFalse(node1.isReturn());
649:       assertFalse(node1.hasChildren());
650:       assertFalse(node1.isBlock());
651:       assertFalse(node1.isDebugger());
652:       assertFalse(node1.isFunction());
653:       assertFalse(node1.isRegExp());
654:       assertFalse(node1.isWith());
655:       assertFalse(node1.isCast());
656:       assertFalse(node1.isAnd());
657:       assertFalse(node1.isObjectLit());
658:       assertFalse(node1.isNot());
659:       assertFalse(node1.isIf());
660:       assertFalse(node1.isNE());
661:       assertTrue(node1.isName());
662:       assertFalse(node1.isSetterDef());
663:       assertFalse(node1.isIn());
664:       assertFalse(node1.isContinue());
665:       assertFalse(node1.isFalse());
666:       assertFalse(node1.isThrow());
667:       assertFalse(node1.isInc());
668:       assertEquals((-1), node1.getCharno());
669:       assertFalse(node1.isSwitch());
670:       assertFalse(node1.isString());
671:       assertFalse(node1.isThis());
672:       assertFalse(node1.isGetProp());
673:       assertFalse(node1.isComma());
674:       assertFalse(node1.isGetterDef());
675:       assertFalse(node1.isBreak());
676:       assertFalse(node1.isInstanceOf());
677:       assertFalse(node1.isCase());
678:       assertFalse(node1.isHook());
679:       assertFalse(node1.isFor());
680:       assertFalse(node1.isVoid());
681:       assertFalse(node1.isTrue());
682:       assertFalse(node1.isExprResult());
683:       assertFalse(node1.isTry());
684:       assertFalse(node1.isScript());
685:       assertFalse(node1.isGetElem());
686:       assertFalse(node1.isArrayLit());
687:       assertFalse(node1.isLabelName());
688:       assertFalse(node1.isDelProp());
689:       assertFalse(node1.isParamList());
690:       assertFalse(node1.isLabel());
691:       assertFalse(node1.isOr());
692:       assertFalse(node1.isEmpty());
693:       assertFalse(node1.isDo());
694:       assertEquals(0, node1.getChildCount());
695:       assertEquals(38, node1.getType());
696:       assertFalse(node1.isDefaultCase());
697:       assertFalse(node1.isAssignAdd());
698:       assertFalse(node1.isVar());
699:       assertFalse(node2.isReturn());
700:       assertFalse(node2.isLabel());
701:       assertFalse(node2.isNumber());
702:       assertFalse(node2.isTypeOf());
703:       assertFalse(node2.isDec());
704:       assertEquals((-1), node2.getSourcePosition());
705:       assertFalse(node2.isOr());
706:       assertFalse(node2.isAssign());
707:       assertFalse(node2.isWhile());
708:       assertFalse(node2.isAssignAdd());
709:       assertFalse(node2.isDo());
710:       assertFalse(node2.isScript());
711:       assertFalse(node2.isNot());
712:       assertFalse(node2.isAnd());
713:       assertFalse(node2.isContinue());
714:       assertFalse(node2.isStringKey());
715:       assertFalse(node2.isCast());
716:       assertFalse(node2.isLabelName());
717:       assertFalse(node2.isComma());
718:       assertFalse(node2.isGetProp());
719:       assertFalse(node2.isNull());
720:       assertFalse(node2.isObjectLit());
721:       assertEquals(42, node2.getType());
722:       assertFalse(node2.isVar());
723:       assertFalse(node2.isDefaultCase());
724:       assertFalse(node2.isNew());
725:       assertFalse(node2.isTrue());
726:       assertFalse(node2.isExprResult());
727:       assertFalse(node2.isAdd());
728:       assertFalse(node2.isCall());
729:       assertTrue(node2.isThis());
730:       assertFalse(node2.isGetElem());
731:       assertFalse(node2.isBreak());
732:       assertFalse(node2.isName());
733:       assertFalse(node2.isVoid());
734:       assertFalse(node2.isDelProp());
735:       assertFalse(node2.isNE());
736:       assertTrue(node2.hasChildren());
737:       assertTrue(node2.hasOneChild());
738:       assertEquals(1, node2.getChildCount());
739:       assertFalse(node2.isIn());
740:       assertFalse(node2.isGetterDef());
741:       assertFalse(node2.isEmpty());
742:       assertFalse(node2.isFor());
743:       assertFalse(node2.isCase());
744:       assertFalse(node2.isTry());
745:       assertFalse(node2.isDebugger());
746:       assertFalse(node2.isFunction());
747:       assertEquals((-1), node2.getCharno());
748:       assertFalse(node2.isSwitch());
749:       assertFalse(node2.isString());
750:       assertFalse(node2.isArrayLit());
751:       assertFalse(node2.isParamList());
752:       assertFalse(node2.isSetterDef());
753:       assertFalse(node2.isFalse());
754:       assertFalse(node2.isHook());
755:       assertFalse(node2.isThrow());
756:       assertFalse(node2.isInc());
757:       assertFalse(node2.isBlock());
758:       assertFalse(node2.isWith());
759:       assertFalse(node2.isRegExp());
760:       assertFalse(node2.hasMoreThanOneChild());
761:       assertFalse(node2.isInstanceOf());
762:       assertFalse(node2.isCatch());
763:       assertEquals((-1), node2.getLineno());
764:       assertFalse(node2.isIf());
765:       
766:       Iterable<Node> iterable0 = node1.children();
767:       assertFalse(iterable0.contains(node1));
768:       assertNotSame(node1, node0);
769:       assertNotSame(node1, node2);
770:       assertEquals(52, Node.LENGTH);
771:       assertEquals(57, Node.REFLECTED_OBJECT);
772:       assertEquals(40, Node.ORIGINALNAME_PROP);
773:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
774:       assertEquals(15, Node.NO_SIDE_EFFECTS);
775:       assertEquals(57, Node.LAST_PROP);
776:       assertEquals(30, Node.VAR_ARGS_NAME);
777:       assertEquals(1, Node.DECR_FLAG);
778:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
779:       assertEquals(12, Node.COLUMN_BITS);
780:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
781:       assertEquals(48, Node.DIRECTIVES);
782:       assertEquals(37, Node.OPT_ARG_NAME);
783:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
784:       assertEquals(8, Node.FLAG_NO_THROWS);
785:       assertEquals(39, Node.EMPTY_BLOCK);
786:       assertEquals(4095, Node.COLUMN_MASK);
787:       assertEquals(55, Node.INFERRED_FUNCTION);
788:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
789:       assertEquals(49, Node.DIRECT_EVAL);
790:       assertEquals(36, Node.QUOTED_PROP);
791:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
792:       assertEquals(56, Node.CHANGE_TIME);
793:       assertEquals(29, Node.JSDOC_INFO_PROP);
794:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
795:       assertEquals(53, Node.INPUT_ID);
796:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
797:       assertEquals(47, Node.IS_DISPATCHER);
798:       assertEquals(2, Node.POST_FLAG);
799:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
800:       assertEquals(32, Node.INCRDECR_PROP);
801:       assertEquals(46, Node.IS_NAMESPACE);
802:       assertEquals(51, Node.STATIC_SOURCE_FILE);
803:       assertEquals(50, Node.FREE_CALL);
804:       assertEquals(54, Node.SLASH_V);
805:       assertEquals(43, Node.IS_CONSTANT_NAME);
806:       assertNotNull(iterable0);
807:       assertFalse(node1.equals((Object)node0));
808:       assertFalse(node1.equals((Object)node2));
809:       assertFalse(node1.isNew());
810:       assertFalse(node1.isAdd());
811:       assertFalse(node1.isCall());
812:       assertFalse(node1.isNull());
813:       assertFalse(node1.isStringKey());
814:       assertFalse(node1.isTypeOf());
815:       assertEquals((-1), node1.getSourcePosition());
816:       assertFalse(node1.isDec());
817:       assertEquals((-1), node1.getLineno());
818:       assertFalse(node1.isNumber());
819:       assertFalse(node1.isCatch());
820:       assertFalse(node1.hasMoreThanOneChild());
821:       assertFalse(node1.hasOneChild());
822:       assertFalse(node1.isAssign());
823:       assertFalse(node1.isWhile());
824:       assertFalse(node1.isReturn());
825:       assertFalse(node1.hasChildren());
826:       assertFalse(node1.isBlock());
827:       assertFalse(node1.isDebugger());
828:       assertFalse(node1.isFunction());
829:       assertFalse(node1.isRegExp());
830:       assertFalse(node1.isWith());
831:       assertFalse(node1.isCast());
832:       assertFalse(node1.isAnd());
833:       assertFalse(node1.isObjectLit());
834:       assertFalse(node1.isNot());
835:       assertFalse(node1.isIf());
836:       assertFalse(node1.isNE());
837:       assertTrue(node1.isName());
838:       assertFalse(node1.isSetterDef());
839:       assertFalse(node1.isIn());
840:       assertFalse(node1.isContinue());
841:       assertFalse(node1.isFalse());
842:       assertFalse(node1.isThrow());
843:       assertFalse(node1.isInc());
844:       assertEquals((-1), node1.getCharno());
845:       assertFalse(node1.isSwitch());
846:       assertFalse(node1.isString());
847:       assertFalse(node1.isThis());
848:       assertFalse(node1.isGetProp());
849:       assertFalse(node1.isComma());
850:       assertFalse(node1.isGetterDef());
851:       assertFalse(node1.isBreak());
852:       assertFalse(node1.isInstanceOf());
853:       assertFalse(node1.isCase());
854:       assertFalse(node1.isHook());
855:       assertFalse(node1.isFor());
856:       assertFalse(node1.isVoid());
857:       assertFalse(node1.isTrue());
858:       assertFalse(node1.isExprResult());
859:       assertFalse(node1.isTry());
860:       assertFalse(node1.isScript());
861:       assertFalse(node1.isGetElem());
862:       assertFalse(node1.isArrayLit());
863:       assertFalse(node1.isLabelName());
864:       assertFalse(node1.isDelProp());
865:       assertFalse(node1.isParamList());
866:       assertFalse(node1.isLabel());
867:       assertFalse(node1.isOr());
868:       assertFalse(node1.isEmpty());
869:       assertFalse(node1.isDo());
870:       assertEquals(0, node1.getChildCount());
871:       assertEquals(38, node1.getType());
872:       assertFalse(node1.isDefaultCase());
873:       assertFalse(node1.isAssignAdd());
874:       assertFalse(node1.isVar());
875:       
876:       boolean boolean2 = node1.isGetProp();
877:       assertFalse(boolean2);
878:       assertNotSame(node1, node0);
879:       assertNotSame(node1, node2);
880:       assertEquals(52, Node.LENGTH);
881:       assertEquals(57, Node.REFLECTED_OBJECT);
882:       assertEquals(40, Node.ORIGINALNAME_PROP);
883:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
884:       assertEquals(15, Node.NO_SIDE_EFFECTS);
885:       assertEquals(57, Node.LAST_PROP);
886:       assertEquals(30, Node.VAR_ARGS_NAME);
887:       assertEquals(1, Node.DECR_FLAG);
888:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
889:       assertEquals(12, Node.COLUMN_BITS);
890:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
891:       assertEquals(48, Node.DIRECTIVES);
892:       assertEquals(37, Node.OPT_ARG_NAME);
893:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
894:       assertEquals(8, Node.FLAG_NO_THROWS);
895:       assertEquals(39, Node.EMPTY_BLOCK);
896:       assertEquals(4095, Node.COLUMN_MASK);
897:       assertEquals(55, Node.INFERRED_FUNCTION);
898:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
899:       assertEquals(49, Node.DIRECT_EVAL);
900:       assertEquals(36, Node.QUOTED_PROP);
901:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
902:       assertEquals(56, Node.CHANGE_TIME);
903:       assertEquals(29, Node.JSDOC_INFO_PROP);
904:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
905:       assertEquals(53, Node.INPUT_ID);
906:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
907:       assertEquals(47, Node.IS_DISPATCHER);
908:       assertEquals(2, Node.POST_FLAG);
909:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
910:       assertEquals(32, Node.INCRDECR_PROP);
911:       assertEquals(46, Node.IS_NAMESPACE);
912:       assertEquals(51, Node.STATIC_SOURCE_FILE);
913:       assertEquals(50, Node.FREE_CALL);
914:       assertEquals(54, Node.SLASH_V);
915:       assertEquals(43, Node.IS_CONSTANT_NAME);
916:       assertFalse(node1.equals((Object)node0));
917:       assertFalse(node1.equals((Object)node2));
918:       assertTrue(boolean2 == boolean0);
919:       assertTrue(boolean2 == boolean1);
920:       assertFalse(node1.isNew());
921:       assertFalse(node1.isAdd());
922:       assertFalse(node1.isCall());
923:       assertFalse(node1.isNull());
924:       assertFalse(node1.isStringKey());
925:       assertFalse(node1.isTypeOf());
926:       assertEquals((-1), node1.getSourcePosition());
927:       assertFalse(node1.isDec());
928:       assertEquals((-1), node1.getLineno());
929:       assertFalse(node1.isNumber());
930:       assertFalse(node1.isCatch());
931:       assertFalse(node1.hasMoreThanOneChild());
932:       assertFalse(node1.hasOneChild());
933:       assertFalse(node1.isAssign());
934:       assertFalse(node1.isWhile());
935:       assertFalse(node1.isReturn());
936:       assertFalse(node1.hasChildren());
937:       assertFalse(node1.isBlock());
938:       assertFalse(node1.isDebugger());
939:       assertFalse(node1.isFunction());
940:       assertFalse(node1.isRegExp());
941:       assertFalse(node1.isWith());
942:       assertFalse(node1.isCast());
943:       assertFalse(node1.isAnd());
944:       assertFalse(node1.isObjectLit());
945:       assertFalse(node1.isNot());
946:       assertFalse(node1.isIf());
947:       assertFalse(node1.isNE());
948:       assertTrue(node1.isName());
949:       assertFalse(node1.isSetterDef());
950:       assertFalse(node1.isIn());
951:       assertFalse(node1.isContinue());
952:       assertFalse(node1.isFalse());
953:       assertFalse(node1.isThrow());
954:       assertFalse(node1.isInc());
955:       assertEquals((-1), node1.getCharno());
956:       assertFalse(node1.isSwitch());
957:       assertFalse(node1.isString());
958:       assertFalse(node1.isThis());
959:       assertFalse(node1.isGetProp());
960:       assertFalse(node1.isComma());
961:       assertFalse(node1.isGetterDef());
962:       assertFalse(node1.isBreak());
963:       assertFalse(node1.isInstanceOf());
964:       assertFalse(node1.isCase());
965:       assertFalse(node1.isHook());
966:       assertFalse(node1.isFor());
967:       assertFalse(node1.isVoid());
968:       assertFalse(node1.isTrue());
969:       assertFalse(node1.isExprResult());
970:       assertFalse(node1.isTry());
971:       assertFalse(node1.isScript());
972:       assertFalse(node1.isGetElem());
973:       assertFalse(node1.isArrayLit());
974:       assertFalse(node1.isLabelName());
975:       assertFalse(node1.isDelProp());
976:       assertFalse(node1.isParamList());
977:       assertFalse(node1.isLabel());
978:       assertFalse(node1.isOr());
979:       assertFalse(node1.isEmpty());
980:       assertFalse(node1.isDo());
981:       assertEquals(0, node1.getChildCount());
982:       assertEquals(38, node1.getType());
983:       assertFalse(node1.isDefaultCase());
984:       assertFalse(node1.isAssignAdd());
985:       assertFalse(node1.isVar());
986:       
987:       boolean boolean3 = node1.isParamList();
988:       assertFalse(boolean3);
989:       assertNotSame(node1, node0);
990:       assertNotSame(node1, node2);
991:       assertEquals(52, Node.LENGTH);
992:       assertEquals(57, Node.REFLECTED_OBJECT);
993:       assertEquals(40, Node.ORIGINALNAME_PROP);
994:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
995:       assertEquals(15, Node.NO_SIDE_EFFECTS);
996:       assertEquals(57, Node.LAST_PROP);
997:       assertEquals(30, Node.VAR_ARGS_NAME);
998:       assertEquals(1, Node.DECR_FLAG);
999:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1000:       assertEquals(12, Node.COLUMN_BITS);
1001:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1002:       assertEquals(48, Node.DIRECTIVES);
1003:       assertEquals(37, Node.OPT_ARG_NAME);
1004:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1005:       assertEquals(8, Node.FLAG_NO_THROWS);
1006:       assertEquals(39, Node.EMPTY_BLOCK);
1007:       assertEquals(4095, Node.COLUMN_MASK);
1008:       assertEquals(55, Node.INFERRED_FUNCTION);
1009:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1010:       assertEquals(49, Node.DIRECT_EVAL);
1011:       assertEquals(36, Node.QUOTED_PROP);
1012:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1013:       assertEquals(56, Node.CHANGE_TIME);
1014:       assertEquals(29, Node.JSDOC_INFO_PROP);
1015:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1016:       assertEquals(53, Node.INPUT_ID);
1017:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1018:       assertEquals(47, Node.IS_DISPATCHER);
1019:       assertEquals(2, Node.POST_FLAG);
1020:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1021:       assertEquals(32, Node.INCRDECR_PROP);
1022:       assertEquals(46, Node.IS_NAMESPACE);
1023:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1024:       assertEquals(50, Node.FREE_CALL);
1025:       assertEquals(54, Node.SLASH_V);
1026:       assertEquals(43, Node.IS_CONSTANT_NAME);
1027:       assertFalse(node1.equals((Object)node0));
1028:       assertFalse(node1.equals((Object)node2));
1029:       assertTrue(boolean3 == boolean2);
1030:       assertTrue(boolean3 == boolean1);
1031:       assertTrue(boolean3 == boolean0);
1032:       assertFalse(node1.isNew());
1033:       assertFalse(node1.isAdd());
1034:       assertFalse(node1.isCall());
1035:       assertFalse(node1.isNull());
1036:       assertFalse(node1.isStringKey());
1037:       assertFalse(node1.isTypeOf());
1038:       assertEquals((-1), node1.getSourcePosition());
1039:       assertFalse(node1.isDec());
1040:       assertEquals((-1), node1.getLineno());
1041:       assertFalse(node1.isNumber());
1042:       assertFalse(node1.isCatch());
1043:       assertFalse(node1.hasMoreThanOneChild());
1044:       assertFalse(node1.hasOneChild());
1045:       assertFalse(node1.isAssign());
1046:       assertFalse(node1.isWhile());
1047:       assertFalse(node1.isReturn());
1048:       assertFalse(node1.hasChildren());
1049:       assertFalse(node1.isBlock());
1050:       assertFalse(node1.isDebugger());
1051:       assertFalse(node1.isFunction());
1052:       assertFalse(node1.isRegExp());
1053:       assertFalse(node1.isWith());
1054:       assertFalse(node1.isCast());
1055:       assertFalse(node1.isAnd());
1056:       assertFalse(node1.isObjectLit());
1057:       assertFalse(node1.isNot());
1058:       assertFalse(node1.isIf());
1059:       assertFalse(node1.isNE());
1060:       assertTrue(node1.isName());
1061:       assertFalse(node1.isSetterDef());
1062:       assertFalse(node1.isIn());
1063:       assertFalse(node1.isContinue());
1064:       assertFalse(node1.isFalse());
1065:       assertFalse(node1.isThrow());
1066:       assertFalse(node1.isInc());
1067:       assertEquals((-1), node1.getCharno());
1068:       assertFalse(node1.isSwitch());
1069:       assertFalse(node1.isString());
1070:       assertFalse(node1.isThis());
1071:       assertFalse(node1.isGetProp());
1072:       assertFalse(node1.isComma());
1073:       assertFalse(node1.isGetterDef());
1074:       assertFalse(node1.isBreak());
1075:       assertFalse(node1.isInstanceOf());
1076:       assertFalse(node1.isCase());
1077:       assertFalse(node1.isHook());
1078:       assertFalse(node1.isFor());
1079:       assertFalse(node1.isVoid());
1080:       assertFalse(node1.isTrue());
1081:       assertFalse(node1.isExprResult());
1082:       assertFalse(node1.isTry());
1083:       assertFalse(node1.isScript());
1084:       assertFalse(node1.isGetElem());
1085:       assertFalse(node1.isArrayLit());
1086:       assertFalse(node1.isLabelName());
1087:       assertFalse(node1.isDelProp());
1088:       assertFalse(node1.isParamList());
1089:       assertFalse(node1.isLabel());
1090:       assertFalse(node1.isOr());
1091:       assertFalse(node1.isEmpty());
1092:       assertFalse(node1.isDo());
1093:       assertEquals(0, node1.getChildCount());
1094:       assertEquals(38, node1.getType());
1095:       assertFalse(node1.isDefaultCase());
1096:       assertFalse(node1.isAssignAdd());
1097:       assertFalse(node1.isVar());
1098:       
1099:       boolean boolean4 = node0.isSetterDef();
1100:       assertFalse(boolean4);
1101:       assertNotSame(node0, node2);
1102:       assertNotSame(node0, node1);
1103:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1104:       assertEquals(40, Node.ORIGINALNAME_PROP);
1105:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1106:       assertEquals(57, Node.REFLECTED_OBJECT);
1107:       assertEquals(52, Node.LENGTH);
1108:       assertEquals(8, Node.FLAG_NO_THROWS);
1109:       assertEquals(50, Node.FREE_CALL);
1110:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1111:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1112:       assertEquals(39, Node.EMPTY_BLOCK);
1113:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1114:       assertEquals(57, Node.LAST_PROP);
1115:       assertEquals(55, Node.INFERRED_FUNCTION);
1116:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1117:       assertEquals(12, Node.COLUMN_BITS);
1118:       assertEquals(36, Node.QUOTED_PROP);
1119:       assertEquals(4095, Node.COLUMN_MASK);
1120:       assertEquals(48, Node.DIRECTIVES);
1121:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1122:       assertEquals(37, Node.OPT_ARG_NAME);
1123:       assertEquals(56, Node.CHANGE_TIME);
1124:       assertEquals(49, Node.DIRECT_EVAL);
1125:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1126:       assertEquals(29, Node.JSDOC_INFO_PROP);
1127:       assertEquals(47, Node.IS_DISPATCHER);
1128:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1129:       assertEquals(2, Node.POST_FLAG);
1130:       assertEquals(53, Node.INPUT_ID);
1131:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1132:       assertEquals(32, Node.INCRDECR_PROP);
1133:       assertEquals(1, Node.DECR_FLAG);
1134:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1135:       assertEquals(30, Node.VAR_ARGS_NAME);
1136:       assertEquals(46, Node.IS_NAMESPACE);
1137:       assertEquals(54, Node.SLASH_V);
1138:       assertEquals(43, Node.IS_CONSTANT_NAME);
1139:       assertFalse(node0.equals((Object)node2));
1140:       assertFalse(node0.equals((Object)node1));
1141:       assertTrue(boolean4 == boolean1);
1142:       assertTrue(boolean4 == boolean3);
1143:       assertTrue(boolean4 == boolean0);
1144:       assertTrue(boolean4 == boolean2);
1145:       assertFalse(node0.isHook());
1146:       assertEquals(29, node0.getType());
1147:       assertFalse(node0.isFalse());
1148:       assertFalse(node0.isBreak());
1149:       assertFalse(node0.isSwitch());
1150:       assertFalse(node0.isInstanceOf());
1151:       assertFalse(node0.isComma());
1152:       assertFalse(node0.isWith());
1153:       assertFalse(node0.isNot());
1154:       assertFalse(node0.isObjectLit());
1155:       assertFalse(node0.isString());
1156:       assertFalse(node0.isThis());
1157:       assertFalse(node0.isFor());
1158:       assertFalse(node0.isScript());
1159:       assertFalse(node0.isGetProp());
1160:       assertFalse(node0.isCase());
1161:       assertEquals(48, node0.getLineno());
1162:       assertFalse(node0.isCast());
1163:       assertFalse(node0.isDebugger());
1164:       assertFalse(node0.isRegExp());
1165:       assertFalse(node0.isFunction());
1166:       assertFalse(node0.isIf());
1167:       assertFalse(node0.isNE());
1168:       assertFalse(node0.isAnd());
1169:       assertFalse(node0.isIn());
1170:       assertFalse(node0.isContinue());
1171:       assertFalse(node0.isSetterDef());
1172:       assertFalse(node0.isInc());
1173:       assertFalse(node0.isThrow());
1174:       assertFalse(node0.isVar());
1175:       assertFalse(node0.isAdd());
1176:       assertFalse(node0.isCall());
1177:       assertFalse(node0.isBlock());
1178:       assertFalse(node0.isNull());
1179:       assertFalse(node0.isStringKey());
1180:       assertFalse(node0.isParamList());
1181:       assertFalse(node0.isName());
1182:       assertEquals(199418, node0.getSourcePosition());
1183:       assertFalse(node0.isReturn());
1184:       assertFalse(node0.isCatch());
1185:       assertFalse(node0.hasMoreThanOneChild());
1186:       assertFalse(node0.isTypeOf());
1187:       assertFalse(node0.isNumber());
1188:       assertFalse(node0.isDec());
1189:       assertFalse(node0.hasChildren());
1190:       assertFalse(node0.isWhile());
1191:       assertFalse(node0.isTry());
1192:       assertFalse(node0.hasOneChild());
1193:       assertFalse(node0.isArrayLit());
1194:       assertEquals(2810, node0.getCharno());
1195:       assertFalse(node0.isAssign());
1196:       assertFalse(node0.isGetterDef());
1197:       assertFalse(node0.isTrue());
1198:       assertFalse(node0.isExprResult());
1199:       assertFalse(node0.isGetElem());
1200:       assertFalse(node0.isLabelName());
1201:       assertFalse(node0.isVoid());
1202:       assertFalse(node0.isDelProp());
1203:       assertEquals(0, node0.getChildCount());
1204:       assertFalse(node0.isLabel());
1205:       assertFalse(node0.isOr());
1206:       assertFalse(node0.isDefaultCase());
1207:       assertFalse(node0.isEmpty());
1208:       assertFalse(node0.isNew());
1209:       assertFalse(node0.isDo());
1210:       assertFalse(node0.isAssignAdd());
1211:       
1212:       boolean boolean5 = node0.isNoSideEffectsCall();
1213:       assertFalse(boolean5);
1214:       assertNotSame(node0, node2);
1215:       assertNotSame(node0, node1);
1216:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1217:       assertEquals(40, Node.ORIGINALNAME_PROP);
1218:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1219:       assertEquals(57, Node.REFLECTED_OBJECT);
1220:       assertEquals(52, Node.LENGTH);
1221:       assertEquals(8, Node.FLAG_NO_THROWS);
1222:       assertEquals(50, Node.FREE_CALL);
1223:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1224:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1225:       assertEquals(39, Node.EMPTY_BLOCK);
1226:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1227:       assertEquals(57, Node.LAST_PROP);
1228:       assertEquals(55, Node.INFERRED_FUNCTION);
1229:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1230:       assertEquals(12, Node.COLUMN_BITS);
1231:       assertEquals(36, Node.QUOTED_PROP);
1232:       assertEquals(4095, Node.COLUMN_MASK);
1233:       assertEquals(48, Node.DIRECTIVES);
1234:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1235:       assertEquals(37, Node.OPT_ARG_NAME);
1236:       assertEquals(56, Node.CHANGE_TIME);
1237:       assertEquals(49, Node.DIRECT_EVAL);
1238:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1239:       assertEquals(29, Node.JSDOC_INFO_PROP);
1240:       assertEquals(47, Node.IS_DISPATCHER);
1241:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1242:       assertEquals(2, Node.POST_FLAG);
1243:       assertEquals(53, Node.INPUT_ID);
1244:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1245:       assertEquals(32, Node.INCRDECR_PROP);
1246:       assertEquals(1, Node.DECR_FLAG);
1247:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1248:       assertEquals(30, Node.VAR_ARGS_NAME);
1249:       assertEquals(46, Node.IS_NAMESPACE);
1250:       assertEquals(54, Node.SLASH_V);
1251:       assertEquals(43, Node.IS_CONSTANT_NAME);
1252:       assertFalse(node0.equals((Object)node2));
1253:       assertFalse(node0.equals((Object)node1));
1254:       assertTrue(boolean5 == boolean0);
1255:       assertTrue(boolean5 == boolean3);
1256:       assertTrue(boolean5 == boolean1);
1257:       assertTrue(boolean5 == boolean4);
1258:       assertTrue(boolean5 == boolean2);
1259:       assertFalse(node0.isHook());
1260:       assertEquals(29, node0.getType());
1261:       assertFalse(node0.isFalse());
1262:       assertFalse(node0.isBreak());
1263:       assertFalse(node0.isSwitch());
1264:       assertFalse(node0.isInstanceOf());
1265:       assertFalse(node0.isComma());
1266:       assertFalse(node0.isWith());
1267:       assertFalse(node0.isNot());
1268:       assertFalse(node0.isObjectLit());
1269:       assertFalse(node0.isString());
1270:       assertFalse(node0.isThis());
1271:       assertFalse(node0.isFor());
1272:       assertFalse(node0.isScript());
1273:       assertFalse(node0.isGetProp());
1274:       assertFalse(node0.isCase());
1275:       assertEquals(48, node0.getLineno());
1276:       assertFalse(node0.isCast());
1277:       assertFalse(node0.isDebugger());
1278:       assertFalse(node0.isRegExp());
1279:       assertFalse(node0.isFunction());
1280:       assertFalse(node0.isIf());
1281:       assertFalse(node0.isNE());
1282:       assertFalse(node0.isAnd());
1283:       assertFalse(node0.isIn());
1284:       assertFalse(node0.isContinue());
1285:       assertFalse(node0.isSetterDef());
1286:       assertFalse(node0.isInc());
1287:       assertFalse(node0.isThrow());
1288:       assertFalse(node0.isVar());
1289:       assertFalse(node0.isAdd());
1290:       assertFalse(node0.isCall());
1291:       assertFalse(node0.isBlock());
1292:       assertFalse(node0.isNull());
1293:       assertFalse(node0.isStringKey());
1294:       assertFalse(node0.isParamList());
1295:       assertFalse(node0.isName());
1296:       assertEquals(199418, node0.getSourcePosition());
1297:       assertFalse(node0.isReturn());
1298:       assertFalse(node0.isCatch());
1299:       assertFalse(node0.hasMoreThanOneChild());
1300:       assertFalse(node0.isTypeOf());
1301:       assertFalse(node0.isNumber());
1302:       assertFalse(node0.isDec());
1303:       assertFalse(node0.hasChildren());
1304:       assertFalse(node0.isWhile());
1305:       assertFalse(node0.isTry());
1306:       assertFalse(node0.hasOneChild());
1307:       assertFalse(node0.isArrayLit());
1308:       assertEquals(2810, node0.getCharno());
1309:       assertFalse(node0.isAssign());
1310:       assertFalse(node0.isGetterDef());
1311:       assertFalse(node0.isTrue());
1312:       assertFalse(node0.isExprResult());
1313:       assertFalse(node0.isGetElem());
1314:       assertFalse(node0.isLabelName());
1315:       assertFalse(node0.isVoid());
1316:       assertFalse(node0.isDelProp());
1317:       assertEquals(0, node0.getChildCount());
1318:       assertFalse(node0.isLabel());
1319:       assertFalse(node0.isOr());
1320:       assertFalse(node0.isDefaultCase());
1321:       assertFalse(node0.isEmpty());
1322:       assertFalse(node0.isNew());
1323:       assertFalse(node0.isDo());
1324:       assertFalse(node0.isAssignAdd());
1325:       
1326:       // Undeclared exception!
1327:       try { 
1328:         node1.replaceChildAfter(node2, node0);
1329:         fail("Expecting exception: IllegalArgumentException");
1330:       
1331:       } catch(IllegalArgumentException e) {
1332:          //
1333:          // prev is not a child of this node.
1334:          //
1335:          verifyException("com.google.common.base.Preconditions", e);
1336:       }
1337:   }
1338: }
RegularFileObject[/tmp/EvoSuite_82_1628157518534/com/google/javascript/rhino/Node_82_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:38 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_82_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_82_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_82_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.JSTypeNative",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.JSType$TypePair",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.JSType$2",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
375:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
377:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
378:     );
379:   }
380: }

[MASTER] 09:58:38.721 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(29, 48, 2810);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(node0);
assertFalse(node0.isHook());
assertEquals(29, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertEquals(48, node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isAssign());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());

boolean boolean0 = node0.isNE();
assertFalse(boolean0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isHook());
assertEquals(29, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertEquals(48, node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isAssign());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());

boolean boolean1 = node0.isFromExterns();
assertFalse(boolean1);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isHook());
assertEquals(29, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertEquals(48, node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isAssign());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());

node0.putBooleanProp((-410), true);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isHook());
assertEquals(29, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertEquals(48, node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isAssign());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

Node node1 = new Node(38);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertTrue(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertEquals(0, node1.getChildCount());
assertEquals(38, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());

Node node2 = new Node(42, node1);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertNotNull(node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertTrue(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertEquals(0, node1.getChildCount());
assertEquals(38, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isAssign());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isStringKey());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isNull());
assertFalse(node2.isObjectLit());
assertEquals(42, node2.getType());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertTrue(node2.isThis());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertTrue(node2.hasChildren());
assertTrue(node2.hasOneChild());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());

Iterable<Node> iterable0 = node1.children();
assertFalse(iterable0.contains(node1));
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertTrue(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertEquals(0, node1.getChildCount());
assertEquals(38, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());

boolean boolean2 = node1.isGetProp();
assertFalse(boolean2);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertTrue(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertEquals(0, node1.getChildCount());
assertEquals(38, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());

boolean boolean3 = node1.isParamList();
assertFalse(boolean3);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertTrue(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isTry());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertEquals(0, node1.getChildCount());
assertEquals(38, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());

boolean boolean4 = node0.isSetterDef();
assertFalse(boolean4);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertFalse(node0.isHook());
assertEquals(29, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertEquals(48, node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isAssign());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());

boolean boolean5 = node0.isNoSideEffectsCall();
assertFalse(boolean5);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertFalse(node0.isHook());
assertEquals(29, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertEquals(48, node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isAssign());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());

node1.replaceChildAfter(node2, node0);

[MASTER] 09:58:39.930 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_88_1628157519511/com/google/javascript/rhino/Node_88_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_88_1628157519511/com/google/javascript/rhino/Node_88_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:39.930 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:39.930 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:39.932 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 660
[MASTER] 09:58:39.935 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_88_1628157519511/com/google/javascript/rhino/Node_88_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:39 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_88_tmp__ESTest extends Node_88_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node[] nodeArray0 = new Node[0];
22:       Node node0 = new Node(330, nodeArray0);
23:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
24:       assertEquals(40, Node.ORIGINALNAME_PROP);
25:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
26:       assertEquals(48, Node.DIRECTIVES);
27:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
28:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
29:       assertEquals(4095, Node.COLUMN_MASK);
30:       assertEquals(30, Node.VAR_ARGS_NAME);
31:       assertEquals(1, Node.DECR_FLAG);
32:       assertEquals(12, Node.COLUMN_BITS);
33:       assertEquals(43, Node.IS_CONSTANT_NAME);
34:       assertEquals(32, Node.INCRDECR_PROP);
35:       assertEquals(46, Node.IS_NAMESPACE);
36:       assertEquals(54, Node.SLASH_V);
37:       assertEquals(51, Node.STATIC_SOURCE_FILE);
38:       assertEquals(50, Node.FREE_CALL);
39:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
40:       assertEquals(29, Node.JSDOC_INFO_PROP);
41:       assertEquals(56, Node.CHANGE_TIME);
42:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
43:       assertEquals(37, Node.OPT_ARG_NAME);
44:       assertEquals(47, Node.IS_DISPATCHER);
45:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
46:       assertEquals(2, Node.POST_FLAG);
47:       assertEquals(55, Node.INFERRED_FUNCTION);
48:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
49:       assertEquals(15, Node.NO_SIDE_EFFECTS);
50:       assertEquals(57, Node.LAST_PROP);
51:       assertEquals(49, Node.DIRECT_EVAL);
52:       assertEquals(53, Node.INPUT_ID);
53:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
54:       assertEquals(39, Node.EMPTY_BLOCK);
55:       assertEquals(36, Node.QUOTED_PROP);
56:       assertEquals(57, Node.REFLECTED_OBJECT);
57:       assertEquals(52, Node.LENGTH);
58:       assertEquals(8, Node.FLAG_NO_THROWS);
59:       assertEquals(0, nodeArray0.length);
60:       assertNotNull(node0);
61:       assertFalse(node0.isVar());
62:       assertFalse(node0.isAdd());
63:       assertFalse(node0.isCall());
64:       assertFalse(node0.isBlock());
65:       assertFalse(node0.isNew());
66:       assertFalse(node0.isStringKey());
67:       assertFalse(node0.isName());
68:       assertEquals(0, node0.getSourcePosition());
69:       assertFalse(node0.isSetterDef());
70:       assertFalse(node0.isNull());
71:       assertEquals(0, node0.getChildCount());
72:       assertFalse(node0.isParamList());
73:       assertEquals(0, node0.getLineno());
74:       assertFalse(node0.isDo());
75:       assertFalse(node0.isAssignAdd());
76:       assertFalse(node0.isDefaultCase());
77:       assertFalse(node0.isLabel());
78:       assertFalse(node0.isContinue());
79:       assertFalse(node0.isFunction());
80:       assertFalse(node0.isCast());
81:       assertFalse(node0.isGetElem());
82:       assertFalse(node0.isVoid());
83:       assertFalse(node0.isDelProp());
84:       assertFalse(node0.isEmpty());
85:       assertFalse(node0.isTrue());
86:       assertFalse(node0.isDebugger());
87:       assertFalse(node0.isOr());
88:       assertFalse(node0.isNot());
89:       assertFalse(node0.isObjectLit());
90:       assertFalse(node0.isReturn());
91:       assertEquals(330, node0.getType());
92:       assertFalse(node0.isGetProp());
93:       assertFalse(node0.isDec());
94:       assertFalse(node0.isBreak());
95:       assertFalse(node0.isWhile());
96:       assertFalse(node0.hasChildren());
97:       assertFalse(node0.isExprResult());
98:       assertFalse(node0.isComma());
99:       assertFalse(node0.isAssign());
100:       assertFalse(node0.isTypeOf());
101:       assertFalse(node0.isHook());
102:       assertFalse(node0.isThrow());
103:       assertFalse(node0.isSwitch());
104:       assertFalse(node0.isString());
105:       assertFalse(node0.isInc());
106:       assertFalse(node0.isIn());
107:       assertFalse(node0.isAnd());
108:       assertFalse(node0.isFalse());
109:       assertFalse(node0.hasOneChild());
110:       assertFalse(node0.isArrayLit());
111:       assertFalse(node0.isTry());
112:       assertFalse(node0.isLabelName());
113:       assertFalse(node0.isIf());
114:       assertFalse(node0.isNumber());
115:       assertFalse(node0.isNE());
116:       assertEquals(0, node0.getCharno());
117:       assertFalse(node0.isScript());
118:       assertFalse(node0.isGetterDef());
119:       assertFalse(node0.isInstanceOf());
120:       assertFalse(node0.isCatch());
121:       assertFalse(node0.isCase());
122:       assertFalse(node0.isThis());
123:       assertFalse(node0.isFor());
124:       assertFalse(node0.hasMoreThanOneChild());
125:       assertFalse(node0.isWith());
126:       assertFalse(node0.isRegExp());
127:       
128:       Node node1 = new Node(49);
129:       assertEquals(29, Node.JSDOC_INFO_PROP);
130:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
131:       assertEquals(2, Node.POST_FLAG);
132:       assertEquals(56, Node.CHANGE_TIME);
133:       assertEquals(47, Node.IS_DISPATCHER);
134:       assertEquals(32, Node.INCRDECR_PROP);
135:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
136:       assertEquals(53, Node.INPUT_ID);
137:       assertEquals(49, Node.DIRECT_EVAL);
138:       assertEquals(1, Node.DECR_FLAG);
139:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
140:       assertEquals(36, Node.QUOTED_PROP);
141:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
142:       assertEquals(12, Node.COLUMN_BITS);
143:       assertEquals(48, Node.DIRECTIVES);
144:       assertEquals(37, Node.OPT_ARG_NAME);
145:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
146:       assertEquals(4095, Node.COLUMN_MASK);
147:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
148:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
149:       assertEquals(50, Node.FREE_CALL);
150:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
151:       assertEquals(57, Node.REFLECTED_OBJECT);
152:       assertEquals(52, Node.LENGTH);
153:       assertEquals(55, Node.INFERRED_FUNCTION);
154:       assertEquals(8, Node.FLAG_NO_THROWS);
155:       assertEquals(39, Node.EMPTY_BLOCK);
156:       assertEquals(15, Node.NO_SIDE_EFFECTS);
157:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
158:       assertEquals(30, Node.VAR_ARGS_NAME);
159:       assertEquals(57, Node.LAST_PROP);
160:       assertEquals(43, Node.IS_CONSTANT_NAME);
161:       assertEquals(51, Node.STATIC_SOURCE_FILE);
162:       assertEquals(46, Node.IS_NAMESPACE);
163:       assertEquals(54, Node.SLASH_V);
164:       assertEquals(40, Node.ORIGINALNAME_PROP);
165:       assertNotNull(node1);
166:       assertFalse(node1.equals((Object)node0));
167:       assertFalse(node1.isCast());
168:       assertFalse(node1.hasOneChild());
169:       assertFalse(node1.isAssign());
170:       assertFalse(node1.hasChildren());
171:       assertFalse(node1.isDec());
172:       assertFalse(node1.isTypeOf());
173:       assertFalse(node1.isLabelName());
174:       assertFalse(node1.isWith());
175:       assertEquals((-1), node1.getLineno());
176:       assertFalse(node1.isExprResult());
177:       assertFalse(node1.isGetElem());
178:       assertFalse(node1.hasMoreThanOneChild());
179:       assertFalse(node1.isInstanceOf());
180:       assertFalse(node1.isAnd());
181:       assertFalse(node1.isObjectLit());
182:       assertFalse(node1.isNot());
183:       assertFalse(node1.isWhile());
184:       assertFalse(node1.isThis());
185:       assertFalse(node1.isReturn());
186:       assertFalse(node1.isScript());
187:       assertEquals((-1), node1.getSourcePosition());
188:       assertFalse(node1.isNumber());
189:       assertFalse(node1.isGetProp());
190:       assertFalse(node1.isVar());
191:       assertFalse(node1.isName());
192:       assertFalse(node1.isStringKey());
193:       assertEquals((-1), node1.getCharno());
194:       assertFalse(node1.isNull());
195:       assertFalse(node1.isSwitch());
196:       assertTrue(node1.isThrow());
197:       assertFalse(node1.isComma());
198:       assertFalse(node1.isParamList());
199:       assertFalse(node1.isBreak());
200:       assertFalse(node1.isCall());
201:       assertEquals(0, node1.getChildCount());
202:       assertFalse(node1.isLabel());
203:       assertFalse(node1.isAssignAdd());
204:       assertFalse(node1.isOr());
205:       assertFalse(node1.isDefaultCase());
206:       assertFalse(node1.isEmpty());
207:       assertFalse(node1.isDo());
208:       assertFalse(node1.isAdd());
209:       assertFalse(node1.isNew());
210:       assertFalse(node1.isArrayLit());
211:       assertFalse(node1.isFor());
212:       assertFalse(node1.isTrue());
213:       assertFalse(node1.isNE());
214:       assertFalse(node1.isVoid());
215:       assertFalse(node1.isIf());
216:       assertFalse(node1.isDelProp());
217:       assertFalse(node1.isRegExp());
218:       assertFalse(node1.isFunction());
219:       assertFalse(node1.isCatch());
220:       assertFalse(node1.isDebugger());
221:       assertFalse(node1.isGetterDef());
222:       assertFalse(node1.isTry());
223:       assertFalse(node1.isCase());
224:       assertFalse(node1.isString());
225:       assertEquals(49, node1.getType());
226:       assertFalse(node1.isFalse());
227:       assertFalse(node1.isHook());
228:       assertFalse(node1.isBlock());
229:       assertFalse(node1.isIn());
230:       assertFalse(node1.isContinue());
231:       assertFalse(node1.isInc());
232:       assertFalse(node1.isSetterDef());
233:       
234:       Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
235:       assertEquals(48, Node.DIRECTIVES);
236:       assertEquals(55, Node.INFERRED_FUNCTION);
237:       assertEquals(8, Node.FLAG_NO_THROWS);
238:       assertEquals(39, Node.EMPTY_BLOCK);
239:       assertEquals(4095, Node.COLUMN_MASK);
240:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
241:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
242:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
243:       assertEquals(36, Node.QUOTED_PROP);
244:       assertEquals(50, Node.FREE_CALL);
245:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
246:       assertEquals(43, Node.IS_CONSTANT_NAME);
247:       assertEquals(57, Node.REFLECTED_OBJECT);
248:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
249:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
250:       assertEquals(1, Node.DECR_FLAG);
251:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
252:       assertEquals(12, Node.COLUMN_BITS);
253:       assertEquals(51, Node.STATIC_SOURCE_FILE);
254:       assertEquals(32, Node.INCRDECR_PROP);
255:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
256:       assertEquals(37, Node.OPT_ARG_NAME);
257:       assertEquals(49, Node.DIRECT_EVAL);
258:       assertEquals(56, Node.CHANGE_TIME);
259:       assertEquals(46, Node.IS_NAMESPACE);
260:       assertEquals(54, Node.SLASH_V);
261:       assertEquals(52, Node.LENGTH);
262:       assertEquals(15, Node.NO_SIDE_EFFECTS);
263:       assertEquals(40, Node.ORIGINALNAME_PROP);
264:       assertEquals(29, Node.JSDOC_INFO_PROP);
265:       assertEquals(53, Node.INPUT_ID);
266:       assertEquals(30, Node.VAR_ARGS_NAME);
267:       assertEquals(57, Node.LAST_PROP);
268:       assertEquals(2, Node.POST_FLAG);
269:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
270:       assertEquals(47, Node.IS_DISPATCHER);
271:       assertNotNull(node2);
272:       assertFalse(node2.equals((Object)node0));
273:       assertFalse(node2.equals((Object)node1));
274:       assertFalse(node2.isSetterDef());
275:       assertFalse(node2.isParamList());
276:       assertFalse(node2.isCall());
277:       assertFalse(node2.isCatch());
278:       assertEquals(0, node2.getChildCount());
279:       assertFalse(node2.isVar());
280:       assertFalse(node2.isBlock());
281:       assertEquals(40, node2.getType());
282:       assertFalse(node2.isFunction());
283:       assertFalse(node2.isDebugger());
284:       assertTrue(node2.isString());
285:       assertFalse(node2.isTry());
286:       assertFalse(node2.isArrayLit());
287:       assertFalse(node2.isStringKey());
288:       assertEquals((-1), node2.getSourcePosition());
289:       assertFalse(node2.isDec());
290:       assertFalse(node2.isDelProp());
291:       assertFalse(node2.isTypeOf());
292:       assertFalse(node2.isGetElem());
293:       assertFalse(node2.isEmpty());
294:       assertFalse(node2.isReturn());
295:       assertFalse(node2.isAssignAdd());
296:       assertFalse(node2.isAssign());
297:       assertFalse(node2.isLabel());
298:       assertFalse(node2.isWhile());
299:       assertFalse(node2.hasChildren());
300:       assertFalse(node2.isDefaultCase());
301:       assertFalse(node2.isNew());
302:       assertFalse(node2.isVoid());
303:       assertFalse(node2.isDo());
304:       assertFalse(node2.isAdd());
305:       assertFalse(node2.isExprResult());
306:       assertFalse(node2.isName());
307:       assertFalse(node2.isOr());
308:       assertFalse(node2.isNull());
309:       assertFalse(node2.isTrue());
310:       assertFalse(node2.isComma());
311:       assertFalse(node2.isThis());
312:       assertFalse(node2.isBreak());
313:       assertFalse(node2.isInstanceOf());
314:       assertFalse(node2.isGetProp());
315:       assertFalse(node2.isFalse());
316:       assertFalse(node2.isHook());
317:       assertFalse(node2.isThrow());
318:       assertFalse(node2.isSwitch());
319:       assertEquals((-1), node2.getCharno());
320:       assertFalse(node2.isCase());
321:       assertFalse(node2.isScript());
322:       assertFalse(node2.isAnd());
323:       assertFalse(node2.isLabelName());
324:       assertFalse(node2.isNot());
325:       assertFalse(node2.isObjectLit());
326:       assertFalse(node2.isNE());
327:       assertFalse(node2.isIf());
328:       assertFalse(node2.isNumber());
329:       assertFalse(node2.isGetterDef());
330:       assertEquals((-1), node2.getLineno());
331:       assertFalse(node2.hasMoreThanOneChild());
332:       assertFalse(node2.isCast());
333:       assertFalse(node2.isContinue());
334:       assertFalse(node2.hasOneChild());
335:       assertFalse(node2.isFor());
336:       assertFalse(node2.isInc());
337:       assertFalse(node2.isRegExp());
338:       assertFalse(node2.isWith());
339:       assertFalse(node2.isIn());
340:       
341:       Node node3 = node2.useSourceInfoIfMissingFrom(node1);
342:       assertNotSame(node1, node0);
343:       assertSame(node2, node3);
344:       assertSame(node3, node2);
345:       assertEquals(29, Node.JSDOC_INFO_PROP);
346:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
347:       assertEquals(2, Node.POST_FLAG);
348:       assertEquals(56, Node.CHANGE_TIME);
349:       assertEquals(47, Node.IS_DISPATCHER);
350:       assertEquals(32, Node.INCRDECR_PROP);
351:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
352:       assertEquals(53, Node.INPUT_ID);
353:       assertEquals(49, Node.DIRECT_EVAL);
354:       assertEquals(1, Node.DECR_FLAG);
355:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
356:       assertEquals(36, Node.QUOTED_PROP);
357:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
358:       assertEquals(12, Node.COLUMN_BITS);
359:       assertEquals(48, Node.DIRECTIVES);
360:       assertEquals(37, Node.OPT_ARG_NAME);
361:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
362:       assertEquals(4095, Node.COLUMN_MASK);
363:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
364:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
365:       assertEquals(50, Node.FREE_CALL);
366:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
367:       assertEquals(57, Node.REFLECTED_OBJECT);
368:       assertEquals(52, Node.LENGTH);
369:       assertEquals(55, Node.INFERRED_FUNCTION);
370:       assertEquals(8, Node.FLAG_NO_THROWS);
371:       assertEquals(39, Node.EMPTY_BLOCK);
372:       assertEquals(15, Node.NO_SIDE_EFFECTS);
373:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
374:       assertEquals(30, Node.VAR_ARGS_NAME);
375:       assertEquals(57, Node.LAST_PROP);
376:       assertEquals(43, Node.IS_CONSTANT_NAME);
377:       assertEquals(51, Node.STATIC_SOURCE_FILE);
378:       assertEquals(46, Node.IS_NAMESPACE);
379:       assertEquals(54, Node.SLASH_V);
380:       assertEquals(40, Node.ORIGINALNAME_PROP);
381:       assertEquals(48, Node.DIRECTIVES);
382:       assertEquals(55, Node.INFERRED_FUNCTION);
383:       assertEquals(8, Node.FLAG_NO_THROWS);
384:       assertEquals(39, Node.EMPTY_BLOCK);
385:       assertEquals(4095, Node.COLUMN_MASK);
386:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
387:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
388:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
389:       assertEquals(36, Node.QUOTED_PROP);
390:       assertEquals(50, Node.FREE_CALL);
391:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
392:       assertEquals(43, Node.IS_CONSTANT_NAME);
393:       assertEquals(57, Node.REFLECTED_OBJECT);
394:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
395:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
396:       assertEquals(1, Node.DECR_FLAG);
397:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
398:       assertEquals(12, Node.COLUMN_BITS);
399:       assertEquals(51, Node.STATIC_SOURCE_FILE);
400:       assertEquals(32, Node.INCRDECR_PROP);
401:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
402:       assertEquals(37, Node.OPT_ARG_NAME);
403:       assertEquals(49, Node.DIRECT_EVAL);
404:       assertEquals(56, Node.CHANGE_TIME);
405:       assertEquals(46, Node.IS_NAMESPACE);
406:       assertEquals(54, Node.SLASH_V);
407:       assertEquals(52, Node.LENGTH);
408:       assertEquals(15, Node.NO_SIDE_EFFECTS);
409:       assertEquals(40, Node.ORIGINALNAME_PROP);
410:       assertEquals(29, Node.JSDOC_INFO_PROP);
411:       assertEquals(53, Node.INPUT_ID);
412:       assertEquals(30, Node.VAR_ARGS_NAME);
413:       assertEquals(57, Node.LAST_PROP);
414:       assertEquals(2, Node.POST_FLAG);
415:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
416:       assertEquals(47, Node.IS_DISPATCHER);
417:       assertEquals(15, Node.NO_SIDE_EFFECTS);
418:       assertEquals(57, Node.LAST_PROP);
419:       assertEquals(30, Node.VAR_ARGS_NAME);
420:       assertEquals(49, Node.DIRECT_EVAL);
421:       assertEquals(1, Node.DECR_FLAG);
422:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
423:       assertEquals(12, Node.COLUMN_BITS);
424:       assertEquals(54, Node.SLASH_V);
425:       assertEquals(40, Node.ORIGINALNAME_PROP);
426:       assertEquals(37, Node.OPT_ARG_NAME);
427:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
428:       assertEquals(47, Node.IS_DISPATCHER);
429:       assertEquals(2, Node.POST_FLAG);
430:       assertEquals(56, Node.CHANGE_TIME);
431:       assertEquals(57, Node.REFLECTED_OBJECT);
432:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
433:       assertEquals(52, Node.LENGTH);
434:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
435:       assertEquals(8, Node.FLAG_NO_THROWS);
436:       assertEquals(39, Node.EMPTY_BLOCK);
437:       assertEquals(53, Node.INPUT_ID);
438:       assertEquals(55, Node.INFERRED_FUNCTION);
439:       assertEquals(29, Node.JSDOC_INFO_PROP);
440:       assertEquals(36, Node.QUOTED_PROP);
441:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
442:       assertEquals(43, Node.IS_CONSTANT_NAME);
443:       assertEquals(48, Node.DIRECTIVES);
444:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
445:       assertEquals(4095, Node.COLUMN_MASK);
446:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
447:       assertEquals(50, Node.FREE_CALL);
448:       assertEquals(32, Node.INCRDECR_PROP);
449:       assertEquals(46, Node.IS_NAMESPACE);
450:       assertEquals(51, Node.STATIC_SOURCE_FILE);
451:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
452:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
453:       assertNotNull(node3);
454:       assertFalse(node1.equals((Object)node2));
455:       assertFalse(node1.equals((Object)node0));
456:       assertFalse(node2.equals((Object)node0));
457:       assertFalse(node2.equals((Object)node1));
458:       assertFalse(node3.equals((Object)node1));
459:       assertFalse(node3.equals((Object)node0));
460:       assertFalse(node1.isCast());
461:       assertFalse(node1.hasOneChild());
462:       assertFalse(node1.isAssign());
463:       assertFalse(node1.hasChildren());
464:       assertFalse(node1.isDec());
465:       assertFalse(node1.isTypeOf());
466:       assertFalse(node1.isLabelName());
467:       assertFalse(node1.isWith());
468:       assertEquals((-1), node1.getLineno());
469:       assertFalse(node1.isExprResult());
470:       assertFalse(node1.isGetElem());
471:       assertFalse(node1.hasMoreThanOneChild());
472:       assertFalse(node1.isInstanceOf());
473:       assertFalse(node1.isAnd());
474:       assertFalse(node1.isObjectLit());
475:       assertFalse(node1.isNot());
476:       assertFalse(node1.isWhile());
477:       assertFalse(node1.isThis());
478:       assertFalse(node1.isReturn());
479:       assertFalse(node1.isScript());
480:       assertEquals((-1), node1.getSourcePosition());
481:       assertFalse(node1.isNumber());
482:       assertFalse(node1.isGetProp());
483:       assertFalse(node1.isVar());
484:       assertFalse(node1.isName());
485:       assertFalse(node1.isStringKey());
486:       assertEquals((-1), node1.getCharno());
487:       assertFalse(node1.isNull());
488:       assertFalse(node1.isSwitch());
489:       assertTrue(node1.isThrow());
490:       assertFalse(node1.isComma());
491:       assertFalse(node1.isParamList());
492:       assertFalse(node1.isBreak());
493:       assertFalse(node1.isCall());
494:       assertEquals(0, node1.getChildCount());
495:       assertFalse(node1.isLabel());
496:       assertFalse(node1.isAssignAdd());
497:       assertFalse(node1.isOr());
498:       assertFalse(node1.isDefaultCase());
499:       assertFalse(node1.isEmpty());
500:       assertFalse(node1.isDo());
501:       assertFalse(node1.isAdd());
502:       assertFalse(node1.isNew());
503:       assertFalse(node1.isArrayLit());
504:       assertFalse(node1.isFor());
505:       assertFalse(node1.isTrue());
506:       assertFalse(node1.isNE());
507:       assertFalse(node1.isVoid());
508:       assertFalse(node1.isIf());
509:       assertFalse(node1.isDelProp());
510:       assertFalse(node1.isRegExp());
511:       assertFalse(node1.isFunction());
512:       assertFalse(node1.isCatch());
513:       assertFalse(node1.isDebugger());
514:       assertFalse(node1.isGetterDef());
515:       assertFalse(node1.isTry());
516:       assertFalse(node1.isCase());
517:       assertFalse(node1.isString());
518:       assertEquals(49, node1.getType());
519:       assertFalse(node1.isFalse());
520:       assertFalse(node1.isHook());
521:       assertFalse(node1.isBlock());
522:       assertFalse(node1.isIn());
523:       assertFalse(node1.isContinue());
524:       assertFalse(node1.isInc());
525:       assertFalse(node1.isSetterDef());
526:       assertFalse(node2.isSetterDef());
527:       assertFalse(node2.isParamList());
528:       assertFalse(node2.isCall());
529:       assertFalse(node2.isCatch());
530:       assertEquals(0, node2.getChildCount());
531:       assertFalse(node2.isVar());
532:       assertFalse(node2.isBlock());
533:       assertEquals(40, node2.getType());
534:       assertFalse(node2.isFunction());
535:       assertFalse(node2.isDebugger());
536:       assertTrue(node2.isString());
537:       assertFalse(node2.isTry());
538:       assertFalse(node2.isArrayLit());
539:       assertFalse(node2.isStringKey());
540:       assertEquals((-1), node2.getSourcePosition());
541:       assertFalse(node2.isDec());
542:       assertFalse(node2.isDelProp());
543:       assertFalse(node2.isTypeOf());
544:       assertFalse(node2.isGetElem());
545:       assertFalse(node2.isEmpty());
546:       assertFalse(node2.isReturn());
547:       assertFalse(node2.isAssignAdd());
548:       assertFalse(node2.isAssign());
549:       assertFalse(node2.isLabel());
550:       assertFalse(node2.isWhile());
551:       assertFalse(node2.hasChildren());
552:       assertFalse(node2.isDefaultCase());
553:       assertFalse(node2.isNew());
554:       assertFalse(node2.isVoid());
555:       assertFalse(node2.isDo());
556:       assertFalse(node2.isAdd());
557:       assertFalse(node2.isExprResult());
558:       assertFalse(node2.isName());
559:       assertFalse(node2.isOr());
560:       assertFalse(node2.isNull());
561:       assertFalse(node2.isTrue());
562:       assertFalse(node2.isComma());
563:       assertFalse(node2.isThis());
564:       assertFalse(node2.isBreak());
565:       assertFalse(node2.isInstanceOf());
566:       assertFalse(node2.isGetProp());
567:       assertFalse(node2.isFalse());
568:       assertFalse(node2.isHook());
569:       assertFalse(node2.isThrow());
570:       assertFalse(node2.isSwitch());
571:       assertEquals((-1), node2.getCharno());
572:       assertFalse(node2.isCase());
573:       assertFalse(node2.isScript());
574:       assertFalse(node2.isAnd());
575:       assertFalse(node2.isLabelName());
576:       assertFalse(node2.isNot());
577:       assertFalse(node2.isObjectLit());
578:       assertFalse(node2.isNE());
579:       assertFalse(node2.isIf());
580:       assertFalse(node2.isNumber());
581:       assertFalse(node2.isGetterDef());
582:       assertEquals((-1), node2.getLineno());
583:       assertFalse(node2.hasMoreThanOneChild());
584:       assertFalse(node2.isCast());
585:       assertFalse(node2.isContinue());
586:       assertFalse(node2.hasOneChild());
587:       assertFalse(node2.isFor());
588:       assertFalse(node2.isInc());
589:       assertFalse(node2.isRegExp());
590:       assertFalse(node2.isWith());
591:       assertFalse(node2.isIn());
592:       assertFalse(node3.hasMoreThanOneChild());
593:       assertFalse(node3.isContinue());
594:       assertFalse(node3.isDo());
595:       assertFalse(node3.isReturn());
596:       assertFalse(node3.isWhile());
597:       assertFalse(node3.isLabel());
598:       assertFalse(node3.isAssignAdd());
599:       assertTrue(node3.isString());
600:       assertFalse(node3.isNew());
601:       assertFalse(node3.isNumber());
602:       assertEquals((-1), node3.getSourcePosition());
603:       assertFalse(node3.isOr());
604:       assertFalse(node3.isAdd());
605:       assertFalse(node3.isCall());
606:       assertFalse(node3.hasOneChild());
607:       assertFalse(node3.isName());
608:       assertFalse(node3.isAssign());
609:       assertFalse(node3.hasChildren());
610:       assertFalse(node3.isNull());
611:       assertFalse(node3.isBlock());
612:       assertFalse(node3.isExprResult());
613:       assertFalse(node3.isTypeOf());
614:       assertFalse(node3.isDec());
615:       assertEquals((-1), node3.getLineno());
616:       assertFalse(node3.isWith());
617:       assertFalse(node3.isGetElem());
618:       assertFalse(node3.isCatch());
619:       assertFalse(node3.isAnd());
620:       assertFalse(node3.isObjectLit());
621:       assertFalse(node3.isNot());
622:       assertEquals(40, node3.getType());
623:       assertFalse(node3.isDebugger());
624:       assertFalse(node3.isSetterDef());
625:       assertFalse(node3.isGetProp());
626:       assertFalse(node3.isFalse());
627:       assertFalse(node3.isThrow());
628:       assertFalse(node3.isFunction());
629:       assertFalse(node3.isCast());
630:       assertFalse(node3.isCase());
631:       assertFalse(node3.isInc());
632:       assertEquals((-1), node3.getCharno());
633:       assertFalse(node3.isGetterDef());
634:       assertFalse(node3.isIn());
635:       assertFalse(node3.isEmpty());
636:       assertFalse(node3.isDelProp());
637:       assertFalse(node3.isIf());
638:       assertFalse(node3.isHook());
639:       assertFalse(node3.isNE());
640:       assertFalse(node3.isFor());
641:       assertFalse(node3.isComma());
642:       assertFalse(node3.isThis());
643:       assertFalse(node3.isRegExp());
644:       assertFalse(node3.isVoid());
645:       assertFalse(node3.isBreak());
646:       assertFalse(node3.isInstanceOf());
647:       assertEquals(0, node3.getChildCount());
648:       assertFalse(node3.isDefaultCase());
649:       assertFalse(node3.isTrue());
650:       assertFalse(node3.isTry());
651:       assertFalse(node3.isScript());
652:       assertFalse(node3.isArrayLit());
653:       assertFalse(node3.isLabelName());
654:       assertFalse(node3.isStringKey());
655:       assertFalse(node3.isVar());
656:       assertFalse(node3.isParamList());
657:       assertFalse(node3.isSwitch());
658:       
659:       Iterable<Node> iterable0 = node3.children();
660:       assertFalse(iterable0.contains(node0));
661:       assertNotSame(node1, node0);
662:       assertSame(node2, node3);
663:       assertSame(node3, node2);
664:       assertEquals(29, Node.JSDOC_INFO_PROP);
665:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
666:       assertEquals(2, Node.POST_FLAG);
667:       assertEquals(56, Node.CHANGE_TIME);
668:       assertEquals(47, Node.IS_DISPATCHER);
669:       assertEquals(32, Node.INCRDECR_PROP);
670:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
671:       assertEquals(53, Node.INPUT_ID);
672:       assertEquals(49, Node.DIRECT_EVAL);
673:       assertEquals(1, Node.DECR_FLAG);
674:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
675:       assertEquals(36, Node.QUOTED_PROP);
676:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
677:       assertEquals(12, Node.COLUMN_BITS);
678:       assertEquals(48, Node.DIRECTIVES);
679:       assertEquals(37, Node.OPT_ARG_NAME);
680:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
681:       assertEquals(4095, Node.COLUMN_MASK);
682:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
683:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
684:       assertEquals(50, Node.FREE_CALL);
685:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
686:       assertEquals(57, Node.REFLECTED_OBJECT);
687:       assertEquals(52, Node.LENGTH);
688:       assertEquals(55, Node.INFERRED_FUNCTION);
689:       assertEquals(8, Node.FLAG_NO_THROWS);
690:       assertEquals(39, Node.EMPTY_BLOCK);
691:       assertEquals(15, Node.NO_SIDE_EFFECTS);
692:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
693:       assertEquals(30, Node.VAR_ARGS_NAME);
694:       assertEquals(57, Node.LAST_PROP);
695:       assertEquals(43, Node.IS_CONSTANT_NAME);
696:       assertEquals(51, Node.STATIC_SOURCE_FILE);
697:       assertEquals(46, Node.IS_NAMESPACE);
698:       assertEquals(54, Node.SLASH_V);
699:       assertEquals(40, Node.ORIGINALNAME_PROP);
700:       assertEquals(48, Node.DIRECTIVES);
701:       assertEquals(55, Node.INFERRED_FUNCTION);
702:       assertEquals(8, Node.FLAG_NO_THROWS);
703:       assertEquals(39, Node.EMPTY_BLOCK);
704:       assertEquals(4095, Node.COLUMN_MASK);
705:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
706:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
707:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
708:       assertEquals(36, Node.QUOTED_PROP);
709:       assertEquals(50, Node.FREE_CALL);
710:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
711:       assertEquals(43, Node.IS_CONSTANT_NAME);
712:       assertEquals(57, Node.REFLECTED_OBJECT);
713:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
714:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
715:       assertEquals(1, Node.DECR_FLAG);
716:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
717:       assertEquals(12, Node.COLUMN_BITS);
718:       assertEquals(51, Node.STATIC_SOURCE_FILE);
719:       assertEquals(32, Node.INCRDECR_PROP);
720:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
721:       assertEquals(37, Node.OPT_ARG_NAME);
722:       assertEquals(49, Node.DIRECT_EVAL);
723:       assertEquals(56, Node.CHANGE_TIME);
724:       assertEquals(46, Node.IS_NAMESPACE);
725:       assertEquals(54, Node.SLASH_V);
726:       assertEquals(52, Node.LENGTH);
727:       assertEquals(15, Node.NO_SIDE_EFFECTS);
728:       assertEquals(40, Node.ORIGINALNAME_PROP);
729:       assertEquals(29, Node.JSDOC_INFO_PROP);
730:       assertEquals(53, Node.INPUT_ID);
731:       assertEquals(30, Node.VAR_ARGS_NAME);
732:       assertEquals(57, Node.LAST_PROP);
733:       assertEquals(2, Node.POST_FLAG);
734:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
735:       assertEquals(47, Node.IS_DISPATCHER);
736:       assertEquals(15, Node.NO_SIDE_EFFECTS);
737:       assertEquals(57, Node.LAST_PROP);
738:       assertEquals(30, Node.VAR_ARGS_NAME);
739:       assertEquals(49, Node.DIRECT_EVAL);
740:       assertEquals(1, Node.DECR_FLAG);
741:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
742:       assertEquals(12, Node.COLUMN_BITS);
743:       assertEquals(54, Node.SLASH_V);
744:       assertEquals(40, Node.ORIGINALNAME_PROP);
745:       assertEquals(37, Node.OPT_ARG_NAME);
746:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
747:       assertEquals(47, Node.IS_DISPATCHER);
748:       assertEquals(2, Node.POST_FLAG);
749:       assertEquals(56, Node.CHANGE_TIME);
750:       assertEquals(57, Node.REFLECTED_OBJECT);
751:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
752:       assertEquals(52, Node.LENGTH);
753:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
754:       assertEquals(8, Node.FLAG_NO_THROWS);
755:       assertEquals(39, Node.EMPTY_BLOCK);
756:       assertEquals(53, Node.INPUT_ID);
757:       assertEquals(55, Node.INFERRED_FUNCTION);
758:       assertEquals(29, Node.JSDOC_INFO_PROP);
759:       assertEquals(36, Node.QUOTED_PROP);
760:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
761:       assertEquals(43, Node.IS_CONSTANT_NAME);
762:       assertEquals(48, Node.DIRECTIVES);
763:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
764:       assertEquals(4095, Node.COLUMN_MASK);
765:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
766:       assertEquals(50, Node.FREE_CALL);
767:       assertEquals(32, Node.INCRDECR_PROP);
768:       assertEquals(46, Node.IS_NAMESPACE);
769:       assertEquals(51, Node.STATIC_SOURCE_FILE);
770:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
771:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
772:       assertNotNull(iterable0);
773:       assertFalse(node1.equals((Object)node3));
774:       assertFalse(node1.equals((Object)node2));
775:       assertFalse(node1.equals((Object)node0));
776:       assertFalse(node2.equals((Object)node0));
777:       assertFalse(node2.equals((Object)node1));
778:       assertFalse(node3.equals((Object)node1));
779:       assertFalse(node3.equals((Object)node0));
780:       assertFalse(node1.isCast());
781:       assertFalse(node1.hasOneChild());
782:       assertFalse(node1.isAssign());
783:       assertFalse(node1.hasChildren());
784:       assertFalse(node1.isDec());
785:       assertFalse(node1.isTypeOf());
786:       assertFalse(node1.isLabelName());
787:       assertFalse(node1.isWith());
788:       assertEquals((-1), node1.getLineno());
789:       assertFalse(node1.isExprResult());
790:       assertFalse(node1.isGetElem());
791:       assertFalse(node1.hasMoreThanOneChild());
792:       assertFalse(node1.isInstanceOf());
793:       assertFalse(node1.isAnd());
794:       assertFalse(node1.isObjectLit());
795:       assertFalse(node1.isNot());
796:       assertFalse(node1.isWhile());
797:       assertFalse(node1.isThis());
798:       assertFalse(node1.isReturn());
799:       assertFalse(node1.isScript());
800:       assertEquals((-1), node1.getSourcePosition());
801:       assertFalse(node1.isNumber());
802:       assertFalse(node1.isGetProp());
803:       assertFalse(node1.isVar());
804:       assertFalse(node1.isName());
805:       assertFalse(node1.isStringKey());
806:       assertEquals((-1), node1.getCharno());
807:       assertFalse(node1.isNull());
808:       assertFalse(node1.isSwitch());
809:       assertTrue(node1.isThrow());
810:       assertFalse(node1.isComma());
811:       assertFalse(node1.isParamList());
812:       assertFalse(node1.isBreak());
813:       assertFalse(node1.isCall());
814:       assertEquals(0, node1.getChildCount());
815:       assertFalse(node1.isLabel());
816:       assertFalse(node1.isAssignAdd());
817:       assertFalse(node1.isOr());
818:       assertFalse(node1.isDefaultCase());
819:       assertFalse(node1.isEmpty());
820:       assertFalse(node1.isDo());
821:       assertFalse(node1.isAdd());
822:       assertFalse(node1.isNew());
823:       assertFalse(node1.isArrayLit());
824:       assertFalse(node1.isFor());
825:       assertFalse(node1.isTrue());
826:       assertFalse(node1.isNE());
827:       assertFalse(node1.isVoid());
828:       assertFalse(node1.isIf());
829:       assertFalse(node1.isDelProp());
830:       assertFalse(node1.isRegExp());
831:       assertFalse(node1.isFunction());
832:       assertFalse(node1.isCatch());
833:       assertFalse(node1.isDebugger());
834:       assertFalse(node1.isGetterDef());
835:       assertFalse(node1.isTry());
836:       assertFalse(node1.isCase());
837:       assertFalse(node1.isString());
838:       assertEquals(49, node1.getType());
839:       assertFalse(node1.isFalse());
840:       assertFalse(node1.isHook());
841:       assertFalse(node1.isBlock());
842:       assertFalse(node1.isIn());
843:       assertFalse(node1.isContinue());
844:       assertFalse(node1.isInc());
845:       assertFalse(node1.isSetterDef());
846:       assertFalse(node2.isSetterDef());
847:       assertFalse(node2.isParamList());
848:       assertFalse(node2.isCall());
849:       assertFalse(node2.isCatch());
850:       assertEquals(0, node2.getChildCount());
851:       assertFalse(node2.isVar());
852:       assertFalse(node2.isBlock());
853:       assertEquals(40, node2.getType());
854:       assertFalse(node2.isFunction());
855:       assertFalse(node2.isDebugger());
856:       assertTrue(node2.isString());
857:       assertFalse(node2.isTry());
858:       assertFalse(node2.isArrayLit());
859:       assertFalse(node2.isStringKey());
860:       assertEquals((-1), node2.getSourcePosition());
861:       assertFalse(node2.isDec());
862:       assertFalse(node2.isDelProp());
863:       assertFalse(node2.isTypeOf());
864:       assertFalse(node2.isGetElem());
865:       assertFalse(node2.isEmpty());
866:       assertFalse(node2.isReturn());
867:       assertFalse(node2.isAssignAdd());
868:       assertFalse(node2.isAssign());
869:       assertFalse(node2.isLabel());
870:       assertFalse(node2.isWhile());
871:       assertFalse(node2.hasChildren());
872:       assertFalse(node2.isDefaultCase());
873:       assertFalse(node2.isNew());
874:       assertFalse(node2.isVoid());
875:       assertFalse(node2.isDo());
876:       assertFalse(node2.isAdd());
877:       assertFalse(node2.isExprResult());
878:       assertFalse(node2.isName());
879:       assertFalse(node2.isOr());
880:       assertFalse(node2.isNull());
881:       assertFalse(node2.isTrue());
882:       assertFalse(node2.isComma());
883:       assertFalse(node2.isThis());
884:       assertFalse(node2.isBreak());
885:       assertFalse(node2.isInstanceOf());
886:       assertFalse(node2.isGetProp());
887:       assertFalse(node2.isFalse());
888:       assertFalse(node2.isHook());
889:       assertFalse(node2.isThrow());
890:       assertFalse(node2.isSwitch());
891:       assertEquals((-1), node2.getCharno());
892:       assertFalse(node2.isCase());
893:       assertFalse(node2.isScript());
894:       assertFalse(node2.isAnd());
895:       assertFalse(node2.isLabelName());
896:       assertFalse(node2.isNot());
897:       assertFalse(node2.isObjectLit());
898:       assertFalse(node2.isNE());
899:       assertFalse(node2.isIf());
900:       assertFalse(node2.isNumber());
901:       assertFalse(node2.isGetterDef());
902:       assertEquals((-1), node2.getLineno());
903:       assertFalse(node2.hasMoreThanOneChild());
904:       assertFalse(node2.isCast());
905:       assertFalse(node2.isContinue());
906:       assertFalse(node2.hasOneChild());
907:       assertFalse(node2.isFor());
908:       assertFalse(node2.isInc());
909:       assertFalse(node2.isRegExp());
910:       assertFalse(node2.isWith());
911:       assertFalse(node2.isIn());
912:       assertFalse(node3.hasMoreThanOneChild());
913:       assertFalse(node3.isContinue());
914:       assertFalse(node3.isDo());
915:       assertFalse(node3.isReturn());
916:       assertFalse(node3.isWhile());
917:       assertFalse(node3.isLabel());
918:       assertFalse(node3.isAssignAdd());
919:       assertTrue(node3.isString());
920:       assertFalse(node3.isNew());
921:       assertFalse(node3.isNumber());
922:       assertEquals((-1), node3.getSourcePosition());
923:       assertFalse(node3.isOr());
924:       assertFalse(node3.isAdd());
925:       assertFalse(node3.isCall());
926:       assertFalse(node3.hasOneChild());
927:       assertFalse(node3.isName());
928:       assertFalse(node3.isAssign());
929:       assertFalse(node3.hasChildren());
930:       assertFalse(node3.isNull());
931:       assertFalse(node3.isBlock());
932:       assertFalse(node3.isExprResult());
933:       assertFalse(node3.isTypeOf());
934:       assertFalse(node3.isDec());
935:       assertEquals((-1), node3.getLineno());
936:       assertFalse(node3.isWith());
937:       assertFalse(node3.isGetElem());
938:       assertFalse(node3.isCatch());
939:       assertFalse(node3.isAnd());
940:       assertFalse(node3.isObjectLit());
941:       assertFalse(node3.isNot());
942:       assertEquals(40, node3.getType());
943:       assertFalse(node3.isDebugger());
944:       assertFalse(node3.isSetterDef());
945:       assertFalse(node3.isGetProp());
946:       assertFalse(node3.isFalse());
947:       assertFalse(node3.isThrow());
948:       assertFalse(node3.isFunction());
949:       assertFalse(node3.isCast());
950:       assertFalse(node3.isCase());
951:       assertFalse(node3.isInc());
952:       assertEquals((-1), node3.getCharno());
953:       assertFalse(node3.isGetterDef());
954:       assertFalse(node3.isIn());
955:       assertFalse(node3.isEmpty());
956:       assertFalse(node3.isDelProp());
957:       assertFalse(node3.isIf());
958:       assertFalse(node3.isHook());
959:       assertFalse(node3.isNE());
960:       assertFalse(node3.isFor());
961:       assertFalse(node3.isComma());
962:       assertFalse(node3.isThis());
963:       assertFalse(node3.isRegExp());
964:       assertFalse(node3.isVoid());
965:       assertFalse(node3.isBreak());
966:       assertFalse(node3.isInstanceOf());
967:       assertEquals(0, node3.getChildCount());
968:       assertFalse(node3.isDefaultCase());
969:       assertFalse(node3.isTrue());
970:       assertFalse(node3.isTry());
971:       assertFalse(node3.isScript());
972:       assertFalse(node3.isArrayLit());
973:       assertFalse(node3.isLabelName());
974:       assertFalse(node3.isStringKey());
975:       assertFalse(node3.isVar());
976:       assertFalse(node3.isParamList());
977:       assertFalse(node3.isSwitch());
978:       
979:       boolean boolean0 = node1.isGetProp();
980:       assertFalse(boolean0);
981:       assertNotSame(node1, node0);
982:       assertEquals(29, Node.JSDOC_INFO_PROP);
983:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
984:       assertEquals(2, Node.POST_FLAG);
985:       assertEquals(56, Node.CHANGE_TIME);
986:       assertEquals(47, Node.IS_DISPATCHER);
987:       assertEquals(32, Node.INCRDECR_PROP);
988:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
989:       assertEquals(53, Node.INPUT_ID);
990:       assertEquals(49, Node.DIRECT_EVAL);
991:       assertEquals(1, Node.DECR_FLAG);
992:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
993:       assertEquals(36, Node.QUOTED_PROP);
994:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
995:       assertEquals(12, Node.COLUMN_BITS);
996:       assertEquals(48, Node.DIRECTIVES);
997:       assertEquals(37, Node.OPT_ARG_NAME);
998:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
999:       assertEquals(4095, Node.COLUMN_MASK);
1000:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1001:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1002:       assertEquals(50, Node.FREE_CALL);
1003:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1004:       assertEquals(57, Node.REFLECTED_OBJECT);
1005:       assertEquals(52, Node.LENGTH);
1006:       assertEquals(55, Node.INFERRED_FUNCTION);
1007:       assertEquals(8, Node.FLAG_NO_THROWS);
1008:       assertEquals(39, Node.EMPTY_BLOCK);
1009:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1010:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1011:       assertEquals(30, Node.VAR_ARGS_NAME);
1012:       assertEquals(57, Node.LAST_PROP);
1013:       assertEquals(43, Node.IS_CONSTANT_NAME);
1014:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1015:       assertEquals(46, Node.IS_NAMESPACE);
1016:       assertEquals(54, Node.SLASH_V);
1017:       assertEquals(40, Node.ORIGINALNAME_PROP);
1018:       assertFalse(node1.equals((Object)node3));
1019:       assertFalse(node1.equals((Object)node2));
1020:       assertFalse(node1.equals((Object)node0));
1021:       assertFalse(node1.isCast());
1022:       assertFalse(node1.hasOneChild());
1023:       assertFalse(node1.isAssign());
1024:       assertFalse(node1.hasChildren());
1025:       assertFalse(node1.isDec());
1026:       assertFalse(node1.isTypeOf());
1027:       assertFalse(node1.isLabelName());
1028:       assertFalse(node1.isWith());
1029:       assertEquals((-1), node1.getLineno());
1030:       assertFalse(node1.isExprResult());
1031:       assertFalse(node1.isGetElem());
1032:       assertFalse(node1.hasMoreThanOneChild());
1033:       assertFalse(node1.isInstanceOf());
1034:       assertFalse(node1.isAnd());
1035:       assertFalse(node1.isObjectLit());
1036:       assertFalse(node1.isNot());
1037:       assertFalse(node1.isWhile());
1038:       assertFalse(node1.isThis());
1039:       assertFalse(node1.isReturn());
1040:       assertFalse(node1.isScript());
1041:       assertEquals((-1), node1.getSourcePosition());
1042:       assertFalse(node1.isNumber());
1043:       assertFalse(node1.isGetProp());
1044:       assertFalse(node1.isVar());
1045:       assertFalse(node1.isName());
1046:       assertFalse(node1.isStringKey());
1047:       assertEquals((-1), node1.getCharno());
1048:       assertFalse(node1.isNull());
1049:       assertFalse(node1.isSwitch());
1050:       assertTrue(node1.isThrow());
1051:       assertFalse(node1.isComma());
1052:       assertFalse(node1.isParamList());
1053:       assertFalse(node1.isBreak());
1054:       assertFalse(node1.isCall());
1055:       assertEquals(0, node1.getChildCount());
1056:       assertFalse(node1.isLabel());
1057:       assertFalse(node1.isAssignAdd());
1058:       assertFalse(node1.isOr());
1059:       assertFalse(node1.isDefaultCase());
1060:       assertFalse(node1.isEmpty());
1061:       assertFalse(node1.isDo());
1062:       assertFalse(node1.isAdd());
1063:       assertFalse(node1.isNew());
1064:       assertFalse(node1.isArrayLit());
1065:       assertFalse(node1.isFor());
1066:       assertFalse(node1.isTrue());
1067:       assertFalse(node1.isNE());
1068:       assertFalse(node1.isVoid());
1069:       assertFalse(node1.isIf());
1070:       assertFalse(node1.isDelProp());
1071:       assertFalse(node1.isRegExp());
1072:       assertFalse(node1.isFunction());
1073:       assertFalse(node1.isCatch());
1074:       assertFalse(node1.isDebugger());
1075:       assertFalse(node1.isGetterDef());
1076:       assertFalse(node1.isTry());
1077:       assertFalse(node1.isCase());
1078:       assertFalse(node1.isString());
1079:       assertEquals(49, node1.getType());
1080:       assertFalse(node1.isFalse());
1081:       assertFalse(node1.isHook());
1082:       assertFalse(node1.isBlock());
1083:       assertFalse(node1.isIn());
1084:       assertFalse(node1.isContinue());
1085:       assertFalse(node1.isInc());
1086:       assertFalse(node1.isSetterDef());
1087:       
1088:       boolean boolean1 = node3.hasChildren();
1089:       assertFalse(boolean1);
1090:       assertNotSame(node1, node0);
1091:       assertSame(node2, node3);
1092:       assertSame(node3, node2);
1093:       assertEquals(29, Node.JSDOC_INFO_PROP);
1094:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1095:       assertEquals(2, Node.POST_FLAG);
1096:       assertEquals(56, Node.CHANGE_TIME);
1097:       assertEquals(47, Node.IS_DISPATCHER);
1098:       assertEquals(32, Node.INCRDECR_PROP);
1099:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1100:       assertEquals(53, Node.INPUT_ID);
1101:       assertEquals(49, Node.DIRECT_EVAL);
1102:       assertEquals(1, Node.DECR_FLAG);
1103:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1104:       assertEquals(36, Node.QUOTED_PROP);
1105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1106:       assertEquals(12, Node.COLUMN_BITS);
1107:       assertEquals(48, Node.DIRECTIVES);
1108:       assertEquals(37, Node.OPT_ARG_NAME);
1109:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1110:       assertEquals(4095, Node.COLUMN_MASK);
1111:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1112:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1113:       assertEquals(50, Node.FREE_CALL);
1114:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1115:       assertEquals(57, Node.REFLECTED_OBJECT);
1116:       assertEquals(52, Node.LENGTH);
1117:       assertEquals(55, Node.INFERRED_FUNCTION);
1118:       assertEquals(8, Node.FLAG_NO_THROWS);
1119:       assertEquals(39, Node.EMPTY_BLOCK);
1120:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1121:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1122:       assertEquals(30, Node.VAR_ARGS_NAME);
1123:       assertEquals(57, Node.LAST_PROP);
1124:       assertEquals(43, Node.IS_CONSTANT_NAME);
1125:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1126:       assertEquals(46, Node.IS_NAMESPACE);
1127:       assertEquals(54, Node.SLASH_V);
1128:       assertEquals(40, Node.ORIGINALNAME_PROP);
1129:       assertEquals(48, Node.DIRECTIVES);
1130:       assertEquals(55, Node.INFERRED_FUNCTION);
1131:       assertEquals(8, Node.FLAG_NO_THROWS);
1132:       assertEquals(39, Node.EMPTY_BLOCK);
1133:       assertEquals(4095, Node.COLUMN_MASK);
1134:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1135:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1136:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1137:       assertEquals(36, Node.QUOTED_PROP);
1138:       assertEquals(50, Node.FREE_CALL);
1139:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1140:       assertEquals(43, Node.IS_CONSTANT_NAME);
1141:       assertEquals(57, Node.REFLECTED_OBJECT);
1142:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1143:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1144:       assertEquals(1, Node.DECR_FLAG);
1145:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1146:       assertEquals(12, Node.COLUMN_BITS);
1147:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1148:       assertEquals(32, Node.INCRDECR_PROP);
1149:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1150:       assertEquals(37, Node.OPT_ARG_NAME);
1151:       assertEquals(49, Node.DIRECT_EVAL);
1152:       assertEquals(56, Node.CHANGE_TIME);
1153:       assertEquals(46, Node.IS_NAMESPACE);
1154:       assertEquals(54, Node.SLASH_V);
1155:       assertEquals(52, Node.LENGTH);
1156:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1157:       assertEquals(40, Node.ORIGINALNAME_PROP);
1158:       assertEquals(29, Node.JSDOC_INFO_PROP);
1159:       assertEquals(53, Node.INPUT_ID);
1160:       assertEquals(30, Node.VAR_ARGS_NAME);
1161:       assertEquals(57, Node.LAST_PROP);
1162:       assertEquals(2, Node.POST_FLAG);
1163:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1164:       assertEquals(47, Node.IS_DISPATCHER);
1165:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1166:       assertEquals(57, Node.LAST_PROP);
1167:       assertEquals(30, Node.VAR_ARGS_NAME);
1168:       assertEquals(49, Node.DIRECT_EVAL);
1169:       assertEquals(1, Node.DECR_FLAG);
1170:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1171:       assertEquals(12, Node.COLUMN_BITS);
1172:       assertEquals(54, Node.SLASH_V);
1173:       assertEquals(40, Node.ORIGINALNAME_PROP);
1174:       assertEquals(37, Node.OPT_ARG_NAME);
1175:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1176:       assertEquals(47, Node.IS_DISPATCHER);
1177:       assertEquals(2, Node.POST_FLAG);
1178:       assertEquals(56, Node.CHANGE_TIME);
1179:       assertEquals(57, Node.REFLECTED_OBJECT);
1180:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1181:       assertEquals(52, Node.LENGTH);
1182:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1183:       assertEquals(8, Node.FLAG_NO_THROWS);
1184:       assertEquals(39, Node.EMPTY_BLOCK);
1185:       assertEquals(53, Node.INPUT_ID);
1186:       assertEquals(55, Node.INFERRED_FUNCTION);
1187:       assertEquals(29, Node.JSDOC_INFO_PROP);
1188:       assertEquals(36, Node.QUOTED_PROP);
1189:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1190:       assertEquals(43, Node.IS_CONSTANT_NAME);
1191:       assertEquals(48, Node.DIRECTIVES);
1192:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1193:       assertEquals(4095, Node.COLUMN_MASK);
1194:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1195:       assertEquals(50, Node.FREE_CALL);
1196:       assertEquals(32, Node.INCRDECR_PROP);
1197:       assertEquals(46, Node.IS_NAMESPACE);
1198:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1199:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1200:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1201:       assertFalse(node1.equals((Object)node3));
1202:       assertFalse(node1.equals((Object)node2));
1203:       assertFalse(node1.equals((Object)node0));
1204:       assertFalse(node2.equals((Object)node0));
1205:       assertFalse(node2.equals((Object)node1));
1206:       assertFalse(node3.equals((Object)node1));
1207:       assertFalse(node3.equals((Object)node0));
1208:       assertTrue(boolean1 == boolean0);
1209:       assertFalse(node1.isCast());
1210:       assertFalse(node1.hasOneChild());
1211:       assertFalse(node1.isAssign());
1212:       assertFalse(node1.hasChildren());
1213:       assertFalse(node1.isDec());
1214:       assertFalse(node1.isTypeOf());
1215:       assertFalse(node1.isLabelName());
1216:       assertFalse(node1.isWith());
1217:       assertEquals((-1), node1.getLineno());
1218:       assertFalse(node1.isExprResult());
1219:       assertFalse(node1.isGetElem());
1220:       assertFalse(node1.hasMoreThanOneChild());
1221:       assertFalse(node1.isInstanceOf());
1222:       assertFalse(node1.isAnd());
1223:       assertFalse(node1.isObjectLit());
1224:       assertFalse(node1.isNot());
1225:       assertFalse(node1.isWhile());
1226:       assertFalse(node1.isThis());
1227:       assertFalse(node1.isReturn());
1228:       assertFalse(node1.isScript());
1229:       assertEquals((-1), node1.getSourcePosition());
1230:       assertFalse(node1.isNumber());
1231:       assertFalse(node1.isGetProp());
1232:       assertFalse(node1.isVar());
1233:       assertFalse(node1.isName());
1234:       assertFalse(node1.isStringKey());
1235:       assertEquals((-1), node1.getCharno());
1236:       assertFalse(node1.isNull());
1237:       assertFalse(node1.isSwitch());
1238:       assertTrue(node1.isThrow());
1239:       assertFalse(node1.isComma());
1240:       assertFalse(node1.isParamList());
1241:       assertFalse(node1.isBreak());
1242:       assertFalse(node1.isCall());
1243:       assertEquals(0, node1.getChildCount());
1244:       assertFalse(node1.isLabel());
1245:       assertFalse(node1.isAssignAdd());
1246:       assertFalse(node1.isOr());
1247:       assertFalse(node1.isDefaultCase());
1248:       assertFalse(node1.isEmpty());
1249:       assertFalse(node1.isDo());
1250:       assertFalse(node1.isAdd());
1251:       assertFalse(node1.isNew());
1252:       assertFalse(node1.isArrayLit());
1253:       assertFalse(node1.isFor());
1254:       assertFalse(node1.isTrue());
1255:       assertFalse(node1.isNE());
1256:       assertFalse(node1.isVoid());
1257:       assertFalse(node1.isIf());
1258:       assertFalse(node1.isDelProp());
1259:       assertFalse(node1.isRegExp());
1260:       assertFalse(node1.isFunction());
1261:       assertFalse(node1.isCatch());
1262:       assertFalse(node1.isDebugger());
1263:       assertFalse(node1.isGetterDef());
1264:       assertFalse(node1.isTry());
1265:       assertFalse(node1.isCase());
1266:       assertFalse(node1.isString());
1267:       assertEquals(49, node1.getType());
1268:       assertFalse(node1.isFalse());
1269:       assertFalse(node1.isHook());
1270:       assertFalse(node1.isBlock());
1271:       assertFalse(node1.isIn());
1272:       assertFalse(node1.isContinue());
1273:       assertFalse(node1.isInc());
1274:       assertFalse(node1.isSetterDef());
1275:       assertFalse(node2.isSetterDef());
1276:       assertFalse(node2.isParamList());
1277:       assertFalse(node2.isCall());
1278:       assertFalse(node2.isCatch());
1279:       assertEquals(0, node2.getChildCount());
1280:       assertFalse(node2.isVar());
1281:       assertFalse(node2.isBlock());
1282:       assertEquals(40, node2.getType());
1283:       assertFalse(node2.isFunction());
1284:       assertFalse(node2.isDebugger());
1285:       assertTrue(node2.isString());
1286:       assertFalse(node2.isTry());
1287:       assertFalse(node2.isArrayLit());
1288:       assertFalse(node2.isStringKey());
1289:       assertEquals((-1), node2.getSourcePosition());
1290:       assertFalse(node2.isDec());
1291:       assertFalse(node2.isDelProp());
1292:       assertFalse(node2.isTypeOf());
1293:       assertFalse(node2.isGetElem());
1294:       assertFalse(node2.isEmpty());
1295:       assertFalse(node2.isReturn());
1296:       assertFalse(node2.isAssignAdd());
1297:       assertFalse(node2.isAssign());
1298:       assertFalse(node2.isLabel());
1299:       assertFalse(node2.isWhile());
1300:       assertFalse(node2.hasChildren());
1301:       assertFalse(node2.isDefaultCase());
1302:       assertFalse(node2.isNew());
1303:       assertFalse(node2.isVoid());
1304:       assertFalse(node2.isDo());
1305:       assertFalse(node2.isAdd());
1306:       assertFalse(node2.isExprResult());
1307:       assertFalse(node2.isName());
1308:       assertFalse(node2.isOr());
1309:       assertFalse(node2.isNull());
1310:       assertFalse(node2.isTrue());
1311:       assertFalse(node2.isComma());
1312:       assertFalse(node2.isThis());
1313:       assertFalse(node2.isBreak());
1314:       assertFalse(node2.isInstanceOf());
1315:       assertFalse(node2.isGetProp());
1316:       assertFalse(node2.isFalse());
1317:       assertFalse(node2.isHook());
1318:       assertFalse(node2.isThrow());
1319:       assertFalse(node2.isSwitch());
1320:       assertEquals((-1), node2.getCharno());
1321:       assertFalse(node2.isCase());
1322:       assertFalse(node2.isScript());
1323:       assertFalse(node2.isAnd());
1324:       assertFalse(node2.isLabelName());
1325:       assertFalse(node2.isNot());
1326:       assertFalse(node2.isObjectLit());
1327:       assertFalse(node2.isNE());
1328:       assertFalse(node2.isIf());
1329:       assertFalse(node2.isNumber());
1330:       assertFalse(node2.isGetterDef());
1331:       assertEquals((-1), node2.getLineno());
1332:       assertFalse(node2.hasMoreThanOneChild());
1333:       assertFalse(node2.isCast());
1334:       assertFalse(node2.isContinue());
1335:       assertFalse(node2.hasOneChild());
1336:       assertFalse(node2.isFor());
1337:       assertFalse(node2.isInc());
1338:       assertFalse(node2.isRegExp());
1339:       assertFalse(node2.isWith());
1340:       assertFalse(node2.isIn());
1341:       assertFalse(node3.hasMoreThanOneChild());
1342:       assertFalse(node3.isContinue());
1343:       assertFalse(node3.isDo());
1344:       assertFalse(node3.isReturn());
1345:       assertFalse(node3.isWhile());
1346:       assertFalse(node3.isLabel());
1347:       assertFalse(node3.isAssignAdd());
1348:       assertTrue(node3.isString());
1349:       assertFalse(node3.isNew());
1350:       assertFalse(node3.isNumber());
1351:       assertEquals((-1), node3.getSourcePosition());
1352:       assertFalse(node3.isOr());
1353:       assertFalse(node3.isAdd());
1354:       assertFalse(node3.isCall());
1355:       assertFalse(node3.hasOneChild());
1356:       assertFalse(node3.isName());
1357:       assertFalse(node3.isAssign());
1358:       assertFalse(node3.hasChildren());
1359:       assertFalse(node3.isNull());
1360:       assertFalse(node3.isBlock());
1361:       assertFalse(node3.isExprResult());
1362:       assertFalse(node3.isTypeOf());
1363:       assertFalse(node3.isDec());
1364:       assertEquals((-1), node3.getLineno());
1365:       assertFalse(node3.isWith());
1366:       assertFalse(node3.isGetElem());
1367:       assertFalse(node3.isCatch());
1368:       assertFalse(node3.isAnd());
1369:       assertFalse(node3.isObjectLit());
1370:       assertFalse(node3.isNot());
1371:       assertEquals(40, node3.getType());
1372:       assertFalse(node3.isDebugger());
1373:       assertFalse(node3.isSetterDef());
1374:       assertFalse(node3.isGetProp());
1375:       assertFalse(node3.isFalse());
1376:       assertFalse(node3.isThrow());
1377:       assertFalse(node3.isFunction());
1378:       assertFalse(node3.isCast());
1379:       assertFalse(node3.isCase());
1380:       assertFalse(node3.isInc());
1381:       assertEquals((-1), node3.getCharno());
1382:       assertFalse(node3.isGetterDef());
1383:       assertFalse(node3.isIn());
1384:       assertFalse(node3.isEmpty());
1385:       assertFalse(node3.isDelProp());
1386:       assertFalse(node3.isIf());
1387:       assertFalse(node3.isHook());
1388:       assertFalse(node3.isNE());
1389:       assertFalse(node3.isFor());
1390:       assertFalse(node3.isComma());
1391:       assertFalse(node3.isThis());
1392:       assertFalse(node3.isRegExp());
1393:       assertFalse(node3.isVoid());
1394:       assertFalse(node3.isBreak());
1395:       assertFalse(node3.isInstanceOf());
1396:       assertEquals(0, node3.getChildCount());
1397:       assertFalse(node3.isDefaultCase());
1398:       assertFalse(node3.isTrue());
1399:       assertFalse(node3.isTry());
1400:       assertFalse(node3.isScript());
1401:       assertFalse(node3.isArrayLit());
1402:       assertFalse(node3.isLabelName());
1403:       assertFalse(node3.isStringKey());
1404:       assertFalse(node3.isVar());
1405:       assertFalse(node3.isParamList());
1406:       assertFalse(node3.isSwitch());
1407:       
1408:       boolean boolean2 = node2.isSwitch();
1409:       assertFalse(boolean2);
1410:       assertSame(node2, node3);
1411:       assertEquals(48, Node.DIRECTIVES);
1412:       assertEquals(55, Node.INFERRED_FUNCTION);
1413:       assertEquals(8, Node.FLAG_NO_THROWS);
1414:       assertEquals(39, Node.EMPTY_BLOCK);
1415:       assertEquals(4095, Node.COLUMN_MASK);
1416:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1417:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1418:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1419:       assertEquals(36, Node.QUOTED_PROP);
1420:       assertEquals(50, Node.FREE_CALL);
1421:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1422:       assertEquals(43, Node.IS_CONSTANT_NAME);
1423:       assertEquals(57, Node.REFLECTED_OBJECT);
1424:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1425:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1426:       assertEquals(1, Node.DECR_FLAG);
1427:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1428:       assertEquals(12, Node.COLUMN_BITS);
1429:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1430:       assertEquals(32, Node.INCRDECR_PROP);
1431:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1432:       assertEquals(37, Node.OPT_ARG_NAME);
1433:       assertEquals(49, Node.DIRECT_EVAL);
1434:       assertEquals(56, Node.CHANGE_TIME);
1435:       assertEquals(46, Node.IS_NAMESPACE);
1436:       assertEquals(54, Node.SLASH_V);
1437:       assertEquals(52, Node.LENGTH);
1438:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1439:       assertEquals(40, Node.ORIGINALNAME_PROP);
1440:       assertEquals(29, Node.JSDOC_INFO_PROP);
1441:       assertEquals(53, Node.INPUT_ID);
1442:       assertEquals(30, Node.VAR_ARGS_NAME);
1443:       assertEquals(57, Node.LAST_PROP);
1444:       assertEquals(2, Node.POST_FLAG);
1445:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1446:       assertEquals(47, Node.IS_DISPATCHER);
1447:       assertFalse(node2.equals((Object)node0));
1448:       assertFalse(node2.equals((Object)node1));
1449:       assertTrue(boolean2 == boolean0);
1450:       assertTrue(boolean2 == boolean1);
1451:       assertFalse(node2.isSetterDef());
1452:       assertFalse(node2.isParamList());
1453:       assertFalse(node2.isCall());
1454:       assertFalse(node2.isCatch());
1455:       assertEquals(0, node2.getChildCount());
1456:       assertFalse(node2.isVar());
1457:       assertFalse(node2.isBlock());
1458:       assertEquals(40, node2.getType());
1459:       assertFalse(node2.isFunction());
1460:       assertFalse(node2.isDebugger());
1461:       assertTrue(node2.isString());
1462:       assertFalse(node2.isTry());
1463:       assertFalse(node2.isArrayLit());
1464:       assertFalse(node2.isStringKey());
1465:       assertEquals((-1), node2.getSourcePosition());
1466:       assertFalse(node2.isDec());
1467:       assertFalse(node2.isDelProp());
1468:       assertFalse(node2.isTypeOf());
1469:       assertFalse(node2.isGetElem());
1470:       assertFalse(node2.isEmpty());
1471:       assertFalse(node2.isReturn());
1472:       assertFalse(node2.isAssignAdd());
1473:       assertFalse(node2.isAssign());
1474:       assertFalse(node2.isLabel());
1475:       assertFalse(node2.isWhile());
1476:       assertFalse(node2.hasChildren());
1477:       assertFalse(node2.isDefaultCase());
1478:       assertFalse(node2.isNew());
1479:       assertFalse(node2.isVoid());
1480:       assertFalse(node2.isDo());
1481:       assertFalse(node2.isAdd());
1482:       assertFalse(node2.isExprResult());
1483:       assertFalse(node2.isName());
1484:       assertFalse(node2.isOr());
1485:       assertFalse(node2.isNull());
1486:       assertFalse(node2.isTrue());
1487:       assertFalse(node2.isComma());
1488:       assertFalse(node2.isThis());
1489:       assertFalse(node2.isBreak());
1490:       assertFalse(node2.isInstanceOf());
1491:       assertFalse(node2.isGetProp());
1492:       assertFalse(node2.isFalse());
1493:       assertFalse(node2.isHook());
1494:       assertFalse(node2.isThrow());
1495:       assertFalse(node2.isSwitch());
1496:       assertEquals((-1), node2.getCharno());
1497:       assertFalse(node2.isCase());
1498:       assertFalse(node2.isScript());
1499:       assertFalse(node2.isAnd());
1500:       assertFalse(node2.isLabelName());
1501:       assertFalse(node2.isNot());
1502:       assertFalse(node2.isObjectLit());
1503:       assertFalse(node2.isNE());
1504:       assertFalse(node2.isIf());
1505:       assertFalse(node2.isNumber());
1506:       assertFalse(node2.isGetterDef());
1507:       assertEquals((-1), node2.getLineno());
1508:       assertFalse(node2.hasMoreThanOneChild());
1509:       assertFalse(node2.isCast());
1510:       assertFalse(node2.isContinue());
1511:       assertFalse(node2.hasOneChild());
1512:       assertFalse(node2.isFor());
1513:       assertFalse(node2.isInc());
1514:       assertFalse(node2.isRegExp());
1515:       assertFalse(node2.isWith());
1516:       assertFalse(node2.isIn());
1517:       
1518:       Node node4 = node0.cloneNode();
1519:       assertNotSame(node0, node4);
1520:       assertNotSame(node0, node1);
1521:       assertNotSame(node4, node0);
1522:       assertNotSame(node4, node1);
1523:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1524:       assertEquals(40, Node.ORIGINALNAME_PROP);
1525:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1526:       assertEquals(48, Node.DIRECTIVES);
1527:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1528:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1529:       assertEquals(4095, Node.COLUMN_MASK);
1530:       assertEquals(30, Node.VAR_ARGS_NAME);
1531:       assertEquals(1, Node.DECR_FLAG);
1532:       assertEquals(12, Node.COLUMN_BITS);
1533:       assertEquals(43, Node.IS_CONSTANT_NAME);
1534:       assertEquals(32, Node.INCRDECR_PROP);
1535:       assertEquals(46, Node.IS_NAMESPACE);
1536:       assertEquals(54, Node.SLASH_V);
1537:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1538:       assertEquals(50, Node.FREE_CALL);
1539:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1540:       assertEquals(29, Node.JSDOC_INFO_PROP);
1541:       assertEquals(56, Node.CHANGE_TIME);
1542:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1543:       assertEquals(37, Node.OPT_ARG_NAME);
1544:       assertEquals(47, Node.IS_DISPATCHER);
1545:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1546:       assertEquals(2, Node.POST_FLAG);
1547:       assertEquals(55, Node.INFERRED_FUNCTION);
1548:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1549:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1550:       assertEquals(57, Node.LAST_PROP);
1551:       assertEquals(49, Node.DIRECT_EVAL);
1552:       assertEquals(53, Node.INPUT_ID);
1553:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1554:       assertEquals(39, Node.EMPTY_BLOCK);
1555:       assertEquals(36, Node.QUOTED_PROP);
1556:       assertEquals(57, Node.REFLECTED_OBJECT);
1557:       assertEquals(52, Node.LENGTH);
1558:       assertEquals(8, Node.FLAG_NO_THROWS);
1559:       assertEquals(1, Node.DECR_FLAG);
1560:       assertEquals(12, Node.COLUMN_BITS);
1561:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1562:       assertEquals(57, Node.LAST_PROP);
1563:       assertEquals(46, Node.IS_NAMESPACE);
1564:       assertEquals(49, Node.DIRECT_EVAL);
1565:       assertEquals(32, Node.INCRDECR_PROP);
1566:       assertEquals(54, Node.SLASH_V);
1567:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1568:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1569:       assertEquals(52, Node.LENGTH);
1570:       assertEquals(29, Node.JSDOC_INFO_PROP);
1571:       assertEquals(40, Node.ORIGINALNAME_PROP);
1572:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1573:       assertEquals(47, Node.IS_DISPATCHER);
1574:       assertEquals(2, Node.POST_FLAG);
1575:       assertEquals(30, Node.VAR_ARGS_NAME);
1576:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1577:       assertEquals(55, Node.INFERRED_FUNCTION);
1578:       assertEquals(43, Node.IS_CONSTANT_NAME);
1579:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1580:       assertEquals(39, Node.EMPTY_BLOCK);
1581:       assertEquals(53, Node.INPUT_ID);
1582:       assertEquals(36, Node.QUOTED_PROP);
1583:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1584:       assertEquals(50, Node.FREE_CALL);
1585:       assertEquals(8, Node.FLAG_NO_THROWS);
1586:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1587:       assertEquals(57, Node.REFLECTED_OBJECT);
1588:       assertEquals(56, Node.CHANGE_TIME);
1589:       assertEquals(48, Node.DIRECTIVES);
1590:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1591:       assertEquals(37, Node.OPT_ARG_NAME);
1592:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1593:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1594:       assertEquals(4095, Node.COLUMN_MASK);
1595:       assertEquals(0, nodeArray0.length);
1596:       assertNotNull(node4);
1597:       assertFalse(node0.equals((Object)node2));
1598:       assertFalse(node0.equals((Object)node3));
1599:       assertFalse(node0.equals((Object)node1));
1600:       assertFalse(node4.equals((Object)node2));
1601:       assertFalse(node4.equals((Object)node3));
1602:       assertFalse(node4.equals((Object)node0));
1603:       assertFalse(node4.equals((Object)node1));
1604:       assertFalse(node0.isVar());
1605:       assertFalse(node0.isAdd());
1606:       assertFalse(node0.isCall());
1607:       assertFalse(node0.isBlock());
1608:       assertFalse(node0.isNew());
1609:       assertFalse(node0.isStringKey());
1610:       assertFalse(node0.isName());
1611:       assertEquals(0, node0.getSourcePosition());
1612:       assertFalse(node0.isSetterDef());
1613:       assertFalse(node0.isNull());
1614:       assertEquals(0, node0.getChildCount());
1615:       assertFalse(node0.isParamList());
1616:       assertEquals(0, node0.getLineno());
1617:       assertFalse(node0.isDo());
1618:       assertFalse(node0.isAssignAdd());
1619:       assertFalse(node0.isDefaultCase());
1620:       assertFalse(node0.isLabel());
1621:       assertFalse(node0.isContinue());
1622:       assertFalse(node0.isFunction());
1623:       assertFalse(node0.isCast());
1624:       assertFalse(node0.isGetElem());
1625:       assertFalse(node0.isVoid());
1626:       assertFalse(node0.isDelProp());
1627:       assertFalse(node0.isEmpty());
1628:       assertFalse(node0.isTrue());
1629:       assertFalse(node0.isDebugger());
1630:       assertFalse(node0.isOr());
1631:       assertFalse(node0.isNot());
1632:       assertFalse(node0.isObjectLit());
1633:       assertFalse(node0.isReturn());
1634:       assertEquals(330, node0.getType());
1635:       assertFalse(node0.isGetProp());
1636:       assertFalse(node0.isDec());
1637:       assertFalse(node0.isBreak());
1638:       assertFalse(node0.isWhile());
1639:       assertFalse(node0.hasChildren());
1640:       assertFalse(node0.isExprResult());
1641:       assertFalse(node0.isComma());
1642:       assertFalse(node0.isAssign());
1643:       assertFalse(node0.isTypeOf());
1644:       assertFalse(node0.isHook());
1645:       assertFalse(node0.isThrow());
1646:       assertFalse(node0.isSwitch());
1647:       assertFalse(node0.isString());
1648:       assertFalse(node0.isInc());
1649:       assertFalse(node0.isIn());
1650:       assertFalse(node0.isAnd());
1651:       assertFalse(node0.isFalse());
1652:       assertFalse(node0.hasOneChild());
1653:       assertFalse(node0.isArrayLit());
1654:       assertFalse(node0.isTry());
1655:       assertFalse(node0.isLabelName());
1656:       assertFalse(node0.isIf());
1657:       assertFalse(node0.isNumber());
1658:       assertFalse(node0.isNE());
1659:       assertEquals(0, node0.getCharno());
1660:       assertFalse(node0.isScript());
1661:       assertFalse(node0.isGetterDef());
1662:       assertFalse(node0.isInstanceOf());
1663:       assertFalse(node0.isCatch());
1664:       assertFalse(node0.isCase());
1665:       assertFalse(node0.isThis());
1666:       assertFalse(node0.isFor());
1667:       assertFalse(node0.hasMoreThanOneChild());
1668:       assertFalse(node0.isWith());
1669:       assertFalse(node0.isRegExp());
1670:       assertFalse(node4.isIn());
1671:       assertFalse(node4.isCase());
1672:       assertEquals(330, node4.getType());
1673:       assertFalse(node4.isDelProp());
1674:       assertFalse(node4.isFor());
1675:       assertFalse(node4.isVoid());
1676:       assertFalse(node4.isThrow());
1677:       assertFalse(node4.isIf());
1678:       assertFalse(node4.isNE());
1679:       assertFalse(node4.isEmpty());
1680:       assertFalse(node4.isInc());
1681:       assertFalse(node4.isTrue());
1682:       assertEquals(0, node4.getChildCount());
1683:       assertFalse(node4.isInstanceOf());
1684:       assertFalse(node4.isParamList());
1685:       assertFalse(node4.isDefaultCase());
1686:       assertFalse(node4.isThis());
1687:       assertFalse(node4.isCatch());
1688:       assertFalse(node4.isRegExp());
1689:       assertFalse(node4.isWith());
1690:       assertFalse(node4.hasOneChild());
1691:       assertFalse(node4.isArrayLit());
1692:       assertFalse(node4.isHook());
1693:       assertFalse(node4.isBlock());
1694:       assertFalse(node4.isStringKey());
1695:       assertFalse(node4.isTry());
1696:       assertFalse(node4.isLabelName());
1697:       assertFalse(node4.isSwitch());
1698:       assertFalse(node4.isGetterDef());
1699:       assertFalse(node4.isScript());
1700:       assertFalse(node4.isNumber());
1701:       assertFalse(node4.isLabel());
1702:       assertFalse(node4.isReturn());
1703:       assertFalse(node4.isDo());
1704:       assertFalse(node4.isAssignAdd());
1705:       assertFalse(node4.hasChildren());
1706:       assertFalse(node4.isWhile());
1707:       assertFalse(node4.isDec());
1708:       assertFalse(node4.isGetElem());
1709:       assertFalse(node4.isContinue());
1710:       assertFalse(node4.isAssign());
1711:       assertFalse(node4.hasMoreThanOneChild());
1712:       assertFalse(node4.isTypeOf());
1713:       assertFalse(node4.isVar());
1714:       assertFalse(node4.isAdd());
1715:       assertFalse(node4.isCall());
1716:       assertFalse(node4.isNew());
1717:       assertFalse(node4.isName());
1718:       assertEquals(0, node4.getSourcePosition());
1719:       assertFalse(node4.isNull());
1720:       assertEquals(0, node4.getCharno());
1721:       assertFalse(node4.isSetterDef());
1722:       assertFalse(node4.isOr());
1723:       assertEquals(0, node4.getLineno());
1724:       assertFalse(node4.isAnd());
1725:       assertFalse(node4.isGetProp());
1726:       assertFalse(node4.isBreak());
1727:       assertFalse(node4.isExprResult());
1728:       assertFalse(node4.isComma());
1729:       assertFalse(node4.isFalse());
1730:       assertFalse(node4.isFunction());
1731:       assertFalse(node4.isCast());
1732:       assertFalse(node4.isString());
1733:       assertFalse(node4.isDebugger());
1734:       assertFalse(node4.isObjectLit());
1735:       assertFalse(node4.isNot());
1736:       
1737:       boolean boolean3 = node1.isNull();
1738:       assertFalse(boolean3);
1739:       assertNotSame(node1, node0);
1740:       assertNotSame(node1, node4);
1741:       assertEquals(29, Node.JSDOC_INFO_PROP);
1742:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1743:       assertEquals(2, Node.POST_FLAG);
1744:       assertEquals(56, Node.CHANGE_TIME);
1745:       assertEquals(47, Node.IS_DISPATCHER);
1746:       assertEquals(32, Node.INCRDECR_PROP);
1747:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1748:       assertEquals(53, Node.INPUT_ID);
1749:       assertEquals(49, Node.DIRECT_EVAL);
1750:       assertEquals(1, Node.DECR_FLAG);
1751:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1752:       assertEquals(36, Node.QUOTED_PROP);
1753:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1754:       assertEquals(12, Node.COLUMN_BITS);
1755:       assertEquals(48, Node.DIRECTIVES);
1756:       assertEquals(37, Node.OPT_ARG_NAME);
1757:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1758:       assertEquals(4095, Node.COLUMN_MASK);
1759:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1760:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1761:       assertEquals(50, Node.FREE_CALL);
1762:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1763:       assertEquals(57, Node.REFLECTED_OBJECT);
1764:       assertEquals(52, Node.LENGTH);
1765:       assertEquals(55, Node.INFERRED_FUNCTION);
1766:       assertEquals(8, Node.FLAG_NO_THROWS);
1767:       assertEquals(39, Node.EMPTY_BLOCK);
1768:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1769:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1770:       assertEquals(30, Node.VAR_ARGS_NAME);
1771:       assertEquals(57, Node.LAST_PROP);
1772:       assertEquals(43, Node.IS_CONSTANT_NAME);
1773:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1774:       assertEquals(46, Node.IS_NAMESPACE);
1775:       assertEquals(54, Node.SLASH_V);
1776:       assertEquals(40, Node.ORIGINALNAME_PROP);
1777:       assertFalse(node1.equals((Object)node3));
1778:       assertFalse(node1.equals((Object)node2));
1779:       assertFalse(node1.equals((Object)node0));
1780:       assertFalse(node1.equals((Object)node4));
1781:       assertTrue(boolean3 == boolean0);
1782:       assertTrue(boolean3 == boolean1);
1783:       assertTrue(boolean3 == boolean2);
1784:       assertFalse(node1.isCast());
1785:       assertFalse(node1.hasOneChild());
1786:       assertFalse(node1.isAssign());
1787:       assertFalse(node1.hasChildren());
1788:       assertFalse(node1.isDec());
1789:       assertFalse(node1.isTypeOf());
1790:       assertFalse(node1.isLabelName());
1791:       assertFalse(node1.isWith());
1792:       assertEquals((-1), node1.getLineno());
1793:       assertFalse(node1.isExprResult());
1794:       assertFalse(node1.isGetElem());
1795:       assertFalse(node1.hasMoreThanOneChild());
1796:       assertFalse(node1.isInstanceOf());
1797:       assertFalse(node1.isAnd());
1798:       assertFalse(node1.isObjectLit());
1799:       assertFalse(node1.isNot());
1800:       assertFalse(node1.isWhile());
1801:       assertFalse(node1.isThis());
1802:       assertFalse(node1.isReturn());
1803:       assertFalse(node1.isScript());
1804:       assertEquals((-1), node1.getSourcePosition());
1805:       assertFalse(node1.isNumber());
1806:       assertFalse(node1.isGetProp());
1807:       assertFalse(node1.isVar());
1808:       assertFalse(node1.isName());
1809:       assertFalse(node1.isStringKey());
1810:       assertEquals((-1), node1.getCharno());
1811:       assertFalse(node1.isNull());
1812:       assertFalse(node1.isSwitch());
1813:       assertTrue(node1.isThrow());
1814:       assertFalse(node1.isComma());
1815:       assertFalse(node1.isParamList());
1816:       assertFalse(node1.isBreak());
1817:       assertFalse(node1.isCall());
1818:       assertEquals(0, node1.getChildCount());
1819:       assertFalse(node1.isLabel());
1820:       assertFalse(node1.isAssignAdd());
1821:       assertFalse(node1.isOr());
1822:       assertFalse(node1.isDefaultCase());
1823:       assertFalse(node1.isEmpty());
1824:       assertFalse(node1.isDo());
1825:       assertFalse(node1.isAdd());
1826:       assertFalse(node1.isNew());
1827:       assertFalse(node1.isArrayLit());
1828:       assertFalse(node1.isFor());
1829:       assertFalse(node1.isTrue());
1830:       assertFalse(node1.isNE());
1831:       assertFalse(node1.isVoid());
1832:       assertFalse(node1.isIf());
1833:       assertFalse(node1.isDelProp());
1834:       assertFalse(node1.isRegExp());
1835:       assertFalse(node1.isFunction());
1836:       assertFalse(node1.isCatch());
1837:       assertFalse(node1.isDebugger());
1838:       assertFalse(node1.isGetterDef());
1839:       assertFalse(node1.isTry());
1840:       assertFalse(node1.isCase());
1841:       assertFalse(node1.isString());
1842:       assertEquals(49, node1.getType());
1843:       assertFalse(node1.isFalse());
1844:       assertFalse(node1.isHook());
1845:       assertFalse(node1.isBlock());
1846:       assertFalse(node1.isIn());
1847:       assertFalse(node1.isContinue());
1848:       assertFalse(node1.isInc());
1849:       assertFalse(node1.isSetterDef());
1850:       
1851:       Node node5 = Node.newString("xpBF>P}ZAl``iC)9", 49, 1);
1852:       assertNotSame(node5, node2);
1853:       assertNotSame(node5, node3);
1854:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1855:       assertEquals(50, Node.FREE_CALL);
1856:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1857:       assertEquals(40, Node.ORIGINALNAME_PROP);
1858:       assertEquals(39, Node.EMPTY_BLOCK);
1859:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1860:       assertEquals(57, Node.LAST_PROP);
1861:       assertEquals(30, Node.VAR_ARGS_NAME);
1862:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1863:       assertEquals(1, Node.DECR_FLAG);
1864:       assertEquals(32, Node.INCRDECR_PROP);
1865:       assertEquals(54, Node.SLASH_V);
1866:       assertEquals(46, Node.IS_NAMESPACE);
1867:       assertEquals(43, Node.IS_CONSTANT_NAME);
1868:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1869:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1870:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1871:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1872:       assertEquals(29, Node.JSDOC_INFO_PROP);
1873:       assertEquals(53, Node.INPUT_ID);
1874:       assertEquals(2, Node.POST_FLAG);
1875:       assertEquals(12, Node.COLUMN_BITS);
1876:       assertEquals(47, Node.IS_DISPATCHER);
1877:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1878:       assertEquals(55, Node.INFERRED_FUNCTION);
1879:       assertEquals(49, Node.DIRECT_EVAL);
1880:       assertEquals(4095, Node.COLUMN_MASK);
1881:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1882:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1883:       assertEquals(37, Node.OPT_ARG_NAME);
1884:       assertEquals(48, Node.DIRECTIVES);
1885:       assertEquals(52, Node.LENGTH);
1886:       assertEquals(8, Node.FLAG_NO_THROWS);
1887:       assertEquals(56, Node.CHANGE_TIME);
1888:       assertEquals(36, Node.QUOTED_PROP);
1889:       assertEquals(57, Node.REFLECTED_OBJECT);
1890:       assertNotNull(node5);
1891:       assertFalse(node5.equals((Object)node2));
1892:       assertFalse(node5.equals((Object)node3));
1893:       assertFalse(node5.equals((Object)node4));
1894:       assertFalse(node5.equals((Object)node0));
1895:       assertFalse(node5.equals((Object)node1));
1896:       assertFalse(node5.isInc());
1897:       assertFalse(node5.isBreak());
1898:       assertEquals(200705, node5.getSourcePosition());
1899:       assertFalse(node5.isSwitch());
1900:       assertFalse(node5.isIn());
1901:       assertFalse(node5.isFalse());
1902:       assertFalse(node5.isThrow());
1903:       assertFalse(node5.hasOneChild());
1904:       assertFalse(node5.isTry());
1905:       assertFalse(node5.isScript());
1906:       assertFalse(node5.isArrayLit());
1907:       assertFalse(node5.isGetterDef());
1908:       assertFalse(node5.isIf());
1909:       assertFalse(node5.isLabelName());
1910:       assertFalse(node5.isNumber());
1911:       assertFalse(node5.isNE());
1912:       assertFalse(node5.isInstanceOf());
1913:       assertFalse(node5.hasMoreThanOneChild());
1914:       assertFalse(node5.isCatch());
1915:       assertFalse(node5.isCase());
1916:       assertFalse(node5.isRegExp());
1917:       assertFalse(node5.isWith());
1918:       assertFalse(node5.isFor());
1919:       assertFalse(node5.isHook());
1920:       assertFalse(node5.isThis());
1921:       assertFalse(node5.isBlock());
1922:       assertTrue(node5.isString());
1923:       assertFalse(node5.isCall());
1924:       assertFalse(node5.isNew());
1925:       assertFalse(node5.isAdd());
1926:       assertEquals(49, node5.getLineno());
1927:       assertFalse(node5.isName());
1928:       assertFalse(node5.isParamList());
1929:       assertFalse(node5.isStringKey());
1930:       assertFalse(node5.isNull());
1931:       assertEquals(1, node5.getCharno());
1932:       assertEquals(0, node5.getChildCount());
1933:       assertFalse(node5.isAssignAdd());
1934:       assertFalse(node5.isOr());
1935:       assertFalse(node5.isContinue());
1936:       assertFalse(node5.isSetterDef());
1937:       assertFalse(node5.isDo());
1938:       assertFalse(node5.isDefaultCase());
1939:       assertFalse(node5.isFunction());
1940:       assertFalse(node5.isVar());
1941:       assertFalse(node5.isLabel());
1942:       assertEquals(40, node5.getType());
1943:       assertFalse(node5.isVoid());
1944:       assertFalse(node5.isExprResult());
1945:       assertFalse(node5.isCast());
1946:       assertFalse(node5.isEmpty());
1947:       assertFalse(node5.isGetElem());
1948:       assertFalse(node5.isDelProp());
1949:       assertFalse(node5.isNot());
1950:       assertFalse(node5.isTrue());
1951:       assertFalse(node5.isAnd());
1952:       assertFalse(node5.isDebugger());
1953:       assertFalse(node5.isObjectLit());
1954:       assertFalse(node5.isGetProp());
1955:       assertFalse(node5.isWhile());
1956:       assertFalse(node5.hasChildren());
1957:       assertFalse(node5.isDec());
1958:       assertFalse(node5.isTypeOf());
1959:       assertFalse(node5.isAssign());
1960:       assertFalse(node5.isComma());
1961:       assertFalse(node5.isReturn());
1962:       
1963:       Node node6 = new Node(1, node3, node3, node5, 1051, 31);
1964:       assertEquals(29, Node.JSDOC_INFO_PROP);
1965:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1966:       assertEquals(2, Node.POST_FLAG);
1967:       assertEquals(56, Node.CHANGE_TIME);
1968:       assertEquals(47, Node.IS_DISPATCHER);
1969:       assertEquals(32, Node.INCRDECR_PROP);
1970:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1971:       assertEquals(53, Node.INPUT_ID);
1972:       assertEquals(49, Node.DIRECT_EVAL);
1973:       assertEquals(1, Node.DECR_FLAG);
1974:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1975:       assertEquals(36, Node.QUOTED_PROP);
1976:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1977:       assertEquals(12, Node.COLUMN_BITS);
1978:       assertEquals(48, Node.DIRECTIVES);
1979:       assertEquals(37, Node.OPT_ARG_NAME);
1980:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1981:       assertEquals(4095, Node.COLUMN_MASK);
1982:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1983:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1984:       assertEquals(50, Node.FREE_CALL);
1985:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1986:       assertEquals(57, Node.REFLECTED_OBJECT);
1987:       assertEquals(52, Node.LENGTH);
1988:       assertEquals(55, Node.INFERRED_FUNCTION);
1989:       assertEquals(8, Node.FLAG_NO_THROWS);
1990:       assertEquals(39, Node.EMPTY_BLOCK);
1991:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1992:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1993:       assertEquals(30, Node.VAR_ARGS_NAME);
1994:       assertEquals(57, Node.LAST_PROP);
1995:       assertEquals(43, Node.IS_CONSTANT_NAME);
1996:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1997:       assertEquals(46, Node.IS_NAMESPACE);
1998:       assertEquals(54, Node.SLASH_V);
1999:       assertEquals(40, Node.ORIGINALNAME_PROP);
2000:       assertEquals(48, Node.DIRECTIVES);
2001:       assertEquals(55, Node.INFERRED_FUNCTION);
2002:       assertEquals(8, Node.FLAG_NO_THROWS);
2003:       assertEquals(39, Node.EMPTY_BLOCK);
2004:       assertEquals(4095, Node.COLUMN_MASK);
2005:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2006:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2007:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2008:       assertEquals(36, Node.QUOTED_PROP);
2009:       assertEquals(50, Node.FREE_CALL);
2010:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2011:       assertEquals(43, Node.IS_CONSTANT_NAME);
2012:       assertEquals(57, Node.REFLECTED_OBJECT);
2013:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2014:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2015:       assertEquals(1, Node.DECR_FLAG);
2016:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2017:       assertEquals(12, Node.COLUMN_BITS);
2018:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2019:       assertEquals(32, Node.INCRDECR_PROP);
2020:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2021:       assertEquals(37, Node.OPT_ARG_NAME);
2022:       assertEquals(49, Node.DIRECT_EVAL);
2023:       assertEquals(56, Node.CHANGE_TIME);
2024:       assertEquals(46, Node.IS_NAMESPACE);
2025:       assertEquals(54, Node.SLASH_V);
2026:       assertEquals(52, Node.LENGTH);
2027:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2028:       assertEquals(40, Node.ORIGINALNAME_PROP);
2029:       assertEquals(29, Node.JSDOC_INFO_PROP);
2030:       assertEquals(53, Node.INPUT_ID);
2031:       assertEquals(30, Node.VAR_ARGS_NAME);
2032:       assertEquals(57, Node.LAST_PROP);
2033:       assertEquals(2, Node.POST_FLAG);
2034:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2035:       assertEquals(47, Node.IS_DISPATCHER);
2036:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2037:       assertEquals(57, Node.LAST_PROP);
2038:       assertEquals(30, Node.VAR_ARGS_NAME);
2039:       assertEquals(49, Node.DIRECT_EVAL);
2040:       assertEquals(1, Node.DECR_FLAG);
2041:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2042:       assertEquals(12, Node.COLUMN_BITS);
2043:       assertEquals(54, Node.SLASH_V);
2044:       assertEquals(40, Node.ORIGINALNAME_PROP);
2045:       assertEquals(37, Node.OPT_ARG_NAME);
2046:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2047:       assertEquals(47, Node.IS_DISPATCHER);
2048:       assertEquals(2, Node.POST_FLAG);
2049:       assertEquals(56, Node.CHANGE_TIME);
2050:       assertEquals(57, Node.REFLECTED_OBJECT);
2051:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2052:       assertEquals(52, Node.LENGTH);
2053:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2054:       assertEquals(8, Node.FLAG_NO_THROWS);
2055:       assertEquals(39, Node.EMPTY_BLOCK);
2056:       assertEquals(53, Node.INPUT_ID);
2057:       assertEquals(55, Node.INFERRED_FUNCTION);
2058:       assertEquals(29, Node.JSDOC_INFO_PROP);
2059:       assertEquals(36, Node.QUOTED_PROP);
2060:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2061:       assertEquals(43, Node.IS_CONSTANT_NAME);
2062:       assertEquals(48, Node.DIRECTIVES);
2063:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2064:       assertEquals(4095, Node.COLUMN_MASK);
2065:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2066:       assertEquals(50, Node.FREE_CALL);
2067:       assertEquals(32, Node.INCRDECR_PROP);
2068:       assertEquals(46, Node.IS_NAMESPACE);
2069:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2070:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2071:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2072:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2073:       assertEquals(50, Node.FREE_CALL);
2074:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2075:       assertEquals(40, Node.ORIGINALNAME_PROP);
2076:       assertEquals(39, Node.EMPTY_BLOCK);
2077:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2078:       assertEquals(57, Node.LAST_PROP);
2079:       assertEquals(30, Node.VAR_ARGS_NAME);
2080:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2081:       assertEquals(1, Node.DECR_FLAG);
2082:       assertEquals(32, Node.INCRDECR_PROP);
2083:       assertEquals(54, Node.SLASH_V);
2084:       assertEquals(46, Node.IS_NAMESPACE);
2085:       assertEquals(43, Node.IS_CONSTANT_NAME);
2086:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2087:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2088:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2089:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2090:       assertEquals(29, Node.JSDOC_INFO_PROP);
2091:       assertEquals(53, Node.INPUT_ID);
2092:       assertEquals(2, Node.POST_FLAG);
2093:       assertEquals(12, Node.COLUMN_BITS);
2094:       assertEquals(47, Node.IS_DISPATCHER);
2095:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2096:       assertEquals(55, Node.INFERRED_FUNCTION);
2097:       assertEquals(49, Node.DIRECT_EVAL);
2098:       assertEquals(4095, Node.COLUMN_MASK);
2099:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2100:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2101:       assertEquals(37, Node.OPT_ARG_NAME);
2102:       assertEquals(48, Node.DIRECTIVES);
2103:       assertEquals(52, Node.LENGTH);
2104:       assertEquals(8, Node.FLAG_NO_THROWS);
2105:       assertEquals(56, Node.CHANGE_TIME);
2106:       assertEquals(36, Node.QUOTED_PROP);
2107:       assertEquals(57, Node.REFLECTED_OBJECT);
2108:       assertEquals(8, Node.FLAG_NO_THROWS);
2109:       assertEquals(39, Node.EMPTY_BLOCK);
2110:       assertEquals(48, Node.DIRECTIVES);
2111:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2112:       assertEquals(4095, Node.COLUMN_MASK);
2113:       assertEquals(40, Node.ORIGINALNAME_PROP);
2114:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2115:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2116:       assertEquals(30, Node.VAR_ARGS_NAME);
2117:       assertEquals(36, Node.QUOTED_PROP);
2118:       assertEquals(49, Node.DIRECT_EVAL);
2119:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2120:       assertEquals(57, Node.LAST_PROP);
2121:       assertEquals(57, Node.REFLECTED_OBJECT);
2122:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2123:       assertEquals(29, Node.JSDOC_INFO_PROP);
2124:       assertEquals(52, Node.LENGTH);
2125:       assertEquals(53, Node.INPUT_ID);
2126:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2127:       assertEquals(55, Node.INFERRED_FUNCTION);
2128:       assertEquals(2, Node.POST_FLAG);
2129:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2130:       assertEquals(47, Node.IS_DISPATCHER);
2131:       assertEquals(37, Node.OPT_ARG_NAME);
2132:       assertEquals(46, Node.IS_NAMESPACE);
2133:       assertEquals(56, Node.CHANGE_TIME);
2134:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2135:       assertEquals(12, Node.COLUMN_BITS);
2136:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2137:       assertEquals(54, Node.SLASH_V);
2138:       assertEquals(43, Node.IS_CONSTANT_NAME);
2139:       assertEquals(32, Node.INCRDECR_PROP);
2140:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2141:       assertEquals(1, Node.DECR_FLAG);
2142:       assertEquals(50, Node.FREE_CALL);
2143:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2144:       assertNotNull(node6);
2145:       assertFalse(node1.equals((Object)node3));
2146:       assertFalse(node1.equals((Object)node2));
2147:       assertFalse(node1.equals((Object)node5));
2148:       assertFalse(node1.equals((Object)node0));
2149:       assertFalse(node1.equals((Object)node4));
2150:       assertFalse(node2.equals((Object)node5));
2151:       assertFalse(node2.equals((Object)node0));
2152:       assertFalse(node2.equals((Object)node1));
2153:       assertFalse(node2.equals((Object)node4));
2154:       assertFalse(node3.equals((Object)node1));
2155:       assertFalse(node3.equals((Object)node4));
2156:       assertFalse(node3.equals((Object)node5));
2157:       assertFalse(node3.equals((Object)node0));
2158:       assertFalse(node5.equals((Object)node2));
2159:       assertFalse(node5.equals((Object)node3));
2160:       assertFalse(node5.equals((Object)node4));
2161:       assertFalse(node5.equals((Object)node0));
2162:       assertFalse(node5.equals((Object)node1));
2163:       assertFalse(node6.equals((Object)node3));
2164:       assertFalse(node6.equals((Object)node0));
2165:       assertFalse(node6.equals((Object)node5));
2166:       assertFalse(node6.equals((Object)node2));
2167:       assertFalse(node6.equals((Object)node4));
2168:       assertFalse(node6.equals((Object)node1));
2169:       assertFalse(node1.isCast());
2170:       assertFalse(node1.hasOneChild());
2171:       assertFalse(node1.isAssign());
2172:       assertFalse(node1.hasChildren());
2173:       assertFalse(node1.isDec());
2174:       assertFalse(node1.isTypeOf());
2175:       assertFalse(node1.isLabelName());
2176:       assertFalse(node1.isWith());
2177:       assertEquals((-1), node1.getLineno());
2178:       assertFalse(node1.isExprResult());
2179:       assertFalse(node1.isGetElem());
2180:       assertFalse(node1.hasMoreThanOneChild());
2181:       assertFalse(node1.isInstanceOf());
2182:       assertFalse(node1.isAnd());
2183:       assertFalse(node1.isObjectLit());
2184:       assertFalse(node1.isNot());
2185:       assertFalse(node1.isWhile());
2186:       assertFalse(node1.isThis());
2187:       assertFalse(node1.isReturn());
2188:       assertFalse(node1.isScript());
2189:       assertEquals((-1), node1.getSourcePosition());
2190:       assertFalse(node1.isNumber());
2191:       assertFalse(node1.isGetProp());
2192:       assertFalse(node1.isVar());
2193:       assertFalse(node1.isName());
2194:       assertFalse(node1.isStringKey());
2195:       assertEquals((-1), node1.getCharno());
2196:       assertFalse(node1.isNull());
2197:       assertFalse(node1.isSwitch());
2198:       assertTrue(node1.isThrow());
2199:       assertFalse(node1.isComma());
2200:       assertFalse(node1.isParamList());
2201:       assertFalse(node1.isBreak());
2202:       assertFalse(node1.isCall());
2203:       assertEquals(0, node1.getChildCount());
2204:       assertFalse(node1.isLabel());
2205:       assertFalse(node1.isAssignAdd());
2206:       assertFalse(node1.isOr());
2207:       assertFalse(node1.isDefaultCase());
2208:       assertFalse(node1.isEmpty());
2209:       assertFalse(node1.isDo());
2210:       assertFalse(node1.isAdd());
2211:       assertFalse(node1.isNew());
2212:       assertFalse(node1.isArrayLit());
2213:       assertFalse(node1.isFor());
2214:       assertFalse(node1.isTrue());
2215:       assertFalse(node1.isNE());
2216:       assertFalse(node1.isVoid());
2217:       assertFalse(node1.isIf());
2218:       assertFalse(node1.isDelProp());
2219:       assertFalse(node1.isRegExp());
2220:       assertFalse(node1.isFunction());
2221:       assertFalse(node1.isCatch());
2222:       assertFalse(node1.isDebugger());
2223:       assertFalse(node1.isGetterDef());
2224:       assertFalse(node1.isTry());
2225:       assertFalse(node1.isCase());
2226:       assertFalse(node1.isString());
2227:       assertEquals(49, node1.getType());
2228:       assertFalse(node1.isFalse());
2229:       assertFalse(node1.isHook());
2230:       assertFalse(node1.isBlock());
2231:       assertFalse(node1.isIn());
2232:       assertFalse(node1.isContinue());
2233:       assertFalse(node1.isInc());
2234:       assertFalse(node1.isSetterDef());
2235:       assertFalse(node2.isSetterDef());
2236:       assertFalse(node2.isParamList());
2237:       assertFalse(node2.isCall());
2238:       assertFalse(node2.isCatch());
2239:       assertEquals(0, node2.getChildCount());
2240:       assertFalse(node2.isVar());
2241:       assertFalse(node2.isBlock());
2242:       assertEquals(40, node2.getType());
2243:       assertFalse(node2.isFunction());
2244:       assertFalse(node2.isDebugger());
2245:       assertTrue(node2.isString());
2246:       assertFalse(node2.isTry());
2247:       assertFalse(node2.isArrayLit());
2248:       assertFalse(node2.isStringKey());
2249:       assertEquals((-1), node2.getSourcePosition());
2250:       assertFalse(node2.isDec());
2251:       assertFalse(node2.isDelProp());
2252:       assertFalse(node2.isTypeOf());
2253:       assertFalse(node2.isGetElem());
2254:       assertFalse(node2.isEmpty());
2255:       assertFalse(node2.isReturn());
2256:       assertFalse(node2.isAssignAdd());
2257:       assertFalse(node2.isAssign());
2258:       assertFalse(node2.isLabel());
2259:       assertFalse(node2.isWhile());
2260:       assertFalse(node2.hasChildren());
2261:       assertFalse(node2.isDefaultCase());
2262:       assertFalse(node2.isNew());
2263:       assertFalse(node2.isVoid());
2264:       assertFalse(node2.isDo());
2265:       assertFalse(node2.isAdd());
2266:       assertFalse(node2.isExprResult());
2267:       assertFalse(node2.isName());
2268:       assertFalse(node2.isOr());
2269:       assertFalse(node2.isNull());
2270:       assertFalse(node2.isTrue());
2271:       assertFalse(node2.isComma());
2272:       assertFalse(node2.isThis());
2273:       assertFalse(node2.isBreak());
2274:       assertFalse(node2.isInstanceOf());
2275:       assertFalse(node2.isGetProp());
2276:       assertFalse(node2.isFalse());
2277:       assertFalse(node2.isHook());
2278:       assertFalse(node2.isThrow());
2279:       assertFalse(node2.isSwitch());
2280:       assertEquals((-1), node2.getCharno());
2281:       assertFalse(node2.isCase());
2282:       assertFalse(node2.isScript());
2283:       assertFalse(node2.isAnd());
2284:       assertFalse(node2.isLabelName());
2285:       assertFalse(node2.isNot());
2286:       assertFalse(node2.isObjectLit());
2287:       assertFalse(node2.isNE());
2288:       assertFalse(node2.isIf());
2289:       assertFalse(node2.isNumber());
2290:       assertFalse(node2.isGetterDef());
2291:       assertEquals((-1), node2.getLineno());
2292:       assertFalse(node2.hasMoreThanOneChild());
2293:       assertFalse(node2.isCast());
2294:       assertFalse(node2.isContinue());
2295:       assertFalse(node2.hasOneChild());
2296:       assertFalse(node2.isFor());
2297:       assertFalse(node2.isInc());
2298:       assertFalse(node2.isRegExp());
2299:       assertFalse(node2.isWith());
2300:       assertFalse(node2.isIn());
2301:       assertFalse(node3.hasMoreThanOneChild());
2302:       assertFalse(node3.isContinue());
2303:       assertFalse(node3.isDo());
2304:       assertFalse(node3.isReturn());
2305:       assertFalse(node3.isWhile());
2306:       assertFalse(node3.isLabel());
2307:       assertFalse(node3.isAssignAdd());
2308:       assertTrue(node3.isString());
2309:       assertFalse(node3.isNew());
2310:       assertFalse(node3.isNumber());
2311:       assertEquals((-1), node3.getSourcePosition());
2312:       assertFalse(node3.isOr());
2313:       assertFalse(node3.isAdd());
2314:       assertFalse(node3.isCall());
2315:       assertFalse(node3.hasOneChild());
2316:       assertFalse(node3.isName());
2317:       assertFalse(node3.isAssign());
2318:       assertFalse(node3.hasChildren());
2319:       assertFalse(node3.isNull());
2320:       assertFalse(node3.isBlock());
2321:       assertFalse(node3.isExprResult());
2322:       assertFalse(node3.isTypeOf());
2323:       assertFalse(node3.isDec());
2324:       assertEquals((-1), node3.getLineno());
2325:       assertFalse(node3.isWith());
2326:       assertFalse(node3.isGetElem());
2327:       assertFalse(node3.isCatch());
2328:       assertFalse(node3.isAnd());
2329:       assertFalse(node3.isObjectLit());
2330:       assertFalse(node3.isNot());
2331:       assertEquals(40, node3.getType());
2332:       assertFalse(node3.isDebugger());
2333:       assertFalse(node3.isSetterDef());
2334:       assertFalse(node3.isGetProp());
2335:       assertFalse(node3.isFalse());
2336:       assertFalse(node3.isThrow());
2337:       assertFalse(node3.isFunction());
2338:       assertFalse(node3.isCast());
2339:       assertFalse(node3.isCase());
2340:       assertFalse(node3.isInc());
2341:       assertEquals((-1), node3.getCharno());
2342:       assertFalse(node3.isGetterDef());
2343:       assertFalse(node3.isIn());
2344:       assertFalse(node3.isEmpty());
2345:       assertFalse(node3.isDelProp());
2346:       assertFalse(node3.isIf());
2347:       assertFalse(node3.isHook());
2348:       assertFalse(node3.isNE());
2349:       assertFalse(node3.isFor());
2350:       assertFalse(node3.isComma());
2351:       assertFalse(node3.isThis());
2352:       assertFalse(node3.isRegExp());
2353:       assertFalse(node3.isVoid());
2354:       assertFalse(node3.isBreak());
2355:       assertFalse(node3.isInstanceOf());
2356:       assertEquals(0, node3.getChildCount());
2357:       assertFalse(node3.isDefaultCase());
2358:       assertFalse(node3.isTrue());
2359:       assertFalse(node3.isTry());
2360:       assertFalse(node3.isScript());
2361:       assertFalse(node3.isArrayLit());
2362:       assertFalse(node3.isLabelName());
2363:       assertFalse(node3.isStringKey());
2364:       assertFalse(node3.isVar());
2365:       assertFalse(node3.isParamList());
2366:       assertFalse(node3.isSwitch());
2367:       assertFalse(node5.isInc());
2368:       assertFalse(node5.isBreak());
2369:       assertEquals(200705, node5.getSourcePosition());
2370:       assertFalse(node5.isSwitch());
2371:       assertFalse(node5.isIn());
2372:       assertFalse(node5.isFalse());
2373:       assertFalse(node5.isThrow());
2374:       assertFalse(node5.hasOneChild());
2375:       assertFalse(node5.isTry());
2376:       assertFalse(node5.isScript());
2377:       assertFalse(node5.isArrayLit());
2378:       assertFalse(node5.isGetterDef());
2379:       assertFalse(node5.isIf());
2380:       assertFalse(node5.isLabelName());
2381:       assertFalse(node5.isNumber());
2382:       assertFalse(node5.isNE());
2383:       assertFalse(node5.isInstanceOf());
2384:       assertFalse(node5.hasMoreThanOneChild());
2385:       assertFalse(node5.isCatch());
2386:       assertFalse(node5.isCase());
2387:       assertFalse(node5.isRegExp());
2388:       assertFalse(node5.isWith());
2389:       assertFalse(node5.isFor());
2390:       assertFalse(node5.isHook());
2391:       assertFalse(node5.isThis());
2392:       assertFalse(node5.isBlock());
2393:       assertTrue(node5.isString());
2394:       assertFalse(node5.isCall());
2395:       assertFalse(node5.isNew());
2396:       assertFalse(node5.isAdd());
2397:       assertEquals(49, node5.getLineno());
2398:       assertFalse(node5.isName());
2399:       assertFalse(node5.isParamList());
2400:       assertFalse(node5.isStringKey());
2401:       assertFalse(node5.isNull());
2402:       assertEquals(1, node5.getCharno());
2403:       assertEquals(0, node5.getChildCount());
2404:       assertFalse(node5.isAssignAdd());
2405:       assertFalse(node5.isOr());
2406:       assertFalse(node5.isContinue());
2407:       assertFalse(node5.isSetterDef());
2408:       assertFalse(node5.isDo());
2409:       assertFalse(node5.isDefaultCase());
2410:       assertFalse(node5.isFunction());
2411:       assertFalse(node5.isVar());
2412:       assertFalse(node5.isLabel());
2413:       assertEquals(40, node5.getType());
2414:       assertFalse(node5.isVoid());
2415:       assertFalse(node5.isExprResult());
2416:       assertFalse(node5.isCast());
2417:       assertFalse(node5.isEmpty());
2418:       assertFalse(node5.isGetElem());
2419:       assertFalse(node5.isDelProp());
2420:       assertFalse(node5.isNot());
2421:       assertFalse(node5.isTrue());
2422:       assertFalse(node5.isAnd());
2423:       assertFalse(node5.isDebugger());
2424:       assertFalse(node5.isObjectLit());
2425:       assertFalse(node5.isGetProp());
2426:       assertFalse(node5.isWhile());
2427:       assertFalse(node5.hasChildren());
2428:       assertFalse(node5.isDec());
2429:       assertFalse(node5.isTypeOf());
2430:       assertFalse(node5.isAssign());
2431:       assertFalse(node5.isComma());
2432:       assertFalse(node5.isReturn());
2433:       assertFalse(node6.isName());
2434:       assertFalse(node6.isNull());
2435:       assertFalse(node6.isVar());
2436:       assertFalse(node6.isParamList());
2437:       assertFalse(node6.isStringKey());
2438:       assertFalse(node6.isAdd());
2439:       assertFalse(node6.isNew());
2440:       assertFalse(node6.isSetterDef());
2441:       assertFalse(node6.isTrue());
2442:       assertFalse(node6.isWhile());
2443:       assertFalse(node6.isBlock());
2444:       assertFalse(node6.isReturn());
2445:       assertFalse(node6.isVoid());
2446:       assertFalse(node6.isRegExp());
2447:       assertFalse(node6.isTypeOf());
2448:       assertFalse(node6.isCall());
2449:       assertFalse(node6.isCatch());
2450:       assertFalse(node6.isEmpty());
2451:       assertFalse(node6.isFor());
2452:       assertFalse(node6.isLabelName());
2453:       assertFalse(node6.isGetElem());
2454:       assertFalse(node6.isGetterDef());
2455:       assertFalse(node6.isDelProp());
2456:       assertFalse(node6.isTry());
2457:       assertFalse(node6.isAssignAdd());
2458:       assertEquals(31, node6.getCharno());
2459:       assertFalse(node6.isOr());
2460:       assertFalse(node6.hasOneChild());
2461:       assertFalse(node6.isScript());
2462:       assertFalse(node6.isNumber());
2463:       assertFalse(node6.isDo());
2464:       assertFalse(node6.isDefaultCase());
2465:       assertFalse(node6.isSwitch());
2466:       assertEquals(1051, node6.getLineno());
2467:       assertFalse(node6.isLabel());
2468:       assertFalse(node6.isArrayLit());
2469:       assertEquals(1, node6.getType());
2470:       assertFalse(node6.isFalse());
2471:       assertFalse(node6.isBreak());
2472:       assertFalse(node6.isHook());
2473:       assertFalse(node6.isThis());
2474:       assertFalse(node6.isThrow());
2475:       assertFalse(node6.isGetProp());
2476:       assertFalse(node6.isInc());
2477:       assertFalse(node6.isString());
2478:       assertFalse(node6.isCase());
2479:       assertFalse(node6.isWith());
2480:       assertTrue(node6.hasMoreThanOneChild());
2481:       assertTrue(node6.hasChildren());
2482:       assertFalse(node6.isComma());
2483:       assertFalse(node6.isExprResult());
2484:       assertFalse(node6.isInstanceOf());
2485:       assertEquals(4304927, node6.getSourcePosition());
2486:       assertFalse(node6.isDec());
2487:       assertFalse(node6.isAssign());
2488:       assertFalse(node6.isIf());
2489:       assertFalse(node6.isNE());
2490:       assertFalse(node6.isDebugger());
2491:       assertFalse(node6.isIn());
2492:       assertFalse(node6.isNot());
2493:       assertFalse(node6.isObjectLit());
2494:       assertFalse(node6.isAnd());
2495:       assertEquals(2, node6.getChildCount());
2496:       assertFalse(node6.isFunction());
2497:       assertFalse(node6.isContinue());
2498:       assertFalse(node6.isCast());
2499:       
2500:       Node node7 = null;
2501:       try {
2502:         node7 = new Node(48, node5, node3, node6, node2);
2503:         fail("Expecting exception: IllegalArgumentException");
2504:       
2505:       } catch(IllegalArgumentException e) {
2506:          //
2507:          // no message in exception (getMessage() returned null)
2508:          //
2509:          verifyException("com.google.common.base.Preconditions", e);
2510:       }
2511:   }
2512: }
RegularFileObject[/tmp/EvoSuite_88_1628157519511/com/google/javascript/rhino/Node_88_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:39 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_88_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_88_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_88_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.JSTypeNative",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.JSType$TypePair",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.JSType$2",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
375:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
377:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
378:     );
379:   }
380: }

[MASTER] 09:58:40.233 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node[] nodeArray0 = new Node[0];
Node node0 = new Node(330, nodeArray0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, nodeArray0.length);
assertNotNull(node0);
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertEquals(330, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isNE());
assertEquals(0, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());

Node node1 = new Node(49);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNull());
assertFalse(node1.isSwitch());
assertTrue(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(49, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isDelProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isVoid());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isExprResult());
assertFalse(node2.isName());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isIn());

Node node3 = node2.useSourceInfoIfMissingFrom(node1);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(node3);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNull());
assertFalse(node1.isSwitch());
assertTrue(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(49, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isDelProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isVoid());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isExprResult());
assertFalse(node2.isName());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isIn());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isDo());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertTrue(node3.isString());
assertFalse(node3.isNew());
assertFalse(node3.isNumber());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isCall());
assertFalse(node3.hasOneChild());
assertFalse(node3.isName());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.isNull());
assertFalse(node3.isBlock());
assertFalse(node3.isExprResult());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isWith());
assertFalse(node3.isGetElem());
assertFalse(node3.isCatch());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertEquals(40, node3.getType());
assertFalse(node3.isDebugger());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetProp());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isEmpty());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isHook());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertFalse(node3.isBreak());
assertFalse(node3.isInstanceOf());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());

Iterable<Node> iterable0 = node3.children();
assertFalse(iterable0.contains(node0));
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNull());
assertFalse(node1.isSwitch());
assertTrue(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(49, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isDelProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isVoid());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isExprResult());
assertFalse(node2.isName());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isIn());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isDo());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertTrue(node3.isString());
assertFalse(node3.isNew());
assertFalse(node3.isNumber());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isCall());
assertFalse(node3.hasOneChild());
assertFalse(node3.isName());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.isNull());
assertFalse(node3.isBlock());
assertFalse(node3.isExprResult());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isWith());
assertFalse(node3.isGetElem());
assertFalse(node3.isCatch());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertEquals(40, node3.getType());
assertFalse(node3.isDebugger());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetProp());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isEmpty());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isHook());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertFalse(node3.isBreak());
assertFalse(node3.isInstanceOf());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());

boolean boolean0 = node1.isGetProp();
assertFalse(boolean0);
assertNotSame(node1, node0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNull());
assertFalse(node1.isSwitch());
assertTrue(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(49, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

boolean boolean1 = node3.hasChildren();
assertFalse(boolean1);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNull());
assertFalse(node1.isSwitch());
assertTrue(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(49, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isDelProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isVoid());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isExprResult());
assertFalse(node2.isName());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isIn());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isDo());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertTrue(node3.isString());
assertFalse(node3.isNew());
assertFalse(node3.isNumber());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isCall());
assertFalse(node3.hasOneChild());
assertFalse(node3.isName());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.isNull());
assertFalse(node3.isBlock());
assertFalse(node3.isExprResult());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isWith());
assertFalse(node3.isGetElem());
assertFalse(node3.isCatch());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertEquals(40, node3.getType());
assertFalse(node3.isDebugger());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetProp());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isEmpty());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isHook());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertFalse(node3.isBreak());
assertFalse(node3.isInstanceOf());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());

boolean boolean2 = node2.isSwitch();
assertFalse(boolean2);
assertSame(node2, node3);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isDelProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isVoid());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isExprResult());
assertFalse(node2.isName());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isIn());

Node node4 = node0.cloneNode();
assertNotSame(node0, node4);
assertNotSame(node0, node1);
assertNotSame(node4, node0);
assertNotSame(node4, node1);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, nodeArray0.length);
assertNotNull(node4);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertEquals(330, node0.getType());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isNE());
assertEquals(0, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node4.isIn());
assertFalse(node4.isCase());
assertEquals(330, node4.getType());
assertFalse(node4.isDelProp());
assertFalse(node4.isFor());
assertFalse(node4.isVoid());
assertFalse(node4.isThrow());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertFalse(node4.isEmpty());
assertFalse(node4.isInc());
assertFalse(node4.isTrue());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isParamList());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isThis());
assertFalse(node4.isCatch());
assertFalse(node4.isRegExp());
assertFalse(node4.isWith());
assertFalse(node4.hasOneChild());
assertFalse(node4.isArrayLit());
assertFalse(node4.isHook());
assertFalse(node4.isBlock());
assertFalse(node4.isStringKey());
assertFalse(node4.isTry());
assertFalse(node4.isLabelName());
assertFalse(node4.isSwitch());
assertFalse(node4.isGetterDef());
assertFalse(node4.isScript());
assertFalse(node4.isNumber());
assertFalse(node4.isLabel());
assertFalse(node4.isReturn());
assertFalse(node4.isDo());
assertFalse(node4.isAssignAdd());
assertFalse(node4.hasChildren());
assertFalse(node4.isWhile());
assertFalse(node4.isDec());
assertFalse(node4.isGetElem());
assertFalse(node4.isContinue());
assertFalse(node4.isAssign());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isTypeOf());
assertFalse(node4.isVar());
assertFalse(node4.isAdd());
assertFalse(node4.isCall());
assertFalse(node4.isNew());
assertFalse(node4.isName());
assertEquals(0, node4.getSourcePosition());
assertFalse(node4.isNull());
assertEquals(0, node4.getCharno());
assertFalse(node4.isSetterDef());
assertFalse(node4.isOr());
assertEquals(0, node4.getLineno());
assertFalse(node4.isAnd());
assertFalse(node4.isGetProp());
assertFalse(node4.isBreak());
assertFalse(node4.isExprResult());
assertFalse(node4.isComma());
assertFalse(node4.isFalse());
assertFalse(node4.isFunction());
assertFalse(node4.isCast());
assertFalse(node4.isString());
assertFalse(node4.isDebugger());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());

boolean boolean3 = node1.isNull();
assertFalse(boolean3);
assertNotSame(node1, node0);
assertNotSame(node1, node4);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNull());
assertFalse(node1.isSwitch());
assertTrue(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(49, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

Node node5 = Node.newString("xpBF>P}ZAl``iC)9", 49, 1);
assertNotSame(node5, node2);
assertNotSame(node5, node3);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotNull(node5);
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.isInc());
assertFalse(node5.isBreak());
assertEquals(200705, node5.getSourcePosition());
assertFalse(node5.isSwitch());
assertFalse(node5.isIn());
assertFalse(node5.isFalse());
assertFalse(node5.isThrow());
assertFalse(node5.hasOneChild());
assertFalse(node5.isTry());
assertFalse(node5.isScript());
assertFalse(node5.isArrayLit());
assertFalse(node5.isGetterDef());
assertFalse(node5.isIf());
assertFalse(node5.isLabelName());
assertFalse(node5.isNumber());
assertFalse(node5.isNE());
assertFalse(node5.isInstanceOf());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isCatch());
assertFalse(node5.isCase());
assertFalse(node5.isRegExp());
assertFalse(node5.isWith());
assertFalse(node5.isFor());
assertFalse(node5.isHook());
assertFalse(node5.isThis());
assertFalse(node5.isBlock());
assertTrue(node5.isString());
assertFalse(node5.isCall());
assertFalse(node5.isNew());
assertFalse(node5.isAdd());
assertEquals(49, node5.getLineno());
assertFalse(node5.isName());
assertFalse(node5.isParamList());
assertFalse(node5.isStringKey());
assertFalse(node5.isNull());
assertEquals(1, node5.getCharno());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isOr());
assertFalse(node5.isContinue());
assertFalse(node5.isSetterDef());
assertFalse(node5.isDo());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isFunction());
assertFalse(node5.isVar());
assertFalse(node5.isLabel());
assertEquals(40, node5.getType());
assertFalse(node5.isVoid());
assertFalse(node5.isExprResult());
assertFalse(node5.isCast());
assertFalse(node5.isEmpty());
assertFalse(node5.isGetElem());
assertFalse(node5.isDelProp());
assertFalse(node5.isNot());
assertFalse(node5.isTrue());
assertFalse(node5.isAnd());
assertFalse(node5.isDebugger());
assertFalse(node5.isObjectLit());
assertFalse(node5.isGetProp());
assertFalse(node5.isWhile());
assertFalse(node5.hasChildren());
assertFalse(node5.isDec());
assertFalse(node5.isTypeOf());
assertFalse(node5.isAssign());
assertFalse(node5.isComma());
assertFalse(node5.isReturn());

Node node6 = new Node(1, node3, node3, node5, 1051, 31);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(node6);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node0));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node1));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node1));
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isWith());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNull());
assertFalse(node1.isSwitch());
assertTrue(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals(49, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isBlock());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isDelProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isVoid());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isExprResult());
assertFalse(node2.isName());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isIn());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isDo());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertTrue(node3.isString());
assertFalse(node3.isNew());
assertFalse(node3.isNumber());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isCall());
assertFalse(node3.hasOneChild());
assertFalse(node3.isName());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.isNull());
assertFalse(node3.isBlock());
assertFalse(node3.isExprResult());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isWith());
assertFalse(node3.isGetElem());
assertFalse(node3.isCatch());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertEquals(40, node3.getType());
assertFalse(node3.isDebugger());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetProp());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isEmpty());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isHook());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertFalse(node3.isBreak());
assertFalse(node3.isInstanceOf());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node5.isInc());
assertFalse(node5.isBreak());
assertEquals(200705, node5.getSourcePosition());
assertFalse(node5.isSwitch());
assertFalse(node5.isIn());
assertFalse(node5.isFalse());
assertFalse(node5.isThrow());
assertFalse(node5.hasOneChild());
assertFalse(node5.isTry());
assertFalse(node5.isScript());
assertFalse(node5.isArrayLit());
assertFalse(node5.isGetterDef());
assertFalse(node5.isIf());
assertFalse(node5.isLabelName());
assertFalse(node5.isNumber());
assertFalse(node5.isNE());
assertFalse(node5.isInstanceOf());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isCatch());
assertFalse(node5.isCase());
assertFalse(node5.isRegExp());
assertFalse(node5.isWith());
assertFalse(node5.isFor());
assertFalse(node5.isHook());
assertFalse(node5.isThis());
assertFalse(node5.isBlock());
assertTrue(node5.isString());
assertFalse(node5.isCall());
assertFalse(node5.isNew());
assertFalse(node5.isAdd());
assertEquals(49, node5.getLineno());
assertFalse(node5.isName());
assertFalse(node5.isParamList());
assertFalse(node5.isStringKey());
assertFalse(node5.isNull());
assertEquals(1, node5.getCharno());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isOr());
assertFalse(node5.isContinue());
assertFalse(node5.isSetterDef());
assertFalse(node5.isDo());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isFunction());
assertFalse(node5.isVar());
assertFalse(node5.isLabel());
assertEquals(40, node5.getType());
assertFalse(node5.isVoid());
assertFalse(node5.isExprResult());
assertFalse(node5.isCast());
assertFalse(node5.isEmpty());
assertFalse(node5.isGetElem());
assertFalse(node5.isDelProp());
assertFalse(node5.isNot());
assertFalse(node5.isTrue());
assertFalse(node5.isAnd());
assertFalse(node5.isDebugger());
assertFalse(node5.isObjectLit());
assertFalse(node5.isGetProp());
assertFalse(node5.isWhile());
assertFalse(node5.hasChildren());
assertFalse(node5.isDec());
assertFalse(node5.isTypeOf());
assertFalse(node5.isAssign());
assertFalse(node5.isComma());
assertFalse(node5.isReturn());
assertFalse(node6.isName());
assertFalse(node6.isNull());
assertFalse(node6.isVar());
assertFalse(node6.isParamList());
assertFalse(node6.isStringKey());
assertFalse(node6.isAdd());
assertFalse(node6.isNew());
assertFalse(node6.isSetterDef());
assertFalse(node6.isTrue());
assertFalse(node6.isWhile());
assertFalse(node6.isBlock());
assertFalse(node6.isReturn());
assertFalse(node6.isVoid());
assertFalse(node6.isRegExp());
assertFalse(node6.isTypeOf());
assertFalse(node6.isCall());
assertFalse(node6.isCatch());
assertFalse(node6.isEmpty());
assertFalse(node6.isFor());
assertFalse(node6.isLabelName());
assertFalse(node6.isGetElem());
assertFalse(node6.isGetterDef());
assertFalse(node6.isDelProp());
assertFalse(node6.isTry());
assertFalse(node6.isAssignAdd());
assertEquals(31, node6.getCharno());
assertFalse(node6.isOr());
assertFalse(node6.hasOneChild());
assertFalse(node6.isScript());
assertFalse(node6.isNumber());
assertFalse(node6.isDo());
assertFalse(node6.isDefaultCase());
assertFalse(node6.isSwitch());
assertEquals(1051, node6.getLineno());
assertFalse(node6.isLabel());
assertFalse(node6.isArrayLit());
assertEquals(1, node6.getType());
assertFalse(node6.isFalse());
assertFalse(node6.isBreak());
assertFalse(node6.isHook());
assertFalse(node6.isThis());
assertFalse(node6.isThrow());
assertFalse(node6.isGetProp());
assertFalse(node6.isInc());
assertFalse(node6.isString());
assertFalse(node6.isCase());
assertFalse(node6.isWith());
assertTrue(node6.hasMoreThanOneChild());
assertTrue(node6.hasChildren());
assertFalse(node6.isComma());
assertFalse(node6.isExprResult());
assertFalse(node6.isInstanceOf());
assertEquals(4304927, node6.getSourcePosition());
assertFalse(node6.isDec());
assertFalse(node6.isAssign());
assertFalse(node6.isIf());
assertFalse(node6.isNE());
assertFalse(node6.isDebugger());
assertFalse(node6.isIn());
assertFalse(node6.isNot());
assertFalse(node6.isObjectLit());
assertFalse(node6.isAnd());
assertEquals(2, node6.getChildCount());
assertFalse(node6.isFunction());
assertFalse(node6.isContinue());
assertFalse(node6.isCast());

Node node7 = new Node(48, node5, node3, node6, node2);

[MASTER] 09:58:41.575 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_96_1628157521435/com/google/javascript/rhino/Node_96_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_96_1628157521435/com/google/javascript/rhino/Node_96_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:41.575 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:41.575 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:41.576 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 767
[MASTER] 09:58:41.577 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_96_1628157521435/com/google/javascript/rhino/Node_96_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:41 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_96_tmp__ESTest extends Node_96_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = new Node(23, 48, 2810);
24:       assertEquals(54, Node.SLASH_V);
25:       assertEquals(52, Node.LENGTH);
26:       assertEquals(57, Node.REFLECTED_OBJECT);
27:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
28:       assertEquals(1, Node.DECR_FLAG);
29:       assertEquals(50, Node.FREE_CALL);
30:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
31:       assertEquals(57, Node.LAST_PROP);
32:       assertEquals(32, Node.INCRDECR_PROP);
33:       assertEquals(39, Node.EMPTY_BLOCK);
34:       assertEquals(15, Node.NO_SIDE_EFFECTS);
35:       assertEquals(48, Node.DIRECTIVES);
36:       assertEquals(8, Node.FLAG_NO_THROWS);
37:       assertEquals(56, Node.CHANGE_TIME);
38:       assertEquals(12, Node.COLUMN_BITS);
39:       assertEquals(49, Node.DIRECT_EVAL);
40:       assertEquals(4095, Node.COLUMN_MASK);
41:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
42:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
43:       assertEquals(37, Node.OPT_ARG_NAME);
44:       assertEquals(53, Node.INPUT_ID);
45:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
46:       assertEquals(43, Node.IS_CONSTANT_NAME);
47:       assertEquals(36, Node.QUOTED_PROP);
48:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
49:       assertEquals(29, Node.JSDOC_INFO_PROP);
50:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
51:       assertEquals(55, Node.INFERRED_FUNCTION);
52:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
53:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
54:       assertEquals(51, Node.STATIC_SOURCE_FILE);
55:       assertEquals(2, Node.POST_FLAG);
56:       assertEquals(46, Node.IS_NAMESPACE);
57:       assertEquals(47, Node.IS_DISPATCHER);
58:       assertEquals(30, Node.VAR_ARGS_NAME);
59:       assertEquals(40, Node.ORIGINALNAME_PROP);
60:       assertNotNull(node0);
61:       assertFalse(node0.isWhile());
62:       assertFalse(node0.isBlock());
63:       assertFalse(node0.hasMoreThanOneChild());
64:       assertFalse(node0.isContinue());
65:       assertFalse(node0.isName());
66:       assertFalse(node0.isCall());
67:       assertFalse(node0.isNumber());
68:       assertFalse(node0.isTypeOf());
69:       assertFalse(node0.isDec());
70:       assertFalse(node0.isParamList());
71:       assertFalse(node0.isStringKey());
72:       assertFalse(node0.isAssign());
73:       assertFalse(node0.isReturn());
74:       assertFalse(node0.hasChildren());
75:       assertFalse(node0.hasOneChild());
76:       assertEquals(199418, node0.getSourcePosition());
77:       assertEquals(48, node0.getLineno());
78:       assertFalse(node0.isScript());
79:       assertFalse(node0.isDefaultCase());
80:       assertFalse(node0.isTrue());
81:       assertEquals(0, node0.getChildCount());
82:       assertFalse(node0.isGetElem());
83:       assertFalse(node0.isVoid());
84:       assertFalse(node0.isLabelName());
85:       assertFalse(node0.isExprResult());
86:       assertFalse(node0.isArrayLit());
87:       assertFalse(node0.isNull());
88:       assertFalse(node0.isDelProp());
89:       assertFalse(node0.isOr());
90:       assertFalse(node0.isLabel());
91:       assertFalse(node0.isVar());
92:       assertEquals(2810, node0.getCharno());
93:       assertFalse(node0.isAssignAdd());
94:       assertFalse(node0.isNew());
95:       assertFalse(node0.isEmpty());
96:       assertFalse(node0.isDo());
97:       assertFalse(node0.isAdd());
98:       assertFalse(node0.isString());
99:       assertFalse(node0.isSwitch());
100:       assertFalse(node0.isBreak());
101:       assertFalse(node0.isGetterDef());
102:       assertFalse(node0.isFor());
103:       assertFalse(node0.isComma());
104:       assertFalse(node0.isThis());
105:       assertFalse(node0.isHook());
106:       assertFalse(node0.isCase());
107:       assertFalse(node0.isTry());
108:       assertFalse(node0.isGetProp());
109:       assertFalse(node0.isRegExp());
110:       assertFalse(node0.isWith());
111:       assertFalse(node0.isFunction());
112:       assertFalse(node0.isNot());
113:       assertFalse(node0.isObjectLit());
114:       assertFalse(node0.isDebugger());
115:       assertFalse(node0.isInstanceOf());
116:       assertFalse(node0.isCast());
117:       assertFalse(node0.isCatch());
118:       assertFalse(node0.isAnd());
119:       assertFalse(node0.isNE());
120:       assertFalse(node0.isIf());
121:       assertFalse(node0.isFalse());
122:       assertFalse(node0.isThrow());
123:       assertEquals(23, node0.getType());
124:       assertFalse(node0.isIn());
125:       assertFalse(node0.isInc());
126:       assertFalse(node0.isSetterDef());
127:       
128:       boolean boolean0 = node0.isNE();
129:       assertFalse(boolean0);
130:       assertEquals(54, Node.SLASH_V);
131:       assertEquals(52, Node.LENGTH);
132:       assertEquals(57, Node.REFLECTED_OBJECT);
133:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
134:       assertEquals(1, Node.DECR_FLAG);
135:       assertEquals(50, Node.FREE_CALL);
136:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
137:       assertEquals(57, Node.LAST_PROP);
138:       assertEquals(32, Node.INCRDECR_PROP);
139:       assertEquals(39, Node.EMPTY_BLOCK);
140:       assertEquals(15, Node.NO_SIDE_EFFECTS);
141:       assertEquals(48, Node.DIRECTIVES);
142:       assertEquals(8, Node.FLAG_NO_THROWS);
143:       assertEquals(56, Node.CHANGE_TIME);
144:       assertEquals(12, Node.COLUMN_BITS);
145:       assertEquals(49, Node.DIRECT_EVAL);
146:       assertEquals(4095, Node.COLUMN_MASK);
147:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
148:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
149:       assertEquals(37, Node.OPT_ARG_NAME);
150:       assertEquals(53, Node.INPUT_ID);
151:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
152:       assertEquals(43, Node.IS_CONSTANT_NAME);
153:       assertEquals(36, Node.QUOTED_PROP);
154:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
155:       assertEquals(29, Node.JSDOC_INFO_PROP);
156:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
157:       assertEquals(55, Node.INFERRED_FUNCTION);
158:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
159:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
160:       assertEquals(51, Node.STATIC_SOURCE_FILE);
161:       assertEquals(2, Node.POST_FLAG);
162:       assertEquals(46, Node.IS_NAMESPACE);
163:       assertEquals(47, Node.IS_DISPATCHER);
164:       assertEquals(30, Node.VAR_ARGS_NAME);
165:       assertEquals(40, Node.ORIGINALNAME_PROP);
166:       assertFalse(node0.isWhile());
167:       assertFalse(node0.isBlock());
168:       assertFalse(node0.hasMoreThanOneChild());
169:       assertFalse(node0.isContinue());
170:       assertFalse(node0.isName());
171:       assertFalse(node0.isCall());
172:       assertFalse(node0.isNumber());
173:       assertFalse(node0.isTypeOf());
174:       assertFalse(node0.isDec());
175:       assertFalse(node0.isParamList());
176:       assertFalse(node0.isStringKey());
177:       assertFalse(node0.isAssign());
178:       assertFalse(node0.isReturn());
179:       assertFalse(node0.hasChildren());
180:       assertFalse(node0.hasOneChild());
181:       assertEquals(199418, node0.getSourcePosition());
182:       assertEquals(48, node0.getLineno());
183:       assertFalse(node0.isScript());
184:       assertFalse(node0.isDefaultCase());
185:       assertFalse(node0.isTrue());
186:       assertEquals(0, node0.getChildCount());
187:       assertFalse(node0.isGetElem());
188:       assertFalse(node0.isVoid());
189:       assertFalse(node0.isLabelName());
190:       assertFalse(node0.isExprResult());
191:       assertFalse(node0.isArrayLit());
192:       assertFalse(node0.isNull());
193:       assertFalse(node0.isDelProp());
194:       assertFalse(node0.isOr());
195:       assertFalse(node0.isLabel());
196:       assertFalse(node0.isVar());
197:       assertEquals(2810, node0.getCharno());
198:       assertFalse(node0.isAssignAdd());
199:       assertFalse(node0.isNew());
200:       assertFalse(node0.isEmpty());
201:       assertFalse(node0.isDo());
202:       assertFalse(node0.isAdd());
203:       assertFalse(node0.isString());
204:       assertFalse(node0.isSwitch());
205:       assertFalse(node0.isBreak());
206:       assertFalse(node0.isGetterDef());
207:       assertFalse(node0.isFor());
208:       assertFalse(node0.isComma());
209:       assertFalse(node0.isThis());
210:       assertFalse(node0.isHook());
211:       assertFalse(node0.isCase());
212:       assertFalse(node0.isTry());
213:       assertFalse(node0.isGetProp());
214:       assertFalse(node0.isRegExp());
215:       assertFalse(node0.isWith());
216:       assertFalse(node0.isFunction());
217:       assertFalse(node0.isNot());
218:       assertFalse(node0.isObjectLit());
219:       assertFalse(node0.isDebugger());
220:       assertFalse(node0.isInstanceOf());
221:       assertFalse(node0.isCast());
222:       assertFalse(node0.isCatch());
223:       assertFalse(node0.isAnd());
224:       assertFalse(node0.isNE());
225:       assertFalse(node0.isIf());
226:       assertFalse(node0.isFalse());
227:       assertFalse(node0.isThrow());
228:       assertEquals(23, node0.getType());
229:       assertFalse(node0.isIn());
230:       assertFalse(node0.isInc());
231:       assertFalse(node0.isSetterDef());
232:       
233:       boolean boolean1 = node0.isFromExterns();
234:       assertFalse(boolean1);
235:       assertEquals(54, Node.SLASH_V);
236:       assertEquals(52, Node.LENGTH);
237:       assertEquals(57, Node.REFLECTED_OBJECT);
238:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
239:       assertEquals(1, Node.DECR_FLAG);
240:       assertEquals(50, Node.FREE_CALL);
241:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
242:       assertEquals(57, Node.LAST_PROP);
243:       assertEquals(32, Node.INCRDECR_PROP);
244:       assertEquals(39, Node.EMPTY_BLOCK);
245:       assertEquals(15, Node.NO_SIDE_EFFECTS);
246:       assertEquals(48, Node.DIRECTIVES);
247:       assertEquals(8, Node.FLAG_NO_THROWS);
248:       assertEquals(56, Node.CHANGE_TIME);
249:       assertEquals(12, Node.COLUMN_BITS);
250:       assertEquals(49, Node.DIRECT_EVAL);
251:       assertEquals(4095, Node.COLUMN_MASK);
252:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
253:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
254:       assertEquals(37, Node.OPT_ARG_NAME);
255:       assertEquals(53, Node.INPUT_ID);
256:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
257:       assertEquals(43, Node.IS_CONSTANT_NAME);
258:       assertEquals(36, Node.QUOTED_PROP);
259:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
260:       assertEquals(29, Node.JSDOC_INFO_PROP);
261:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
262:       assertEquals(55, Node.INFERRED_FUNCTION);
263:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
264:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
265:       assertEquals(51, Node.STATIC_SOURCE_FILE);
266:       assertEquals(2, Node.POST_FLAG);
267:       assertEquals(46, Node.IS_NAMESPACE);
268:       assertEquals(47, Node.IS_DISPATCHER);
269:       assertEquals(30, Node.VAR_ARGS_NAME);
270:       assertEquals(40, Node.ORIGINALNAME_PROP);
271:       assertTrue(boolean1 == boolean0);
272:       assertFalse(node0.isWhile());
273:       assertFalse(node0.isBlock());
274:       assertFalse(node0.hasMoreThanOneChild());
275:       assertFalse(node0.isContinue());
276:       assertFalse(node0.isName());
277:       assertFalse(node0.isCall());
278:       assertFalse(node0.isNumber());
279:       assertFalse(node0.isTypeOf());
280:       assertFalse(node0.isDec());
281:       assertFalse(node0.isParamList());
282:       assertFalse(node0.isStringKey());
283:       assertFalse(node0.isAssign());
284:       assertFalse(node0.isReturn());
285:       assertFalse(node0.hasChildren());
286:       assertFalse(node0.hasOneChild());
287:       assertEquals(199418, node0.getSourcePosition());
288:       assertEquals(48, node0.getLineno());
289:       assertFalse(node0.isScript());
290:       assertFalse(node0.isDefaultCase());
291:       assertFalse(node0.isTrue());
292:       assertEquals(0, node0.getChildCount());
293:       assertFalse(node0.isGetElem());
294:       assertFalse(node0.isVoid());
295:       assertFalse(node0.isLabelName());
296:       assertFalse(node0.isExprResult());
297:       assertFalse(node0.isArrayLit());
298:       assertFalse(node0.isNull());
299:       assertFalse(node0.isDelProp());
300:       assertFalse(node0.isOr());
301:       assertFalse(node0.isLabel());
302:       assertFalse(node0.isVar());
303:       assertEquals(2810, node0.getCharno());
304:       assertFalse(node0.isAssignAdd());
305:       assertFalse(node0.isNew());
306:       assertFalse(node0.isEmpty());
307:       assertFalse(node0.isDo());
308:       assertFalse(node0.isAdd());
309:       assertFalse(node0.isString());
310:       assertFalse(node0.isSwitch());
311:       assertFalse(node0.isBreak());
312:       assertFalse(node0.isGetterDef());
313:       assertFalse(node0.isFor());
314:       assertFalse(node0.isComma());
315:       assertFalse(node0.isThis());
316:       assertFalse(node0.isHook());
317:       assertFalse(node0.isCase());
318:       assertFalse(node0.isTry());
319:       assertFalse(node0.isGetProp());
320:       assertFalse(node0.isRegExp());
321:       assertFalse(node0.isWith());
322:       assertFalse(node0.isFunction());
323:       assertFalse(node0.isNot());
324:       assertFalse(node0.isObjectLit());
325:       assertFalse(node0.isDebugger());
326:       assertFalse(node0.isInstanceOf());
327:       assertFalse(node0.isCast());
328:       assertFalse(node0.isCatch());
329:       assertFalse(node0.isAnd());
330:       assertFalse(node0.isNE());
331:       assertFalse(node0.isIf());
332:       assertFalse(node0.isFalse());
333:       assertFalse(node0.isThrow());
334:       assertEquals(23, node0.getType());
335:       assertFalse(node0.isIn());
336:       assertFalse(node0.isInc());
337:       assertFalse(node0.isSetterDef());
338:       
339:       node0.putBooleanProp((-410), true);
340:       assertEquals(54, Node.SLASH_V);
341:       assertEquals(52, Node.LENGTH);
342:       assertEquals(57, Node.REFLECTED_OBJECT);
343:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
344:       assertEquals(1, Node.DECR_FLAG);
345:       assertEquals(50, Node.FREE_CALL);
346:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
347:       assertEquals(57, Node.LAST_PROP);
348:       assertEquals(32, Node.INCRDECR_PROP);
349:       assertEquals(39, Node.EMPTY_BLOCK);
350:       assertEquals(15, Node.NO_SIDE_EFFECTS);
351:       assertEquals(48, Node.DIRECTIVES);
352:       assertEquals(8, Node.FLAG_NO_THROWS);
353:       assertEquals(56, Node.CHANGE_TIME);
354:       assertEquals(12, Node.COLUMN_BITS);
355:       assertEquals(49, Node.DIRECT_EVAL);
356:       assertEquals(4095, Node.COLUMN_MASK);
357:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
358:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
359:       assertEquals(37, Node.OPT_ARG_NAME);
360:       assertEquals(53, Node.INPUT_ID);
361:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
362:       assertEquals(43, Node.IS_CONSTANT_NAME);
363:       assertEquals(36, Node.QUOTED_PROP);
364:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
365:       assertEquals(29, Node.JSDOC_INFO_PROP);
366:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
367:       assertEquals(55, Node.INFERRED_FUNCTION);
368:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
369:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
370:       assertEquals(51, Node.STATIC_SOURCE_FILE);
371:       assertEquals(2, Node.POST_FLAG);
372:       assertEquals(46, Node.IS_NAMESPACE);
373:       assertEquals(47, Node.IS_DISPATCHER);
374:       assertEquals(30, Node.VAR_ARGS_NAME);
375:       assertEquals(40, Node.ORIGINALNAME_PROP);
376:       assertFalse(node0.isWhile());
377:       assertFalse(node0.isBlock());
378:       assertFalse(node0.hasMoreThanOneChild());
379:       assertFalse(node0.isContinue());
380:       assertFalse(node0.isName());
381:       assertFalse(node0.isCall());
382:       assertFalse(node0.isNumber());
383:       assertFalse(node0.isTypeOf());
384:       assertFalse(node0.isDec());
385:       assertFalse(node0.isParamList());
386:       assertFalse(node0.isStringKey());
387:       assertFalse(node0.isAssign());
388:       assertFalse(node0.isReturn());
389:       assertFalse(node0.hasChildren());
390:       assertFalse(node0.hasOneChild());
391:       assertEquals(199418, node0.getSourcePosition());
392:       assertEquals(48, node0.getLineno());
393:       assertFalse(node0.isScript());
394:       assertFalse(node0.isDefaultCase());
395:       assertFalse(node0.isTrue());
396:       assertEquals(0, node0.getChildCount());
397:       assertFalse(node0.isGetElem());
398:       assertFalse(node0.isVoid());
399:       assertFalse(node0.isLabelName());
400:       assertFalse(node0.isExprResult());
401:       assertFalse(node0.isArrayLit());
402:       assertFalse(node0.isNull());
403:       assertFalse(node0.isDelProp());
404:       assertFalse(node0.isOr());
405:       assertFalse(node0.isLabel());
406:       assertFalse(node0.isVar());
407:       assertEquals(2810, node0.getCharno());
408:       assertFalse(node0.isAssignAdd());
409:       assertFalse(node0.isNew());
410:       assertFalse(node0.isEmpty());
411:       assertFalse(node0.isDo());
412:       assertFalse(node0.isAdd());
413:       assertFalse(node0.isString());
414:       assertFalse(node0.isSwitch());
415:       assertFalse(node0.isBreak());
416:       assertFalse(node0.isGetterDef());
417:       assertFalse(node0.isFor());
418:       assertFalse(node0.isComma());
419:       assertFalse(node0.isThis());
420:       assertFalse(node0.isHook());
421:       assertFalse(node0.isCase());
422:       assertFalse(node0.isTry());
423:       assertFalse(node0.isGetProp());
424:       assertFalse(node0.isRegExp());
425:       assertFalse(node0.isWith());
426:       assertFalse(node0.isFunction());
427:       assertFalse(node0.isNot());
428:       assertFalse(node0.isObjectLit());
429:       assertFalse(node0.isDebugger());
430:       assertFalse(node0.isInstanceOf());
431:       assertFalse(node0.isCast());
432:       assertFalse(node0.isCatch());
433:       assertFalse(node0.isAnd());
434:       assertFalse(node0.isNE());
435:       assertFalse(node0.isIf());
436:       assertFalse(node0.isFalse());
437:       assertFalse(node0.isThrow());
438:       assertEquals(23, node0.getType());
439:       assertFalse(node0.isIn());
440:       assertFalse(node0.isInc());
441:       assertFalse(node0.isSetterDef());
442:       
443:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
444:       assertNotNull(simpleErrorReporter0);
445:       
446:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
447:       assertNotNull(jSTypeRegistry0);
448:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
449:       
450:       Node node1 = new Node(38);
451:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
452:       assertEquals(43, Node.IS_CONSTANT_NAME);
453:       assertEquals(36, Node.QUOTED_PROP);
454:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
455:       assertEquals(4095, Node.COLUMN_MASK);
456:       assertEquals(48, Node.DIRECTIVES);
457:       assertEquals(37, Node.OPT_ARG_NAME);
458:       assertEquals(2, Node.POST_FLAG);
459:       assertEquals(8, Node.FLAG_NO_THROWS);
460:       assertEquals(56, Node.CHANGE_TIME);
461:       assertEquals(47, Node.IS_DISPATCHER);
462:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
463:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
464:       assertEquals(15, Node.NO_SIDE_EFFECTS);
465:       assertEquals(55, Node.INFERRED_FUNCTION);
466:       assertEquals(39, Node.EMPTY_BLOCK);
467:       assertEquals(29, Node.JSDOC_INFO_PROP);
468:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
469:       assertEquals(53, Node.INPUT_ID);
470:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
471:       assertEquals(52, Node.LENGTH);
472:       assertEquals(57, Node.LAST_PROP);
473:       assertEquals(57, Node.REFLECTED_OBJECT);
474:       assertEquals(54, Node.SLASH_V);
475:       assertEquals(30, Node.VAR_ARGS_NAME);
476:       assertEquals(49, Node.DIRECT_EVAL);
477:       assertEquals(40, Node.ORIGINALNAME_PROP);
478:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
479:       assertEquals(32, Node.INCRDECR_PROP);
480:       assertEquals(51, Node.STATIC_SOURCE_FILE);
481:       assertEquals(12, Node.COLUMN_BITS);
482:       assertEquals(46, Node.IS_NAMESPACE);
483:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
484:       assertEquals(1, Node.DECR_FLAG);
485:       assertEquals(50, Node.FREE_CALL);
486:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
487:       assertNotNull(node1);
488:       assertFalse(node1.equals((Object)node0));
489:       assertEquals(38, node1.getType());
490:       assertFalse(node1.isWith());
491:       assertFalse(node1.isNot());
492:       assertFalse(node1.isAnd());
493:       assertFalse(node1.hasOneChild());
494:       assertFalse(node1.isObjectLit());
495:       assertFalse(node1.isGetProp());
496:       assertFalse(node1.isScript());
497:       assertFalse(node1.isBreak());
498:       assertFalse(node1.isDec());
499:       assertFalse(node1.hasChildren());
500:       assertFalse(node1.isComma());
501:       assertFalse(node1.isAssign());
502:       assertFalse(node1.isTypeOf());
503:       assertTrue(node1.isName());
504:       assertFalse(node1.isThis());
505:       assertFalse(node1.isReturn());
506:       assertFalse(node1.isHook());
507:       assertFalse(node1.isInstanceOf());
508:       assertEquals((-1), node1.getLineno());
509:       assertFalse(node1.hasMoreThanOneChild());
510:       assertFalse(node1.isExprResult());
511:       assertFalse(node1.isGetElem());
512:       assertFalse(node1.isSwitch());
513:       assertFalse(node1.isDo());
514:       assertEquals((-1), node1.getCharno());
515:       assertFalse(node1.isBlock());
516:       assertFalse(node1.isAssignAdd());
517:       assertFalse(node1.isOr());
518:       assertFalse(node1.isCase());
519:       assertFalse(node1.isNew());
520:       assertFalse(node1.isAdd());
521:       assertFalse(node1.isNumber());
522:       assertFalse(node1.isLabelName());
523:       assertFalse(node1.isGetterDef());
524:       assertFalse(node1.isStringKey());
525:       assertFalse(node1.isParamList());
526:       assertFalse(node1.isLabel());
527:       assertFalse(node1.isVar());
528:       assertEquals(0, node1.getChildCount());
529:       assertFalse(node1.isArrayLit());
530:       assertFalse(node1.isDefaultCase());
531:       assertFalse(node1.isRegExp());
532:       assertFalse(node1.isFunction());
533:       assertFalse(node1.isDebugger());
534:       assertFalse(node1.isTrue());
535:       assertFalse(node1.isTry());
536:       assertFalse(node1.isEmpty());
537:       assertFalse(node1.isSetterDef());
538:       assertFalse(node1.isIf());
539:       assertFalse(node1.isDelProp());
540:       assertFalse(node1.isNE());
541:       assertFalse(node1.isFor());
542:       assertFalse(node1.isNull());
543:       assertFalse(node1.isVoid());
544:       assertFalse(node1.isCatch());
545:       assertFalse(node1.isCall());
546:       assertFalse(node1.isString());
547:       assertFalse(node1.isWhile());
548:       assertFalse(node1.isIn());
549:       assertFalse(node1.isInc());
550:       assertEquals((-1), node1.getSourcePosition());
551:       assertFalse(node1.isThrow());
552:       assertFalse(node1.isFalse());
553:       assertFalse(node1.isContinue());
554:       assertFalse(node1.isCast());
555:       
556:       Node node2 = new Node(42, node1);
557:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
558:       assertEquals(43, Node.IS_CONSTANT_NAME);
559:       assertEquals(36, Node.QUOTED_PROP);
560:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
561:       assertEquals(4095, Node.COLUMN_MASK);
562:       assertEquals(48, Node.DIRECTIVES);
563:       assertEquals(37, Node.OPT_ARG_NAME);
564:       assertEquals(2, Node.POST_FLAG);
565:       assertEquals(8, Node.FLAG_NO_THROWS);
566:       assertEquals(56, Node.CHANGE_TIME);
567:       assertEquals(47, Node.IS_DISPATCHER);
568:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
569:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
570:       assertEquals(15, Node.NO_SIDE_EFFECTS);
571:       assertEquals(55, Node.INFERRED_FUNCTION);
572:       assertEquals(39, Node.EMPTY_BLOCK);
573:       assertEquals(29, Node.JSDOC_INFO_PROP);
574:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
575:       assertEquals(53, Node.INPUT_ID);
576:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
577:       assertEquals(52, Node.LENGTH);
578:       assertEquals(57, Node.LAST_PROP);
579:       assertEquals(57, Node.REFLECTED_OBJECT);
580:       assertEquals(54, Node.SLASH_V);
581:       assertEquals(30, Node.VAR_ARGS_NAME);
582:       assertEquals(49, Node.DIRECT_EVAL);
583:       assertEquals(40, Node.ORIGINALNAME_PROP);
584:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
585:       assertEquals(32, Node.INCRDECR_PROP);
586:       assertEquals(51, Node.STATIC_SOURCE_FILE);
587:       assertEquals(12, Node.COLUMN_BITS);
588:       assertEquals(46, Node.IS_NAMESPACE);
589:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
590:       assertEquals(1, Node.DECR_FLAG);
591:       assertEquals(50, Node.FREE_CALL);
592:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
593:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
594:       assertEquals(39, Node.EMPTY_BLOCK);
595:       assertEquals(48, Node.DIRECTIVES);
596:       assertEquals(40, Node.ORIGINALNAME_PROP);
597:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
598:       assertEquals(4095, Node.COLUMN_MASK);
599:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
600:       assertEquals(54, Node.SLASH_V);
601:       assertEquals(43, Node.IS_CONSTANT_NAME);
602:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
603:       assertEquals(50, Node.FREE_CALL);
604:       assertEquals(51, Node.STATIC_SOURCE_FILE);
605:       assertEquals(46, Node.IS_NAMESPACE);
606:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
607:       assertEquals(37, Node.OPT_ARG_NAME);
608:       assertEquals(32, Node.INCRDECR_PROP);
609:       assertEquals(1, Node.DECR_FLAG);
610:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
611:       assertEquals(12, Node.COLUMN_BITS);
612:       assertEquals(47, Node.IS_DISPATCHER);
613:       assertEquals(2, Node.POST_FLAG);
614:       assertEquals(30, Node.VAR_ARGS_NAME);
615:       assertEquals(53, Node.INPUT_ID);
616:       assertEquals(52, Node.LENGTH);
617:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
618:       assertEquals(15, Node.NO_SIDE_EFFECTS);
619:       assertEquals(57, Node.LAST_PROP);
620:       assertEquals(49, Node.DIRECT_EVAL);
621:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
622:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
623:       assertEquals(55, Node.INFERRED_FUNCTION);
624:       assertEquals(29, Node.JSDOC_INFO_PROP);
625:       assertEquals(56, Node.CHANGE_TIME);
626:       assertEquals(36, Node.QUOTED_PROP);
627:       assertEquals(57, Node.REFLECTED_OBJECT);
628:       assertEquals(8, Node.FLAG_NO_THROWS);
629:       assertNotNull(node2);
630:       assertFalse(node1.equals((Object)node0));
631:       assertFalse(node2.equals((Object)node0));
632:       assertFalse(node2.equals((Object)node1));
633:       assertEquals(38, node1.getType());
634:       assertFalse(node1.isWith());
635:       assertFalse(node1.isNot());
636:       assertFalse(node1.isAnd());
637:       assertFalse(node1.hasOneChild());
638:       assertFalse(node1.isObjectLit());
639:       assertFalse(node1.isGetProp());
640:       assertFalse(node1.isScript());
641:       assertFalse(node1.isBreak());
642:       assertFalse(node1.isDec());
643:       assertFalse(node1.hasChildren());
644:       assertFalse(node1.isComma());
645:       assertFalse(node1.isAssign());
646:       assertFalse(node1.isTypeOf());
647:       assertTrue(node1.isName());
648:       assertFalse(node1.isThis());
649:       assertFalse(node1.isReturn());
650:       assertFalse(node1.isHook());
651:       assertFalse(node1.isInstanceOf());
652:       assertEquals((-1), node1.getLineno());
653:       assertFalse(node1.hasMoreThanOneChild());
654:       assertFalse(node1.isExprResult());
655:       assertFalse(node1.isGetElem());
656:       assertFalse(node1.isSwitch());
657:       assertFalse(node1.isDo());
658:       assertEquals((-1), node1.getCharno());
659:       assertFalse(node1.isBlock());
660:       assertFalse(node1.isAssignAdd());
661:       assertFalse(node1.isOr());
662:       assertFalse(node1.isCase());
663:       assertFalse(node1.isNew());
664:       assertFalse(node1.isAdd());
665:       assertFalse(node1.isNumber());
666:       assertFalse(node1.isLabelName());
667:       assertFalse(node1.isGetterDef());
668:       assertFalse(node1.isStringKey());
669:       assertFalse(node1.isParamList());
670:       assertFalse(node1.isLabel());
671:       assertFalse(node1.isVar());
672:       assertEquals(0, node1.getChildCount());
673:       assertFalse(node1.isArrayLit());
674:       assertFalse(node1.isDefaultCase());
675:       assertFalse(node1.isRegExp());
676:       assertFalse(node1.isFunction());
677:       assertFalse(node1.isDebugger());
678:       assertFalse(node1.isTrue());
679:       assertFalse(node1.isTry());
680:       assertFalse(node1.isEmpty());
681:       assertFalse(node1.isSetterDef());
682:       assertFalse(node1.isIf());
683:       assertFalse(node1.isDelProp());
684:       assertFalse(node1.isNE());
685:       assertFalse(node1.isFor());
686:       assertFalse(node1.isNull());
687:       assertFalse(node1.isVoid());
688:       assertFalse(node1.isCatch());
689:       assertFalse(node1.isCall());
690:       assertFalse(node1.isString());
691:       assertFalse(node1.isWhile());
692:       assertFalse(node1.isIn());
693:       assertFalse(node1.isInc());
694:       assertEquals((-1), node1.getSourcePosition());
695:       assertFalse(node1.isThrow());
696:       assertFalse(node1.isFalse());
697:       assertFalse(node1.isContinue());
698:       assertFalse(node1.isCast());
699:       assertFalse(node2.isBreak());
700:       assertFalse(node2.isGetProp());
701:       assertFalse(node2.isAnd());
702:       assertEquals((-1), node2.getCharno());
703:       assertFalse(node2.isObjectLit());
704:       assertFalse(node2.isNot());
705:       assertFalse(node2.isSwitch());
706:       assertFalse(node2.isInc());
707:       assertEquals(42, node2.getType());
708:       assertFalse(node2.isCast());
709:       assertFalse(node2.isThrow());
710:       assertFalse(node2.isFalse());
711:       assertFalse(node2.isNumber());
712:       assertFalse(node2.isIf());
713:       assertFalse(node2.isNE());
714:       assertFalse(node2.isFor());
715:       assertEquals((-1), node2.getLineno());
716:       assertFalse(node2.isLabelName());
717:       assertFalse(node2.isIn());
718:       assertFalse(node2.isGetterDef());
719:       assertFalse(node2.isRegExp());
720:       assertFalse(node2.isScript());
721:       assertFalse(node2.isCase());
722:       assertFalse(node2.isTry());
723:       assertFalse(node2.isHook());
724:       assertFalse(node2.isInstanceOf());
725:       assertFalse(node2.hasMoreThanOneChild());
726:       assertTrue(node2.hasChildren());
727:       assertFalse(node2.isCatch());
728:       assertFalse(node2.isBlock());
729:       assertFalse(node2.isWith());
730:       assertEquals(1, node2.getChildCount());
731:       assertFalse(node2.isNull());
732:       assertFalse(node2.isParamList());
733:       assertFalse(node2.isSetterDef());
734:       assertFalse(node2.isStringKey());
735:       assertFalse(node2.isName());
736:       assertFalse(node2.isDefaultCase());
737:       assertFalse(node2.isNew());
738:       assertFalse(node2.isAdd());
739:       assertFalse(node2.isDo());
740:       assertFalse(node2.isArrayLit());
741:       assertFalse(node2.isVar());
742:       assertFalse(node2.isLabel());
743:       assertFalse(node2.isContinue());
744:       assertFalse(node2.isFunction());
745:       assertFalse(node2.isTypeOf());
746:       assertEquals((-1), node2.getSourcePosition());
747:       assertTrue(node2.hasOneChild());
748:       assertFalse(node2.isEmpty());
749:       assertFalse(node2.isGetElem());
750:       assertFalse(node2.isAssignAdd());
751:       assertFalse(node2.isDelProp());
752:       assertFalse(node2.isDebugger());
753:       assertFalse(node2.isOr());
754:       assertFalse(node2.isString());
755:       assertFalse(node2.isTrue());
756:       assertFalse(node2.isWhile());
757:       assertFalse(node2.isExprResult());
758:       assertFalse(node2.isVoid());
759:       assertTrue(node2.isThis());
760:       assertFalse(node2.isReturn());
761:       assertFalse(node2.isCall());
762:       assertFalse(node2.isComma());
763:       assertFalse(node2.isDec());
764:       assertFalse(node2.isAssign());
765:       
766:       Iterable<Node> iterable0 = node1.children();
767:       assertFalse(iterable0.contains(node0));
768:       assertNotSame(node1, node2);
769:       assertNotSame(node1, node0);
770:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
771:       assertEquals(43, Node.IS_CONSTANT_NAME);
772:       assertEquals(36, Node.QUOTED_PROP);
773:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
774:       assertEquals(4095, Node.COLUMN_MASK);
775:       assertEquals(48, Node.DIRECTIVES);
776:       assertEquals(37, Node.OPT_ARG_NAME);
777:       assertEquals(2, Node.POST_FLAG);
778:       assertEquals(8, Node.FLAG_NO_THROWS);
779:       assertEquals(56, Node.CHANGE_TIME);
780:       assertEquals(47, Node.IS_DISPATCHER);
781:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
782:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
783:       assertEquals(15, Node.NO_SIDE_EFFECTS);
784:       assertEquals(55, Node.INFERRED_FUNCTION);
785:       assertEquals(39, Node.EMPTY_BLOCK);
786:       assertEquals(29, Node.JSDOC_INFO_PROP);
787:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
788:       assertEquals(53, Node.INPUT_ID);
789:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
790:       assertEquals(52, Node.LENGTH);
791:       assertEquals(57, Node.LAST_PROP);
792:       assertEquals(57, Node.REFLECTED_OBJECT);
793:       assertEquals(54, Node.SLASH_V);
794:       assertEquals(30, Node.VAR_ARGS_NAME);
795:       assertEquals(49, Node.DIRECT_EVAL);
796:       assertEquals(40, Node.ORIGINALNAME_PROP);
797:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
798:       assertEquals(32, Node.INCRDECR_PROP);
799:       assertEquals(51, Node.STATIC_SOURCE_FILE);
800:       assertEquals(12, Node.COLUMN_BITS);
801:       assertEquals(46, Node.IS_NAMESPACE);
802:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
803:       assertEquals(1, Node.DECR_FLAG);
804:       assertEquals(50, Node.FREE_CALL);
805:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
806:       assertNotNull(iterable0);
807:       assertFalse(node1.equals((Object)node2));
808:       assertFalse(node1.equals((Object)node0));
809:       assertEquals(38, node1.getType());
810:       assertFalse(node1.isWith());
811:       assertFalse(node1.isNot());
812:       assertFalse(node1.isAnd());
813:       assertFalse(node1.hasOneChild());
814:       assertFalse(node1.isObjectLit());
815:       assertFalse(node1.isGetProp());
816:       assertFalse(node1.isScript());
817:       assertFalse(node1.isBreak());
818:       assertFalse(node1.isDec());
819:       assertFalse(node1.hasChildren());
820:       assertFalse(node1.isComma());
821:       assertFalse(node1.isAssign());
822:       assertFalse(node1.isTypeOf());
823:       assertTrue(node1.isName());
824:       assertFalse(node1.isThis());
825:       assertFalse(node1.isReturn());
826:       assertFalse(node1.isHook());
827:       assertFalse(node1.isInstanceOf());
828:       assertEquals((-1), node1.getLineno());
829:       assertFalse(node1.hasMoreThanOneChild());
830:       assertFalse(node1.isExprResult());
831:       assertFalse(node1.isGetElem());
832:       assertFalse(node1.isSwitch());
833:       assertFalse(node1.isDo());
834:       assertEquals((-1), node1.getCharno());
835:       assertFalse(node1.isBlock());
836:       assertFalse(node1.isAssignAdd());
837:       assertFalse(node1.isOr());
838:       assertFalse(node1.isCase());
839:       assertFalse(node1.isNew());
840:       assertFalse(node1.isAdd());
841:       assertFalse(node1.isNumber());
842:       assertFalse(node1.isLabelName());
843:       assertFalse(node1.isGetterDef());
844:       assertFalse(node1.isStringKey());
845:       assertFalse(node1.isParamList());
846:       assertFalse(node1.isLabel());
847:       assertFalse(node1.isVar());
848:       assertEquals(0, node1.getChildCount());
849:       assertFalse(node1.isArrayLit());
850:       assertFalse(node1.isDefaultCase());
851:       assertFalse(node1.isRegExp());
852:       assertFalse(node1.isFunction());
853:       assertFalse(node1.isDebugger());
854:       assertFalse(node1.isTrue());
855:       assertFalse(node1.isTry());
856:       assertFalse(node1.isEmpty());
857:       assertFalse(node1.isSetterDef());
858:       assertFalse(node1.isIf());
859:       assertFalse(node1.isDelProp());
860:       assertFalse(node1.isNE());
861:       assertFalse(node1.isFor());
862:       assertFalse(node1.isNull());
863:       assertFalse(node1.isVoid());
864:       assertFalse(node1.isCatch());
865:       assertFalse(node1.isCall());
866:       assertFalse(node1.isString());
867:       assertFalse(node1.isWhile());
868:       assertFalse(node1.isIn());
869:       assertFalse(node1.isInc());
870:       assertEquals((-1), node1.getSourcePosition());
871:       assertFalse(node1.isThrow());
872:       assertFalse(node1.isFalse());
873:       assertFalse(node1.isContinue());
874:       assertFalse(node1.isCast());
875:       
876:       boolean boolean2 = node1.isGetProp();
877:       assertFalse(boolean2);
878:       assertNotSame(node1, node2);
879:       assertNotSame(node1, node0);
880:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
881:       assertEquals(43, Node.IS_CONSTANT_NAME);
882:       assertEquals(36, Node.QUOTED_PROP);
883:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
884:       assertEquals(4095, Node.COLUMN_MASK);
885:       assertEquals(48, Node.DIRECTIVES);
886:       assertEquals(37, Node.OPT_ARG_NAME);
887:       assertEquals(2, Node.POST_FLAG);
888:       assertEquals(8, Node.FLAG_NO_THROWS);
889:       assertEquals(56, Node.CHANGE_TIME);
890:       assertEquals(47, Node.IS_DISPATCHER);
891:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
892:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
893:       assertEquals(15, Node.NO_SIDE_EFFECTS);
894:       assertEquals(55, Node.INFERRED_FUNCTION);
895:       assertEquals(39, Node.EMPTY_BLOCK);
896:       assertEquals(29, Node.JSDOC_INFO_PROP);
897:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
898:       assertEquals(53, Node.INPUT_ID);
899:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
900:       assertEquals(52, Node.LENGTH);
901:       assertEquals(57, Node.LAST_PROP);
902:       assertEquals(57, Node.REFLECTED_OBJECT);
903:       assertEquals(54, Node.SLASH_V);
904:       assertEquals(30, Node.VAR_ARGS_NAME);
905:       assertEquals(49, Node.DIRECT_EVAL);
906:       assertEquals(40, Node.ORIGINALNAME_PROP);
907:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
908:       assertEquals(32, Node.INCRDECR_PROP);
909:       assertEquals(51, Node.STATIC_SOURCE_FILE);
910:       assertEquals(12, Node.COLUMN_BITS);
911:       assertEquals(46, Node.IS_NAMESPACE);
912:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
913:       assertEquals(1, Node.DECR_FLAG);
914:       assertEquals(50, Node.FREE_CALL);
915:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
916:       assertFalse(node1.equals((Object)node2));
917:       assertFalse(node1.equals((Object)node0));
918:       assertTrue(boolean2 == boolean0);
919:       assertTrue(boolean2 == boolean1);
920:       assertEquals(38, node1.getType());
921:       assertFalse(node1.isWith());
922:       assertFalse(node1.isNot());
923:       assertFalse(node1.isAnd());
924:       assertFalse(node1.hasOneChild());
925:       assertFalse(node1.isObjectLit());
926:       assertFalse(node1.isGetProp());
927:       assertFalse(node1.isScript());
928:       assertFalse(node1.isBreak());
929:       assertFalse(node1.isDec());
930:       assertFalse(node1.hasChildren());
931:       assertFalse(node1.isComma());
932:       assertFalse(node1.isAssign());
933:       assertFalse(node1.isTypeOf());
934:       assertTrue(node1.isName());
935:       assertFalse(node1.isThis());
936:       assertFalse(node1.isReturn());
937:       assertFalse(node1.isHook());
938:       assertFalse(node1.isInstanceOf());
939:       assertEquals((-1), node1.getLineno());
940:       assertFalse(node1.hasMoreThanOneChild());
941:       assertFalse(node1.isExprResult());
942:       assertFalse(node1.isGetElem());
943:       assertFalse(node1.isSwitch());
944:       assertFalse(node1.isDo());
945:       assertEquals((-1), node1.getCharno());
946:       assertFalse(node1.isBlock());
947:       assertFalse(node1.isAssignAdd());
948:       assertFalse(node1.isOr());
949:       assertFalse(node1.isCase());
950:       assertFalse(node1.isNew());
951:       assertFalse(node1.isAdd());
952:       assertFalse(node1.isNumber());
953:       assertFalse(node1.isLabelName());
954:       assertFalse(node1.isGetterDef());
955:       assertFalse(node1.isStringKey());
956:       assertFalse(node1.isParamList());
957:       assertFalse(node1.isLabel());
958:       assertFalse(node1.isVar());
959:       assertEquals(0, node1.getChildCount());
960:       assertFalse(node1.isArrayLit());
961:       assertFalse(node1.isDefaultCase());
962:       assertFalse(node1.isRegExp());
963:       assertFalse(node1.isFunction());
964:       assertFalse(node1.isDebugger());
965:       assertFalse(node1.isTrue());
966:       assertFalse(node1.isTry());
967:       assertFalse(node1.isEmpty());
968:       assertFalse(node1.isSetterDef());
969:       assertFalse(node1.isIf());
970:       assertFalse(node1.isDelProp());
971:       assertFalse(node1.isNE());
972:       assertFalse(node1.isFor());
973:       assertFalse(node1.isNull());
974:       assertFalse(node1.isVoid());
975:       assertFalse(node1.isCatch());
976:       assertFalse(node1.isCall());
977:       assertFalse(node1.isString());
978:       assertFalse(node1.isWhile());
979:       assertFalse(node1.isIn());
980:       assertFalse(node1.isInc());
981:       assertEquals((-1), node1.getSourcePosition());
982:       assertFalse(node1.isThrow());
983:       assertFalse(node1.isFalse());
984:       assertFalse(node1.isContinue());
985:       assertFalse(node1.isCast());
986:       
987:       boolean boolean3 = node1.isParamList();
988:       assertFalse(boolean3);
989:       assertNotSame(node1, node2);
990:       assertNotSame(node1, node0);
991:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
992:       assertEquals(43, Node.IS_CONSTANT_NAME);
993:       assertEquals(36, Node.QUOTED_PROP);
994:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
995:       assertEquals(4095, Node.COLUMN_MASK);
996:       assertEquals(48, Node.DIRECTIVES);
997:       assertEquals(37, Node.OPT_ARG_NAME);
998:       assertEquals(2, Node.POST_FLAG);
999:       assertEquals(8, Node.FLAG_NO_THROWS);
1000:       assertEquals(56, Node.CHANGE_TIME);
1001:       assertEquals(47, Node.IS_DISPATCHER);
1002:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1003:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1004:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1005:       assertEquals(55, Node.INFERRED_FUNCTION);
1006:       assertEquals(39, Node.EMPTY_BLOCK);
1007:       assertEquals(29, Node.JSDOC_INFO_PROP);
1008:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1009:       assertEquals(53, Node.INPUT_ID);
1010:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1011:       assertEquals(52, Node.LENGTH);
1012:       assertEquals(57, Node.LAST_PROP);
1013:       assertEquals(57, Node.REFLECTED_OBJECT);
1014:       assertEquals(54, Node.SLASH_V);
1015:       assertEquals(30, Node.VAR_ARGS_NAME);
1016:       assertEquals(49, Node.DIRECT_EVAL);
1017:       assertEquals(40, Node.ORIGINALNAME_PROP);
1018:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1019:       assertEquals(32, Node.INCRDECR_PROP);
1020:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1021:       assertEquals(12, Node.COLUMN_BITS);
1022:       assertEquals(46, Node.IS_NAMESPACE);
1023:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1024:       assertEquals(1, Node.DECR_FLAG);
1025:       assertEquals(50, Node.FREE_CALL);
1026:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1027:       assertFalse(node1.equals((Object)node2));
1028:       assertFalse(node1.equals((Object)node0));
1029:       assertTrue(boolean3 == boolean2);
1030:       assertTrue(boolean3 == boolean0);
1031:       assertTrue(boolean3 == boolean1);
1032:       assertEquals(38, node1.getType());
1033:       assertFalse(node1.isWith());
1034:       assertFalse(node1.isNot());
1035:       assertFalse(node1.isAnd());
1036:       assertFalse(node1.hasOneChild());
1037:       assertFalse(node1.isObjectLit());
1038:       assertFalse(node1.isGetProp());
1039:       assertFalse(node1.isScript());
1040:       assertFalse(node1.isBreak());
1041:       assertFalse(node1.isDec());
1042:       assertFalse(node1.hasChildren());
1043:       assertFalse(node1.isComma());
1044:       assertFalse(node1.isAssign());
1045:       assertFalse(node1.isTypeOf());
1046:       assertTrue(node1.isName());
1047:       assertFalse(node1.isThis());
1048:       assertFalse(node1.isReturn());
1049:       assertFalse(node1.isHook());
1050:       assertFalse(node1.isInstanceOf());
1051:       assertEquals((-1), node1.getLineno());
1052:       assertFalse(node1.hasMoreThanOneChild());
1053:       assertFalse(node1.isExprResult());
1054:       assertFalse(node1.isGetElem());
1055:       assertFalse(node1.isSwitch());
1056:       assertFalse(node1.isDo());
1057:       assertEquals((-1), node1.getCharno());
1058:       assertFalse(node1.isBlock());
1059:       assertFalse(node1.isAssignAdd());
1060:       assertFalse(node1.isOr());
1061:       assertFalse(node1.isCase());
1062:       assertFalse(node1.isNew());
1063:       assertFalse(node1.isAdd());
1064:       assertFalse(node1.isNumber());
1065:       assertFalse(node1.isLabelName());
1066:       assertFalse(node1.isGetterDef());
1067:       assertFalse(node1.isStringKey());
1068:       assertFalse(node1.isParamList());
1069:       assertFalse(node1.isLabel());
1070:       assertFalse(node1.isVar());
1071:       assertEquals(0, node1.getChildCount());
1072:       assertFalse(node1.isArrayLit());
1073:       assertFalse(node1.isDefaultCase());
1074:       assertFalse(node1.isRegExp());
1075:       assertFalse(node1.isFunction());
1076:       assertFalse(node1.isDebugger());
1077:       assertFalse(node1.isTrue());
1078:       assertFalse(node1.isTry());
1079:       assertFalse(node1.isEmpty());
1080:       assertFalse(node1.isSetterDef());
1081:       assertFalse(node1.isIf());
1082:       assertFalse(node1.isDelProp());
1083:       assertFalse(node1.isNE());
1084:       assertFalse(node1.isFor());
1085:       assertFalse(node1.isNull());
1086:       assertFalse(node1.isVoid());
1087:       assertFalse(node1.isCatch());
1088:       assertFalse(node1.isCall());
1089:       assertFalse(node1.isString());
1090:       assertFalse(node1.isWhile());
1091:       assertFalse(node1.isIn());
1092:       assertFalse(node1.isInc());
1093:       assertEquals((-1), node1.getSourcePosition());
1094:       assertFalse(node1.isThrow());
1095:       assertFalse(node1.isFalse());
1096:       assertFalse(node1.isContinue());
1097:       assertFalse(node1.isCast());
1098:       
1099:       boolean boolean4 = node2.isSetterDef();
1100:       assertFalse(boolean4);
1101:       assertNotSame(node1, node2);
1102:       assertNotSame(node1, node0);
1103:       assertNotSame(node2, node0);
1104:       assertNotSame(node2, node1);
1105:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1106:       assertEquals(43, Node.IS_CONSTANT_NAME);
1107:       assertEquals(36, Node.QUOTED_PROP);
1108:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1109:       assertEquals(4095, Node.COLUMN_MASK);
1110:       assertEquals(48, Node.DIRECTIVES);
1111:       assertEquals(37, Node.OPT_ARG_NAME);
1112:       assertEquals(2, Node.POST_FLAG);
1113:       assertEquals(8, Node.FLAG_NO_THROWS);
1114:       assertEquals(56, Node.CHANGE_TIME);
1115:       assertEquals(47, Node.IS_DISPATCHER);
1116:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1117:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1118:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1119:       assertEquals(55, Node.INFERRED_FUNCTION);
1120:       assertEquals(39, Node.EMPTY_BLOCK);
1121:       assertEquals(29, Node.JSDOC_INFO_PROP);
1122:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1123:       assertEquals(53, Node.INPUT_ID);
1124:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1125:       assertEquals(52, Node.LENGTH);
1126:       assertEquals(57, Node.LAST_PROP);
1127:       assertEquals(57, Node.REFLECTED_OBJECT);
1128:       assertEquals(54, Node.SLASH_V);
1129:       assertEquals(30, Node.VAR_ARGS_NAME);
1130:       assertEquals(49, Node.DIRECT_EVAL);
1131:       assertEquals(40, Node.ORIGINALNAME_PROP);
1132:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1133:       assertEquals(32, Node.INCRDECR_PROP);
1134:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1135:       assertEquals(12, Node.COLUMN_BITS);
1136:       assertEquals(46, Node.IS_NAMESPACE);
1137:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1138:       assertEquals(1, Node.DECR_FLAG);
1139:       assertEquals(50, Node.FREE_CALL);
1140:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1141:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1142:       assertEquals(39, Node.EMPTY_BLOCK);
1143:       assertEquals(48, Node.DIRECTIVES);
1144:       assertEquals(40, Node.ORIGINALNAME_PROP);
1145:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1146:       assertEquals(4095, Node.COLUMN_MASK);
1147:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1148:       assertEquals(54, Node.SLASH_V);
1149:       assertEquals(43, Node.IS_CONSTANT_NAME);
1150:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1151:       assertEquals(50, Node.FREE_CALL);
1152:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1153:       assertEquals(46, Node.IS_NAMESPACE);
1154:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1155:       assertEquals(37, Node.OPT_ARG_NAME);
1156:       assertEquals(32, Node.INCRDECR_PROP);
1157:       assertEquals(1, Node.DECR_FLAG);
1158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1159:       assertEquals(12, Node.COLUMN_BITS);
1160:       assertEquals(47, Node.IS_DISPATCHER);
1161:       assertEquals(2, Node.POST_FLAG);
1162:       assertEquals(30, Node.VAR_ARGS_NAME);
1163:       assertEquals(53, Node.INPUT_ID);
1164:       assertEquals(52, Node.LENGTH);
1165:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1166:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1167:       assertEquals(57, Node.LAST_PROP);
1168:       assertEquals(49, Node.DIRECT_EVAL);
1169:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1170:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1171:       assertEquals(55, Node.INFERRED_FUNCTION);
1172:       assertEquals(29, Node.JSDOC_INFO_PROP);
1173:       assertEquals(56, Node.CHANGE_TIME);
1174:       assertEquals(36, Node.QUOTED_PROP);
1175:       assertEquals(57, Node.REFLECTED_OBJECT);
1176:       assertEquals(8, Node.FLAG_NO_THROWS);
1177:       assertFalse(node1.equals((Object)node2));
1178:       assertFalse(node1.equals((Object)node0));
1179:       assertFalse(node2.equals((Object)node0));
1180:       assertFalse(node2.equals((Object)node1));
1181:       assertTrue(boolean4 == boolean1);
1182:       assertTrue(boolean4 == boolean2);
1183:       assertTrue(boolean4 == boolean3);
1184:       assertTrue(boolean4 == boolean0);
1185:       assertEquals(38, node1.getType());
1186:       assertFalse(node1.isWith());
1187:       assertFalse(node1.isNot());
1188:       assertFalse(node1.isAnd());
1189:       assertFalse(node1.hasOneChild());
1190:       assertFalse(node1.isObjectLit());
1191:       assertFalse(node1.isGetProp());
1192:       assertFalse(node1.isScript());
1193:       assertFalse(node1.isBreak());
1194:       assertFalse(node1.isDec());
1195:       assertFalse(node1.hasChildren());
1196:       assertFalse(node1.isComma());
1197:       assertFalse(node1.isAssign());
1198:       assertFalse(node1.isTypeOf());
1199:       assertTrue(node1.isName());
1200:       assertFalse(node1.isThis());
1201:       assertFalse(node1.isReturn());
1202:       assertFalse(node1.isHook());
1203:       assertFalse(node1.isInstanceOf());
1204:       assertEquals((-1), node1.getLineno());
1205:       assertFalse(node1.hasMoreThanOneChild());
1206:       assertFalse(node1.isExprResult());
1207:       assertFalse(node1.isGetElem());
1208:       assertFalse(node1.isSwitch());
1209:       assertFalse(node1.isDo());
1210:       assertEquals((-1), node1.getCharno());
1211:       assertFalse(node1.isBlock());
1212:       assertFalse(node1.isAssignAdd());
1213:       assertFalse(node1.isOr());
1214:       assertFalse(node1.isCase());
1215:       assertFalse(node1.isNew());
1216:       assertFalse(node1.isAdd());
1217:       assertFalse(node1.isNumber());
1218:       assertFalse(node1.isLabelName());
1219:       assertFalse(node1.isGetterDef());
1220:       assertFalse(node1.isStringKey());
1221:       assertFalse(node1.isParamList());
1222:       assertFalse(node1.isLabel());
1223:       assertFalse(node1.isVar());
1224:       assertEquals(0, node1.getChildCount());
1225:       assertFalse(node1.isArrayLit());
1226:       assertFalse(node1.isDefaultCase());
1227:       assertFalse(node1.isRegExp());
1228:       assertFalse(node1.isFunction());
1229:       assertFalse(node1.isDebugger());
1230:       assertFalse(node1.isTrue());
1231:       assertFalse(node1.isTry());
1232:       assertFalse(node1.isEmpty());
1233:       assertFalse(node1.isSetterDef());
1234:       assertFalse(node1.isIf());
1235:       assertFalse(node1.isDelProp());
1236:       assertFalse(node1.isNE());
1237:       assertFalse(node1.isFor());
1238:       assertFalse(node1.isNull());
1239:       assertFalse(node1.isVoid());
1240:       assertFalse(node1.isCatch());
1241:       assertFalse(node1.isCall());
1242:       assertFalse(node1.isString());
1243:       assertFalse(node1.isWhile());
1244:       assertFalse(node1.isIn());
1245:       assertFalse(node1.isInc());
1246:       assertEquals((-1), node1.getSourcePosition());
1247:       assertFalse(node1.isThrow());
1248:       assertFalse(node1.isFalse());
1249:       assertFalse(node1.isContinue());
1250:       assertFalse(node1.isCast());
1251:       assertFalse(node2.isBreak());
1252:       assertFalse(node2.isGetProp());
1253:       assertFalse(node2.isAnd());
1254:       assertEquals((-1), node2.getCharno());
1255:       assertFalse(node2.isObjectLit());
1256:       assertFalse(node2.isNot());
1257:       assertFalse(node2.isSwitch());
1258:       assertFalse(node2.isInc());
1259:       assertEquals(42, node2.getType());
1260:       assertFalse(node2.isCast());
1261:       assertFalse(node2.isThrow());
1262:       assertFalse(node2.isFalse());
1263:       assertFalse(node2.isNumber());
1264:       assertFalse(node2.isIf());
1265:       assertFalse(node2.isNE());
1266:       assertFalse(node2.isFor());
1267:       assertEquals((-1), node2.getLineno());
1268:       assertFalse(node2.isLabelName());
1269:       assertFalse(node2.isIn());
1270:       assertFalse(node2.isGetterDef());
1271:       assertFalse(node2.isRegExp());
1272:       assertFalse(node2.isScript());
1273:       assertFalse(node2.isCase());
1274:       assertFalse(node2.isTry());
1275:       assertFalse(node2.isHook());
1276:       assertFalse(node2.isInstanceOf());
1277:       assertFalse(node2.hasMoreThanOneChild());
1278:       assertTrue(node2.hasChildren());
1279:       assertFalse(node2.isCatch());
1280:       assertFalse(node2.isBlock());
1281:       assertFalse(node2.isWith());
1282:       assertEquals(1, node2.getChildCount());
1283:       assertFalse(node2.isNull());
1284:       assertFalse(node2.isParamList());
1285:       assertFalse(node2.isSetterDef());
1286:       assertFalse(node2.isStringKey());
1287:       assertFalse(node2.isName());
1288:       assertFalse(node2.isDefaultCase());
1289:       assertFalse(node2.isNew());
1290:       assertFalse(node2.isAdd());
1291:       assertFalse(node2.isDo());
1292:       assertFalse(node2.isArrayLit());
1293:       assertFalse(node2.isVar());
1294:       assertFalse(node2.isLabel());
1295:       assertFalse(node2.isContinue());
1296:       assertFalse(node2.isFunction());
1297:       assertFalse(node2.isTypeOf());
1298:       assertEquals((-1), node2.getSourcePosition());
1299:       assertTrue(node2.hasOneChild());
1300:       assertFalse(node2.isEmpty());
1301:       assertFalse(node2.isGetElem());
1302:       assertFalse(node2.isAssignAdd());
1303:       assertFalse(node2.isDelProp());
1304:       assertFalse(node2.isDebugger());
1305:       assertFalse(node2.isOr());
1306:       assertFalse(node2.isString());
1307:       assertFalse(node2.isTrue());
1308:       assertFalse(node2.isWhile());
1309:       assertFalse(node2.isExprResult());
1310:       assertFalse(node2.isVoid());
1311:       assertTrue(node2.isThis());
1312:       assertFalse(node2.isReturn());
1313:       assertFalse(node2.isCall());
1314:       assertFalse(node2.isComma());
1315:       assertFalse(node2.isDec());
1316:       assertFalse(node2.isAssign());
1317:       
1318:       Node node3 = Node.newString("Object#Key");
1319:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1320:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1321:       assertEquals(40, Node.ORIGINALNAME_PROP);
1322:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1323:       assertEquals(39, Node.EMPTY_BLOCK);
1324:       assertEquals(48, Node.DIRECTIVES);
1325:       assertEquals(52, Node.LENGTH);
1326:       assertEquals(57, Node.REFLECTED_OBJECT);
1327:       assertEquals(55, Node.INFERRED_FUNCTION);
1328:       assertEquals(54, Node.SLASH_V);
1329:       assertEquals(8, Node.FLAG_NO_THROWS);
1330:       assertEquals(50, Node.FREE_CALL);
1331:       assertEquals(57, Node.LAST_PROP);
1332:       assertEquals(43, Node.IS_CONSTANT_NAME);
1333:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1334:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1335:       assertEquals(2, Node.POST_FLAG);
1336:       assertEquals(30, Node.VAR_ARGS_NAME);
1337:       assertEquals(47, Node.IS_DISPATCHER);
1338:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1339:       assertEquals(56, Node.CHANGE_TIME);
1340:       assertEquals(29, Node.JSDOC_INFO_PROP);
1341:       assertEquals(37, Node.OPT_ARG_NAME);
1342:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1343:       assertEquals(53, Node.INPUT_ID);
1344:       assertEquals(46, Node.IS_NAMESPACE);
1345:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1346:       assertEquals(36, Node.QUOTED_PROP);
1347:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1348:       assertEquals(49, Node.DIRECT_EVAL);
1349:       assertEquals(32, Node.INCRDECR_PROP);
1350:       assertEquals(1, Node.DECR_FLAG);
1351:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1352:       assertEquals(12, Node.COLUMN_BITS);
1353:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1354:       assertEquals(4095, Node.COLUMN_MASK);
1355:       assertNotNull(node3);
1356:       assertFalse(node3.equals((Object)node0));
1357:       assertFalse(node3.equals((Object)node2));
1358:       assertFalse(node3.equals((Object)node1));
1359:       assertFalse(node3.isHook());
1360:       assertFalse(node3.isThrow());
1361:       assertFalse(node3.isBreak());
1362:       assertFalse(node3.isComma());
1363:       assertFalse(node3.isThis());
1364:       assertFalse(node3.isFalse());
1365:       assertFalse(node3.isInstanceOf());
1366:       assertFalse(node3.isInc());
1367:       assertFalse(node3.isNE());
1368:       assertFalse(node3.isIn());
1369:       assertFalse(node3.isGetElem());
1370:       assertFalse(node3.isCast());
1371:       assertFalse(node3.isVoid());
1372:       assertFalse(node3.isDelProp());
1373:       assertFalse(node3.isExprResult());
1374:       assertFalse(node3.isFunction());
1375:       assertFalse(node3.isReturn());
1376:       assertFalse(node3.hasChildren());
1377:       assertFalse(node3.isDec());
1378:       assertFalse(node3.isTypeOf());
1379:       assertFalse(node3.isAssign());
1380:       assertFalse(node3.isAnd());
1381:       assertFalse(node3.isContinue());
1382:       assertFalse(node3.isWhile());
1383:       assertFalse(node3.isDebugger());
1384:       assertFalse(node3.isGetProp());
1385:       assertEquals((-1), node3.getSourcePosition());
1386:       assertFalse(node3.isNot());
1387:       assertFalse(node3.isObjectLit());
1388:       assertFalse(node3.isCall());
1389:       assertFalse(node3.isStringKey());
1390:       assertFalse(node3.isVar());
1391:       assertTrue(node3.isString());
1392:       assertFalse(node3.isNew());
1393:       assertFalse(node3.isName());
1394:       assertFalse(node3.isBlock());
1395:       assertEquals(0, node3.getChildCount());
1396:       assertFalse(node3.hasMoreThanOneChild());
1397:       assertFalse(node3.isCatch());
1398:       assertEquals(40, node3.getType());
1399:       assertEquals((-1), node3.getLineno());
1400:       assertFalse(node3.isDefaultCase());
1401:       assertFalse(node3.isAssignAdd());
1402:       assertFalse(node3.isDo());
1403:       assertFalse(node3.isTrue());
1404:       assertFalse(node3.isSetterDef());
1405:       assertFalse(node3.isNull());
1406:       assertFalse(node3.isAdd());
1407:       assertFalse(node3.isOr());
1408:       assertFalse(node3.isArrayLit());
1409:       assertFalse(node3.isEmpty());
1410:       assertFalse(node3.isFor());
1411:       assertFalse(node3.isIf());
1412:       assertFalse(node3.hasOneChild());
1413:       assertFalse(node3.isTry());
1414:       assertFalse(node3.isLabelName());
1415:       assertFalse(node3.isWith());
1416:       assertFalse(node3.isLabel());
1417:       assertFalse(node3.isRegExp());
1418:       assertFalse(node3.isCase());
1419:       assertFalse(node3.isParamList());
1420:       assertFalse(node3.isSwitch());
1421:       assertEquals((-1), node3.getCharno());
1422:       assertFalse(node3.isScript());
1423:       assertFalse(node3.isNumber());
1424:       assertFalse(node3.isGetterDef());
1425:       
1426:       // Undeclared exception!
1427:       try { 
1428:         node0.getString();
1429:         fail("Expecting exception: IllegalStateException");
1430:       
1431:       } catch(IllegalStateException e) {
1432:          //
1433:          // unexpected prop id -410
1434:          //
1435:          verifyException("com.google.javascript.rhino.Node", e);
1436:       }
1437:   }
1438: }
RegularFileObject[/tmp/EvoSuite_96_1628157521435/com/google/javascript/rhino/Node_96_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:41 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_96_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_96_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_96_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.JSTypeNative",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.JSType$TypePair",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.JSType$2",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
375:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
377:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
378:     );
379:   }
380: }

[MASTER] 09:58:41.618 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(23, 48, 2810);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node0);
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertEquals(199418, node0.getSourcePosition());
assertEquals(48, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(23, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

boolean boolean0 = node0.isNE();
assertFalse(boolean0);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertEquals(199418, node0.getSourcePosition());
assertEquals(48, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(23, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

boolean boolean1 = node0.isFromExterns();
assertFalse(boolean1);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertEquals(199418, node0.getSourcePosition());
assertEquals(48, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(23, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

node0.putBooleanProp((-410), true);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertEquals(199418, node0.getSourcePosition());
assertEquals(48, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isCatch());
assertFalse(node0.isAnd());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(23, node0.getType());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

Node node1 = new Node(38);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(38, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertTrue(node1.isName());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());

Node node2 = new Node(42, node1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotNull(node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(38, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertTrue(node1.isName());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertEquals(42, node2.getType());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertTrue(node2.hasOneChild());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDelProp());
assertFalse(node2.isDebugger());
assertFalse(node2.isOr());
assertFalse(node2.isString());
assertFalse(node2.isTrue());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertTrue(node2.isThis());
assertFalse(node2.isReturn());
assertFalse(node2.isCall());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());

Iterable<Node> iterable0 = node1.children();
assertFalse(iterable0.contains(node0));
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(38, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertTrue(node1.isName());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());

boolean boolean2 = node1.isGetProp();
assertFalse(boolean2);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(38, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertTrue(node1.isName());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());

boolean boolean3 = node1.isParamList();
assertFalse(boolean3);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertEquals(38, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertTrue(node1.isName());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());

boolean boolean4 = node2.isSetterDef();
assertFalse(boolean4);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node0);
assertNotSame(node2, node1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertEquals(38, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertTrue(node1.isName());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertEquals(42, node2.getType());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertTrue(node2.hasOneChild());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDelProp());
assertFalse(node2.isDebugger());
assertFalse(node2.isOr());
assertFalse(node2.isString());
assertFalse(node2.isTrue());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertTrue(node2.isThis());
assertFalse(node2.isReturn());
assertFalse(node2.isCall());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());

Node node3 = Node.newString("Object#Key");
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(node3);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.isHook());
assertFalse(node3.isThrow());
assertFalse(node3.isBreak());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isFalse());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isInc());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isGetElem());
assertFalse(node3.isCast());
assertFalse(node3.isVoid());
assertFalse(node3.isDelProp());
assertFalse(node3.isExprResult());
assertFalse(node3.isFunction());
assertFalse(node3.isReturn());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isAnd());
assertFalse(node3.isContinue());
assertFalse(node3.isWhile());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetProp());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isCall());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertTrue(node3.isString());
assertFalse(node3.isNew());
assertFalse(node3.isName());
assertFalse(node3.isBlock());
assertEquals(0, node3.getChildCount());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertEquals(40, node3.getType());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isTrue());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNull());
assertFalse(node3.isAdd());
assertFalse(node3.isOr());
assertFalse(node3.isArrayLit());
assertFalse(node3.isEmpty());
assertFalse(node3.isFor());
assertFalse(node3.isIf());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isLabelName());
assertFalse(node3.isWith());
assertFalse(node3.isLabel());
assertFalse(node3.isRegExp());
assertFalse(node3.isCase());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isScript());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());

node0.getString();

[MASTER] 09:58:44.460 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_115_1628157523994/com/google/javascript/rhino/Node_115_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_115_1628157523994/com/google/javascript/rhino/Node_115_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:44.460 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:44.460 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:44.461 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1548
[MASTER] 09:58:44.462 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_115_1628157523994/com/google/javascript/rhino/Node_115_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:44 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSType;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import com.google.javascript.rhino.jstype.SimpleSourceFile;
15: import java.util.ArrayDeque;
16: import java.util.Set;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class Node_115_tmp__ESTest extends Node_115_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Node node0 = Node.newString("8`QN");
27:       assertEquals(57, Node.REFLECTED_OBJECT);
28:       assertEquals(52, Node.LENGTH);
29:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
30:       assertEquals(50, Node.FREE_CALL);
31:       assertEquals(54, Node.SLASH_V);
32:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
33:       assertEquals(48, Node.DIRECTIVES);
34:       assertEquals(40, Node.ORIGINALNAME_PROP);
35:       assertEquals(49, Node.DIRECT_EVAL);
36:       assertEquals(12, Node.COLUMN_BITS);
37:       assertEquals(32, Node.INCRDECR_PROP);
38:       assertEquals(46, Node.IS_NAMESPACE);
39:       assertEquals(4095, Node.COLUMN_MASK);
40:       assertEquals(51, Node.STATIC_SOURCE_FILE);
41:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
42:       assertEquals(1, Node.DECR_FLAG);
43:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
44:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
45:       assertEquals(36, Node.QUOTED_PROP);
46:       assertEquals(56, Node.CHANGE_TIME);
47:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
48:       assertEquals(43, Node.IS_CONSTANT_NAME);
49:       assertEquals(37, Node.OPT_ARG_NAME);
50:       assertEquals(55, Node.INFERRED_FUNCTION);
51:       assertEquals(2, Node.POST_FLAG);
52:       assertEquals(30, Node.VAR_ARGS_NAME);
53:       assertEquals(15, Node.NO_SIDE_EFFECTS);
54:       assertEquals(57, Node.LAST_PROP);
55:       assertEquals(47, Node.IS_DISPATCHER);
56:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
57:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
58:       assertEquals(8, Node.FLAG_NO_THROWS);
59:       assertEquals(29, Node.JSDOC_INFO_PROP);
60:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
61:       assertEquals(53, Node.INPUT_ID);
62:       assertEquals(39, Node.EMPTY_BLOCK);
63:       assertNotNull(node0);
64:       assertFalse(node0.isInc());
65:       assertFalse(node0.isSwitch());
66:       assertFalse(node0.isHook());
67:       assertEquals((-1), node0.getCharno());
68:       assertFalse(node0.isThrow());
69:       assertFalse(node0.isCase());
70:       assertFalse(node0.isGetProp());
71:       assertFalse(node0.isGetterDef());
72:       assertFalse(node0.isFalse());
73:       assertFalse(node0.isAnd());
74:       assertFalse(node0.isArrayLit());
75:       assertFalse(node0.isVoid());
76:       assertFalse(node0.isTrue());
77:       assertFalse(node0.isExprResult());
78:       assertFalse(node0.isNot());
79:       assertFalse(node0.isDebugger());
80:       assertFalse(node0.isObjectLit());
81:       assertFalse(node0.isEmpty());
82:       assertFalse(node0.isDefaultCase());
83:       assertFalse(node0.isDec());
84:       assertFalse(node0.hasChildren());
85:       assertFalse(node0.isNull());
86:       assertFalse(node0.isReturn());
87:       assertFalse(node0.isTypeOf());
88:       assertFalse(node0.isComma());
89:       assertFalse(node0.isOr());
90:       assertFalse(node0.isAssign());
91:       assertFalse(node0.isCall());
92:       assertFalse(node0.isName());
93:       assertFalse(node0.isGetElem());
94:       assertFalse(node0.isBreak());
95:       assertFalse(node0.isDelProp());
96:       assertTrue(node0.isString());
97:       assertFalse(node0.isAdd());
98:       assertFalse(node0.isBlock());
99:       assertFalse(node0.isVar());
100:       assertFalse(node0.isWhile());
101:       assertFalse(node0.isDo());
102:       assertFalse(node0.isSetterDef());
103:       assertFalse(node0.isNew());
104:       assertFalse(node0.isAssignAdd());
105:       assertFalse(node0.isParamList());
106:       assertFalse(node0.isNumber());
107:       assertEquals(0, node0.getChildCount());
108:       assertFalse(node0.isLabel());
109:       assertEquals((-1), node0.getSourcePosition());
110:       assertFalse(node0.isStringKey());
111:       assertFalse(node0.isCast());
112:       assertFalse(node0.isContinue());
113:       assertFalse(node0.isLabelName());
114:       assertFalse(node0.isFunction());
115:       assertFalse(node0.isRegExp());
116:       assertFalse(node0.isFor());
117:       assertEquals(40, node0.getType());
118:       assertFalse(node0.hasOneChild());
119:       assertFalse(node0.isScript());
120:       assertFalse(node0.isTry());
121:       assertFalse(node0.isThis());
122:       assertFalse(node0.isNE());
123:       assertFalse(node0.isIn());
124:       assertFalse(node0.hasMoreThanOneChild());
125:       assertFalse(node0.isWith());
126:       assertFalse(node0.isCatch());
127:       assertFalse(node0.isIf());
128:       assertFalse(node0.isInstanceOf());
129:       assertEquals((-1), node0.getLineno());
130:       
131:       boolean boolean0 = node0.isEmpty();
132:       assertFalse(boolean0);
133:       assertEquals(57, Node.REFLECTED_OBJECT);
134:       assertEquals(52, Node.LENGTH);
135:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
136:       assertEquals(50, Node.FREE_CALL);
137:       assertEquals(54, Node.SLASH_V);
138:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
139:       assertEquals(48, Node.DIRECTIVES);
140:       assertEquals(40, Node.ORIGINALNAME_PROP);
141:       assertEquals(49, Node.DIRECT_EVAL);
142:       assertEquals(12, Node.COLUMN_BITS);
143:       assertEquals(32, Node.INCRDECR_PROP);
144:       assertEquals(46, Node.IS_NAMESPACE);
145:       assertEquals(4095, Node.COLUMN_MASK);
146:       assertEquals(51, Node.STATIC_SOURCE_FILE);
147:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
148:       assertEquals(1, Node.DECR_FLAG);
149:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
150:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
151:       assertEquals(36, Node.QUOTED_PROP);
152:       assertEquals(56, Node.CHANGE_TIME);
153:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
154:       assertEquals(43, Node.IS_CONSTANT_NAME);
155:       assertEquals(37, Node.OPT_ARG_NAME);
156:       assertEquals(55, Node.INFERRED_FUNCTION);
157:       assertEquals(2, Node.POST_FLAG);
158:       assertEquals(30, Node.VAR_ARGS_NAME);
159:       assertEquals(15, Node.NO_SIDE_EFFECTS);
160:       assertEquals(57, Node.LAST_PROP);
161:       assertEquals(47, Node.IS_DISPATCHER);
162:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
163:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
164:       assertEquals(8, Node.FLAG_NO_THROWS);
165:       assertEquals(29, Node.JSDOC_INFO_PROP);
166:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
167:       assertEquals(53, Node.INPUT_ID);
168:       assertEquals(39, Node.EMPTY_BLOCK);
169:       assertFalse(node0.isInc());
170:       assertFalse(node0.isSwitch());
171:       assertFalse(node0.isHook());
172:       assertEquals((-1), node0.getCharno());
173:       assertFalse(node0.isThrow());
174:       assertFalse(node0.isCase());
175:       assertFalse(node0.isGetProp());
176:       assertFalse(node0.isGetterDef());
177:       assertFalse(node0.isFalse());
178:       assertFalse(node0.isAnd());
179:       assertFalse(node0.isArrayLit());
180:       assertFalse(node0.isVoid());
181:       assertFalse(node0.isTrue());
182:       assertFalse(node0.isExprResult());
183:       assertFalse(node0.isNot());
184:       assertFalse(node0.isDebugger());
185:       assertFalse(node0.isObjectLit());
186:       assertFalse(node0.isEmpty());
187:       assertFalse(node0.isDefaultCase());
188:       assertFalse(node0.isDec());
189:       assertFalse(node0.hasChildren());
190:       assertFalse(node0.isNull());
191:       assertFalse(node0.isReturn());
192:       assertFalse(node0.isTypeOf());
193:       assertFalse(node0.isComma());
194:       assertFalse(node0.isOr());
195:       assertFalse(node0.isAssign());
196:       assertFalse(node0.isCall());
197:       assertFalse(node0.isName());
198:       assertFalse(node0.isGetElem());
199:       assertFalse(node0.isBreak());
200:       assertFalse(node0.isDelProp());
201:       assertTrue(node0.isString());
202:       assertFalse(node0.isAdd());
203:       assertFalse(node0.isBlock());
204:       assertFalse(node0.isVar());
205:       assertFalse(node0.isWhile());
206:       assertFalse(node0.isDo());
207:       assertFalse(node0.isSetterDef());
208:       assertFalse(node0.isNew());
209:       assertFalse(node0.isAssignAdd());
210:       assertFalse(node0.isParamList());
211:       assertFalse(node0.isNumber());
212:       assertEquals(0, node0.getChildCount());
213:       assertFalse(node0.isLabel());
214:       assertEquals((-1), node0.getSourcePosition());
215:       assertFalse(node0.isStringKey());
216:       assertFalse(node0.isCast());
217:       assertFalse(node0.isContinue());
218:       assertFalse(node0.isLabelName());
219:       assertFalse(node0.isFunction());
220:       assertFalse(node0.isRegExp());
221:       assertFalse(node0.isFor());
222:       assertEquals(40, node0.getType());
223:       assertFalse(node0.hasOneChild());
224:       assertFalse(node0.isScript());
225:       assertFalse(node0.isTry());
226:       assertFalse(node0.isThis());
227:       assertFalse(node0.isNE());
228:       assertFalse(node0.isIn());
229:       assertFalse(node0.hasMoreThanOneChild());
230:       assertFalse(node0.isWith());
231:       assertFalse(node0.isCatch());
232:       assertFalse(node0.isIf());
233:       assertFalse(node0.isInstanceOf());
234:       assertEquals((-1), node0.getLineno());
235:       
236:       boolean boolean1 = node0.isLocalResultCall();
237:       assertFalse(boolean1);
238:       assertEquals(57, Node.REFLECTED_OBJECT);
239:       assertEquals(52, Node.LENGTH);
240:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
241:       assertEquals(50, Node.FREE_CALL);
242:       assertEquals(54, Node.SLASH_V);
243:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
244:       assertEquals(48, Node.DIRECTIVES);
245:       assertEquals(40, Node.ORIGINALNAME_PROP);
246:       assertEquals(49, Node.DIRECT_EVAL);
247:       assertEquals(12, Node.COLUMN_BITS);
248:       assertEquals(32, Node.INCRDECR_PROP);
249:       assertEquals(46, Node.IS_NAMESPACE);
250:       assertEquals(4095, Node.COLUMN_MASK);
251:       assertEquals(51, Node.STATIC_SOURCE_FILE);
252:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
253:       assertEquals(1, Node.DECR_FLAG);
254:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
255:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
256:       assertEquals(36, Node.QUOTED_PROP);
257:       assertEquals(56, Node.CHANGE_TIME);
258:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
259:       assertEquals(43, Node.IS_CONSTANT_NAME);
260:       assertEquals(37, Node.OPT_ARG_NAME);
261:       assertEquals(55, Node.INFERRED_FUNCTION);
262:       assertEquals(2, Node.POST_FLAG);
263:       assertEquals(30, Node.VAR_ARGS_NAME);
264:       assertEquals(15, Node.NO_SIDE_EFFECTS);
265:       assertEquals(57, Node.LAST_PROP);
266:       assertEquals(47, Node.IS_DISPATCHER);
267:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
268:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
269:       assertEquals(8, Node.FLAG_NO_THROWS);
270:       assertEquals(29, Node.JSDOC_INFO_PROP);
271:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
272:       assertEquals(53, Node.INPUT_ID);
273:       assertEquals(39, Node.EMPTY_BLOCK);
274:       assertTrue(boolean1 == boolean0);
275:       assertFalse(node0.isInc());
276:       assertFalse(node0.isSwitch());
277:       assertFalse(node0.isHook());
278:       assertEquals((-1), node0.getCharno());
279:       assertFalse(node0.isThrow());
280:       assertFalse(node0.isCase());
281:       assertFalse(node0.isGetProp());
282:       assertFalse(node0.isGetterDef());
283:       assertFalse(node0.isFalse());
284:       assertFalse(node0.isAnd());
285:       assertFalse(node0.isArrayLit());
286:       assertFalse(node0.isVoid());
287:       assertFalse(node0.isTrue());
288:       assertFalse(node0.isExprResult());
289:       assertFalse(node0.isNot());
290:       assertFalse(node0.isDebugger());
291:       assertFalse(node0.isObjectLit());
292:       assertFalse(node0.isEmpty());
293:       assertFalse(node0.isDefaultCase());
294:       assertFalse(node0.isDec());
295:       assertFalse(node0.hasChildren());
296:       assertFalse(node0.isNull());
297:       assertFalse(node0.isReturn());
298:       assertFalse(node0.isTypeOf());
299:       assertFalse(node0.isComma());
300:       assertFalse(node0.isOr());
301:       assertFalse(node0.isAssign());
302:       assertFalse(node0.isCall());
303:       assertFalse(node0.isName());
304:       assertFalse(node0.isGetElem());
305:       assertFalse(node0.isBreak());
306:       assertFalse(node0.isDelProp());
307:       assertTrue(node0.isString());
308:       assertFalse(node0.isAdd());
309:       assertFalse(node0.isBlock());
310:       assertFalse(node0.isVar());
311:       assertFalse(node0.isWhile());
312:       assertFalse(node0.isDo());
313:       assertFalse(node0.isSetterDef());
314:       assertFalse(node0.isNew());
315:       assertFalse(node0.isAssignAdd());
316:       assertFalse(node0.isParamList());
317:       assertFalse(node0.isNumber());
318:       assertEquals(0, node0.getChildCount());
319:       assertFalse(node0.isLabel());
320:       assertEquals((-1), node0.getSourcePosition());
321:       assertFalse(node0.isStringKey());
322:       assertFalse(node0.isCast());
323:       assertFalse(node0.isContinue());
324:       assertFalse(node0.isLabelName());
325:       assertFalse(node0.isFunction());
326:       assertFalse(node0.isRegExp());
327:       assertFalse(node0.isFor());
328:       assertEquals(40, node0.getType());
329:       assertFalse(node0.hasOneChild());
330:       assertFalse(node0.isScript());
331:       assertFalse(node0.isTry());
332:       assertFalse(node0.isThis());
333:       assertFalse(node0.isNE());
334:       assertFalse(node0.isIn());
335:       assertFalse(node0.hasMoreThanOneChild());
336:       assertFalse(node0.isWith());
337:       assertFalse(node0.isCatch());
338:       assertFalse(node0.isIf());
339:       assertFalse(node0.isInstanceOf());
340:       assertEquals((-1), node0.getLineno());
341:       
342:       node0.detachChildren();
343:       assertEquals(57, Node.REFLECTED_OBJECT);
344:       assertEquals(52, Node.LENGTH);
345:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
346:       assertEquals(50, Node.FREE_CALL);
347:       assertEquals(54, Node.SLASH_V);
348:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
349:       assertEquals(48, Node.DIRECTIVES);
350:       assertEquals(40, Node.ORIGINALNAME_PROP);
351:       assertEquals(49, Node.DIRECT_EVAL);
352:       assertEquals(12, Node.COLUMN_BITS);
353:       assertEquals(32, Node.INCRDECR_PROP);
354:       assertEquals(46, Node.IS_NAMESPACE);
355:       assertEquals(4095, Node.COLUMN_MASK);
356:       assertEquals(51, Node.STATIC_SOURCE_FILE);
357:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
358:       assertEquals(1, Node.DECR_FLAG);
359:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
360:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
361:       assertEquals(36, Node.QUOTED_PROP);
362:       assertEquals(56, Node.CHANGE_TIME);
363:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
364:       assertEquals(43, Node.IS_CONSTANT_NAME);
365:       assertEquals(37, Node.OPT_ARG_NAME);
366:       assertEquals(55, Node.INFERRED_FUNCTION);
367:       assertEquals(2, Node.POST_FLAG);
368:       assertEquals(30, Node.VAR_ARGS_NAME);
369:       assertEquals(15, Node.NO_SIDE_EFFECTS);
370:       assertEquals(57, Node.LAST_PROP);
371:       assertEquals(47, Node.IS_DISPATCHER);
372:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
373:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
374:       assertEquals(8, Node.FLAG_NO_THROWS);
375:       assertEquals(29, Node.JSDOC_INFO_PROP);
376:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
377:       assertEquals(53, Node.INPUT_ID);
378:       assertEquals(39, Node.EMPTY_BLOCK);
379:       assertFalse(node0.isInc());
380:       assertFalse(node0.isSwitch());
381:       assertFalse(node0.isHook());
382:       assertEquals((-1), node0.getCharno());
383:       assertFalse(node0.isThrow());
384:       assertFalse(node0.isCase());
385:       assertFalse(node0.isGetProp());
386:       assertFalse(node0.isGetterDef());
387:       assertFalse(node0.isFalse());
388:       assertFalse(node0.isAnd());
389:       assertFalse(node0.isArrayLit());
390:       assertFalse(node0.isVoid());
391:       assertFalse(node0.isTrue());
392:       assertFalse(node0.isExprResult());
393:       assertFalse(node0.isNot());
394:       assertFalse(node0.isDebugger());
395:       assertFalse(node0.isObjectLit());
396:       assertFalse(node0.isEmpty());
397:       assertFalse(node0.isDefaultCase());
398:       assertFalse(node0.isDec());
399:       assertFalse(node0.hasChildren());
400:       assertFalse(node0.isNull());
401:       assertFalse(node0.isReturn());
402:       assertFalse(node0.isTypeOf());
403:       assertFalse(node0.isComma());
404:       assertFalse(node0.isOr());
405:       assertFalse(node0.isAssign());
406:       assertFalse(node0.isCall());
407:       assertFalse(node0.isName());
408:       assertFalse(node0.isGetElem());
409:       assertFalse(node0.isBreak());
410:       assertFalse(node0.isDelProp());
411:       assertTrue(node0.isString());
412:       assertFalse(node0.isAdd());
413:       assertFalse(node0.isBlock());
414:       assertFalse(node0.isVar());
415:       assertFalse(node0.isWhile());
416:       assertFalse(node0.isDo());
417:       assertFalse(node0.isSetterDef());
418:       assertFalse(node0.isNew());
419:       assertFalse(node0.isAssignAdd());
420:       assertFalse(node0.isParamList());
421:       assertFalse(node0.isNumber());
422:       assertEquals(0, node0.getChildCount());
423:       assertFalse(node0.isLabel());
424:       assertEquals((-1), node0.getSourcePosition());
425:       assertFalse(node0.isStringKey());
426:       assertFalse(node0.isCast());
427:       assertFalse(node0.isContinue());
428:       assertFalse(node0.isLabelName());
429:       assertFalse(node0.isFunction());
430:       assertFalse(node0.isRegExp());
431:       assertFalse(node0.isFor());
432:       assertEquals(40, node0.getType());
433:       assertFalse(node0.hasOneChild());
434:       assertFalse(node0.isScript());
435:       assertFalse(node0.isTry());
436:       assertFalse(node0.isThis());
437:       assertFalse(node0.isNE());
438:       assertFalse(node0.isIn());
439:       assertFalse(node0.hasMoreThanOneChild());
440:       assertFalse(node0.isWith());
441:       assertFalse(node0.isCatch());
442:       assertFalse(node0.isIf());
443:       assertFalse(node0.isInstanceOf());
444:       assertEquals((-1), node0.getLineno());
445:       
446:       Node node1 = new Node(39, 3053, 4095);
447:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
448:       assertEquals(8, Node.FLAG_NO_THROWS);
449:       assertEquals(39, Node.EMPTY_BLOCK);
450:       assertEquals(48, Node.DIRECTIVES);
451:       assertEquals(4095, Node.COLUMN_MASK);
452:       assertEquals(40, Node.ORIGINALNAME_PROP);
453:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
454:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
455:       assertEquals(36, Node.QUOTED_PROP);
456:       assertEquals(57, Node.LAST_PROP);
457:       assertEquals(30, Node.VAR_ARGS_NAME);
458:       assertEquals(57, Node.REFLECTED_OBJECT);
459:       assertEquals(55, Node.INFERRED_FUNCTION);
460:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
461:       assertEquals(52, Node.LENGTH);
462:       assertEquals(15, Node.NO_SIDE_EFFECTS);
463:       assertEquals(29, Node.JSDOC_INFO_PROP);
464:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
465:       assertEquals(53, Node.INPUT_ID);
466:       assertEquals(2, Node.POST_FLAG);
467:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
468:       assertEquals(37, Node.OPT_ARG_NAME);
469:       assertEquals(56, Node.CHANGE_TIME);
470:       assertEquals(47, Node.IS_DISPATCHER);
471:       assertEquals(12, Node.COLUMN_BITS);
472:       assertEquals(46, Node.IS_NAMESPACE);
473:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
474:       assertEquals(49, Node.DIRECT_EVAL);
475:       assertEquals(43, Node.IS_CONSTANT_NAME);
476:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
477:       assertEquals(54, Node.SLASH_V);
478:       assertEquals(51, Node.STATIC_SOURCE_FILE);
479:       assertEquals(1, Node.DECR_FLAG);
480:       assertEquals(32, Node.INCRDECR_PROP);
481:       assertEquals(50, Node.FREE_CALL);
482:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
483:       assertNotNull(node1);
484:       assertFalse(node1.equals((Object)node0));
485:       assertFalse(node1.isFalse());
486:       assertFalse(node1.isComma());
487:       assertFalse(node1.isThis());
488:       assertFalse(node1.isHook());
489:       assertEquals(12509183, node1.getSourcePosition());
490:       assertFalse(node1.isThrow());
491:       assertEquals(3053, node1.getLineno());
492:       assertFalse(node1.isGetProp());
493:       assertFalse(node1.isInc());
494:       assertFalse(node1.isWith());
495:       assertFalse(node1.isCase());
496:       assertFalse(node1.isBreak());
497:       assertFalse(node1.isInstanceOf());
498:       assertFalse(node1.isExprResult());
499:       assertFalse(node1.isGetElem());
500:       assertFalse(node1.isAssign());
501:       assertFalse(node1.isIf());
502:       assertFalse(node1.isDec());
503:       assertFalse(node1.isTypeOf());
504:       assertFalse(node1.isNE());
505:       assertFalse(node1.hasChildren());
506:       assertTrue(node1.isNumber());
507:       assertFalse(node1.isIn());
508:       assertFalse(node1.isNot());
509:       assertFalse(node1.isString());
510:       assertFalse(node1.isObjectLit());
511:       assertFalse(node1.isAnd());
512:       assertFalse(node1.isDebugger());
513:       assertFalse(node1.isFunction());
514:       assertFalse(node1.isCast());
515:       assertFalse(node1.isContinue());
516:       assertFalse(node1.isName());
517:       assertFalse(node1.isVar());
518:       assertFalse(node1.isParamList());
519:       assertFalse(node1.isStringKey());
520:       assertFalse(node1.isNull());
521:       assertFalse(node1.isNew());
522:       assertFalse(node1.isSetterDef());
523:       assertFalse(node1.isAdd());
524:       assertEquals(39, node1.getType());
525:       assertFalse(node1.isWhile());
526:       assertFalse(node1.isRegExp());
527:       assertFalse(node1.isTrue());
528:       assertFalse(node1.isReturn());
529:       assertFalse(node1.isBlock());
530:       assertFalse(node1.isVoid());
531:       assertFalse(node1.hasMoreThanOneChild());
532:       assertFalse(node1.isCatch());
533:       assertFalse(node1.isCall());
534:       assertFalse(node1.isEmpty());
535:       assertFalse(node1.isLabelName());
536:       assertFalse(node1.isGetterDef());
537:       assertFalse(node1.isDelProp());
538:       assertFalse(node1.isFor());
539:       assertFalse(node1.isTry());
540:       assertFalse(node1.isAssignAdd());
541:       assertFalse(node1.isOr());
542:       assertFalse(node1.hasOneChild());
543:       assertFalse(node1.isScript());
544:       assertFalse(node1.isDo());
545:       assertFalse(node1.isDefaultCase());
546:       assertEquals(4095, node1.getCharno());
547:       assertFalse(node1.isSwitch());
548:       assertFalse(node1.isLabel());
549:       assertEquals(0, node1.getChildCount());
550:       assertFalse(node1.isArrayLit());
551:       
552:       boolean boolean2 = node1.wasEmptyNode();
553:       assertFalse(boolean2);
554:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
555:       assertEquals(8, Node.FLAG_NO_THROWS);
556:       assertEquals(39, Node.EMPTY_BLOCK);
557:       assertEquals(48, Node.DIRECTIVES);
558:       assertEquals(4095, Node.COLUMN_MASK);
559:       assertEquals(40, Node.ORIGINALNAME_PROP);
560:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
561:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
562:       assertEquals(36, Node.QUOTED_PROP);
563:       assertEquals(57, Node.LAST_PROP);
564:       assertEquals(30, Node.VAR_ARGS_NAME);
565:       assertEquals(57, Node.REFLECTED_OBJECT);
566:       assertEquals(55, Node.INFERRED_FUNCTION);
567:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
568:       assertEquals(52, Node.LENGTH);
569:       assertEquals(15, Node.NO_SIDE_EFFECTS);
570:       assertEquals(29, Node.JSDOC_INFO_PROP);
571:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
572:       assertEquals(53, Node.INPUT_ID);
573:       assertEquals(2, Node.POST_FLAG);
574:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
575:       assertEquals(37, Node.OPT_ARG_NAME);
576:       assertEquals(56, Node.CHANGE_TIME);
577:       assertEquals(47, Node.IS_DISPATCHER);
578:       assertEquals(12, Node.COLUMN_BITS);
579:       assertEquals(46, Node.IS_NAMESPACE);
580:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
581:       assertEquals(49, Node.DIRECT_EVAL);
582:       assertEquals(43, Node.IS_CONSTANT_NAME);
583:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
584:       assertEquals(54, Node.SLASH_V);
585:       assertEquals(51, Node.STATIC_SOURCE_FILE);
586:       assertEquals(1, Node.DECR_FLAG);
587:       assertEquals(32, Node.INCRDECR_PROP);
588:       assertEquals(50, Node.FREE_CALL);
589:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
590:       assertFalse(node1.equals((Object)node0));
591:       assertTrue(boolean2 == boolean0);
592:       assertTrue(boolean2 == boolean1);
593:       assertFalse(node1.isFalse());
594:       assertFalse(node1.isComma());
595:       assertFalse(node1.isThis());
596:       assertFalse(node1.isHook());
597:       assertEquals(12509183, node1.getSourcePosition());
598:       assertFalse(node1.isThrow());
599:       assertEquals(3053, node1.getLineno());
600:       assertFalse(node1.isGetProp());
601:       assertFalse(node1.isInc());
602:       assertFalse(node1.isWith());
603:       assertFalse(node1.isCase());
604:       assertFalse(node1.isBreak());
605:       assertFalse(node1.isInstanceOf());
606:       assertFalse(node1.isExprResult());
607:       assertFalse(node1.isGetElem());
608:       assertFalse(node1.isAssign());
609:       assertFalse(node1.isIf());
610:       assertFalse(node1.isDec());
611:       assertFalse(node1.isTypeOf());
612:       assertFalse(node1.isNE());
613:       assertFalse(node1.hasChildren());
614:       assertTrue(node1.isNumber());
615:       assertFalse(node1.isIn());
616:       assertFalse(node1.isNot());
617:       assertFalse(node1.isString());
618:       assertFalse(node1.isObjectLit());
619:       assertFalse(node1.isAnd());
620:       assertFalse(node1.isDebugger());
621:       assertFalse(node1.isFunction());
622:       assertFalse(node1.isCast());
623:       assertFalse(node1.isContinue());
624:       assertFalse(node1.isName());
625:       assertFalse(node1.isVar());
626:       assertFalse(node1.isParamList());
627:       assertFalse(node1.isStringKey());
628:       assertFalse(node1.isNull());
629:       assertFalse(node1.isNew());
630:       assertFalse(node1.isSetterDef());
631:       assertFalse(node1.isAdd());
632:       assertEquals(39, node1.getType());
633:       assertFalse(node1.isWhile());
634:       assertFalse(node1.isRegExp());
635:       assertFalse(node1.isTrue());
636:       assertFalse(node1.isReturn());
637:       assertFalse(node1.isBlock());
638:       assertFalse(node1.isVoid());
639:       assertFalse(node1.hasMoreThanOneChild());
640:       assertFalse(node1.isCatch());
641:       assertFalse(node1.isCall());
642:       assertFalse(node1.isEmpty());
643:       assertFalse(node1.isLabelName());
644:       assertFalse(node1.isGetterDef());
645:       assertFalse(node1.isDelProp());
646:       assertFalse(node1.isFor());
647:       assertFalse(node1.isTry());
648:       assertFalse(node1.isAssignAdd());
649:       assertFalse(node1.isOr());
650:       assertFalse(node1.hasOneChild());
651:       assertFalse(node1.isScript());
652:       assertFalse(node1.isDo());
653:       assertFalse(node1.isDefaultCase());
654:       assertEquals(4095, node1.getCharno());
655:       assertFalse(node1.isSwitch());
656:       assertFalse(node1.isLabel());
657:       assertEquals(0, node1.getChildCount());
658:       assertFalse(node1.isArrayLit());
659:       
660:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
661:       assertNotNull(simpleErrorReporter0);
662:       
663:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
664:       assertNotNull(jSTypeRegistry0);
665:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
666:       
667:       JSType[] jSTypeArray0 = new JSType[0];
668:       Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
669:       assertNotSame(node2, node1);
670:       assertEquals(55, Node.INFERRED_FUNCTION);
671:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
672:       assertEquals(36, Node.QUOTED_PROP);
673:       assertEquals(4095, Node.COLUMN_MASK);
674:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
675:       assertEquals(43, Node.IS_CONSTANT_NAME);
676:       assertEquals(48, Node.DIRECTIVES);
677:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
678:       assertEquals(40, Node.ORIGINALNAME_PROP);
679:       assertEquals(29, Node.JSDOC_INFO_PROP);
680:       assertEquals(57, Node.REFLECTED_OBJECT);
681:       assertEquals(47, Node.IS_DISPATCHER);
682:       assertEquals(52, Node.LENGTH);
683:       assertEquals(8, Node.FLAG_NO_THROWS);
684:       assertEquals(2, Node.POST_FLAG);
685:       assertEquals(53, Node.INPUT_ID);
686:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
687:       assertEquals(39, Node.EMPTY_BLOCK);
688:       assertEquals(15, Node.NO_SIDE_EFFECTS);
689:       assertEquals(57, Node.LAST_PROP);
690:       assertEquals(1, Node.DECR_FLAG);
691:       assertEquals(12, Node.COLUMN_BITS);
692:       assertEquals(51, Node.STATIC_SOURCE_FILE);
693:       assertEquals(30, Node.VAR_ARGS_NAME);
694:       assertEquals(46, Node.IS_NAMESPACE);
695:       assertEquals(54, Node.SLASH_V);
696:       assertEquals(56, Node.CHANGE_TIME);
697:       assertEquals(37, Node.OPT_ARG_NAME);
698:       assertEquals(49, Node.DIRECT_EVAL);
699:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
700:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
701:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
702:       assertEquals(50, Node.FREE_CALL);
703:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
704:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
705:       assertEquals(32, Node.INCRDECR_PROP);
706:       assertEquals(0, jSTypeArray0.length);
707:       assertNotNull(node2);
708:       assertFalse(node2.equals((Object)node0));
709:       assertFalse(node2.equals((Object)node1));
710:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
711:       assertTrue(node2.isParamList());
712:       assertFalse(node2.isInstanceOf());
713:       assertFalse(node2.isComma());
714:       assertFalse(node2.isWith());
715:       assertFalse(node2.isNot());
716:       assertFalse(node2.isObjectLit());
717:       assertEquals(83, node2.getType());
718:       assertFalse(node2.isThis());
719:       assertFalse(node2.isScript());
720:       assertFalse(node2.isGetProp());
721:       assertFalse(node2.isThrow());
722:       assertFalse(node2.isHook());
723:       assertFalse(node2.isAssign());
724:       assertFalse(node2.isBreak());
725:       assertFalse(node2.isExprResult());
726:       assertFalse(node2.isGetElem());
727:       assertEquals((-1), node2.getLineno());
728:       assertFalse(node2.isLabel());
729:       assertFalse(node2.hasMoreThanOneChild());
730:       assertFalse(node2.isOr());
731:       assertFalse(node2.isNumber());
732:       assertFalse(node2.isEmpty());
733:       assertFalse(node2.isFor());
734:       assertFalse(node2.isNew());
735:       assertFalse(node2.isCase());
736:       assertFalse(node2.isAssignAdd());
737:       assertFalse(node2.isDo());
738:       assertFalse(node2.hasOneChild());
739:       assertFalse(node2.isArrayLit());
740:       assertFalse(node2.isVar());
741:       assertEquals((-1), node2.getCharno());
742:       assertFalse(node2.isGetterDef());
743:       assertFalse(node2.isStringKey());
744:       assertFalse(node2.isSwitch());
745:       assertFalse(node2.isLabelName());
746:       assertFalse(node2.isCatch());
747:       assertEquals(0, node2.getChildCount());
748:       assertFalse(node2.isDefaultCase());
749:       assertFalse(node2.isSetterDef());
750:       assertFalse(node2.isTry());
751:       assertFalse(node2.isAdd());
752:       assertFalse(node2.isCall());
753:       assertFalse(node2.isBlock());
754:       assertFalse(node2.isRegExp());
755:       assertFalse(node2.isIf());
756:       assertFalse(node2.isNE());
757:       assertFalse(node2.isNull());
758:       assertFalse(node2.isTrue());
759:       assertFalse(node2.isVoid());
760:       assertFalse(node2.isDelProp());
761:       assertFalse(node2.isName());
762:       assertFalse(node2.isIn());
763:       assertFalse(node2.isReturn());
764:       assertFalse(node2.isContinue());
765:       assertFalse(node2.isTypeOf());
766:       assertFalse(node2.isDec());
767:       assertFalse(node2.isString());
768:       assertFalse(node2.hasChildren());
769:       assertFalse(node2.isInc());
770:       assertFalse(node2.isWhile());
771:       assertFalse(node2.isCast());
772:       assertFalse(node2.isFalse());
773:       assertFalse(node2.isDebugger());
774:       assertFalse(node2.isFunction());
775:       assertEquals((-1), node2.getSourcePosition());
776:       assertFalse(node2.isAnd());
777:       
778:       boolean boolean3 = node2.isNoSideEffectsCall();
779:       assertFalse(boolean3);
780:       assertNotSame(node2, node1);
781:       assertEquals(55, Node.INFERRED_FUNCTION);
782:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
783:       assertEquals(36, Node.QUOTED_PROP);
784:       assertEquals(4095, Node.COLUMN_MASK);
785:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
786:       assertEquals(43, Node.IS_CONSTANT_NAME);
787:       assertEquals(48, Node.DIRECTIVES);
788:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
789:       assertEquals(40, Node.ORIGINALNAME_PROP);
790:       assertEquals(29, Node.JSDOC_INFO_PROP);
791:       assertEquals(57, Node.REFLECTED_OBJECT);
792:       assertEquals(47, Node.IS_DISPATCHER);
793:       assertEquals(52, Node.LENGTH);
794:       assertEquals(8, Node.FLAG_NO_THROWS);
795:       assertEquals(2, Node.POST_FLAG);
796:       assertEquals(53, Node.INPUT_ID);
797:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
798:       assertEquals(39, Node.EMPTY_BLOCK);
799:       assertEquals(15, Node.NO_SIDE_EFFECTS);
800:       assertEquals(57, Node.LAST_PROP);
801:       assertEquals(1, Node.DECR_FLAG);
802:       assertEquals(12, Node.COLUMN_BITS);
803:       assertEquals(51, Node.STATIC_SOURCE_FILE);
804:       assertEquals(30, Node.VAR_ARGS_NAME);
805:       assertEquals(46, Node.IS_NAMESPACE);
806:       assertEquals(54, Node.SLASH_V);
807:       assertEquals(56, Node.CHANGE_TIME);
808:       assertEquals(37, Node.OPT_ARG_NAME);
809:       assertEquals(49, Node.DIRECT_EVAL);
810:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
811:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
812:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
813:       assertEquals(50, Node.FREE_CALL);
814:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
815:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
816:       assertEquals(32, Node.INCRDECR_PROP);
817:       assertEquals(0, jSTypeArray0.length);
818:       assertFalse(node2.equals((Object)node0));
819:       assertFalse(node2.equals((Object)node1));
820:       assertTrue(boolean3 == boolean1);
821:       assertTrue(boolean3 == boolean0);
822:       assertTrue(boolean3 == boolean2);
823:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
824:       assertTrue(node2.isParamList());
825:       assertFalse(node2.isInstanceOf());
826:       assertFalse(node2.isComma());
827:       assertFalse(node2.isWith());
828:       assertFalse(node2.isNot());
829:       assertFalse(node2.isObjectLit());
830:       assertEquals(83, node2.getType());
831:       assertFalse(node2.isThis());
832:       assertFalse(node2.isScript());
833:       assertFalse(node2.isGetProp());
834:       assertFalse(node2.isThrow());
835:       assertFalse(node2.isHook());
836:       assertFalse(node2.isAssign());
837:       assertFalse(node2.isBreak());
838:       assertFalse(node2.isExprResult());
839:       assertFalse(node2.isGetElem());
840:       assertEquals((-1), node2.getLineno());
841:       assertFalse(node2.isLabel());
842:       assertFalse(node2.hasMoreThanOneChild());
843:       assertFalse(node2.isOr());
844:       assertFalse(node2.isNumber());
845:       assertFalse(node2.isEmpty());
846:       assertFalse(node2.isFor());
847:       assertFalse(node2.isNew());
848:       assertFalse(node2.isCase());
849:       assertFalse(node2.isAssignAdd());
850:       assertFalse(node2.isDo());
851:       assertFalse(node2.hasOneChild());
852:       assertFalse(node2.isArrayLit());
853:       assertFalse(node2.isVar());
854:       assertEquals((-1), node2.getCharno());
855:       assertFalse(node2.isGetterDef());
856:       assertFalse(node2.isStringKey());
857:       assertFalse(node2.isSwitch());
858:       assertFalse(node2.isLabelName());
859:       assertFalse(node2.isCatch());
860:       assertEquals(0, node2.getChildCount());
861:       assertFalse(node2.isDefaultCase());
862:       assertFalse(node2.isSetterDef());
863:       assertFalse(node2.isTry());
864:       assertFalse(node2.isAdd());
865:       assertFalse(node2.isCall());
866:       assertFalse(node2.isBlock());
867:       assertFalse(node2.isRegExp());
868:       assertFalse(node2.isIf());
869:       assertFalse(node2.isNE());
870:       assertFalse(node2.isNull());
871:       assertFalse(node2.isTrue());
872:       assertFalse(node2.isVoid());
873:       assertFalse(node2.isDelProp());
874:       assertFalse(node2.isName());
875:       assertFalse(node2.isIn());
876:       assertFalse(node2.isReturn());
877:       assertFalse(node2.isContinue());
878:       assertFalse(node2.isTypeOf());
879:       assertFalse(node2.isDec());
880:       assertFalse(node2.isString());
881:       assertFalse(node2.hasChildren());
882:       assertFalse(node2.isInc());
883:       assertFalse(node2.isWhile());
884:       assertFalse(node2.isCast());
885:       assertFalse(node2.isFalse());
886:       assertFalse(node2.isDebugger());
887:       assertFalse(node2.isFunction());
888:       assertEquals((-1), node2.getSourcePosition());
889:       assertFalse(node2.isAnd());
890:       
891:       Node node3 = node1.useSourceInfoFromForTree(node2);
892:       assertNotSame(node1, node2);
893:       assertSame(node1, node3);
894:       assertNotSame(node2, node3);
895:       assertNotSame(node2, node1);
896:       assertNotSame(node3, node2);
897:       assertSame(node3, node1);
898:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
899:       assertEquals(8, Node.FLAG_NO_THROWS);
900:       assertEquals(39, Node.EMPTY_BLOCK);
901:       assertEquals(48, Node.DIRECTIVES);
902:       assertEquals(4095, Node.COLUMN_MASK);
903:       assertEquals(40, Node.ORIGINALNAME_PROP);
904:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
905:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
906:       assertEquals(36, Node.QUOTED_PROP);
907:       assertEquals(57, Node.LAST_PROP);
908:       assertEquals(30, Node.VAR_ARGS_NAME);
909:       assertEquals(57, Node.REFLECTED_OBJECT);
910:       assertEquals(55, Node.INFERRED_FUNCTION);
911:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
912:       assertEquals(52, Node.LENGTH);
913:       assertEquals(15, Node.NO_SIDE_EFFECTS);
914:       assertEquals(29, Node.JSDOC_INFO_PROP);
915:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
916:       assertEquals(53, Node.INPUT_ID);
917:       assertEquals(2, Node.POST_FLAG);
918:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
919:       assertEquals(37, Node.OPT_ARG_NAME);
920:       assertEquals(56, Node.CHANGE_TIME);
921:       assertEquals(47, Node.IS_DISPATCHER);
922:       assertEquals(12, Node.COLUMN_BITS);
923:       assertEquals(46, Node.IS_NAMESPACE);
924:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
925:       assertEquals(49, Node.DIRECT_EVAL);
926:       assertEquals(43, Node.IS_CONSTANT_NAME);
927:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
928:       assertEquals(54, Node.SLASH_V);
929:       assertEquals(51, Node.STATIC_SOURCE_FILE);
930:       assertEquals(1, Node.DECR_FLAG);
931:       assertEquals(32, Node.INCRDECR_PROP);
932:       assertEquals(50, Node.FREE_CALL);
933:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
934:       assertEquals(55, Node.INFERRED_FUNCTION);
935:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
936:       assertEquals(36, Node.QUOTED_PROP);
937:       assertEquals(4095, Node.COLUMN_MASK);
938:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
939:       assertEquals(43, Node.IS_CONSTANT_NAME);
940:       assertEquals(48, Node.DIRECTIVES);
941:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
942:       assertEquals(40, Node.ORIGINALNAME_PROP);
943:       assertEquals(29, Node.JSDOC_INFO_PROP);
944:       assertEquals(57, Node.REFLECTED_OBJECT);
945:       assertEquals(47, Node.IS_DISPATCHER);
946:       assertEquals(52, Node.LENGTH);
947:       assertEquals(8, Node.FLAG_NO_THROWS);
948:       assertEquals(2, Node.POST_FLAG);
949:       assertEquals(53, Node.INPUT_ID);
950:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
951:       assertEquals(39, Node.EMPTY_BLOCK);
952:       assertEquals(15, Node.NO_SIDE_EFFECTS);
953:       assertEquals(57, Node.LAST_PROP);
954:       assertEquals(1, Node.DECR_FLAG);
955:       assertEquals(12, Node.COLUMN_BITS);
956:       assertEquals(51, Node.STATIC_SOURCE_FILE);
957:       assertEquals(30, Node.VAR_ARGS_NAME);
958:       assertEquals(46, Node.IS_NAMESPACE);
959:       assertEquals(54, Node.SLASH_V);
960:       assertEquals(56, Node.CHANGE_TIME);
961:       assertEquals(37, Node.OPT_ARG_NAME);
962:       assertEquals(49, Node.DIRECT_EVAL);
963:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
964:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
965:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
966:       assertEquals(50, Node.FREE_CALL);
967:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
968:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
969:       assertEquals(32, Node.INCRDECR_PROP);
970:       assertEquals(53, Node.INPUT_ID);
971:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
972:       assertEquals(43, Node.IS_CONSTANT_NAME);
973:       assertEquals(36, Node.QUOTED_PROP);
974:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
975:       assertEquals(29, Node.JSDOC_INFO_PROP);
976:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
977:       assertEquals(55, Node.INFERRED_FUNCTION);
978:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
979:       assertEquals(48, Node.DIRECTIVES);
980:       assertEquals(8, Node.FLAG_NO_THROWS);
981:       assertEquals(56, Node.CHANGE_TIME);
982:       assertEquals(12, Node.COLUMN_BITS);
983:       assertEquals(49, Node.DIRECT_EVAL);
984:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
985:       assertEquals(4095, Node.COLUMN_MASK);
986:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
987:       assertEquals(37, Node.OPT_ARG_NAME);
988:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
989:       assertEquals(54, Node.SLASH_V);
990:       assertEquals(52, Node.LENGTH);
991:       assertEquals(57, Node.REFLECTED_OBJECT);
992:       assertEquals(30, Node.VAR_ARGS_NAME);
993:       assertEquals(1, Node.DECR_FLAG);
994:       assertEquals(50, Node.FREE_CALL);
995:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
996:       assertEquals(57, Node.LAST_PROP);
997:       assertEquals(15, Node.NO_SIDE_EFFECTS);
998:       assertEquals(32, Node.INCRDECR_PROP);
999:       assertEquals(39, Node.EMPTY_BLOCK);
1000:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1001:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1002:       assertEquals(47, Node.IS_DISPATCHER);
1003:       assertEquals(2, Node.POST_FLAG);
1004:       assertEquals(46, Node.IS_NAMESPACE);
1005:       assertEquals(40, Node.ORIGINALNAME_PROP);
1006:       assertEquals(0, jSTypeArray0.length);
1007:       assertNotNull(node3);
1008:       assertFalse(node1.equals((Object)node2));
1009:       assertFalse(node1.equals((Object)node0));
1010:       assertFalse(node2.equals((Object)node0));
1011:       assertFalse(node2.equals((Object)node1));
1012:       assertFalse(node3.equals((Object)node2));
1013:       assertFalse(node3.equals((Object)node0));
1014:       assertFalse(node1.isFalse());
1015:       assertFalse(node1.isComma());
1016:       assertFalse(node1.isThis());
1017:       assertFalse(node1.isHook());
1018:       assertFalse(node1.isThrow());
1019:       assertFalse(node1.isGetProp());
1020:       assertFalse(node1.isInc());
1021:       assertFalse(node1.isWith());
1022:       assertFalse(node1.isCase());
1023:       assertFalse(node1.isBreak());
1024:       assertFalse(node1.isInstanceOf());
1025:       assertFalse(node1.isExprResult());
1026:       assertFalse(node1.isGetElem());
1027:       assertFalse(node1.isAssign());
1028:       assertFalse(node1.isIf());
1029:       assertFalse(node1.isDec());
1030:       assertFalse(node1.isTypeOf());
1031:       assertFalse(node1.isNE());
1032:       assertEquals((-1), node1.getSourcePosition());
1033:       assertFalse(node1.hasChildren());
1034:       assertTrue(node1.isNumber());
1035:       assertFalse(node1.isIn());
1036:       assertFalse(node1.isNot());
1037:       assertFalse(node1.isString());
1038:       assertFalse(node1.isObjectLit());
1039:       assertFalse(node1.isAnd());
1040:       assertFalse(node1.isDebugger());
1041:       assertFalse(node1.isFunction());
1042:       assertFalse(node1.isCast());
1043:       assertFalse(node1.isContinue());
1044:       assertFalse(node1.isName());
1045:       assertFalse(node1.isVar());
1046:       assertFalse(node1.isParamList());
1047:       assertFalse(node1.isStringKey());
1048:       assertFalse(node1.isNull());
1049:       assertFalse(node1.isNew());
1050:       assertFalse(node1.isSetterDef());
1051:       assertFalse(node1.isAdd());
1052:       assertEquals(39, node1.getType());
1053:       assertFalse(node1.isWhile());
1054:       assertFalse(node1.isRegExp());
1055:       assertFalse(node1.isTrue());
1056:       assertFalse(node1.isReturn());
1057:       assertFalse(node1.isBlock());
1058:       assertEquals((-1), node1.getLineno());
1059:       assertFalse(node1.isVoid());
1060:       assertFalse(node1.hasMoreThanOneChild());
1061:       assertFalse(node1.isCatch());
1062:       assertFalse(node1.isCall());
1063:       assertFalse(node1.isEmpty());
1064:       assertFalse(node1.isLabelName());
1065:       assertFalse(node1.isGetterDef());
1066:       assertFalse(node1.isDelProp());
1067:       assertFalse(node1.isFor());
1068:       assertFalse(node1.isTry());
1069:       assertFalse(node1.isAssignAdd());
1070:       assertFalse(node1.isOr());
1071:       assertFalse(node1.hasOneChild());
1072:       assertFalse(node1.isScript());
1073:       assertFalse(node1.isDo());
1074:       assertFalse(node1.isDefaultCase());
1075:       assertFalse(node1.isSwitch());
1076:       assertEquals((-1), node1.getCharno());
1077:       assertFalse(node1.isLabel());
1078:       assertEquals(0, node1.getChildCount());
1079:       assertFalse(node1.isArrayLit());
1080:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1081:       assertTrue(node2.isParamList());
1082:       assertFalse(node2.isInstanceOf());
1083:       assertFalse(node2.isComma());
1084:       assertFalse(node2.isWith());
1085:       assertFalse(node2.isNot());
1086:       assertFalse(node2.isObjectLit());
1087:       assertEquals(83, node2.getType());
1088:       assertFalse(node2.isThis());
1089:       assertFalse(node2.isScript());
1090:       assertFalse(node2.isGetProp());
1091:       assertFalse(node2.isThrow());
1092:       assertFalse(node2.isHook());
1093:       assertFalse(node2.isAssign());
1094:       assertFalse(node2.isBreak());
1095:       assertFalse(node2.isExprResult());
1096:       assertFalse(node2.isGetElem());
1097:       assertEquals((-1), node2.getLineno());
1098:       assertFalse(node2.isLabel());
1099:       assertFalse(node2.hasMoreThanOneChild());
1100:       assertFalse(node2.isOr());
1101:       assertFalse(node2.isNumber());
1102:       assertFalse(node2.isEmpty());
1103:       assertFalse(node2.isFor());
1104:       assertFalse(node2.isNew());
1105:       assertFalse(node2.isCase());
1106:       assertFalse(node2.isAssignAdd());
1107:       assertFalse(node2.isDo());
1108:       assertFalse(node2.hasOneChild());
1109:       assertFalse(node2.isArrayLit());
1110:       assertFalse(node2.isVar());
1111:       assertEquals((-1), node2.getCharno());
1112:       assertFalse(node2.isGetterDef());
1113:       assertFalse(node2.isStringKey());
1114:       assertFalse(node2.isSwitch());
1115:       assertFalse(node2.isLabelName());
1116:       assertFalse(node2.isCatch());
1117:       assertEquals(0, node2.getChildCount());
1118:       assertFalse(node2.isDefaultCase());
1119:       assertFalse(node2.isSetterDef());
1120:       assertFalse(node2.isTry());
1121:       assertFalse(node2.isAdd());
1122:       assertFalse(node2.isCall());
1123:       assertFalse(node2.isBlock());
1124:       assertFalse(node2.isRegExp());
1125:       assertFalse(node2.isIf());
1126:       assertFalse(node2.isNE());
1127:       assertFalse(node2.isNull());
1128:       assertFalse(node2.isTrue());
1129:       assertFalse(node2.isVoid());
1130:       assertFalse(node2.isDelProp());
1131:       assertFalse(node2.isName());
1132:       assertFalse(node2.isIn());
1133:       assertFalse(node2.isReturn());
1134:       assertFalse(node2.isContinue());
1135:       assertFalse(node2.isTypeOf());
1136:       assertFalse(node2.isDec());
1137:       assertFalse(node2.isString());
1138:       assertFalse(node2.hasChildren());
1139:       assertFalse(node2.isInc());
1140:       assertFalse(node2.isWhile());
1141:       assertFalse(node2.isCast());
1142:       assertFalse(node2.isFalse());
1143:       assertFalse(node2.isDebugger());
1144:       assertFalse(node2.isFunction());
1145:       assertEquals((-1), node2.getSourcePosition());
1146:       assertFalse(node2.isAnd());
1147:       assertFalse(node3.isDefaultCase());
1148:       assertFalse(node3.isRegExp());
1149:       assertFalse(node3.isFunction());
1150:       assertFalse(node3.isTrue());
1151:       assertFalse(node3.isDebugger());
1152:       assertEquals(0, node3.getChildCount());
1153:       assertFalse(node3.isCatch());
1154:       assertFalse(node3.isVoid());
1155:       assertFalse(node3.isArrayLit());
1156:       assertFalse(node3.isGetterDef());
1157:       assertFalse(node3.isParamList());
1158:       assertFalse(node3.isStringKey());
1159:       assertFalse(node3.isFor());
1160:       assertFalse(node3.isTry());
1161:       assertTrue(node3.isNumber());
1162:       assertFalse(node3.isCase());
1163:       assertFalse(node3.isSwitch());
1164:       assertFalse(node3.isWhile());
1165:       assertEquals((-1), node3.getCharno());
1166:       assertFalse(node3.isCall());
1167:       assertFalse(node3.isName());
1168:       assertFalse(node3.isBreak());
1169:       assertFalse(node3.isDelProp());
1170:       assertFalse(node3.isNull());
1171:       assertFalse(node3.isOr());
1172:       assertFalse(node3.isLabel());
1173:       assertFalse(node3.isVar());
1174:       assertFalse(node3.isAssignAdd());
1175:       assertFalse(node3.isNew());
1176:       assertFalse(node3.isEmpty());
1177:       assertFalse(node3.isDo());
1178:       assertFalse(node3.isAdd());
1179:       assertFalse(node3.isScript());
1180:       assertFalse(node3.isWith());
1181:       assertFalse(node3.isNot());
1182:       assertFalse(node3.isObjectLit());
1183:       assertFalse(node3.isInstanceOf());
1184:       assertFalse(node3.isCast());
1185:       assertFalse(node3.isAnd());
1186:       assertFalse(node3.isGetElem());
1187:       assertFalse(node3.isLabelName());
1188:       assertFalse(node3.isExprResult());
1189:       assertFalse(node3.isDec());
1190:       assertFalse(node3.isTypeOf());
1191:       assertFalse(node3.isAssign());
1192:       assertFalse(node3.isComma());
1193:       assertFalse(node3.isThis());
1194:       assertFalse(node3.isReturn());
1195:       assertFalse(node3.hasChildren());
1196:       assertEquals((-1), node3.getSourcePosition());
1197:       assertFalse(node3.isHook());
1198:       assertFalse(node3.hasOneChild());
1199:       assertFalse(node3.isGetProp());
1200:       assertFalse(node3.isString());
1201:       assertFalse(node3.isBlock());
1202:       assertEquals(39, node3.getType());
1203:       assertFalse(node3.hasMoreThanOneChild());
1204:       assertFalse(node3.isContinue());
1205:       assertEquals((-1), node3.getLineno());
1206:       assertFalse(node3.isNE());
1207:       assertFalse(node3.isIf());
1208:       assertFalse(node3.isThrow());
1209:       assertFalse(node3.isFalse());
1210:       assertFalse(node3.isIn());
1211:       assertFalse(node3.isInc());
1212:       assertFalse(node3.isSetterDef());
1213:       
1214:       boolean boolean4 = node0.isEquivalentTo(node2);
1215:       assertFalse(boolean4);
1216:       assertNotSame(node2, node3);
1217:       assertNotSame(node2, node1);
1218:       assertEquals(57, Node.REFLECTED_OBJECT);
1219:       assertEquals(52, Node.LENGTH);
1220:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1221:       assertEquals(50, Node.FREE_CALL);
1222:       assertEquals(54, Node.SLASH_V);
1223:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1224:       assertEquals(48, Node.DIRECTIVES);
1225:       assertEquals(40, Node.ORIGINALNAME_PROP);
1226:       assertEquals(49, Node.DIRECT_EVAL);
1227:       assertEquals(12, Node.COLUMN_BITS);
1228:       assertEquals(32, Node.INCRDECR_PROP);
1229:       assertEquals(46, Node.IS_NAMESPACE);
1230:       assertEquals(4095, Node.COLUMN_MASK);
1231:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1232:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1233:       assertEquals(1, Node.DECR_FLAG);
1234:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1235:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1236:       assertEquals(36, Node.QUOTED_PROP);
1237:       assertEquals(56, Node.CHANGE_TIME);
1238:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1239:       assertEquals(43, Node.IS_CONSTANT_NAME);
1240:       assertEquals(37, Node.OPT_ARG_NAME);
1241:       assertEquals(55, Node.INFERRED_FUNCTION);
1242:       assertEquals(2, Node.POST_FLAG);
1243:       assertEquals(30, Node.VAR_ARGS_NAME);
1244:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1245:       assertEquals(57, Node.LAST_PROP);
1246:       assertEquals(47, Node.IS_DISPATCHER);
1247:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1248:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1249:       assertEquals(8, Node.FLAG_NO_THROWS);
1250:       assertEquals(29, Node.JSDOC_INFO_PROP);
1251:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1252:       assertEquals(53, Node.INPUT_ID);
1253:       assertEquals(39, Node.EMPTY_BLOCK);
1254:       assertEquals(55, Node.INFERRED_FUNCTION);
1255:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1256:       assertEquals(36, Node.QUOTED_PROP);
1257:       assertEquals(4095, Node.COLUMN_MASK);
1258:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1259:       assertEquals(43, Node.IS_CONSTANT_NAME);
1260:       assertEquals(48, Node.DIRECTIVES);
1261:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1262:       assertEquals(40, Node.ORIGINALNAME_PROP);
1263:       assertEquals(29, Node.JSDOC_INFO_PROP);
1264:       assertEquals(57, Node.REFLECTED_OBJECT);
1265:       assertEquals(47, Node.IS_DISPATCHER);
1266:       assertEquals(52, Node.LENGTH);
1267:       assertEquals(8, Node.FLAG_NO_THROWS);
1268:       assertEquals(2, Node.POST_FLAG);
1269:       assertEquals(53, Node.INPUT_ID);
1270:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1271:       assertEquals(39, Node.EMPTY_BLOCK);
1272:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1273:       assertEquals(57, Node.LAST_PROP);
1274:       assertEquals(1, Node.DECR_FLAG);
1275:       assertEquals(12, Node.COLUMN_BITS);
1276:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1277:       assertEquals(30, Node.VAR_ARGS_NAME);
1278:       assertEquals(46, Node.IS_NAMESPACE);
1279:       assertEquals(54, Node.SLASH_V);
1280:       assertEquals(56, Node.CHANGE_TIME);
1281:       assertEquals(37, Node.OPT_ARG_NAME);
1282:       assertEquals(49, Node.DIRECT_EVAL);
1283:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1284:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1285:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1286:       assertEquals(50, Node.FREE_CALL);
1287:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1288:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1289:       assertEquals(32, Node.INCRDECR_PROP);
1290:       assertEquals(0, jSTypeArray0.length);
1291:       assertFalse(node0.equals((Object)node3));
1292:       assertFalse(node0.equals((Object)node2));
1293:       assertFalse(node0.equals((Object)node1));
1294:       assertFalse(node2.equals((Object)node3));
1295:       assertFalse(node2.equals((Object)node0));
1296:       assertFalse(node2.equals((Object)node1));
1297:       assertTrue(boolean4 == boolean1);
1298:       assertTrue(boolean4 == boolean0);
1299:       assertTrue(boolean4 == boolean3);
1300:       assertTrue(boolean4 == boolean2);
1301:       assertFalse(node0.isInc());
1302:       assertFalse(node0.isSwitch());
1303:       assertFalse(node0.isHook());
1304:       assertEquals((-1), node0.getCharno());
1305:       assertFalse(node0.isThrow());
1306:       assertFalse(node0.isCase());
1307:       assertFalse(node0.isGetProp());
1308:       assertFalse(node0.isGetterDef());
1309:       assertFalse(node0.isFalse());
1310:       assertFalse(node0.isAnd());
1311:       assertFalse(node0.isArrayLit());
1312:       assertFalse(node0.isVoid());
1313:       assertFalse(node0.isTrue());
1314:       assertFalse(node0.isExprResult());
1315:       assertFalse(node0.isNot());
1316:       assertFalse(node0.isDebugger());
1317:       assertFalse(node0.isObjectLit());
1318:       assertFalse(node0.isEmpty());
1319:       assertFalse(node0.isDefaultCase());
1320:       assertFalse(node0.isDec());
1321:       assertFalse(node0.hasChildren());
1322:       assertFalse(node0.isNull());
1323:       assertFalse(node0.isReturn());
1324:       assertFalse(node0.isTypeOf());
1325:       assertFalse(node0.isComma());
1326:       assertFalse(node0.isOr());
1327:       assertFalse(node0.isAssign());
1328:       assertFalse(node0.isCall());
1329:       assertFalse(node0.isName());
1330:       assertFalse(node0.isGetElem());
1331:       assertFalse(node0.isBreak());
1332:       assertFalse(node0.isDelProp());
1333:       assertTrue(node0.isString());
1334:       assertFalse(node0.isAdd());
1335:       assertFalse(node0.isBlock());
1336:       assertFalse(node0.isVar());
1337:       assertFalse(node0.isWhile());
1338:       assertFalse(node0.isDo());
1339:       assertFalse(node0.isSetterDef());
1340:       assertFalse(node0.isNew());
1341:       assertFalse(node0.isAssignAdd());
1342:       assertFalse(node0.isParamList());
1343:       assertFalse(node0.isNumber());
1344:       assertEquals(0, node0.getChildCount());
1345:       assertFalse(node0.isLabel());
1346:       assertEquals((-1), node0.getSourcePosition());
1347:       assertFalse(node0.isStringKey());
1348:       assertFalse(node0.isCast());
1349:       assertFalse(node0.isContinue());
1350:       assertFalse(node0.isLabelName());
1351:       assertFalse(node0.isFunction());
1352:       assertFalse(node0.isRegExp());
1353:       assertFalse(node0.isFor());
1354:       assertEquals(40, node0.getType());
1355:       assertFalse(node0.hasOneChild());
1356:       assertFalse(node0.isScript());
1357:       assertFalse(node0.isTry());
1358:       assertFalse(node0.isThis());
1359:       assertFalse(node0.isNE());
1360:       assertFalse(node0.isIn());
1361:       assertFalse(node0.hasMoreThanOneChild());
1362:       assertFalse(node0.isWith());
1363:       assertFalse(node0.isCatch());
1364:       assertFalse(node0.isIf());
1365:       assertFalse(node0.isInstanceOf());
1366:       assertEquals((-1), node0.getLineno());
1367:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1368:       assertTrue(node2.isParamList());
1369:       assertFalse(node2.isInstanceOf());
1370:       assertFalse(node2.isComma());
1371:       assertFalse(node2.isWith());
1372:       assertFalse(node2.isNot());
1373:       assertFalse(node2.isObjectLit());
1374:       assertEquals(83, node2.getType());
1375:       assertFalse(node2.isThis());
1376:       assertFalse(node2.isScript());
1377:       assertFalse(node2.isGetProp());
1378:       assertFalse(node2.isThrow());
1379:       assertFalse(node2.isHook());
1380:       assertFalse(node2.isAssign());
1381:       assertFalse(node2.isBreak());
1382:       assertFalse(node2.isExprResult());
1383:       assertFalse(node2.isGetElem());
1384:       assertEquals((-1), node2.getLineno());
1385:       assertFalse(node2.isLabel());
1386:       assertFalse(node2.hasMoreThanOneChild());
1387:       assertFalse(node2.isOr());
1388:       assertFalse(node2.isNumber());
1389:       assertFalse(node2.isEmpty());
1390:       assertFalse(node2.isFor());
1391:       assertFalse(node2.isNew());
1392:       assertFalse(node2.isCase());
1393:       assertFalse(node2.isAssignAdd());
1394:       assertFalse(node2.isDo());
1395:       assertFalse(node2.hasOneChild());
1396:       assertFalse(node2.isArrayLit());
1397:       assertFalse(node2.isVar());
1398:       assertEquals((-1), node2.getCharno());
1399:       assertFalse(node2.isGetterDef());
1400:       assertFalse(node2.isStringKey());
1401:       assertFalse(node2.isSwitch());
1402:       assertFalse(node2.isLabelName());
1403:       assertFalse(node2.isCatch());
1404:       assertEquals(0, node2.getChildCount());
1405:       assertFalse(node2.isDefaultCase());
1406:       assertFalse(node2.isSetterDef());
1407:       assertFalse(node2.isTry());
1408:       assertFalse(node2.isAdd());
1409:       assertFalse(node2.isCall());
1410:       assertFalse(node2.isBlock());
1411:       assertFalse(node2.isRegExp());
1412:       assertFalse(node2.isIf());
1413:       assertFalse(node2.isNE());
1414:       assertFalse(node2.isNull());
1415:       assertFalse(node2.isTrue());
1416:       assertFalse(node2.isVoid());
1417:       assertFalse(node2.isDelProp());
1418:       assertFalse(node2.isName());
1419:       assertFalse(node2.isIn());
1420:       assertFalse(node2.isReturn());
1421:       assertFalse(node2.isContinue());
1422:       assertFalse(node2.isTypeOf());
1423:       assertFalse(node2.isDec());
1424:       assertFalse(node2.isString());
1425:       assertFalse(node2.hasChildren());
1426:       assertFalse(node2.isInc());
1427:       assertFalse(node2.isWhile());
1428:       assertFalse(node2.isCast());
1429:       assertFalse(node2.isFalse());
1430:       assertFalse(node2.isDebugger());
1431:       assertFalse(node2.isFunction());
1432:       assertEquals((-1), node2.getSourcePosition());
1433:       assertFalse(node2.isAnd());
1434:       
1435:       Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
1436:       assertNotSame(node2, node3);
1437:       assertNotSame(node2, node1);
1438:       assertEquals(55, Node.INFERRED_FUNCTION);
1439:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1440:       assertEquals(36, Node.QUOTED_PROP);
1441:       assertEquals(4095, Node.COLUMN_MASK);
1442:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1443:       assertEquals(43, Node.IS_CONSTANT_NAME);
1444:       assertEquals(48, Node.DIRECTIVES);
1445:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1446:       assertEquals(40, Node.ORIGINALNAME_PROP);
1447:       assertEquals(29, Node.JSDOC_INFO_PROP);
1448:       assertEquals(57, Node.REFLECTED_OBJECT);
1449:       assertEquals(47, Node.IS_DISPATCHER);
1450:       assertEquals(52, Node.LENGTH);
1451:       assertEquals(8, Node.FLAG_NO_THROWS);
1452:       assertEquals(2, Node.POST_FLAG);
1453:       assertEquals(53, Node.INPUT_ID);
1454:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1455:       assertEquals(39, Node.EMPTY_BLOCK);
1456:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1457:       assertEquals(57, Node.LAST_PROP);
1458:       assertEquals(1, Node.DECR_FLAG);
1459:       assertEquals(12, Node.COLUMN_BITS);
1460:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1461:       assertEquals(30, Node.VAR_ARGS_NAME);
1462:       assertEquals(46, Node.IS_NAMESPACE);
1463:       assertEquals(54, Node.SLASH_V);
1464:       assertEquals(56, Node.CHANGE_TIME);
1465:       assertEquals(37, Node.OPT_ARG_NAME);
1466:       assertEquals(49, Node.DIRECT_EVAL);
1467:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1468:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1469:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1470:       assertEquals(50, Node.FREE_CALL);
1471:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1472:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1473:       assertEquals(32, Node.INCRDECR_PROP);
1474:       assertEquals(0, jSTypeArray0.length);
1475:       assertNotNull(node_AncestorIterable0);
1476:       assertFalse(node2.equals((Object)node3));
1477:       assertFalse(node2.equals((Object)node0));
1478:       assertFalse(node2.equals((Object)node1));
1479:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1480:       assertTrue(node2.isParamList());
1481:       assertFalse(node2.isInstanceOf());
1482:       assertFalse(node2.isComma());
1483:       assertFalse(node2.isWith());
1484:       assertFalse(node2.isNot());
1485:       assertFalse(node2.isObjectLit());
1486:       assertEquals(83, node2.getType());
1487:       assertFalse(node2.isThis());
1488:       assertFalse(node2.isScript());
1489:       assertFalse(node2.isGetProp());
1490:       assertFalse(node2.isThrow());
1491:       assertFalse(node2.isHook());
1492:       assertFalse(node2.isAssign());
1493:       assertFalse(node2.isBreak());
1494:       assertFalse(node2.isExprResult());
1495:       assertFalse(node2.isGetElem());
1496:       assertEquals((-1), node2.getLineno());
1497:       assertFalse(node2.isLabel());
1498:       assertFalse(node2.hasMoreThanOneChild());
1499:       assertFalse(node2.isOr());
1500:       assertFalse(node2.isNumber());
1501:       assertFalse(node2.isEmpty());
1502:       assertFalse(node2.isFor());
1503:       assertFalse(node2.isNew());
1504:       assertFalse(node2.isCase());
1505:       assertFalse(node2.isAssignAdd());
1506:       assertFalse(node2.isDo());
1507:       assertFalse(node2.hasOneChild());
1508:       assertFalse(node2.isArrayLit());
1509:       assertFalse(node2.isVar());
1510:       assertEquals((-1), node2.getCharno());
1511:       assertFalse(node2.isGetterDef());
1512:       assertFalse(node2.isStringKey());
1513:       assertFalse(node2.isSwitch());
1514:       assertFalse(node2.isLabelName());
1515:       assertFalse(node2.isCatch());
1516:       assertEquals(0, node2.getChildCount());
1517:       assertFalse(node2.isDefaultCase());
1518:       assertFalse(node2.isSetterDef());
1519:       assertFalse(node2.isTry());
1520:       assertFalse(node2.isAdd());
1521:       assertFalse(node2.isCall());
1522:       assertFalse(node2.isBlock());
1523:       assertFalse(node2.isRegExp());
1524:       assertFalse(node2.isIf());
1525:       assertFalse(node2.isNE());
1526:       assertFalse(node2.isNull());
1527:       assertFalse(node2.isTrue());
1528:       assertFalse(node2.isVoid());
1529:       assertFalse(node2.isDelProp());
1530:       assertFalse(node2.isName());
1531:       assertFalse(node2.isIn());
1532:       assertFalse(node2.isReturn());
1533:       assertFalse(node2.isContinue());
1534:       assertFalse(node2.isTypeOf());
1535:       assertFalse(node2.isDec());
1536:       assertFalse(node2.isString());
1537:       assertFalse(node2.hasChildren());
1538:       assertFalse(node2.isInc());
1539:       assertFalse(node2.isWhile());
1540:       assertFalse(node2.isCast());
1541:       assertFalse(node2.isFalse());
1542:       assertFalse(node2.isDebugger());
1543:       assertFalse(node2.isFunction());
1544:       assertEquals((-1), node2.getSourcePosition());
1545:       assertFalse(node2.isAnd());
1546:       
1547:       Iterable<Node> iterable0 = new ArrayDeque<Node>(30);
1548:       assertFalse(iterable0.contains(node0));
1549:       assertNotNull(iterable0);
1550:       
1551:       SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("8`QN", true);
1552:       assertNotNull(simpleSourceFile0);
1553:       assertEquals("8`QN", simpleSourceFile0.getName());
1554:       assertTrue(simpleSourceFile0.isExtern());
1555:       assertEquals("8`QN", simpleSourceFile0.toString());
1556:       
1557:       int int0 = simpleSourceFile0.getLineOffset(2);
1558:       assertEquals(Integer.MIN_VALUE, int0);
1559:       assertEquals("8`QN", simpleSourceFile0.getName());
1560:       assertTrue(simpleSourceFile0.isExtern());
1561:       assertEquals("8`QN", simpleSourceFile0.toString());
1562:       
1563:       node2.setStaticSourceFile(simpleSourceFile0);
1564:       assertNotSame(node2, node3);
1565:       assertNotSame(node2, node1);
1566:       assertEquals(55, Node.INFERRED_FUNCTION);
1567:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1568:       assertEquals(36, Node.QUOTED_PROP);
1569:       assertEquals(4095, Node.COLUMN_MASK);
1570:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1571:       assertEquals(43, Node.IS_CONSTANT_NAME);
1572:       assertEquals(48, Node.DIRECTIVES);
1573:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1574:       assertEquals(40, Node.ORIGINALNAME_PROP);
1575:       assertEquals(29, Node.JSDOC_INFO_PROP);
1576:       assertEquals(57, Node.REFLECTED_OBJECT);
1577:       assertEquals(47, Node.IS_DISPATCHER);
1578:       assertEquals(52, Node.LENGTH);
1579:       assertEquals(8, Node.FLAG_NO_THROWS);
1580:       assertEquals(2, Node.POST_FLAG);
1581:       assertEquals(53, Node.INPUT_ID);
1582:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1583:       assertEquals(39, Node.EMPTY_BLOCK);
1584:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1585:       assertEquals(57, Node.LAST_PROP);
1586:       assertEquals(1, Node.DECR_FLAG);
1587:       assertEquals(12, Node.COLUMN_BITS);
1588:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1589:       assertEquals(30, Node.VAR_ARGS_NAME);
1590:       assertEquals(46, Node.IS_NAMESPACE);
1591:       assertEquals(54, Node.SLASH_V);
1592:       assertEquals(56, Node.CHANGE_TIME);
1593:       assertEquals(37, Node.OPT_ARG_NAME);
1594:       assertEquals(49, Node.DIRECT_EVAL);
1595:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1596:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1597:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1598:       assertEquals(50, Node.FREE_CALL);
1599:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1600:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1601:       assertEquals(32, Node.INCRDECR_PROP);
1602:       assertEquals(0, jSTypeArray0.length);
1603:       assertFalse(node2.equals((Object)node3));
1604:       assertFalse(node2.equals((Object)node0));
1605:       assertFalse(node2.equals((Object)node1));
1606:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1607:       assertTrue(node2.isParamList());
1608:       assertFalse(node2.isInstanceOf());
1609:       assertFalse(node2.isComma());
1610:       assertFalse(node2.isWith());
1611:       assertFalse(node2.isNot());
1612:       assertFalse(node2.isObjectLit());
1613:       assertEquals(83, node2.getType());
1614:       assertFalse(node2.isThis());
1615:       assertFalse(node2.isScript());
1616:       assertFalse(node2.isGetProp());
1617:       assertFalse(node2.isThrow());
1618:       assertFalse(node2.isHook());
1619:       assertFalse(node2.isAssign());
1620:       assertFalse(node2.isBreak());
1621:       assertFalse(node2.isExprResult());
1622:       assertFalse(node2.isGetElem());
1623:       assertEquals((-1), node2.getLineno());
1624:       assertFalse(node2.isLabel());
1625:       assertFalse(node2.hasMoreThanOneChild());
1626:       assertFalse(node2.isOr());
1627:       assertFalse(node2.isNumber());
1628:       assertFalse(node2.isEmpty());
1629:       assertFalse(node2.isFor());
1630:       assertFalse(node2.isNew());
1631:       assertFalse(node2.isCase());
1632:       assertFalse(node2.isAssignAdd());
1633:       assertFalse(node2.isDo());
1634:       assertFalse(node2.hasOneChild());
1635:       assertFalse(node2.isArrayLit());
1636:       assertFalse(node2.isVar());
1637:       assertEquals((-1), node2.getCharno());
1638:       assertFalse(node2.isGetterDef());
1639:       assertFalse(node2.isStringKey());
1640:       assertFalse(node2.isSwitch());
1641:       assertFalse(node2.isLabelName());
1642:       assertFalse(node2.isCatch());
1643:       assertEquals(0, node2.getChildCount());
1644:       assertFalse(node2.isDefaultCase());
1645:       assertFalse(node2.isSetterDef());
1646:       assertFalse(node2.isTry());
1647:       assertFalse(node2.isAdd());
1648:       assertFalse(node2.isCall());
1649:       assertFalse(node2.isBlock());
1650:       assertFalse(node2.isRegExp());
1651:       assertFalse(node2.isIf());
1652:       assertFalse(node2.isNE());
1653:       assertFalse(node2.isNull());
1654:       assertFalse(node2.isTrue());
1655:       assertFalse(node2.isVoid());
1656:       assertFalse(node2.isDelProp());
1657:       assertFalse(node2.isName());
1658:       assertFalse(node2.isIn());
1659:       assertFalse(node2.isReturn());
1660:       assertFalse(node2.isContinue());
1661:       assertFalse(node2.isTypeOf());
1662:       assertFalse(node2.isDec());
1663:       assertFalse(node2.isString());
1664:       assertFalse(node2.hasChildren());
1665:       assertFalse(node2.isInc());
1666:       assertFalse(node2.isWhile());
1667:       assertFalse(node2.isCast());
1668:       assertFalse(node2.isFalse());
1669:       assertFalse(node2.isDebugger());
1670:       assertFalse(node2.isFunction());
1671:       assertEquals((-1), node2.getSourcePosition());
1672:       assertFalse(node2.isAnd());
1673:       assertEquals("8`QN", simpleSourceFile0.getName());
1674:       assertTrue(simpleSourceFile0.isExtern());
1675:       assertEquals("8`QN", simpleSourceFile0.toString());
1676:       
1677:       boolean boolean5 = node2.isOnlyModifiesArgumentsCall();
1678:       assertFalse(boolean5);
1679:       assertNotSame(node2, node3);
1680:       assertNotSame(node2, node1);
1681:       assertEquals(55, Node.INFERRED_FUNCTION);
1682:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1683:       assertEquals(36, Node.QUOTED_PROP);
1684:       assertEquals(4095, Node.COLUMN_MASK);
1685:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1686:       assertEquals(43, Node.IS_CONSTANT_NAME);
1687:       assertEquals(48, Node.DIRECTIVES);
1688:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1689:       assertEquals(40, Node.ORIGINALNAME_PROP);
1690:       assertEquals(29, Node.JSDOC_INFO_PROP);
1691:       assertEquals(57, Node.REFLECTED_OBJECT);
1692:       assertEquals(47, Node.IS_DISPATCHER);
1693:       assertEquals(52, Node.LENGTH);
1694:       assertEquals(8, Node.FLAG_NO_THROWS);
1695:       assertEquals(2, Node.POST_FLAG);
1696:       assertEquals(53, Node.INPUT_ID);
1697:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1698:       assertEquals(39, Node.EMPTY_BLOCK);
1699:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1700:       assertEquals(57, Node.LAST_PROP);
1701:       assertEquals(1, Node.DECR_FLAG);
1702:       assertEquals(12, Node.COLUMN_BITS);
1703:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1704:       assertEquals(30, Node.VAR_ARGS_NAME);
1705:       assertEquals(46, Node.IS_NAMESPACE);
1706:       assertEquals(54, Node.SLASH_V);
1707:       assertEquals(56, Node.CHANGE_TIME);
1708:       assertEquals(37, Node.OPT_ARG_NAME);
1709:       assertEquals(49, Node.DIRECT_EVAL);
1710:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1711:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1712:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1713:       assertEquals(50, Node.FREE_CALL);
1714:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1715:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1716:       assertEquals(32, Node.INCRDECR_PROP);
1717:       assertEquals(0, jSTypeArray0.length);
1718:       assertTrue(boolean5 == boolean4);
1719:       assertTrue(boolean5 == boolean3);
1720:       assertTrue(boolean5 == boolean1);
1721:       assertTrue(boolean5 == boolean2);
1722:       assertTrue(boolean5 == boolean0);
1723:       assertFalse(node2.equals((Object)node3));
1724:       assertFalse(node2.equals((Object)node0));
1725:       assertFalse(node2.equals((Object)node1));
1726:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1727:       assertTrue(node2.isParamList());
1728:       assertFalse(node2.isInstanceOf());
1729:       assertFalse(node2.isComma());
1730:       assertFalse(node2.isWith());
1731:       assertFalse(node2.isNot());
1732:       assertFalse(node2.isObjectLit());
1733:       assertEquals(83, node2.getType());
1734:       assertFalse(node2.isThis());
1735:       assertFalse(node2.isScript());
1736:       assertFalse(node2.isGetProp());
1737:       assertFalse(node2.isThrow());
1738:       assertFalse(node2.isHook());
1739:       assertFalse(node2.isAssign());
1740:       assertFalse(node2.isBreak());
1741:       assertFalse(node2.isExprResult());
1742:       assertFalse(node2.isGetElem());
1743:       assertEquals((-1), node2.getLineno());
1744:       assertFalse(node2.isLabel());
1745:       assertFalse(node2.hasMoreThanOneChild());
1746:       assertFalse(node2.isOr());
1747:       assertFalse(node2.isNumber());
1748:       assertFalse(node2.isEmpty());
1749:       assertFalse(node2.isFor());
1750:       assertFalse(node2.isNew());
1751:       assertFalse(node2.isCase());
1752:       assertFalse(node2.isAssignAdd());
1753:       assertFalse(node2.isDo());
1754:       assertFalse(node2.hasOneChild());
1755:       assertFalse(node2.isArrayLit());
1756:       assertFalse(node2.isVar());
1757:       assertEquals((-1), node2.getCharno());
1758:       assertFalse(node2.isGetterDef());
1759:       assertFalse(node2.isStringKey());
1760:       assertFalse(node2.isSwitch());
1761:       assertFalse(node2.isLabelName());
1762:       assertFalse(node2.isCatch());
1763:       assertEquals(0, node2.getChildCount());
1764:       assertFalse(node2.isDefaultCase());
1765:       assertFalse(node2.isSetterDef());
1766:       assertFalse(node2.isTry());
1767:       assertFalse(node2.isAdd());
1768:       assertFalse(node2.isCall());
1769:       assertFalse(node2.isBlock());
1770:       assertFalse(node2.isRegExp());
1771:       assertFalse(node2.isIf());
1772:       assertFalse(node2.isNE());
1773:       assertFalse(node2.isNull());
1774:       assertFalse(node2.isTrue());
1775:       assertFalse(node2.isVoid());
1776:       assertFalse(node2.isDelProp());
1777:       assertFalse(node2.isName());
1778:       assertFalse(node2.isIn());
1779:       assertFalse(node2.isReturn());
1780:       assertFalse(node2.isContinue());
1781:       assertFalse(node2.isTypeOf());
1782:       assertFalse(node2.isDec());
1783:       assertFalse(node2.isString());
1784:       assertFalse(node2.hasChildren());
1785:       assertFalse(node2.isInc());
1786:       assertFalse(node2.isWhile());
1787:       assertFalse(node2.isCast());
1788:       assertFalse(node2.isFalse());
1789:       assertFalse(node2.isDebugger());
1790:       assertFalse(node2.isFunction());
1791:       assertEquals((-1), node2.getSourcePosition());
1792:       assertFalse(node2.isAnd());
1793:       
1794:       boolean boolean6 = node1.isObjectLit();
1795:       assertFalse(boolean6);
1796:       assertNotSame(node1, node2);
1797:       assertSame(node1, node3);
1798:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1799:       assertEquals(8, Node.FLAG_NO_THROWS);
1800:       assertEquals(39, Node.EMPTY_BLOCK);
1801:       assertEquals(48, Node.DIRECTIVES);
1802:       assertEquals(4095, Node.COLUMN_MASK);
1803:       assertEquals(40, Node.ORIGINALNAME_PROP);
1804:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1805:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1806:       assertEquals(36, Node.QUOTED_PROP);
1807:       assertEquals(57, Node.LAST_PROP);
1808:       assertEquals(30, Node.VAR_ARGS_NAME);
1809:       assertEquals(57, Node.REFLECTED_OBJECT);
1810:       assertEquals(55, Node.INFERRED_FUNCTION);
1811:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1812:       assertEquals(52, Node.LENGTH);
1813:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1814:       assertEquals(29, Node.JSDOC_INFO_PROP);
1815:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1816:       assertEquals(53, Node.INPUT_ID);
1817:       assertEquals(2, Node.POST_FLAG);
1818:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1819:       assertEquals(37, Node.OPT_ARG_NAME);
1820:       assertEquals(56, Node.CHANGE_TIME);
1821:       assertEquals(47, Node.IS_DISPATCHER);
1822:       assertEquals(12, Node.COLUMN_BITS);
1823:       assertEquals(46, Node.IS_NAMESPACE);
1824:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1825:       assertEquals(49, Node.DIRECT_EVAL);
1826:       assertEquals(43, Node.IS_CONSTANT_NAME);
1827:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1828:       assertEquals(54, Node.SLASH_V);
1829:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1830:       assertEquals(1, Node.DECR_FLAG);
1831:       assertEquals(32, Node.INCRDECR_PROP);
1832:       assertEquals(50, Node.FREE_CALL);
1833:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1834:       assertTrue(boolean6 == boolean3);
1835:       assertTrue(boolean6 == boolean1);
1836:       assertTrue(boolean6 == boolean0);
1837:       assertTrue(boolean6 == boolean2);
1838:       assertTrue(boolean6 == boolean5);
1839:       assertTrue(boolean6 == boolean4);
1840:       assertFalse(node1.equals((Object)node2));
1841:       assertFalse(node1.equals((Object)node0));
1842:       assertFalse(node1.isFalse());
1843:       assertFalse(node1.isComma());
1844:       assertFalse(node1.isThis());
1845:       assertFalse(node1.isHook());
1846:       assertFalse(node1.isThrow());
1847:       assertFalse(node1.isGetProp());
1848:       assertFalse(node1.isInc());
1849:       assertFalse(node1.isWith());
1850:       assertFalse(node1.isCase());
1851:       assertFalse(node1.isBreak());
1852:       assertFalse(node1.isInstanceOf());
1853:       assertFalse(node1.isExprResult());
1854:       assertFalse(node1.isGetElem());
1855:       assertFalse(node1.isAssign());
1856:       assertFalse(node1.isIf());
1857:       assertFalse(node1.isDec());
1858:       assertFalse(node1.isTypeOf());
1859:       assertFalse(node1.isNE());
1860:       assertEquals((-1), node1.getSourcePosition());
1861:       assertFalse(node1.hasChildren());
1862:       assertTrue(node1.isNumber());
1863:       assertFalse(node1.isIn());
1864:       assertFalse(node1.isNot());
1865:       assertFalse(node1.isString());
1866:       assertFalse(node1.isObjectLit());
1867:       assertFalse(node1.isAnd());
1868:       assertFalse(node1.isDebugger());
1869:       assertFalse(node1.isFunction());
1870:       assertFalse(node1.isCast());
1871:       assertFalse(node1.isContinue());
1872:       assertFalse(node1.isName());
1873:       assertFalse(node1.isVar());
1874:       assertFalse(node1.isParamList());
1875:       assertFalse(node1.isStringKey());
1876:       assertFalse(node1.isNull());
1877:       assertFalse(node1.isNew());
1878:       assertFalse(node1.isSetterDef());
1879:       assertFalse(node1.isAdd());
1880:       assertEquals(39, node1.getType());
1881:       assertFalse(node1.isWhile());
1882:       assertFalse(node1.isRegExp());
1883:       assertFalse(node1.isTrue());
1884:       assertFalse(node1.isReturn());
1885:       assertFalse(node1.isBlock());
1886:       assertEquals((-1), node1.getLineno());
1887:       assertFalse(node1.isVoid());
1888:       assertFalse(node1.hasMoreThanOneChild());
1889:       assertFalse(node1.isCatch());
1890:       assertFalse(node1.isCall());
1891:       assertFalse(node1.isEmpty());
1892:       assertFalse(node1.isLabelName());
1893:       assertFalse(node1.isGetterDef());
1894:       assertFalse(node1.isDelProp());
1895:       assertFalse(node1.isFor());
1896:       assertFalse(node1.isTry());
1897:       assertFalse(node1.isAssignAdd());
1898:       assertFalse(node1.isOr());
1899:       assertFalse(node1.hasOneChild());
1900:       assertFalse(node1.isScript());
1901:       assertFalse(node1.isDo());
1902:       assertFalse(node1.isDefaultCase());
1903:       assertFalse(node1.isSwitch());
1904:       assertEquals((-1), node1.getCharno());
1905:       assertFalse(node1.isLabel());
1906:       assertEquals(0, node1.getChildCount());
1907:       assertFalse(node1.isArrayLit());
1908:       
1909:       boolean boolean7 = node2.isVar();
1910:       assertFalse(boolean7);
1911:       assertNotSame(node2, node3);
1912:       assertNotSame(node2, node1);
1913:       assertEquals(55, Node.INFERRED_FUNCTION);
1914:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1915:       assertEquals(36, Node.QUOTED_PROP);
1916:       assertEquals(4095, Node.COLUMN_MASK);
1917:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1918:       assertEquals(43, Node.IS_CONSTANT_NAME);
1919:       assertEquals(48, Node.DIRECTIVES);
1920:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1921:       assertEquals(40, Node.ORIGINALNAME_PROP);
1922:       assertEquals(29, Node.JSDOC_INFO_PROP);
1923:       assertEquals(57, Node.REFLECTED_OBJECT);
1924:       assertEquals(47, Node.IS_DISPATCHER);
1925:       assertEquals(52, Node.LENGTH);
1926:       assertEquals(8, Node.FLAG_NO_THROWS);
1927:       assertEquals(2, Node.POST_FLAG);
1928:       assertEquals(53, Node.INPUT_ID);
1929:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1930:       assertEquals(39, Node.EMPTY_BLOCK);
1931:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1932:       assertEquals(57, Node.LAST_PROP);
1933:       assertEquals(1, Node.DECR_FLAG);
1934:       assertEquals(12, Node.COLUMN_BITS);
1935:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1936:       assertEquals(30, Node.VAR_ARGS_NAME);
1937:       assertEquals(46, Node.IS_NAMESPACE);
1938:       assertEquals(54, Node.SLASH_V);
1939:       assertEquals(56, Node.CHANGE_TIME);
1940:       assertEquals(37, Node.OPT_ARG_NAME);
1941:       assertEquals(49, Node.DIRECT_EVAL);
1942:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1943:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1944:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1945:       assertEquals(50, Node.FREE_CALL);
1946:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1947:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1948:       assertEquals(32, Node.INCRDECR_PROP);
1949:       assertEquals(0, jSTypeArray0.length);
1950:       assertTrue(boolean7 == boolean6);
1951:       assertTrue(boolean7 == boolean3);
1952:       assertTrue(boolean7 == boolean0);
1953:       assertTrue(boolean7 == boolean2);
1954:       assertTrue(boolean7 == boolean1);
1955:       assertTrue(boolean7 == boolean4);
1956:       assertTrue(boolean7 == boolean5);
1957:       assertFalse(node2.equals((Object)node3));
1958:       assertFalse(node2.equals((Object)node0));
1959:       assertFalse(node2.equals((Object)node1));
1960:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1961:       assertTrue(node2.isParamList());
1962:       assertFalse(node2.isInstanceOf());
1963:       assertFalse(node2.isComma());
1964:       assertFalse(node2.isWith());
1965:       assertFalse(node2.isNot());
1966:       assertFalse(node2.isObjectLit());
1967:       assertEquals(83, node2.getType());
1968:       assertFalse(node2.isThis());
1969:       assertFalse(node2.isScript());
1970:       assertFalse(node2.isGetProp());
1971:       assertFalse(node2.isThrow());
1972:       assertFalse(node2.isHook());
1973:       assertFalse(node2.isAssign());
1974:       assertFalse(node2.isBreak());
1975:       assertFalse(node2.isExprResult());
1976:       assertFalse(node2.isGetElem());
1977:       assertEquals((-1), node2.getLineno());
1978:       assertFalse(node2.isLabel());
1979:       assertFalse(node2.hasMoreThanOneChild());
1980:       assertFalse(node2.isOr());
1981:       assertFalse(node2.isNumber());
1982:       assertFalse(node2.isEmpty());
1983:       assertFalse(node2.isFor());
1984:       assertFalse(node2.isNew());
1985:       assertFalse(node2.isCase());
1986:       assertFalse(node2.isAssignAdd());
1987:       assertFalse(node2.isDo());
1988:       
1989:       node2.setIsSyntheticBlock(false);
1990:       assertNotSame(node2, node3);
1991:       assertNotSame(node2, node1);
1992:       assertEquals(55, Node.INFERRED_FUNCTION);
1993:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1994:       assertEquals(36, Node.QUOTED_PROP);
1995:       assertEquals(4095, Node.COLUMN_MASK);
1996:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1997:       assertEquals(43, Node.IS_CONSTANT_NAME);
1998:       assertEquals(48, Node.DIRECTIVES);
1999:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2000:       assertEquals(40, Node.ORIGINALNAME_PROP);
2001:       assertEquals(29, Node.JSDOC_INFO_PROP);
2002:       assertEquals(57, Node.REFLECTED_OBJECT);
2003:       assertEquals(47, Node.IS_DISPATCHER);
2004:       assertEquals(52, Node.LENGTH);
2005:       assertEquals(8, Node.FLAG_NO_THROWS);
2006:       assertEquals(2, Node.POST_FLAG);
2007:       assertEquals(53, Node.INPUT_ID);
2008:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2009:       assertEquals(39, Node.EMPTY_BLOCK);
2010:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2011:       assertEquals(57, Node.LAST_PROP);
2012:       assertEquals(1, Node.DECR_FLAG);
2013:       assertEquals(12, Node.COLUMN_BITS);
2014:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2015:       assertEquals(30, Node.VAR_ARGS_NAME);
2016:       assertEquals(46, Node.IS_NAMESPACE);
2017:       assertEquals(54, Node.SLASH_V);
2018:       assertEquals(56, Node.CHANGE_TIME);
2019:       assertEquals(37, Node.OPT_ARG_NAME);
2020:       assertEquals(49, Node.DIRECT_EVAL);
2021:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2022:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2023:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2024:       assertEquals(50, Node.FREE_CALL);
2025:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2026:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2027:       assertEquals(32, Node.INCRDECR_PROP);
2028:       assertEquals(0, jSTypeArray0.length);
2029:       assertFalse(node2.equals((Object)node3));
2030:       assertFalse(node2.equals((Object)node0));
2031:       assertFalse(node2.equals((Object)node1));
2032:       
2033:       boolean boolean8 = node0.isVarArgs();
2034:       assertFalse(boolean8);
2035:       assertEquals(57, Node.REFLECTED_OBJECT);
2036:       assertEquals(52, Node.LENGTH);
2037:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2038:       assertEquals(50, Node.FREE_CALL);
2039:       assertEquals(54, Node.SLASH_V);
2040:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2041:       assertEquals(48, Node.DIRECTIVES);
2042:       assertEquals(40, Node.ORIGINALNAME_PROP);
2043:       assertEquals(49, Node.DIRECT_EVAL);
2044:       assertEquals(12, Node.COLUMN_BITS);
2045:       assertEquals(32, Node.INCRDECR_PROP);
2046:       assertEquals(46, Node.IS_NAMESPACE);
2047:       assertEquals(4095, Node.COLUMN_MASK);
2048:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2049:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2050:       assertEquals(1, Node.DECR_FLAG);
2051:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2052:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2053:       assertEquals(36, Node.QUOTED_PROP);
2054:       assertEquals(56, Node.CHANGE_TIME);
2055:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2056:       assertEquals(43, Node.IS_CONSTANT_NAME);
2057:       assertEquals(37, Node.OPT_ARG_NAME);
2058:       assertEquals(55, Node.INFERRED_FUNCTION);
2059:       assertEquals(2, Node.POST_FLAG);
2060:       assertEquals(30, Node.VAR_ARGS_NAME);
2061:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2062:       assertEquals(57, Node.LAST_PROP);
2063:       assertEquals(47, Node.IS_DISPATCHER);
2064:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2065:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2066:       assertEquals(8, Node.FLAG_NO_THROWS);
2067:       assertEquals(29, Node.JSDOC_INFO_PROP);
2068:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2069:       assertEquals(53, Node.INPUT_ID);
2070:       assertEquals(39, Node.EMPTY_BLOCK);
2071:       assertFalse(node0.equals((Object)node3));
2072:       assertFalse(node0.equals((Object)node2));
2073:       assertFalse(node0.equals((Object)node1));
2074:       assertTrue(boolean8 == boolean2);
2075:       assertTrue(boolean8 == boolean7);
2076:       assertTrue(boolean8 == boolean0);
2077:       assertTrue(boolean8 == boolean4);
2078:       assertTrue(boolean8 == boolean6);
2079:       assertTrue(boolean8 == boolean3);
2080:       assertTrue(boolean8 == boolean1);
2081:       assertTrue(boolean8 == boolean5);
2082:       
2083:       boolean boolean9 = node2.isNoSideEffectsCall();
2084:       assertFalse(boolean9);
2085:       assertNotSame(node2, node3);
2086:       assertNotSame(node2, node1);
2087:       assertEquals(55, Node.INFERRED_FUNCTION);
2088:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2089:       assertEquals(36, Node.QUOTED_PROP);
2090:       assertEquals(4095, Node.COLUMN_MASK);
2091:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2092:       assertEquals(43, Node.IS_CONSTANT_NAME);
2093:       assertEquals(48, Node.DIRECTIVES);
2094:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2095:       assertEquals(40, Node.ORIGINALNAME_PROP);
2096:       assertEquals(29, Node.JSDOC_INFO_PROP);
2097:       assertEquals(57, Node.REFLECTED_OBJECT);
2098:       assertEquals(47, Node.IS_DISPATCHER);
2099:       assertEquals(52, Node.LENGTH);
2100:       assertEquals(8, Node.FLAG_NO_THROWS);
2101:       assertEquals(2, Node.POST_FLAG);
2102:       assertEquals(53, Node.INPUT_ID);
2103:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2104:       assertEquals(39, Node.EMPTY_BLOCK);
2105:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2106:       assertEquals(57, Node.LAST_PROP);
2107:       assertEquals(1, Node.DECR_FLAG);
2108:       assertEquals(12, Node.COLUMN_BITS);
2109:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2110:       assertEquals(30, Node.VAR_ARGS_NAME);
2111:       assertEquals(46, Node.IS_NAMESPACE);
2112:       assertEquals(54, Node.SLASH_V);
2113:       assertEquals(56, Node.CHANGE_TIME);
2114:       assertEquals(37, Node.OPT_ARG_NAME);
2115:       assertEquals(49, Node.DIRECT_EVAL);
2116:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2117:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2118:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2119:       assertEquals(50, Node.FREE_CALL);
2120:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2121:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2122:       assertEquals(32, Node.INCRDECR_PROP);
2123:       assertEquals(0, jSTypeArray0.length);
2124:       assertTrue(boolean9 == boolean2);
2125:       assertTrue(boolean9 == boolean0);
2126:       assertTrue(boolean9 == boolean1);
2127:       assertTrue(boolean9 == boolean5);
2128:       assertTrue(boolean9 == boolean8);
2129:       assertTrue(boolean9 == boolean4);
2130:       assertTrue(boolean9 == boolean6);
2131:       assertTrue(boolean9 == boolean3);
2132:       assertTrue(boolean9 == boolean7);
2133:       assertFalse(node2.equals((Object)node3));
2134:       assertFalse(node2.equals((Object)node0));
2135:       assertFalse(node2.equals((Object)node1));
2136:       
2137:       Node node4 = new Node(16);
2138:       assertEquals(40, Node.ORIGINALNAME_PROP);
2139:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2140:       assertEquals(52, Node.LENGTH);
2141:       assertEquals(57, Node.REFLECTED_OBJECT);
2142:       assertEquals(50, Node.FREE_CALL);
2143:       assertEquals(54, Node.SLASH_V);
2144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2145:       assertEquals(49, Node.DIRECT_EVAL);
2146:       assertEquals(48, Node.DIRECTIVES);
2147:       assertEquals(12, Node.COLUMN_BITS);
2148:       assertEquals(4095, Node.COLUMN_MASK);
2149:       assertEquals(46, Node.IS_NAMESPACE);
2150:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2151:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2152:       assertEquals(32, Node.INCRDECR_PROP);
2153:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2154:       assertEquals(1, Node.DECR_FLAG);
2155:       assertEquals(29, Node.JSDOC_INFO_PROP);
2156:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2158:       assertEquals(47, Node.IS_DISPATCHER);
2159:       assertEquals(2, Node.POST_FLAG);
2160:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2161:       assertEquals(37, Node.OPT_ARG_NAME);
2162:       assertEquals(43, Node.IS_CONSTANT_NAME);
2163:       assertEquals(56, Node.CHANGE_TIME);
2164:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2165:       assertEquals(55, Node.INFERRED_FUNCTION);
2166:       assertEquals(36, Node.QUOTED_PROP);
2167:       assertEquals(30, Node.VAR_ARGS_NAME);
2168:       assertEquals(8, Node.FLAG_NO_THROWS);
2169:       assertEquals(39, Node.EMPTY_BLOCK);
2170:       assertEquals(53, Node.INPUT_ID);
2171:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2172:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2173:       assertEquals(57, Node.LAST_PROP);
2174:       assertNotNull(node4);
2175:       assertFalse(node4.equals((Object)node1));
2176:       assertFalse(node4.equals((Object)node2));
2177:       assertFalse(node4.equals((Object)node3));
2178:       assertFalse(node4.equals((Object)node0));
2179:       
2180:       boolean boolean10 = node4.mayMutateGlobalStateOrThrow();
2181:       assertTrue(boolean10);
2182:       assertNotSame(node4, node1);
2183:       assertNotSame(node4, node2);
2184:       assertNotSame(node4, node3);
2185:       assertEquals(40, Node.ORIGINALNAME_PROP);
2186:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2187:       assertEquals(52, Node.LENGTH);
2188:       assertEquals(57, Node.REFLECTED_OBJECT);
2189:       assertEquals(50, Node.FREE_CALL);
2190:       assertEquals(54, Node.SLASH_V);
2191:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2192:       assertEquals(49, Node.DIRECT_EVAL);
2193:       assertEquals(48, Node.DIRECTIVES);
2194:       assertEquals(12, Node.COLUMN_BITS);
2195:       assertEquals(4095, Node.COLUMN_MASK);
2196:       assertEquals(46, Node.IS_NAMESPACE);
2197:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2198:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2199:       assertEquals(32, Node.INCRDECR_PROP);
2200:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2201:       assertEquals(1, Node.DECR_FLAG);
2202:       assertEquals(29, Node.JSDOC_INFO_PROP);
2203:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2204:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2205:       assertEquals(47, Node.IS_DISPATCHER);
2206:       assertEquals(2, Node.POST_FLAG);
2207:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2208:       assertEquals(37, Node.OPT_ARG_NAME);
2209:       assertEquals(43, Node.IS_CONSTANT_NAME);
2210:       assertEquals(56, Node.CHANGE_TIME);
2211:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2212:       assertEquals(55, Node.INFERRED_FUNCTION);
2213:       assertEquals(36, Node.QUOTED_PROP);
2214:       assertEquals(30, Node.VAR_ARGS_NAME);
2215:       assertEquals(8, Node.FLAG_NO_THROWS);
2216:       assertEquals(39, Node.EMPTY_BLOCK);
2217:       assertEquals(53, Node.INPUT_ID);
2218:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2219:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2220:       assertEquals(57, Node.LAST_PROP);
2221:       assertFalse(node4.equals((Object)node1));
2222:       assertFalse(node4.equals((Object)node2));
2223:       assertFalse(node4.equals((Object)node3));
2224:       assertFalse(node4.equals((Object)node0));
2225:       assertFalse(boolean10 == boolean2);
2226:       assertFalse(boolean10 == boolean9);
2227:       assertFalse(boolean10 == boolean7);
2228:       assertFalse(boolean10 == boolean1);
2229:       assertFalse(boolean10 == boolean5);
2230:       assertFalse(boolean10 == boolean4);
2231:       assertFalse(boolean10 == boolean6);
2232:       assertFalse(boolean10 == boolean3);
2233:       assertFalse(boolean10 == boolean8);
2234:       assertFalse(boolean10 == boolean0);
2235:       
2236:       node1.setChangeTime(16);
2237:       assertNotSame(node1, node2);
2238:       assertNotSame(node1, node4);
2239:       assertSame(node1, node3);
2240:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2241:       assertEquals(8, Node.FLAG_NO_THROWS);
2242:       assertEquals(39, Node.EMPTY_BLOCK);
2243:       assertEquals(48, Node.DIRECTIVES);
2244:       assertEquals(4095, Node.COLUMN_MASK);
2245:       assertEquals(40, Node.ORIGINALNAME_PROP);
2246:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2247:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2248:       assertEquals(36, Node.QUOTED_PROP);
2249:       assertEquals(57, Node.LAST_PROP);
2250:       assertEquals(30, Node.VAR_ARGS_NAME);
2251:       assertEquals(57, Node.REFLECTED_OBJECT);
2252:       assertEquals(55, Node.INFERRED_FUNCTION);
2253:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2254:       assertEquals(52, Node.LENGTH);
2255:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2256:       assertEquals(29, Node.JSDOC_INFO_PROP);
2257:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2258:       assertEquals(53, Node.INPUT_ID);
2259:       assertEquals(2, Node.POST_FLAG);
2260:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2261:       assertEquals(37, Node.OPT_ARG_NAME);
2262:       assertEquals(56, Node.CHANGE_TIME);
2263:       assertEquals(47, Node.IS_DISPATCHER);
2264:       assertEquals(12, Node.COLUMN_BITS);
2265:       assertEquals(46, Node.IS_NAMESPACE);
2266:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2267:       assertEquals(49, Node.DIRECT_EVAL);
2268:       assertEquals(43, Node.IS_CONSTANT_NAME);
2269:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2270:       assertEquals(54, Node.SLASH_V);
2271:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2272:       assertEquals(1, Node.DECR_FLAG);
2273:       assertEquals(32, Node.INCRDECR_PROP);
2274:       assertEquals(50, Node.FREE_CALL);
2275:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2276:       assertFalse(node1.equals((Object)node2));
2277:       assertFalse(node1.equals((Object)node4));
2278:       assertFalse(node1.equals((Object)node0));
2279:       
2280:       boolean boolean11 = node1.isNull();
2281:       assertFalse(boolean11);
2282:       assertNotSame(node1, node2);
2283:       assertNotSame(node1, node4);
2284:       assertSame(node1, node3);
2285:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2286:       assertEquals(8, Node.FLAG_NO_THROWS);
2287:       assertEquals(39, Node.EMPTY_BLOCK);
2288:       assertEquals(48, Node.DIRECTIVES);
2289:       assertEquals(4095, Node.COLUMN_MASK);
2290:       assertEquals(40, Node.ORIGINALNAME_PROP);
2291:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2292:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2293:       assertEquals(36, Node.QUOTED_PROP);
2294:       assertEquals(57, Node.LAST_PROP);
2295:       assertEquals(30, Node.VAR_ARGS_NAME);
2296:       assertEquals(57, Node.REFLECTED_OBJECT);
2297:       assertEquals(55, Node.INFERRED_FUNCTION);
2298:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2299:       assertEquals(52, Node.LENGTH);
2300:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2301:       assertEquals(29, Node.JSDOC_INFO_PROP);
2302:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2303:       assertEquals(53, Node.INPUT_ID);
2304:       assertEquals(2, Node.POST_FLAG);
2305:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2306:       assertEquals(37, Node.OPT_ARG_NAME);
2307:       assertEquals(56, Node.CHANGE_TIME);
2308:       assertEquals(47, Node.IS_DISPATCHER);
2309:       assertEquals(12, Node.COLUMN_BITS);
2310:       assertEquals(46, Node.IS_NAMESPACE);
2311:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2312:       assertEquals(49, Node.DIRECT_EVAL);
2313:       assertEquals(43, Node.IS_CONSTANT_NAME);
2314:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2315:       assertEquals(54, Node.SLASH_V);
2316:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2317:       assertEquals(1, Node.DECR_FLAG);
2318:       assertEquals(32, Node.INCRDECR_PROP);
2319:       assertEquals(50, Node.FREE_CALL);
2320:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2321:       assertFalse(node1.equals((Object)node2));
2322:       assertFalse(node1.equals((Object)node4));
2323:       assertFalse(node1.equals((Object)node0));
2324:       assertTrue(boolean11 == boolean0);
2325:       assertTrue(boolean11 == boolean9);
2326:       assertTrue(boolean11 == boolean2);
2327:       assertTrue(boolean11 == boolean7);
2328:       assertFalse(boolean11 == boolean10);
2329:       assertTrue(boolean11 == boolean3);
2330:       assertTrue(boolean11 == boolean6);
2331:       assertTrue(boolean11 == boolean1);
2332:       assertTrue(boolean11 == boolean4);
2333:       assertTrue(boolean11 == boolean5);
2334:       assertTrue(boolean11 == boolean8);
2335:       
2336:       boolean boolean12 = node2.isNot();
2337:       assertFalse(boolean12);
2338:       assertNotSame(node2, node4);
2339:       assertNotSame(node2, node3);
2340:       assertNotSame(node2, node1);
2341:       assertEquals(55, Node.INFERRED_FUNCTION);
2342:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2343:       assertEquals(36, Node.QUOTED_PROP);
2344:       assertEquals(4095, Node.COLUMN_MASK);
2345:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2346:       assertEquals(43, Node.IS_CONSTANT_NAME);
2347:       assertEquals(48, Node.DIRECTIVES);
2348:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2349:       assertEquals(40, Node.ORIGINALNAME_PROP);
2350:       assertEquals(29, Node.JSDOC_INFO_PROP);
2351:       assertEquals(57, Node.REFLECTED_OBJECT);
2352:       assertEquals(47, Node.IS_DISPATCHER);
2353:       assertEquals(52, Node.LENGTH);
2354:       assertEquals(8, Node.FLAG_NO_THROWS);
2355:       assertEquals(2, Node.POST_FLAG);
2356:       assertEquals(53, Node.INPUT_ID);
2357:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2358:       assertEquals(39, Node.EMPTY_BLOCK);
2359:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2360:       assertEquals(57, Node.LAST_PROP);
2361:       assertEquals(1, Node.DECR_FLAG);
2362:       assertEquals(12, Node.COLUMN_BITS);
2363:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2364:       assertEquals(30, Node.VAR_ARGS_NAME);
2365:       assertEquals(46, Node.IS_NAMESPACE);
2366:       assertEquals(54, Node.SLASH_V);
2367:       assertEquals(56, Node.CHANGE_TIME);
2368:       assertEquals(37, Node.OPT_ARG_NAME);
2369:       assertEquals(49, Node.DIRECT_EVAL);
2370:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2371:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2372:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2373:       assertEquals(50, Node.FREE_CALL);
2374:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2375:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2376:       assertEquals(32, Node.INCRDECR_PROP);
2377:       assertEquals(0, jSTypeArray0.length);
2378:       assertFalse(node2.equals((Object)node4));
2379:       assertFalse(node2.equals((Object)node3));
2380:       assertFalse(node2.equals((Object)node0));
2381:       assertFalse(node2.equals((Object)node1));
2382:       assertTrue(boolean12 == boolean8);
2383:       assertTrue(boolean12 == boolean0);
2384:       assertTrue(boolean12 == boolean2);
2385:       assertTrue(boolean12 == boolean6);
2386:       assertTrue(boolean12 == boolean4);
2387:       assertTrue(boolean12 == boolean11);
2388:       assertTrue(boolean12 == boolean5);
2389:       assertTrue(boolean12 == boolean1);
2390:       assertTrue(boolean12 == boolean3);
2391:       assertTrue(boolean12 == boolean7);
2392:       assertFalse(boolean12 == boolean10);
2393:       assertTrue(boolean12 == boolean9);
2394:       
2395:       Set<String> set0 = node4.getDirectives();
2396:       assertNotSame(node4, node1);
2397:       assertNotSame(node4, node2);
2398:       assertNotSame(node4, node3);
2399:       assertEquals(40, Node.ORIGINALNAME_PROP);
2400:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2401:       assertEquals(52, Node.LENGTH);
2402:       assertEquals(57, Node.REFLECTED_OBJECT);
2403:       assertEquals(50, Node.FREE_CALL);
2404:       assertEquals(54, Node.SLASH_V);
2405:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2406:       assertEquals(49, Node.DIRECT_EVAL);
2407:       assertEquals(48, Node.DIRECTIVES);
2408:       assertEquals(12, Node.COLUMN_BITS);
2409:       assertEquals(4095, Node.COLUMN_MASK);
2410:       assertEquals(46, Node.IS_NAMESPACE);
2411:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2412:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2413:       assertEquals(32, Node.INCRDECR_PROP);
2414:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2415:       assertEquals(1, Node.DECR_FLAG);
2416:       assertEquals(29, Node.JSDOC_INFO_PROP);
2417:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2418:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2419:       assertEquals(47, Node.IS_DISPATCHER);
2420:       assertEquals(2, Node.POST_FLAG);
2421:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2422:       assertEquals(37, Node.OPT_ARG_NAME);
2423:       assertEquals(43, Node.IS_CONSTANT_NAME);
2424:       assertEquals(56, Node.CHANGE_TIME);
2425:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2426:       assertEquals(55, Node.INFERRED_FUNCTION);
2427:       assertEquals(36, Node.QUOTED_PROP);
2428:       assertEquals(30, Node.VAR_ARGS_NAME);
2429:       assertEquals(8, Node.FLAG_NO_THROWS);
2430:       assertEquals(39, Node.EMPTY_BLOCK);
2431:       assertEquals(53, Node.INPUT_ID);
2432:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2433:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2434:       assertEquals(57, Node.LAST_PROP);
2435:       assertNull(set0);
2436:       assertFalse(node4.equals((Object)node1));
2437:       assertFalse(node4.equals((Object)node2));
2438:       assertFalse(node4.equals((Object)node3));
2439:       assertFalse(node4.equals((Object)node0));
2440:       
2441:       boolean boolean13 = node0.isTypeOf();
2442:       assertFalse(boolean13);
2443:       assertEquals(57, Node.REFLECTED_OBJECT);
2444:       assertEquals(52, Node.LENGTH);
2445:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2446:       assertEquals(50, Node.FREE_CALL);
2447:       assertEquals(54, Node.SLASH_V);
2448:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2449:       assertEquals(48, Node.DIRECTIVES);
2450:       assertEquals(40, Node.ORIGINALNAME_PROP);
2451:       assertEquals(49, Node.DIRECT_EVAL);
2452:       assertEquals(12, Node.COLUMN_BITS);
2453:       assertEquals(32, Node.INCRDECR_PROP);
2454:       assertEquals(46, Node.IS_NAMESPACE);
2455:       assertEquals(4095, Node.COLUMN_MASK);
2456:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2457:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2458:       assertEquals(1, Node.DECR_FLAG);
2459:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2460:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2461:       assertEquals(36, Node.QUOTED_PROP);
2462:       assertEquals(56, Node.CHANGE_TIME);
2463:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2464:       assertEquals(43, Node.IS_CONSTANT_NAME);
2465:       assertEquals(37, Node.OPT_ARG_NAME);
2466:       assertEquals(55, Node.INFERRED_FUNCTION);
2467:       assertEquals(2, Node.POST_FLAG);
2468:       assertEquals(30, Node.VAR_ARGS_NAME);
2469:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2470:       assertEquals(57, Node.LAST_PROP);
2471:       assertEquals(47, Node.IS_DISPATCHER);
2472:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2473:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2474:       assertEquals(8, Node.FLAG_NO_THROWS);
2475:       assertEquals(29, Node.JSDOC_INFO_PROP);
2476:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2477:       assertEquals(53, Node.INPUT_ID);
2478:       assertEquals(39, Node.EMPTY_BLOCK);
2479:       assertFalse(node0.equals((Object)node4));
2480:       assertFalse(node0.equals((Object)node3));
2481:       assertFalse(node0.equals((Object)node2));
2482:       assertFalse(node0.equals((Object)node1));
2483:       assertTrue(boolean13 == boolean8);
2484:       assertTrue(boolean13 == boolean4);
2485:       assertTrue(boolean13 == boolean6);
2486:       assertTrue(boolean13 == boolean1);
2487:       assertFalse(boolean13 == boolean10);
2488:       assertTrue(boolean13 == boolean9);
2489:       assertTrue(boolean13 == boolean7);
2490:       assertTrue(boolean13 == boolean0);
2491:       assertTrue(boolean13 == boolean2);
2492:       assertTrue(boolean13 == boolean12);
2493:       assertTrue(boolean13 == boolean11);
2494:       assertTrue(boolean13 == boolean5);
2495:       assertTrue(boolean13 == boolean3);
2496:       
2497:       boolean boolean14 = node4.isNE();
2498:       assertFalse(boolean14);
2499:       assertNotSame(node4, node1);
2500:       assertNotSame(node4, node2);
2501:       assertNotSame(node4, node3);
2502:       assertEquals(40, Node.ORIGINALNAME_PROP);
2503:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2504:       assertEquals(52, Node.LENGTH);
2505:       assertEquals(57, Node.REFLECTED_OBJECT);
2506:       assertEquals(50, Node.FREE_CALL);
2507:       assertEquals(54, Node.SLASH_V);
2508:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2509:       assertEquals(49, Node.DIRECT_EVAL);
2510:       assertEquals(48, Node.DIRECTIVES);
2511:       assertEquals(12, Node.COLUMN_BITS);
2512:       assertEquals(4095, Node.COLUMN_MASK);
2513:       assertEquals(46, Node.IS_NAMESPACE);
2514:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2515:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2516:       assertEquals(32, Node.INCRDECR_PROP);
2517:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2518:       assertEquals(1, Node.DECR_FLAG);
2519:       assertEquals(29, Node.JSDOC_INFO_PROP);
2520:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2521:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2522:       assertEquals(47, Node.IS_DISPATCHER);
2523:       assertEquals(2, Node.POST_FLAG);
2524:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2525:       assertEquals(37, Node.OPT_ARG_NAME);
2526:       assertEquals(43, Node.IS_CONSTANT_NAME);
2527:       assertEquals(56, Node.CHANGE_TIME);
2528:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2529:       assertEquals(55, Node.INFERRED_FUNCTION);
2530:       assertEquals(36, Node.QUOTED_PROP);
2531:       assertEquals(30, Node.VAR_ARGS_NAME);
2532:       assertEquals(8, Node.FLAG_NO_THROWS);
2533:       assertEquals(39, Node.EMPTY_BLOCK);
2534:       assertEquals(53, Node.INPUT_ID);
2535:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2536:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2537:       assertEquals(57, Node.LAST_PROP);
2538:       assertFalse(node4.equals((Object)node1));
2539:       assertFalse(node4.equals((Object)node2));
2540:       assertFalse(node4.equals((Object)node3));
2541:       assertFalse(node4.equals((Object)node0));
2542:       assertTrue(boolean14 == boolean7);
2543:       assertTrue(boolean14 == boolean0);
2544:       assertTrue(boolean14 == boolean8);
2545:       assertTrue(boolean14 == boolean13);
2546:       assertTrue(boolean14 == boolean3);
2547:       assertTrue(boolean14 == boolean1);
2548:       assertTrue(boolean14 == boolean5);
2549:       assertTrue(boolean14 == boolean4);
2550:       assertTrue(boolean14 == boolean2);
2551:       assertTrue(boolean14 == boolean6);
2552:       assertTrue(boolean14 == boolean12);
2553:       assertTrue(boolean14 == boolean11);
2554:       assertFalse(boolean14 == boolean10);
2555:       assertTrue(boolean14 == boolean9);
2556:   }
2557: }
RegularFileObject[/tmp/EvoSuite_115_1628157523994/com/google/javascript/rhino/Node_115_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:44 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_115_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_115_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_115_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.JSTypeNative",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.JSType$TypePair",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.JSType$2",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
375:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
377:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
378:     );
379:   }
380: }

[MASTER] 09:58:44.646 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("8`QN");
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertNotNull(node0);
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertTrue(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());

boolean boolean0 = node0.isEmpty();
assertFalse(boolean0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertTrue(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());

boolean boolean1 = node0.isLocalResultCall();
assertFalse(boolean1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertTrue(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());

node0.detachChildren();
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertTrue(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());

Node node1 = new Node(39, 3053, 4095);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertEquals(12509183, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertEquals(3053, node1.getLineno());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isIf());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNE());
assertFalse(node1.hasChildren());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isVoid());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());

boolean boolean2 = node1.wasEmptyNode();
assertFalse(boolean2);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertEquals(12509183, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertEquals(3053, node1.getLineno());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isIf());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNE());
assertFalse(node1.hasChildren());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isVoid());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

JSType[] jSTypeArray0 = new JSType[0];
Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
assertNotSame(node2, node1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, jSTypeArray0.length);
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(node2.isParamList());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(83, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isAssign());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isString());
assertFalse(node2.hasChildren());
assertFalse(node2.isInc());
assertFalse(node2.isWhile());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());

boolean boolean3 = node2.isNoSideEffectsCall();
assertFalse(boolean3);
assertNotSame(node2, node1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, jSTypeArray0.length);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(node2.isParamList());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(83, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isAssign());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isString());
assertFalse(node2.hasChildren());
assertFalse(node2.isInc());
assertFalse(node2.isWhile());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());

Node node3 = node1.useSourceInfoFromForTree(node2);
assertNotSame(node1, node2);
assertSame(node1, node3);
assertNotSame(node2, node3);
assertNotSame(node2, node1);
assertNotSame(node3, node2);
assertSame(node3, node1);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, jSTypeArray0.length);
assertNotNull(node3);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isIf());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isVoid());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(node2.isParamList());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(83, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isAssign());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isString());
assertFalse(node2.hasChildren());
assertFalse(node2.isInc());
assertFalse(node2.isWhile());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.isVoid());
assertFalse(node3.isArrayLit());
assertFalse(node3.isGetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isFor());
assertFalse(node3.isTry());
assertTrue(node3.isNumber());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isWhile());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertFalse(node3.isNull());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isVar());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNew());
assertFalse(node3.isEmpty());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isScript());
assertFalse(node3.isWith());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertFalse(node3.isGetElem());
assertFalse(node3.isLabelName());
assertFalse(node3.isExprResult());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isReturn());
assertFalse(node3.hasChildren());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isHook());
assertFalse(node3.hasOneChild());
assertFalse(node3.isGetProp());
assertFalse(node3.isString());
assertFalse(node3.isBlock());
assertEquals(39, node3.getType());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isIn());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());

boolean boolean4 = node0.isEquivalentTo(node2);
assertFalse(boolean4);
assertNotSame(node2, node3);
assertNotSame(node2, node1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, jSTypeArray0.length);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertTrue(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(node2.isParamList());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(83, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isAssign());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isString());
assertFalse(node2.hasChildren());
assertFalse(node2.isInc());
assertFalse(node2.isWhile());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());

Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
assertNotSame(node2, node3);
assertNotSame(node2, node1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, jSTypeArray0.length);
assertNotNull(node_AncestorIterable0);
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(node2.isParamList());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(83, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isAssign());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isString());
assertFalse(node2.hasChildren());
assertFalse(node2.isInc());
assertFalse(node2.isWhile());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());

Iterable<Node> iterable0 = new ArrayDeque<Node>(30);
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);

SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("8`QN", true);
assertNotNull(simpleSourceFile0);
assertEquals("8`QN", simpleSourceFile0.getName());
assertTrue(simpleSourceFile0.isExtern());
assertEquals("8`QN", simpleSourceFile0.toString());

int int0 = simpleSourceFile0.getLineOffset(2);
assertEquals(Integer.MIN_VALUE, int0);
assertEquals("8`QN", simpleSourceFile0.getName());
assertTrue(simpleSourceFile0.isExtern());
assertEquals("8`QN", simpleSourceFile0.toString());

node2.setStaticSourceFile(simpleSourceFile0);
assertNotSame(node2, node3);
assertNotSame(node2, node1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, jSTypeArray0.length);
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(node2.isParamList());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(83, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isAssign());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isString());
assertFalse(node2.hasChildren());
assertFalse(node2.isInc());
assertFalse(node2.isWhile());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());
assertEquals("8`QN", simpleSourceFile0.getName());
assertTrue(simpleSourceFile0.isExtern());
assertEquals("8`QN", simpleSourceFile0.toString());

boolean boolean5 = node2.isOnlyModifiesArgumentsCall();
assertFalse(boolean5);
assertNotSame(node2, node3);
assertNotSame(node2, node1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, jSTypeArray0.length);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(node2.isParamList());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(83, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isAssign());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isString());
assertFalse(node2.hasChildren());
assertFalse(node2.isInc());
assertFalse(node2.isWhile());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());

boolean boolean6 = node1.isObjectLit();
assertFalse(boolean6);
assertNotSame(node1, node2);
assertSame(node1, node3);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean4);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isIf());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNE());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isVoid());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());

boolean boolean7 = node2.isVar();
assertFalse(boolean7);
assertNotSame(node2, node3);
assertNotSame(node2, node1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, jSTypeArray0.length);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean5);
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(node2.isParamList());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(83, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isAssign());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());

node2.setIsSyntheticBlock(false);
assertNotSame(node2, node3);
assertNotSame(node2, node1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, jSTypeArray0.length);
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

boolean boolean8 = node0.isVarArgs();
assertFalse(boolean8);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean8 == boolean2);
assertTrue(boolean8 == boolean7);
assertTrue(boolean8 == boolean0);
assertTrue(boolean8 == boolean4);
assertTrue(boolean8 == boolean6);
assertTrue(boolean8 == boolean3);
assertTrue(boolean8 == boolean1);
assertTrue(boolean8 == boolean5);

boolean boolean9 = node2.isNoSideEffectsCall();
assertFalse(boolean9);
assertNotSame(node2, node3);
assertNotSame(node2, node1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, jSTypeArray0.length);
assertTrue(boolean9 == boolean2);
assertTrue(boolean9 == boolean0);
assertTrue(boolean9 == boolean1);
assertTrue(boolean9 == boolean5);
assertTrue(boolean9 == boolean8);
assertTrue(boolean9 == boolean4);
assertTrue(boolean9 == boolean6);
assertTrue(boolean9 == boolean3);
assertTrue(boolean9 == boolean7);
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

Node node4 = new Node(16);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertNotNull(node4);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));

boolean boolean10 = node4.mayMutateGlobalStateOrThrow();
assertTrue(boolean10);
assertNotSame(node4, node1);
assertNotSame(node4, node2);
assertNotSame(node4, node3);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(boolean10 == boolean2);
assertFalse(boolean10 == boolean9);
assertFalse(boolean10 == boolean7);
assertFalse(boolean10 == boolean1);
assertFalse(boolean10 == boolean5);
assertFalse(boolean10 == boolean4);
assertFalse(boolean10 == boolean6);
assertFalse(boolean10 == boolean3);
assertFalse(boolean10 == boolean8);
assertFalse(boolean10 == boolean0);

node1.setChangeTime(16);
assertNotSame(node1, node2);
assertNotSame(node1, node4);
assertSame(node1, node3);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));

boolean boolean11 = node1.isNull();
assertFalse(boolean11);
assertNotSame(node1, node2);
assertNotSame(node1, node4);
assertSame(node1, node3);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean11 == boolean0);
assertTrue(boolean11 == boolean9);
assertTrue(boolean11 == boolean2);
assertTrue(boolean11 == boolean7);
assertFalse(boolean11 == boolean10);
assertTrue(boolean11 == boolean3);
assertTrue(boolean11 == boolean6);
assertTrue(boolean11 == boolean1);
assertTrue(boolean11 == boolean4);
assertTrue(boolean11 == boolean5);
assertTrue(boolean11 == boolean8);

boolean boolean12 = node2.isNot();
assertFalse(boolean12);
assertNotSame(node2, node4);
assertNotSame(node2, node3);
assertNotSame(node2, node1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, jSTypeArray0.length);
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean12 == boolean8);
assertTrue(boolean12 == boolean0);
assertTrue(boolean12 == boolean2);
assertTrue(boolean12 == boolean6);
assertTrue(boolean12 == boolean4);
assertTrue(boolean12 == boolean11);
assertTrue(boolean12 == boolean5);
assertTrue(boolean12 == boolean1);
assertTrue(boolean12 == boolean3);
assertTrue(boolean12 == boolean7);
assertFalse(boolean12 == boolean10);
assertTrue(boolean12 == boolean9);

Set<String> set0 = node4.getDirectives();
assertNotSame(node4, node1);
assertNotSame(node4, node2);
assertNotSame(node4, node3);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertNull(set0);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));

boolean boolean13 = node0.isTypeOf();
assertFalse(boolean13);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean13 == boolean8);
assertTrue(boolean13 == boolean4);
assertTrue(boolean13 == boolean6);
assertTrue(boolean13 == boolean1);
assertFalse(boolean13 == boolean10);
assertTrue(boolean13 == boolean9);
assertTrue(boolean13 == boolean7);
assertTrue(boolean13 == boolean0);
assertTrue(boolean13 == boolean2);
assertTrue(boolean13 == boolean12);
assertTrue(boolean13 == boolean11);
assertTrue(boolean13 == boolean5);
assertTrue(boolean13 == boolean3);

boolean boolean14 = node4.isNE();
assertFalse(boolean14);
assertNotSame(node4, node1);
assertNotSame(node4, node2);
assertNotSame(node4, node3);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertTrue(boolean14 == boolean7);
assertTrue(boolean14 == boolean0);
assertTrue(boolean14 == boolean8);
assertTrue(boolean14 == boolean13);
assertTrue(boolean14 == boolean3);
assertTrue(boolean14 == boolean1);
assertTrue(boolean14 == boolean5);
assertTrue(boolean14 == boolean4);
assertTrue(boolean14 == boolean2);
assertTrue(boolean14 == boolean6);
assertTrue(boolean14 == boolean12);
assertTrue(boolean14 == boolean11);
assertFalse(boolean14 == boolean10);
assertTrue(boolean14 == boolean9);


[MASTER] 09:58:45.488 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_119_1628157525081/com/google/javascript/rhino/Node_119_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_119_1628157525081/com/google/javascript/rhino/Node_119_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:45.488 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:45.488 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:45.490 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 766
[MASTER] 09:58:45.492 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_119_1628157525081/com/google/javascript/rhino/Node_119_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:45 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_119_tmp__ESTest extends Node_119_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(45);
22:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
23:       assertEquals(53, Node.INPUT_ID);
24:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
25:       assertEquals(43, Node.IS_CONSTANT_NAME);
26:       assertEquals(56, Node.CHANGE_TIME);
27:       assertEquals(36, Node.QUOTED_PROP);
28:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
29:       assertEquals(29, Node.JSDOC_INFO_PROP);
30:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
31:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
32:       assertEquals(32, Node.INCRDECR_PROP);
33:       assertEquals(12, Node.COLUMN_BITS);
34:       assertEquals(48, Node.DIRECTIVES);
35:       assertEquals(37, Node.OPT_ARG_NAME);
36:       assertEquals(1, Node.DECR_FLAG);
37:       assertEquals(49, Node.DIRECT_EVAL);
38:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
39:       assertEquals(4095, Node.COLUMN_MASK);
40:       assertEquals(40, Node.ORIGINALNAME_PROP);
41:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
42:       assertEquals(57, Node.REFLECTED_OBJECT);
43:       assertEquals(54, Node.SLASH_V);
44:       assertEquals(15, Node.NO_SIDE_EFFECTS);
45:       assertEquals(39, Node.EMPTY_BLOCK);
46:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
47:       assertEquals(50, Node.FREE_CALL);
48:       assertEquals(52, Node.LENGTH);
49:       assertEquals(8, Node.FLAG_NO_THROWS);
50:       assertEquals(46, Node.IS_NAMESPACE);
51:       assertEquals(51, Node.STATIC_SOURCE_FILE);
52:       assertEquals(55, Node.INFERRED_FUNCTION);
53:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
54:       assertEquals(57, Node.LAST_PROP);
55:       assertEquals(47, Node.IS_DISPATCHER);
56:       assertEquals(2, Node.POST_FLAG);
57:       assertEquals(30, Node.VAR_ARGS_NAME);
58:       assertNotNull(node0);
59:       assertFalse(node0.isVoid());
60:       assertFalse(node0.isDebugger());
61:       assertFalse(node0.isTrue());
62:       assertFalse(node0.isTry());
63:       assertFalse(node0.isDefaultCase());
64:       assertFalse(node0.isCatch());
65:       assertFalse(node0.isFor());
66:       assertFalse(node0.isArrayLit());
67:       assertEquals(0, node0.getChildCount());
68:       assertFalse(node0.isRegExp());
69:       assertFalse(node0.isFunction());
70:       assertFalse(node0.isParamList());
71:       assertEquals(45, node0.getType());
72:       assertFalse(node0.isStringKey());
73:       assertFalse(node0.isCase());
74:       assertFalse(node0.isGetterDef());
75:       assertFalse(node0.isString());
76:       assertFalse(node0.isInc());
77:       assertFalse(node0.isBlock());
78:       assertFalse(node0.isThrow());
79:       assertFalse(node0.isContinue());
80:       assertFalse(node0.isHook());
81:       assertFalse(node0.hasMoreThanOneChild());
82:       assertFalse(node0.isFalse());
83:       assertFalse(node0.isNE());
84:       assertFalse(node0.isSetterDef());
85:       assertFalse(node0.isIf());
86:       assertEquals((-1), node0.getLineno());
87:       assertFalse(node0.isIn());
88:       assertFalse(node0.isExprResult());
89:       assertFalse(node0.isScript());
90:       assertFalse(node0.hasOneChild());
91:       assertFalse(node0.isCast());
92:       assertFalse(node0.isGetElem());
93:       assertFalse(node0.hasChildren());
94:       assertFalse(node0.isDec());
95:       assertFalse(node0.isInstanceOf());
96:       assertFalse(node0.isTypeOf());
97:       assertFalse(node0.isAssign());
98:       assertFalse(node0.isWith());
99:       assertFalse(node0.isGetProp());
100:       assertFalse(node0.isComma());
101:       assertFalse(node0.isThis());
102:       assertFalse(node0.isReturn());
103:       assertFalse(node0.isLabelName());
104:       assertFalse(node0.isAnd());
105:       assertFalse(node0.isObjectLit());
106:       assertEquals((-1), node0.getSourcePosition());
107:       assertFalse(node0.isNot());
108:       assertFalse(node0.isNumber());
109:       assertEquals((-1), node0.getCharno());
110:       assertFalse(node0.isNew());
111:       assertFalse(node0.isAdd());
112:       assertFalse(node0.isWhile());
113:       assertFalse(node0.isDo());
114:       assertFalse(node0.isSwitch());
115:       assertFalse(node0.isCall());
116:       assertFalse(node0.isVar());
117:       assertFalse(node0.isNull());
118:       assertFalse(node0.isLabel());
119:       assertFalse(node0.isDelProp());
120:       assertFalse(node0.isBreak());
121:       assertFalse(node0.isAssignAdd());
122:       assertFalse(node0.isName());
123:       assertFalse(node0.isEmpty());
124:       assertFalse(node0.isOr());
125:       
126:       String string0 = node0.getQualifiedName();
127:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
128:       assertEquals(53, Node.INPUT_ID);
129:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
130:       assertEquals(43, Node.IS_CONSTANT_NAME);
131:       assertEquals(56, Node.CHANGE_TIME);
132:       assertEquals(36, Node.QUOTED_PROP);
133:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
134:       assertEquals(29, Node.JSDOC_INFO_PROP);
135:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
136:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
137:       assertEquals(32, Node.INCRDECR_PROP);
138:       assertEquals(12, Node.COLUMN_BITS);
139:       assertEquals(48, Node.DIRECTIVES);
140:       assertEquals(37, Node.OPT_ARG_NAME);
141:       assertEquals(1, Node.DECR_FLAG);
142:       assertEquals(49, Node.DIRECT_EVAL);
143:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
144:       assertEquals(4095, Node.COLUMN_MASK);
145:       assertEquals(40, Node.ORIGINALNAME_PROP);
146:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
147:       assertEquals(57, Node.REFLECTED_OBJECT);
148:       assertEquals(54, Node.SLASH_V);
149:       assertEquals(15, Node.NO_SIDE_EFFECTS);
150:       assertEquals(39, Node.EMPTY_BLOCK);
151:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
152:       assertEquals(50, Node.FREE_CALL);
153:       assertEquals(52, Node.LENGTH);
154:       assertEquals(8, Node.FLAG_NO_THROWS);
155:       assertEquals(46, Node.IS_NAMESPACE);
156:       assertEquals(51, Node.STATIC_SOURCE_FILE);
157:       assertEquals(55, Node.INFERRED_FUNCTION);
158:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
159:       assertEquals(57, Node.LAST_PROP);
160:       assertEquals(47, Node.IS_DISPATCHER);
161:       assertEquals(2, Node.POST_FLAG);
162:       assertEquals(30, Node.VAR_ARGS_NAME);
163:       assertNull(string0);
164:       assertFalse(node0.isVoid());
165:       assertFalse(node0.isDebugger());
166:       assertFalse(node0.isTrue());
167:       assertFalse(node0.isTry());
168:       assertFalse(node0.isDefaultCase());
169:       assertFalse(node0.isCatch());
170:       assertFalse(node0.isFor());
171:       assertFalse(node0.isArrayLit());
172:       assertEquals(0, node0.getChildCount());
173:       assertFalse(node0.isRegExp());
174:       assertFalse(node0.isFunction());
175:       assertFalse(node0.isParamList());
176:       assertEquals(45, node0.getType());
177:       assertFalse(node0.isStringKey());
178:       assertFalse(node0.isCase());
179:       assertFalse(node0.isGetterDef());
180:       assertFalse(node0.isString());
181:       assertFalse(node0.isInc());
182:       assertFalse(node0.isBlock());
183:       assertFalse(node0.isThrow());
184:       assertFalse(node0.isContinue());
185:       assertFalse(node0.isHook());
186:       assertFalse(node0.hasMoreThanOneChild());
187:       assertFalse(node0.isFalse());
188:       assertFalse(node0.isNE());
189:       assertFalse(node0.isSetterDef());
190:       assertFalse(node0.isIf());
191:       assertEquals((-1), node0.getLineno());
192:       assertFalse(node0.isIn());
193:       assertFalse(node0.isExprResult());
194:       assertFalse(node0.isScript());
195:       assertFalse(node0.hasOneChild());
196:       assertFalse(node0.isCast());
197:       assertFalse(node0.isGetElem());
198:       assertFalse(node0.hasChildren());
199:       assertFalse(node0.isDec());
200:       assertFalse(node0.isInstanceOf());
201:       assertFalse(node0.isTypeOf());
202:       assertFalse(node0.isAssign());
203:       assertFalse(node0.isWith());
204:       assertFalse(node0.isGetProp());
205:       assertFalse(node0.isComma());
206:       assertFalse(node0.isThis());
207:       assertFalse(node0.isReturn());
208:       assertFalse(node0.isLabelName());
209:       assertFalse(node0.isAnd());
210:       assertFalse(node0.isObjectLit());
211:       assertEquals((-1), node0.getSourcePosition());
212:       assertFalse(node0.isNot());
213:       assertFalse(node0.isNumber());
214:       assertEquals((-1), node0.getCharno());
215:       assertFalse(node0.isNew());
216:       assertFalse(node0.isAdd());
217:       assertFalse(node0.isWhile());
218:       assertFalse(node0.isDo());
219:       assertFalse(node0.isSwitch());
220:       assertFalse(node0.isCall());
221:       assertFalse(node0.isVar());
222:       assertFalse(node0.isNull());
223:       assertFalse(node0.isLabel());
224:       assertFalse(node0.isDelProp());
225:       assertFalse(node0.isBreak());
226:       assertFalse(node0.isAssignAdd());
227:       assertFalse(node0.isName());
228:       assertFalse(node0.isEmpty());
229:       assertFalse(node0.isOr());
230:       
231:       Node node1 = new Node(31);
232:       assertEquals(32, Node.INCRDECR_PROP);
233:       assertEquals(46, Node.IS_NAMESPACE);
234:       assertEquals(2, Node.POST_FLAG);
235:       assertEquals(51, Node.STATIC_SOURCE_FILE);
236:       assertEquals(12, Node.COLUMN_BITS);
237:       assertEquals(47, Node.IS_DISPATCHER);
238:       assertEquals(30, Node.VAR_ARGS_NAME);
239:       assertEquals(49, Node.DIRECT_EVAL);
240:       assertEquals(56, Node.CHANGE_TIME);
241:       assertEquals(37, Node.OPT_ARG_NAME);
242:       assertEquals(52, Node.LENGTH);
243:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
244:       assertEquals(36, Node.QUOTED_PROP);
245:       assertEquals(57, Node.REFLECTED_OBJECT);
246:       assertEquals(29, Node.JSDOC_INFO_PROP);
247:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
248:       assertEquals(57, Node.LAST_PROP);
249:       assertEquals(39, Node.EMPTY_BLOCK);
250:       assertEquals(55, Node.INFERRED_FUNCTION);
251:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
252:       assertEquals(53, Node.INPUT_ID);
253:       assertEquals(15, Node.NO_SIDE_EFFECTS);
254:       assertEquals(4095, Node.COLUMN_MASK);
255:       assertEquals(8, Node.FLAG_NO_THROWS);
256:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
257:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
258:       assertEquals(43, Node.IS_CONSTANT_NAME);
259:       assertEquals(40, Node.ORIGINALNAME_PROP);
260:       assertEquals(48, Node.DIRECTIVES);
261:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
262:       assertEquals(54, Node.SLASH_V);
263:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
264:       assertEquals(50, Node.FREE_CALL);
265:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
266:       assertEquals(1, Node.DECR_FLAG);
267:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
268:       assertNotNull(node1);
269:       assertFalse(node1.equals((Object)node0));
270:       assertFalse(node1.isNE());
271:       assertFalse(node1.isIf());
272:       assertFalse(node1.isGetterDef());
273:       assertFalse(node1.isFor());
274:       assertFalse(node1.isIn());
275:       assertFalse(node1.isString());
276:       assertFalse(node1.isEmpty());
277:       assertFalse(node1.isTry());
278:       assertFalse(node1.isCase());
279:       assertFalse(node1.isInc());
280:       assertFalse(node1.isTrue());
281:       assertFalse(node1.isVoid());
282:       assertFalse(node1.isRegExp());
283:       assertFalse(node1.isHook());
284:       assertFalse(node1.isCatch());
285:       assertFalse(node1.isBreak());
286:       assertFalse(node1.isComma());
287:       assertFalse(node1.isSetterDef());
288:       assertFalse(node1.isObjectLit());
289:       assertFalse(node1.isThrow());
290:       assertFalse(node1.isGetProp());
291:       assertFalse(node1.isFunction());
292:       assertFalse(node1.isNot());
293:       assertFalse(node1.isDebugger());
294:       assertFalse(node1.isCast());
295:       assertFalse(node1.isFalse());
296:       assertFalse(node1.isAnd());
297:       assertFalse(node1.isContinue());
298:       assertFalse(node1.isNumber());
299:       assertFalse(node1.isTypeOf());
300:       assertFalse(node1.isAssignAdd());
301:       assertFalse(node1.isReturn());
302:       assertFalse(node1.isOr());
303:       assertFalse(node1.isAssign());
304:       assertFalse(node1.isDec());
305:       assertEquals((-1), node1.getSourcePosition());
306:       assertTrue(node1.isDelProp());
307:       assertFalse(node1.isLabel());
308:       assertFalse(node1.hasChildren());
309:       assertFalse(node1.isDo());
310:       assertFalse(node1.hasOneChild());
311:       assertFalse(node1.isExprResult());
312:       assertFalse(node1.isWhile());
313:       assertFalse(node1.isWith());
314:       assertFalse(node1.isBlock());
315:       assertFalse(node1.isCall());
316:       assertFalse(node1.isName());
317:       assertFalse(node1.isInstanceOf());
318:       assertFalse(node1.hasMoreThanOneChild());
319:       assertEquals((-1), node1.getLineno());
320:       assertFalse(node1.isGetElem());
321:       assertEquals(31, node1.getType());
322:       assertFalse(node1.isThis());
323:       assertFalse(node1.isParamList());
324:       assertEquals(0, node1.getChildCount());
325:       assertFalse(node1.isNull());
326:       assertFalse(node1.isVar());
327:       assertFalse(node1.isAdd());
328:       assertFalse(node1.isNew());
329:       assertFalse(node1.isScript());
330:       assertFalse(node1.isDefaultCase());
331:       assertFalse(node1.isSwitch());
332:       assertEquals((-1), node1.getCharno());
333:       assertFalse(node1.isStringKey());
334:       assertFalse(node1.isLabelName());
335:       assertFalse(node1.isArrayLit());
336:       
337:       Node node2 = Node.newString(">F6+n;+C?)~A^");
338:       assertEquals(46, Node.IS_NAMESPACE);
339:       assertEquals(2, Node.POST_FLAG);
340:       assertEquals(51, Node.STATIC_SOURCE_FILE);
341:       assertEquals(12, Node.COLUMN_BITS);
342:       assertEquals(47, Node.IS_DISPATCHER);
343:       assertEquals(29, Node.JSDOC_INFO_PROP);
344:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
345:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
346:       assertEquals(15, Node.NO_SIDE_EFFECTS);
347:       assertEquals(57, Node.LAST_PROP);
348:       assertEquals(32, Node.INCRDECR_PROP);
349:       assertEquals(1, Node.DECR_FLAG);
350:       assertEquals(54, Node.SLASH_V);
351:       assertEquals(30, Node.VAR_ARGS_NAME);
352:       assertEquals(40, Node.ORIGINALNAME_PROP);
353:       assertEquals(43, Node.IS_CONSTANT_NAME);
354:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
355:       assertEquals(4095, Node.COLUMN_MASK);
356:       assertEquals(8, Node.FLAG_NO_THROWS);
357:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
358:       assertEquals(50, Node.FREE_CALL);
359:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
360:       assertEquals(55, Node.INFERRED_FUNCTION);
361:       assertEquals(39, Node.EMPTY_BLOCK);
362:       assertEquals(53, Node.INPUT_ID);
363:       assertEquals(52, Node.LENGTH);
364:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
365:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
366:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
367:       assertEquals(36, Node.QUOTED_PROP);
368:       assertEquals(57, Node.REFLECTED_OBJECT);
369:       assertEquals(49, Node.DIRECT_EVAL);
370:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
371:       assertEquals(56, Node.CHANGE_TIME);
372:       assertEquals(37, Node.OPT_ARG_NAME);
373:       assertEquals(48, Node.DIRECTIVES);
374:       assertNotNull(node2);
375:       assertFalse(node2.equals((Object)node1));
376:       assertFalse(node2.equals((Object)node0));
377:       assertFalse(node2.isTypeOf());
378:       assertEquals((-1), node2.getSourcePosition());
379:       assertFalse(node2.isNumber());
380:       assertFalse(node2.hasChildren());
381:       assertFalse(node2.isLabel());
382:       assertFalse(node2.isReturn());
383:       assertFalse(node2.isOr());
384:       assertFalse(node2.isDec());
385:       assertFalse(node2.isAssign());
386:       assertFalse(node2.hasMoreThanOneChild());
387:       assertFalse(node2.isContinue());
388:       assertFalse(node2.isCast());
389:       assertFalse(node2.isGetElem());
390:       assertEquals((-1), node2.getLineno());
391:       assertFalse(node2.isLabelName());
392:       assertFalse(node2.isVar());
393:       assertFalse(node2.isNew());
394:       assertFalse(node2.isAdd());
395:       assertFalse(node2.isAssignAdd());
396:       assertFalse(node2.isDo());
397:       assertFalse(node2.isThis());
398:       assertFalse(node2.isSetterDef());
399:       assertFalse(node2.isParamList());
400:       assertEquals(0, node2.getChildCount());
401:       assertFalse(node2.isStringKey());
402:       assertFalse(node2.isInstanceOf());
403:       assertFalse(node2.isCatch());
404:       assertFalse(node2.isRegExp());
405:       assertFalse(node2.isScript());
406:       assertFalse(node2.isSwitch());
407:       assertFalse(node2.isBlock());
408:       assertFalse(node2.isWith());
409:       assertEquals((-1), node2.getCharno());
410:       assertFalse(node2.isHook());
411:       assertFalse(node2.isCase());
412:       assertTrue(node2.isString());
413:       assertFalse(node2.isTry());
414:       assertFalse(node2.hasOneChild());
415:       assertFalse(node2.isIf());
416:       assertFalse(node2.isNE());
417:       assertFalse(node2.isFor());
418:       assertFalse(node2.isGetterDef());
419:       assertFalse(node2.isArrayLit());
420:       assertFalse(node2.isVoid());
421:       assertFalse(node2.isDelProp());
422:       assertFalse(node2.isDefaultCase());
423:       assertFalse(node2.isInc());
424:       assertFalse(node2.isTrue());
425:       assertEquals(40, node2.getType());
426:       assertFalse(node2.isFunction());
427:       assertFalse(node2.isIn());
428:       assertFalse(node2.isThrow());
429:       assertFalse(node2.isEmpty());
430:       assertFalse(node2.isNull());
431:       assertFalse(node2.isBreak());
432:       assertFalse(node2.isFalse());
433:       assertFalse(node2.isComma());
434:       assertFalse(node2.isCall());
435:       assertFalse(node2.isAnd());
436:       assertFalse(node2.isName());
437:       assertFalse(node2.isWhile());
438:       assertFalse(node2.isExprResult());
439:       assertFalse(node2.isDebugger());
440:       assertFalse(node2.isObjectLit());
441:       assertFalse(node2.isNot());
442:       assertFalse(node2.isGetProp());
443:       
444:       Node node3 = node1.useSourceInfoIfMissingFrom(node0);
445:       assertNotSame(node0, node3);
446:       assertNotSame(node0, node1);
447:       assertNotSame(node1, node0);
448:       assertSame(node1, node3);
449:       assertNotSame(node3, node0);
450:       assertSame(node3, node1);
451:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
452:       assertEquals(53, Node.INPUT_ID);
453:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
454:       assertEquals(43, Node.IS_CONSTANT_NAME);
455:       assertEquals(56, Node.CHANGE_TIME);
456:       assertEquals(36, Node.QUOTED_PROP);
457:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
458:       assertEquals(29, Node.JSDOC_INFO_PROP);
459:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
460:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
461:       assertEquals(32, Node.INCRDECR_PROP);
462:       assertEquals(12, Node.COLUMN_BITS);
463:       assertEquals(48, Node.DIRECTIVES);
464:       assertEquals(37, Node.OPT_ARG_NAME);
465:       assertEquals(1, Node.DECR_FLAG);
466:       assertEquals(49, Node.DIRECT_EVAL);
467:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
468:       assertEquals(4095, Node.COLUMN_MASK);
469:       assertEquals(40, Node.ORIGINALNAME_PROP);
470:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
471:       assertEquals(57, Node.REFLECTED_OBJECT);
472:       assertEquals(54, Node.SLASH_V);
473:       assertEquals(15, Node.NO_SIDE_EFFECTS);
474:       assertEquals(39, Node.EMPTY_BLOCK);
475:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
476:       assertEquals(50, Node.FREE_CALL);
477:       assertEquals(52, Node.LENGTH);
478:       assertEquals(8, Node.FLAG_NO_THROWS);
479:       assertEquals(46, Node.IS_NAMESPACE);
480:       assertEquals(51, Node.STATIC_SOURCE_FILE);
481:       assertEquals(55, Node.INFERRED_FUNCTION);
482:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
483:       assertEquals(57, Node.LAST_PROP);
484:       assertEquals(47, Node.IS_DISPATCHER);
485:       assertEquals(2, Node.POST_FLAG);
486:       assertEquals(30, Node.VAR_ARGS_NAME);
487:       assertEquals(32, Node.INCRDECR_PROP);
488:       assertEquals(46, Node.IS_NAMESPACE);
489:       assertEquals(2, Node.POST_FLAG);
490:       assertEquals(51, Node.STATIC_SOURCE_FILE);
491:       assertEquals(12, Node.COLUMN_BITS);
492:       assertEquals(47, Node.IS_DISPATCHER);
493:       assertEquals(30, Node.VAR_ARGS_NAME);
494:       assertEquals(49, Node.DIRECT_EVAL);
495:       assertEquals(56, Node.CHANGE_TIME);
496:       assertEquals(37, Node.OPT_ARG_NAME);
497:       assertEquals(52, Node.LENGTH);
498:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
499:       assertEquals(36, Node.QUOTED_PROP);
500:       assertEquals(57, Node.REFLECTED_OBJECT);
501:       assertEquals(29, Node.JSDOC_INFO_PROP);
502:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
503:       assertEquals(57, Node.LAST_PROP);
504:       assertEquals(39, Node.EMPTY_BLOCK);
505:       assertEquals(55, Node.INFERRED_FUNCTION);
506:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
507:       assertEquals(53, Node.INPUT_ID);
508:       assertEquals(15, Node.NO_SIDE_EFFECTS);
509:       assertEquals(4095, Node.COLUMN_MASK);
510:       assertEquals(8, Node.FLAG_NO_THROWS);
511:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
512:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
513:       assertEquals(43, Node.IS_CONSTANT_NAME);
514:       assertEquals(40, Node.ORIGINALNAME_PROP);
515:       assertEquals(48, Node.DIRECTIVES);
516:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
517:       assertEquals(54, Node.SLASH_V);
518:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
519:       assertEquals(50, Node.FREE_CALL);
520:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
521:       assertEquals(1, Node.DECR_FLAG);
522:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
523:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
524:       assertEquals(48, Node.DIRECTIVES);
525:       assertEquals(8, Node.FLAG_NO_THROWS);
526:       assertEquals(50, Node.FREE_CALL);
527:       assertEquals(55, Node.INFERRED_FUNCTION);
528:       assertEquals(52, Node.LENGTH);
529:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
530:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
531:       assertEquals(39, Node.EMPTY_BLOCK);
532:       assertEquals(43, Node.IS_CONSTANT_NAME);
533:       assertEquals(57, Node.LAST_PROP);
534:       assertEquals(30, Node.VAR_ARGS_NAME);
535:       assertEquals(54, Node.SLASH_V);
536:       assertEquals(40, Node.ORIGINALNAME_PROP);
537:       assertEquals(2, Node.POST_FLAG);
538:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
539:       assertEquals(37, Node.OPT_ARG_NAME);
540:       assertEquals(56, Node.CHANGE_TIME);
541:       assertEquals(46, Node.IS_NAMESPACE);
542:       assertEquals(47, Node.IS_DISPATCHER);
543:       assertEquals(12, Node.COLUMN_BITS);
544:       assertEquals(51, Node.STATIC_SOURCE_FILE);
545:       assertEquals(32, Node.INCRDECR_PROP);
546:       assertEquals(29, Node.JSDOC_INFO_PROP);
547:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
548:       assertEquals(1, Node.DECR_FLAG);
549:       assertEquals(15, Node.NO_SIDE_EFFECTS);
550:       assertEquals(53, Node.INPUT_ID);
551:       assertEquals(36, Node.QUOTED_PROP);
552:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
553:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
554:       assertEquals(57, Node.REFLECTED_OBJECT);
555:       assertEquals(4095, Node.COLUMN_MASK);
556:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
557:       assertEquals(49, Node.DIRECT_EVAL);
558:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
559:       assertNotNull(node3);
560:       assertFalse(node0.equals((Object)node2));
561:       assertFalse(node0.equals((Object)node1));
562:       assertFalse(node1.equals((Object)node0));
563:       assertFalse(node1.equals((Object)node2));
564:       assertFalse(node3.equals((Object)node0));
565:       assertFalse(node3.equals((Object)node2));
566:       assertFalse(node0.isVoid());
567:       assertFalse(node0.isDebugger());
568:       assertFalse(node0.isTrue());
569:       assertFalse(node0.isTry());
570:       assertFalse(node0.isDefaultCase());
571:       assertFalse(node0.isCatch());
572:       assertFalse(node0.isFor());
573:       assertFalse(node0.isArrayLit());
574:       assertEquals(0, node0.getChildCount());
575:       assertFalse(node0.isRegExp());
576:       assertFalse(node0.isFunction());
577:       assertFalse(node0.isParamList());
578:       assertEquals(45, node0.getType());
579:       assertFalse(node0.isStringKey());
580:       assertFalse(node0.isCase());
581:       assertFalse(node0.isGetterDef());
582:       assertFalse(node0.isString());
583:       assertFalse(node0.isInc());
584:       assertFalse(node0.isBlock());
585:       assertFalse(node0.isThrow());
586:       assertFalse(node0.isContinue());
587:       assertFalse(node0.isHook());
588:       assertFalse(node0.hasMoreThanOneChild());
589:       assertFalse(node0.isFalse());
590:       assertFalse(node0.isNE());
591:       assertFalse(node0.isSetterDef());
592:       assertFalse(node0.isIf());
593:       assertEquals((-1), node0.getLineno());
594:       assertFalse(node0.isIn());
595:       assertFalse(node0.isExprResult());
596:       assertFalse(node0.isScript());
597:       assertFalse(node0.hasOneChild());
598:       assertFalse(node0.isCast());
599:       assertFalse(node0.isGetElem());
600:       assertFalse(node0.hasChildren());
601:       assertFalse(node0.isDec());
602:       assertFalse(node0.isInstanceOf());
603:       assertFalse(node0.isTypeOf());
604:       assertFalse(node0.isAssign());
605:       assertFalse(node0.isWith());
606:       assertFalse(node0.isGetProp());
607:       assertFalse(node0.isComma());
608:       assertFalse(node0.isThis());
609:       assertFalse(node0.isReturn());
610:       assertFalse(node0.isLabelName());
611:       assertFalse(node0.isAnd());
612:       assertFalse(node0.isObjectLit());
613:       assertEquals((-1), node0.getSourcePosition());
614:       assertFalse(node0.isNot());
615:       assertFalse(node0.isNumber());
616:       assertEquals((-1), node0.getCharno());
617:       assertFalse(node0.isNew());
618:       assertFalse(node0.isAdd());
619:       assertFalse(node0.isWhile());
620:       assertFalse(node0.isDo());
621:       assertFalse(node0.isSwitch());
622:       assertFalse(node0.isCall());
623:       assertFalse(node0.isVar());
624:       assertFalse(node0.isNull());
625:       assertFalse(node0.isLabel());
626:       assertFalse(node0.isDelProp());
627:       assertFalse(node0.isBreak());
628:       assertFalse(node0.isAssignAdd());
629:       assertFalse(node0.isName());
630:       assertFalse(node0.isEmpty());
631:       assertFalse(node0.isOr());
632:       assertFalse(node1.isNE());
633:       assertFalse(node1.isIf());
634:       assertFalse(node1.isGetterDef());
635:       assertFalse(node1.isFor());
636:       assertFalse(node1.isIn());
637:       assertFalse(node1.isString());
638:       assertFalse(node1.isEmpty());
639:       assertFalse(node1.isTry());
640:       assertFalse(node1.isCase());
641:       assertFalse(node1.isInc());
642:       assertFalse(node1.isTrue());
643:       assertFalse(node1.isVoid());
644:       assertFalse(node1.isRegExp());
645:       assertFalse(node1.isHook());
646:       assertFalse(node1.isCatch());
647:       assertFalse(node1.isBreak());
648:       assertFalse(node1.isComma());
649:       assertFalse(node1.isSetterDef());
650:       assertFalse(node1.isObjectLit());
651:       assertFalse(node1.isThrow());
652:       assertFalse(node1.isGetProp());
653:       assertFalse(node1.isFunction());
654:       assertFalse(node1.isNot());
655:       assertFalse(node1.isDebugger());
656:       assertFalse(node1.isCast());
657:       assertFalse(node1.isFalse());
658:       assertFalse(node1.isAnd());
659:       assertFalse(node1.isContinue());
660:       assertFalse(node1.isNumber());
661:       assertFalse(node1.isTypeOf());
662:       assertFalse(node1.isAssignAdd());
663:       assertFalse(node1.isReturn());
664:       assertFalse(node1.isOr());
665:       assertFalse(node1.isAssign());
666:       assertFalse(node1.isDec());
667:       assertEquals((-1), node1.getSourcePosition());
668:       assertTrue(node1.isDelProp());
669:       assertFalse(node1.isLabel());
670:       assertFalse(node1.hasChildren());
671:       assertFalse(node1.isDo());
672:       assertFalse(node1.hasOneChild());
673:       assertFalse(node1.isExprResult());
674:       assertFalse(node1.isWhile());
675:       assertFalse(node1.isWith());
676:       assertFalse(node1.isBlock());
677:       assertFalse(node1.isCall());
678:       assertFalse(node1.isName());
679:       assertFalse(node1.isInstanceOf());
680:       assertFalse(node1.hasMoreThanOneChild());
681:       assertEquals((-1), node1.getLineno());
682:       assertFalse(node1.isGetElem());
683:       assertEquals(31, node1.getType());
684:       assertFalse(node1.isThis());
685:       assertFalse(node1.isParamList());
686:       assertEquals(0, node1.getChildCount());
687:       assertFalse(node1.isNull());
688:       assertFalse(node1.isVar());
689:       assertFalse(node1.isAdd());
690:       assertFalse(node1.isNew());
691:       assertFalse(node1.isScript());
692:       assertFalse(node1.isDefaultCase());
693:       assertFalse(node1.isSwitch());
694:       assertEquals((-1), node1.getCharno());
695:       assertFalse(node1.isStringKey());
696:       assertFalse(node1.isLabelName());
697:       assertFalse(node1.isArrayLit());
698:       assertFalse(node3.isName());
699:       assertFalse(node3.isStringKey());
700:       assertFalse(node3.isNull());
701:       assertFalse(node3.isVar());
702:       assertFalse(node3.isParamList());
703:       assertEquals(31, node3.getType());
704:       assertFalse(node3.isCatch());
705:       assertFalse(node3.isCall());
706:       assertFalse(node3.isDo());
707:       assertFalse(node3.isContinue());
708:       assertFalse(node3.isDefaultCase());
709:       assertEquals(0, node3.getChildCount());
710:       assertFalse(node3.isTrue());
711:       assertTrue(node3.isDelProp());
712:       assertFalse(node3.isAssignAdd());
713:       assertFalse(node3.isAdd());
714:       assertFalse(node3.isOr());
715:       assertFalse(node3.isNew());
716:       assertFalse(node3.isSetterDef());
717:       assertFalse(node3.isEmpty());
718:       assertFalse(node3.isAssign());
719:       assertFalse(node3.isTypeOf());
720:       assertFalse(node3.isDec());
721:       assertEquals((-1), node3.getSourcePosition());
722:       assertFalse(node3.hasChildren());
723:       assertFalse(node3.isVoid());
724:       assertFalse(node3.isFunction());
725:       assertFalse(node3.isCast());
726:       assertFalse(node3.isExprResult());
727:       assertFalse(node3.isGetElem());
728:       assertFalse(node3.isNot());
729:       assertFalse(node3.isWhile());
730:       assertFalse(node3.isString());
731:       assertFalse(node3.isAnd());
732:       assertFalse(node3.isObjectLit());
733:       assertFalse(node3.isDebugger());
734:       assertFalse(node3.isReturn());
735:       assertFalse(node3.isGetProp());
736:       assertFalse(node3.isThrow());
737:       assertFalse(node3.isFalse());
738:       assertFalse(node3.isComma());
739:       assertFalse(node3.isHook());
740:       assertFalse(node3.isThis());
741:       assertFalse(node3.isSwitch());
742:       assertFalse(node3.isInstanceOf());
743:       assertFalse(node3.isBreak());
744:       assertFalse(node3.isIn());
745:       assertFalse(node3.isInc());
746:       assertFalse(node3.isFor());
747:       assertFalse(node3.isLabelName());
748:       assertFalse(node3.isGetterDef());
749:       assertFalse(node3.isIf());
750:       assertFalse(node3.isNumber());
751:       assertFalse(node3.isNE());
752:       assertFalse(node3.isLabel());
753:       assertEquals((-1), node3.getLineno());
754:       assertFalse(node3.isArrayLit());
755:       assertFalse(node3.isCase());
756:       assertFalse(node3.hasMoreThanOneChild());
757:       assertFalse(node3.isWith());
758:       assertFalse(node3.isRegExp());
759:       assertEquals((-1), node3.getCharno());
760:       assertFalse(node3.isBlock());
761:       assertFalse(node3.isTry());
762:       assertFalse(node3.isScript());
763:       assertFalse(node3.hasOneChild());
764:       
765:       Iterable<Node> iterable0 = node0.children();
766:       assertFalse(iterable0.contains(node3));
767:       assertNotSame(node0, node3);
768:       assertNotSame(node0, node1);
769:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
770:       assertEquals(53, Node.INPUT_ID);
771:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
772:       assertEquals(43, Node.IS_CONSTANT_NAME);
773:       assertEquals(56, Node.CHANGE_TIME);
774:       assertEquals(36, Node.QUOTED_PROP);
775:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
776:       assertEquals(29, Node.JSDOC_INFO_PROP);
777:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
778:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
779:       assertEquals(32, Node.INCRDECR_PROP);
780:       assertEquals(12, Node.COLUMN_BITS);
781:       assertEquals(48, Node.DIRECTIVES);
782:       assertEquals(37, Node.OPT_ARG_NAME);
783:       assertEquals(1, Node.DECR_FLAG);
784:       assertEquals(49, Node.DIRECT_EVAL);
785:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
786:       assertEquals(4095, Node.COLUMN_MASK);
787:       assertEquals(40, Node.ORIGINALNAME_PROP);
788:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
789:       assertEquals(57, Node.REFLECTED_OBJECT);
790:       assertEquals(54, Node.SLASH_V);
791:       assertEquals(15, Node.NO_SIDE_EFFECTS);
792:       assertEquals(39, Node.EMPTY_BLOCK);
793:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
794:       assertEquals(50, Node.FREE_CALL);
795:       assertEquals(52, Node.LENGTH);
796:       assertEquals(8, Node.FLAG_NO_THROWS);
797:       assertEquals(46, Node.IS_NAMESPACE);
798:       assertEquals(51, Node.STATIC_SOURCE_FILE);
799:       assertEquals(55, Node.INFERRED_FUNCTION);
800:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
801:       assertEquals(57, Node.LAST_PROP);
802:       assertEquals(47, Node.IS_DISPATCHER);
803:       assertEquals(2, Node.POST_FLAG);
804:       assertEquals(30, Node.VAR_ARGS_NAME);
805:       assertNotNull(iterable0);
806:       assertFalse(node0.equals((Object)node3));
807:       assertFalse(node0.equals((Object)node2));
808:       assertFalse(node0.equals((Object)node1));
809:       assertFalse(node0.isVoid());
810:       assertFalse(node0.isDebugger());
811:       assertFalse(node0.isTrue());
812:       assertFalse(node0.isTry());
813:       assertFalse(node0.isDefaultCase());
814:       assertFalse(node0.isCatch());
815:       assertFalse(node0.isFor());
816:       assertFalse(node0.isArrayLit());
817:       assertEquals(0, node0.getChildCount());
818:       assertFalse(node0.isRegExp());
819:       assertFalse(node0.isFunction());
820:       assertFalse(node0.isParamList());
821:       assertEquals(45, node0.getType());
822:       assertFalse(node0.isStringKey());
823:       assertFalse(node0.isCase());
824:       assertFalse(node0.isGetterDef());
825:       assertFalse(node0.isString());
826:       assertFalse(node0.isInc());
827:       assertFalse(node0.isBlock());
828:       assertFalse(node0.isThrow());
829:       assertFalse(node0.isContinue());
830:       assertFalse(node0.isHook());
831:       assertFalse(node0.hasMoreThanOneChild());
832:       assertFalse(node0.isFalse());
833:       assertFalse(node0.isNE());
834:       assertFalse(node0.isSetterDef());
835:       assertFalse(node0.isIf());
836:       assertEquals((-1), node0.getLineno());
837:       assertFalse(node0.isIn());
838:       assertFalse(node0.isExprResult());
839:       assertFalse(node0.isScript());
840:       assertFalse(node0.hasOneChild());
841:       assertFalse(node0.isCast());
842:       assertFalse(node0.isGetElem());
843:       assertFalse(node0.hasChildren());
844:       assertFalse(node0.isDec());
845:       assertFalse(node0.isInstanceOf());
846:       assertFalse(node0.isTypeOf());
847:       assertFalse(node0.isAssign());
848:       assertFalse(node0.isWith());
849:       assertFalse(node0.isGetProp());
850:       assertFalse(node0.isComma());
851:       assertFalse(node0.isThis());
852:       assertFalse(node0.isReturn());
853:       assertFalse(node0.isLabelName());
854:       assertFalse(node0.isAnd());
855:       assertFalse(node0.isObjectLit());
856:       assertEquals((-1), node0.getSourcePosition());
857:       assertFalse(node0.isNot());
858:       assertFalse(node0.isNumber());
859:       assertEquals((-1), node0.getCharno());
860:       assertFalse(node0.isNew());
861:       assertFalse(node0.isAdd());
862:       assertFalse(node0.isWhile());
863:       assertFalse(node0.isDo());
864:       assertFalse(node0.isSwitch());
865:       assertFalse(node0.isCall());
866:       assertFalse(node0.isVar());
867:       assertFalse(node0.isNull());
868:       assertFalse(node0.isLabel());
869:       assertFalse(node0.isDelProp());
870:       assertFalse(node0.isBreak());
871:       assertFalse(node0.isAssignAdd());
872:       assertFalse(node0.isName());
873:       assertFalse(node0.isEmpty());
874:       assertFalse(node0.isOr());
875:       
876:       Node node4 = Node.newString(">F6+n;+C?)~A^", 2, (-1087));
877:       assertNotSame(node4, node2);
878:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
879:       assertEquals(8, Node.FLAG_NO_THROWS);
880:       assertEquals(39, Node.EMPTY_BLOCK);
881:       assertEquals(48, Node.DIRECTIVES);
882:       assertEquals(4095, Node.COLUMN_MASK);
883:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
884:       assertEquals(40, Node.ORIGINALNAME_PROP);
885:       assertEquals(43, Node.IS_CONSTANT_NAME);
886:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
887:       assertEquals(54, Node.SLASH_V);
888:       assertEquals(51, Node.STATIC_SOURCE_FILE);
889:       assertEquals(1, Node.DECR_FLAG);
890:       assertEquals(32, Node.INCRDECR_PROP);
891:       assertEquals(50, Node.FREE_CALL);
892:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
893:       assertEquals(2, Node.POST_FLAG);
894:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
895:       assertEquals(37, Node.OPT_ARG_NAME);
896:       assertEquals(56, Node.CHANGE_TIME);
897:       assertEquals(47, Node.IS_DISPATCHER);
898:       assertEquals(12, Node.COLUMN_BITS);
899:       assertEquals(46, Node.IS_NAMESPACE);
900:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
901:       assertEquals(49, Node.DIRECT_EVAL);
902:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
903:       assertEquals(36, Node.QUOTED_PROP);
904:       assertEquals(57, Node.LAST_PROP);
905:       assertEquals(30, Node.VAR_ARGS_NAME);
906:       assertEquals(57, Node.REFLECTED_OBJECT);
907:       assertEquals(55, Node.INFERRED_FUNCTION);
908:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
909:       assertEquals(52, Node.LENGTH);
910:       assertEquals(15, Node.NO_SIDE_EFFECTS);
911:       assertEquals(29, Node.JSDOC_INFO_PROP);
912:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
913:       assertEquals(53, Node.INPUT_ID);
914:       assertNotNull(node4);
915:       assertFalse(node4.equals((Object)node1));
916:       assertFalse(node4.equals((Object)node0));
917:       assertFalse(node4.equals((Object)node3));
918:       assertFalse(node4.equals((Object)node2));
919:       assertFalse(node4.isName());
920:       assertFalse(node4.isVar());
921:       assertFalse(node4.isParamList());
922:       assertFalse(node4.isStringKey());
923:       assertFalse(node4.isNull());
924:       assertFalse(node4.isNew());
925:       assertTrue(node4.isString());
926:       assertFalse(node4.isSetterDef());
927:       assertFalse(node4.isAdd());
928:       assertFalse(node4.isDo());
929:       assertFalse(node4.isDefaultCase());
930:       assertFalse(node4.isDebugger());
931:       assertEquals(40, node4.getType());
932:       assertFalse(node4.isLabel());
933:       assertEquals(0, node4.getChildCount());
934:       assertFalse(node4.isFunction());
935:       assertFalse(node4.isArrayLit());
936:       assertFalse(node4.isContinue());
937:       assertFalse(node4.isLabelName());
938:       assertFalse(node4.isIf());
939:       assertFalse(node4.isNumber());
940:       assertFalse(node4.isGetterDef());
941:       assertFalse(node4.isNE());
942:       assertFalse(node4.isFor());
943:       assertFalse(node4.isTry());
944:       assertFalse(node4.isIn());
945:       assertFalse(node4.hasOneChild());
946:       assertFalse(node4.isScript());
947:       assertFalse(node4.isWith());
948:       assertFalse(node4.isCase());
949:       assertFalse(node4.isRegExp());
950:       assertFalse(node4.isBlock());
951:       assertEquals((-1), node4.getLineno());
952:       assertFalse(node4.hasMoreThanOneChild());
953:       assertFalse(node4.isCatch());
954:       assertFalse(node4.isInstanceOf());
955:       assertFalse(node4.isFalse());
956:       assertFalse(node4.isComma());
957:       assertFalse(node4.isThrow());
958:       assertFalse(node4.isHook());
959:       assertFalse(node4.isThis());
960:       assertFalse(node4.isGetProp());
961:       assertFalse(node4.isInc());
962:       assertFalse(node4.isNot());
963:       assertFalse(node4.isObjectLit());
964:       assertFalse(node4.isSwitch());
965:       assertFalse(node4.isAnd());
966:       assertEquals((-1), node4.getCharno());
967:       assertFalse(node4.isCast());
968:       assertFalse(node4.isEmpty());
969:       assertFalse(node4.isAssign());
970:       assertFalse(node4.isDec());
971:       assertFalse(node4.isDelProp());
972:       assertFalse(node4.isTypeOf());
973:       assertEquals((-1), node4.getSourcePosition());
974:       assertFalse(node4.hasChildren());
975:       assertFalse(node4.isAssignAdd());
976:       assertFalse(node4.isOr());
977:       assertFalse(node4.isWhile());
978:       assertFalse(node4.isTrue());
979:       assertFalse(node4.isReturn());
980:       assertFalse(node4.isVoid());
981:       assertFalse(node4.isBreak());
982:       assertFalse(node4.isCall());
983:       assertFalse(node4.isExprResult());
984:       assertFalse(node4.isGetElem());
985:       
986:       boolean boolean0 = node4.isGetProp();
987:       assertFalse(boolean0);
988:       assertNotSame(node4, node2);
989:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
990:       assertEquals(8, Node.FLAG_NO_THROWS);
991:       assertEquals(39, Node.EMPTY_BLOCK);
992:       assertEquals(48, Node.DIRECTIVES);
993:       assertEquals(4095, Node.COLUMN_MASK);
994:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
995:       assertEquals(40, Node.ORIGINALNAME_PROP);
996:       assertEquals(43, Node.IS_CONSTANT_NAME);
997:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
998:       assertEquals(54, Node.SLASH_V);
999:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1000:       assertEquals(1, Node.DECR_FLAG);
1001:       assertEquals(32, Node.INCRDECR_PROP);
1002:       assertEquals(50, Node.FREE_CALL);
1003:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1004:       assertEquals(2, Node.POST_FLAG);
1005:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1006:       assertEquals(37, Node.OPT_ARG_NAME);
1007:       assertEquals(56, Node.CHANGE_TIME);
1008:       assertEquals(47, Node.IS_DISPATCHER);
1009:       assertEquals(12, Node.COLUMN_BITS);
1010:       assertEquals(46, Node.IS_NAMESPACE);
1011:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1012:       assertEquals(49, Node.DIRECT_EVAL);
1013:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1014:       assertEquals(36, Node.QUOTED_PROP);
1015:       assertEquals(57, Node.LAST_PROP);
1016:       assertEquals(30, Node.VAR_ARGS_NAME);
1017:       assertEquals(57, Node.REFLECTED_OBJECT);
1018:       assertEquals(55, Node.INFERRED_FUNCTION);
1019:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1020:       assertEquals(52, Node.LENGTH);
1021:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1022:       assertEquals(29, Node.JSDOC_INFO_PROP);
1023:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1024:       assertEquals(53, Node.INPUT_ID);
1025:       assertFalse(node4.equals((Object)node1));
1026:       assertFalse(node4.equals((Object)node0));
1027:       assertFalse(node4.equals((Object)node3));
1028:       assertFalse(node4.equals((Object)node2));
1029:       assertFalse(node4.isName());
1030:       assertFalse(node4.isVar());
1031:       assertFalse(node4.isParamList());
1032:       assertFalse(node4.isStringKey());
1033:       assertFalse(node4.isNull());
1034:       assertFalse(node4.isNew());
1035:       assertTrue(node4.isString());
1036:       assertFalse(node4.isSetterDef());
1037:       assertFalse(node4.isAdd());
1038:       assertFalse(node4.isDo());
1039:       assertFalse(node4.isDefaultCase());
1040:       assertFalse(node4.isDebugger());
1041:       assertEquals(40, node4.getType());
1042:       assertFalse(node4.isLabel());
1043:       assertEquals(0, node4.getChildCount());
1044:       assertFalse(node4.isFunction());
1045:       assertFalse(node4.isArrayLit());
1046:       assertFalse(node4.isContinue());
1047:       assertFalse(node4.isLabelName());
1048:       assertFalse(node4.isIf());
1049:       assertFalse(node4.isNumber());
1050:       assertFalse(node4.isGetterDef());
1051:       assertFalse(node4.isNE());
1052:       assertFalse(node4.isFor());
1053:       assertFalse(node4.isTry());
1054:       assertFalse(node4.isIn());
1055:       assertFalse(node4.hasOneChild());
1056:       assertFalse(node4.isScript());
1057:       assertFalse(node4.isWith());
1058:       assertFalse(node4.isCase());
1059:       assertFalse(node4.isRegExp());
1060:       assertFalse(node4.isBlock());
1061:       assertEquals((-1), node4.getLineno());
1062:       assertFalse(node4.hasMoreThanOneChild());
1063:       assertFalse(node4.isCatch());
1064:       assertFalse(node4.isInstanceOf());
1065:       assertFalse(node4.isFalse());
1066:       assertFalse(node4.isComma());
1067:       assertFalse(node4.isThrow());
1068:       assertFalse(node4.isHook());
1069:       assertFalse(node4.isThis());
1070:       assertFalse(node4.isGetProp());
1071:       assertFalse(node4.isInc());
1072:       assertFalse(node4.isNot());
1073:       assertFalse(node4.isObjectLit());
1074:       assertFalse(node4.isSwitch());
1075:       assertFalse(node4.isAnd());
1076:       assertEquals((-1), node4.getCharno());
1077:       assertFalse(node4.isCast());
1078:       assertFalse(node4.isEmpty());
1079:       assertFalse(node4.isAssign());
1080:       assertFalse(node4.isDec());
1081:       assertFalse(node4.isDelProp());
1082:       assertFalse(node4.isTypeOf());
1083:       assertEquals((-1), node4.getSourcePosition());
1084:       assertFalse(node4.hasChildren());
1085:       assertFalse(node4.isAssignAdd());
1086:       assertFalse(node4.isOr());
1087:       assertFalse(node4.isWhile());
1088:       assertFalse(node4.isTrue());
1089:       assertFalse(node4.isReturn());
1090:       assertFalse(node4.isVoid());
1091:       assertFalse(node4.isBreak());
1092:       assertFalse(node4.isCall());
1093:       assertFalse(node4.isExprResult());
1094:       assertFalse(node4.isGetElem());
1095:       
1096:       boolean boolean1 = node0.hasChildren();
1097:       assertFalse(boolean1);
1098:       assertNotSame(node0, node3);
1099:       assertNotSame(node0, node1);
1100:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1101:       assertEquals(53, Node.INPUT_ID);
1102:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1103:       assertEquals(43, Node.IS_CONSTANT_NAME);
1104:       assertEquals(56, Node.CHANGE_TIME);
1105:       assertEquals(36, Node.QUOTED_PROP);
1106:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1107:       assertEquals(29, Node.JSDOC_INFO_PROP);
1108:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1109:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1110:       assertEquals(32, Node.INCRDECR_PROP);
1111:       assertEquals(12, Node.COLUMN_BITS);
1112:       assertEquals(48, Node.DIRECTIVES);
1113:       assertEquals(37, Node.OPT_ARG_NAME);
1114:       assertEquals(1, Node.DECR_FLAG);
1115:       assertEquals(49, Node.DIRECT_EVAL);
1116:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1117:       assertEquals(4095, Node.COLUMN_MASK);
1118:       assertEquals(40, Node.ORIGINALNAME_PROP);
1119:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1120:       assertEquals(57, Node.REFLECTED_OBJECT);
1121:       assertEquals(54, Node.SLASH_V);
1122:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1123:       assertEquals(39, Node.EMPTY_BLOCK);
1124:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1125:       assertEquals(50, Node.FREE_CALL);
1126:       assertEquals(52, Node.LENGTH);
1127:       assertEquals(8, Node.FLAG_NO_THROWS);
1128:       assertEquals(46, Node.IS_NAMESPACE);
1129:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1130:       assertEquals(55, Node.INFERRED_FUNCTION);
1131:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1132:       assertEquals(57, Node.LAST_PROP);
1133:       assertEquals(47, Node.IS_DISPATCHER);
1134:       assertEquals(2, Node.POST_FLAG);
1135:       assertEquals(30, Node.VAR_ARGS_NAME);
1136:       assertFalse(node0.equals((Object)node3));
1137:       assertFalse(node0.equals((Object)node2));
1138:       assertFalse(node0.equals((Object)node4));
1139:       assertFalse(node0.equals((Object)node1));
1140:       assertTrue(boolean1 == boolean0);
1141:       assertFalse(node0.isVoid());
1142:       assertFalse(node0.isDebugger());
1143:       assertFalse(node0.isTrue());
1144:       assertFalse(node0.isTry());
1145:       assertFalse(node0.isDefaultCase());
1146:       assertFalse(node0.isCatch());
1147:       assertFalse(node0.isFor());
1148:       assertFalse(node0.isArrayLit());
1149:       assertEquals(0, node0.getChildCount());
1150:       assertFalse(node0.isRegExp());
1151:       assertFalse(node0.isFunction());
1152:       assertFalse(node0.isParamList());
1153:       assertEquals(45, node0.getType());
1154:       assertFalse(node0.isStringKey());
1155:       assertFalse(node0.isCase());
1156:       assertFalse(node0.isGetterDef());
1157:       assertFalse(node0.isString());
1158:       assertFalse(node0.isInc());
1159:       assertFalse(node0.isBlock());
1160:       assertFalse(node0.isThrow());
1161:       assertFalse(node0.isContinue());
1162:       assertFalse(node0.isHook());
1163:       assertFalse(node0.hasMoreThanOneChild());
1164:       assertFalse(node0.isFalse());
1165:       assertFalse(node0.isNE());
1166:       assertFalse(node0.isSetterDef());
1167:       assertFalse(node0.isIf());
1168:       assertEquals((-1), node0.getLineno());
1169:       assertFalse(node0.isIn());
1170:       assertFalse(node0.isExprResult());
1171:       assertFalse(node0.isScript());
1172:       assertFalse(node0.hasOneChild());
1173:       assertFalse(node0.isCast());
1174:       assertFalse(node0.isGetElem());
1175:       assertFalse(node0.hasChildren());
1176:       assertFalse(node0.isDec());
1177:       assertFalse(node0.isInstanceOf());
1178:       assertFalse(node0.isTypeOf());
1179:       assertFalse(node0.isAssign());
1180:       assertFalse(node0.isWith());
1181:       assertFalse(node0.isGetProp());
1182:       assertFalse(node0.isComma());
1183:       assertFalse(node0.isThis());
1184:       assertFalse(node0.isReturn());
1185:       assertFalse(node0.isLabelName());
1186:       assertFalse(node0.isAnd());
1187:       assertFalse(node0.isObjectLit());
1188:       assertEquals((-1), node0.getSourcePosition());
1189:       assertFalse(node0.isNot());
1190:       assertFalse(node0.isNumber());
1191:       assertEquals((-1), node0.getCharno());
1192:       assertFalse(node0.isNew());
1193:       assertFalse(node0.isAdd());
1194:       assertFalse(node0.isWhile());
1195:       assertFalse(node0.isDo());
1196:       assertFalse(node0.isSwitch());
1197:       assertFalse(node0.isCall());
1198:       assertFalse(node0.isVar());
1199:       assertFalse(node0.isNull());
1200:       assertFalse(node0.isLabel());
1201:       assertFalse(node0.isDelProp());
1202:       assertFalse(node0.isBreak());
1203:       assertFalse(node0.isAssignAdd());
1204:       assertFalse(node0.isName());
1205:       assertFalse(node0.isEmpty());
1206:       assertFalse(node0.isOr());
1207:       
1208:       boolean boolean2 = node1.isSwitch();
1209:       assertFalse(boolean2);
1210:       assertNotSame(node1, node0);
1211:       assertSame(node1, node3);
1212:       assertEquals(32, Node.INCRDECR_PROP);
1213:       assertEquals(46, Node.IS_NAMESPACE);
1214:       assertEquals(2, Node.POST_FLAG);
1215:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1216:       assertEquals(12, Node.COLUMN_BITS);
1217:       assertEquals(47, Node.IS_DISPATCHER);
1218:       assertEquals(30, Node.VAR_ARGS_NAME);
1219:       assertEquals(49, Node.DIRECT_EVAL);
1220:       assertEquals(56, Node.CHANGE_TIME);
1221:       assertEquals(37, Node.OPT_ARG_NAME);
1222:       assertEquals(52, Node.LENGTH);
1223:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1224:       assertEquals(36, Node.QUOTED_PROP);
1225:       assertEquals(57, Node.REFLECTED_OBJECT);
1226:       assertEquals(29, Node.JSDOC_INFO_PROP);
1227:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1228:       assertEquals(57, Node.LAST_PROP);
1229:       assertEquals(39, Node.EMPTY_BLOCK);
1230:       assertEquals(55, Node.INFERRED_FUNCTION);
1231:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1232:       assertEquals(53, Node.INPUT_ID);
1233:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1234:       assertEquals(4095, Node.COLUMN_MASK);
1235:       assertEquals(8, Node.FLAG_NO_THROWS);
1236:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1237:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1238:       assertEquals(43, Node.IS_CONSTANT_NAME);
1239:       assertEquals(40, Node.ORIGINALNAME_PROP);
1240:       assertEquals(48, Node.DIRECTIVES);
1241:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1242:       assertEquals(54, Node.SLASH_V);
1243:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1244:       assertEquals(50, Node.FREE_CALL);
1245:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1246:       assertEquals(1, Node.DECR_FLAG);
1247:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1248:       assertFalse(node1.equals((Object)node4));
1249:       assertFalse(node1.equals((Object)node0));
1250:       assertFalse(node1.equals((Object)node2));
1251:       assertTrue(boolean2 == boolean0);
1252:       assertTrue(boolean2 == boolean1);
1253:       assertFalse(node1.isNE());
1254:       assertFalse(node1.isIf());
1255:       assertFalse(node1.isGetterDef());
1256:       assertFalse(node1.isFor());
1257:       assertFalse(node1.isIn());
1258:       assertFalse(node1.isString());
1259:       assertFalse(node1.isEmpty());
1260:       assertFalse(node1.isTry());
1261:       assertFalse(node1.isCase());
1262:       assertFalse(node1.isInc());
1263:       assertFalse(node1.isTrue());
1264:       assertFalse(node1.isVoid());
1265:       assertFalse(node1.isRegExp());
1266:       assertFalse(node1.isHook());
1267:       assertFalse(node1.isCatch());
1268:       assertFalse(node1.isBreak());
1269:       assertFalse(node1.isComma());
1270:       assertFalse(node1.isSetterDef());
1271:       assertFalse(node1.isObjectLit());
1272:       assertFalse(node1.isThrow());
1273:       assertFalse(node1.isGetProp());
1274:       assertFalse(node1.isFunction());
1275:       assertFalse(node1.isNot());
1276:       assertFalse(node1.isDebugger());
1277:       assertFalse(node1.isCast());
1278:       assertFalse(node1.isFalse());
1279:       assertFalse(node1.isAnd());
1280:       assertFalse(node1.isContinue());
1281:       assertFalse(node1.isNumber());
1282:       assertFalse(node1.isTypeOf());
1283:       assertFalse(node1.isAssignAdd());
1284:       assertFalse(node1.isReturn());
1285:       assertFalse(node1.isOr());
1286:       assertFalse(node1.isAssign());
1287:       assertFalse(node1.isDec());
1288:       assertEquals((-1), node1.getSourcePosition());
1289:       assertTrue(node1.isDelProp());
1290:       assertFalse(node1.isLabel());
1291:       assertFalse(node1.hasChildren());
1292:       assertFalse(node1.isDo());
1293:       assertFalse(node1.hasOneChild());
1294:       assertFalse(node1.isExprResult());
1295:       assertFalse(node1.isWhile());
1296:       assertFalse(node1.isWith());
1297:       assertFalse(node1.isBlock());
1298:       assertFalse(node1.isCall());
1299:       assertFalse(node1.isName());
1300:       assertFalse(node1.isInstanceOf());
1301:       assertFalse(node1.hasMoreThanOneChild());
1302:       assertEquals((-1), node1.getLineno());
1303:       assertFalse(node1.isGetElem());
1304:       assertEquals(31, node1.getType());
1305:       assertFalse(node1.isThis());
1306:       assertFalse(node1.isParamList());
1307:       assertEquals(0, node1.getChildCount());
1308:       assertFalse(node1.isNull());
1309:       assertFalse(node1.isVar());
1310:       assertFalse(node1.isAdd());
1311:       assertFalse(node1.isNew());
1312:       assertFalse(node1.isScript());
1313:       assertFalse(node1.isDefaultCase());
1314:       assertFalse(node1.isSwitch());
1315:       assertEquals((-1), node1.getCharno());
1316:       assertFalse(node1.isStringKey());
1317:       assertFalse(node1.isLabelName());
1318:       assertFalse(node1.isArrayLit());
1319:       
1320:       Node node5 = node3.cloneNode();
1321:       assertNotSame(node0, node3);
1322:       assertNotSame(node0, node5);
1323:       assertNotSame(node0, node1);
1324:       assertNotSame(node1, node5);
1325:       assertNotSame(node1, node0);
1326:       assertSame(node1, node3);
1327:       assertNotSame(node3, node0);
1328:       assertNotSame(node3, node5);
1329:       assertSame(node3, node1);
1330:       assertNotSame(node5, node0);
1331:       assertNotSame(node5, node3);
1332:       assertNotSame(node5, node1);
1333:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1334:       assertEquals(53, Node.INPUT_ID);
1335:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1336:       assertEquals(43, Node.IS_CONSTANT_NAME);
1337:       assertEquals(56, Node.CHANGE_TIME);
1338:       assertEquals(36, Node.QUOTED_PROP);
1339:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1340:       assertEquals(29, Node.JSDOC_INFO_PROP);
1341:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1342:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1343:       assertEquals(32, Node.INCRDECR_PROP);
1344:       assertEquals(12, Node.COLUMN_BITS);
1345:       assertEquals(48, Node.DIRECTIVES);
1346:       assertEquals(37, Node.OPT_ARG_NAME);
1347:       assertEquals(1, Node.DECR_FLAG);
1348:       assertEquals(49, Node.DIRECT_EVAL);
1349:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1350:       assertEquals(4095, Node.COLUMN_MASK);
1351:       assertEquals(40, Node.ORIGINALNAME_PROP);
1352:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1353:       assertEquals(57, Node.REFLECTED_OBJECT);
1354:       assertEquals(54, Node.SLASH_V);
1355:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1356:       assertEquals(39, Node.EMPTY_BLOCK);
1357:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1358:       assertEquals(50, Node.FREE_CALL);
1359:       assertEquals(52, Node.LENGTH);
1360:       assertEquals(8, Node.FLAG_NO_THROWS);
1361:       assertEquals(46, Node.IS_NAMESPACE);
1362:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1363:       assertEquals(55, Node.INFERRED_FUNCTION);
1364:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1365:       assertEquals(57, Node.LAST_PROP);
1366:       assertEquals(47, Node.IS_DISPATCHER);
1367:       assertEquals(2, Node.POST_FLAG);
1368:       assertEquals(30, Node.VAR_ARGS_NAME);
1369:       assertEquals(32, Node.INCRDECR_PROP);
1370:       assertEquals(46, Node.IS_NAMESPACE);
1371:       assertEquals(2, Node.POST_FLAG);
1372:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1373:       assertEquals(12, Node.COLUMN_BITS);
1374:       assertEquals(47, Node.IS_DISPATCHER);
1375:       assertEquals(30, Node.VAR_ARGS_NAME);
1376:       assertEquals(49, Node.DIRECT_EVAL);
1377:       assertEquals(56, Node.CHANGE_TIME);
1378:       assertEquals(37, Node.OPT_ARG_NAME);
1379:       assertEquals(52, Node.LENGTH);
1380:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1381:       assertEquals(36, Node.QUOTED_PROP);
1382:       assertEquals(57, Node.REFLECTED_OBJECT);
1383:       assertEquals(29, Node.JSDOC_INFO_PROP);
1384:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1385:       assertEquals(57, Node.LAST_PROP);
1386:       assertEquals(39, Node.EMPTY_BLOCK);
1387:       assertEquals(55, Node.INFERRED_FUNCTION);
1388:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1389:       assertEquals(53, Node.INPUT_ID);
1390:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1391:       assertEquals(4095, Node.COLUMN_MASK);
1392:       assertEquals(8, Node.FLAG_NO_THROWS);
1393:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1394:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1395:       assertEquals(43, Node.IS_CONSTANT_NAME);
1396:       assertEquals(40, Node.ORIGINALNAME_PROP);
1397:       assertEquals(48, Node.DIRECTIVES);
1398:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1399:       assertEquals(54, Node.SLASH_V);
1400:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1401:       assertEquals(50, Node.FREE_CALL);
1402:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1403:       assertEquals(1, Node.DECR_FLAG);
1404:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1405:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1406:       assertEquals(48, Node.DIRECTIVES);
1407:       assertEquals(8, Node.FLAG_NO_THROWS);
1408:       assertEquals(50, Node.FREE_CALL);
1409:       assertEquals(55, Node.INFERRED_FUNCTION);
1410:       assertEquals(52, Node.LENGTH);
1411:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1412:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1413:       assertEquals(39, Node.EMPTY_BLOCK);
1414:       assertEquals(43, Node.IS_CONSTANT_NAME);
1415:       assertEquals(57, Node.LAST_PROP);
1416:       assertEquals(30, Node.VAR_ARGS_NAME);
1417:       assertEquals(54, Node.SLASH_V);
1418:       assertEquals(40, Node.ORIGINALNAME_PROP);
1419:       assertEquals(2, Node.POST_FLAG);
1420:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1421:       assertEquals(37, Node.OPT_ARG_NAME);
1422:       assertEquals(56, Node.CHANGE_TIME);
1423:       assertEquals(46, Node.IS_NAMESPACE);
1424:       assertEquals(47, Node.IS_DISPATCHER);
1425:       assertEquals(12, Node.COLUMN_BITS);
1426:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1427:       assertEquals(32, Node.INCRDECR_PROP);
1428:       assertEquals(29, Node.JSDOC_INFO_PROP);
1429:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1430:       assertEquals(1, Node.DECR_FLAG);
1431:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1432:       assertEquals(53, Node.INPUT_ID);
1433:       assertEquals(36, Node.QUOTED_PROP);
1434:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1435:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1436:       assertEquals(57, Node.REFLECTED_OBJECT);
1437:       assertEquals(4095, Node.COLUMN_MASK);
1438:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1439:       assertEquals(49, Node.DIRECT_EVAL);
1440:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1441:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1442:       assertEquals(12, Node.COLUMN_BITS);
1443:       assertEquals(30, Node.VAR_ARGS_NAME);
1444:       assertEquals(52, Node.LENGTH);
1445:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1446:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1447:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1448:       assertEquals(57, Node.LAST_PROP);
1449:       assertEquals(32, Node.INCRDECR_PROP);
1450:       assertEquals(1, Node.DECR_FLAG);
1451:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1452:       assertEquals(29, Node.JSDOC_INFO_PROP);
1453:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1454:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1455:       assertEquals(57, Node.REFLECTED_OBJECT);
1456:       assertEquals(8, Node.FLAG_NO_THROWS);
1457:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1458:       assertEquals(56, Node.CHANGE_TIME);
1459:       assertEquals(37, Node.OPT_ARG_NAME);
1460:       assertEquals(48, Node.DIRECTIVES);
1461:       assertEquals(49, Node.DIRECT_EVAL);
1462:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1463:       assertEquals(55, Node.INFERRED_FUNCTION);
1464:       assertEquals(36, Node.QUOTED_PROP);
1465:       assertEquals(4095, Node.COLUMN_MASK);
1466:       assertEquals(53, Node.INPUT_ID);
1467:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1468:       assertEquals(39, Node.EMPTY_BLOCK);
1469:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1470:       assertEquals(40, Node.ORIGINALNAME_PROP);
1471:       assertEquals(47, Node.IS_DISPATCHER);
1472:       assertEquals(2, Node.POST_FLAG);
1473:       assertEquals(50, Node.FREE_CALL);
1474:       assertEquals(46, Node.IS_NAMESPACE);
1475:       assertEquals(54, Node.SLASH_V);
1476:       assertEquals(43, Node.IS_CONSTANT_NAME);
1477:       assertNotNull(node5);
1478:       assertFalse(node0.equals((Object)node3));
1479:       assertFalse(node0.equals((Object)node2));
1480:       assertFalse(node0.equals((Object)node4));
1481:       assertFalse(node0.equals((Object)node1));
1482:       assertFalse(node1.equals((Object)node4));
1483:       assertFalse(node1.equals((Object)node0));
1484:       assertFalse(node1.equals((Object)node2));
1485:       assertFalse(node3.equals((Object)node4));
1486:       assertFalse(node3.equals((Object)node0));
1487:       assertFalse(node3.equals((Object)node2));
1488:       assertFalse(node5.equals((Object)node2));
1489:       assertFalse(node5.equals((Object)node4));
1490:       assertFalse(node5.equals((Object)node0));
1491:       assertFalse(node5.equals((Object)node3));
1492:       assertFalse(node5.equals((Object)node1));
1493:       assertFalse(node0.isVoid());
1494:       assertFalse(node0.isDebugger());
1495:       assertFalse(node0.isTrue());
1496:       assertFalse(node0.isTry());
1497:       assertFalse(node0.isDefaultCase());
1498:       assertFalse(node0.isCatch());
1499:       assertFalse(node0.isFor());
1500:       assertFalse(node0.isArrayLit());
1501:       assertEquals(0, node0.getChildCount());
1502:       assertFalse(node0.isRegExp());
1503:       assertFalse(node0.isFunction());
1504:       assertFalse(node0.isParamList());
1505:       assertEquals(45, node0.getType());
1506:       assertFalse(node0.isStringKey());
1507:       assertFalse(node0.isCase());
1508:       assertFalse(node0.isGetterDef());
1509:       assertFalse(node0.isString());
1510:       assertFalse(node0.isInc());
1511:       assertFalse(node0.isBlock());
1512:       assertFalse(node0.isThrow());
1513:       assertFalse(node0.isContinue());
1514:       assertFalse(node0.isHook());
1515:       assertFalse(node0.hasMoreThanOneChild());
1516:       assertFalse(node0.isFalse());
1517:       assertFalse(node0.isNE());
1518:       assertFalse(node0.isSetterDef());
1519:       assertFalse(node0.isIf());
1520:       assertEquals((-1), node0.getLineno());
1521:       assertFalse(node0.isIn());
1522:       assertFalse(node0.isExprResult());
1523:       assertFalse(node0.isScript());
1524:       assertFalse(node0.hasOneChild());
1525:       assertFalse(node0.isCast());
1526:       assertFalse(node0.isGetElem());
1527:       assertFalse(node0.hasChildren());
1528:       assertFalse(node0.isDec());
1529:       assertFalse(node0.isInstanceOf());
1530:       assertFalse(node0.isTypeOf());
1531:       assertFalse(node0.isAssign());
1532:       assertFalse(node0.isWith());
1533:       assertFalse(node0.isGetProp());
1534:       assertFalse(node0.isComma());
1535:       assertFalse(node0.isThis());
1536:       assertFalse(node0.isReturn());
1537:       assertFalse(node0.isLabelName());
1538:       assertFalse(node0.isAnd());
1539:       assertFalse(node0.isObjectLit());
1540:       assertEquals((-1), node0.getSourcePosition());
1541:       assertFalse(node0.isNot());
1542:       assertFalse(node0.isNumber());
1543:       assertEquals((-1), node0.getCharno());
1544:       assertFalse(node0.isNew());
1545:       assertFalse(node0.isAdd());
1546:       assertFalse(node0.isWhile());
1547:       assertFalse(node0.isDo());
1548:       assertFalse(node0.isSwitch());
1549:       assertFalse(node0.isCall());
1550:       assertFalse(node0.isVar());
1551:       assertFalse(node0.isNull());
1552:       assertFalse(node0.isLabel());
1553:       assertFalse(node0.isDelProp());
1554:       assertFalse(node0.isBreak());
1555:       assertFalse(node0.isAssignAdd());
1556:       assertFalse(node0.isName());
1557:       assertFalse(node0.isEmpty());
1558:       assertFalse(node0.isOr());
1559:       assertFalse(node1.isNE());
1560:       assertFalse(node1.isIf());
1561:       assertFalse(node1.isGetterDef());
1562:       assertFalse(node1.isFor());
1563:       assertFalse(node1.isIn());
1564:       assertFalse(node1.isString());
1565:       assertFalse(node1.isEmpty());
1566:       assertFalse(node1.isTry());
1567:       assertFalse(node1.isCase());
1568:       assertFalse(node1.isInc());
1569:       assertFalse(node1.isTrue());
1570:       assertFalse(node1.isVoid());
1571:       assertFalse(node1.isRegExp());
1572:       assertFalse(node1.isHook());
1573:       assertFalse(node1.isCatch());
1574:       assertFalse(node1.isBreak());
1575:       assertFalse(node1.isComma());
1576:       assertFalse(node1.isSetterDef());
1577:       assertFalse(node1.isObjectLit());
1578:       assertFalse(node1.isThrow());
1579:       assertFalse(node1.isGetProp());
1580:       assertFalse(node1.isFunction());
1581:       assertFalse(node1.isNot());
1582:       assertFalse(node1.isDebugger());
1583:       assertFalse(node1.isCast());
1584:       assertFalse(node1.isFalse());
1585:       assertFalse(node1.isAnd());
1586:       assertFalse(node1.isContinue());
1587:       assertFalse(node1.isNumber());
1588:       assertFalse(node1.isTypeOf());
1589:       assertFalse(node1.isAssignAdd());
1590:       assertFalse(node1.isReturn());
1591:       assertFalse(node1.isOr());
1592:       assertFalse(node1.isAssign());
1593:       assertFalse(node1.isDec());
1594:       assertEquals((-1), node1.getSourcePosition());
1595:       assertTrue(node1.isDelProp());
1596:       assertFalse(node1.isLabel());
1597:       assertFalse(node1.hasChildren());
1598:       assertFalse(node1.isDo());
1599:       assertFalse(node1.hasOneChild());
1600:       assertFalse(node1.isExprResult());
1601:       assertFalse(node1.isWhile());
1602:       assertFalse(node1.isWith());
1603:       assertFalse(node1.isBlock());
1604:       assertFalse(node1.isCall());
1605:       assertFalse(node1.isName());
1606:       assertFalse(node1.isInstanceOf());
1607:       assertFalse(node1.hasMoreThanOneChild());
1608:       assertEquals((-1), node1.getLineno());
1609:       assertFalse(node1.isGetElem());
1610:       assertEquals(31, node1.getType());
1611:       assertFalse(node1.isThis());
1612:       assertFalse(node1.isParamList());
1613:       assertEquals(0, node1.getChildCount());
1614:       assertFalse(node1.isNull());
1615:       assertFalse(node1.isVar());
1616:       assertFalse(node1.isAdd());
1617:       assertFalse(node1.isNew());
1618:       assertFalse(node1.isScript());
1619:       assertFalse(node1.isDefaultCase());
1620:       assertFalse(node1.isSwitch());
1621:       assertEquals((-1), node1.getCharno());
1622:       assertFalse(node1.isStringKey());
1623:       assertFalse(node1.isLabelName());
1624:       assertFalse(node1.isArrayLit());
1625:       assertFalse(node3.isName());
1626:       assertFalse(node3.isStringKey());
1627:       assertFalse(node3.isNull());
1628:       assertFalse(node3.isVar());
1629:       assertFalse(node3.isParamList());
1630:       assertEquals(31, node3.getType());
1631:       assertFalse(node3.isCatch());
1632:       assertFalse(node3.isCall());
1633:       assertFalse(node3.isDo());
1634:       assertFalse(node3.isContinue());
1635:       assertFalse(node3.isDefaultCase());
1636:       assertEquals(0, node3.getChildCount());
1637:       assertFalse(node3.isTrue());
1638:       assertTrue(node3.isDelProp());
1639:       assertFalse(node3.isAssignAdd());
1640:       assertFalse(node3.isAdd());
1641:       assertFalse(node3.isOr());
1642:       assertFalse(node3.isNew());
1643:       assertFalse(node3.isSetterDef());
1644:       assertFalse(node3.isEmpty());
1645:       assertFalse(node3.isAssign());
1646:       assertFalse(node3.isTypeOf());
1647:       assertFalse(node3.isDec());
1648:       assertEquals((-1), node3.getSourcePosition());
1649:       assertFalse(node3.hasChildren());
1650:       assertFalse(node3.isVoid());
1651:       assertFalse(node3.isFunction());
1652:       assertFalse(node3.isCast());
1653:       assertFalse(node3.isExprResult());
1654:       assertFalse(node3.isGetElem());
1655:       assertFalse(node3.isNot());
1656:       assertFalse(node3.isWhile());
1657:       assertFalse(node3.isString());
1658:       assertFalse(node3.isAnd());
1659:       assertFalse(node3.isObjectLit());
1660:       assertFalse(node3.isDebugger());
1661:       assertFalse(node3.isReturn());
1662:       assertFalse(node3.isGetProp());
1663:       assertFalse(node3.isThrow());
1664:       assertFalse(node3.isFalse());
1665:       assertFalse(node3.isComma());
1666:       assertFalse(node3.isHook());
1667:       assertFalse(node3.isThis());
1668:       assertFalse(node3.isSwitch());
1669:       assertFalse(node3.isInstanceOf());
1670:       assertFalse(node3.isBreak());
1671:       assertFalse(node3.isIn());
1672:       assertFalse(node3.isInc());
1673:       assertFalse(node3.isFor());
1674:       assertFalse(node3.isLabelName());
1675:       assertFalse(node3.isGetterDef());
1676:       assertFalse(node3.isIf());
1677:       assertFalse(node3.isNumber());
1678:       assertFalse(node3.isNE());
1679:       assertFalse(node3.isLabel());
1680:       assertEquals((-1), node3.getLineno());
1681:       assertFalse(node3.isArrayLit());
1682:       assertFalse(node3.isCase());
1683:       assertFalse(node3.hasMoreThanOneChild());
1684:       assertFalse(node3.isWith());
1685:       assertFalse(node3.isRegExp());
1686:       assertEquals((-1), node3.getCharno());
1687:       assertFalse(node3.isBlock());
1688:       assertFalse(node3.isTry());
1689:       assertFalse(node3.isScript());
1690:       assertFalse(node3.hasOneChild());
1691:       assertFalse(node5.isIn());
1692:       assertFalse(node5.isIf());
1693:       
1694:       Node node6 = new Node(42, node5, node5);
1695:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1696:       assertEquals(53, Node.INPUT_ID);
1697:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1698:       assertEquals(43, Node.IS_CONSTANT_NAME);
1699:       assertEquals(56, Node.CHANGE_TIME);
1700:       assertEquals(36, Node.QUOTED_PROP);
1701:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1702:       assertEquals(29, Node.JSDOC_INFO_PROP);
1703:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1704:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1705:       assertEquals(32, Node.INCRDECR_PROP);
1706:       assertEquals(12, Node.COLUMN_BITS);
1707:       assertEquals(48, Node.DIRECTIVES);
1708:       assertEquals(37, Node.OPT_ARG_NAME);
1709:       assertEquals(1, Node.DECR_FLAG);
1710:       assertEquals(49, Node.DIRECT_EVAL);
1711:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1712:       assertEquals(4095, Node.COLUMN_MASK);
1713:       assertEquals(40, Node.ORIGINALNAME_PROP);
1714:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1715:       assertEquals(57, Node.REFLECTED_OBJECT);
1716:       assertEquals(54, Node.SLASH_V);
1717:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1718:       assertEquals(39, Node.EMPTY_BLOCK);
1719:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1720:       assertEquals(50, Node.FREE_CALL);
1721:       assertEquals(52, Node.LENGTH);
1722:       assertEquals(8, Node.FLAG_NO_THROWS);
1723:       assertEquals(46, Node.IS_NAMESPACE);
1724:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1725:       assertEquals(55, Node.INFERRED_FUNCTION);
1726:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1727:       assertEquals(57, Node.LAST_PROP);
1728:       assertEquals(47, Node.IS_DISPATCHER);
1729:       assertEquals(2, Node.POST_FLAG);
1730:       assertEquals(30, Node.VAR_ARGS_NAME);
1731:       assertEquals(32, Node.INCRDECR_PROP);
1732:       assertEquals(46, Node.IS_NAMESPACE);
1733:       assertEquals(2, Node.POST_FLAG);
1734:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1735:       assertEquals(12, Node.COLUMN_BITS);
1736:       assertEquals(47, Node.IS_DISPATCHER);
1737:       assertEquals(30, Node.VAR_ARGS_NAME);
1738:       assertEquals(49, Node.DIRECT_EVAL);
1739:       assertEquals(56, Node.CHANGE_TIME);
1740:       assertEquals(37, Node.OPT_ARG_NAME);
1741:       assertEquals(52, Node.LENGTH);
1742:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1743:       assertEquals(36, Node.QUOTED_PROP);
1744:       assertEquals(57, Node.REFLECTED_OBJECT);
1745:       assertEquals(29, Node.JSDOC_INFO_PROP);
1746:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1747:       assertEquals(57, Node.LAST_PROP);
1748:       assertEquals(39, Node.EMPTY_BLOCK);
1749:       assertEquals(55, Node.INFERRED_FUNCTION);
1750:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1751:       assertEquals(53, Node.INPUT_ID);
1752:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1753:       assertEquals(4095, Node.COLUMN_MASK);
1754:       assertEquals(8, Node.FLAG_NO_THROWS);
1755:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1756:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1757:       assertEquals(43, Node.IS_CONSTANT_NAME);
1758:       assertEquals(40, Node.ORIGINALNAME_PROP);
1759:       assertEquals(48, Node.DIRECTIVES);
1760:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1761:       assertEquals(54, Node.SLASH_V);
1762:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1763:       assertEquals(50, Node.FREE_CALL);
1764:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1765:       assertEquals(1, Node.DECR_FLAG);
1766:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1767:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1768:       assertEquals(48, Node.DIRECTIVES);
1769:       assertEquals(8, Node.FLAG_NO_THROWS);
1770:       assertEquals(50, Node.FREE_CALL);
1771:       assertEquals(55, Node.INFERRED_FUNCTION);
1772:       assertEquals(52, Node.LENGTH);
1773:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1774:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1775:       assertEquals(39, Node.EMPTY_BLOCK);
1776:       assertEquals(43, Node.IS_CONSTANT_NAME);
1777:       assertEquals(57, Node.LAST_PROP);
1778:       assertEquals(30, Node.VAR_ARGS_NAME);
1779:       assertEquals(54, Node.SLASH_V);
1780:       assertEquals(40, Node.ORIGINALNAME_PROP);
1781:       assertEquals(2, Node.POST_FLAG);
1782:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1783:       assertEquals(37, Node.OPT_ARG_NAME);
1784:       assertEquals(56, Node.CHANGE_TIME);
1785:       assertEquals(46, Node.IS_NAMESPACE);
1786:       assertEquals(47, Node.IS_DISPATCHER);
1787:       assertEquals(12, Node.COLUMN_BITS);
1788:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1789:       assertEquals(32, Node.INCRDECR_PROP);
1790:       assertEquals(29, Node.JSDOC_INFO_PROP);
1791:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1792:       assertEquals(1, Node.DECR_FLAG);
1793:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1794:       assertEquals(53, Node.INPUT_ID);
1795:       assertEquals(36, Node.QUOTED_PROP);
1796:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1797:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1798:       assertEquals(57, Node.REFLECTED_OBJECT);
1799:       assertEquals(4095, Node.COLUMN_MASK);
1800:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1801:       assertEquals(49, Node.DIRECT_EVAL);
1802:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1803:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1804:       assertEquals(12, Node.COLUMN_BITS);
1805:       assertEquals(30, Node.VAR_ARGS_NAME);
1806:       assertEquals(52, Node.LENGTH);
1807:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1808:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1809:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1810:       assertEquals(57, Node.LAST_PROP);
1811:       assertEquals(32, Node.INCRDECR_PROP);
1812:       assertEquals(1, Node.DECR_FLAG);
1813:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1814:       assertEquals(29, Node.JSDOC_INFO_PROP);
1815:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1816:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1817:       assertEquals(57, Node.REFLECTED_OBJECT);
1818:       assertEquals(8, Node.FLAG_NO_THROWS);
1819:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1820:       assertEquals(56, Node.CHANGE_TIME);
1821:       assertEquals(37, Node.OPT_ARG_NAME);
1822:       assertEquals(48, Node.DIRECTIVES);
1823:       assertEquals(49, Node.DIRECT_EVAL);
1824:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1825:       assertEquals(55, Node.INFERRED_FUNCTION);
1826:       assertEquals(36, Node.QUOTED_PROP);
1827:       assertEquals(4095, Node.COLUMN_MASK);
1828:       assertEquals(53, Node.INPUT_ID);
1829:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1830:       assertEquals(39, Node.EMPTY_BLOCK);
1831:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1832:       assertEquals(40, Node.ORIGINALNAME_PROP);
1833:       assertEquals(47, Node.IS_DISPATCHER);
1834:       assertEquals(2, Node.POST_FLAG);
1835:       assertEquals(50, Node.FREE_CALL);
1836:       assertEquals(46, Node.IS_NAMESPACE);
1837:       assertEquals(54, Node.SLASH_V);
1838:       assertEquals(43, Node.IS_CONSTANT_NAME);
1839:       assertEquals(43, Node.IS_CONSTANT_NAME);
1840:       assertEquals(36, Node.QUOTED_PROP);
1841:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1842:       assertEquals(55, Node.INFERRED_FUNCTION);
1843:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1844:       assertEquals(53, Node.INPUT_ID);
1845:       assertEquals(29, Node.JSDOC_INFO_PROP);
1846:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1847:       assertEquals(39, Node.EMPTY_BLOCK);
1848:       assertEquals(47, Node.IS_DISPATCHER);
1849:       assertEquals(2, Node.POST_FLAG);
1850:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1851:       assertEquals(50, Node.FREE_CALL);
1852:       assertEquals(46, Node.IS_NAMESPACE);
1853:       assertEquals(40, Node.ORIGINALNAME_PROP);
1854:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1855:       assertEquals(57, Node.LAST_PROP);
1856:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1857:       assertEquals(54, Node.SLASH_V);
1858:       assertEquals(30, Node.VAR_ARGS_NAME);
1859:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1860:       assertEquals(12, Node.COLUMN_BITS);
1861:       assertEquals(32, Node.INCRDECR_PROP);
1862:       assertEquals(52, Node.LENGTH);
1863:       assertEquals(1, Node.DECR_FLAG);
1864:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1865:       assertEquals(56, Node.CHANGE_TIME);
1866:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1867:       assertEquals(8, Node.FLAG_NO_THROWS);
1868:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1869:       assertEquals(57, Node.REFLECTED_OBJECT);
1870:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1871:       assertEquals(4095, Node.COLUMN_MASK);
1872:       assertEquals(48, Node.DIRECTIVES);
1873:       assertEquals(49, Node.DIRECT_EVAL);
1874:       assertEquals(37, Node.OPT_ARG_NAME);
1875:       assertNotNull(node6);
1876:       assertFalse(node0.equals((Object)node3));
1877:       assertFalse(node0.equals((Object)node2));
1878:       assertFalse(node0.equals((Object)node5));
1879:       assertFalse(node0.equals((Object)node4));
1880:       assertFalse(node0.equals((Object)node1));
1881:       assertFalse(node1.equals((Object)node5));
1882:       assertFalse(node1.equals((Object)node4));
1883:       assertFalse(node1.equals((Object)node0));
1884:       assertFalse(node1.equals((Object)node2));
1885:       assertFalse(node3.equals((Object)node4));
1886:       assertFalse(node3.equals((Object)node0));
1887:       assertFalse(node3.equals((Object)node5));
1888:       assertFalse(node3.equals((Object)node2));
1889:       assertFalse(node5.equals((Object)node2));
1890:       assertFalse(node5.equals((Object)node4));
1891:       assertFalse(node5.equals((Object)node0));
1892:       assertFalse(node5.equals((Object)node3));
1893:       assertFalse(node5.equals((Object)node1));
1894:       assertFalse(node6.equals((Object)node4));
1895:       assertFalse(node6.equals((Object)node1));
1896:       assertFalse(node6.equals((Object)node0));
1897:       assertFalse(node6.equals((Object)node3));
1898:       assertFalse(node6.equals((Object)node5));
1899:       assertFalse(node6.equals((Object)node2));
1900:       
1901:       Iterable<Node> iterable1 = node4.siblings();
1902:       assertNotSame(node4, node2);
1903:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1904:       assertEquals(8, Node.FLAG_NO_THROWS);
1905:       assertEquals(39, Node.EMPTY_BLOCK);
1906:       assertEquals(48, Node.DIRECTIVES);
1907:       assertEquals(4095, Node.COLUMN_MASK);
1908:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1909:       assertEquals(40, Node.ORIGINALNAME_PROP);
1910:       assertEquals(43, Node.IS_CONSTANT_NAME);
1911:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1912:       assertEquals(54, Node.SLASH_V);
1913:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1914:       assertEquals(1, Node.DECR_FLAG);
1915:       assertEquals(32, Node.INCRDECR_PROP);
1916:       assertEquals(50, Node.FREE_CALL);
1917:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1918:       assertEquals(2, Node.POST_FLAG);
1919:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1920:       assertEquals(37, Node.OPT_ARG_NAME);
1921:       assertEquals(56, Node.CHANGE_TIME);
1922:       assertEquals(47, Node.IS_DISPATCHER);
1923:       assertEquals(12, Node.COLUMN_BITS);
1924:       assertEquals(46, Node.IS_NAMESPACE);
1925:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1926:       assertEquals(49, Node.DIRECT_EVAL);
1927:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1928:       assertEquals(36, Node.QUOTED_PROP);
1929:       assertEquals(57, Node.LAST_PROP);
1930:       assertEquals(30, Node.VAR_ARGS_NAME);
1931:       assertEquals(57, Node.REFLECTED_OBJECT);
1932:       assertEquals(55, Node.INFERRED_FUNCTION);
1933:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1934:       assertEquals(52, Node.LENGTH);
1935:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1936:       assertEquals(29, Node.JSDOC_INFO_PROP);
1937:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1938:       assertEquals(53, Node.INPUT_ID);
1939:       assertNotNull(iterable1);
1940:       assertFalse(node4.equals((Object)node1));
1941:       assertFalse(node4.equals((Object)node6));
1942:       assertFalse(node4.equals((Object)node0));
1943:       assertFalse(node4.equals((Object)node3));
1944:       assertFalse(node4.equals((Object)node5));
1945:       assertFalse(node4.equals((Object)node2));
1946:       assertFalse(iterable1.equals((Object)iterable0));
1947:       
1948:       boolean boolean3 = node6.isNull();
1949:       assertFalse(boolean3);
1950:       assertNotSame(node0, node3);
1951:       assertNotSame(node0, node5);
1952:       assertNotSame(node0, node1);
1953:       assertNotSame(node0, node6);
1954:       assertNotSame(node1, node5);
1955:       assertNotSame(node1, node0);
1956:       assertNotSame(node1, node6);
1957:       assertSame(node1, node3);
1958:       assertNotSame(node3, node6);
1959:       assertNotSame(node3, node0);
1960:       assertNotSame(node3, node5);
1961:       assertSame(node3, node1);
1962:       assertNotSame(node5, node0);
1963:       assertNotSame(node5, node6);
1964:       assertNotSame(node5, node3);
1965:       assertNotSame(node5, node1);
1966:       assertNotSame(node6, node1);
1967:       assertNotSame(node6, node0);
1968:       assertNotSame(node6, node3);
1969:       assertNotSame(node6, node5);
1970:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1971:       assertEquals(53, Node.INPUT_ID);
1972:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1973:       assertEquals(43, Node.IS_CONSTANT_NAME);
1974:       assertEquals(56, Node.CHANGE_TIME);
1975:       assertEquals(36, Node.QUOTED_PROP);
1976:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1977:       assertEquals(29, Node.JSDOC_INFO_PROP);
1978:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1979:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1980:       assertEquals(32, Node.INCRDECR_PROP);
1981:       assertEquals(12, Node.COLUMN_BITS);
1982:       assertEquals(48, Node.DIRECTIVES);
1983:       assertEquals(37, Node.OPT_ARG_NAME);
1984:       assertEquals(1, Node.DECR_FLAG);
1985:       assertEquals(49, Node.DIRECT_EVAL);
1986:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1987:       assertEquals(4095, Node.COLUMN_MASK);
1988:       assertEquals(40, Node.ORIGINALNAME_PROP);
1989:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1990:       assertEquals(57, Node.REFLECTED_OBJECT);
1991:       assertEquals(54, Node.SLASH_V);
1992:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1993:       assertEquals(39, Node.EMPTY_BLOCK);
1994:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1995:       assertEquals(50, Node.FREE_CALL);
1996:       assertEquals(52, Node.LENGTH);
1997:       assertEquals(8, Node.FLAG_NO_THROWS);
1998:       assertEquals(46, Node.IS_NAMESPACE);
1999:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2000:       assertEquals(55, Node.INFERRED_FUNCTION);
2001:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2002:       assertEquals(57, Node.LAST_PROP);
2003:       assertEquals(47, Node.IS_DISPATCHER);
2004:       assertEquals(2, Node.POST_FLAG);
2005:       assertEquals(30, Node.VAR_ARGS_NAME);
2006:       assertEquals(32, Node.INCRDECR_PROP);
2007:       assertEquals(46, Node.IS_NAMESPACE);
2008:       assertEquals(2, Node.POST_FLAG);
2009:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2010:       assertEquals(12, Node.COLUMN_BITS);
2011:       assertEquals(47, Node.IS_DISPATCHER);
2012:       assertEquals(30, Node.VAR_ARGS_NAME);
2013:       assertEquals(49, Node.DIRECT_EVAL);
2014:       assertEquals(56, Node.CHANGE_TIME);
2015:       assertEquals(37, Node.OPT_ARG_NAME);
2016:       assertEquals(52, Node.LENGTH);
2017:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2018:       assertEquals(36, Node.QUOTED_PROP);
2019:       assertEquals(57, Node.REFLECTED_OBJECT);
2020:       assertEquals(29, Node.JSDOC_INFO_PROP);
2021:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2022:       assertEquals(57, Node.LAST_PROP);
2023:       assertEquals(39, Node.EMPTY_BLOCK);
2024:       assertEquals(55, Node.INFERRED_FUNCTION);
2025:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2026:       assertEquals(53, Node.INPUT_ID);
2027:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2028:       assertEquals(4095, Node.COLUMN_MASK);
2029:       assertEquals(8, Node.FLAG_NO_THROWS);
2030:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2031:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2032:       assertEquals(43, Node.IS_CONSTANT_NAME);
2033:       assertEquals(40, Node.ORIGINALNAME_PROP);
2034:       assertEquals(48, Node.DIRECTIVES);
2035:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2036:       assertEquals(54, Node.SLASH_V);
2037:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2038:       assertEquals(50, Node.FREE_CALL);
2039:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2040:       assertEquals(1, Node.DECR_FLAG);
2041:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2042:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2043:       assertEquals(48, Node.DIRECTIVES);
2044:       assertEquals(8, Node.FLAG_NO_THROWS);
2045:       assertEquals(50, Node.FREE_CALL);
2046:       assertEquals(55, Node.INFERRED_FUNCTION);
2047:       assertEquals(52, Node.LENGTH);
2048:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2049:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2050:       assertEquals(39, Node.EMPTY_BLOCK);
2051:       assertEquals(43, Node.IS_CONSTANT_NAME);
2052:       assertEquals(57, Node.LAST_PROP);
2053:       assertEquals(30, Node.VAR_ARGS_NAME);
2054:       assertEquals(54, Node.SLASH_V);
2055:       assertEquals(40, Node.ORIGINALNAME_PROP);
2056:       assertEquals(2, Node.POST_FLAG);
2057:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2058:       assertEquals(37, Node.OPT_ARG_NAME);
2059:       assertEquals(56, Node.CHANGE_TIME);
2060:       assertEquals(46, Node.IS_NAMESPACE);
2061:       assertEquals(47, Node.IS_DISPATCHER);
2062:       assertEquals(12, Node.COLUMN_BITS);
2063:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2064:       assertEquals(32, Node.INCRDECR_PROP);
2065:       assertEquals(29, Node.JSDOC_INFO_PROP);
2066:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2067:       assertEquals(1, Node.DECR_FLAG);
2068:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2069:       assertEquals(53, Node.INPUT_ID);
2070:       assertEquals(36, Node.QUOTED_PROP);
2071:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2072:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2073:       assertEquals(57, Node.REFLECTED_OBJECT);
2074:       assertEquals(4095, Node.COLUMN_MASK);
2075:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2076:       assertEquals(49, Node.DIRECT_EVAL);
2077:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2078:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2079:       assertEquals(12, Node.COLUMN_BITS);
2080:       assertEquals(30, Node.VAR_ARGS_NAME);
2081:       assertEquals(52, Node.LENGTH);
2082:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2083:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2084:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2085:       assertEquals(57, Node.LAST_PROP);
2086:       assertEquals(32, Node.INCRDECR_PROP);
2087:       assertEquals(1, Node.DECR_FLAG);
2088:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2089:       assertEquals(29, Node.JSDOC_INFO_PROP);
2090:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2091:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2092:       assertEquals(57, Node.REFLECTED_OBJECT);
2093:       assertEquals(8, Node.FLAG_NO_THROWS);
2094:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2095:       assertEquals(56, Node.CHANGE_TIME);
2096:       assertEquals(37, Node.OPT_ARG_NAME);
2097:       assertEquals(48, Node.DIRECTIVES);
2098:       assertEquals(49, Node.DIRECT_EVAL);
2099:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2100:       assertEquals(55, Node.INFERRED_FUNCTION);
2101:       assertEquals(36, Node.QUOTED_PROP);
2102:       assertEquals(4095, Node.COLUMN_MASK);
2103:       assertEquals(53, Node.INPUT_ID);
2104:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2105:       assertEquals(39, Node.EMPTY_BLOCK);
2106:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2107:       assertEquals(40, Node.ORIGINALNAME_PROP);
2108:       assertEquals(47, Node.IS_DISPATCHER);
2109:       assertEquals(2, Node.POST_FLAG);
2110:       assertEquals(50, Node.FREE_CALL);
2111:       assertEquals(46, Node.IS_NAMESPACE);
2112:       assertEquals(54, Node.SLASH_V);
2113:       assertEquals(43, Node.IS_CONSTANT_NAME);
2114:       assertEquals(43, Node.IS_CONSTANT_NAME);
2115:       assertEquals(36, Node.QUOTED_PROP);
2116:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2117:       assertEquals(55, Node.INFERRED_FUNCTION);
2118:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2119:       assertEquals(53, Node.INPUT_ID);
2120:       assertEquals(29, Node.JSDOC_INFO_PROP);
2121:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2122:       assertEquals(39, Node.EMPTY_BLOCK);
2123:       assertEquals(47, Node.IS_DISPATCHER);
2124:       assertEquals(2, Node.POST_FLAG);
2125:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2126:       assertEquals(50, Node.FREE_CALL);
2127:       assertEquals(46, Node.IS_NAMESPACE);
2128:       assertEquals(40, Node.ORIGINALNAME_PROP);
2129:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2130:       assertEquals(57, Node.LAST_PROP);
2131:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2132:       assertEquals(54, Node.SLASH_V);
2133:       assertEquals(30, Node.VAR_ARGS_NAME);
2134:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2135:       assertEquals(12, Node.COLUMN_BITS);
2136:       assertEquals(32, Node.INCRDECR_PROP);
2137:       assertEquals(52, Node.LENGTH);
2138:       assertEquals(1, Node.DECR_FLAG);
2139:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2140:       assertEquals(56, Node.CHANGE_TIME);
2141:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2142:       assertEquals(8, Node.FLAG_NO_THROWS);
2143:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2144:       assertEquals(57, Node.REFLECTED_OBJECT);
2145:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2146:       assertEquals(4095, Node.COLUMN_MASK);
2147:       assertEquals(48, Node.DIRECTIVES);
2148:       assertEquals(49, Node.DIRECT_EVAL);
2149:       assertEquals(37, Node.OPT_ARG_NAME);
2150:       assertFalse(node0.equals((Object)node3));
2151:       assertFalse(node0.equals((Object)node2));
2152:       assertFalse(node0.equals((Object)node5));
2153:       assertFalse(node0.equals((Object)node4));
2154:       assertFalse(node0.equals((Object)node1));
2155:       assertFalse(node0.equals((Object)node6));
2156:       assertFalse(node1.equals((Object)node5));
2157:       assertFalse(node1.equals((Object)node4));
2158:       assertFalse(node1.equals((Object)node0));
2159:       assertFalse(node1.equals((Object)node6));
2160:       assertFalse(node1.equals((Object)node2));
2161:       assertFalse(node3.equals((Object)node6));
2162:       assertFalse(node3.equals((Object)node4));
2163:       assertFalse(node3.equals((Object)node0));
2164:       assertFalse(node3.equals((Object)node5));
2165:       assertFalse(node3.equals((Object)node2));
2166:       assertFalse(node5.equals((Object)node2));
2167:       assertFalse(node5.equals((Object)node4));
2168:       assertFalse(node5.equals((Object)node0));
2169:       assertFalse(node5.equals((Object)node6));
2170:       assertFalse(node5.equals((Object)node3));
2171:       assertFalse(node5.equals((Object)node1));
2172:       assertFalse(node6.equals((Object)node4));
2173:       assertFalse(node6.equals((Object)node1));
2174:       assertFalse(node6.equals((Object)node0));
2175:       assertFalse(node6.equals((Object)node3));
2176:       assertFalse(node6.equals((Object)node5));
2177:       assertFalse(node6.equals((Object)node2));
2178:       assertTrue(boolean3 == boolean1);
2179:       assertTrue(boolean3 == boolean0);
2180:       assertTrue(boolean3 == boolean2);
2181:       
2182:       Node node7 = Node.newString("xg6~g", 85, 12);
2183:       assertNotSame(node7, node4);
2184:       assertNotSame(node7, node2);
2185:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2186:       assertEquals(39, Node.EMPTY_BLOCK);
2187:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2188:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2189:       assertEquals(8, Node.FLAG_NO_THROWS);
2190:       assertEquals(50, Node.FREE_CALL);
2191:       assertEquals(57, Node.REFLECTED_OBJECT);
2192:       assertEquals(4095, Node.COLUMN_MASK);
2193:       assertEquals(40, Node.ORIGINALNAME_PROP);
2194:       assertEquals(48, Node.DIRECTIVES);
2195:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2196:       assertEquals(57, Node.LAST_PROP);
2197:       assertEquals(36, Node.QUOTED_PROP);
2198:       assertEquals(30, Node.VAR_ARGS_NAME);
2199:       assertEquals(52, Node.LENGTH);
2200:       assertEquals(55, Node.INFERRED_FUNCTION);
2201:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2202:       assertEquals(53, Node.INPUT_ID);
2203:       assertEquals(56, Node.CHANGE_TIME);
2204:       assertEquals(47, Node.IS_DISPATCHER);
2205:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2206:       assertEquals(29, Node.JSDOC_INFO_PROP);
2207:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2208:       assertEquals(2, Node.POST_FLAG);
2209:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2210:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2211:       assertEquals(46, Node.IS_NAMESPACE);
2212:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2213:       assertEquals(37, Node.OPT_ARG_NAME);
2214:       assertEquals(49, Node.DIRECT_EVAL);
2215:       assertEquals(43, Node.IS_CONSTANT_NAME);
2216:       assertEquals(54, Node.SLASH_V);
2217:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2218:       assertEquals(12, Node.COLUMN_BITS);
2219:       assertEquals(1, Node.DECR_FLAG);
2220:       assertEquals(32, Node.INCRDECR_PROP);
2221:       assertNotNull(node7);
2222:       assertFalse(node7.equals((Object)node4));
2223:       assertFalse(node7.equals((Object)node0));
2224:       assertFalse(node7.equals((Object)node6));
2225:       assertFalse(node7.equals((Object)node1));
2226:       assertFalse(node7.equals((Object)node3));
2227:       assertFalse(node7.equals((Object)node2));
2228:       assertFalse(node7.equals((Object)node5));
2229:       
2230:       Node node8 = new Node(16, node2, node3, node6, (-2355), 1739);
2231:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2232:       assertEquals(53, Node.INPUT_ID);
2233:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2234:       assertEquals(43, Node.IS_CONSTANT_NAME);
2235:       assertEquals(56, Node.CHANGE_TIME);
2236:       assertEquals(36, Node.QUOTED_PROP);
2237:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2238:       assertEquals(29, Node.JSDOC_INFO_PROP);
2239:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2240:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2241:       assertEquals(32, Node.INCRDECR_PROP);
2242:       assertEquals(12, Node.COLUMN_BITS);
2243:       assertEquals(48, Node.DIRECTIVES);
2244:       assertEquals(37, Node.OPT_ARG_NAME);
2245:       assertEquals(1, Node.DECR_FLAG);
2246:       assertEquals(49, Node.DIRECT_EVAL);
2247:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2248:       assertEquals(4095, Node.COLUMN_MASK);
2249:       assertEquals(40, Node.ORIGINALNAME_PROP);
2250:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2251:       assertEquals(57, Node.REFLECTED_OBJECT);
2252:       assertEquals(54, Node.SLASH_V);
2253:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2254:       assertEquals(39, Node.EMPTY_BLOCK);
2255:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2256:       assertEquals(50, Node.FREE_CALL);
2257:       assertEquals(52, Node.LENGTH);
2258:       assertEquals(8, Node.FLAG_NO_THROWS);
2259:       assertEquals(46, Node.IS_NAMESPACE);
2260:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2261:       assertEquals(55, Node.INFERRED_FUNCTION);
2262:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2263:       assertEquals(57, Node.LAST_PROP);
2264:       assertEquals(47, Node.IS_DISPATCHER);
2265:       assertEquals(2, Node.POST_FLAG);
2266:       assertEquals(30, Node.VAR_ARGS_NAME);
2267:       assertEquals(32, Node.INCRDECR_PROP);
2268:       assertEquals(46, Node.IS_NAMESPACE);
2269:       assertEquals(2, Node.POST_FLAG);
2270:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2271:       assertEquals(12, Node.COLUMN_BITS);
2272:       assertEquals(47, Node.IS_DISPATCHER);
2273:       assertEquals(30, Node.VAR_ARGS_NAME);
2274:       assertEquals(49, Node.DIRECT_EVAL);
2275:       assertEquals(56, Node.CHANGE_TIME);
2276:       assertEquals(37, Node.OPT_ARG_NAME);
2277:       assertEquals(52, Node.LENGTH);
2278:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2279:       assertEquals(36, Node.QUOTED_PROP);
2280:       assertEquals(57, Node.REFLECTED_OBJECT);
2281:       assertEquals(29, Node.JSDOC_INFO_PROP);
2282:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2283:       assertEquals(57, Node.LAST_PROP);
2284:       assertEquals(39, Node.EMPTY_BLOCK);
2285:       assertEquals(55, Node.INFERRED_FUNCTION);
2286:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2287:       assertEquals(53, Node.INPUT_ID);
2288:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2289:       assertEquals(4095, Node.COLUMN_MASK);
2290:       assertEquals(8, Node.FLAG_NO_THROWS);
2291:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2292:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2293:       assertEquals(43, Node.IS_CONSTANT_NAME);
2294:       assertEquals(40, Node.ORIGINALNAME_PROP);
2295:       assertEquals(48, Node.DIRECTIVES);
2296:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2297:       assertEquals(54, Node.SLASH_V);
2298:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2299:       assertEquals(50, Node.FREE_CALL);
2300:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2301:       assertEquals(1, Node.DECR_FLAG);
2302:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2303:       assertEquals(46, Node.IS_NAMESPACE);
2304:       assertEquals(2, Node.POST_FLAG);
2305:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2306:       assertEquals(12, Node.COLUMN_BITS);
2307:       assertEquals(47, Node.IS_DISPATCHER);
2308:       assertEquals(29, Node.JSDOC_INFO_PROP);
2309:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2310:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2311:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2312:       assertEquals(57, Node.LAST_PROP);
2313:       assertEquals(32, Node.INCRDECR_PROP);
2314:       assertEquals(1, Node.DECR_FLAG);
2315:       assertEquals(54, Node.SLASH_V);
2316:       assertEquals(30, Node.VAR_ARGS_NAME);
2317:       assertEquals(40, Node.ORIGINALNAME_PROP);
2318:       assertEquals(43, Node.IS_CONSTANT_NAME);
2319:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2320:       assertEquals(4095, Node.COLUMN_MASK);
2321:       assertEquals(8, Node.FLAG_NO_THROWS);
2322:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2323:       assertEquals(50, Node.FREE_CALL);
2324:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2325:       assertEquals(55, Node.INFERRED_FUNCTION);
2326:       assertEquals(39, Node.EMPTY_BLOCK);
2327:       assertEquals(53, Node.INPUT_ID);
2328:       assertEquals(52, Node.LENGTH);
2329:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2330:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2331:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2332:       assertEquals(36, Node.QUOTED_PROP);
2333:       assertEquals(57, Node.REFLECTED_OBJECT);
2334:       assertEquals(49, Node.DIRECT_EVAL);
2335:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2336:       assertEquals(56, Node.CHANGE_TIME);
2337:       assertEquals(37, Node.OPT_ARG_NAME);
2338:       assertEquals(48, Node.DIRECTIVES);
2339:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2340:       assertEquals(48, Node.DIRECTIVES);
2341:       assertEquals(8, Node.FLAG_NO_THROWS);
2342:       assertEquals(50, Node.FREE_CALL);
2343:       assertEquals(55, Node.INFERRED_FUNCTION);
2344:       assertEquals(52, Node.LENGTH);
2345:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2346:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2347:       assertEquals(39, Node.EMPTY_BLOCK);
2348:       assertEquals(43, Node.IS_CONSTANT_NAME);
2349:       assertEquals(57, Node.LAST_PROP);
2350:       assertEquals(30, Node.VAR_ARGS_NAME);
2351:       assertEquals(54, Node.SLASH_V);
2352:       assertEquals(40, Node.ORIGINALNAME_PROP);
2353:       assertEquals(2, Node.POST_FLAG);
2354:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2355:       assertEquals(37, Node.OPT_ARG_NAME);
2356:       assertEquals(56, Node.CHANGE_TIME);
2357:       assertEquals(46, Node.IS_NAMESPACE);
2358:       assertEquals(47, Node.IS_DISPATCHER);
2359:       assertEquals(12, Node.COLUMN_BITS);
2360:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2361:       assertEquals(32, Node.INCRDECR_PROP);
2362:       assertEquals(29, Node.JSDOC_INFO_PROP);
2363:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2364:       assertEquals(1, Node.DECR_FLAG);
2365:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2366:       assertEquals(53, Node.INPUT_ID);
2367:       assertEquals(36, Node.QUOTED_PROP);
2368:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2369:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2370:       assertEquals(57, Node.REFLECTED_OBJECT);
2371:       assertEquals(4095, Node.COLUMN_MASK);
2372:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2373:       assertEquals(49, Node.DIRECT_EVAL);
2374:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2375:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2376:       assertEquals(12, Node.COLUMN_BITS);
2377:       assertEquals(30, Node.VAR_ARGS_NAME);
2378:       assertEquals(52, Node.LENGTH);
2379:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2380:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2381:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2382:       assertEquals(57, Node.LAST_PROP);
2383:       assertEquals(32, Node.INCRDECR_PROP);
2384:       assertEquals(1, Node.DECR_FLAG);
2385:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2386:       assertEquals(29, Node.JSDOC_INFO_PROP);
2387:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2388:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2389:       assertEquals(57, Node.REFLECTED_OBJECT);
2390:       assertEquals(8, Node.FLAG_NO_THROWS);
2391:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2392:       assertEquals(56, Node.CHANGE_TIME);
2393:       assertEquals(37, Node.OPT_ARG_NAME);
2394:       assertEquals(48, Node.DIRECTIVES);
2395:       assertEquals(49, Node.DIRECT_EVAL);
2396:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2397:       assertEquals(55, Node.INFERRED_FUNCTION);
2398:       assertEquals(36, Node.QUOTED_PROP);
2399:       assertEquals(4095, Node.COLUMN_MASK);
2400:       assertEquals(53, Node.INPUT_ID);
2401:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2402:       assertEquals(39, Node.EMPTY_BLOCK);
2403:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2404:       assertEquals(40, Node.ORIGINALNAME_PROP);
2405:       assertEquals(47, Node.IS_DISPATCHER);
2406:       assertEquals(2, Node.POST_FLAG);
2407:       assertEquals(50, Node.FREE_CALL);
2408:       assertEquals(46, Node.IS_NAMESPACE);
2409:       assertEquals(54, Node.SLASH_V);
2410:       assertEquals(43, Node.IS_CONSTANT_NAME);
2411:       assertEquals(43, Node.IS_CONSTANT_NAME);
2412:       assertEquals(36, Node.QUOTED_PROP);
2413:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2414:       assertEquals(55, Node.INFERRED_FUNCTION);
2415:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2416:       assertEquals(53, Node.INPUT_ID);
2417:       assertEquals(29, Node.JSDOC_INFO_PROP);
2418:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2419:       assertEquals(39, Node.EMPTY_BLOCK);
2420:       assertEquals(47, Node.IS_DISPATCHER);
2421:       assertEquals(2, Node.POST_FLAG);
2422:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2423:       assertEquals(50, Node.FREE_CALL);
2424:       assertEquals(46, Node.IS_NAMESPACE);
2425:       assertEquals(40, Node.ORIGINALNAME_PROP);
2426:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2427:       assertEquals(57, Node.LAST_PROP);
2428:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2429:       assertEquals(54, Node.SLASH_V);
2430:       assertEquals(30, Node.VAR_ARGS_NAME);
2431:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2432:       assertEquals(12, Node.COLUMN_BITS);
2433:       assertEquals(32, Node.INCRDECR_PROP);
2434:       assertEquals(52, Node.LENGTH);
2435:       assertEquals(1, Node.DECR_FLAG);
2436:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2437:       assertEquals(56, Node.CHANGE_TIME);
2438:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2439:       assertEquals(8, Node.FLAG_NO_THROWS);
2440:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2441:       assertEquals(57, Node.REFLECTED_OBJECT);
2442:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2443:       assertEquals(4095, Node.COLUMN_MASK);
2444:       assertEquals(48, Node.DIRECTIVES);
2445:       assertEquals(49, Node.DIRECT_EVAL);
2446:       assertEquals(37, Node.OPT_ARG_NAME);
2447:       assertEquals(2, Node.POST_FLAG);
2448:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2449:       assertEquals(37, Node.OPT_ARG_NAME);
2450:       assertEquals(56, Node.CHANGE_TIME);
2451:       assertEquals(47, Node.IS_DISPATCHER);
2452:       assertEquals(12, Node.COLUMN_BITS);
2453:       assertEquals(32, Node.INCRDECR_PROP);
2454:       assertEquals(46, Node.IS_NAMESPACE);
2455:       assertEquals(1, Node.DECR_FLAG);
2456:       assertEquals(29, Node.JSDOC_INFO_PROP);
2457:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2458:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2459:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2460:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2461:       assertEquals(36, Node.QUOTED_PROP);
2462:       assertEquals(57, Node.REFLECTED_OBJECT);
2463:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2464:       assertEquals(49, Node.DIRECT_EVAL);
2465:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2466:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2467:       assertEquals(4095, Node.COLUMN_MASK);
2468:       assertEquals(48, Node.DIRECTIVES);
2469:       assertEquals(39, Node.EMPTY_BLOCK);
2470:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2471:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2472:       assertEquals(50, Node.FREE_CALL);
2473:       assertEquals(55, Node.INFERRED_FUNCTION);
2474:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2475:       assertEquals(52, Node.LENGTH);
2476:       assertEquals(8, Node.FLAG_NO_THROWS);
2477:       assertEquals(53, Node.INPUT_ID);
2478:       assertEquals(54, Node.SLASH_V);
2479:       assertEquals(57, Node.LAST_PROP);
2480:       assertEquals(43, Node.IS_CONSTANT_NAME);
2481:       assertEquals(40, Node.ORIGINALNAME_PROP);
2482:       assertEquals(30, Node.VAR_ARGS_NAME);
2483:       assertNotNull(node8);
2484:       assertFalse(node0.equals((Object)node3));
2485:       assertFalse(node0.equals((Object)node2));
2486:       assertFalse(node0.equals((Object)node5));
2487:       assertFalse(node0.equals((Object)node7));
2488:       assertFalse(node0.equals((Object)node4));
2489:       assertFalse(node0.equals((Object)node1));
2490:       assertFalse(node0.equals((Object)node6));
2491:       assertFalse(node1.equals((Object)node5));
2492:       assertFalse(node1.equals((Object)node4));
2493:       assertFalse(node1.equals((Object)node7));
2494:       assertFalse(node1.equals((Object)node0));
2495:       assertFalse(node1.equals((Object)node6));
2496:       assertFalse(node1.equals((Object)node2));
2497:       assertFalse(node2.equals((Object)node3));
2498:       assertFalse(node2.equals((Object)node1));
2499:       assertFalse(node2.equals((Object)node5));
2500:       assertFalse(node2.equals((Object)node6));
2501:       assertFalse(node2.equals((Object)node0));
2502:       assertFalse(node2.equals((Object)node7));
2503:       assertFalse(node2.equals((Object)node4));
2504:       assertFalse(node3.equals((Object)node6));
2505:       assertFalse(node3.equals((Object)node4));
2506:       assertFalse(node3.equals((Object)node7));
2507:       assertFalse(node3.equals((Object)node0));
2508:       assertFalse(node3.equals((Object)node5));
2509:       assertFalse(node3.equals((Object)node2));
2510:       assertFalse(node5.equals((Object)node7));
2511:       assertFalse(node5.equals((Object)node2));
2512:       assertFalse(node5.equals((Object)node4));
2513:       assertFalse(node5.equals((Object)node0));
2514:       assertFalse(node5.equals((Object)node6));
2515:       assertFalse(node5.equals((Object)node3));
2516:       assertFalse(node5.equals((Object)node1));
2517:       assertFalse(node6.equals((Object)node4));
2518:       assertFalse(node6.equals((Object)node1));
2519:       assertFalse(node6.equals((Object)node7));
2520:       assertFalse(node6.equals((Object)node0));
2521:       assertFalse(node6.equals((Object)node3));
2522:       assertFalse(node6.equals((Object)node5));
2523:       assertFalse(node6.equals((Object)node2));
2524:       assertFalse(node8.equals((Object)node3));
2525:       assertFalse(node8.equals((Object)node5));
2526:       assertFalse(node8.equals((Object)node1));
2527:       assertFalse(node8.equals((Object)node4));
2528:       assertFalse(node8.equals((Object)node0));
2529:       assertFalse(node8.equals((Object)node2));
2530:       assertFalse(node8.equals((Object)node6));
2531:       assertFalse(node8.equals((Object)node7));
2532:       
2533:       // Undeclared exception!
2534:       try { 
2535:         Node.newString(38, (String) null);
2536:         fail("Expecting exception: IllegalArgumentException");
2537:       
2538:       } catch(IllegalArgumentException e) {
2539:          //
2540:          // StringNode: str is null
2541:          //
2542:          verifyException("com.google.javascript.rhino.Node$StringNode", e);
2543:       }
2544:   }
2545: }
RegularFileObject[/tmp/EvoSuite_119_1628157525081/com/google/javascript/rhino/Node_119_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:45 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_119_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_119_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_119_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.JSTypeNative",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.JSType$TypePair",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.JSType$2",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
375:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
377:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
378:     );
379:   }
380: }

[MASTER] 09:58:45.664 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(45);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node0);
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertEquals(45, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());

String string0 = node0.getQualifiedName();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNull(string0);
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertEquals(45, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());

Node node1 = new Node(31);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertTrue(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isDo());
assertFalse(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertEquals(31, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isScript());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());

Node node2 = Node.newString(">F6+n;+C?)~A^");
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertNotNull(node2);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.hasChildren());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isStringKey());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isHook());
assertFalse(node2.isCase());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isInc());
assertFalse(node2.isTrue());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isCall());
assertFalse(node2.isAnd());
assertFalse(node2.isName());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());

Node node3 = node1.useSourceInfoIfMissingFrom(node0);
assertNotSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertSame(node1, node3);
assertNotSame(node3, node0);
assertSame(node3, node1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(node3);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertEquals(45, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertTrue(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isDo());
assertFalse(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertEquals(31, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isScript());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isNull());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertEquals(31, node3.getType());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.isDo());
assertFalse(node3.isContinue());
assertFalse(node3.isDefaultCase());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isTrue());
assertTrue(node3.isDelProp());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isAdd());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isSetterDef());
assertFalse(node3.isEmpty());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.hasChildren());
assertFalse(node3.isVoid());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.isNot());
assertFalse(node3.isWhile());
assertFalse(node3.isString());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isSwitch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isBreak());
assertFalse(node3.isIn());
assertFalse(node3.isInc());
assertFalse(node3.isFor());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isNumber());
assertFalse(node3.isNE());
assertFalse(node3.isLabel());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isArrayLit());
assertFalse(node3.isCase());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isBlock());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node3));
assertNotSame(node0, node3);
assertNotSame(node0, node1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertEquals(45, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());

Node node4 = Node.newString(">F6+n;+C?)~A^", 2, (-1087));
assertNotSame(node4, node2);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNotNull(node4);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.isName());
assertFalse(node4.isVar());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertFalse(node4.isNull());
assertFalse(node4.isNew());
assertTrue(node4.isString());
assertFalse(node4.isSetterDef());
assertFalse(node4.isAdd());
assertFalse(node4.isDo());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDebugger());
assertEquals(40, node4.getType());
assertFalse(node4.isLabel());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isFunction());
assertFalse(node4.isArrayLit());
assertFalse(node4.isContinue());
assertFalse(node4.isLabelName());
assertFalse(node4.isIf());
assertFalse(node4.isNumber());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNE());
assertFalse(node4.isFor());
assertFalse(node4.isTry());
assertFalse(node4.isIn());
assertFalse(node4.hasOneChild());
assertFalse(node4.isScript());
assertFalse(node4.isWith());
assertFalse(node4.isCase());
assertFalse(node4.isRegExp());
assertFalse(node4.isBlock());
assertEquals((-1), node4.getLineno());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isCatch());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isFalse());
assertFalse(node4.isComma());
assertFalse(node4.isThrow());
assertFalse(node4.isHook());
assertFalse(node4.isThis());
assertFalse(node4.isGetProp());
assertFalse(node4.isInc());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isSwitch());
assertFalse(node4.isAnd());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isCast());
assertFalse(node4.isEmpty());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.isDelProp());
assertFalse(node4.isTypeOf());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.hasChildren());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isOr());
assertFalse(node4.isWhile());
assertFalse(node4.isTrue());
assertFalse(node4.isReturn());
assertFalse(node4.isVoid());
assertFalse(node4.isBreak());
assertFalse(node4.isCall());
assertFalse(node4.isExprResult());
assertFalse(node4.isGetElem());

boolean boolean0 = node4.isGetProp();
assertFalse(boolean0);
assertNotSame(node4, node2);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.isName());
assertFalse(node4.isVar());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertFalse(node4.isNull());
assertFalse(node4.isNew());
assertTrue(node4.isString());
assertFalse(node4.isSetterDef());
assertFalse(node4.isAdd());
assertFalse(node4.isDo());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDebugger());
assertEquals(40, node4.getType());
assertFalse(node4.isLabel());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isFunction());
assertFalse(node4.isArrayLit());
assertFalse(node4.isContinue());
assertFalse(node4.isLabelName());
assertFalse(node4.isIf());
assertFalse(node4.isNumber());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNE());
assertFalse(node4.isFor());
assertFalse(node4.isTry());
assertFalse(node4.isIn());
assertFalse(node4.hasOneChild());
assertFalse(node4.isScript());
assertFalse(node4.isWith());
assertFalse(node4.isCase());
assertFalse(node4.isRegExp());
assertFalse(node4.isBlock());
assertEquals((-1), node4.getLineno());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isCatch());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isFalse());
assertFalse(node4.isComma());
assertFalse(node4.isThrow());
assertFalse(node4.isHook());
assertFalse(node4.isThis());
assertFalse(node4.isGetProp());
assertFalse(node4.isInc());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isSwitch());
assertFalse(node4.isAnd());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isCast());
assertFalse(node4.isEmpty());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.isDelProp());
assertFalse(node4.isTypeOf());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.hasChildren());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isOr());
assertFalse(node4.isWhile());
assertFalse(node4.isTrue());
assertFalse(node4.isReturn());
assertFalse(node4.isVoid());
assertFalse(node4.isBreak());
assertFalse(node4.isCall());
assertFalse(node4.isExprResult());
assertFalse(node4.isGetElem());

boolean boolean1 = node0.hasChildren();
assertFalse(boolean1);
assertNotSame(node0, node3);
assertNotSame(node0, node1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertEquals(45, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());

boolean boolean2 = node1.isSwitch();
assertFalse(boolean2);
assertNotSame(node1, node0);
assertSame(node1, node3);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertTrue(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isDo());
assertFalse(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertEquals(31, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isScript());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());

Node node5 = node3.cloneNode();
assertNotSame(node0, node3);
assertNotSame(node0, node5);
assertNotSame(node0, node1);
assertNotSame(node1, node5);
assertNotSame(node1, node0);
assertSame(node1, node3);
assertNotSame(node3, node0);
assertNotSame(node3, node5);
assertSame(node3, node1);
assertNotSame(node5, node0);
assertNotSame(node5, node3);
assertNotSame(node5, node1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(node5);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertEquals(45, node0.getType());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertTrue(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isDo());
assertFalse(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertEquals(31, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isScript());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isNull());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertEquals(31, node3.getType());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.isDo());
assertFalse(node3.isContinue());
assertFalse(node3.isDefaultCase());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isTrue());
assertTrue(node3.isDelProp());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isAdd());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isSetterDef());
assertFalse(node3.isEmpty());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.hasChildren());
assertFalse(node3.isVoid());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.isNot());
assertFalse(node3.isWhile());
assertFalse(node3.isString());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isSwitch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isBreak());
assertFalse(node3.isIn());
assertFalse(node3.isInc());
assertFalse(node3.isFor());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isNumber());
assertFalse(node3.isNE());
assertFalse(node3.isLabel());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isArrayLit());
assertFalse(node3.isCase());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isBlock());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node5.isIn());
assertFalse(node5.isIf());

Node node6 = new Node(42, node5, node5);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotNull(node6);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node2));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node2));

Iterable<Node> iterable1 = node4.siblings();
assertNotSame(node4, node2);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNotNull(iterable1);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node6));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node5));
assertFalse(node4.equals((Object)node2));
assertFalse(iterable1.equals((Object)iterable0));

boolean boolean3 = node6.isNull();
assertFalse(boolean3);
assertNotSame(node0, node3);
assertNotSame(node0, node5);
assertNotSame(node0, node1);
assertNotSame(node0, node6);
assertNotSame(node1, node5);
assertNotSame(node1, node0);
assertNotSame(node1, node6);
assertSame(node1, node3);
assertNotSame(node3, node6);
assertNotSame(node3, node0);
assertNotSame(node3, node5);
assertSame(node3, node1);
assertNotSame(node5, node0);
assertNotSame(node5, node6);
assertNotSame(node5, node3);
assertNotSame(node5, node1);
assertNotSame(node6, node1);
assertNotSame(node6, node0);
assertNotSame(node6, node3);
assertNotSame(node6, node5);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node6));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node6));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node6));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node2));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node6));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node2));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);

Node node7 = Node.newString("xg6~g", 85, 12);
assertNotSame(node7, node4);
assertNotSame(node7, node2);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(node7);
assertFalse(node7.equals((Object)node4));
assertFalse(node7.equals((Object)node0));
assertFalse(node7.equals((Object)node6));
assertFalse(node7.equals((Object)node1));
assertFalse(node7.equals((Object)node3));
assertFalse(node7.equals((Object)node2));
assertFalse(node7.equals((Object)node5));

Node node8 = new Node(16, node2, node3, node6, (-2355), 1739);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node8);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node7));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node6));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node7));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node6));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node6));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node7));
assertFalse(node2.equals((Object)node4));
assertFalse(node3.equals((Object)node6));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node7));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node2));
assertFalse(node5.equals((Object)node7));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node6));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node7));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node2));
assertFalse(node8.equals((Object)node3));
assertFalse(node8.equals((Object)node5));
assertFalse(node8.equals((Object)node1));
assertFalse(node8.equals((Object)node4));
assertFalse(node8.equals((Object)node0));
assertFalse(node8.equals((Object)node2));
assertFalse(node8.equals((Object)node6));
assertFalse(node8.equals((Object)node7));

Node.newString(38, (String) null);

[MASTER] 09:58:47.264 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_127_1628157527063/com/google/javascript/rhino/Node_127_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_127_1628157527063/com/google/javascript/rhino/Node_127_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:47.264 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:47.264 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:47.265 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 766
[MASTER] 09:58:47.266 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_127_1628157527063/com/google/javascript/rhino/Node_127_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:47 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSTypeRegistry;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_127_tmp__ESTest extends Node_127_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = new Node(23, 48, 2810);
23:       assertEquals(51, Node.STATIC_SOURCE_FILE);
24:       assertEquals(12, Node.COLUMN_BITS);
25:       assertEquals(46, Node.IS_NAMESPACE);
26:       assertEquals(49, Node.DIRECT_EVAL);
27:       assertEquals(1, Node.DECR_FLAG);
28:       assertEquals(32, Node.INCRDECR_PROP);
29:       assertEquals(57, Node.LAST_PROP);
30:       assertEquals(2, Node.POST_FLAG);
31:       assertEquals(37, Node.OPT_ARG_NAME);
32:       assertEquals(47, Node.IS_DISPATCHER);
33:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
34:       assertEquals(30, Node.VAR_ARGS_NAME);
35:       assertEquals(40, Node.ORIGINALNAME_PROP);
36:       assertEquals(43, Node.IS_CONSTANT_NAME);
37:       assertEquals(54, Node.SLASH_V);
38:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
39:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
40:       assertEquals(50, Node.FREE_CALL);
41:       assertEquals(4095, Node.COLUMN_MASK);
42:       assertEquals(55, Node.INFERRED_FUNCTION);
43:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
44:       assertEquals(48, Node.DIRECTIVES);
45:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
46:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
47:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
48:       assertEquals(57, Node.REFLECTED_OBJECT);
49:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
50:       assertEquals(36, Node.QUOTED_PROP);
51:       assertEquals(56, Node.CHANGE_TIME);
52:       assertEquals(15, Node.NO_SIDE_EFFECTS);
53:       assertEquals(39, Node.EMPTY_BLOCK);
54:       assertEquals(29, Node.JSDOC_INFO_PROP);
55:       assertEquals(53, Node.INPUT_ID);
56:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
57:       assertEquals(52, Node.LENGTH);
58:       assertEquals(8, Node.FLAG_NO_THROWS);
59:       assertNotNull(node0);
60:       assertFalse(node0.isNE());
61:       assertFalse(node0.isDelProp());
62:       assertFalse(node0.isIf());
63:       assertFalse(node0.isCase());
64:       assertFalse(node0.isEmpty());
65:       assertFalse(node0.isGetterDef());
66:       assertFalse(node0.isString());
67:       assertFalse(node0.isIn());
68:       assertFalse(node0.isInc());
69:       assertEquals(2810, node0.getCharno());
70:       assertFalse(node0.isDebugger());
71:       assertFalse(node0.isArrayLit());
72:       assertFalse(node0.isDefaultCase());
73:       assertFalse(node0.isSwitch());
74:       assertFalse(node0.isThrow());
75:       assertEquals(0, node0.getChildCount());
76:       assertFalse(node0.isFunction());
77:       assertFalse(node0.isFalse());
78:       assertFalse(node0.isThis());
79:       assertFalse(node0.isSetterDef());
80:       assertFalse(node0.isParamList());
81:       assertFalse(node0.isStringKey());
82:       assertEquals(23, node0.getType());
83:       assertFalse(node0.isScript());
84:       assertFalse(node0.isBlock());
85:       assertFalse(node0.isTry());
86:       assertEquals(48, node0.getLineno());
87:       assertFalse(node0.isHook());
88:       assertFalse(node0.hasOneChild());
89:       assertFalse(node0.isFor());
90:       assertFalse(node0.isRegExp());
91:       assertFalse(node0.isInstanceOf());
92:       assertFalse(node0.isCatch());
93:       assertFalse(node0.hasMoreThanOneChild());
94:       assertFalse(node0.isWith());
95:       assertFalse(node0.isOr());
96:       assertFalse(node0.isReturn());
97:       assertFalse(node0.isLabel());
98:       assertFalse(node0.isAssignAdd());
99:       assertFalse(node0.isDo());
100:       assertFalse(node0.isNumber());
101:       assertEquals(199418, node0.getSourcePosition());
102:       assertFalse(node0.isNew());
103:       assertFalse(node0.isAdd());
104:       assertFalse(node0.isVar());
105:       assertFalse(node0.isLabelName());
106:       assertFalse(node0.isCast());
107:       assertFalse(node0.isContinue());
108:       assertFalse(node0.isComma());
109:       assertFalse(node0.isGetProp());
110:       assertFalse(node0.isNull());
111:       assertFalse(node0.isAnd());
112:       assertFalse(node0.isNot());
113:       assertFalse(node0.isObjectLit());
114:       assertFalse(node0.isVoid());
115:       assertFalse(node0.isTrue());
116:       assertFalse(node0.isExprResult());
117:       assertFalse(node0.isWhile());
118:       assertFalse(node0.isName());
119:       assertFalse(node0.isGetElem());
120:       assertFalse(node0.isAssign());
121:       assertFalse(node0.isCall());
122:       assertFalse(node0.isBreak());
123:       assertFalse(node0.hasChildren());
124:       assertFalse(node0.isTypeOf());
125:       assertFalse(node0.isDec());
126:       
127:       boolean boolean0 = node0.isNE();
128:       assertFalse(boolean0);
129:       assertEquals(51, Node.STATIC_SOURCE_FILE);
130:       assertEquals(12, Node.COLUMN_BITS);
131:       assertEquals(46, Node.IS_NAMESPACE);
132:       assertEquals(49, Node.DIRECT_EVAL);
133:       assertEquals(1, Node.DECR_FLAG);
134:       assertEquals(32, Node.INCRDECR_PROP);
135:       assertEquals(57, Node.LAST_PROP);
136:       assertEquals(2, Node.POST_FLAG);
137:       assertEquals(37, Node.OPT_ARG_NAME);
138:       assertEquals(47, Node.IS_DISPATCHER);
139:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
140:       assertEquals(30, Node.VAR_ARGS_NAME);
141:       assertEquals(40, Node.ORIGINALNAME_PROP);
142:       assertEquals(43, Node.IS_CONSTANT_NAME);
143:       assertEquals(54, Node.SLASH_V);
144:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
145:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
146:       assertEquals(50, Node.FREE_CALL);
147:       assertEquals(4095, Node.COLUMN_MASK);
148:       assertEquals(55, Node.INFERRED_FUNCTION);
149:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
150:       assertEquals(48, Node.DIRECTIVES);
151:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
152:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
153:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
154:       assertEquals(57, Node.REFLECTED_OBJECT);
155:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
156:       assertEquals(36, Node.QUOTED_PROP);
157:       assertEquals(56, Node.CHANGE_TIME);
158:       assertEquals(15, Node.NO_SIDE_EFFECTS);
159:       assertEquals(39, Node.EMPTY_BLOCK);
160:       assertEquals(29, Node.JSDOC_INFO_PROP);
161:       assertEquals(53, Node.INPUT_ID);
162:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
163:       assertEquals(52, Node.LENGTH);
164:       assertEquals(8, Node.FLAG_NO_THROWS);
165:       assertFalse(node0.isNE());
166:       assertFalse(node0.isDelProp());
167:       assertFalse(node0.isIf());
168:       assertFalse(node0.isCase());
169:       assertFalse(node0.isEmpty());
170:       assertFalse(node0.isGetterDef());
171:       assertFalse(node0.isString());
172:       assertFalse(node0.isIn());
173:       assertFalse(node0.isInc());
174:       assertEquals(2810, node0.getCharno());
175:       assertFalse(node0.isDebugger());
176:       assertFalse(node0.isArrayLit());
177:       assertFalse(node0.isDefaultCase());
178:       assertFalse(node0.isSwitch());
179:       assertFalse(node0.isThrow());
180:       assertEquals(0, node0.getChildCount());
181:       assertFalse(node0.isFunction());
182:       assertFalse(node0.isFalse());
183:       assertFalse(node0.isThis());
184:       assertFalse(node0.isSetterDef());
185:       assertFalse(node0.isParamList());
186:       assertFalse(node0.isStringKey());
187:       assertEquals(23, node0.getType());
188:       assertFalse(node0.isScript());
189:       assertFalse(node0.isBlock());
190:       assertFalse(node0.isTry());
191:       assertEquals(48, node0.getLineno());
192:       assertFalse(node0.isHook());
193:       assertFalse(node0.hasOneChild());
194:       assertFalse(node0.isFor());
195:       assertFalse(node0.isRegExp());
196:       assertFalse(node0.isInstanceOf());
197:       assertFalse(node0.isCatch());
198:       assertFalse(node0.hasMoreThanOneChild());
199:       assertFalse(node0.isWith());
200:       assertFalse(node0.isOr());
201:       assertFalse(node0.isReturn());
202:       assertFalse(node0.isLabel());
203:       assertFalse(node0.isAssignAdd());
204:       assertFalse(node0.isDo());
205:       assertFalse(node0.isNumber());
206:       assertEquals(199418, node0.getSourcePosition());
207:       assertFalse(node0.isNew());
208:       assertFalse(node0.isAdd());
209:       assertFalse(node0.isVar());
210:       assertFalse(node0.isLabelName());
211:       assertFalse(node0.isCast());
212:       assertFalse(node0.isContinue());
213:       assertFalse(node0.isComma());
214:       assertFalse(node0.isGetProp());
215:       assertFalse(node0.isNull());
216:       assertFalse(node0.isAnd());
217:       assertFalse(node0.isNot());
218:       assertFalse(node0.isObjectLit());
219:       assertFalse(node0.isVoid());
220:       assertFalse(node0.isTrue());
221:       assertFalse(node0.isExprResult());
222:       assertFalse(node0.isWhile());
223:       assertFalse(node0.isName());
224:       assertFalse(node0.isGetElem());
225:       assertFalse(node0.isAssign());
226:       assertFalse(node0.isCall());
227:       assertFalse(node0.isBreak());
228:       assertFalse(node0.hasChildren());
229:       assertFalse(node0.isTypeOf());
230:       assertFalse(node0.isDec());
231:       
232:       boolean boolean1 = node0.isFromExterns();
233:       assertFalse(boolean1);
234:       assertEquals(51, Node.STATIC_SOURCE_FILE);
235:       assertEquals(12, Node.COLUMN_BITS);
236:       assertEquals(46, Node.IS_NAMESPACE);
237:       assertEquals(49, Node.DIRECT_EVAL);
238:       assertEquals(1, Node.DECR_FLAG);
239:       assertEquals(32, Node.INCRDECR_PROP);
240:       assertEquals(57, Node.LAST_PROP);
241:       assertEquals(2, Node.POST_FLAG);
242:       assertEquals(37, Node.OPT_ARG_NAME);
243:       assertEquals(47, Node.IS_DISPATCHER);
244:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
245:       assertEquals(30, Node.VAR_ARGS_NAME);
246:       assertEquals(40, Node.ORIGINALNAME_PROP);
247:       assertEquals(43, Node.IS_CONSTANT_NAME);
248:       assertEquals(54, Node.SLASH_V);
249:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
250:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
251:       assertEquals(50, Node.FREE_CALL);
252:       assertEquals(4095, Node.COLUMN_MASK);
253:       assertEquals(55, Node.INFERRED_FUNCTION);
254:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
255:       assertEquals(48, Node.DIRECTIVES);
256:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
257:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
258:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
259:       assertEquals(57, Node.REFLECTED_OBJECT);
260:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
261:       assertEquals(36, Node.QUOTED_PROP);
262:       assertEquals(56, Node.CHANGE_TIME);
263:       assertEquals(15, Node.NO_SIDE_EFFECTS);
264:       assertEquals(39, Node.EMPTY_BLOCK);
265:       assertEquals(29, Node.JSDOC_INFO_PROP);
266:       assertEquals(53, Node.INPUT_ID);
267:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
268:       assertEquals(52, Node.LENGTH);
269:       assertEquals(8, Node.FLAG_NO_THROWS);
270:       assertTrue(boolean1 == boolean0);
271:       assertFalse(node0.isNE());
272:       assertFalse(node0.isDelProp());
273:       assertFalse(node0.isIf());
274:       assertFalse(node0.isCase());
275:       assertFalse(node0.isEmpty());
276:       assertFalse(node0.isGetterDef());
277:       assertFalse(node0.isString());
278:       assertFalse(node0.isIn());
279:       assertFalse(node0.isInc());
280:       assertEquals(2810, node0.getCharno());
281:       assertFalse(node0.isDebugger());
282:       assertFalse(node0.isArrayLit());
283:       assertFalse(node0.isDefaultCase());
284:       assertFalse(node0.isSwitch());
285:       assertFalse(node0.isThrow());
286:       assertEquals(0, node0.getChildCount());
287:       assertFalse(node0.isFunction());
288:       assertFalse(node0.isFalse());
289:       assertFalse(node0.isThis());
290:       assertFalse(node0.isSetterDef());
291:       assertFalse(node0.isParamList());
292:       assertFalse(node0.isStringKey());
293:       assertEquals(23, node0.getType());
294:       assertFalse(node0.isScript());
295:       assertFalse(node0.isBlock());
296:       assertFalse(node0.isTry());
297:       assertEquals(48, node0.getLineno());
298:       assertFalse(node0.isHook());
299:       assertFalse(node0.hasOneChild());
300:       assertFalse(node0.isFor());
301:       assertFalse(node0.isRegExp());
302:       assertFalse(node0.isInstanceOf());
303:       assertFalse(node0.isCatch());
304:       assertFalse(node0.hasMoreThanOneChild());
305:       assertFalse(node0.isWith());
306:       assertFalse(node0.isOr());
307:       assertFalse(node0.isReturn());
308:       assertFalse(node0.isLabel());
309:       assertFalse(node0.isAssignAdd());
310:       assertFalse(node0.isDo());
311:       assertFalse(node0.isNumber());
312:       assertEquals(199418, node0.getSourcePosition());
313:       assertFalse(node0.isNew());
314:       assertFalse(node0.isAdd());
315:       assertFalse(node0.isVar());
316:       assertFalse(node0.isLabelName());
317:       assertFalse(node0.isCast());
318:       assertFalse(node0.isContinue());
319:       assertFalse(node0.isComma());
320:       assertFalse(node0.isGetProp());
321:       assertFalse(node0.isNull());
322:       assertFalse(node0.isAnd());
323:       assertFalse(node0.isNot());
324:       assertFalse(node0.isObjectLit());
325:       assertFalse(node0.isVoid());
326:       assertFalse(node0.isTrue());
327:       assertFalse(node0.isExprResult());
328:       assertFalse(node0.isWhile());
329:       assertFalse(node0.isName());
330:       assertFalse(node0.isGetElem());
331:       assertFalse(node0.isAssign());
332:       assertFalse(node0.isCall());
333:       assertFalse(node0.isBreak());
334:       assertFalse(node0.hasChildren());
335:       assertFalse(node0.isTypeOf());
336:       assertFalse(node0.isDec());
337:       
338:       node0.putBooleanProp((-410), true);
339:       assertEquals(51, Node.STATIC_SOURCE_FILE);
340:       assertEquals(12, Node.COLUMN_BITS);
341:       assertEquals(46, Node.IS_NAMESPACE);
342:       assertEquals(49, Node.DIRECT_EVAL);
343:       assertEquals(1, Node.DECR_FLAG);
344:       assertEquals(32, Node.INCRDECR_PROP);
345:       assertEquals(57, Node.LAST_PROP);
346:       assertEquals(2, Node.POST_FLAG);
347:       assertEquals(37, Node.OPT_ARG_NAME);
348:       assertEquals(47, Node.IS_DISPATCHER);
349:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
350:       assertEquals(30, Node.VAR_ARGS_NAME);
351:       assertEquals(40, Node.ORIGINALNAME_PROP);
352:       assertEquals(43, Node.IS_CONSTANT_NAME);
353:       assertEquals(54, Node.SLASH_V);
354:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
355:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
356:       assertEquals(50, Node.FREE_CALL);
357:       assertEquals(4095, Node.COLUMN_MASK);
358:       assertEquals(55, Node.INFERRED_FUNCTION);
359:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
360:       assertEquals(48, Node.DIRECTIVES);
361:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
362:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
363:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
364:       assertEquals(57, Node.REFLECTED_OBJECT);
365:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
366:       assertEquals(36, Node.QUOTED_PROP);
367:       assertEquals(56, Node.CHANGE_TIME);
368:       assertEquals(15, Node.NO_SIDE_EFFECTS);
369:       assertEquals(39, Node.EMPTY_BLOCK);
370:       assertEquals(29, Node.JSDOC_INFO_PROP);
371:       assertEquals(53, Node.INPUT_ID);
372:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
373:       assertEquals(52, Node.LENGTH);
374:       assertEquals(8, Node.FLAG_NO_THROWS);
375:       assertFalse(node0.isNE());
376:       assertFalse(node0.isDelProp());
377:       assertFalse(node0.isIf());
378:       assertFalse(node0.isCase());
379:       assertFalse(node0.isEmpty());
380:       assertFalse(node0.isGetterDef());
381:       assertFalse(node0.isString());
382:       assertFalse(node0.isIn());
383:       assertFalse(node0.isInc());
384:       assertEquals(2810, node0.getCharno());
385:       assertFalse(node0.isDebugger());
386:       assertFalse(node0.isArrayLit());
387:       assertFalse(node0.isDefaultCase());
388:       assertFalse(node0.isSwitch());
389:       assertFalse(node0.isThrow());
390:       assertEquals(0, node0.getChildCount());
391:       assertFalse(node0.isFunction());
392:       assertFalse(node0.isFalse());
393:       assertFalse(node0.isThis());
394:       assertFalse(node0.isSetterDef());
395:       assertFalse(node0.isParamList());
396:       assertFalse(node0.isStringKey());
397:       assertEquals(23, node0.getType());
398:       assertFalse(node0.isScript());
399:       assertFalse(node0.isBlock());
400:       assertFalse(node0.isTry());
401:       assertEquals(48, node0.getLineno());
402:       assertFalse(node0.isHook());
403:       assertFalse(node0.hasOneChild());
404:       assertFalse(node0.isFor());
405:       assertFalse(node0.isRegExp());
406:       assertFalse(node0.isInstanceOf());
407:       assertFalse(node0.isCatch());
408:       assertFalse(node0.hasMoreThanOneChild());
409:       assertFalse(node0.isWith());
410:       assertFalse(node0.isOr());
411:       assertFalse(node0.isReturn());
412:       assertFalse(node0.isLabel());
413:       assertFalse(node0.isAssignAdd());
414:       assertFalse(node0.isDo());
415:       assertFalse(node0.isNumber());
416:       assertEquals(199418, node0.getSourcePosition());
417:       assertFalse(node0.isNew());
418:       assertFalse(node0.isAdd());
419:       assertFalse(node0.isVar());
420:       assertFalse(node0.isLabelName());
421:       assertFalse(node0.isCast());
422:       assertFalse(node0.isContinue());
423:       assertFalse(node0.isComma());
424:       assertFalse(node0.isGetProp());
425:       assertFalse(node0.isNull());
426:       assertFalse(node0.isAnd());
427:       assertFalse(node0.isNot());
428:       assertFalse(node0.isObjectLit());
429:       assertFalse(node0.isVoid());
430:       assertFalse(node0.isTrue());
431:       assertFalse(node0.isExprResult());
432:       assertFalse(node0.isWhile());
433:       assertFalse(node0.isName());
434:       assertFalse(node0.isGetElem());
435:       assertFalse(node0.isAssign());
436:       assertFalse(node0.isCall());
437:       assertFalse(node0.isBreak());
438:       assertFalse(node0.hasChildren());
439:       assertFalse(node0.isTypeOf());
440:       assertFalse(node0.isDec());
441:       
442:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
443:       assertNotNull(simpleErrorReporter0);
444:       
445:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
446:       assertNotNull(jSTypeRegistry0);
447:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
448:       
449:       Node node1 = new Node(38);
450:       assertEquals(40, Node.ORIGINALNAME_PROP);
451:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
452:       assertEquals(52, Node.LENGTH);
453:       assertEquals(50, Node.FREE_CALL);
454:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
455:       assertEquals(57, Node.REFLECTED_OBJECT);
456:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
457:       assertEquals(8, Node.FLAG_NO_THROWS);
458:       assertEquals(39, Node.EMPTY_BLOCK);
459:       assertEquals(57, Node.LAST_PROP);
460:       assertEquals(15, Node.NO_SIDE_EFFECTS);
461:       assertEquals(1, Node.DECR_FLAG);
462:       assertEquals(30, Node.VAR_ARGS_NAME);
463:       assertEquals(46, Node.IS_NAMESPACE);
464:       assertEquals(51, Node.STATIC_SOURCE_FILE);
465:       assertEquals(2, Node.POST_FLAG);
466:       assertEquals(54, Node.SLASH_V);
467:       assertEquals(43, Node.IS_CONSTANT_NAME);
468:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
469:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
470:       assertEquals(47, Node.IS_DISPATCHER);
471:       assertEquals(29, Node.JSDOC_INFO_PROP);
472:       assertEquals(32, Node.INCRDECR_PROP);
473:       assertEquals(53, Node.INPUT_ID);
474:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
475:       assertEquals(55, Node.INFERRED_FUNCTION);
476:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
477:       assertEquals(12, Node.COLUMN_BITS);
478:       assertEquals(4095, Node.COLUMN_MASK);
479:       assertEquals(36, Node.QUOTED_PROP);
480:       assertEquals(37, Node.OPT_ARG_NAME);
481:       assertEquals(48, Node.DIRECTIVES);
482:       assertEquals(56, Node.CHANGE_TIME);
483:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
484:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
485:       assertEquals(49, Node.DIRECT_EVAL);
486:       assertNotNull(node1);
487:       assertFalse(node1.equals((Object)node0));
488:       assertFalse(node1.isAdd());
489:       assertFalse(node1.isVar());
490:       assertFalse(node1.isBlock());
491:       assertFalse(node1.isStringKey());
492:       assertFalse(node1.isContinue());
493:       assertFalse(node1.isCall());
494:       assertEquals((-1), node1.getLineno());
495:       assertFalse(node1.isOr());
496:       assertEquals(0, node1.getChildCount());
497:       assertFalse(node1.isAssignAdd());
498:       assertFalse(node1.isNull());
499:       assertFalse(node1.isLabel());
500:       assertFalse(node1.isDo());
501:       assertFalse(node1.isDefaultCase());
502:       assertFalse(node1.isSetterDef());
503:       assertFalse(node1.isNew());
504:       assertFalse(node1.isTrue());
505:       assertFalse(node1.isFunction());
506:       assertFalse(node1.isDebugger());
507:       assertFalse(node1.isDelProp());
508:       assertFalse(node1.isAssign());
509:       assertFalse(node1.isAnd());
510:       assertFalse(node1.isVoid());
511:       assertFalse(node1.isExprResult());
512:       assertFalse(node1.isCast());
513:       assertFalse(node1.isGetElem());
514:       assertFalse(node1.isReturn());
515:       assertFalse(node1.isComma());
516:       assertFalse(node1.isTypeOf());
517:       assertFalse(node1.isObjectLit());
518:       assertFalse(node1.isDec());
519:       assertEquals((-1), node1.getSourcePosition());
520:       assertFalse(node1.hasChildren());
521:       assertFalse(node1.isString());
522:       assertFalse(node1.isWhile());
523:       assertFalse(node1.isNot());
524:       assertFalse(node1.isGetProp());
525:       assertFalse(node1.isThrow());
526:       assertFalse(node1.isHook());
527:       assertEquals((-1), node1.getCharno());
528:       assertFalse(node1.isFalse());
529:       assertFalse(node1.isSwitch());
530:       assertFalse(node1.isBreak());
531:       assertFalse(node1.isIn());
532:       assertTrue(node1.isName());
533:       assertFalse(node1.isNE());
534:       assertFalse(node1.isEmpty());
535:       assertFalse(node1.isInc());
536:       assertFalse(node1.isTry());
537:       assertFalse(node1.isRegExp());
538:       assertFalse(node1.isWith());
539:       assertEquals(38, node1.getType());
540:       assertFalse(node1.isLabelName());
541:       assertFalse(node1.isIf());
542:       assertFalse(node1.isCatch());
543:       assertFalse(node1.isArrayLit());
544:       assertFalse(node1.isInstanceOf());
545:       assertFalse(node1.isThis());
546:       assertFalse(node1.isParamList());
547:       assertFalse(node1.hasMoreThanOneChild());
548:       assertFalse(node1.isGetterDef());
549:       assertFalse(node1.isFor());
550:       assertFalse(node1.isNumber());
551:       assertFalse(node1.isScript());
552:       assertFalse(node1.isCase());
553:       assertFalse(node1.hasOneChild());
554:       
555:       Node node2 = new Node(42, node1);
556:       assertEquals(40, Node.ORIGINALNAME_PROP);
557:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
558:       assertEquals(52, Node.LENGTH);
559:       assertEquals(50, Node.FREE_CALL);
560:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
561:       assertEquals(57, Node.REFLECTED_OBJECT);
562:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
563:       assertEquals(8, Node.FLAG_NO_THROWS);
564:       assertEquals(39, Node.EMPTY_BLOCK);
565:       assertEquals(57, Node.LAST_PROP);
566:       assertEquals(15, Node.NO_SIDE_EFFECTS);
567:       assertEquals(1, Node.DECR_FLAG);
568:       assertEquals(30, Node.VAR_ARGS_NAME);
569:       assertEquals(46, Node.IS_NAMESPACE);
570:       assertEquals(51, Node.STATIC_SOURCE_FILE);
571:       assertEquals(2, Node.POST_FLAG);
572:       assertEquals(54, Node.SLASH_V);
573:       assertEquals(43, Node.IS_CONSTANT_NAME);
574:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
575:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
576:       assertEquals(47, Node.IS_DISPATCHER);
577:       assertEquals(29, Node.JSDOC_INFO_PROP);
578:       assertEquals(32, Node.INCRDECR_PROP);
579:       assertEquals(53, Node.INPUT_ID);
580:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
581:       assertEquals(55, Node.INFERRED_FUNCTION);
582:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
583:       assertEquals(12, Node.COLUMN_BITS);
584:       assertEquals(4095, Node.COLUMN_MASK);
585:       assertEquals(36, Node.QUOTED_PROP);
586:       assertEquals(37, Node.OPT_ARG_NAME);
587:       assertEquals(48, Node.DIRECTIVES);
588:       assertEquals(56, Node.CHANGE_TIME);
589:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
590:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
591:       assertEquals(49, Node.DIRECT_EVAL);
592:       assertEquals(47, Node.IS_DISPATCHER);
593:       assertEquals(56, Node.CHANGE_TIME);
594:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
595:       assertEquals(37, Node.OPT_ARG_NAME);
596:       assertEquals(2, Node.POST_FLAG);
597:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
598:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
599:       assertEquals(30, Node.VAR_ARGS_NAME);
600:       assertEquals(49, Node.DIRECT_EVAL);
601:       assertEquals(57, Node.LAST_PROP);
602:       assertEquals(8, Node.FLAG_NO_THROWS);
603:       assertEquals(39, Node.EMPTY_BLOCK);
604:       assertEquals(36, Node.QUOTED_PROP);
605:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
606:       assertEquals(52, Node.LENGTH);
607:       assertEquals(15, Node.NO_SIDE_EFFECTS);
608:       assertEquals(53, Node.INPUT_ID);
609:       assertEquals(55, Node.INFERRED_FUNCTION);
610:       assertEquals(29, Node.JSDOC_INFO_PROP);
611:       assertEquals(40, Node.ORIGINALNAME_PROP);
612:       assertEquals(50, Node.FREE_CALL);
613:       assertEquals(57, Node.REFLECTED_OBJECT);
614:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
615:       assertEquals(54, Node.SLASH_V);
616:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
617:       assertEquals(48, Node.DIRECTIVES);
618:       assertEquals(4095, Node.COLUMN_MASK);
619:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
620:       assertEquals(51, Node.STATIC_SOURCE_FILE);
621:       assertEquals(1, Node.DECR_FLAG);
622:       assertEquals(32, Node.INCRDECR_PROP);
623:       assertEquals(43, Node.IS_CONSTANT_NAME);
624:       assertEquals(12, Node.COLUMN_BITS);
625:       assertEquals(46, Node.IS_NAMESPACE);
626:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
627:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
628:       assertNotNull(node2);
629:       assertFalse(node1.equals((Object)node0));
630:       assertFalse(node2.equals((Object)node1));
631:       assertFalse(node2.equals((Object)node0));
632:       assertFalse(node1.isAdd());
633:       assertFalse(node1.isVar());
634:       assertFalse(node1.isBlock());
635:       assertFalse(node1.isStringKey());
636:       assertFalse(node1.isContinue());
637:       assertFalse(node1.isCall());
638:       assertEquals((-1), node1.getLineno());
639:       assertFalse(node1.isOr());
640:       assertEquals(0, node1.getChildCount());
641:       assertFalse(node1.isAssignAdd());
642:       assertFalse(node1.isNull());
643:       assertFalse(node1.isLabel());
644:       assertFalse(node1.isDo());
645:       assertFalse(node1.isDefaultCase());
646:       assertFalse(node1.isSetterDef());
647:       assertFalse(node1.isNew());
648:       assertFalse(node1.isTrue());
649:       assertFalse(node1.isFunction());
650:       assertFalse(node1.isDebugger());
651:       assertFalse(node1.isDelProp());
652:       assertFalse(node1.isAssign());
653:       assertFalse(node1.isAnd());
654:       assertFalse(node1.isVoid());
655:       assertFalse(node1.isExprResult());
656:       assertFalse(node1.isCast());
657:       assertFalse(node1.isGetElem());
658:       assertFalse(node1.isReturn());
659:       assertFalse(node1.isComma());
660:       assertFalse(node1.isTypeOf());
661:       assertFalse(node1.isObjectLit());
662:       assertFalse(node1.isDec());
663:       assertEquals((-1), node1.getSourcePosition());
664:       assertFalse(node1.hasChildren());
665:       assertFalse(node1.isString());
666:       assertFalse(node1.isWhile());
667:       assertFalse(node1.isNot());
668:       assertFalse(node1.isGetProp());
669:       assertFalse(node1.isThrow());
670:       assertFalse(node1.isHook());
671:       assertEquals((-1), node1.getCharno());
672:       assertFalse(node1.isFalse());
673:       assertFalse(node1.isSwitch());
674:       assertFalse(node1.isBreak());
675:       assertFalse(node1.isIn());
676:       assertTrue(node1.isName());
677:       assertFalse(node1.isNE());
678:       assertFalse(node1.isEmpty());
679:       assertFalse(node1.isInc());
680:       assertFalse(node1.isTry());
681:       assertFalse(node1.isRegExp());
682:       assertFalse(node1.isWith());
683:       assertEquals(38, node1.getType());
684:       assertFalse(node1.isLabelName());
685:       assertFalse(node1.isIf());
686:       assertFalse(node1.isCatch());
687:       assertFalse(node1.isArrayLit());
688:       assertFalse(node1.isInstanceOf());
689:       assertFalse(node1.isThis());
690:       assertFalse(node1.isParamList());
691:       assertFalse(node1.hasMoreThanOneChild());
692:       assertFalse(node1.isGetterDef());
693:       assertFalse(node1.isFor());
694:       assertFalse(node1.isNumber());
695:       assertFalse(node1.isScript());
696:       assertFalse(node1.isCase());
697:       assertFalse(node1.hasOneChild());
698:       assertFalse(node2.isArrayLit());
699:       assertFalse(node2.isTry());
700:       assertFalse(node2.isVoid());
701:       assertFalse(node2.isTrue());
702:       assertFalse(node2.isDebugger());
703:       assertFalse(node2.isFor());
704:       assertFalse(node2.isDefaultCase());
705:       assertFalse(node2.isGetterDef());
706:       assertFalse(node2.isEmpty());
707:       assertEquals(1, node2.getChildCount());
708:       assertFalse(node2.isIn());
709:       assertFalse(node2.isNull());
710:       assertFalse(node2.isNE());
711:       assertFalse(node2.isDelProp());
712:       assertTrue(node2.hasOneChild());
713:       assertFalse(node2.isIf());
714:       assertFalse(node2.isRegExp());
715:       assertFalse(node2.isName());
716:       assertFalse(node2.isCall());
717:       assertTrue(node2.isThis());
718:       assertTrue(node2.hasChildren());
719:       assertFalse(node2.isCatch());
720:       assertFalse(node2.isThrow());
721:       assertFalse(node2.isString());
722:       assertFalse(node2.isWhile());
723:       assertFalse(node2.isInc());
724:       assertFalse(node2.isSetterDef());
725:       assertFalse(node2.isGetProp());
726:       assertFalse(node2.isAnd());
727:       assertFalse(node2.isFalse());
728:       assertFalse(node2.isFunction());
729:       assertFalse(node2.isContinue());
730:       assertFalse(node2.isCast());
731:       assertFalse(node2.isNumber());
732:       assertEquals((-1), node2.getSourcePosition());
733:       assertFalse(node2.isNot());
734:       assertFalse(node2.isObjectLit());
735:       assertFalse(node2.isScript());
736:       assertEquals((-1), node2.getLineno());
737:       assertFalse(node2.isReturn());
738:       assertFalse(node2.isOr());
739:       assertFalse(node2.isComma());
740:       assertFalse(node2.isBreak());
741:       assertFalse(node2.isWith());
742:       assertFalse(node2.isTypeOf());
743:       assertFalse(node2.isDec());
744:       assertFalse(node2.isAssign());
745:       assertFalse(node2.isExprResult());
746:       assertFalse(node2.hasMoreThanOneChild());
747:       assertFalse(node2.isGetElem());
748:       assertFalse(node2.isInstanceOf());
749:       assertFalse(node2.isNew());
750:       assertEquals((-1), node2.getCharno());
751:       assertFalse(node2.isSwitch());
752:       assertFalse(node2.isHook());
753:       assertFalse(node2.isStringKey());
754:       assertFalse(node2.isBlock());
755:       assertFalse(node2.isVar());
756:       assertFalse(node2.isCase());
757:       assertFalse(node2.isDo());
758:       assertFalse(node2.isAdd());
759:       assertFalse(node2.isLabel());
760:       assertFalse(node2.isAssignAdd());
761:       assertFalse(node2.isParamList());
762:       assertEquals(42, node2.getType());
763:       assertFalse(node2.isLabelName());
764:       
765:       Iterable<Node> iterable0 = node1.children();
766:       assertFalse(iterable0.contains(node1));
767:       assertNotSame(node1, node0);
768:       assertNotSame(node1, node2);
769:       assertEquals(40, Node.ORIGINALNAME_PROP);
770:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
771:       assertEquals(52, Node.LENGTH);
772:       assertEquals(50, Node.FREE_CALL);
773:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
774:       assertEquals(57, Node.REFLECTED_OBJECT);
775:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
776:       assertEquals(8, Node.FLAG_NO_THROWS);
777:       assertEquals(39, Node.EMPTY_BLOCK);
778:       assertEquals(57, Node.LAST_PROP);
779:       assertEquals(15, Node.NO_SIDE_EFFECTS);
780:       assertEquals(1, Node.DECR_FLAG);
781:       assertEquals(30, Node.VAR_ARGS_NAME);
782:       assertEquals(46, Node.IS_NAMESPACE);
783:       assertEquals(51, Node.STATIC_SOURCE_FILE);
784:       assertEquals(2, Node.POST_FLAG);
785:       assertEquals(54, Node.SLASH_V);
786:       assertEquals(43, Node.IS_CONSTANT_NAME);
787:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
788:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
789:       assertEquals(47, Node.IS_DISPATCHER);
790:       assertEquals(29, Node.JSDOC_INFO_PROP);
791:       assertEquals(32, Node.INCRDECR_PROP);
792:       assertEquals(53, Node.INPUT_ID);
793:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
794:       assertEquals(55, Node.INFERRED_FUNCTION);
795:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
796:       assertEquals(12, Node.COLUMN_BITS);
797:       assertEquals(4095, Node.COLUMN_MASK);
798:       assertEquals(36, Node.QUOTED_PROP);
799:       assertEquals(37, Node.OPT_ARG_NAME);
800:       assertEquals(48, Node.DIRECTIVES);
801:       assertEquals(56, Node.CHANGE_TIME);
802:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
803:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
804:       assertEquals(49, Node.DIRECT_EVAL);
805:       assertNotNull(iterable0);
806:       assertFalse(node1.equals((Object)node0));
807:       assertFalse(node1.equals((Object)node2));
808:       assertFalse(node1.isAdd());
809:       assertFalse(node1.isVar());
810:       assertFalse(node1.isBlock());
811:       assertFalse(node1.isStringKey());
812:       assertFalse(node1.isContinue());
813:       assertFalse(node1.isCall());
814:       assertEquals((-1), node1.getLineno());
815:       assertFalse(node1.isOr());
816:       assertEquals(0, node1.getChildCount());
817:       assertFalse(node1.isAssignAdd());
818:       assertFalse(node1.isNull());
819:       assertFalse(node1.isLabel());
820:       assertFalse(node1.isDo());
821:       assertFalse(node1.isDefaultCase());
822:       assertFalse(node1.isSetterDef());
823:       assertFalse(node1.isNew());
824:       assertFalse(node1.isTrue());
825:       assertFalse(node1.isFunction());
826:       assertFalse(node1.isDebugger());
827:       assertFalse(node1.isDelProp());
828:       assertFalse(node1.isAssign());
829:       assertFalse(node1.isAnd());
830:       assertFalse(node1.isVoid());
831:       assertFalse(node1.isExprResult());
832:       assertFalse(node1.isCast());
833:       assertFalse(node1.isGetElem());
834:       assertFalse(node1.isReturn());
835:       assertFalse(node1.isComma());
836:       assertFalse(node1.isTypeOf());
837:       assertFalse(node1.isObjectLit());
838:       assertFalse(node1.isDec());
839:       assertEquals((-1), node1.getSourcePosition());
840:       assertFalse(node1.hasChildren());
841:       assertFalse(node1.isString());
842:       assertFalse(node1.isWhile());
843:       assertFalse(node1.isNot());
844:       assertFalse(node1.isGetProp());
845:       assertFalse(node1.isThrow());
846:       assertFalse(node1.isHook());
847:       assertEquals((-1), node1.getCharno());
848:       assertFalse(node1.isFalse());
849:       assertFalse(node1.isSwitch());
850:       assertFalse(node1.isBreak());
851:       assertFalse(node1.isIn());
852:       assertTrue(node1.isName());
853:       assertFalse(node1.isNE());
854:       assertFalse(node1.isEmpty());
855:       assertFalse(node1.isInc());
856:       assertFalse(node1.isTry());
857:       assertFalse(node1.isRegExp());
858:       assertFalse(node1.isWith());
859:       assertEquals(38, node1.getType());
860:       assertFalse(node1.isLabelName());
861:       assertFalse(node1.isIf());
862:       assertFalse(node1.isCatch());
863:       assertFalse(node1.isArrayLit());
864:       assertFalse(node1.isInstanceOf());
865:       assertFalse(node1.isThis());
866:       assertFalse(node1.isParamList());
867:       assertFalse(node1.hasMoreThanOneChild());
868:       assertFalse(node1.isGetterDef());
869:       assertFalse(node1.isFor());
870:       assertFalse(node1.isNumber());
871:       assertFalse(node1.isScript());
872:       assertFalse(node1.isCase());
873:       assertFalse(node1.hasOneChild());
874:       
875:       boolean boolean2 = node1.isGetProp();
876:       assertFalse(boolean2);
877:       assertNotSame(node1, node0);
878:       assertNotSame(node1, node2);
879:       assertEquals(40, Node.ORIGINALNAME_PROP);
880:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
881:       assertEquals(52, Node.LENGTH);
882:       assertEquals(50, Node.FREE_CALL);
883:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
884:       assertEquals(57, Node.REFLECTED_OBJECT);
885:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
886:       assertEquals(8, Node.FLAG_NO_THROWS);
887:       assertEquals(39, Node.EMPTY_BLOCK);
888:       assertEquals(57, Node.LAST_PROP);
889:       assertEquals(15, Node.NO_SIDE_EFFECTS);
890:       assertEquals(1, Node.DECR_FLAG);
891:       assertEquals(30, Node.VAR_ARGS_NAME);
892:       assertEquals(46, Node.IS_NAMESPACE);
893:       assertEquals(51, Node.STATIC_SOURCE_FILE);
894:       assertEquals(2, Node.POST_FLAG);
895:       assertEquals(54, Node.SLASH_V);
896:       assertEquals(43, Node.IS_CONSTANT_NAME);
897:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
898:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
899:       assertEquals(47, Node.IS_DISPATCHER);
900:       assertEquals(29, Node.JSDOC_INFO_PROP);
901:       assertEquals(32, Node.INCRDECR_PROP);
902:       assertEquals(53, Node.INPUT_ID);
903:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
904:       assertEquals(55, Node.INFERRED_FUNCTION);
905:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
906:       assertEquals(12, Node.COLUMN_BITS);
907:       assertEquals(4095, Node.COLUMN_MASK);
908:       assertEquals(36, Node.QUOTED_PROP);
909:       assertEquals(37, Node.OPT_ARG_NAME);
910:       assertEquals(48, Node.DIRECTIVES);
911:       assertEquals(56, Node.CHANGE_TIME);
912:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
913:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
914:       assertEquals(49, Node.DIRECT_EVAL);
915:       assertFalse(node1.equals((Object)node0));
916:       assertFalse(node1.equals((Object)node2));
917:       assertTrue(boolean2 == boolean1);
918:       assertTrue(boolean2 == boolean0);
919:       assertFalse(node1.isAdd());
920:       assertFalse(node1.isVar());
921:       assertFalse(node1.isBlock());
922:       assertFalse(node1.isStringKey());
923:       assertFalse(node1.isContinue());
924:       assertFalse(node1.isCall());
925:       assertEquals((-1), node1.getLineno());
926:       assertFalse(node1.isOr());
927:       assertEquals(0, node1.getChildCount());
928:       assertFalse(node1.isAssignAdd());
929:       assertFalse(node1.isNull());
930:       assertFalse(node1.isLabel());
931:       assertFalse(node1.isDo());
932:       assertFalse(node1.isDefaultCase());
933:       assertFalse(node1.isSetterDef());
934:       assertFalse(node1.isNew());
935:       assertFalse(node1.isTrue());
936:       assertFalse(node1.isFunction());
937:       assertFalse(node1.isDebugger());
938:       assertFalse(node1.isDelProp());
939:       assertFalse(node1.isAssign());
940:       assertFalse(node1.isAnd());
941:       assertFalse(node1.isVoid());
942:       assertFalse(node1.isExprResult());
943:       assertFalse(node1.isCast());
944:       assertFalse(node1.isGetElem());
945:       assertFalse(node1.isReturn());
946:       assertFalse(node1.isComma());
947:       assertFalse(node1.isTypeOf());
948:       assertFalse(node1.isObjectLit());
949:       assertFalse(node1.isDec());
950:       assertEquals((-1), node1.getSourcePosition());
951:       assertFalse(node1.hasChildren());
952:       assertFalse(node1.isString());
953:       assertFalse(node1.isWhile());
954:       assertFalse(node1.isNot());
955:       assertFalse(node1.isGetProp());
956:       assertFalse(node1.isThrow());
957:       assertFalse(node1.isHook());
958:       assertEquals((-1), node1.getCharno());
959:       assertFalse(node1.isFalse());
960:       assertFalse(node1.isSwitch());
961:       assertFalse(node1.isBreak());
962:       assertFalse(node1.isIn());
963:       assertTrue(node1.isName());
964:       assertFalse(node1.isNE());
965:       assertFalse(node1.isEmpty());
966:       assertFalse(node1.isInc());
967:       assertFalse(node1.isTry());
968:       assertFalse(node1.isRegExp());
969:       assertFalse(node1.isWith());
970:       assertEquals(38, node1.getType());
971:       assertFalse(node1.isLabelName());
972:       assertFalse(node1.isIf());
973:       assertFalse(node1.isCatch());
974:       assertFalse(node1.isArrayLit());
975:       assertFalse(node1.isInstanceOf());
976:       assertFalse(node1.isThis());
977:       assertFalse(node1.isParamList());
978:       assertFalse(node1.hasMoreThanOneChild());
979:       assertFalse(node1.isGetterDef());
980:       assertFalse(node1.isFor());
981:       assertFalse(node1.isNumber());
982:       assertFalse(node1.isScript());
983:       assertFalse(node1.isCase());
984:       assertFalse(node1.hasOneChild());
985:       
986:       boolean boolean3 = node1.isParamList();
987:       assertFalse(boolean3);
988:       assertNotSame(node1, node0);
989:       assertNotSame(node1, node2);
990:       assertEquals(40, Node.ORIGINALNAME_PROP);
991:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
992:       assertEquals(52, Node.LENGTH);
993:       assertEquals(50, Node.FREE_CALL);
994:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
995:       assertEquals(57, Node.REFLECTED_OBJECT);
996:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
997:       assertEquals(8, Node.FLAG_NO_THROWS);
998:       assertEquals(39, Node.EMPTY_BLOCK);
999:       assertEquals(57, Node.LAST_PROP);
1000:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1001:       assertEquals(1, Node.DECR_FLAG);
1002:       assertEquals(30, Node.VAR_ARGS_NAME);
1003:       assertEquals(46, Node.IS_NAMESPACE);
1004:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1005:       assertEquals(2, Node.POST_FLAG);
1006:       assertEquals(54, Node.SLASH_V);
1007:       assertEquals(43, Node.IS_CONSTANT_NAME);
1008:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1009:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1010:       assertEquals(47, Node.IS_DISPATCHER);
1011:       assertEquals(29, Node.JSDOC_INFO_PROP);
1012:       assertEquals(32, Node.INCRDECR_PROP);
1013:       assertEquals(53, Node.INPUT_ID);
1014:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1015:       assertEquals(55, Node.INFERRED_FUNCTION);
1016:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1017:       assertEquals(12, Node.COLUMN_BITS);
1018:       assertEquals(4095, Node.COLUMN_MASK);
1019:       assertEquals(36, Node.QUOTED_PROP);
1020:       assertEquals(37, Node.OPT_ARG_NAME);
1021:       assertEquals(48, Node.DIRECTIVES);
1022:       assertEquals(56, Node.CHANGE_TIME);
1023:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1024:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1025:       assertEquals(49, Node.DIRECT_EVAL);
1026:       assertFalse(node1.equals((Object)node0));
1027:       assertFalse(node1.equals((Object)node2));
1028:       assertTrue(boolean3 == boolean1);
1029:       assertTrue(boolean3 == boolean2);
1030:       assertTrue(boolean3 == boolean0);
1031:       assertFalse(node1.isAdd());
1032:       assertFalse(node1.isVar());
1033:       assertFalse(node1.isBlock());
1034:       assertFalse(node1.isStringKey());
1035:       assertFalse(node1.isContinue());
1036:       assertFalse(node1.isCall());
1037:       assertEquals((-1), node1.getLineno());
1038:       assertFalse(node1.isOr());
1039:       assertEquals(0, node1.getChildCount());
1040:       assertFalse(node1.isAssignAdd());
1041:       assertFalse(node1.isNull());
1042:       assertFalse(node1.isLabel());
1043:       assertFalse(node1.isDo());
1044:       assertFalse(node1.isDefaultCase());
1045:       assertFalse(node1.isSetterDef());
1046:       assertFalse(node1.isNew());
1047:       assertFalse(node1.isTrue());
1048:       assertFalse(node1.isFunction());
1049:       assertFalse(node1.isDebugger());
1050:       assertFalse(node1.isDelProp());
1051:       assertFalse(node1.isAssign());
1052:       assertFalse(node1.isAnd());
1053:       assertFalse(node1.isVoid());
1054:       assertFalse(node1.isExprResult());
1055:       assertFalse(node1.isCast());
1056:       assertFalse(node1.isGetElem());
1057:       assertFalse(node1.isReturn());
1058:       assertFalse(node1.isComma());
1059:       assertFalse(node1.isTypeOf());
1060:       assertFalse(node1.isObjectLit());
1061:       assertFalse(node1.isDec());
1062:       assertEquals((-1), node1.getSourcePosition());
1063:       assertFalse(node1.hasChildren());
1064:       assertFalse(node1.isString());
1065:       assertFalse(node1.isWhile());
1066:       assertFalse(node1.isNot());
1067:       assertFalse(node1.isGetProp());
1068:       assertFalse(node1.isThrow());
1069:       assertFalse(node1.isHook());
1070:       assertEquals((-1), node1.getCharno());
1071:       assertFalse(node1.isFalse());
1072:       assertFalse(node1.isSwitch());
1073:       assertFalse(node1.isBreak());
1074:       assertFalse(node1.isIn());
1075:       assertTrue(node1.isName());
1076:       assertFalse(node1.isNE());
1077:       assertFalse(node1.isEmpty());
1078:       assertFalse(node1.isInc());
1079:       assertFalse(node1.isTry());
1080:       assertFalse(node1.isRegExp());
1081:       assertFalse(node1.isWith());
1082:       assertEquals(38, node1.getType());
1083:       assertFalse(node1.isLabelName());
1084:       assertFalse(node1.isIf());
1085:       assertFalse(node1.isCatch());
1086:       assertFalse(node1.isArrayLit());
1087:       assertFalse(node1.isInstanceOf());
1088:       assertFalse(node1.isThis());
1089:       assertFalse(node1.isParamList());
1090:       assertFalse(node1.hasMoreThanOneChild());
1091:       assertFalse(node1.isGetterDef());
1092:       assertFalse(node1.isFor());
1093:       assertFalse(node1.isNumber());
1094:       assertFalse(node1.isScript());
1095:       assertFalse(node1.isCase());
1096:       assertFalse(node1.hasOneChild());
1097:       
1098:       boolean boolean4 = node2.isSetterDef();
1099:       assertFalse(boolean4);
1100:       assertNotSame(node1, node0);
1101:       assertNotSame(node1, node2);
1102:       assertNotSame(node2, node1);
1103:       assertNotSame(node2, node0);
1104:       assertEquals(40, Node.ORIGINALNAME_PROP);
1105:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1106:       assertEquals(52, Node.LENGTH);
1107:       assertEquals(50, Node.FREE_CALL);
1108:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1109:       assertEquals(57, Node.REFLECTED_OBJECT);
1110:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1111:       assertEquals(8, Node.FLAG_NO_THROWS);
1112:       assertEquals(39, Node.EMPTY_BLOCK);
1113:       assertEquals(57, Node.LAST_PROP);
1114:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1115:       assertEquals(1, Node.DECR_FLAG);
1116:       assertEquals(30, Node.VAR_ARGS_NAME);
1117:       assertEquals(46, Node.IS_NAMESPACE);
1118:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1119:       assertEquals(2, Node.POST_FLAG);
1120:       assertEquals(54, Node.SLASH_V);
1121:       assertEquals(43, Node.IS_CONSTANT_NAME);
1122:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1123:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1124:       assertEquals(47, Node.IS_DISPATCHER);
1125:       assertEquals(29, Node.JSDOC_INFO_PROP);
1126:       assertEquals(32, Node.INCRDECR_PROP);
1127:       assertEquals(53, Node.INPUT_ID);
1128:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1129:       assertEquals(55, Node.INFERRED_FUNCTION);
1130:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1131:       assertEquals(12, Node.COLUMN_BITS);
1132:       assertEquals(4095, Node.COLUMN_MASK);
1133:       assertEquals(36, Node.QUOTED_PROP);
1134:       assertEquals(37, Node.OPT_ARG_NAME);
1135:       assertEquals(48, Node.DIRECTIVES);
1136:       assertEquals(56, Node.CHANGE_TIME);
1137:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1138:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1139:       assertEquals(49, Node.DIRECT_EVAL);
1140:       assertEquals(47, Node.IS_DISPATCHER);
1141:       assertEquals(56, Node.CHANGE_TIME);
1142:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1143:       assertEquals(37, Node.OPT_ARG_NAME);
1144:       assertEquals(2, Node.POST_FLAG);
1145:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1146:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1147:       assertEquals(30, Node.VAR_ARGS_NAME);
1148:       assertEquals(49, Node.DIRECT_EVAL);
1149:       assertEquals(57, Node.LAST_PROP);
1150:       assertEquals(8, Node.FLAG_NO_THROWS);
1151:       assertEquals(39, Node.EMPTY_BLOCK);
1152:       assertEquals(36, Node.QUOTED_PROP);
1153:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1154:       assertEquals(52, Node.LENGTH);
1155:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1156:       assertEquals(53, Node.INPUT_ID);
1157:       assertEquals(55, Node.INFERRED_FUNCTION);
1158:       assertEquals(29, Node.JSDOC_INFO_PROP);
1159:       assertEquals(40, Node.ORIGINALNAME_PROP);
1160:       assertEquals(50, Node.FREE_CALL);
1161:       assertEquals(57, Node.REFLECTED_OBJECT);
1162:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1163:       assertEquals(54, Node.SLASH_V);
1164:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1165:       assertEquals(48, Node.DIRECTIVES);
1166:       assertEquals(4095, Node.COLUMN_MASK);
1167:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1168:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1169:       assertEquals(1, Node.DECR_FLAG);
1170:       assertEquals(32, Node.INCRDECR_PROP);
1171:       assertEquals(43, Node.IS_CONSTANT_NAME);
1172:       assertEquals(12, Node.COLUMN_BITS);
1173:       assertEquals(46, Node.IS_NAMESPACE);
1174:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1175:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1176:       assertFalse(node1.equals((Object)node0));
1177:       assertFalse(node1.equals((Object)node2));
1178:       assertFalse(node2.equals((Object)node1));
1179:       assertFalse(node2.equals((Object)node0));
1180:       assertTrue(boolean4 == boolean0);
1181:       assertTrue(boolean4 == boolean1);
1182:       assertTrue(boolean4 == boolean3);
1183:       assertTrue(boolean4 == boolean2);
1184:       assertFalse(node1.isAdd());
1185:       assertFalse(node1.isVar());
1186:       assertFalse(node1.isBlock());
1187:       assertFalse(node1.isStringKey());
1188:       assertFalse(node1.isContinue());
1189:       assertFalse(node1.isCall());
1190:       assertEquals((-1), node1.getLineno());
1191:       assertFalse(node1.isOr());
1192:       assertEquals(0, node1.getChildCount());
1193:       assertFalse(node1.isAssignAdd());
1194:       assertFalse(node1.isNull());
1195:       assertFalse(node1.isLabel());
1196:       assertFalse(node1.isDo());
1197:       assertFalse(node1.isDefaultCase());
1198:       assertFalse(node1.isSetterDef());
1199:       assertFalse(node1.isNew());
1200:       assertFalse(node1.isTrue());
1201:       assertFalse(node1.isFunction());
1202:       assertFalse(node1.isDebugger());
1203:       assertFalse(node1.isDelProp());
1204:       assertFalse(node1.isAssign());
1205:       assertFalse(node1.isAnd());
1206:       assertFalse(node1.isVoid());
1207:       assertFalse(node1.isExprResult());
1208:       assertFalse(node1.isCast());
1209:       assertFalse(node1.isGetElem());
1210:       assertFalse(node1.isReturn());
1211:       assertFalse(node1.isComma());
1212:       assertFalse(node1.isTypeOf());
1213:       assertFalse(node1.isObjectLit());
1214:       assertFalse(node1.isDec());
1215:       assertEquals((-1), node1.getSourcePosition());
1216:       assertFalse(node1.hasChildren());
1217:       assertFalse(node1.isString());
1218:       assertFalse(node1.isWhile());
1219:       assertFalse(node1.isNot());
1220:       assertFalse(node1.isGetProp());
1221:       assertFalse(node1.isThrow());
1222:       assertFalse(node1.isHook());
1223:       assertEquals((-1), node1.getCharno());
1224:       assertFalse(node1.isFalse());
1225:       assertFalse(node1.isSwitch());
1226:       assertFalse(node1.isBreak());
1227:       assertFalse(node1.isIn());
1228:       assertTrue(node1.isName());
1229:       assertFalse(node1.isNE());
1230:       assertFalse(node1.isEmpty());
1231:       assertFalse(node1.isInc());
1232:       assertFalse(node1.isTry());
1233:       assertFalse(node1.isRegExp());
1234:       assertFalse(node1.isWith());
1235:       assertEquals(38, node1.getType());
1236:       assertFalse(node1.isLabelName());
1237:       assertFalse(node1.isIf());
1238:       assertFalse(node1.isCatch());
1239:       assertFalse(node1.isArrayLit());
1240:       assertFalse(node1.isInstanceOf());
1241:       assertFalse(node1.isThis());
1242:       assertFalse(node1.isParamList());
1243:       assertFalse(node1.hasMoreThanOneChild());
1244:       assertFalse(node1.isGetterDef());
1245:       assertFalse(node1.isFor());
1246:       assertFalse(node1.isNumber());
1247:       assertFalse(node1.isScript());
1248:       assertFalse(node1.isCase());
1249:       assertFalse(node1.hasOneChild());
1250:       assertFalse(node2.isArrayLit());
1251:       assertFalse(node2.isTry());
1252:       assertFalse(node2.isVoid());
1253:       assertFalse(node2.isTrue());
1254:       assertFalse(node2.isDebugger());
1255:       assertFalse(node2.isFor());
1256:       assertFalse(node2.isDefaultCase());
1257:       assertFalse(node2.isGetterDef());
1258:       assertFalse(node2.isEmpty());
1259:       assertEquals(1, node2.getChildCount());
1260:       assertFalse(node2.isIn());
1261:       assertFalse(node2.isNull());
1262:       assertFalse(node2.isNE());
1263:       assertFalse(node2.isDelProp());
1264:       assertTrue(node2.hasOneChild());
1265:       assertFalse(node2.isIf());
1266:       assertFalse(node2.isRegExp());
1267:       assertFalse(node2.isName());
1268:       assertFalse(node2.isCall());
1269:       assertTrue(node2.isThis());
1270:       assertTrue(node2.hasChildren());
1271:       assertFalse(node2.isCatch());
1272:       assertFalse(node2.isThrow());
1273:       assertFalse(node2.isString());
1274:       assertFalse(node2.isWhile());
1275:       assertFalse(node2.isInc());
1276:       assertFalse(node2.isSetterDef());
1277:       assertFalse(node2.isGetProp());
1278:       assertFalse(node2.isAnd());
1279:       assertFalse(node2.isFalse());
1280:       assertFalse(node2.isFunction());
1281:       assertFalse(node2.isContinue());
1282:       assertFalse(node2.isCast());
1283:       assertFalse(node2.isNumber());
1284:       assertEquals((-1), node2.getSourcePosition());
1285:       assertFalse(node2.isNot());
1286:       assertFalse(node2.isObjectLit());
1287:       assertFalse(node2.isScript());
1288:       assertEquals((-1), node2.getLineno());
1289:       assertFalse(node2.isReturn());
1290:       assertFalse(node2.isOr());
1291:       assertFalse(node2.isComma());
1292:       assertFalse(node2.isBreak());
1293:       assertFalse(node2.isWith());
1294:       assertFalse(node2.isTypeOf());
1295:       assertFalse(node2.isDec());
1296:       assertFalse(node2.isAssign());
1297:       assertFalse(node2.isExprResult());
1298:       assertFalse(node2.hasMoreThanOneChild());
1299:       assertFalse(node2.isGetElem());
1300:       assertFalse(node2.isInstanceOf());
1301:       assertFalse(node2.isNew());
1302:       assertEquals((-1), node2.getCharno());
1303:       assertFalse(node2.isSwitch());
1304:       assertFalse(node2.isHook());
1305:       assertFalse(node2.isStringKey());
1306:       assertFalse(node2.isBlock());
1307:       assertFalse(node2.isVar());
1308:       assertFalse(node2.isCase());
1309:       assertFalse(node2.isDo());
1310:       assertFalse(node2.isAdd());
1311:       assertFalse(node2.isLabel());
1312:       assertFalse(node2.isAssignAdd());
1313:       assertFalse(node2.isParamList());
1314:       assertEquals(42, node2.getType());
1315:       assertFalse(node2.isLabelName());
1316:       
1317:       Node node3 = Node.newString("Object#Key");
1318:       assertEquals(53, Node.INPUT_ID);
1319:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1320:       assertEquals(43, Node.IS_CONSTANT_NAME);
1321:       assertEquals(36, Node.QUOTED_PROP);
1322:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1323:       assertEquals(29, Node.JSDOC_INFO_PROP);
1324:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1325:       assertEquals(55, Node.INFERRED_FUNCTION);
1326:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1327:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1328:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1329:       assertEquals(2, Node.POST_FLAG);
1330:       assertEquals(46, Node.IS_NAMESPACE);
1331:       assertEquals(47, Node.IS_DISPATCHER);
1332:       assertEquals(30, Node.VAR_ARGS_NAME);
1333:       assertEquals(40, Node.ORIGINALNAME_PROP);
1334:       assertEquals(54, Node.SLASH_V);
1335:       assertEquals(52, Node.LENGTH);
1336:       assertEquals(57, Node.REFLECTED_OBJECT);
1337:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1338:       assertEquals(1, Node.DECR_FLAG);
1339:       assertEquals(50, Node.FREE_CALL);
1340:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1341:       assertEquals(57, Node.LAST_PROP);
1342:       assertEquals(39, Node.EMPTY_BLOCK);
1343:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1344:       assertEquals(48, Node.DIRECTIVES);
1345:       assertEquals(8, Node.FLAG_NO_THROWS);
1346:       assertEquals(32, Node.INCRDECR_PROP);
1347:       assertEquals(56, Node.CHANGE_TIME);
1348:       assertEquals(12, Node.COLUMN_BITS);
1349:       assertEquals(49, Node.DIRECT_EVAL);
1350:       assertEquals(4095, Node.COLUMN_MASK);
1351:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1352:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1353:       assertEquals(37, Node.OPT_ARG_NAME);
1354:       assertNotNull(node3);
1355:       assertFalse(node3.equals((Object)node2));
1356:       assertFalse(node3.equals((Object)node0));
1357:       assertFalse(node3.equals((Object)node1));
1358:       assertFalse(node3.isScript());
1359:       assertFalse(node3.isWith());
1360:       assertFalse(node3.isNot());
1361:       assertFalse(node3.isObjectLit());
1362:       assertFalse(node3.isInstanceOf());
1363:       assertFalse(node3.isCast());
1364:       assertFalse(node3.isAnd());
1365:       assertFalse(node3.isGetElem());
1366:       assertFalse(node3.isLabelName());
1367:       assertFalse(node3.isExprResult());
1368:       assertFalse(node3.isFalse());
1369:       assertFalse(node3.isOr());
1370:       assertFalse(node3.isThrow());
1371:       assertFalse(node3.isLabel());
1372:       assertFalse(node3.isAssignAdd());
1373:       assertFalse(node3.isDo());
1374:       assertFalse(node3.isInc());
1375:       assertFalse(node3.isSwitch());
1376:       assertFalse(node3.isBlock());
1377:       assertEquals((-1), node3.getCharno());
1378:       assertFalse(node3.hasMoreThanOneChild());
1379:       assertEquals((-1), node3.getLineno());
1380:       assertFalse(node3.isNumber());
1381:       assertFalse(node3.isGetterDef());
1382:       assertFalse(node3.isParamList());
1383:       assertFalse(node3.isStringKey());
1384:       assertFalse(node3.isFor());
1385:       assertFalse(node3.isThis());
1386:       assertFalse(node3.isHook());
1387:       assertFalse(node3.hasOneChild());
1388:       assertFalse(node3.isCase());
1389:       assertTrue(node3.isString());
1390:       assertFalse(node3.isTry());
1391:       assertFalse(node3.isRegExp());
1392:       assertFalse(node3.isFunction());
1393:       assertFalse(node3.isDefaultCase());
1394:       assertEquals(40, node3.getType());
1395:       assertFalse(node3.isTrue());
1396:       assertFalse(node3.isDebugger());
1397:       assertEquals(0, node3.getChildCount());
1398:       assertFalse(node3.isCatch());
1399:       assertFalse(node3.isVoid());
1400:       assertFalse(node3.isArrayLit());
1401:       assertFalse(node3.isNull());
1402:       assertFalse(node3.isNE());
1403:       assertFalse(node3.isDelProp());
1404:       assertFalse(node3.isIf());
1405:       assertFalse(node3.isVar());
1406:       assertFalse(node3.isIn());
1407:       assertFalse(node3.isNew());
1408:       assertFalse(node3.isEmpty());
1409:       assertFalse(node3.isAdd());
1410:       assertFalse(node3.isSetterDef());
1411:       assertFalse(node3.isWhile());
1412:       assertFalse(node3.isContinue());
1413:       assertFalse(node3.isName());
1414:       assertFalse(node3.isCall());
1415:       assertFalse(node3.isBreak());
1416:       assertFalse(node3.isTypeOf());
1417:       assertFalse(node3.isDec());
1418:       assertEquals((-1), node3.getSourcePosition());
1419:       assertFalse(node3.isAssign());
1420:       assertFalse(node3.isComma());
1421:       assertFalse(node3.isReturn());
1422:       assertFalse(node3.hasChildren());
1423:       assertFalse(node3.isGetProp());
1424:       
1425:       boolean boolean5 = node0.isUnscopedQualifiedName();
1426:       assertFalse(boolean5);
1427:       assertNotSame(node0, node2);
1428:       assertNotSame(node0, node1);
1429:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1430:       assertEquals(12, Node.COLUMN_BITS);
1431:       assertEquals(46, Node.IS_NAMESPACE);
1432:       assertEquals(49, Node.DIRECT_EVAL);
1433:       assertEquals(1, Node.DECR_FLAG);
1434:       assertEquals(32, Node.INCRDECR_PROP);
1435:       assertEquals(57, Node.LAST_PROP);
1436:       assertEquals(2, Node.POST_FLAG);
1437:       assertEquals(37, Node.OPT_ARG_NAME);
1438:       assertEquals(47, Node.IS_DISPATCHER);
1439:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1440:       assertEquals(30, Node.VAR_ARGS_NAME);
1441:       assertEquals(40, Node.ORIGINALNAME_PROP);
1442:       assertEquals(43, Node.IS_CONSTANT_NAME);
1443:       assertEquals(54, Node.SLASH_V);
1444:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1445:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1446:       assertEquals(50, Node.FREE_CALL);
1447:       assertEquals(4095, Node.COLUMN_MASK);
1448:       assertEquals(55, Node.INFERRED_FUNCTION);
1449:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1450:       assertEquals(48, Node.DIRECTIVES);
1451:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1452:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1453:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1454:       assertEquals(57, Node.REFLECTED_OBJECT);
1455:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1456:       assertEquals(36, Node.QUOTED_PROP);
1457:       assertEquals(56, Node.CHANGE_TIME);
1458:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1459:       assertEquals(39, Node.EMPTY_BLOCK);
1460:       assertEquals(29, Node.JSDOC_INFO_PROP);
1461:       assertEquals(53, Node.INPUT_ID);
1462:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1463:       assertEquals(52, Node.LENGTH);
1464:       assertEquals(8, Node.FLAG_NO_THROWS);
1465:       assertFalse(node0.equals((Object)node2));
1466:       assertFalse(node0.equals((Object)node3));
1467:       assertFalse(node0.equals((Object)node1));
1468:       assertTrue(boolean5 == boolean3);
1469:       assertTrue(boolean5 == boolean2);
1470:       assertTrue(boolean5 == boolean0);
1471:       assertTrue(boolean5 == boolean1);
1472:       assertTrue(boolean5 == boolean4);
1473:       assertFalse(node0.isNE());
1474:       assertFalse(node0.isDelProp());
1475:       assertFalse(node0.isIf());
1476:       assertFalse(node0.isCase());
1477:       assertFalse(node0.isEmpty());
1478:       assertFalse(node0.isGetterDef());
1479:       assertFalse(node0.isString());
1480:       assertFalse(node0.isIn());
1481:       assertFalse(node0.isInc());
1482:       assertEquals(2810, node0.getCharno());
1483:       assertFalse(node0.isDebugger());
1484:       assertFalse(node0.isArrayLit());
1485:       assertFalse(node0.isDefaultCase());
1486:       assertFalse(node0.isSwitch());
1487:       assertFalse(node0.isThrow());
1488:       assertEquals(0, node0.getChildCount());
1489:       assertFalse(node0.isFunction());
1490:       assertFalse(node0.isFalse());
1491:       assertFalse(node0.isThis());
1492:       assertFalse(node0.isSetterDef());
1493:       assertFalse(node0.isParamList());
1494:       assertFalse(node0.isStringKey());
1495:       assertEquals(23, node0.getType());
1496:       assertFalse(node0.isScript());
1497:       assertFalse(node0.isBlock());
1498:       assertFalse(node0.isTry());
1499:       assertEquals(48, node0.getLineno());
1500:       assertFalse(node0.isHook());
1501:       assertFalse(node0.hasOneChild());
1502:       assertFalse(node0.isFor());
1503:       assertFalse(node0.isRegExp());
1504:       assertFalse(node0.isInstanceOf());
1505:       assertFalse(node0.isCatch());
1506:       assertFalse(node0.hasMoreThanOneChild());
1507:       assertFalse(node0.isWith());
1508:       assertFalse(node0.isOr());
1509:       assertFalse(node0.isReturn());
1510:       assertFalse(node0.isLabel());
1511:       assertFalse(node0.isAssignAdd());
1512:       assertFalse(node0.isDo());
1513:       assertFalse(node0.isNumber());
1514:       assertEquals(199418, node0.getSourcePosition());
1515:       assertFalse(node0.isNew());
1516:       assertFalse(node0.isAdd());
1517:       assertFalse(node0.isVar());
1518:       assertFalse(node0.isLabelName());
1519:       assertFalse(node0.isCast());
1520:       assertFalse(node0.isContinue());
1521:       assertFalse(node0.isComma());
1522:       assertFalse(node0.isGetProp());
1523:       assertFalse(node0.isNull());
1524:       assertFalse(node0.isAnd());
1525:       assertFalse(node0.isNot());
1526:       assertFalse(node0.isObjectLit());
1527:       assertFalse(node0.isVoid());
1528:       assertFalse(node0.isTrue());
1529:       assertFalse(node0.isExprResult());
1530:       assertFalse(node0.isWhile());
1531:       assertFalse(node0.isName());
1532:       assertFalse(node0.isGetElem());
1533:       assertFalse(node0.isAssign());
1534:       assertFalse(node0.isCall());
1535:       assertFalse(node0.isBreak());
1536:       assertFalse(node0.hasChildren());
1537:       assertFalse(node0.isTypeOf());
1538:       assertFalse(node0.isDec());
1539:       
1540:       boolean boolean6 = node1.isWith();
1541:       assertFalse(boolean6);
1542:       assertNotSame(node1, node0);
1543:       assertNotSame(node1, node2);
1544:       assertEquals(40, Node.ORIGINALNAME_PROP);
1545:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1546:       assertEquals(52, Node.LENGTH);
1547:       assertEquals(50, Node.FREE_CALL);
1548:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1549:       assertEquals(57, Node.REFLECTED_OBJECT);
1550:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1551:       assertEquals(8, Node.FLAG_NO_THROWS);
1552:       assertEquals(39, Node.EMPTY_BLOCK);
1553:       assertEquals(57, Node.LAST_PROP);
1554:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1555:       assertEquals(1, Node.DECR_FLAG);
1556:       assertEquals(30, Node.VAR_ARGS_NAME);
1557:       assertEquals(46, Node.IS_NAMESPACE);
1558:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1559:       assertEquals(2, Node.POST_FLAG);
1560:       assertEquals(54, Node.SLASH_V);
1561:       assertEquals(43, Node.IS_CONSTANT_NAME);
1562:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1563:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1564:       assertEquals(47, Node.IS_DISPATCHER);
1565:       assertEquals(29, Node.JSDOC_INFO_PROP);
1566:       assertEquals(32, Node.INCRDECR_PROP);
1567:       assertEquals(53, Node.INPUT_ID);
1568:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1569:       assertEquals(55, Node.INFERRED_FUNCTION);
1570:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1571:       assertEquals(12, Node.COLUMN_BITS);
1572:       assertEquals(4095, Node.COLUMN_MASK);
1573:       assertEquals(36, Node.QUOTED_PROP);
1574:       assertEquals(37, Node.OPT_ARG_NAME);
1575:       assertEquals(48, Node.DIRECTIVES);
1576:       assertEquals(56, Node.CHANGE_TIME);
1577:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1578:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1579:       assertEquals(49, Node.DIRECT_EVAL);
1580:       assertFalse(node1.equals((Object)node0));
1581:       assertFalse(node1.equals((Object)node3));
1582:       assertFalse(node1.equals((Object)node2));
1583:       assertTrue(boolean6 == boolean3);
1584:       assertTrue(boolean6 == boolean0);
1585:       assertTrue(boolean6 == boolean4);
1586:       assertTrue(boolean6 == boolean5);
1587:       assertTrue(boolean6 == boolean1);
1588:       assertTrue(boolean6 == boolean2);
1589:       assertFalse(node1.isAdd());
1590:       assertFalse(node1.isVar());
1591:       assertFalse(node1.isBlock());
1592:       assertFalse(node1.isStringKey());
1593:       assertFalse(node1.isContinue());
1594:       assertFalse(node1.isCall());
1595:       assertEquals((-1), node1.getLineno());
1596:       assertFalse(node1.isOr());
1597:       assertEquals(0, node1.getChildCount());
1598:       assertFalse(node1.isAssignAdd());
1599:       assertFalse(node1.isNull());
1600:       assertFalse(node1.isLabel());
1601:       assertFalse(node1.isDo());
1602:       assertFalse(node1.isDefaultCase());
1603:       assertFalse(node1.isSetterDef());
1604:       assertFalse(node1.isNew());
1605:       assertFalse(node1.isTrue());
1606:       assertFalse(node1.isFunction());
1607:       assertFalse(node1.isDebugger());
1608:       assertFalse(node1.isDelProp());
1609:       assertFalse(node1.isAssign());
1610:       assertFalse(node1.isAnd());
1611:       assertFalse(node1.isVoid());
1612:       assertFalse(node1.isExprResult());
1613:       assertFalse(node1.isCast());
1614:       assertFalse(node1.isGetElem());
1615:       assertFalse(node1.isReturn());
1616:       assertFalse(node1.isComma());
1617:       assertFalse(node1.isTypeOf());
1618:       assertFalse(node1.isObjectLit());
1619:       assertFalse(node1.isDec());
1620:       assertEquals((-1), node1.getSourcePosition());
1621:       assertFalse(node1.hasChildren());
1622:       assertFalse(node1.isString());
1623:       assertFalse(node1.isWhile());
1624:       assertFalse(node1.isNot());
1625:       assertFalse(node1.isGetProp());
1626:       assertFalse(node1.isThrow());
1627:       assertFalse(node1.isHook());
1628:       assertEquals((-1), node1.getCharno());
1629:       assertFalse(node1.isFalse());
1630:       assertFalse(node1.isSwitch());
1631:       assertFalse(node1.isBreak());
1632:       assertFalse(node1.isIn());
1633:       assertTrue(node1.isName());
1634:       assertFalse(node1.isNE());
1635:       assertFalse(node1.isEmpty());
1636:       assertFalse(node1.isInc());
1637:       assertFalse(node1.isTry());
1638:       assertFalse(node1.isRegExp());
1639:       assertFalse(node1.isWith());
1640:       assertEquals(38, node1.getType());
1641:       assertFalse(node1.isLabelName());
1642:       assertFalse(node1.isIf());
1643:       assertFalse(node1.isCatch());
1644:       assertFalse(node1.isArrayLit());
1645:       assertFalse(node1.isInstanceOf());
1646:       assertFalse(node1.isThis());
1647:       assertFalse(node1.isParamList());
1648:       assertFalse(node1.hasMoreThanOneChild());
1649:       assertFalse(node1.isGetterDef());
1650:       assertFalse(node1.isFor());
1651:       assertFalse(node1.isNumber());
1652:       assertFalse(node1.isScript());
1653:       assertFalse(node1.isCase());
1654:       assertFalse(node1.hasOneChild());
1655:       
1656:       node1.removeProp(87);
1657:       assertNotSame(node1, node0);
1658:       assertNotSame(node1, node2);
1659:       assertEquals(40, Node.ORIGINALNAME_PROP);
1660:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1661:       assertEquals(52, Node.LENGTH);
1662:       assertEquals(50, Node.FREE_CALL);
1663:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1664:       assertEquals(57, Node.REFLECTED_OBJECT);
1665:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1666:       assertEquals(8, Node.FLAG_NO_THROWS);
1667:       assertEquals(39, Node.EMPTY_BLOCK);
1668:       assertEquals(57, Node.LAST_PROP);
1669:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1670:       assertEquals(1, Node.DECR_FLAG);
1671:       assertEquals(30, Node.VAR_ARGS_NAME);
1672:       assertEquals(46, Node.IS_NAMESPACE);
1673:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1674:       assertEquals(2, Node.POST_FLAG);
1675:       assertEquals(54, Node.SLASH_V);
1676:       assertEquals(43, Node.IS_CONSTANT_NAME);
1677:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1678:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1679:       assertEquals(47, Node.IS_DISPATCHER);
1680:       assertEquals(29, Node.JSDOC_INFO_PROP);
1681:       assertEquals(32, Node.INCRDECR_PROP);
1682:       assertEquals(53, Node.INPUT_ID);
1683:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1684:       assertEquals(55, Node.INFERRED_FUNCTION);
1685:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1686:       assertEquals(12, Node.COLUMN_BITS);
1687:       assertEquals(4095, Node.COLUMN_MASK);
1688:       assertEquals(36, Node.QUOTED_PROP);
1689:       assertEquals(37, Node.OPT_ARG_NAME);
1690:       assertEquals(48, Node.DIRECTIVES);
1691:       assertEquals(56, Node.CHANGE_TIME);
1692:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1693:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1694:       assertEquals(49, Node.DIRECT_EVAL);
1695:       assertFalse(node1.equals((Object)node0));
1696:       assertFalse(node1.equals((Object)node3));
1697:       assertFalse(node1.equals((Object)node2));
1698:       assertFalse(node1.isAdd());
1699:       assertFalse(node1.isVar());
1700:       assertFalse(node1.isBlock());
1701:       assertFalse(node1.isStringKey());
1702:       assertFalse(node1.isContinue());
1703:       assertFalse(node1.isCall());
1704:       assertEquals((-1), node1.getLineno());
1705:       assertFalse(node1.isOr());
1706:       assertEquals(0, node1.getChildCount());
1707:       assertFalse(node1.isAssignAdd());
1708:       assertFalse(node1.isNull());
1709:       assertFalse(node1.isLabel());
1710:       assertFalse(node1.isDo());
1711:       assertFalse(node1.isDefaultCase());
1712:       assertFalse(node1.isSetterDef());
1713:       assertFalse(node1.isNew());
1714:       assertFalse(node1.isTrue());
1715:       assertFalse(node1.isFunction());
1716:       assertFalse(node1.isDebugger());
1717:       assertFalse(node1.isDelProp());
1718:       assertFalse(node1.isAssign());
1719:       assertFalse(node1.isAnd());
1720:       assertFalse(node1.isVoid());
1721:       assertFalse(node1.isExprResult());
1722:       assertFalse(node1.isCast());
1723:       assertFalse(node1.isGetElem());
1724:       assertFalse(node1.isReturn());
1725:       assertFalse(node1.isComma());
1726:       assertFalse(node1.isTypeOf());
1727:       assertFalse(node1.isObjectLit());
1728:       assertFalse(node1.isDec());
1729:       assertEquals((-1), node1.getSourcePosition());
1730:       assertFalse(node1.hasChildren());
1731:       assertFalse(node1.isString());
1732:       assertFalse(node1.isWhile());
1733:       assertFalse(node1.isNot());
1734:       assertFalse(node1.isGetProp());
1735:       assertFalse(node1.isThrow());
1736:       assertFalse(node1.isHook());
1737:       assertEquals((-1), node1.getCharno());
1738:       assertFalse(node1.isFalse());
1739:       assertFalse(node1.isSwitch());
1740:       assertFalse(node1.isBreak());
1741:       assertFalse(node1.isIn());
1742:       assertTrue(node1.isName());
1743:       assertFalse(node1.isNE());
1744:       assertFalse(node1.isEmpty());
1745:       assertFalse(node1.isInc());
1746:       assertFalse(node1.isTry());
1747:       assertFalse(node1.isRegExp());
1748:       assertFalse(node1.isWith());
1749:       assertEquals(38, node1.getType());
1750:       assertFalse(node1.isLabelName());
1751:       assertFalse(node1.isIf());
1752:       assertFalse(node1.isCatch());
1753:       assertFalse(node1.isArrayLit());
1754:       assertFalse(node1.isInstanceOf());
1755:       assertFalse(node1.isThis());
1756:       assertFalse(node1.isParamList());
1757:       assertFalse(node1.hasMoreThanOneChild());
1758:       assertFalse(node1.isGetterDef());
1759:       assertFalse(node1.isFor());
1760:       assertFalse(node1.isNumber());
1761:       assertFalse(node1.isScript());
1762:       assertFalse(node1.isCase());
1763:       assertFalse(node1.hasOneChild());
1764:       
1765:       String string0 = node1.getSourceFileName();
1766:       assertNotSame(node1, node0);
1767:       assertNotSame(node1, node2);
1768:       assertEquals(40, Node.ORIGINALNAME_PROP);
1769:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1770:       assertEquals(52, Node.LENGTH);
1771:       assertEquals(50, Node.FREE_CALL);
1772:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1773:       assertEquals(57, Node.REFLECTED_OBJECT);
1774:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1775:       assertEquals(8, Node.FLAG_NO_THROWS);
1776:       assertEquals(39, Node.EMPTY_BLOCK);
1777:       assertEquals(57, Node.LAST_PROP);
1778:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1779:       assertEquals(1, Node.DECR_FLAG);
1780:       assertEquals(30, Node.VAR_ARGS_NAME);
1781:       assertEquals(46, Node.IS_NAMESPACE);
1782:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1783:       assertEquals(2, Node.POST_FLAG);
1784:       assertEquals(54, Node.SLASH_V);
1785:       assertEquals(43, Node.IS_CONSTANT_NAME);
1786:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1787:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1788:       assertEquals(47, Node.IS_DISPATCHER);
1789:       assertEquals(29, Node.JSDOC_INFO_PROP);
1790:       assertEquals(32, Node.INCRDECR_PROP);
1791:       assertEquals(53, Node.INPUT_ID);
1792:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1793:       assertEquals(55, Node.INFERRED_FUNCTION);
1794:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1795:       assertEquals(12, Node.COLUMN_BITS);
1796:       assertEquals(4095, Node.COLUMN_MASK);
1797:       assertEquals(36, Node.QUOTED_PROP);
1798:       assertEquals(37, Node.OPT_ARG_NAME);
1799:       assertEquals(48, Node.DIRECTIVES);
1800:       assertEquals(56, Node.CHANGE_TIME);
1801:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1802:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1803:       assertEquals(49, Node.DIRECT_EVAL);
1804:       assertNull(string0);
1805:       assertFalse(node1.equals((Object)node0));
1806:       assertFalse(node1.equals((Object)node3));
1807:       assertFalse(node1.equals((Object)node2));
1808:       assertFalse(node1.isAdd());
1809:       assertFalse(node1.isVar());
1810:       assertFalse(node1.isBlock());
1811:       assertFalse(node1.isStringKey());
1812:       assertFalse(node1.isContinue());
1813:       assertFalse(node1.isCall());
1814:       assertEquals((-1), node1.getLineno());
1815:       assertFalse(node1.isOr());
1816:       assertEquals(0, node1.getChildCount());
1817:       assertFalse(node1.isAssignAdd());
1818:       assertFalse(node1.isNull());
1819:       assertFalse(node1.isLabel());
1820:       assertFalse(node1.isDo());
1821:       assertFalse(node1.isDefaultCase());
1822:       assertFalse(node1.isSetterDef());
1823:       assertFalse(node1.isNew());
1824:       assertFalse(node1.isTrue());
1825:       assertFalse(node1.isFunction());
1826:       assertFalse(node1.isDebugger());
1827:       assertFalse(node1.isDelProp());
1828:       assertFalse(node1.isAssign());
1829:       assertFalse(node1.isAnd());
1830:       assertFalse(node1.isVoid());
1831:       assertFalse(node1.isExprResult());
1832:       assertFalse(node1.isCast());
1833:       assertFalse(node1.isGetElem());
1834:       assertFalse(node1.isReturn());
1835:       assertFalse(node1.isComma());
1836:       assertFalse(node1.isTypeOf());
1837:       assertFalse(node1.isObjectLit());
1838:       assertFalse(node1.isDec());
1839:       assertEquals((-1), node1.getSourcePosition());
1840:       assertFalse(node1.hasChildren());
1841:       assertFalse(node1.isString());
1842:       assertFalse(node1.isWhile());
1843:       assertFalse(node1.isNot());
1844:       assertFalse(node1.isGetProp());
1845:       assertFalse(node1.isThrow());
1846:       assertFalse(node1.isHook());
1847:       assertEquals((-1), node1.getCharno());
1848:       assertFalse(node1.isFalse());
1849:       assertFalse(node1.isSwitch());
1850:       assertFalse(node1.isBreak());
1851:       assertFalse(node1.isIn());
1852:       assertTrue(node1.isName());
1853:       assertFalse(node1.isNE());
1854:       assertFalse(node1.isEmpty());
1855:       assertFalse(node1.isInc());
1856:       assertFalse(node1.isTry());
1857:       assertFalse(node1.isRegExp());
1858:       assertFalse(node1.isWith());
1859:       assertEquals(38, node1.getType());
1860:       assertFalse(node1.isLabelName());
1861:       assertFalse(node1.isIf());
1862:       assertFalse(node1.isCatch());
1863:       assertFalse(node1.isArrayLit());
1864:       assertFalse(node1.isInstanceOf());
1865:       assertFalse(node1.isThis());
1866:       assertFalse(node1.isParamList());
1867:       assertFalse(node1.hasMoreThanOneChild());
1868:       assertFalse(node1.isGetterDef());
1869:       assertFalse(node1.isFor());
1870:       assertFalse(node1.isNumber());
1871:       assertFalse(node1.isScript());
1872:       assertFalse(node1.isCase());
1873:       assertFalse(node1.hasOneChild());
1874:   }
1875: }
RegularFileObject[/tmp/EvoSuite_127_1628157527063/com/google/javascript/rhino/Node_127_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:47 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_127_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_127_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_127_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.JSTypeNative",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.JSType$TypePair",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.JSType$2",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
375:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
377:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
378:     );
379:   }
380: }

[MASTER] 09:58:47.414 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(23, 48, 2810);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotNull(node0);
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(23, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals(48, node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNumber());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());

boolean boolean0 = node0.isNE();
assertFalse(boolean0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(23, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals(48, node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNumber());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());

boolean boolean1 = node0.isFromExterns();
assertFalse(boolean1);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(23, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals(48, node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNumber());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());

node0.putBooleanProp((-410), true);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(23, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals(48, node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNumber());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

Node node1 = new Node(38);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isIn());
assertTrue(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertEquals(38, node1.getType());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());

Node node2 = new Node(42, node1);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isIn());
assertTrue(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertEquals(38, node1.getType());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isIn());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertTrue(node2.hasOneChild());
assertFalse(node2.isIf());
assertFalse(node2.isRegExp());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertTrue(node2.isThis());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isThrow());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isScript());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isWith());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isExprResult());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNew());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertEquals(42, node2.getType());
assertFalse(node2.isLabelName());

Iterable<Node> iterable0 = node1.children();
assertFalse(iterable0.contains(node1));
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isIn());
assertTrue(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertEquals(38, node1.getType());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());

boolean boolean2 = node1.isGetProp();
assertFalse(boolean2);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isIn());
assertTrue(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertEquals(38, node1.getType());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());

boolean boolean3 = node1.isParamList();
assertFalse(boolean3);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isIn());
assertTrue(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertEquals(38, node1.getType());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());

boolean boolean4 = node2.isSetterDef();
assertFalse(boolean4);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertNotSame(node2, node0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isIn());
assertTrue(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertEquals(38, node1.getType());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isIn());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertTrue(node2.hasOneChild());
assertFalse(node2.isIf());
assertFalse(node2.isRegExp());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertTrue(node2.isThis());
assertTrue(node2.hasChildren());
assertFalse(node2.isCatch());
assertFalse(node2.isThrow());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isScript());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isWith());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isExprResult());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNew());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertEquals(42, node2.getType());
assertFalse(node2.isLabelName());

Node node3 = Node.newString("Object#Key");
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotNull(node3);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.isScript());
assertFalse(node3.isWith());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertFalse(node3.isGetElem());
assertFalse(node3.isLabelName());
assertFalse(node3.isExprResult());
assertFalse(node3.isFalse());
assertFalse(node3.isOr());
assertFalse(node3.isThrow());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isInc());
assertFalse(node3.isSwitch());
assertFalse(node3.isBlock());
assertEquals((-1), node3.getCharno());
assertFalse(node3.hasMoreThanOneChild());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isFor());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.hasOneChild());
assertFalse(node3.isCase());
assertTrue(node3.isString());
assertFalse(node3.isTry());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isDefaultCase());
assertEquals(40, node3.getType());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.isVoid());
assertFalse(node3.isArrayLit());
assertFalse(node3.isNull());
assertFalse(node3.isNE());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isVar());
assertFalse(node3.isIn());
assertFalse(node3.isNew());
assertFalse(node3.isEmpty());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.isBreak());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isAssign());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());
assertFalse(node3.hasChildren());
assertFalse(node3.isGetProp());

boolean boolean5 = node0.isUnscopedQualifiedName();
assertFalse(boolean5);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(23, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertEquals(48, node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNumber());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());

boolean boolean6 = node1.isWith();
assertFalse(boolean6);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean2);
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isIn());
assertTrue(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertEquals(38, node1.getType());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());

node1.removeProp(87);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isIn());
assertTrue(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertEquals(38, node1.getType());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());

String string0 = node1.getSourceFileName();
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertNull(string0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isIn());
assertTrue(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertEquals(38, node1.getType());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());


[MASTER] 09:58:53.515 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_157_1628157533096/com/google/javascript/rhino/Node_157_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_157_1628157533096/com/google/javascript/rhino/Node_157_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:53.515 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:53.515 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:53.525 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 659
[MASTER] 09:58:53.526 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_157_1628157533096/com/google/javascript/rhino/Node_157_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:53 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_157_tmp__ESTest extends Node_157_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node[] nodeArray0 = new Node[0];
21:       Node node0 = new Node(330, nodeArray0);
22:       assertEquals(43, Node.IS_CONSTANT_NAME);
23:       assertEquals(36, Node.QUOTED_PROP);
24:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
25:       assertEquals(53, Node.INPUT_ID);
26:       assertEquals(55, Node.INFERRED_FUNCTION);
27:       assertEquals(4095, Node.COLUMN_MASK);
28:       assertEquals(48, Node.DIRECTIVES);
29:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
30:       assertEquals(56, Node.CHANGE_TIME);
31:       assertEquals(47, Node.IS_DISPATCHER);
32:       assertEquals(2, Node.POST_FLAG);
33:       assertEquals(39, Node.EMPTY_BLOCK);
34:       assertEquals(40, Node.ORIGINALNAME_PROP);
35:       assertEquals(29, Node.JSDOC_INFO_PROP);
36:       assertEquals(8, Node.FLAG_NO_THROWS);
37:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
38:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
39:       assertEquals(15, Node.NO_SIDE_EFFECTS);
40:       assertEquals(57, Node.LAST_PROP);
41:       assertEquals(30, Node.VAR_ARGS_NAME);
42:       assertEquals(52, Node.LENGTH);
43:       assertEquals(51, Node.STATIC_SOURCE_FILE);
44:       assertEquals(57, Node.REFLECTED_OBJECT);
45:       assertEquals(46, Node.IS_NAMESPACE);
46:       assertEquals(49, Node.DIRECT_EVAL);
47:       assertEquals(54, Node.SLASH_V);
48:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
49:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
50:       assertEquals(37, Node.OPT_ARG_NAME);
51:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
52:       assertEquals(50, Node.FREE_CALL);
53:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
54:       assertEquals(12, Node.COLUMN_BITS);
55:       assertEquals(32, Node.INCRDECR_PROP);
56:       assertEquals(1, Node.DECR_FLAG);
57:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
58:       assertEquals(0, nodeArray0.length);
59:       assertNotNull(node0);
60:       assertEquals(0, node0.getChildCount());
61:       assertFalse(node0.isRegExp());
62:       assertFalse(node0.isCatch());
63:       assertFalse(node0.isFunction());
64:       assertFalse(node0.isTry());
65:       assertFalse(node0.isSetterDef());
66:       assertFalse(node0.isDefaultCase());
67:       assertFalse(node0.isEmpty());
68:       assertFalse(node0.isFor());
69:       assertFalse(node0.isCall());
70:       assertFalse(node0.isName());
71:       assertFalse(node0.isVoid());
72:       assertFalse(node0.isTrue());
73:       assertFalse(node0.isIf());
74:       assertEquals(0, node0.getSourcePosition());
75:       assertFalse(node0.isDelProp());
76:       assertFalse(node0.isNull());
77:       assertFalse(node0.isNE());
78:       assertFalse(node0.isIn());
79:       assertFalse(node0.isString());
80:       assertFalse(node0.isContinue());
81:       assertFalse(node0.isInc());
82:       assertFalse(node0.isReturn());
83:       assertFalse(node0.isWhile());
84:       assertEquals(330, node0.getType());
85:       assertFalse(node0.isThrow());
86:       assertFalse(node0.isFalse());
87:       assertFalse(node0.isCast());
88:       assertEquals(0, node0.getLineno());
89:       assertFalse(node0.isDebugger());
90:       assertFalse(node0.isAnd());
91:       assertFalse(node0.isObjectLit());
92:       assertFalse(node0.isNot());
93:       assertFalse(node0.isInstanceOf());
94:       assertFalse(node0.isScript());
95:       assertFalse(node0.isWith());
96:       assertFalse(node0.isGetProp());
97:       assertFalse(node0.isComma());
98:       assertFalse(node0.isThis());
99:       assertFalse(node0.hasOneChild());
100:       assertFalse(node0.isGetElem());
101:       assertFalse(node0.isAssign());
102:       assertFalse(node0.isBreak());
103:       assertFalse(node0.hasChildren());
104:       assertFalse(node0.isDec());
105:       assertFalse(node0.isTypeOf());
106:       assertFalse(node0.isExprResult());
107:       assertEquals(0, node0.getCharno());
108:       assertFalse(node0.isOr());
109:       assertFalse(node0.isDo());
110:       assertFalse(node0.isCase());
111:       assertFalse(node0.hasMoreThanOneChild());
112:       assertFalse(node0.isAdd());
113:       assertFalse(node0.isBlock());
114:       assertFalse(node0.isNew());
115:       assertFalse(node0.isLabel());
116:       assertFalse(node0.isHook());
117:       assertFalse(node0.isVar());
118:       assertFalse(node0.isAssignAdd());
119:       assertFalse(node0.isStringKey());
120:       assertFalse(node0.isLabelName());
121:       assertFalse(node0.isArrayLit());
122:       assertFalse(node0.isNumber());
123:       assertFalse(node0.isGetterDef());
124:       assertFalse(node0.isSwitch());
125:       assertFalse(node0.isParamList());
126:       
127:       Node node1 = new Node(49);
128:       assertEquals(43, Node.IS_CONSTANT_NAME);
129:       assertEquals(36, Node.QUOTED_PROP);
130:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
131:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
132:       assertEquals(4095, Node.COLUMN_MASK);
133:       assertEquals(56, Node.CHANGE_TIME);
134:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
135:       assertEquals(47, Node.IS_DISPATCHER);
136:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
137:       assertEquals(39, Node.EMPTY_BLOCK);
138:       assertEquals(29, Node.JSDOC_INFO_PROP);
139:       assertEquals(48, Node.DIRECTIVES);
140:       assertEquals(37, Node.OPT_ARG_NAME);
141:       assertEquals(55, Node.INFERRED_FUNCTION);
142:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
143:       assertEquals(53, Node.INPUT_ID);
144:       assertEquals(57, Node.REFLECTED_OBJECT);
145:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
146:       assertEquals(52, Node.LENGTH);
147:       assertEquals(8, Node.FLAG_NO_THROWS);
148:       assertEquals(15, Node.NO_SIDE_EFFECTS);
149:       assertEquals(57, Node.LAST_PROP);
150:       assertEquals(54, Node.SLASH_V);
151:       assertEquals(1, Node.DECR_FLAG);
152:       assertEquals(49, Node.DIRECT_EVAL);
153:       assertEquals(40, Node.ORIGINALNAME_PROP);
154:       assertEquals(12, Node.COLUMN_BITS);
155:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
156:       assertEquals(2, Node.POST_FLAG);
157:       assertEquals(30, Node.VAR_ARGS_NAME);
158:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
159:       assertEquals(32, Node.INCRDECR_PROP);
160:       assertEquals(51, Node.STATIC_SOURCE_FILE);
161:       assertEquals(46, Node.IS_NAMESPACE);
162:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
163:       assertEquals(50, Node.FREE_CALL);
164:       assertNotNull(node1);
165:       assertFalse(node1.equals((Object)node0));
166:       assertFalse(node1.isAnd());
167:       assertFalse(node1.isGetProp());
168:       assertFalse(node1.isScript());
169:       assertFalse(node1.isNot());
170:       assertFalse(node1.isObjectLit());
171:       assertFalse(node1.isHook());
172:       assertFalse(node1.isGetElem());
173:       assertFalse(node1.isBreak());
174:       assertFalse(node1.hasOneChild());
175:       assertFalse(node1.isComma());
176:       assertFalse(node1.isThis());
177:       assertFalse(node1.isReturn());
178:       assertFalse(node1.isExprResult());
179:       assertFalse(node1.isDec());
180:       assertFalse(node1.hasChildren());
181:       assertFalse(node1.isInstanceOf());
182:       assertFalse(node1.isAssign());
183:       assertFalse(node1.hasMoreThanOneChild());
184:       assertFalse(node1.isWith());
185:       assertFalse(node1.isTypeOf());
186:       assertFalse(node1.isCase());
187:       assertFalse(node1.isSwitch());
188:       assertFalse(node1.isDo());
189:       assertFalse(node1.isAssignAdd());
190:       assertEquals((-1), node1.getCharno());
191:       assertFalse(node1.isNew());
192:       assertFalse(node1.isAdd());
193:       assertFalse(node1.isOr());
194:       assertFalse(node1.isGetterDef());
195:       assertFalse(node1.isNumber());
196:       assertFalse(node1.isStringKey());
197:       assertFalse(node1.isEmpty());
198:       assertFalse(node1.isVar());
199:       assertFalse(node1.isArrayLit());
200:       assertFalse(node1.isLabelName());
201:       assertFalse(node1.isLabel());
202:       assertEquals(0, node1.getChildCount());
203:       assertTrue(node1.isThrow());
204:       assertFalse(node1.isCatch());
205:       assertFalse(node1.isDefaultCase());
206:       assertFalse(node1.isParamList());
207:       assertFalse(node1.isDebugger());
208:       assertFalse(node1.isSetterDef());
209:       assertFalse(node1.isNull());
210:       assertFalse(node1.isTrue());
211:       assertFalse(node1.isFor());
212:       assertFalse(node1.isCall());
213:       assertFalse(node1.isIf());
214:       assertFalse(node1.isTry());
215:       assertFalse(node1.isDelProp());
216:       assertFalse(node1.isName());
217:       assertFalse(node1.isVoid());
218:       assertFalse(node1.isBlock());
219:       assertFalse(node1.isRegExp());
220:       assertFalse(node1.isContinue());
221:       assertEquals((-1), node1.getLineno());
222:       assertFalse(node1.isWhile());
223:       assertEquals(49, node1.getType());
224:       assertFalse(node1.isNE());
225:       assertFalse(node1.isInc());
226:       assertFalse(node1.isIn());
227:       assertFalse(node1.isString());
228:       assertEquals((-1), node1.getSourcePosition());
229:       assertFalse(node1.isFalse());
230:       assertFalse(node1.isCast());
231:       assertFalse(node1.isFunction());
232:       
233:       Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
234:       assertEquals(30, Node.VAR_ARGS_NAME);
235:       assertEquals(49, Node.DIRECT_EVAL);
236:       assertEquals(57, Node.LAST_PROP);
237:       assertEquals(12, Node.COLUMN_BITS);
238:       assertEquals(54, Node.SLASH_V);
239:       assertEquals(51, Node.STATIC_SOURCE_FILE);
240:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
241:       assertEquals(52, Node.LENGTH);
242:       assertEquals(32, Node.INCRDECR_PROP);
243:       assertEquals(15, Node.NO_SIDE_EFFECTS);
244:       assertEquals(1, Node.DECR_FLAG);
245:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
246:       assertEquals(50, Node.FREE_CALL);
247:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
248:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
249:       assertEquals(2, Node.POST_FLAG);
250:       assertEquals(47, Node.IS_DISPATCHER);
251:       assertEquals(46, Node.IS_NAMESPACE);
252:       assertEquals(40, Node.ORIGINALNAME_PROP);
253:       assertEquals(43, Node.IS_CONSTANT_NAME);
254:       assertEquals(36, Node.QUOTED_PROP);
255:       assertEquals(55, Node.INFERRED_FUNCTION);
256:       assertEquals(39, Node.EMPTY_BLOCK);
257:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
258:       assertEquals(53, Node.INPUT_ID);
259:       assertEquals(29, Node.JSDOC_INFO_PROP);
260:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
261:       assertEquals(56, Node.CHANGE_TIME);
262:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
263:       assertEquals(8, Node.FLAG_NO_THROWS);
264:       assertEquals(57, Node.REFLECTED_OBJECT);
265:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
266:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
267:       assertEquals(4095, Node.COLUMN_MASK);
268:       assertEquals(37, Node.OPT_ARG_NAME);
269:       assertEquals(48, Node.DIRECTIVES);
270:       assertNotNull(node2);
271:       assertFalse(node2.equals((Object)node1));
272:       assertFalse(node2.equals((Object)node0));
273:       assertFalse(node2.isIn());
274:       assertFalse(node2.isSwitch());
275:       assertFalse(node2.isNE());
276:       assertFalse(node2.isIf());
277:       assertFalse(node2.isDelProp());
278:       assertFalse(node2.isThrow());
279:       assertFalse(node2.isFalse());
280:       assertFalse(node2.isInc());
281:       assertFalse(node2.isDefaultCase());
282:       assertFalse(node2.isEmpty());
283:       assertFalse(node2.isObjectLit());
284:       assertFalse(node2.isAnd());
285:       assertFalse(node2.isNot());
286:       assertEquals(40, node2.getType());
287:       assertFalse(node2.isComma());
288:       assertFalse(node2.isFunction());
289:       assertFalse(node2.isVoid());
290:       assertFalse(node2.isNull());
291:       assertFalse(node2.isTrue());
292:       assertFalse(node2.isExprResult());
293:       assertFalse(node2.isName());
294:       assertFalse(node2.isBreak());
295:       assertFalse(node2.isCall());
296:       assertFalse(node2.isAssign());
297:       assertFalse(node2.isDec());
298:       assertEquals((-1), node2.getSourcePosition());
299:       assertFalse(node2.hasChildren());
300:       assertFalse(node2.isDebugger());
301:       assertFalse(node2.isGetProp());
302:       assertFalse(node2.hasMoreThanOneChild());
303:       assertFalse(node2.isContinue());
304:       assertFalse(node2.isReturn());
305:       assertFalse(node2.isWhile());
306:       assertFalse(node2.isOr());
307:       assertFalse(node2.isLabel());
308:       assertFalse(node2.isTypeOf());
309:       assertEquals((-1), node2.getLineno());
310:       assertFalse(node2.isLabelName());
311:       assertFalse(node2.isGetElem());
312:       assertFalse(node2.isCast());
313:       assertFalse(node2.isVar());
314:       assertFalse(node2.isSetterDef());
315:       assertFalse(node2.isAssignAdd());
316:       assertFalse(node2.isDo());
317:       assertFalse(node2.isAdd());
318:       assertFalse(node2.isNew());
319:       assertFalse(node2.isCatch());
320:       assertFalse(node2.isInstanceOf());
321:       assertFalse(node2.isWith());
322:       assertEquals(0, node2.getChildCount());
323:       assertFalse(node2.isParamList());
324:       assertFalse(node2.isRegExp());
325:       assertFalse(node2.isArrayLit());
326:       assertFalse(node2.isStringKey());
327:       assertFalse(node2.isGetterDef());
328:       assertFalse(node2.isFor());
329:       assertFalse(node2.isHook());
330:       assertFalse(node2.isBlock());
331:       assertEquals((-1), node2.getCharno());
332:       assertFalse(node2.isThis());
333:       assertFalse(node2.isScript());
334:       assertFalse(node2.isNumber());
335:       assertTrue(node2.isString());
336:       assertFalse(node2.isTry());
337:       assertFalse(node2.hasOneChild());
338:       assertFalse(node2.isCase());
339:       
340:       Node node3 = node2.useSourceInfoIfMissingFrom(node1);
341:       assertNotSame(node1, node0);
342:       assertSame(node2, node3);
343:       assertSame(node3, node2);
344:       assertEquals(43, Node.IS_CONSTANT_NAME);
345:       assertEquals(36, Node.QUOTED_PROP);
346:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
347:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
348:       assertEquals(4095, Node.COLUMN_MASK);
349:       assertEquals(56, Node.CHANGE_TIME);
350:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
351:       assertEquals(47, Node.IS_DISPATCHER);
352:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
353:       assertEquals(39, Node.EMPTY_BLOCK);
354:       assertEquals(29, Node.JSDOC_INFO_PROP);
355:       assertEquals(48, Node.DIRECTIVES);
356:       assertEquals(37, Node.OPT_ARG_NAME);
357:       assertEquals(55, Node.INFERRED_FUNCTION);
358:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
359:       assertEquals(53, Node.INPUT_ID);
360:       assertEquals(57, Node.REFLECTED_OBJECT);
361:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
362:       assertEquals(52, Node.LENGTH);
363:       assertEquals(8, Node.FLAG_NO_THROWS);
364:       assertEquals(15, Node.NO_SIDE_EFFECTS);
365:       assertEquals(57, Node.LAST_PROP);
366:       assertEquals(54, Node.SLASH_V);
367:       assertEquals(1, Node.DECR_FLAG);
368:       assertEquals(49, Node.DIRECT_EVAL);
369:       assertEquals(40, Node.ORIGINALNAME_PROP);
370:       assertEquals(12, Node.COLUMN_BITS);
371:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
372:       assertEquals(2, Node.POST_FLAG);
373:       assertEquals(30, Node.VAR_ARGS_NAME);
374:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
375:       assertEquals(32, Node.INCRDECR_PROP);
376:       assertEquals(51, Node.STATIC_SOURCE_FILE);
377:       assertEquals(46, Node.IS_NAMESPACE);
378:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
379:       assertEquals(50, Node.FREE_CALL);
380:       assertEquals(30, Node.VAR_ARGS_NAME);
381:       assertEquals(49, Node.DIRECT_EVAL);
382:       assertEquals(57, Node.LAST_PROP);
383:       assertEquals(12, Node.COLUMN_BITS);
384:       assertEquals(54, Node.SLASH_V);
385:       assertEquals(51, Node.STATIC_SOURCE_FILE);
386:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
387:       assertEquals(52, Node.LENGTH);
388:       assertEquals(32, Node.INCRDECR_PROP);
389:       assertEquals(15, Node.NO_SIDE_EFFECTS);
390:       assertEquals(1, Node.DECR_FLAG);
391:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
392:       assertEquals(50, Node.FREE_CALL);
393:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
394:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
395:       assertEquals(2, Node.POST_FLAG);
396:       assertEquals(47, Node.IS_DISPATCHER);
397:       assertEquals(46, Node.IS_NAMESPACE);
398:       assertEquals(40, Node.ORIGINALNAME_PROP);
399:       assertEquals(43, Node.IS_CONSTANT_NAME);
400:       assertEquals(36, Node.QUOTED_PROP);
401:       assertEquals(55, Node.INFERRED_FUNCTION);
402:       assertEquals(39, Node.EMPTY_BLOCK);
403:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
404:       assertEquals(53, Node.INPUT_ID);
405:       assertEquals(29, Node.JSDOC_INFO_PROP);
406:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
407:       assertEquals(56, Node.CHANGE_TIME);
408:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
409:       assertEquals(8, Node.FLAG_NO_THROWS);
410:       assertEquals(57, Node.REFLECTED_OBJECT);
411:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
412:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
413:       assertEquals(4095, Node.COLUMN_MASK);
414:       assertEquals(37, Node.OPT_ARG_NAME);
415:       assertEquals(48, Node.DIRECTIVES);
416:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
417:       assertEquals(8, Node.FLAG_NO_THROWS);
418:       assertEquals(39, Node.EMPTY_BLOCK);
419:       assertEquals(48, Node.DIRECTIVES);
420:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
421:       assertEquals(50, Node.FREE_CALL);
422:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
423:       assertEquals(4095, Node.COLUMN_MASK);
424:       assertEquals(40, Node.ORIGINALNAME_PROP);
425:       assertEquals(57, Node.REFLECTED_OBJECT);
426:       assertEquals(43, Node.IS_CONSTANT_NAME);
427:       assertEquals(54, Node.SLASH_V);
428:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
429:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
430:       assertEquals(12, Node.COLUMN_BITS);
431:       assertEquals(1, Node.DECR_FLAG);
432:       assertEquals(32, Node.INCRDECR_PROP);
433:       assertEquals(2, Node.POST_FLAG);
434:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
435:       assertEquals(47, Node.IS_DISPATCHER);
436:       assertEquals(37, Node.OPT_ARG_NAME);
437:       assertEquals(29, Node.JSDOC_INFO_PROP);
438:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
439:       assertEquals(51, Node.STATIC_SOURCE_FILE);
440:       assertEquals(49, Node.DIRECT_EVAL);
441:       assertEquals(46, Node.IS_NAMESPACE);
442:       assertEquals(56, Node.CHANGE_TIME);
443:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
444:       assertEquals(15, Node.NO_SIDE_EFFECTS);
445:       assertEquals(36, Node.QUOTED_PROP);
446:       assertEquals(30, Node.VAR_ARGS_NAME);
447:       assertEquals(52, Node.LENGTH);
448:       assertEquals(53, Node.INPUT_ID);
449:       assertEquals(55, Node.INFERRED_FUNCTION);
450:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
451:       assertEquals(57, Node.LAST_PROP);
452:       assertNotNull(node3);
453:       assertFalse(node1.equals((Object)node0));
454:       assertFalse(node1.equals((Object)node2));
455:       assertFalse(node2.equals((Object)node1));
456:       assertFalse(node2.equals((Object)node0));
457:       assertFalse(node3.equals((Object)node0));
458:       assertFalse(node3.equals((Object)node1));
459:       assertFalse(node1.isAnd());
460:       assertFalse(node1.isGetProp());
461:       assertFalse(node1.isScript());
462:       assertFalse(node1.isNot());
463:       assertFalse(node1.isObjectLit());
464:       assertFalse(node1.isHook());
465:       assertFalse(node1.isGetElem());
466:       assertFalse(node1.isBreak());
467:       assertFalse(node1.hasOneChild());
468:       assertFalse(node1.isComma());
469:       assertFalse(node1.isThis());
470:       assertFalse(node1.isReturn());
471:       assertFalse(node1.isExprResult());
472:       assertFalse(node1.isDec());
473:       assertFalse(node1.hasChildren());
474:       assertFalse(node1.isInstanceOf());
475:       assertFalse(node1.isAssign());
476:       assertFalse(node1.hasMoreThanOneChild());
477:       assertFalse(node1.isWith());
478:       assertFalse(node1.isTypeOf());
479:       assertFalse(node1.isCase());
480:       assertFalse(node1.isSwitch());
481:       assertFalse(node1.isDo());
482:       assertFalse(node1.isAssignAdd());
483:       assertEquals((-1), node1.getCharno());
484:       assertFalse(node1.isNew());
485:       assertFalse(node1.isAdd());
486:       assertFalse(node1.isOr());
487:       assertFalse(node1.isGetterDef());
488:       assertFalse(node1.isNumber());
489:       assertFalse(node1.isStringKey());
490:       assertFalse(node1.isEmpty());
491:       assertFalse(node1.isVar());
492:       assertFalse(node1.isArrayLit());
493:       assertFalse(node1.isLabelName());
494:       assertFalse(node1.isLabel());
495:       assertEquals(0, node1.getChildCount());
496:       assertTrue(node1.isThrow());
497:       assertFalse(node1.isCatch());
498:       assertFalse(node1.isDefaultCase());
499:       assertFalse(node1.isParamList());
500:       assertFalse(node1.isDebugger());
501:       assertFalse(node1.isSetterDef());
502:       assertFalse(node1.isNull());
503:       assertFalse(node1.isTrue());
504:       assertFalse(node1.isFor());
505:       assertFalse(node1.isCall());
506:       assertFalse(node1.isIf());
507:       assertFalse(node1.isTry());
508:       assertFalse(node1.isDelProp());
509:       assertFalse(node1.isName());
510:       assertFalse(node1.isVoid());
511:       assertFalse(node1.isBlock());
512:       assertFalse(node1.isRegExp());
513:       assertFalse(node1.isContinue());
514:       assertEquals((-1), node1.getLineno());
515:       assertFalse(node1.isWhile());
516:       assertEquals(49, node1.getType());
517:       assertFalse(node1.isNE());
518:       assertFalse(node1.isInc());
519:       assertFalse(node1.isIn());
520:       assertFalse(node1.isString());
521:       assertEquals((-1), node1.getSourcePosition());
522:       assertFalse(node1.isFalse());
523:       assertFalse(node1.isCast());
524:       assertFalse(node1.isFunction());
525:       assertFalse(node2.isIn());
526:       assertFalse(node2.isSwitch());
527:       assertFalse(node2.isNE());
528:       assertFalse(node2.isIf());
529:       assertFalse(node2.isDelProp());
530:       assertFalse(node2.isThrow());
531:       assertFalse(node2.isFalse());
532:       assertFalse(node2.isInc());
533:       assertFalse(node2.isDefaultCase());
534:       assertFalse(node2.isEmpty());
535:       assertFalse(node2.isObjectLit());
536:       assertFalse(node2.isAnd());
537:       assertFalse(node2.isNot());
538:       assertEquals(40, node2.getType());
539:       assertFalse(node2.isComma());
540:       assertFalse(node2.isFunction());
541:       assertFalse(node2.isVoid());
542:       assertFalse(node2.isNull());
543:       assertFalse(node2.isTrue());
544:       assertFalse(node2.isExprResult());
545:       assertFalse(node2.isName());
546:       assertFalse(node2.isBreak());
547:       assertFalse(node2.isCall());
548:       assertFalse(node2.isAssign());
549:       assertFalse(node2.isDec());
550:       assertEquals((-1), node2.getSourcePosition());
551:       assertFalse(node2.hasChildren());
552:       assertFalse(node2.isDebugger());
553:       assertFalse(node2.isGetProp());
554:       assertFalse(node2.hasMoreThanOneChild());
555:       assertFalse(node2.isContinue());
556:       assertFalse(node2.isReturn());
557:       assertFalse(node2.isWhile());
558:       assertFalse(node2.isOr());
559:       assertFalse(node2.isLabel());
560:       assertFalse(node2.isTypeOf());
561:       assertEquals((-1), node2.getLineno());
562:       assertFalse(node2.isLabelName());
563:       assertFalse(node2.isGetElem());
564:       assertFalse(node2.isCast());
565:       assertFalse(node2.isVar());
566:       assertFalse(node2.isSetterDef());
567:       assertFalse(node2.isAssignAdd());
568:       assertFalse(node2.isDo());
569:       assertFalse(node2.isAdd());
570:       assertFalse(node2.isNew());
571:       assertFalse(node2.isCatch());
572:       assertFalse(node2.isInstanceOf());
573:       assertFalse(node2.isWith());
574:       assertEquals(0, node2.getChildCount());
575:       assertFalse(node2.isParamList());
576:       assertFalse(node2.isRegExp());
577:       assertFalse(node2.isArrayLit());
578:       assertFalse(node2.isStringKey());
579:       assertFalse(node2.isGetterDef());
580:       assertFalse(node2.isFor());
581:       assertFalse(node2.isHook());
582:       assertFalse(node2.isBlock());
583:       assertEquals((-1), node2.getCharno());
584:       assertFalse(node2.isThis());
585:       assertFalse(node2.isScript());
586:       assertFalse(node2.isNumber());
587:       assertTrue(node2.isString());
588:       assertFalse(node2.isTry());
589:       assertFalse(node2.hasOneChild());
590:       assertFalse(node2.isCase());
591:       assertFalse(node3.isFalse());
592:       assertFalse(node3.isBreak());
593:       assertFalse(node3.isGetProp());
594:       assertFalse(node3.isComma());
595:       assertFalse(node3.isHook());
596:       assertFalse(node3.isThis());
597:       assertFalse(node3.isThrow());
598:       assertFalse(node3.isNot());
599:       assertFalse(node3.isCase());
600:       assertFalse(node3.isScript());
601:       assertFalse(node3.isObjectLit());
602:       assertEquals((-1), node3.getCharno());
603:       assertFalse(node3.isSwitch());
604:       assertFalse(node3.isAnd());
605:       assertFalse(node3.isEmpty());
606:       assertFalse(node3.isLabelName());
607:       assertFalse(node3.isAssign());
608:       assertFalse(node3.isDelProp());
609:       assertFalse(node3.isGetElem());
610:       assertFalse(node3.isDec());
611:       assertFalse(node3.hasChildren());
612:       assertEquals((-1), node3.getSourcePosition());
613:       assertFalse(node3.isTypeOf());
614:       assertFalse(node3.isLabel());
615:       assertFalse(node3.isAssignAdd());
616:       assertFalse(node3.isReturn());
617:       assertFalse(node3.isDefaultCase());
618:       assertFalse(node3.isDo());
619:       assertFalse(node3.isExprResult());
620:       assertFalse(node3.isOr());
621:       assertFalse(node3.isVoid());
622:       assertFalse(node3.isNull());
623:       assertFalse(node3.isTrue());
624:       assertFalse(node3.isName());
625:       assertFalse(node3.isSetterDef());
626:       assertFalse(node3.isCall());
627:       assertTrue(node3.isString());
628:       assertFalse(node3.isAdd());
629:       assertFalse(node3.isBlock());
630:       assertEquals(0, node3.getChildCount());
631:       assertFalse(node3.isNew());
632:       assertFalse(node3.isVar());
633:       assertFalse(node3.isWhile());
634:       assertEquals(40, node3.getType());
635:       assertFalse(node3.isFunction());
636:       assertFalse(node3.isContinue());
637:       assertFalse(node3.isArrayLit());
638:       assertFalse(node3.isDebugger());
639:       assertFalse(node3.isStringKey());
640:       assertFalse(node3.isParamList());
641:       assertFalse(node3.isFor());
642:       assertFalse(node3.isGetterDef());
643:       assertFalse(node3.isCast());
644:       assertFalse(node3.isNumber());
645:       assertFalse(node3.isTry());
646:       assertFalse(node3.hasOneChild());
647:       assertFalse(node3.isWith());
648:       assertFalse(node3.hasMoreThanOneChild());
649:       assertFalse(node3.isCatch());
650:       assertFalse(node3.isInc());
651:       assertFalse(node3.isRegExp());
652:       assertFalse(node3.isIn());
653:       assertFalse(node3.isInstanceOf());
654:       assertEquals((-1), node3.getLineno());
655:       assertFalse(node3.isNE());
656:       assertFalse(node3.isIf());
657:       
658:       Iterable<Node> iterable0 = node3.children();
659:       assertFalse(iterable0.contains(node2));
660:       assertNotSame(node1, node0);
661:       assertSame(node2, node3);
662:       assertSame(node3, node2);
663:       assertEquals(43, Node.IS_CONSTANT_NAME);
664:       assertEquals(36, Node.QUOTED_PROP);
665:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
666:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
667:       assertEquals(4095, Node.COLUMN_MASK);
668:       assertEquals(56, Node.CHANGE_TIME);
669:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
670:       assertEquals(47, Node.IS_DISPATCHER);
671:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
672:       assertEquals(39, Node.EMPTY_BLOCK);
673:       assertEquals(29, Node.JSDOC_INFO_PROP);
674:       assertEquals(48, Node.DIRECTIVES);
675:       assertEquals(37, Node.OPT_ARG_NAME);
676:       assertEquals(55, Node.INFERRED_FUNCTION);
677:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
678:       assertEquals(53, Node.INPUT_ID);
679:       assertEquals(57, Node.REFLECTED_OBJECT);
680:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
681:       assertEquals(52, Node.LENGTH);
682:       assertEquals(8, Node.FLAG_NO_THROWS);
683:       assertEquals(15, Node.NO_SIDE_EFFECTS);
684:       assertEquals(57, Node.LAST_PROP);
685:       assertEquals(54, Node.SLASH_V);
686:       assertEquals(1, Node.DECR_FLAG);
687:       assertEquals(49, Node.DIRECT_EVAL);
688:       assertEquals(40, Node.ORIGINALNAME_PROP);
689:       assertEquals(12, Node.COLUMN_BITS);
690:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
691:       assertEquals(2, Node.POST_FLAG);
692:       assertEquals(30, Node.VAR_ARGS_NAME);
693:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
694:       assertEquals(32, Node.INCRDECR_PROP);
695:       assertEquals(51, Node.STATIC_SOURCE_FILE);
696:       assertEquals(46, Node.IS_NAMESPACE);
697:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
698:       assertEquals(50, Node.FREE_CALL);
699:       assertEquals(30, Node.VAR_ARGS_NAME);
700:       assertEquals(49, Node.DIRECT_EVAL);
701:       assertEquals(57, Node.LAST_PROP);
702:       assertEquals(12, Node.COLUMN_BITS);
703:       assertEquals(54, Node.SLASH_V);
704:       assertEquals(51, Node.STATIC_SOURCE_FILE);
705:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
706:       assertEquals(52, Node.LENGTH);
707:       assertEquals(32, Node.INCRDECR_PROP);
708:       assertEquals(15, Node.NO_SIDE_EFFECTS);
709:       assertEquals(1, Node.DECR_FLAG);
710:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
711:       assertEquals(50, Node.FREE_CALL);
712:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
713:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
714:       assertEquals(2, Node.POST_FLAG);
715:       assertEquals(47, Node.IS_DISPATCHER);
716:       assertEquals(46, Node.IS_NAMESPACE);
717:       assertEquals(40, Node.ORIGINALNAME_PROP);
718:       assertEquals(43, Node.IS_CONSTANT_NAME);
719:       assertEquals(36, Node.QUOTED_PROP);
720:       assertEquals(55, Node.INFERRED_FUNCTION);
721:       assertEquals(39, Node.EMPTY_BLOCK);
722:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
723:       assertEquals(53, Node.INPUT_ID);
724:       assertEquals(29, Node.JSDOC_INFO_PROP);
725:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
726:       assertEquals(56, Node.CHANGE_TIME);
727:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
728:       assertEquals(8, Node.FLAG_NO_THROWS);
729:       assertEquals(57, Node.REFLECTED_OBJECT);
730:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
731:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
732:       assertEquals(4095, Node.COLUMN_MASK);
733:       assertEquals(37, Node.OPT_ARG_NAME);
734:       assertEquals(48, Node.DIRECTIVES);
735:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
736:       assertEquals(8, Node.FLAG_NO_THROWS);
737:       assertEquals(39, Node.EMPTY_BLOCK);
738:       assertEquals(48, Node.DIRECTIVES);
739:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
740:       assertEquals(50, Node.FREE_CALL);
741:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
742:       assertEquals(4095, Node.COLUMN_MASK);
743:       assertEquals(40, Node.ORIGINALNAME_PROP);
744:       assertEquals(57, Node.REFLECTED_OBJECT);
745:       assertEquals(43, Node.IS_CONSTANT_NAME);
746:       assertEquals(54, Node.SLASH_V);
747:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
748:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
749:       assertEquals(12, Node.COLUMN_BITS);
750:       assertEquals(1, Node.DECR_FLAG);
751:       assertEquals(32, Node.INCRDECR_PROP);
752:       assertEquals(2, Node.POST_FLAG);
753:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
754:       assertEquals(47, Node.IS_DISPATCHER);
755:       assertEquals(37, Node.OPT_ARG_NAME);
756:       assertEquals(29, Node.JSDOC_INFO_PROP);
757:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
758:       assertEquals(51, Node.STATIC_SOURCE_FILE);
759:       assertEquals(49, Node.DIRECT_EVAL);
760:       assertEquals(46, Node.IS_NAMESPACE);
761:       assertEquals(56, Node.CHANGE_TIME);
762:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
763:       assertEquals(15, Node.NO_SIDE_EFFECTS);
764:       assertEquals(36, Node.QUOTED_PROP);
765:       assertEquals(30, Node.VAR_ARGS_NAME);
766:       assertEquals(52, Node.LENGTH);
767:       assertEquals(53, Node.INPUT_ID);
768:       assertEquals(55, Node.INFERRED_FUNCTION);
769:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
770:       assertEquals(57, Node.LAST_PROP);
771:       assertNotNull(iterable0);
772:       assertFalse(node1.equals((Object)node0));
773:       assertFalse(node1.equals((Object)node3));
774:       assertFalse(node1.equals((Object)node2));
775:       assertFalse(node2.equals((Object)node1));
776:       assertFalse(node2.equals((Object)node0));
777:       assertFalse(node3.equals((Object)node0));
778:       assertFalse(node3.equals((Object)node1));
779:       assertFalse(node1.isAnd());
780:       assertFalse(node1.isGetProp());
781:       assertFalse(node1.isScript());
782:       assertFalse(node1.isNot());
783:       assertFalse(node1.isObjectLit());
784:       assertFalse(node1.isHook());
785:       assertFalse(node1.isGetElem());
786:       assertFalse(node1.isBreak());
787:       assertFalse(node1.hasOneChild());
788:       assertFalse(node1.isComma());
789:       assertFalse(node1.isThis());
790:       assertFalse(node1.isReturn());
791:       assertFalse(node1.isExprResult());
792:       assertFalse(node1.isDec());
793:       assertFalse(node1.hasChildren());
794:       assertFalse(node1.isInstanceOf());
795:       assertFalse(node1.isAssign());
796:       assertFalse(node1.hasMoreThanOneChild());
797:       assertFalse(node1.isWith());
798:       assertFalse(node1.isTypeOf());
799:       assertFalse(node1.isCase());
800:       assertFalse(node1.isSwitch());
801:       assertFalse(node1.isDo());
802:       assertFalse(node1.isAssignAdd());
803:       assertEquals((-1), node1.getCharno());
804:       assertFalse(node1.isNew());
805:       assertFalse(node1.isAdd());
806:       assertFalse(node1.isOr());
807:       assertFalse(node1.isGetterDef());
808:       assertFalse(node1.isNumber());
809:       assertFalse(node1.isStringKey());
810:       assertFalse(node1.isEmpty());
811:       assertFalse(node1.isVar());
812:       assertFalse(node1.isArrayLit());
813:       assertFalse(node1.isLabelName());
814:       assertFalse(node1.isLabel());
815:       assertEquals(0, node1.getChildCount());
816:       assertTrue(node1.isThrow());
817:       assertFalse(node1.isCatch());
818:       assertFalse(node1.isDefaultCase());
819:       assertFalse(node1.isParamList());
820:       assertFalse(node1.isDebugger());
821:       assertFalse(node1.isSetterDef());
822:       assertFalse(node1.isNull());
823:       assertFalse(node1.isTrue());
824:       assertFalse(node1.isFor());
825:       assertFalse(node1.isCall());
826:       assertFalse(node1.isIf());
827:       assertFalse(node1.isTry());
828:       assertFalse(node1.isDelProp());
829:       assertFalse(node1.isName());
830:       assertFalse(node1.isVoid());
831:       assertFalse(node1.isBlock());
832:       assertFalse(node1.isRegExp());
833:       assertFalse(node1.isContinue());
834:       assertEquals((-1), node1.getLineno());
835:       assertFalse(node1.isWhile());
836:       assertEquals(49, node1.getType());
837:       assertFalse(node1.isNE());
838:       assertFalse(node1.isInc());
839:       assertFalse(node1.isIn());
840:       assertFalse(node1.isString());
841:       assertEquals((-1), node1.getSourcePosition());
842:       assertFalse(node1.isFalse());
843:       assertFalse(node1.isCast());
844:       assertFalse(node1.isFunction());
845:       assertFalse(node2.isIn());
846:       assertFalse(node2.isSwitch());
847:       assertFalse(node2.isNE());
848:       assertFalse(node2.isIf());
849:       assertFalse(node2.isDelProp());
850:       assertFalse(node2.isThrow());
851:       assertFalse(node2.isFalse());
852:       assertFalse(node2.isInc());
853:       assertFalse(node2.isDefaultCase());
854:       assertFalse(node2.isEmpty());
855:       assertFalse(node2.isObjectLit());
856:       assertFalse(node2.isAnd());
857:       assertFalse(node2.isNot());
858:       assertEquals(40, node2.getType());
859:       assertFalse(node2.isComma());
860:       assertFalse(node2.isFunction());
861:       assertFalse(node2.isVoid());
862:       assertFalse(node2.isNull());
863:       assertFalse(node2.isTrue());
864:       assertFalse(node2.isExprResult());
865:       assertFalse(node2.isName());
866:       assertFalse(node2.isBreak());
867:       assertFalse(node2.isCall());
868:       assertFalse(node2.isAssign());
869:       assertFalse(node2.isDec());
870:       assertEquals((-1), node2.getSourcePosition());
871:       assertFalse(node2.hasChildren());
872:       assertFalse(node2.isDebugger());
873:       assertFalse(node2.isGetProp());
874:       assertFalse(node2.hasMoreThanOneChild());
875:       assertFalse(node2.isContinue());
876:       assertFalse(node2.isReturn());
877:       assertFalse(node2.isWhile());
878:       assertFalse(node2.isOr());
879:       assertFalse(node2.isLabel());
880:       assertFalse(node2.isTypeOf());
881:       assertEquals((-1), node2.getLineno());
882:       assertFalse(node2.isLabelName());
883:       assertFalse(node2.isGetElem());
884:       assertFalse(node2.isCast());
885:       assertFalse(node2.isVar());
886:       assertFalse(node2.isSetterDef());
887:       assertFalse(node2.isAssignAdd());
888:       assertFalse(node2.isDo());
889:       assertFalse(node2.isAdd());
890:       assertFalse(node2.isNew());
891:       assertFalse(node2.isCatch());
892:       assertFalse(node2.isInstanceOf());
893:       assertFalse(node2.isWith());
894:       assertEquals(0, node2.getChildCount());
895:       assertFalse(node2.isParamList());
896:       assertFalse(node2.isRegExp());
897:       assertFalse(node2.isArrayLit());
898:       assertFalse(node2.isStringKey());
899:       assertFalse(node2.isGetterDef());
900:       assertFalse(node2.isFor());
901:       assertFalse(node2.isHook());
902:       assertFalse(node2.isBlock());
903:       assertEquals((-1), node2.getCharno());
904:       assertFalse(node2.isThis());
905:       assertFalse(node2.isScript());
906:       assertFalse(node2.isNumber());
907:       assertTrue(node2.isString());
908:       assertFalse(node2.isTry());
909:       assertFalse(node2.hasOneChild());
910:       assertFalse(node2.isCase());
911:       assertFalse(node3.isFalse());
912:       assertFalse(node3.isBreak());
913:       assertFalse(node3.isGetProp());
914:       assertFalse(node3.isComma());
915:       assertFalse(node3.isHook());
916:       assertFalse(node3.isThis());
917:       assertFalse(node3.isThrow());
918:       assertFalse(node3.isNot());
919:       assertFalse(node3.isCase());
920:       assertFalse(node3.isScript());
921:       assertFalse(node3.isObjectLit());
922:       assertEquals((-1), node3.getCharno());
923:       assertFalse(node3.isSwitch());
924:       assertFalse(node3.isAnd());
925:       assertFalse(node3.isEmpty());
926:       assertFalse(node3.isLabelName());
927:       assertFalse(node3.isAssign());
928:       assertFalse(node3.isDelProp());
929:       assertFalse(node3.isGetElem());
930:       assertFalse(node3.isDec());
931:       assertFalse(node3.hasChildren());
932:       assertEquals((-1), node3.getSourcePosition());
933:       assertFalse(node3.isTypeOf());
934:       assertFalse(node3.isLabel());
935:       assertFalse(node3.isAssignAdd());
936:       assertFalse(node3.isReturn());
937:       assertFalse(node3.isDefaultCase());
938:       assertFalse(node3.isDo());
939:       assertFalse(node3.isExprResult());
940:       assertFalse(node3.isOr());
941:       assertFalse(node3.isVoid());
942:       assertFalse(node3.isNull());
943:       assertFalse(node3.isTrue());
944:       assertFalse(node3.isName());
945:       assertFalse(node3.isSetterDef());
946:       assertFalse(node3.isCall());
947:       assertTrue(node3.isString());
948:       assertFalse(node3.isAdd());
949:       assertFalse(node3.isBlock());
950:       assertEquals(0, node3.getChildCount());
951:       assertFalse(node3.isNew());
952:       assertFalse(node3.isVar());
953:       assertFalse(node3.isWhile());
954:       assertEquals(40, node3.getType());
955:       assertFalse(node3.isFunction());
956:       assertFalse(node3.isContinue());
957:       assertFalse(node3.isArrayLit());
958:       assertFalse(node3.isDebugger());
959:       assertFalse(node3.isStringKey());
960:       assertFalse(node3.isParamList());
961:       assertFalse(node3.isFor());
962:       assertFalse(node3.isGetterDef());
963:       assertFalse(node3.isCast());
964:       assertFalse(node3.isNumber());
965:       assertFalse(node3.isTry());
966:       assertFalse(node3.hasOneChild());
967:       assertFalse(node3.isWith());
968:       assertFalse(node3.hasMoreThanOneChild());
969:       assertFalse(node3.isCatch());
970:       assertFalse(node3.isInc());
971:       assertFalse(node3.isRegExp());
972:       assertFalse(node3.isIn());
973:       assertFalse(node3.isInstanceOf());
974:       assertEquals((-1), node3.getLineno());
975:       assertFalse(node3.isNE());
976:       assertFalse(node3.isIf());
977:       
978:       boolean boolean0 = node1.isGetProp();
979:       assertFalse(boolean0);
980:       assertNotSame(node1, node0);
981:       assertEquals(43, Node.IS_CONSTANT_NAME);
982:       assertEquals(36, Node.QUOTED_PROP);
983:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
984:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
985:       assertEquals(4095, Node.COLUMN_MASK);
986:       assertEquals(56, Node.CHANGE_TIME);
987:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
988:       assertEquals(47, Node.IS_DISPATCHER);
989:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
990:       assertEquals(39, Node.EMPTY_BLOCK);
991:       assertEquals(29, Node.JSDOC_INFO_PROP);
992:       assertEquals(48, Node.DIRECTIVES);
993:       assertEquals(37, Node.OPT_ARG_NAME);
994:       assertEquals(55, Node.INFERRED_FUNCTION);
995:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
996:       assertEquals(53, Node.INPUT_ID);
997:       assertEquals(57, Node.REFLECTED_OBJECT);
998:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
999:       assertEquals(52, Node.LENGTH);
1000:       assertEquals(8, Node.FLAG_NO_THROWS);
1001:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1002:       assertEquals(57, Node.LAST_PROP);
1003:       assertEquals(54, Node.SLASH_V);
1004:       assertEquals(1, Node.DECR_FLAG);
1005:       assertEquals(49, Node.DIRECT_EVAL);
1006:       assertEquals(40, Node.ORIGINALNAME_PROP);
1007:       assertEquals(12, Node.COLUMN_BITS);
1008:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1009:       assertEquals(2, Node.POST_FLAG);
1010:       assertEquals(30, Node.VAR_ARGS_NAME);
1011:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1012:       assertEquals(32, Node.INCRDECR_PROP);
1013:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1014:       assertEquals(46, Node.IS_NAMESPACE);
1015:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1016:       assertEquals(50, Node.FREE_CALL);
1017:       assertFalse(node1.equals((Object)node0));
1018:       assertFalse(node1.equals((Object)node3));
1019:       assertFalse(node1.equals((Object)node2));
1020:       assertFalse(node1.isAnd());
1021:       assertFalse(node1.isGetProp());
1022:       assertFalse(node1.isScript());
1023:       assertFalse(node1.isNot());
1024:       assertFalse(node1.isObjectLit());
1025:       assertFalse(node1.isHook());
1026:       assertFalse(node1.isGetElem());
1027:       assertFalse(node1.isBreak());
1028:       assertFalse(node1.hasOneChild());
1029:       assertFalse(node1.isComma());
1030:       assertFalse(node1.isThis());
1031:       assertFalse(node1.isReturn());
1032:       assertFalse(node1.isExprResult());
1033:       assertFalse(node1.isDec());
1034:       assertFalse(node1.hasChildren());
1035:       assertFalse(node1.isInstanceOf());
1036:       assertFalse(node1.isAssign());
1037:       assertFalse(node1.hasMoreThanOneChild());
1038:       assertFalse(node1.isWith());
1039:       assertFalse(node1.isTypeOf());
1040:       assertFalse(node1.isCase());
1041:       assertFalse(node1.isSwitch());
1042:       assertFalse(node1.isDo());
1043:       assertFalse(node1.isAssignAdd());
1044:       assertEquals((-1), node1.getCharno());
1045:       assertFalse(node1.isNew());
1046:       assertFalse(node1.isAdd());
1047:       assertFalse(node1.isOr());
1048:       assertFalse(node1.isGetterDef());
1049:       assertFalse(node1.isNumber());
1050:       assertFalse(node1.isStringKey());
1051:       assertFalse(node1.isEmpty());
1052:       assertFalse(node1.isVar());
1053:       assertFalse(node1.isArrayLit());
1054:       assertFalse(node1.isLabelName());
1055:       assertFalse(node1.isLabel());
1056:       assertEquals(0, node1.getChildCount());
1057:       assertTrue(node1.isThrow());
1058:       assertFalse(node1.isCatch());
1059:       assertFalse(node1.isDefaultCase());
1060:       assertFalse(node1.isParamList());
1061:       assertFalse(node1.isDebugger());
1062:       assertFalse(node1.isSetterDef());
1063:       assertFalse(node1.isNull());
1064:       assertFalse(node1.isTrue());
1065:       assertFalse(node1.isFor());
1066:       assertFalse(node1.isCall());
1067:       assertFalse(node1.isIf());
1068:       assertFalse(node1.isTry());
1069:       assertFalse(node1.isDelProp());
1070:       assertFalse(node1.isName());
1071:       assertFalse(node1.isVoid());
1072:       assertFalse(node1.isBlock());
1073:       assertFalse(node1.isRegExp());
1074:       assertFalse(node1.isContinue());
1075:       assertEquals((-1), node1.getLineno());
1076:       assertFalse(node1.isWhile());
1077:       assertEquals(49, node1.getType());
1078:       assertFalse(node1.isNE());
1079:       assertFalse(node1.isInc());
1080:       assertFalse(node1.isIn());
1081:       assertFalse(node1.isString());
1082:       assertEquals((-1), node1.getSourcePosition());
1083:       assertFalse(node1.isFalse());
1084:       assertFalse(node1.isCast());
1085:       assertFalse(node1.isFunction());
1086:       
1087:       boolean boolean1 = node3.hasChildren();
1088:       assertFalse(boolean1);
1089:       assertNotSame(node1, node0);
1090:       assertSame(node2, node3);
1091:       assertSame(node3, node2);
1092:       assertEquals(43, Node.IS_CONSTANT_NAME);
1093:       assertEquals(36, Node.QUOTED_PROP);
1094:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1095:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1096:       assertEquals(4095, Node.COLUMN_MASK);
1097:       assertEquals(56, Node.CHANGE_TIME);
1098:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1099:       assertEquals(47, Node.IS_DISPATCHER);
1100:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1101:       assertEquals(39, Node.EMPTY_BLOCK);
1102:       assertEquals(29, Node.JSDOC_INFO_PROP);
1103:       assertEquals(48, Node.DIRECTIVES);
1104:       assertEquals(37, Node.OPT_ARG_NAME);
1105:       assertEquals(55, Node.INFERRED_FUNCTION);
1106:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1107:       assertEquals(53, Node.INPUT_ID);
1108:       assertEquals(57, Node.REFLECTED_OBJECT);
1109:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1110:       assertEquals(52, Node.LENGTH);
1111:       assertEquals(8, Node.FLAG_NO_THROWS);
1112:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1113:       assertEquals(57, Node.LAST_PROP);
1114:       assertEquals(54, Node.SLASH_V);
1115:       assertEquals(1, Node.DECR_FLAG);
1116:       assertEquals(49, Node.DIRECT_EVAL);
1117:       assertEquals(40, Node.ORIGINALNAME_PROP);
1118:       assertEquals(12, Node.COLUMN_BITS);
1119:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1120:       assertEquals(2, Node.POST_FLAG);
1121:       assertEquals(30, Node.VAR_ARGS_NAME);
1122:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1123:       assertEquals(32, Node.INCRDECR_PROP);
1124:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1125:       assertEquals(46, Node.IS_NAMESPACE);
1126:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1127:       assertEquals(50, Node.FREE_CALL);
1128:       assertEquals(30, Node.VAR_ARGS_NAME);
1129:       assertEquals(49, Node.DIRECT_EVAL);
1130:       assertEquals(57, Node.LAST_PROP);
1131:       assertEquals(12, Node.COLUMN_BITS);
1132:       assertEquals(54, Node.SLASH_V);
1133:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1134:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1135:       assertEquals(52, Node.LENGTH);
1136:       assertEquals(32, Node.INCRDECR_PROP);
1137:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1138:       assertEquals(1, Node.DECR_FLAG);
1139:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1140:       assertEquals(50, Node.FREE_CALL);
1141:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1142:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1143:       assertEquals(2, Node.POST_FLAG);
1144:       assertEquals(47, Node.IS_DISPATCHER);
1145:       assertEquals(46, Node.IS_NAMESPACE);
1146:       assertEquals(40, Node.ORIGINALNAME_PROP);
1147:       assertEquals(43, Node.IS_CONSTANT_NAME);
1148:       assertEquals(36, Node.QUOTED_PROP);
1149:       assertEquals(55, Node.INFERRED_FUNCTION);
1150:       assertEquals(39, Node.EMPTY_BLOCK);
1151:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1152:       assertEquals(53, Node.INPUT_ID);
1153:       assertEquals(29, Node.JSDOC_INFO_PROP);
1154:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1155:       assertEquals(56, Node.CHANGE_TIME);
1156:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1157:       assertEquals(8, Node.FLAG_NO_THROWS);
1158:       assertEquals(57, Node.REFLECTED_OBJECT);
1159:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1160:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1161:       assertEquals(4095, Node.COLUMN_MASK);
1162:       assertEquals(37, Node.OPT_ARG_NAME);
1163:       assertEquals(48, Node.DIRECTIVES);
1164:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1165:       assertEquals(8, Node.FLAG_NO_THROWS);
1166:       assertEquals(39, Node.EMPTY_BLOCK);
1167:       assertEquals(48, Node.DIRECTIVES);
1168:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1169:       assertEquals(50, Node.FREE_CALL);
1170:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1171:       assertEquals(4095, Node.COLUMN_MASK);
1172:       assertEquals(40, Node.ORIGINALNAME_PROP);
1173:       assertEquals(57, Node.REFLECTED_OBJECT);
1174:       assertEquals(43, Node.IS_CONSTANT_NAME);
1175:       assertEquals(54, Node.SLASH_V);
1176:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1177:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1178:       assertEquals(12, Node.COLUMN_BITS);
1179:       assertEquals(1, Node.DECR_FLAG);
1180:       assertEquals(32, Node.INCRDECR_PROP);
1181:       assertEquals(2, Node.POST_FLAG);
1182:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1183:       assertEquals(47, Node.IS_DISPATCHER);
1184:       assertEquals(37, Node.OPT_ARG_NAME);
1185:       assertEquals(29, Node.JSDOC_INFO_PROP);
1186:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1187:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1188:       assertEquals(49, Node.DIRECT_EVAL);
1189:       assertEquals(46, Node.IS_NAMESPACE);
1190:       assertEquals(56, Node.CHANGE_TIME);
1191:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1192:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1193:       assertEquals(36, Node.QUOTED_PROP);
1194:       assertEquals(30, Node.VAR_ARGS_NAME);
1195:       assertEquals(52, Node.LENGTH);
1196:       assertEquals(53, Node.INPUT_ID);
1197:       assertEquals(55, Node.INFERRED_FUNCTION);
1198:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1199:       assertEquals(57, Node.LAST_PROP);
1200:       assertFalse(node1.equals((Object)node0));
1201:       assertFalse(node1.equals((Object)node3));
1202:       assertFalse(node1.equals((Object)node2));
1203:       assertFalse(node2.equals((Object)node1));
1204:       assertFalse(node2.equals((Object)node0));
1205:       assertFalse(node3.equals((Object)node0));
1206:       assertFalse(node3.equals((Object)node1));
1207:       assertTrue(boolean1 == boolean0);
1208:       assertFalse(node1.isAnd());
1209:       assertFalse(node1.isGetProp());
1210:       assertFalse(node1.isScript());
1211:       assertFalse(node1.isNot());
1212:       assertFalse(node1.isObjectLit());
1213:       assertFalse(node1.isHook());
1214:       assertFalse(node1.isGetElem());
1215:       assertFalse(node1.isBreak());
1216:       assertFalse(node1.hasOneChild());
1217:       assertFalse(node1.isComma());
1218:       assertFalse(node1.isThis());
1219:       assertFalse(node1.isReturn());
1220:       assertFalse(node1.isExprResult());
1221:       assertFalse(node1.isDec());
1222:       assertFalse(node1.hasChildren());
1223:       assertFalse(node1.isInstanceOf());
1224:       assertFalse(node1.isAssign());
1225:       assertFalse(node1.hasMoreThanOneChild());
1226:       assertFalse(node1.isWith());
1227:       assertFalse(node1.isTypeOf());
1228:       assertFalse(node1.isCase());
1229:       assertFalse(node1.isSwitch());
1230:       assertFalse(node1.isDo());
1231:       assertFalse(node1.isAssignAdd());
1232:       assertEquals((-1), node1.getCharno());
1233:       assertFalse(node1.isNew());
1234:       assertFalse(node1.isAdd());
1235:       assertFalse(node1.isOr());
1236:       assertFalse(node1.isGetterDef());
1237:       assertFalse(node1.isNumber());
1238:       assertFalse(node1.isStringKey());
1239:       assertFalse(node1.isEmpty());
1240:       assertFalse(node1.isVar());
1241:       assertFalse(node1.isArrayLit());
1242:       assertFalse(node1.isLabelName());
1243:       assertFalse(node1.isLabel());
1244:       assertEquals(0, node1.getChildCount());
1245:       assertTrue(node1.isThrow());
1246:       assertFalse(node1.isCatch());
1247:       assertFalse(node1.isDefaultCase());
1248:       assertFalse(node1.isParamList());
1249:       assertFalse(node1.isDebugger());
1250:       assertFalse(node1.isSetterDef());
1251:       assertFalse(node1.isNull());
1252:       assertFalse(node1.isTrue());
1253:       assertFalse(node1.isFor());
1254:       assertFalse(node1.isCall());
1255:       assertFalse(node1.isIf());
1256:       assertFalse(node1.isTry());
1257:       assertFalse(node1.isDelProp());
1258:       assertFalse(node1.isName());
1259:       assertFalse(node1.isVoid());
1260:       assertFalse(node1.isBlock());
1261:       assertFalse(node1.isRegExp());
1262:       assertFalse(node1.isContinue());
1263:       assertEquals((-1), node1.getLineno());
1264:       assertFalse(node1.isWhile());
1265:       assertEquals(49, node1.getType());
1266:       assertFalse(node1.isNE());
1267:       assertFalse(node1.isInc());
1268:       assertFalse(node1.isIn());
1269:       assertFalse(node1.isString());
1270:       assertEquals((-1), node1.getSourcePosition());
1271:       assertFalse(node1.isFalse());
1272:       assertFalse(node1.isCast());
1273:       assertFalse(node1.isFunction());
1274:       assertFalse(node2.isIn());
1275:       assertFalse(node2.isSwitch());
1276:       assertFalse(node2.isNE());
1277:       assertFalse(node2.isIf());
1278:       assertFalse(node2.isDelProp());
1279:       assertFalse(node2.isThrow());
1280:       assertFalse(node2.isFalse());
1281:       assertFalse(node2.isInc());
1282:       assertFalse(node2.isDefaultCase());
1283:       assertFalse(node2.isEmpty());
1284:       assertFalse(node2.isObjectLit());
1285:       assertFalse(node2.isAnd());
1286:       assertFalse(node2.isNot());
1287:       assertEquals(40, node2.getType());
1288:       assertFalse(node2.isComma());
1289:       assertFalse(node2.isFunction());
1290:       assertFalse(node2.isVoid());
1291:       assertFalse(node2.isNull());
1292:       assertFalse(node2.isTrue());
1293:       assertFalse(node2.isExprResult());
1294:       assertFalse(node2.isName());
1295:       
1296:       boolean boolean2 = node2.isSwitch();
1297:       assertFalse(boolean2);
1298:       assertSame(node2, node3);
1299:       assertEquals(30, Node.VAR_ARGS_NAME);
1300:       assertEquals(49, Node.DIRECT_EVAL);
1301:       assertEquals(57, Node.LAST_PROP);
1302:       assertEquals(12, Node.COLUMN_BITS);
1303:       assertEquals(54, Node.SLASH_V);
1304:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1305:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1306:       assertEquals(52, Node.LENGTH);
1307:       assertEquals(32, Node.INCRDECR_PROP);
1308:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1309:       assertEquals(1, Node.DECR_FLAG);
1310:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1311:       assertEquals(50, Node.FREE_CALL);
1312:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1313:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1314:       assertEquals(2, Node.POST_FLAG);
1315:       assertEquals(47, Node.IS_DISPATCHER);
1316:       assertEquals(46, Node.IS_NAMESPACE);
1317:       assertEquals(40, Node.ORIGINALNAME_PROP);
1318:       assertEquals(43, Node.IS_CONSTANT_NAME);
1319:       assertEquals(36, Node.QUOTED_PROP);
1320:       assertEquals(55, Node.INFERRED_FUNCTION);
1321:       assertEquals(39, Node.EMPTY_BLOCK);
1322:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1323:       assertEquals(53, Node.INPUT_ID);
1324:       assertEquals(29, Node.JSDOC_INFO_PROP);
1325:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1326:       assertEquals(56, Node.CHANGE_TIME);
1327:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1328:       assertEquals(8, Node.FLAG_NO_THROWS);
1329:       assertEquals(57, Node.REFLECTED_OBJECT);
1330:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1331:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1332:       assertEquals(4095, Node.COLUMN_MASK);
1333:       assertEquals(37, Node.OPT_ARG_NAME);
1334:       assertEquals(48, Node.DIRECTIVES);
1335:       assertFalse(node2.equals((Object)node1));
1336:       assertFalse(node2.equals((Object)node0));
1337:       assertTrue(boolean2 == boolean0);
1338:       assertTrue(boolean2 == boolean1);
1339:       
1340:       Node node4 = node0.cloneNode();
1341:       assertNotSame(node0, node4);
1342:       assertNotSame(node0, node1);
1343:       assertNotSame(node4, node1);
1344:       assertNotSame(node4, node0);
1345:       assertEquals(43, Node.IS_CONSTANT_NAME);
1346:       assertEquals(36, Node.QUOTED_PROP);
1347:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1348:       assertEquals(53, Node.INPUT_ID);
1349:       assertEquals(55, Node.INFERRED_FUNCTION);
1350:       assertEquals(4095, Node.COLUMN_MASK);
1351:       assertEquals(48, Node.DIRECTIVES);
1352:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1353:       assertEquals(56, Node.CHANGE_TIME);
1354:       assertEquals(47, Node.IS_DISPATCHER);
1355:       assertEquals(2, Node.POST_FLAG);
1356:       assertEquals(39, Node.EMPTY_BLOCK);
1357:       assertEquals(40, Node.ORIGINALNAME_PROP);
1358:       assertEquals(29, Node.JSDOC_INFO_PROP);
1359:       assertEquals(8, Node.FLAG_NO_THROWS);
1360:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1361:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1362:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1363:       assertEquals(57, Node.LAST_PROP);
1364:       assertEquals(30, Node.VAR_ARGS_NAME);
1365:       assertEquals(52, Node.LENGTH);
1366:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1367:       assertEquals(57, Node.REFLECTED_OBJECT);
1368:       assertEquals(46, Node.IS_NAMESPACE);
1369:       assertEquals(49, Node.DIRECT_EVAL);
1370:       assertEquals(54, Node.SLASH_V);
1371:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1372:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1373:       assertEquals(37, Node.OPT_ARG_NAME);
1374:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1375:       assertEquals(50, Node.FREE_CALL);
1376:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1377:       assertEquals(12, Node.COLUMN_BITS);
1378:       assertEquals(32, Node.INCRDECR_PROP);
1379:       assertEquals(1, Node.DECR_FLAG);
1380:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1381:       assertEquals(48, Node.DIRECTIVES);
1382:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1383:       assertEquals(50, Node.FREE_CALL);
1384:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1385:       assertEquals(8, Node.FLAG_NO_THROWS);
1386:       assertEquals(39, Node.EMPTY_BLOCK);
1387:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1388:       assertEquals(55, Node.INFERRED_FUNCTION);
1389:       assertEquals(53, Node.INPUT_ID);
1390:       assertEquals(43, Node.IS_CONSTANT_NAME);
1391:       assertEquals(57, Node.LAST_PROP);
1392:       assertEquals(54, Node.SLASH_V);
1393:       assertEquals(30, Node.VAR_ARGS_NAME);
1394:       assertEquals(40, Node.ORIGINALNAME_PROP);
1395:       assertEquals(37, Node.OPT_ARG_NAME);
1396:       assertEquals(32, Node.INCRDECR_PROP);
1397:       assertEquals(2, Node.POST_FLAG);
1398:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1399:       assertEquals(12, Node.COLUMN_BITS);
1400:       assertEquals(47, Node.IS_DISPATCHER);
1401:       assertEquals(46, Node.IS_NAMESPACE);
1402:       assertEquals(56, Node.CHANGE_TIME);
1403:       assertEquals(29, Node.JSDOC_INFO_PROP);
1404:       assertEquals(1, Node.DECR_FLAG);
1405:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1406:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1407:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1408:       assertEquals(52, Node.LENGTH);
1409:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1410:       assertEquals(36, Node.QUOTED_PROP);
1411:       assertEquals(57, Node.REFLECTED_OBJECT);
1412:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1413:       assertEquals(49, Node.DIRECT_EVAL);
1414:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1415:       assertEquals(4095, Node.COLUMN_MASK);
1416:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1417:       assertEquals(0, nodeArray0.length);
1418:       assertNotNull(node4);
1419:       assertFalse(node0.equals((Object)node2));
1420:       assertFalse(node0.equals((Object)node3));
1421:       assertFalse(node0.equals((Object)node1));
1422:       assertFalse(node4.equals((Object)node2));
1423:       assertFalse(node4.equals((Object)node3));
1424:       assertFalse(node4.equals((Object)node1));
1425:       assertFalse(node4.equals((Object)node0));
1426:       
1427:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
1428:       assertNotNull(node_SideEffectFlags0);
1429:       
1430:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
1431:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1432:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1433:       assertNotNull(node_SideEffectFlags1);
1434:       
1435:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
1436:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1437:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1438:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1439:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1440:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1441:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1442:       assertNotNull(node_SideEffectFlags2);
1443:       
1444:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
1445:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1446:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1447:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1448:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1449:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1450:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1451:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1452:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1453:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1454:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1455:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1456:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1457:       assertNotNull(node_SideEffectFlags3);
1458:       
1459:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
1460:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1461:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1462:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1463:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1464:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1465:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1466:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1467:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1468:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1469:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1470:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1471:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1472:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1473:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1474:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1475:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1476:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1477:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1478:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1479:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1480:       assertNotNull(node_SideEffectFlags4);
1481:       
1482:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
1483:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1484:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1485:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1486:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1487:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1488:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1489:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1490:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1491:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1492:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1493:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1494:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1495:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1496:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1497:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1498:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1499:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1500:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1501:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1502:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1503:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1504:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
1505:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1506:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1507:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1508:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
1509:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
1510:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
1511:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
1512:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
1513:       assertNotNull(node_SideEffectFlags5);
1514:       
1515:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setMutatesGlobalState();
1516:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
1517:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
1518:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
1519:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
1520:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
1521:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
1522:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1523:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1524:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1525:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1526:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1527:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1528:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1529:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1530:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1531:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1532:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1533:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1534:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1535:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1536:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1537:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1538:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1539:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
1540:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1541:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
1542:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1543:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1544:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1545:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1546:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
1547:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1548:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
1549:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1550:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1551:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1552:       assertNotNull(node_SideEffectFlags6);
1553:       
1554:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setReturnsTainted();
1555:       assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
1556:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
1557:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
1558:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
1559:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
1560:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
1561:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
1562:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
1563:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
1564:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
1565:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
1566:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
1567:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
1568:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
1569:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1570:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1571:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1572:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1573:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1574:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1575:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1576:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1577:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1578:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
1579:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1580:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1581:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1582:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1583:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1584:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1585:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1586:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1587:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1588:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
1589:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
1590:       assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
1591:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1592:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
1593:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1594:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1595:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1596:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1597:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
1598:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1599:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
1600:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1601:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1602:       assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
1603:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1604:       assertNotNull(node_SideEffectFlags7);
1605:       
1606:       Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags7.setMutatesArguments();
1607:       assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
1608:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
1609:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
1610:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
1611:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
1612:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
1613:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
1614:       assertSame(node_SideEffectFlags6, node_SideEffectFlags8);
1615:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
1616:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
1617:       assertSame(node_SideEffectFlags7, node_SideEffectFlags8);
1618:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
1619:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
1620:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
1621:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
1622:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
1623:       assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
1624:       assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
1625:       assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
1626:       assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
1627:       assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
1628:       assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
1629:       assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
1630:       assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
1631:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1632:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1633:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1634:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1635:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1636:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1637:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1638:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1639:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1640:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1641:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
1642:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1643:       assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
1644:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1645:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1646:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1647:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1648:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1649:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1650:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1651:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1652:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
1653:       assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
1654:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
1655:       assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
1656:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1657:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
1658:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1659:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1660:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1661:       assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
1662:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1663:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
1664:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1665:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
1666:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1667:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1668:       assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
1669:       assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
1670:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1671:       assertNotNull(node_SideEffectFlags8);
1672:       
1673:       Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags2.setMutatesGlobalState();
1674:       assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
1675:       assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
1676:       assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
1677:       assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
1678:       assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
1679:       assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
1680:       assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
1681:       assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
1682:       assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
1683:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1684:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1685:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1686:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1687:       assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
1688:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1689:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1690:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1691:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1692:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1693:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1694:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
1695:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1696:       assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
1697:       assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
1698:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1699:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1700:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1701:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1702:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1703:       assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
1704:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1705:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1706:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1707:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
1708:       assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
1709:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
1710:       assertNotNull(node_SideEffectFlags9);
1711:       
1712:       Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags0.setMutatesArguments();
1713:       assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
1714:       assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
1715:       assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
1716:       assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
1717:       assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
1718:       assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
1719:       assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
1720:       assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
1721:       assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
1722:       assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
1723:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1724:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1725:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1726:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1727:       assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
1728:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1729:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1730:       assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
1731:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1732:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1733:       assertNotNull(node_SideEffectFlags10);
1734:       
1735:       Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags10.setMutatesGlobalState();
1736:       assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
1737:       assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
1738:       assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
1739:       assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
1740:       assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
1741:       assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
1742:       assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
1743:       assertSame(node_SideEffectFlags10, node_SideEffectFlags11);
1744:       assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
1745:       assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
1746:       assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
1747:       assertSame(node_SideEffectFlags11, node_SideEffectFlags1);
1748:       assertSame(node_SideEffectFlags11, node_SideEffectFlags2);
1749:       assertSame(node_SideEffectFlags11, node_SideEffectFlags8);
1750:       assertSame(node_SideEffectFlags11, node_SideEffectFlags9);
1751:       assertSame(node_SideEffectFlags11, node_SideEffectFlags10);
1752:       assertSame(node_SideEffectFlags11, node_SideEffectFlags0);
1753:       assertSame(node_SideEffectFlags11, node_SideEffectFlags5);
1754:       assertSame(node_SideEffectFlags11, node_SideEffectFlags6);
1755:       assertSame(node_SideEffectFlags11, node_SideEffectFlags3);
1756:       assertSame(node_SideEffectFlags11, node_SideEffectFlags7);
1757:       assertSame(node_SideEffectFlags11, node_SideEffectFlags4);
1758:       assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
1759:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1760:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1761:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1762:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1763:       assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
1764:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1765:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1766:       assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
1767:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1768:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1769:       assertNotNull(node_SideEffectFlags11);
1770:       
1771:       Node node5 = new Node(48, node1, node0);
1772:       assertEquals(43, Node.IS_CONSTANT_NAME);
1773:       assertEquals(36, Node.QUOTED_PROP);
1774:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1775:       assertEquals(53, Node.INPUT_ID);
1776:       assertEquals(55, Node.INFERRED_FUNCTION);
1777:       assertEquals(4095, Node.COLUMN_MASK);
1778:       assertEquals(48, Node.DIRECTIVES);
1779:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1780:       assertEquals(56, Node.CHANGE_TIME);
1781:       assertEquals(47, Node.IS_DISPATCHER);
1782:       assertEquals(2, Node.POST_FLAG);
1783:       assertEquals(39, Node.EMPTY_BLOCK);
1784:       assertEquals(40, Node.ORIGINALNAME_PROP);
1785:       assertEquals(29, Node.JSDOC_INFO_PROP);
1786:       assertEquals(8, Node.FLAG_NO_THROWS);
1787:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1788:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1789:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1790:       assertEquals(57, Node.LAST_PROP);
1791:       assertEquals(30, Node.VAR_ARGS_NAME);
1792:       assertEquals(52, Node.LENGTH);
1793:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1794:       assertEquals(57, Node.REFLECTED_OBJECT);
1795:       assertEquals(46, Node.IS_NAMESPACE);
1796:       assertEquals(49, Node.DIRECT_EVAL);
1797:       assertEquals(54, Node.SLASH_V);
1798:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1799:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1800:       assertEquals(37, Node.OPT_ARG_NAME);
1801:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1802:       assertEquals(50, Node.FREE_CALL);
1803:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1804:       assertEquals(12, Node.COLUMN_BITS);
1805:       assertEquals(32, Node.INCRDECR_PROP);
1806:       assertEquals(1, Node.DECR_FLAG);
1807:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1808:       assertEquals(43, Node.IS_CONSTANT_NAME);
1809:       assertEquals(36, Node.QUOTED_PROP);
1810:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1811:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1812:       assertEquals(4095, Node.COLUMN_MASK);
1813:       assertEquals(56, Node.CHANGE_TIME);
1814:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1815:       assertEquals(47, Node.IS_DISPATCHER);
1816:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1817:       assertEquals(39, Node.EMPTY_BLOCK);
1818:       assertEquals(29, Node.JSDOC_INFO_PROP);
1819:       assertEquals(48, Node.DIRECTIVES);
1820:       assertEquals(37, Node.OPT_ARG_NAME);
1821:       assertEquals(55, Node.INFERRED_FUNCTION);
1822:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1823:       assertEquals(53, Node.INPUT_ID);
1824:       assertEquals(57, Node.REFLECTED_OBJECT);
1825:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1826:       assertEquals(52, Node.LENGTH);
1827:       assertEquals(8, Node.FLAG_NO_THROWS);
1828:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1829:       assertEquals(57, Node.LAST_PROP);
1830:       assertEquals(54, Node.SLASH_V);
1831:       assertEquals(1, Node.DECR_FLAG);
1832:       assertEquals(49, Node.DIRECT_EVAL);
1833:       assertEquals(40, Node.ORIGINALNAME_PROP);
1834:       assertEquals(12, Node.COLUMN_BITS);
1835:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1836:       assertEquals(2, Node.POST_FLAG);
1837:       assertEquals(30, Node.VAR_ARGS_NAME);
1838:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1839:       assertEquals(32, Node.INCRDECR_PROP);
1840:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1841:       assertEquals(46, Node.IS_NAMESPACE);
1842:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1843:       assertEquals(50, Node.FREE_CALL);
1844:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1845:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1846:       assertEquals(29, Node.JSDOC_INFO_PROP);
1847:       assertEquals(53, Node.INPUT_ID);
1848:       assertEquals(47, Node.IS_DISPATCHER);
1849:       assertEquals(2, Node.POST_FLAG);
1850:       assertEquals(46, Node.IS_NAMESPACE);
1851:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1852:       assertEquals(32, Node.INCRDECR_PROP);
1853:       assertEquals(1, Node.DECR_FLAG);
1854:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1855:       assertEquals(43, Node.IS_CONSTANT_NAME);
1856:       assertEquals(50, Node.FREE_CALL);
1857:       assertEquals(54, Node.SLASH_V);
1858:       assertEquals(52, Node.LENGTH);
1859:       assertEquals(40, Node.ORIGINALNAME_PROP);
1860:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1861:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1862:       assertEquals(57, Node.LAST_PROP);
1863:       assertEquals(30, Node.VAR_ARGS_NAME);
1864:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1865:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1866:       assertEquals(12, Node.COLUMN_BITS);
1867:       assertEquals(4095, Node.COLUMN_MASK);
1868:       assertEquals(48, Node.DIRECTIVES);
1869:       assertEquals(37, Node.OPT_ARG_NAME);
1870:       assertEquals(55, Node.INFERRED_FUNCTION);
1871:       assertEquals(39, Node.EMPTY_BLOCK);
1872:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1873:       assertEquals(56, Node.CHANGE_TIME);
1874:       assertEquals(36, Node.QUOTED_PROP);
1875:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1876:       assertEquals(8, Node.FLAG_NO_THROWS);
1877:       assertEquals(49, Node.DIRECT_EVAL);
1878:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1879:       assertEquals(57, Node.REFLECTED_OBJECT);
1880:       assertEquals(0, nodeArray0.length);
1881:       assertNotNull(node5);
1882:       assertFalse(node0.equals((Object)node4));
1883:       assertFalse(node0.equals((Object)node2));
1884:       assertFalse(node0.equals((Object)node3));
1885:       assertFalse(node0.equals((Object)node1));
1886:       assertFalse(node1.equals((Object)node0));
1887:       assertFalse(node1.equals((Object)node4));
1888:       assertFalse(node1.equals((Object)node3));
1889:       assertFalse(node1.equals((Object)node2));
1890:       assertFalse(node5.equals((Object)node2));
1891:       assertFalse(node5.equals((Object)node3));
1892:       assertFalse(node5.equals((Object)node4));
1893:       assertFalse(node5.equals((Object)node1));
1894:       assertFalse(node5.equals((Object)node0));
1895:       
1896:       boolean boolean3 = node1.hasOneChild();
1897:       assertFalse(boolean3);
1898:       assertNotSame(node1, node0);
1899:       assertNotSame(node1, node4);
1900:       assertNotSame(node1, node5);
1901:       assertEquals(43, Node.IS_CONSTANT_NAME);
1902:       assertEquals(36, Node.QUOTED_PROP);
1903:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1904:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1905:       assertEquals(4095, Node.COLUMN_MASK);
1906:       assertEquals(56, Node.CHANGE_TIME);
1907:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1908:       assertEquals(47, Node.IS_DISPATCHER);
1909:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1910:       assertEquals(39, Node.EMPTY_BLOCK);
1911:       assertEquals(29, Node.JSDOC_INFO_PROP);
1912:       assertEquals(48, Node.DIRECTIVES);
1913:       assertEquals(37, Node.OPT_ARG_NAME);
1914:       assertEquals(55, Node.INFERRED_FUNCTION);
1915:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1916:       assertEquals(53, Node.INPUT_ID);
1917:       assertEquals(57, Node.REFLECTED_OBJECT);
1918:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1919:       assertEquals(52, Node.LENGTH);
1920:       assertEquals(8, Node.FLAG_NO_THROWS);
1921:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1922:       assertEquals(57, Node.LAST_PROP);
1923:       assertEquals(54, Node.SLASH_V);
1924:       assertEquals(1, Node.DECR_FLAG);
1925:       assertEquals(49, Node.DIRECT_EVAL);
1926:       assertEquals(40, Node.ORIGINALNAME_PROP);
1927:       assertEquals(12, Node.COLUMN_BITS);
1928:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1929:       assertEquals(2, Node.POST_FLAG);
1930:       assertEquals(30, Node.VAR_ARGS_NAME);
1931:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1932:       assertEquals(32, Node.INCRDECR_PROP);
1933:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1934:       assertEquals(46, Node.IS_NAMESPACE);
1935:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1936:       assertEquals(50, Node.FREE_CALL);
1937:       assertFalse(node1.equals((Object)node0));
1938:       assertFalse(node1.equals((Object)node4));
1939:       assertFalse(node1.equals((Object)node3));
1940:       assertFalse(node1.equals((Object)node5));
1941:       assertFalse(node1.equals((Object)node2));
1942:       assertTrue(boolean3 == boolean0);
1943:       assertTrue(boolean3 == boolean2);
1944:       assertTrue(boolean3 == boolean1);
1945:       
1946:       boolean boolean4 = node5.isEquivalentToShallow(node0);
1947:       assertFalse(boolean4);
1948:       assertNotSame(node0, node4);
1949:       assertNotSame(node0, node5);
1950:       assertNotSame(node0, node1);
1951:       assertNotSame(node1, node0);
1952:       assertNotSame(node1, node4);
1953:       assertNotSame(node1, node5);
1954:       assertNotSame(node5, node4);
1955:       assertNotSame(node5, node1);
1956:       assertNotSame(node5, node0);
1957:       assertEquals(43, Node.IS_CONSTANT_NAME);
1958:       assertEquals(36, Node.QUOTED_PROP);
1959:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1960:       assertEquals(53, Node.INPUT_ID);
1961:       assertEquals(55, Node.INFERRED_FUNCTION);
1962:       assertEquals(4095, Node.COLUMN_MASK);
1963:       assertEquals(48, Node.DIRECTIVES);
1964:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1965:       assertEquals(56, Node.CHANGE_TIME);
1966:       assertEquals(47, Node.IS_DISPATCHER);
1967:       assertEquals(2, Node.POST_FLAG);
1968:       assertEquals(39, Node.EMPTY_BLOCK);
1969:       assertEquals(40, Node.ORIGINALNAME_PROP);
1970:       assertEquals(29, Node.JSDOC_INFO_PROP);
1971:       assertEquals(8, Node.FLAG_NO_THROWS);
1972:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1973:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1974:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1975:       assertEquals(57, Node.LAST_PROP);
1976:       assertEquals(30, Node.VAR_ARGS_NAME);
1977:       assertEquals(52, Node.LENGTH);
1978:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1979:       assertEquals(57, Node.REFLECTED_OBJECT);
1980:       assertEquals(46, Node.IS_NAMESPACE);
1981:       assertEquals(49, Node.DIRECT_EVAL);
1982:       assertEquals(54, Node.SLASH_V);
1983:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1984:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1985:       assertEquals(37, Node.OPT_ARG_NAME);
1986:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1987:       assertEquals(50, Node.FREE_CALL);
1988:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1989:       assertEquals(12, Node.COLUMN_BITS);
1990:       assertEquals(32, Node.INCRDECR_PROP);
1991:       assertEquals(1, Node.DECR_FLAG);
1992:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1993:       assertEquals(43, Node.IS_CONSTANT_NAME);
1994:       assertEquals(36, Node.QUOTED_PROP);
1995:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1996:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1997:       assertEquals(4095, Node.COLUMN_MASK);
1998:       assertEquals(56, Node.CHANGE_TIME);
1999:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2000:       assertEquals(47, Node.IS_DISPATCHER);
2001:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2002:       assertEquals(39, Node.EMPTY_BLOCK);
2003:       assertEquals(29, Node.JSDOC_INFO_PROP);
2004:       assertEquals(48, Node.DIRECTIVES);
2005:       assertEquals(37, Node.OPT_ARG_NAME);
2006:       assertEquals(55, Node.INFERRED_FUNCTION);
2007:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2008:       assertEquals(53, Node.INPUT_ID);
2009:       assertEquals(57, Node.REFLECTED_OBJECT);
2010:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2011:       assertEquals(52, Node.LENGTH);
2012:       assertEquals(8, Node.FLAG_NO_THROWS);
2013:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2014:       assertEquals(57, Node.LAST_PROP);
2015:       assertEquals(54, Node.SLASH_V);
2016:       assertEquals(1, Node.DECR_FLAG);
2017:       assertEquals(49, Node.DIRECT_EVAL);
2018:       assertEquals(40, Node.ORIGINALNAME_PROP);
2019:       assertEquals(12, Node.COLUMN_BITS);
2020:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2021:       assertEquals(2, Node.POST_FLAG);
2022:       assertEquals(30, Node.VAR_ARGS_NAME);
2023:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2024:       assertEquals(32, Node.INCRDECR_PROP);
2025:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2026:       assertEquals(46, Node.IS_NAMESPACE);
2027:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2028:       assertEquals(50, Node.FREE_CALL);
2029:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2030:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2031:       assertEquals(29, Node.JSDOC_INFO_PROP);
2032:       assertEquals(53, Node.INPUT_ID);
2033:       assertEquals(47, Node.IS_DISPATCHER);
2034:       assertEquals(2, Node.POST_FLAG);
2035:       assertEquals(46, Node.IS_NAMESPACE);
2036:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2037:       assertEquals(32, Node.INCRDECR_PROP);
2038:       assertEquals(1, Node.DECR_FLAG);
2039:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2040:       assertEquals(43, Node.IS_CONSTANT_NAME);
2041:       assertEquals(50, Node.FREE_CALL);
2042:       assertEquals(54, Node.SLASH_V);
2043:       assertEquals(52, Node.LENGTH);
2044:       assertEquals(40, Node.ORIGINALNAME_PROP);
2045:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2046:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2047:       assertEquals(57, Node.LAST_PROP);
2048:       assertEquals(30, Node.VAR_ARGS_NAME);
2049:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2050:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2051:       assertEquals(12, Node.COLUMN_BITS);
2052:       assertEquals(4095, Node.COLUMN_MASK);
2053:       assertEquals(48, Node.DIRECTIVES);
2054:       assertEquals(37, Node.OPT_ARG_NAME);
2055:       assertEquals(55, Node.INFERRED_FUNCTION);
2056:       assertEquals(39, Node.EMPTY_BLOCK);
2057:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2058:       assertEquals(56, Node.CHANGE_TIME);
2059:       assertEquals(36, Node.QUOTED_PROP);
2060:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2061:       assertEquals(8, Node.FLAG_NO_THROWS);
2062:       assertEquals(49, Node.DIRECT_EVAL);
2063:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2064:       assertEquals(57, Node.REFLECTED_OBJECT);
2065:       assertEquals(0, nodeArray0.length);
2066:       assertFalse(node0.equals((Object)node4));
2067:       assertFalse(node0.equals((Object)node2));
2068:       assertFalse(node0.equals((Object)node3));
2069:       assertFalse(node0.equals((Object)node5));
2070:       assertFalse(node0.equals((Object)node1));
2071:       assertFalse(node1.equals((Object)node0));
2072:       assertFalse(node1.equals((Object)node4));
2073:       assertFalse(node1.equals((Object)node3));
2074:       assertFalse(node1.equals((Object)node5));
2075:       assertFalse(node1.equals((Object)node2));
2076:       assertFalse(node5.equals((Object)node2));
2077:       assertFalse(node5.equals((Object)node3));
2078:       assertFalse(node5.equals((Object)node4));
2079:       assertFalse(node5.equals((Object)node1));
2080:       assertFalse(node5.equals((Object)node0));
2081:       assertTrue(boolean4 == boolean2);
2082:       assertTrue(boolean4 == boolean0);
2083:       assertTrue(boolean4 == boolean3);
2084:       assertTrue(boolean4 == boolean1);
2085:       
2086:       boolean boolean5 = node4.isName();
2087:       assertFalse(boolean5);
2088:       assertNotSame(node0, node4);
2089:       assertNotSame(node0, node5);
2090:       assertNotSame(node0, node1);
2091:       assertNotSame(node4, node1);
2092:       assertNotSame(node4, node0);
2093:       assertNotSame(node4, node5);
2094:       assertEquals(43, Node.IS_CONSTANT_NAME);
2095:       assertEquals(36, Node.QUOTED_PROP);
2096:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2097:       assertEquals(53, Node.INPUT_ID);
2098:       assertEquals(55, Node.INFERRED_FUNCTION);
2099:       assertEquals(4095, Node.COLUMN_MASK);
2100:       assertEquals(48, Node.DIRECTIVES);
2101:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2102:       assertEquals(56, Node.CHANGE_TIME);
2103:       assertEquals(47, Node.IS_DISPATCHER);
2104:       assertEquals(2, Node.POST_FLAG);
2105:       assertEquals(39, Node.EMPTY_BLOCK);
2106:       assertEquals(40, Node.ORIGINALNAME_PROP);
2107:       assertEquals(29, Node.JSDOC_INFO_PROP);
2108:       assertEquals(8, Node.FLAG_NO_THROWS);
2109:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2110:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2111:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2112:       assertEquals(57, Node.LAST_PROP);
2113:       assertEquals(30, Node.VAR_ARGS_NAME);
2114:       assertEquals(52, Node.LENGTH);
2115:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2116:       assertEquals(57, Node.REFLECTED_OBJECT);
2117:       assertEquals(46, Node.IS_NAMESPACE);
2118:       assertEquals(49, Node.DIRECT_EVAL);
2119:       assertEquals(54, Node.SLASH_V);
2120:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2121:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2122:       assertEquals(37, Node.OPT_ARG_NAME);
2123:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2124:       assertEquals(50, Node.FREE_CALL);
2125:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2126:       assertEquals(12, Node.COLUMN_BITS);
2127:       assertEquals(32, Node.INCRDECR_PROP);
2128:       assertEquals(1, Node.DECR_FLAG);
2129:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2130:       assertEquals(48, Node.DIRECTIVES);
2131:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2132:       assertEquals(50, Node.FREE_CALL);
2133:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2134:       assertEquals(8, Node.FLAG_NO_THROWS);
2135:       assertEquals(39, Node.EMPTY_BLOCK);
2136:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2137:       assertEquals(55, Node.INFERRED_FUNCTION);
2138:       assertEquals(53, Node.INPUT_ID);
2139:       assertEquals(43, Node.IS_CONSTANT_NAME);
2140:       assertEquals(57, Node.LAST_PROP);
2141:       assertEquals(54, Node.SLASH_V);
2142:       assertEquals(30, Node.VAR_ARGS_NAME);
2143:       assertEquals(40, Node.ORIGINALNAME_PROP);
2144:       assertEquals(37, Node.OPT_ARG_NAME);
2145:       assertEquals(32, Node.INCRDECR_PROP);
2146:       assertEquals(2, Node.POST_FLAG);
2147:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2148:       assertEquals(12, Node.COLUMN_BITS);
2149:       assertEquals(47, Node.IS_DISPATCHER);
2150:       assertEquals(46, Node.IS_NAMESPACE);
2151:       assertEquals(56, Node.CHANGE_TIME);
2152:       assertEquals(29, Node.JSDOC_INFO_PROP);
2153:       assertEquals(1, Node.DECR_FLAG);
2154:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2155:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2156:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2157:       assertEquals(52, Node.LENGTH);
2158:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2159:       assertEquals(36, Node.QUOTED_PROP);
2160:       assertEquals(57, Node.REFLECTED_OBJECT);
2161:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2162:       assertEquals(49, Node.DIRECT_EVAL);
2163:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2164:       assertEquals(4095, Node.COLUMN_MASK);
2165:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2166:       assertEquals(0, nodeArray0.length);
2167:       assertFalse(node0.equals((Object)node4));
2168:       assertFalse(node0.equals((Object)node2));
2169:       assertFalse(node0.equals((Object)node3));
2170:       assertFalse(node0.equals((Object)node5));
2171:       assertFalse(node0.equals((Object)node1));
2172:       assertTrue(boolean5 == boolean2);
2173:       assertTrue(boolean5 == boolean1);
2174:       assertTrue(boolean5 == boolean0);
2175:       assertTrue(boolean5 == boolean3);
2176:       assertTrue(boolean5 == boolean4);
2177:       assertFalse(node4.equals((Object)node2));
2178:       assertFalse(node4.equals((Object)node3));
2179:       assertFalse(node4.equals((Object)node1));
2180:       assertFalse(node4.equals((Object)node0));
2181:       assertFalse(node4.equals((Object)node5));
2182:       
2183:       boolean boolean6 = node3.isDelProp();
2184:       assertFalse(boolean6);
2185:       assertNotSame(node1, node0);
2186:       assertNotSame(node1, node4);
2187:       assertNotSame(node1, node5);
2188:       assertSame(node2, node3);
2189:       assertSame(node3, node2);
2190:       assertEquals(43, Node.IS_CONSTANT_NAME);
2191:       assertEquals(36, Node.QUOTED_PROP);
2192:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2193:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2194:       assertEquals(4095, Node.COLUMN_MASK);
2195:       assertEquals(56, Node.CHANGE_TIME);
2196:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2197:       assertEquals(47, Node.IS_DISPATCHER);
2198:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2199:       assertEquals(39, Node.EMPTY_BLOCK);
2200:       assertEquals(29, Node.JSDOC_INFO_PROP);
2201:       assertEquals(48, Node.DIRECTIVES);
2202:       assertEquals(37, Node.OPT_ARG_NAME);
2203:       assertEquals(55, Node.INFERRED_FUNCTION);
2204:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2205:       assertEquals(53, Node.INPUT_ID);
2206:       assertEquals(57, Node.REFLECTED_OBJECT);
2207:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2208:       assertEquals(52, Node.LENGTH);
2209:       assertEquals(8, Node.FLAG_NO_THROWS);
2210:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2211:       assertEquals(57, Node.LAST_PROP);
2212:       assertEquals(54, Node.SLASH_V);
2213:       assertEquals(1, Node.DECR_FLAG);
2214:       assertEquals(49, Node.DIRECT_EVAL);
2215:       assertEquals(40, Node.ORIGINALNAME_PROP);
2216:       assertEquals(12, Node.COLUMN_BITS);
2217:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2218:       assertEquals(2, Node.POST_FLAG);
2219:       assertEquals(30, Node.VAR_ARGS_NAME);
2220:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2221:       assertEquals(32, Node.INCRDECR_PROP);
2222:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2223:       assertEquals(46, Node.IS_NAMESPACE);
2224:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2225:       assertEquals(50, Node.FREE_CALL);
2226:       assertEquals(30, Node.VAR_ARGS_NAME);
2227:       assertEquals(49, Node.DIRECT_EVAL);
2228:       assertEquals(57, Node.LAST_PROP);
2229:       assertEquals(12, Node.COLUMN_BITS);
2230:       assertEquals(54, Node.SLASH_V);
2231:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2232:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2233:       assertEquals(52, Node.LENGTH);
2234:       assertEquals(32, Node.INCRDECR_PROP);
2235:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2236:       assertEquals(1, Node.DECR_FLAG);
2237:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2238:       assertEquals(50, Node.FREE_CALL);
2239:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2240:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2241:       assertEquals(2, Node.POST_FLAG);
2242:       assertEquals(47, Node.IS_DISPATCHER);
2243:       assertEquals(46, Node.IS_NAMESPACE);
2244:       assertEquals(40, Node.ORIGINALNAME_PROP);
2245:       assertEquals(43, Node.IS_CONSTANT_NAME);
2246:       assertEquals(36, Node.QUOTED_PROP);
2247:       assertEquals(55, Node.INFERRED_FUNCTION);
2248:       assertEquals(39, Node.EMPTY_BLOCK);
2249:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2250:       assertEquals(53, Node.INPUT_ID);
2251:       assertEquals(29, Node.JSDOC_INFO_PROP);
2252:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2253:       assertEquals(56, Node.CHANGE_TIME);
2254:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2255:       assertEquals(8, Node.FLAG_NO_THROWS);
2256:       assertEquals(57, Node.REFLECTED_OBJECT);
2257:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2258:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2259:       assertEquals(4095, Node.COLUMN_MASK);
2260:       assertEquals(37, Node.OPT_ARG_NAME);
2261:       assertEquals(48, Node.DIRECTIVES);
2262:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2263:       assertEquals(8, Node.FLAG_NO_THROWS);
2264:       assertEquals(39, Node.EMPTY_BLOCK);
2265:       assertEquals(48, Node.DIRECTIVES);
2266:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2267:       assertEquals(50, Node.FREE_CALL);
2268:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2269:       assertEquals(4095, Node.COLUMN_MASK);
2270:       assertEquals(40, Node.ORIGINALNAME_PROP);
2271:       assertEquals(57, Node.REFLECTED_OBJECT);
2272:       assertEquals(43, Node.IS_CONSTANT_NAME);
2273:       assertEquals(54, Node.SLASH_V);
2274:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2275:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2276:       assertEquals(12, Node.COLUMN_BITS);
2277:       assertEquals(1, Node.DECR_FLAG);
2278:       assertEquals(32, Node.INCRDECR_PROP);
2279:       assertEquals(2, Node.POST_FLAG);
2280:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2281:       assertEquals(47, Node.IS_DISPATCHER);
2282:       assertEquals(37, Node.OPT_ARG_NAME);
2283:       assertEquals(29, Node.JSDOC_INFO_PROP);
2284:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2285:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2286:       assertEquals(49, Node.DIRECT_EVAL);
2287:       assertEquals(46, Node.IS_NAMESPACE);
2288:       assertEquals(56, Node.CHANGE_TIME);
2289:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2290:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2291:       assertEquals(36, Node.QUOTED_PROP);
2292:       assertEquals(30, Node.VAR_ARGS_NAME);
2293:       assertEquals(52, Node.LENGTH);
2294:       assertEquals(53, Node.INPUT_ID);
2295:       assertEquals(55, Node.INFERRED_FUNCTION);
2296:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2297:       assertEquals(57, Node.LAST_PROP);
2298:       assertFalse(node1.equals((Object)node0));
2299:       assertFalse(node1.equals((Object)node4));
2300:       assertFalse(node1.equals((Object)node3));
2301:       assertFalse(node1.equals((Object)node5));
2302:       assertFalse(node1.equals((Object)node2));
2303:       assertFalse(node2.equals((Object)node5));
2304:       assertFalse(node2.equals((Object)node1));
2305:       assertFalse(node2.equals((Object)node0));
2306:       assertFalse(node2.equals((Object)node4));
2307:       assertFalse(node3.equals((Object)node4));
2308:       assertFalse(node3.equals((Object)node0));
2309:       assertFalse(node3.equals((Object)node5));
2310:       assertFalse(node3.equals((Object)node1));
2311:       assertTrue(boolean6 == boolean2);
2312:       assertTrue(boolean6 == boolean0);
2313:       assertTrue(boolean6 == boolean3);
2314:       assertTrue(boolean6 == boolean1);
2315:       assertTrue(boolean6 == boolean5);
2316:       assertTrue(boolean6 == boolean4);
2317:       
2318:       node2.putIntProp(29, 4095);
2319:       assertSame(node2, node3);
2320:       assertEquals(30, Node.VAR_ARGS_NAME);
2321:       assertEquals(49, Node.DIRECT_EVAL);
2322:       assertEquals(57, Node.LAST_PROP);
2323:       assertEquals(12, Node.COLUMN_BITS);
2324:       assertEquals(54, Node.SLASH_V);
2325:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2326:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2327:       assertEquals(52, Node.LENGTH);
2328:       assertEquals(32, Node.INCRDECR_PROP);
2329:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2330:       assertEquals(1, Node.DECR_FLAG);
2331:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2332:       assertEquals(50, Node.FREE_CALL);
2333:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2334:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2335:       assertEquals(2, Node.POST_FLAG);
2336:       assertEquals(47, Node.IS_DISPATCHER);
2337:       assertEquals(46, Node.IS_NAMESPACE);
2338:       assertEquals(40, Node.ORIGINALNAME_PROP);
2339:       assertEquals(43, Node.IS_CONSTANT_NAME);
2340:       assertEquals(36, Node.QUOTED_PROP);
2341:       assertEquals(55, Node.INFERRED_FUNCTION);
2342:       assertEquals(39, Node.EMPTY_BLOCK);
2343:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2344:       assertEquals(53, Node.INPUT_ID);
2345:       assertEquals(29, Node.JSDOC_INFO_PROP);
2346:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2347:       assertEquals(56, Node.CHANGE_TIME);
2348:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2349:       assertEquals(8, Node.FLAG_NO_THROWS);
2350:       assertEquals(57, Node.REFLECTED_OBJECT);
2351:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2352:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2353:       assertEquals(4095, Node.COLUMN_MASK);
2354:       assertEquals(37, Node.OPT_ARG_NAME);
2355:       assertEquals(48, Node.DIRECTIVES);
2356:       assertFalse(node2.equals((Object)node5));
2357:       assertFalse(node2.equals((Object)node1));
2358:       assertFalse(node2.equals((Object)node0));
2359:       assertFalse(node2.equals((Object)node4));
2360:       
2361:       boolean boolean7 = node3.isOr();
2362:       assertFalse(boolean7);
2363:       assertNotSame(node1, node0);
2364:       assertNotSame(node1, node4);
2365:       assertNotSame(node1, node5);
2366:       assertSame(node2, node3);
2367:       assertSame(node3, node2);
2368:       assertEquals(43, Node.IS_CONSTANT_NAME);
2369:       assertEquals(36, Node.QUOTED_PROP);
2370:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2371:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2372:       assertEquals(4095, Node.COLUMN_MASK);
2373:       assertEquals(56, Node.CHANGE_TIME);
2374:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2375:       assertEquals(47, Node.IS_DISPATCHER);
2376:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2377:       assertEquals(39, Node.EMPTY_BLOCK);
2378:       assertEquals(29, Node.JSDOC_INFO_PROP);
2379:       assertEquals(48, Node.DIRECTIVES);
2380:       assertEquals(37, Node.OPT_ARG_NAME);
2381:       assertEquals(55, Node.INFERRED_FUNCTION);
2382:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2383:       assertEquals(53, Node.INPUT_ID);
2384:       assertEquals(57, Node.REFLECTED_OBJECT);
2385:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2386:       assertEquals(52, Node.LENGTH);
2387:       assertEquals(8, Node.FLAG_NO_THROWS);
2388:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2389:       assertEquals(57, Node.LAST_PROP);
2390:       assertEquals(54, Node.SLASH_V);
2391:       assertEquals(1, Node.DECR_FLAG);
2392:       assertEquals(49, Node.DIRECT_EVAL);
2393:       assertEquals(40, Node.ORIGINALNAME_PROP);
2394:       assertEquals(12, Node.COLUMN_BITS);
2395:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2396:       assertEquals(2, Node.POST_FLAG);
2397:       assertEquals(30, Node.VAR_ARGS_NAME);
2398:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2399:       assertEquals(32, Node.INCRDECR_PROP);
2400:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2401:       assertEquals(46, Node.IS_NAMESPACE);
2402:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2403:       assertEquals(50, Node.FREE_CALL);
2404:       assertEquals(30, Node.VAR_ARGS_NAME);
2405:       assertEquals(49, Node.DIRECT_EVAL);
2406:       assertEquals(57, Node.LAST_PROP);
2407:       assertEquals(12, Node.COLUMN_BITS);
2408:       assertEquals(54, Node.SLASH_V);
2409:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2410:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2411:       assertEquals(52, Node.LENGTH);
2412:       assertEquals(32, Node.INCRDECR_PROP);
2413:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2414:       assertEquals(1, Node.DECR_FLAG);
2415:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2416:       assertEquals(50, Node.FREE_CALL);
2417:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2418:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2419:       assertEquals(2, Node.POST_FLAG);
2420:       assertEquals(47, Node.IS_DISPATCHER);
2421:       assertEquals(46, Node.IS_NAMESPACE);
2422:       assertEquals(40, Node.ORIGINALNAME_PROP);
2423:       assertEquals(43, Node.IS_CONSTANT_NAME);
2424:       assertEquals(36, Node.QUOTED_PROP);
2425:       assertEquals(55, Node.INFERRED_FUNCTION);
2426:       assertEquals(39, Node.EMPTY_BLOCK);
2427:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2428:       assertEquals(53, Node.INPUT_ID);
2429:       assertEquals(29, Node.JSDOC_INFO_PROP);
2430:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2431:       assertEquals(56, Node.CHANGE_TIME);
2432:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2433:       assertEquals(8, Node.FLAG_NO_THROWS);
2434:       assertEquals(57, Node.REFLECTED_OBJECT);
2435:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2436:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2437:       assertEquals(4095, Node.COLUMN_MASK);
2438:       assertEquals(37, Node.OPT_ARG_NAME);
2439:       assertEquals(48, Node.DIRECTIVES);
2440:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2441:       assertEquals(8, Node.FLAG_NO_THROWS);
2442:       assertEquals(39, Node.EMPTY_BLOCK);
2443:       assertEquals(48, Node.DIRECTIVES);
2444:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2445:       assertEquals(50, Node.FREE_CALL);
2446:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2447:       assertEquals(4095, Node.COLUMN_MASK);
2448:       assertEquals(40, Node.ORIGINALNAME_PROP);
2449:       assertEquals(57, Node.REFLECTED_OBJECT);
2450:       assertEquals(43, Node.IS_CONSTANT_NAME);
2451:       assertEquals(54, Node.SLASH_V);
2452:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2453:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2454:       assertEquals(12, Node.COLUMN_BITS);
2455:       assertEquals(1, Node.DECR_FLAG);
2456:       assertEquals(32, Node.INCRDECR_PROP);
2457:       assertEquals(2, Node.POST_FLAG);
2458:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2459:       assertEquals(47, Node.IS_DISPATCHER);
2460:       assertEquals(37, Node.OPT_ARG_NAME);
2461:       assertEquals(29, Node.JSDOC_INFO_PROP);
2462:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2463:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2464:       assertEquals(49, Node.DIRECT_EVAL);
2465:       assertEquals(46, Node.IS_NAMESPACE);
2466:       assertEquals(56, Node.CHANGE_TIME);
2467:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2468:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2469:       assertEquals(36, Node.QUOTED_PROP);
2470:       assertEquals(30, Node.VAR_ARGS_NAME);
2471:       assertEquals(52, Node.LENGTH);
2472:       assertEquals(53, Node.INPUT_ID);
2473:       assertEquals(55, Node.INFERRED_FUNCTION);
2474:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2475:       assertEquals(57, Node.LAST_PROP);
2476:       assertFalse(node1.equals((Object)node0));
2477:       assertFalse(node1.equals((Object)node4));
2478:       assertFalse(node1.equals((Object)node3));
2479:       assertFalse(node1.equals((Object)node5));
2480:       assertFalse(node1.equals((Object)node2));
2481:       assertFalse(node2.equals((Object)node5));
2482:       assertFalse(node2.equals((Object)node1));
2483:       assertFalse(node2.equals((Object)node0));
2484:       assertFalse(node2.equals((Object)node4));
2485:       assertFalse(node3.equals((Object)node4));
2486:       assertFalse(node3.equals((Object)node0));
2487:       assertFalse(node3.equals((Object)node5));
2488:       assertFalse(node3.equals((Object)node1));
2489:       assertTrue(boolean7 == boolean1);
2490:       assertTrue(boolean7 == boolean0);
2491:       assertTrue(boolean7 == boolean3);
2492:       assertTrue(boolean7 == boolean5);
2493:       assertTrue(boolean7 == boolean2);
2494:       assertTrue(boolean7 == boolean4);
2495:       assertTrue(boolean7 == boolean6);
2496:       
2497:       boolean boolean8 = node2.isThis();
2498:       assertFalse(boolean8);
2499:       assertSame(node2, node3);
2500:       assertEquals(30, Node.VAR_ARGS_NAME);
2501:       assertEquals(49, Node.DIRECT_EVAL);
2502:       assertEquals(57, Node.LAST_PROP);
2503:       assertEquals(12, Node.COLUMN_BITS);
2504:       assertEquals(54, Node.SLASH_V);
2505:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2506:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2507:       assertEquals(52, Node.LENGTH);
2508:       assertEquals(32, Node.INCRDECR_PROP);
2509:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2510:       assertEquals(1, Node.DECR_FLAG);
2511:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2512:       assertEquals(50, Node.FREE_CALL);
2513:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2514:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2515:       assertEquals(2, Node.POST_FLAG);
2516:       assertEquals(47, Node.IS_DISPATCHER);
2517:       assertEquals(46, Node.IS_NAMESPACE);
2518:       assertEquals(40, Node.ORIGINALNAME_PROP);
2519:       assertEquals(43, Node.IS_CONSTANT_NAME);
2520:       assertEquals(36, Node.QUOTED_PROP);
2521:       assertEquals(55, Node.INFERRED_FUNCTION);
2522:       assertEquals(39, Node.EMPTY_BLOCK);
2523:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2524:       assertEquals(53, Node.INPUT_ID);
2525:       assertEquals(29, Node.JSDOC_INFO_PROP);
2526:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2527:       assertEquals(56, Node.CHANGE_TIME);
2528:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2529:       assertEquals(8, Node.FLAG_NO_THROWS);
2530:       assertEquals(57, Node.REFLECTED_OBJECT);
2531:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2532:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2533:       assertEquals(4095, Node.COLUMN_MASK);
2534:       assertEquals(37, Node.OPT_ARG_NAME);
2535:       assertEquals(48, Node.DIRECTIVES);
2536:       assertFalse(node2.equals((Object)node5));
2537:       assertFalse(node2.equals((Object)node1));
2538:       assertFalse(node2.equals((Object)node0));
2539:       assertFalse(node2.equals((Object)node4));
2540:       assertTrue(boolean8 == boolean5);
2541:       assertTrue(boolean8 == boolean1);
2542:       assertTrue(boolean8 == boolean7);
2543:       assertTrue(boolean8 == boolean2);
2544:       assertTrue(boolean8 == boolean0);
2545:       assertTrue(boolean8 == boolean3);
2546:       assertTrue(boolean8 == boolean4);
2547:       assertTrue(boolean8 == boolean6);
2548:   }
2549: }
RegularFileObject[/tmp/EvoSuite_157_1628157533096/com/google/javascript/rhino/Node_157_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:53 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_157_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_157_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_157_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.JSTypeNative",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.JSType$TypePair",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.JSType$2",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
375:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
377:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
378:     );
379:   }
380: }

[MASTER] 09:58:53.703 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node[] nodeArray0 = new Node[0];
Node node0 = new Node(330, nodeArray0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, nodeArray0.length);
assertNotNull(node0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(330, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertEquals(0, node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());

Node node1 = new Node(49);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertTrue(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isCall());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWhile());
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());

Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertNotNull(node2);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.isIn());
assertFalse(node2.isSwitch());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isFunction());
assertFalse(node2.isVoid());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isVar());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isRegExp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());

Node node3 = node2.useSourceInfoIfMissingFrom(node1);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertNotNull(node3);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertTrue(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isCall());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWhile());
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node2.isIn());
assertFalse(node2.isSwitch());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isFunction());
assertFalse(node2.isVoid());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isVar());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isRegExp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node3.isFalse());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isThrow());
assertFalse(node3.isNot());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isObjectLit());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isAnd());
assertFalse(node3.isEmpty());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetElem());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isTypeOf());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isExprResult());
assertFalse(node3.isOr());
assertFalse(node3.isVoid());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isName());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCall());
assertTrue(node3.isString());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isWhile());
assertEquals(40, node3.getType());
assertFalse(node3.isFunction());
assertFalse(node3.isContinue());
assertFalse(node3.isArrayLit());
assertFalse(node3.isDebugger());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isFor());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCast());
assertFalse(node3.isNumber());
assertFalse(node3.isTry());
assertFalse(node3.hasOneChild());
assertFalse(node3.isWith());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isInc());
assertFalse(node3.isRegExp());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isNE());
assertFalse(node3.isIf());

Iterable<Node> iterable0 = node3.children();
assertFalse(iterable0.contains(node2));
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertTrue(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isCall());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWhile());
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node2.isIn());
assertFalse(node2.isSwitch());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isFunction());
assertFalse(node2.isVoid());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isVar());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isRegExp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node3.isFalse());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isThrow());
assertFalse(node3.isNot());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isObjectLit());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isAnd());
assertFalse(node3.isEmpty());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetElem());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isTypeOf());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isExprResult());
assertFalse(node3.isOr());
assertFalse(node3.isVoid());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isName());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCall());
assertTrue(node3.isString());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isWhile());
assertEquals(40, node3.getType());
assertFalse(node3.isFunction());
assertFalse(node3.isContinue());
assertFalse(node3.isArrayLit());
assertFalse(node3.isDebugger());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isFor());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCast());
assertFalse(node3.isNumber());
assertFalse(node3.isTry());
assertFalse(node3.hasOneChild());
assertFalse(node3.isWith());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isInc());
assertFalse(node3.isRegExp());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isNE());
assertFalse(node3.isIf());

boolean boolean0 = node1.isGetProp();
assertFalse(boolean0);
assertNotSame(node1, node0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertTrue(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isCall());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWhile());
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());

boolean boolean1 = node3.hasChildren();
assertFalse(boolean1);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertTrue(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isCall());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWhile());
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node2.isIn());
assertFalse(node2.isSwitch());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isFunction());
assertFalse(node2.isVoid());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isName());

boolean boolean2 = node2.isSwitch();
assertFalse(boolean2);
assertSame(node2, node3);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

Node node4 = node0.cloneNode();
assertNotSame(node0, node4);
assertNotSame(node0, node1);
assertNotSame(node4, node1);
assertNotSame(node4, node0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, nodeArray0.length);
assertNotNull(node4);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags3);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertNotNull(node_SideEffectFlags4);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertNotNull(node_SideEffectFlags5);

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setMutatesGlobalState();
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertNotNull(node_SideEffectFlags6);

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setReturnsTainted();
assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertNotNull(node_SideEffectFlags7);

Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags7.setMutatesArguments();
assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags8);
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags8);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertNotNull(node_SideEffectFlags8);

Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags2.setMutatesGlobalState();
assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertNotNull(node_SideEffectFlags9);

Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags0.setMutatesArguments();
assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertNotNull(node_SideEffectFlags10);

Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags10.setMutatesGlobalState();
assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
assertSame(node_SideEffectFlags10, node_SideEffectFlags11);
assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
assertSame(node_SideEffectFlags11, node_SideEffectFlags1);
assertSame(node_SideEffectFlags11, node_SideEffectFlags2);
assertSame(node_SideEffectFlags11, node_SideEffectFlags8);
assertSame(node_SideEffectFlags11, node_SideEffectFlags9);
assertSame(node_SideEffectFlags11, node_SideEffectFlags10);
assertSame(node_SideEffectFlags11, node_SideEffectFlags0);
assertSame(node_SideEffectFlags11, node_SideEffectFlags5);
assertSame(node_SideEffectFlags11, node_SideEffectFlags6);
assertSame(node_SideEffectFlags11, node_SideEffectFlags3);
assertSame(node_SideEffectFlags11, node_SideEffectFlags7);
assertSame(node_SideEffectFlags11, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertNotNull(node_SideEffectFlags11);

Node node5 = new Node(48, node1, node0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, nodeArray0.length);
assertNotNull(node5);
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node0));

boolean boolean3 = node1.hasOneChild();
assertFalse(boolean3);
assertNotSame(node1, node0);
assertNotSame(node1, node4);
assertNotSame(node1, node5);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);

boolean boolean4 = node5.isEquivalentToShallow(node0);
assertFalse(boolean4);
assertNotSame(node0, node4);
assertNotSame(node0, node5);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node4);
assertNotSame(node1, node5);
assertNotSame(node5, node4);
assertNotSame(node5, node1);
assertNotSame(node5, node0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, nodeArray0.length);
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node0));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);

boolean boolean5 = node4.isName();
assertFalse(boolean5);
assertNotSame(node0, node4);
assertNotSame(node0, node5);
assertNotSame(node0, node1);
assertNotSame(node4, node1);
assertNotSame(node4, node0);
assertNotSame(node4, node5);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, nodeArray0.length);
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean4);
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node5));

boolean boolean6 = node3.isDelProp();
assertFalse(boolean6);
assertNotSame(node1, node0);
assertNotSame(node1, node4);
assertNotSame(node1, node5);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean4);

node2.putIntProp(29, 4095);
assertSame(node2, node3);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));

boolean boolean7 = node3.isOr();
assertFalse(boolean7);
assertNotSame(node1, node0);
assertNotSame(node1, node4);
assertNotSame(node1, node5);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean6);

boolean boolean8 = node2.isThis();
assertFalse(boolean8);
assertSame(node2, node3);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertTrue(boolean8 == boolean5);
assertTrue(boolean8 == boolean1);
assertTrue(boolean8 == boolean7);
assertTrue(boolean8 == boolean2);
assertTrue(boolean8 == boolean0);
assertTrue(boolean8 == boolean3);
assertTrue(boolean8 == boolean4);
assertTrue(boolean8 == boolean6);


[MASTER] 09:58:54.063 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_158_1628157533704/com/google/javascript/rhino/Node_158_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_158_1628157533704/com/google/javascript/rhino/Node_158_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:54.063 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:54.063 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:54.063 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 659
[MASTER] 09:58:54.065 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_158_1628157533704/com/google/javascript/rhino/Node_158_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:53 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_158_tmp__ESTest extends Node_158_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node[] nodeArray0 = new Node[0];
21:       Node node0 = new Node(330, nodeArray0);
22:       assertEquals(12, Node.COLUMN_BITS);
23:       assertEquals(32, Node.INCRDECR_PROP);
24:       assertEquals(46, Node.IS_NAMESPACE);
25:       assertEquals(2, Node.POST_FLAG);
26:       assertEquals(30, Node.VAR_ARGS_NAME);
27:       assertEquals(51, Node.STATIC_SOURCE_FILE);
28:       assertEquals(15, Node.NO_SIDE_EFFECTS);
29:       assertEquals(57, Node.LAST_PROP);
30:       assertEquals(47, Node.IS_DISPATCHER);
31:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
32:       assertEquals(1, Node.DECR_FLAG);
33:       assertEquals(29, Node.JSDOC_INFO_PROP);
34:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
35:       assertEquals(50, Node.FREE_CALL);
36:       assertEquals(54, Node.SLASH_V);
37:       assertEquals(43, Node.IS_CONSTANT_NAME);
38:       assertEquals(40, Node.ORIGINALNAME_PROP);
39:       assertEquals(55, Node.INFERRED_FUNCTION);
40:       assertEquals(4095, Node.COLUMN_MASK);
41:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
42:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
43:       assertEquals(8, Node.FLAG_NO_THROWS);
44:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
45:       assertEquals(53, Node.INPUT_ID);
46:       assertEquals(39, Node.EMPTY_BLOCK);
47:       assertEquals(57, Node.REFLECTED_OBJECT);
48:       assertEquals(52, Node.LENGTH);
49:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
50:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
51:       assertEquals(36, Node.QUOTED_PROP);
52:       assertEquals(56, Node.CHANGE_TIME);
53:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
54:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
55:       assertEquals(48, Node.DIRECTIVES);
56:       assertEquals(49, Node.DIRECT_EVAL);
57:       assertEquals(37, Node.OPT_ARG_NAME);
58:       assertEquals(0, nodeArray0.length);
59:       assertNotNull(node0);
60:       assertFalse(node0.isAssignAdd());
61:       assertFalse(node0.isNumber());
62:       assertFalse(node0.isDec());
63:       assertFalse(node0.hasChildren());
64:       assertFalse(node0.isReturn());
65:       assertFalse(node0.isTypeOf());
66:       assertFalse(node0.isLabel());
67:       assertFalse(node0.isOr());
68:       assertFalse(node0.isAssign());
69:       assertFalse(node0.isGetElem());
70:       assertFalse(node0.hasMoreThanOneChild());
71:       assertFalse(node0.isCast());
72:       assertFalse(node0.isContinue());
73:       assertFalse(node0.isLabelName());
74:       assertFalse(node0.isAdd());
75:       assertEquals(0, node0.getCharno());
76:       assertFalse(node0.isVar());
77:       assertFalse(node0.isDo());
78:       assertFalse(node0.isSetterDef());
79:       assertFalse(node0.isNew());
80:       assertFalse(node0.isGetProp());
81:       assertEquals(0, node0.getSourcePosition());
82:       assertFalse(node0.isNull());
83:       assertFalse(node0.isComma());
84:       assertFalse(node0.isFalse());
85:       assertFalse(node0.isCall());
86:       assertFalse(node0.isName());
87:       assertFalse(node0.isAnd());
88:       assertFalse(node0.isBreak());
89:       assertEquals(0, node0.getLineno());
90:       assertFalse(node0.isExprResult());
91:       assertFalse(node0.isNot());
92:       assertFalse(node0.isDebugger());
93:       assertFalse(node0.isObjectLit());
94:       assertFalse(node0.isString());
95:       assertFalse(node0.isWhile());
96:       assertEquals(330, node0.getType());
97:       assertFalse(node0.isNE());
98:       assertFalse(node0.isIn());
99:       assertFalse(node0.isGetterDef());
100:       assertFalse(node0.isIf());
101:       assertFalse(node0.isDelProp());
102:       assertFalse(node0.isArrayLit());
103:       assertFalse(node0.isVoid());
104:       assertFalse(node0.isInc());
105:       assertFalse(node0.isTrue());
106:       assertFalse(node0.isFunction());
107:       assertFalse(node0.isThrow());
108:       assertFalse(node0.isEmpty());
109:       assertFalse(node0.isDefaultCase());
110:       assertFalse(node0.isThis());
111:       assertFalse(node0.isParamList());
112:       assertEquals(0, node0.getChildCount());
113:       assertFalse(node0.isStringKey());
114:       assertFalse(node0.isWith());
115:       assertFalse(node0.isCatch());
116:       assertFalse(node0.isInstanceOf());
117:       assertFalse(node0.isBlock());
118:       assertFalse(node0.isSwitch());
119:       assertFalse(node0.isHook());
120:       assertFalse(node0.isRegExp());
121:       assertFalse(node0.isFor());
122:       assertFalse(node0.hasOneChild());
123:       assertFalse(node0.isScript());
124:       assertFalse(node0.isTry());
125:       assertFalse(node0.isCase());
126:       
127:       Node node1 = new Node(49);
128:       assertEquals(12, Node.COLUMN_BITS);
129:       assertEquals(46, Node.IS_NAMESPACE);
130:       assertEquals(30, Node.VAR_ARGS_NAME);
131:       assertEquals(51, Node.STATIC_SOURCE_FILE);
132:       assertEquals(2, Node.POST_FLAG);
133:       assertEquals(54, Node.SLASH_V);
134:       assertEquals(56, Node.CHANGE_TIME);
135:       assertEquals(49, Node.DIRECT_EVAL);
136:       assertEquals(37, Node.OPT_ARG_NAME);
137:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
138:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
139:       assertEquals(50, Node.FREE_CALL);
140:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
141:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
142:       assertEquals(32, Node.INCRDECR_PROP);
143:       assertEquals(1, Node.DECR_FLAG);
144:       assertEquals(4095, Node.COLUMN_MASK);
145:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
146:       assertEquals(55, Node.INFERRED_FUNCTION);
147:       assertEquals(36, Node.QUOTED_PROP);
148:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
149:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
150:       assertEquals(43, Node.IS_CONSTANT_NAME);
151:       assertEquals(48, Node.DIRECTIVES);
152:       assertEquals(40, Node.ORIGINALNAME_PROP);
153:       assertEquals(57, Node.REFLECTED_OBJECT);
154:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
155:       assertEquals(52, Node.LENGTH);
156:       assertEquals(47, Node.IS_DISPATCHER);
157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
158:       assertEquals(8, Node.FLAG_NO_THROWS);
159:       assertEquals(39, Node.EMPTY_BLOCK);
160:       assertEquals(57, Node.LAST_PROP);
161:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
162:       assertEquals(29, Node.JSDOC_INFO_PROP);
163:       assertEquals(53, Node.INPUT_ID);
164:       assertNotNull(node1);
165:       assertFalse(node1.equals((Object)node0));
166:       assertFalse(node1.isIn());
167:       assertEquals(49, node1.getType());
168:       assertFalse(node1.isNE());
169:       assertFalse(node1.isGetterDef());
170:       assertFalse(node1.isCase());
171:       assertFalse(node1.isEmpty());
172:       assertFalse(node1.isFor());
173:       assertFalse(node1.isString());
174:       assertFalse(node1.isInc());
175:       assertFalse(node1.isFunction());
176:       assertEquals((-1), node1.getCharno());
177:       assertFalse(node1.isDebugger());
178:       assertFalse(node1.isFalse());
179:       assertFalse(node1.isArrayLit());
180:       assertFalse(node1.isSwitch());
181:       assertFalse(node1.isGetProp());
182:       assertFalse(node1.isNull());
183:       assertTrue(node1.isThrow());
184:       assertFalse(node1.isObjectLit());
185:       assertFalse(node1.isComma());
186:       assertEquals(0, node1.getChildCount());
187:       assertFalse(node1.isNot());
188:       assertFalse(node1.isDefaultCase());
189:       assertFalse(node1.isAdd());
190:       assertFalse(node1.isTrue());
191:       assertFalse(node1.isExprResult());
192:       assertFalse(node1.isName());
193:       assertFalse(node1.isAssign());
194:       assertFalse(node1.isGetElem());
195:       assertFalse(node1.isCall());
196:       assertFalse(node1.isVoid());
197:       assertFalse(node1.isDelProp());
198:       assertFalse(node1.isBreak());
199:       assertFalse(node1.isLabel());
200:       assertFalse(node1.isAssignAdd());
201:       assertFalse(node1.isOr());
202:       assertFalse(node1.isReturn());
203:       assertFalse(node1.isTypeOf());
204:       assertFalse(node1.isNumber());
205:       assertFalse(node1.hasMoreThanOneChild());
206:       assertFalse(node1.hasChildren());
207:       assertFalse(node1.isDec());
208:       assertEquals((-1), node1.getSourcePosition());
209:       assertFalse(node1.isDo());
210:       assertFalse(node1.isWhile());
211:       assertFalse(node1.isNew());
212:       assertFalse(node1.hasOneChild());
213:       assertFalse(node1.isVar());
214:       assertFalse(node1.isLabelName());
215:       assertFalse(node1.isAnd());
216:       assertFalse(node1.isContinue());
217:       assertFalse(node1.isStringKey());
218:       assertFalse(node1.isCast());
219:       assertFalse(node1.isParamList());
220:       assertFalse(node1.isInstanceOf());
221:       assertFalse(node1.isThis());
222:       assertFalse(node1.isScript());
223:       assertFalse(node1.isSetterDef());
224:       assertFalse(node1.isTry());
225:       assertFalse(node1.isBlock());
226:       assertFalse(node1.isRegExp());
227:       assertFalse(node1.isHook());
228:       assertFalse(node1.isWith());
229:       assertFalse(node1.isIf());
230:       assertFalse(node1.isCatch());
231:       assertEquals((-1), node1.getLineno());
232:       
233:       Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
234:       assertEquals(29, Node.JSDOC_INFO_PROP);
235:       assertEquals(47, Node.IS_DISPATCHER);
236:       assertEquals(2, Node.POST_FLAG);
237:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
238:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
239:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
240:       assertEquals(32, Node.INCRDECR_PROP);
241:       assertEquals(53, Node.INPUT_ID);
242:       assertEquals(12, Node.COLUMN_BITS);
243:       assertEquals(49, Node.DIRECT_EVAL);
244:       assertEquals(15, Node.NO_SIDE_EFFECTS);
245:       assertEquals(36, Node.QUOTED_PROP);
246:       assertEquals(55, Node.INFERRED_FUNCTION);
247:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
248:       assertEquals(4095, Node.COLUMN_MASK);
249:       assertEquals(52, Node.LENGTH);
250:       assertEquals(48, Node.DIRECTIVES);
251:       assertEquals(37, Node.OPT_ARG_NAME);
252:       assertEquals(57, Node.REFLECTED_OBJECT);
253:       assertEquals(56, Node.CHANGE_TIME);
254:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
255:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
256:       assertEquals(50, Node.FREE_CALL);
257:       assertEquals(8, Node.FLAG_NO_THROWS);
258:       assertEquals(39, Node.EMPTY_BLOCK);
259:       assertEquals(40, Node.ORIGINALNAME_PROP);
260:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
261:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
262:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
263:       assertEquals(57, Node.LAST_PROP);
264:       assertEquals(30, Node.VAR_ARGS_NAME);
265:       assertEquals(1, Node.DECR_FLAG);
266:       assertEquals(46, Node.IS_NAMESPACE);
267:       assertEquals(51, Node.STATIC_SOURCE_FILE);
268:       assertEquals(54, Node.SLASH_V);
269:       assertEquals(43, Node.IS_CONSTANT_NAME);
270:       assertNotNull(node2);
271:       assertFalse(node2.equals((Object)node0));
272:       assertFalse(node2.equals((Object)node1));
273:       assertFalse(node2.isArrayLit());
274:       assertFalse(node2.isEmpty());
275:       assertFalse(node2.isNE());
276:       assertFalse(node2.isTrue());
277:       assertFalse(node2.isGetterDef());
278:       assertFalse(node2.isVoid());
279:       assertFalse(node2.isDebugger());
280:       assertFalse(node2.isDelProp());
281:       assertFalse(node2.isIf());
282:       assertFalse(node2.isCatch());
283:       assertFalse(node2.isCase());
284:       assertFalse(node2.isRegExp());
285:       assertFalse(node2.isTry());
286:       assertFalse(node2.isFor());
287:       assertFalse(node2.isVar());
288:       assertFalse(node2.isCall());
289:       assertFalse(node2.isAdd());
290:       assertFalse(node2.isSwitch());
291:       assertFalse(node2.isNull());
292:       assertFalse(node2.isBreak());
293:       assertEquals((-1), node2.getCharno());
294:       assertFalse(node2.isName());
295:       assertFalse(node2.isParamList());
296:       assertFalse(node2.isStringKey());
297:       assertEquals(0, node2.getChildCount());
298:       assertFalse(node2.isOr());
299:       assertFalse(node2.isNew());
300:       assertFalse(node2.isLabel());
301:       assertFalse(node2.isDo());
302:       assertFalse(node2.isAssignAdd());
303:       assertFalse(node2.isDefaultCase());
304:       assertFalse(node2.isCast());
305:       assertFalse(node2.hasOneChild());
306:       assertFalse(node2.isAssign());
307:       assertFalse(node2.isGetElem());
308:       assertFalse(node2.isNumber());
309:       assertFalse(node2.isExprResult());
310:       assertEquals((-1), node2.getSourcePosition());
311:       assertFalse(node2.isLabelName());
312:       assertFalse(node2.isAnd());
313:       assertFalse(node2.hasMoreThanOneChild());
314:       assertFalse(node2.isObjectLit());
315:       assertEquals((-1), node2.getLineno());
316:       assertFalse(node2.isWith());
317:       assertFalse(node2.isNot());
318:       assertFalse(node2.isInstanceOf());
319:       assertFalse(node2.isScript());
320:       assertFalse(node2.isThis());
321:       assertFalse(node2.isTypeOf());
322:       assertFalse(node2.isDec());
323:       assertFalse(node2.hasChildren());
324:       assertFalse(node2.isGetProp());
325:       assertFalse(node2.isComma());
326:       assertTrue(node2.isString());
327:       assertFalse(node2.isReturn());
328:       assertFalse(node2.isBlock());
329:       assertFalse(node2.isWhile());
330:       assertFalse(node2.isHook());
331:       assertFalse(node2.isFalse());
332:       assertFalse(node2.isIn());
333:       assertFalse(node2.isContinue());
334:       assertFalse(node2.isSetterDef());
335:       assertFalse(node2.isInc());
336:       assertFalse(node2.isFunction());
337:       assertEquals(40, node2.getType());
338:       assertFalse(node2.isThrow());
339:       
340:       Node node3 = node2.useSourceInfoIfMissingFrom(node1);
341:       assertNotSame(node1, node0);
342:       assertSame(node2, node3);
343:       assertSame(node3, node2);
344:       assertEquals(12, Node.COLUMN_BITS);
345:       assertEquals(46, Node.IS_NAMESPACE);
346:       assertEquals(30, Node.VAR_ARGS_NAME);
347:       assertEquals(51, Node.STATIC_SOURCE_FILE);
348:       assertEquals(2, Node.POST_FLAG);
349:       assertEquals(54, Node.SLASH_V);
350:       assertEquals(56, Node.CHANGE_TIME);
351:       assertEquals(49, Node.DIRECT_EVAL);
352:       assertEquals(37, Node.OPT_ARG_NAME);
353:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
354:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
355:       assertEquals(50, Node.FREE_CALL);
356:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
357:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
358:       assertEquals(32, Node.INCRDECR_PROP);
359:       assertEquals(1, Node.DECR_FLAG);
360:       assertEquals(4095, Node.COLUMN_MASK);
361:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
362:       assertEquals(55, Node.INFERRED_FUNCTION);
363:       assertEquals(36, Node.QUOTED_PROP);
364:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
365:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
366:       assertEquals(43, Node.IS_CONSTANT_NAME);
367:       assertEquals(48, Node.DIRECTIVES);
368:       assertEquals(40, Node.ORIGINALNAME_PROP);
369:       assertEquals(57, Node.REFLECTED_OBJECT);
370:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
371:       assertEquals(52, Node.LENGTH);
372:       assertEquals(47, Node.IS_DISPATCHER);
373:       assertEquals(15, Node.NO_SIDE_EFFECTS);
374:       assertEquals(8, Node.FLAG_NO_THROWS);
375:       assertEquals(39, Node.EMPTY_BLOCK);
376:       assertEquals(57, Node.LAST_PROP);
377:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
378:       assertEquals(29, Node.JSDOC_INFO_PROP);
379:       assertEquals(53, Node.INPUT_ID);
380:       assertEquals(29, Node.JSDOC_INFO_PROP);
381:       assertEquals(47, Node.IS_DISPATCHER);
382:       assertEquals(2, Node.POST_FLAG);
383:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
384:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
385:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
386:       assertEquals(32, Node.INCRDECR_PROP);
387:       assertEquals(53, Node.INPUT_ID);
388:       assertEquals(12, Node.COLUMN_BITS);
389:       assertEquals(49, Node.DIRECT_EVAL);
390:       assertEquals(15, Node.NO_SIDE_EFFECTS);
391:       assertEquals(36, Node.QUOTED_PROP);
392:       assertEquals(55, Node.INFERRED_FUNCTION);
393:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
394:       assertEquals(4095, Node.COLUMN_MASK);
395:       assertEquals(52, Node.LENGTH);
396:       assertEquals(48, Node.DIRECTIVES);
397:       assertEquals(37, Node.OPT_ARG_NAME);
398:       assertEquals(57, Node.REFLECTED_OBJECT);
399:       assertEquals(56, Node.CHANGE_TIME);
400:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
401:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
402:       assertEquals(50, Node.FREE_CALL);
403:       assertEquals(8, Node.FLAG_NO_THROWS);
404:       assertEquals(39, Node.EMPTY_BLOCK);
405:       assertEquals(40, Node.ORIGINALNAME_PROP);
406:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
407:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
408:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
409:       assertEquals(57, Node.LAST_PROP);
410:       assertEquals(30, Node.VAR_ARGS_NAME);
411:       assertEquals(1, Node.DECR_FLAG);
412:       assertEquals(46, Node.IS_NAMESPACE);
413:       assertEquals(51, Node.STATIC_SOURCE_FILE);
414:       assertEquals(54, Node.SLASH_V);
415:       assertEquals(43, Node.IS_CONSTANT_NAME);
416:       assertEquals(40, Node.ORIGINALNAME_PROP);
417:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
418:       assertEquals(50, Node.FREE_CALL);
419:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
420:       assertEquals(57, Node.REFLECTED_OBJECT);
421:       assertEquals(54, Node.SLASH_V);
422:       assertEquals(48, Node.DIRECTIVES);
423:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
424:       assertEquals(1, Node.DECR_FLAG);
425:       assertEquals(4095, Node.COLUMN_MASK);
426:       assertEquals(46, Node.IS_NAMESPACE);
427:       assertEquals(43, Node.IS_CONSTANT_NAME);
428:       assertEquals(51, Node.STATIC_SOURCE_FILE);
429:       assertEquals(12, Node.COLUMN_BITS);
430:       assertEquals(32, Node.INCRDECR_PROP);
431:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
432:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
433:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
434:       assertEquals(56, Node.CHANGE_TIME);
435:       assertEquals(47, Node.IS_DISPATCHER);
436:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
437:       assertEquals(37, Node.OPT_ARG_NAME);
438:       assertEquals(2, Node.POST_FLAG);
439:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
440:       assertEquals(55, Node.INFERRED_FUNCTION);
441:       assertEquals(49, Node.DIRECT_EVAL);
442:       assertEquals(30, Node.VAR_ARGS_NAME);
443:       assertEquals(36, Node.QUOTED_PROP);
444:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
445:       assertEquals(52, Node.LENGTH);
446:       assertEquals(8, Node.FLAG_NO_THROWS);
447:       assertEquals(57, Node.LAST_PROP);
448:       assertEquals(29, Node.JSDOC_INFO_PROP);
449:       assertEquals(53, Node.INPUT_ID);
450:       assertEquals(15, Node.NO_SIDE_EFFECTS);
451:       assertEquals(39, Node.EMPTY_BLOCK);
452:       assertNotNull(node3);
453:       assertFalse(node1.equals((Object)node0));
454:       assertFalse(node1.equals((Object)node2));
455:       assertFalse(node2.equals((Object)node0));
456:       assertFalse(node2.equals((Object)node1));
457:       assertFalse(node3.equals((Object)node1));
458:       assertFalse(node3.equals((Object)node0));
459:       assertFalse(node1.isIn());
460:       assertEquals(49, node1.getType());
461:       assertFalse(node1.isNE());
462:       assertFalse(node1.isGetterDef());
463:       assertFalse(node1.isCase());
464:       assertFalse(node1.isEmpty());
465:       assertFalse(node1.isFor());
466:       assertFalse(node1.isString());
467:       assertFalse(node1.isInc());
468:       assertFalse(node1.isFunction());
469:       assertEquals((-1), node1.getCharno());
470:       assertFalse(node1.isDebugger());
471:       assertFalse(node1.isFalse());
472:       assertFalse(node1.isArrayLit());
473:       assertFalse(node1.isSwitch());
474:       assertFalse(node1.isGetProp());
475:       assertFalse(node1.isNull());
476:       assertTrue(node1.isThrow());
477:       assertFalse(node1.isObjectLit());
478:       assertFalse(node1.isComma());
479:       assertEquals(0, node1.getChildCount());
480:       assertFalse(node1.isNot());
481:       assertFalse(node1.isDefaultCase());
482:       assertFalse(node1.isAdd());
483:       assertFalse(node1.isTrue());
484:       assertFalse(node1.isExprResult());
485:       assertFalse(node1.isName());
486:       assertFalse(node1.isAssign());
487:       assertFalse(node1.isGetElem());
488:       assertFalse(node1.isCall());
489:       assertFalse(node1.isVoid());
490:       assertFalse(node1.isDelProp());
491:       assertFalse(node1.isBreak());
492:       assertFalse(node1.isLabel());
493:       assertFalse(node1.isAssignAdd());
494:       assertFalse(node1.isOr());
495:       assertFalse(node1.isReturn());
496:       assertFalse(node1.isTypeOf());
497:       assertFalse(node1.isNumber());
498:       assertFalse(node1.hasMoreThanOneChild());
499:       assertFalse(node1.hasChildren());
500:       assertFalse(node1.isDec());
501:       assertEquals((-1), node1.getSourcePosition());
502:       assertFalse(node1.isDo());
503:       assertFalse(node1.isWhile());
504:       assertFalse(node1.isNew());
505:       assertFalse(node1.hasOneChild());
506:       assertFalse(node1.isVar());
507:       assertFalse(node1.isLabelName());
508:       assertFalse(node1.isAnd());
509:       assertFalse(node1.isContinue());
510:       assertFalse(node1.isStringKey());
511:       assertFalse(node1.isCast());
512:       assertFalse(node1.isParamList());
513:       assertFalse(node1.isInstanceOf());
514:       assertFalse(node1.isThis());
515:       assertFalse(node1.isScript());
516:       assertFalse(node1.isSetterDef());
517:       assertFalse(node1.isTry());
518:       assertFalse(node1.isBlock());
519:       assertFalse(node1.isRegExp());
520:       assertFalse(node1.isHook());
521:       assertFalse(node1.isWith());
522:       assertFalse(node1.isIf());
523:       assertFalse(node1.isCatch());
524:       assertEquals((-1), node1.getLineno());
525:       assertFalse(node2.isArrayLit());
526:       assertFalse(node2.isEmpty());
527:       assertFalse(node2.isNE());
528:       assertFalse(node2.isTrue());
529:       assertFalse(node2.isGetterDef());
530:       assertFalse(node2.isVoid());
531:       assertFalse(node2.isDebugger());
532:       assertFalse(node2.isDelProp());
533:       assertFalse(node2.isIf());
534:       assertFalse(node2.isCatch());
535:       assertFalse(node2.isCase());
536:       assertFalse(node2.isRegExp());
537:       assertFalse(node2.isTry());
538:       assertFalse(node2.isFor());
539:       assertFalse(node2.isVar());
540:       assertFalse(node2.isCall());
541:       assertFalse(node2.isAdd());
542:       assertFalse(node2.isSwitch());
543:       assertFalse(node2.isNull());
544:       assertFalse(node2.isBreak());
545:       assertEquals((-1), node2.getCharno());
546:       assertFalse(node2.isName());
547:       assertFalse(node2.isParamList());
548:       assertFalse(node2.isStringKey());
549:       assertEquals(0, node2.getChildCount());
550:       assertFalse(node2.isOr());
551:       assertFalse(node2.isNew());
552:       assertFalse(node2.isLabel());
553:       assertFalse(node2.isDo());
554:       assertFalse(node2.isAssignAdd());
555:       assertFalse(node2.isDefaultCase());
556:       assertFalse(node2.isCast());
557:       assertFalse(node2.hasOneChild());
558:       assertFalse(node2.isAssign());
559:       assertFalse(node2.isGetElem());
560:       assertFalse(node2.isNumber());
561:       assertFalse(node2.isExprResult());
562:       assertEquals((-1), node2.getSourcePosition());
563:       assertFalse(node2.isLabelName());
564:       assertFalse(node2.isAnd());
565:       assertFalse(node2.hasMoreThanOneChild());
566:       assertFalse(node2.isObjectLit());
567:       assertEquals((-1), node2.getLineno());
568:       assertFalse(node2.isWith());
569:       assertFalse(node2.isNot());
570:       assertFalse(node2.isInstanceOf());
571:       assertFalse(node2.isScript());
572:       assertFalse(node2.isThis());
573:       assertFalse(node2.isTypeOf());
574:       assertFalse(node2.isDec());
575:       assertFalse(node2.hasChildren());
576:       assertFalse(node2.isGetProp());
577:       assertFalse(node2.isComma());
578:       assertTrue(node2.isString());
579:       assertFalse(node2.isReturn());
580:       assertFalse(node2.isBlock());
581:       assertFalse(node2.isWhile());
582:       assertFalse(node2.isHook());
583:       assertFalse(node2.isFalse());
584:       assertFalse(node2.isIn());
585:       assertFalse(node2.isContinue());
586:       assertFalse(node2.isSetterDef());
587:       assertFalse(node2.isInc());
588:       assertFalse(node2.isFunction());
589:       assertEquals(40, node2.getType());
590:       assertFalse(node2.isThrow());
591:       assertEquals((-1), node3.getCharno());
592:       assertFalse(node3.isThrow());
593:       assertFalse(node3.isHook());
594:       assertFalse(node3.isCase());
595:       assertFalse(node3.isInc());
596:       assertFalse(node3.isGetProp());
597:       assertFalse(node3.isAnd());
598:       assertFalse(node3.isObjectLit());
599:       assertFalse(node3.isSwitch());
600:       assertFalse(node3.isFalse());
601:       assertFalse(node3.isArrayLit());
602:       assertFalse(node3.hasOneChild());
603:       assertFalse(node3.isTry());
604:       assertFalse(node3.isFunction());
605:       assertFalse(node3.isFor());
606:       assertFalse(node3.isGetterDef());
607:       assertFalse(node3.isNumber());
608:       assertFalse(node3.isScript());
609:       assertEquals((-1), node3.getLineno());
610:       assertFalse(node3.isInstanceOf());
611:       assertFalse(node3.isIn());
612:       assertFalse(node3.hasMoreThanOneChild());
613:       assertFalse(node3.isNE());
614:       assertFalse(node3.isThis());
615:       assertFalse(node3.isRegExp());
616:       assertFalse(node3.isIf());
617:       assertFalse(node3.isWith());
618:       assertFalse(node3.isCatch());
619:       assertTrue(node3.isString());
620:       assertFalse(node3.isStringKey());
621:       assertFalse(node3.isVar());
622:       assertFalse(node3.isBlock());
623:       assertFalse(node3.isWhile());
624:       assertFalse(node3.isDo());
625:       assertFalse(node3.isNew());
626:       assertFalse(node3.isAdd());
627:       assertFalse(node3.isSetterDef());
628:       assertEquals(0, node3.getChildCount());
629:       assertFalse(node3.isAssignAdd());
630:       assertFalse(node3.isParamList());
631:       assertFalse(node3.isLabel());
632:       assertEquals((-1), node3.getSourcePosition());
633:       assertEquals(40, node3.getType());
634:       assertFalse(node3.isLabelName());
635:       assertFalse(node3.isContinue());
636:       assertFalse(node3.isCast());
637:       assertFalse(node3.isTrue());
638:       assertFalse(node3.isDebugger());
639:       assertFalse(node3.isNot());
640:       assertFalse(node3.isDefaultCase());
641:       assertFalse(node3.isEmpty());
642:       assertFalse(node3.isOr());
643:       assertFalse(node3.isComma());
644:       assertFalse(node3.isNull());
645:       assertFalse(node3.isReturn());
646:       assertFalse(node3.hasChildren());
647:       assertFalse(node3.isDelProp());
648:       assertFalse(node3.isBreak());
649:       assertFalse(node3.isDec());
650:       assertFalse(node3.isAssign());
651:       assertFalse(node3.isName());
652:       assertFalse(node3.isTypeOf());
653:       assertFalse(node3.isVoid());
654:       assertFalse(node3.isCall());
655:       assertFalse(node3.isExprResult());
656:       assertFalse(node3.isGetElem());
657:       
658:       Iterable<Node> iterable0 = node3.children();
659:       assertFalse(iterable0.contains(node2));
660:       assertNotSame(node1, node0);
661:       assertSame(node2, node3);
662:       assertSame(node3, node2);
663:       assertEquals(12, Node.COLUMN_BITS);
664:       assertEquals(46, Node.IS_NAMESPACE);
665:       assertEquals(30, Node.VAR_ARGS_NAME);
666:       assertEquals(51, Node.STATIC_SOURCE_FILE);
667:       assertEquals(2, Node.POST_FLAG);
668:       assertEquals(54, Node.SLASH_V);
669:       assertEquals(56, Node.CHANGE_TIME);
670:       assertEquals(49, Node.DIRECT_EVAL);
671:       assertEquals(37, Node.OPT_ARG_NAME);
672:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
673:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
674:       assertEquals(50, Node.FREE_CALL);
675:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
676:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
677:       assertEquals(32, Node.INCRDECR_PROP);
678:       assertEquals(1, Node.DECR_FLAG);
679:       assertEquals(4095, Node.COLUMN_MASK);
680:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
681:       assertEquals(55, Node.INFERRED_FUNCTION);
682:       assertEquals(36, Node.QUOTED_PROP);
683:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
684:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
685:       assertEquals(43, Node.IS_CONSTANT_NAME);
686:       assertEquals(48, Node.DIRECTIVES);
687:       assertEquals(40, Node.ORIGINALNAME_PROP);
688:       assertEquals(57, Node.REFLECTED_OBJECT);
689:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
690:       assertEquals(52, Node.LENGTH);
691:       assertEquals(47, Node.IS_DISPATCHER);
692:       assertEquals(15, Node.NO_SIDE_EFFECTS);
693:       assertEquals(8, Node.FLAG_NO_THROWS);
694:       assertEquals(39, Node.EMPTY_BLOCK);
695:       assertEquals(57, Node.LAST_PROP);
696:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
697:       assertEquals(29, Node.JSDOC_INFO_PROP);
698:       assertEquals(53, Node.INPUT_ID);
699:       assertEquals(29, Node.JSDOC_INFO_PROP);
700:       assertEquals(47, Node.IS_DISPATCHER);
701:       assertEquals(2, Node.POST_FLAG);
702:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
703:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
704:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
705:       assertEquals(32, Node.INCRDECR_PROP);
706:       assertEquals(53, Node.INPUT_ID);
707:       assertEquals(12, Node.COLUMN_BITS);
708:       assertEquals(49, Node.DIRECT_EVAL);
709:       assertEquals(15, Node.NO_SIDE_EFFECTS);
710:       assertEquals(36, Node.QUOTED_PROP);
711:       assertEquals(55, Node.INFERRED_FUNCTION);
712:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
713:       assertEquals(4095, Node.COLUMN_MASK);
714:       assertEquals(52, Node.LENGTH);
715:       assertEquals(48, Node.DIRECTIVES);
716:       assertEquals(37, Node.OPT_ARG_NAME);
717:       assertEquals(57, Node.REFLECTED_OBJECT);
718:       assertEquals(56, Node.CHANGE_TIME);
719:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
720:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
721:       assertEquals(50, Node.FREE_CALL);
722:       assertEquals(8, Node.FLAG_NO_THROWS);
723:       assertEquals(39, Node.EMPTY_BLOCK);
724:       assertEquals(40, Node.ORIGINALNAME_PROP);
725:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
726:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
727:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
728:       assertEquals(57, Node.LAST_PROP);
729:       assertEquals(30, Node.VAR_ARGS_NAME);
730:       assertEquals(1, Node.DECR_FLAG);
731:       assertEquals(46, Node.IS_NAMESPACE);
732:       assertEquals(51, Node.STATIC_SOURCE_FILE);
733:       assertEquals(54, Node.SLASH_V);
734:       assertEquals(43, Node.IS_CONSTANT_NAME);
735:       assertEquals(40, Node.ORIGINALNAME_PROP);
736:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
737:       assertEquals(50, Node.FREE_CALL);
738:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
739:       assertEquals(57, Node.REFLECTED_OBJECT);
740:       assertEquals(54, Node.SLASH_V);
741:       assertEquals(48, Node.DIRECTIVES);
742:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
743:       assertEquals(1, Node.DECR_FLAG);
744:       assertEquals(4095, Node.COLUMN_MASK);
745:       assertEquals(46, Node.IS_NAMESPACE);
746:       assertEquals(43, Node.IS_CONSTANT_NAME);
747:       assertEquals(51, Node.STATIC_SOURCE_FILE);
748:       assertEquals(12, Node.COLUMN_BITS);
749:       assertEquals(32, Node.INCRDECR_PROP);
750:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
751:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
752:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
753:       assertEquals(56, Node.CHANGE_TIME);
754:       assertEquals(47, Node.IS_DISPATCHER);
755:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
756:       assertEquals(37, Node.OPT_ARG_NAME);
757:       assertEquals(2, Node.POST_FLAG);
758:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
759:       assertEquals(55, Node.INFERRED_FUNCTION);
760:       assertEquals(49, Node.DIRECT_EVAL);
761:       assertEquals(30, Node.VAR_ARGS_NAME);
762:       assertEquals(36, Node.QUOTED_PROP);
763:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
764:       assertEquals(52, Node.LENGTH);
765:       assertEquals(8, Node.FLAG_NO_THROWS);
766:       assertEquals(57, Node.LAST_PROP);
767:       assertEquals(29, Node.JSDOC_INFO_PROP);
768:       assertEquals(53, Node.INPUT_ID);
769:       assertEquals(15, Node.NO_SIDE_EFFECTS);
770:       assertEquals(39, Node.EMPTY_BLOCK);
771:       assertNotNull(iterable0);
772:       assertFalse(node1.equals((Object)node0));
773:       assertFalse(node1.equals((Object)node2));
774:       assertFalse(node1.equals((Object)node3));
775:       assertFalse(node2.equals((Object)node0));
776:       assertFalse(node2.equals((Object)node1));
777:       assertFalse(node3.equals((Object)node1));
778:       assertFalse(node3.equals((Object)node0));
779:       assertFalse(node1.isIn());
780:       assertEquals(49, node1.getType());
781:       assertFalse(node1.isNE());
782:       assertFalse(node1.isGetterDef());
783:       assertFalse(node1.isCase());
784:       assertFalse(node1.isEmpty());
785:       assertFalse(node1.isFor());
786:       assertFalse(node1.isString());
787:       assertFalse(node1.isInc());
788:       assertFalse(node1.isFunction());
789:       assertEquals((-1), node1.getCharno());
790:       assertFalse(node1.isDebugger());
791:       assertFalse(node1.isFalse());
792:       assertFalse(node1.isArrayLit());
793:       assertFalse(node1.isSwitch());
794:       assertFalse(node1.isGetProp());
795:       assertFalse(node1.isNull());
796:       assertTrue(node1.isThrow());
797:       assertFalse(node1.isObjectLit());
798:       assertFalse(node1.isComma());
799:       assertEquals(0, node1.getChildCount());
800:       assertFalse(node1.isNot());
801:       assertFalse(node1.isDefaultCase());
802:       assertFalse(node1.isAdd());
803:       assertFalse(node1.isTrue());
804:       assertFalse(node1.isExprResult());
805:       assertFalse(node1.isName());
806:       assertFalse(node1.isAssign());
807:       assertFalse(node1.isGetElem());
808:       assertFalse(node1.isCall());
809:       assertFalse(node1.isVoid());
810:       assertFalse(node1.isDelProp());
811:       assertFalse(node1.isBreak());
812:       assertFalse(node1.isLabel());
813:       assertFalse(node1.isAssignAdd());
814:       assertFalse(node1.isOr());
815:       assertFalse(node1.isReturn());
816:       assertFalse(node1.isTypeOf());
817:       assertFalse(node1.isNumber());
818:       assertFalse(node1.hasMoreThanOneChild());
819:       assertFalse(node1.hasChildren());
820:       assertFalse(node1.isDec());
821:       assertEquals((-1), node1.getSourcePosition());
822:       assertFalse(node1.isDo());
823:       assertFalse(node1.isWhile());
824:       assertFalse(node1.isNew());
825:       assertFalse(node1.hasOneChild());
826:       assertFalse(node1.isVar());
827:       assertFalse(node1.isLabelName());
828:       assertFalse(node1.isAnd());
829:       assertFalse(node1.isContinue());
830:       assertFalse(node1.isStringKey());
831:       assertFalse(node1.isCast());
832:       assertFalse(node1.isParamList());
833:       assertFalse(node1.isInstanceOf());
834:       assertFalse(node1.isThis());
835:       assertFalse(node1.isScript());
836:       assertFalse(node1.isSetterDef());
837:       assertFalse(node1.isTry());
838:       assertFalse(node1.isBlock());
839:       assertFalse(node1.isRegExp());
840:       assertFalse(node1.isHook());
841:       assertFalse(node1.isWith());
842:       assertFalse(node1.isIf());
843:       assertFalse(node1.isCatch());
844:       assertEquals((-1), node1.getLineno());
845:       assertFalse(node2.isArrayLit());
846:       assertFalse(node2.isEmpty());
847:       assertFalse(node2.isNE());
848:       assertFalse(node2.isTrue());
849:       assertFalse(node2.isGetterDef());
850:       assertFalse(node2.isVoid());
851:       assertFalse(node2.isDebugger());
852:       assertFalse(node2.isDelProp());
853:       assertFalse(node2.isIf());
854:       assertFalse(node2.isCatch());
855:       assertFalse(node2.isCase());
856:       assertFalse(node2.isRegExp());
857:       assertFalse(node2.isTry());
858:       assertFalse(node2.isFor());
859:       assertFalse(node2.isVar());
860:       assertFalse(node2.isCall());
861:       assertFalse(node2.isAdd());
862:       assertFalse(node2.isSwitch());
863:       assertFalse(node2.isNull());
864:       assertFalse(node2.isBreak());
865:       assertEquals((-1), node2.getCharno());
866:       assertFalse(node2.isName());
867:       assertFalse(node2.isParamList());
868:       assertFalse(node2.isStringKey());
869:       assertEquals(0, node2.getChildCount());
870:       assertFalse(node2.isOr());
871:       assertFalse(node2.isNew());
872:       assertFalse(node2.isLabel());
873:       assertFalse(node2.isDo());
874:       assertFalse(node2.isAssignAdd());
875:       assertFalse(node2.isDefaultCase());
876:       assertFalse(node2.isCast());
877:       assertFalse(node2.hasOneChild());
878:       assertFalse(node2.isAssign());
879:       assertFalse(node2.isGetElem());
880:       assertFalse(node2.isNumber());
881:       assertFalse(node2.isExprResult());
882:       assertEquals((-1), node2.getSourcePosition());
883:       assertFalse(node2.isLabelName());
884:       assertFalse(node2.isAnd());
885:       assertFalse(node2.hasMoreThanOneChild());
886:       assertFalse(node2.isObjectLit());
887:       assertEquals((-1), node2.getLineno());
888:       assertFalse(node2.isWith());
889:       assertFalse(node2.isNot());
890:       assertFalse(node2.isInstanceOf());
891:       assertFalse(node2.isScript());
892:       assertFalse(node2.isThis());
893:       assertFalse(node2.isTypeOf());
894:       assertFalse(node2.isDec());
895:       assertFalse(node2.hasChildren());
896:       assertFalse(node2.isGetProp());
897:       assertFalse(node2.isComma());
898:       assertTrue(node2.isString());
899:       assertFalse(node2.isReturn());
900:       assertFalse(node2.isBlock());
901:       assertFalse(node2.isWhile());
902:       assertFalse(node2.isHook());
903:       assertFalse(node2.isFalse());
904:       assertFalse(node2.isIn());
905:       assertFalse(node2.isContinue());
906:       assertFalse(node2.isSetterDef());
907:       assertFalse(node2.isInc());
908:       assertFalse(node2.isFunction());
909:       assertEquals(40, node2.getType());
910:       assertFalse(node2.isThrow());
911:       assertEquals((-1), node3.getCharno());
912:       assertFalse(node3.isThrow());
913:       assertFalse(node3.isHook());
914:       assertFalse(node3.isCase());
915:       assertFalse(node3.isInc());
916:       assertFalse(node3.isGetProp());
917:       assertFalse(node3.isAnd());
918:       assertFalse(node3.isObjectLit());
919:       assertFalse(node3.isSwitch());
920:       assertFalse(node3.isFalse());
921:       assertFalse(node3.isArrayLit());
922:       assertFalse(node3.hasOneChild());
923:       assertFalse(node3.isTry());
924:       assertFalse(node3.isFunction());
925:       assertFalse(node3.isFor());
926:       assertFalse(node3.isGetterDef());
927:       assertFalse(node3.isNumber());
928:       assertFalse(node3.isScript());
929:       assertEquals((-1), node3.getLineno());
930:       assertFalse(node3.isInstanceOf());
931:       assertFalse(node3.isIn());
932:       assertFalse(node3.hasMoreThanOneChild());
933:       assertFalse(node3.isNE());
934:       assertFalse(node3.isThis());
935:       assertFalse(node3.isRegExp());
936:       assertFalse(node3.isIf());
937:       assertFalse(node3.isWith());
938:       assertFalse(node3.isCatch());
939:       assertTrue(node3.isString());
940:       assertFalse(node3.isStringKey());
941:       assertFalse(node3.isVar());
942:       assertFalse(node3.isBlock());
943:       assertFalse(node3.isWhile());
944:       assertFalse(node3.isDo());
945:       assertFalse(node3.isNew());
946:       assertFalse(node3.isAdd());
947:       assertFalse(node3.isSetterDef());
948:       assertEquals(0, node3.getChildCount());
949:       assertFalse(node3.isAssignAdd());
950:       assertFalse(node3.isParamList());
951:       assertFalse(node3.isLabel());
952:       assertEquals((-1), node3.getSourcePosition());
953:       assertEquals(40, node3.getType());
954:       assertFalse(node3.isLabelName());
955:       assertFalse(node3.isContinue());
956:       assertFalse(node3.isCast());
957:       assertFalse(node3.isTrue());
958:       assertFalse(node3.isDebugger());
959:       assertFalse(node3.isNot());
960:       assertFalse(node3.isDefaultCase());
961:       assertFalse(node3.isEmpty());
962:       assertFalse(node3.isOr());
963:       assertFalse(node3.isComma());
964:       assertFalse(node3.isNull());
965:       assertFalse(node3.isReturn());
966:       assertFalse(node3.hasChildren());
967:       assertFalse(node3.isDelProp());
968:       assertFalse(node3.isBreak());
969:       assertFalse(node3.isDec());
970:       assertFalse(node3.isAssign());
971:       assertFalse(node3.isName());
972:       assertFalse(node3.isTypeOf());
973:       assertFalse(node3.isVoid());
974:       assertFalse(node3.isCall());
975:       assertFalse(node3.isExprResult());
976:       assertFalse(node3.isGetElem());
977:       
978:       boolean boolean0 = node1.isGetProp();
979:       assertFalse(boolean0);
980:       assertNotSame(node1, node0);
981:       assertEquals(12, Node.COLUMN_BITS);
982:       assertEquals(46, Node.IS_NAMESPACE);
983:       assertEquals(30, Node.VAR_ARGS_NAME);
984:       assertEquals(51, Node.STATIC_SOURCE_FILE);
985:       assertEquals(2, Node.POST_FLAG);
986:       assertEquals(54, Node.SLASH_V);
987:       assertEquals(56, Node.CHANGE_TIME);
988:       assertEquals(49, Node.DIRECT_EVAL);
989:       assertEquals(37, Node.OPT_ARG_NAME);
990:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
991:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
992:       assertEquals(50, Node.FREE_CALL);
993:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
994:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
995:       assertEquals(32, Node.INCRDECR_PROP);
996:       assertEquals(1, Node.DECR_FLAG);
997:       assertEquals(4095, Node.COLUMN_MASK);
998:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
999:       assertEquals(55, Node.INFERRED_FUNCTION);
1000:       assertEquals(36, Node.QUOTED_PROP);
1001:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1002:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1003:       assertEquals(43, Node.IS_CONSTANT_NAME);
1004:       assertEquals(48, Node.DIRECTIVES);
1005:       assertEquals(40, Node.ORIGINALNAME_PROP);
1006:       assertEquals(57, Node.REFLECTED_OBJECT);
1007:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1008:       assertEquals(52, Node.LENGTH);
1009:       assertEquals(47, Node.IS_DISPATCHER);
1010:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1011:       assertEquals(8, Node.FLAG_NO_THROWS);
1012:       assertEquals(39, Node.EMPTY_BLOCK);
1013:       assertEquals(57, Node.LAST_PROP);
1014:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1015:       assertEquals(29, Node.JSDOC_INFO_PROP);
1016:       assertEquals(53, Node.INPUT_ID);
1017:       assertFalse(node1.equals((Object)node0));
1018:       assertFalse(node1.equals((Object)node2));
1019:       assertFalse(node1.equals((Object)node3));
1020:       assertFalse(node1.isIn());
1021:       assertEquals(49, node1.getType());
1022:       assertFalse(node1.isNE());
1023:       assertFalse(node1.isGetterDef());
1024:       assertFalse(node1.isCase());
1025:       assertFalse(node1.isEmpty());
1026:       assertFalse(node1.isFor());
1027:       assertFalse(node1.isString());
1028:       assertFalse(node1.isInc());
1029:       assertFalse(node1.isFunction());
1030:       assertEquals((-1), node1.getCharno());
1031:       assertFalse(node1.isDebugger());
1032:       assertFalse(node1.isFalse());
1033:       assertFalse(node1.isArrayLit());
1034:       assertFalse(node1.isSwitch());
1035:       assertFalse(node1.isGetProp());
1036:       assertFalse(node1.isNull());
1037:       assertTrue(node1.isThrow());
1038:       assertFalse(node1.isObjectLit());
1039:       assertFalse(node1.isComma());
1040:       assertEquals(0, node1.getChildCount());
1041:       assertFalse(node1.isNot());
1042:       assertFalse(node1.isDefaultCase());
1043:       assertFalse(node1.isAdd());
1044:       assertFalse(node1.isTrue());
1045:       assertFalse(node1.isExprResult());
1046:       assertFalse(node1.isName());
1047:       assertFalse(node1.isAssign());
1048:       assertFalse(node1.isGetElem());
1049:       assertFalse(node1.isCall());
1050:       assertFalse(node1.isVoid());
1051:       assertFalse(node1.isDelProp());
1052:       assertFalse(node1.isBreak());
1053:       assertFalse(node1.isLabel());
1054:       assertFalse(node1.isAssignAdd());
1055:       assertFalse(node1.isOr());
1056:       assertFalse(node1.isReturn());
1057:       assertFalse(node1.isTypeOf());
1058:       assertFalse(node1.isNumber());
1059:       assertFalse(node1.hasMoreThanOneChild());
1060:       assertFalse(node1.hasChildren());
1061:       assertFalse(node1.isDec());
1062:       assertEquals((-1), node1.getSourcePosition());
1063:       assertFalse(node1.isDo());
1064:       assertFalse(node1.isWhile());
1065:       assertFalse(node1.isNew());
1066:       assertFalse(node1.hasOneChild());
1067:       assertFalse(node1.isVar());
1068:       assertFalse(node1.isLabelName());
1069:       assertFalse(node1.isAnd());
1070:       assertFalse(node1.isContinue());
1071:       assertFalse(node1.isStringKey());
1072:       assertFalse(node1.isCast());
1073:       assertFalse(node1.isParamList());
1074:       assertFalse(node1.isInstanceOf());
1075:       assertFalse(node1.isThis());
1076:       assertFalse(node1.isScript());
1077:       assertFalse(node1.isSetterDef());
1078:       assertFalse(node1.isTry());
1079:       assertFalse(node1.isBlock());
1080:       assertFalse(node1.isRegExp());
1081:       assertFalse(node1.isHook());
1082:       assertFalse(node1.isWith());
1083:       assertFalse(node1.isIf());
1084:       assertFalse(node1.isCatch());
1085:       assertEquals((-1), node1.getLineno());
1086:       
1087:       boolean boolean1 = node3.hasChildren();
1088:       assertFalse(boolean1);
1089:       assertNotSame(node1, node0);
1090:       assertSame(node2, node3);
1091:       assertSame(node3, node2);
1092:       assertEquals(12, Node.COLUMN_BITS);
1093:       assertEquals(46, Node.IS_NAMESPACE);
1094:       assertEquals(30, Node.VAR_ARGS_NAME);
1095:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1096:       assertEquals(2, Node.POST_FLAG);
1097:       assertEquals(54, Node.SLASH_V);
1098:       assertEquals(56, Node.CHANGE_TIME);
1099:       assertEquals(49, Node.DIRECT_EVAL);
1100:       assertEquals(37, Node.OPT_ARG_NAME);
1101:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1102:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1103:       assertEquals(50, Node.FREE_CALL);
1104:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1105:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1106:       assertEquals(32, Node.INCRDECR_PROP);
1107:       assertEquals(1, Node.DECR_FLAG);
1108:       assertEquals(4095, Node.COLUMN_MASK);
1109:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1110:       assertEquals(55, Node.INFERRED_FUNCTION);
1111:       assertEquals(36, Node.QUOTED_PROP);
1112:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1113:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1114:       assertEquals(43, Node.IS_CONSTANT_NAME);
1115:       assertEquals(48, Node.DIRECTIVES);
1116:       assertEquals(40, Node.ORIGINALNAME_PROP);
1117:       assertEquals(57, Node.REFLECTED_OBJECT);
1118:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1119:       assertEquals(52, Node.LENGTH);
1120:       assertEquals(47, Node.IS_DISPATCHER);
1121:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1122:       assertEquals(8, Node.FLAG_NO_THROWS);
1123:       assertEquals(39, Node.EMPTY_BLOCK);
1124:       assertEquals(57, Node.LAST_PROP);
1125:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1126:       assertEquals(29, Node.JSDOC_INFO_PROP);
1127:       assertEquals(53, Node.INPUT_ID);
1128:       assertEquals(29, Node.JSDOC_INFO_PROP);
1129:       assertEquals(47, Node.IS_DISPATCHER);
1130:       assertEquals(2, Node.POST_FLAG);
1131:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1132:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1133:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1134:       assertEquals(32, Node.INCRDECR_PROP);
1135:       assertEquals(53, Node.INPUT_ID);
1136:       assertEquals(12, Node.COLUMN_BITS);
1137:       assertEquals(49, Node.DIRECT_EVAL);
1138:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1139:       assertEquals(36, Node.QUOTED_PROP);
1140:       assertEquals(55, Node.INFERRED_FUNCTION);
1141:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1142:       assertEquals(4095, Node.COLUMN_MASK);
1143:       assertEquals(52, Node.LENGTH);
1144:       assertEquals(48, Node.DIRECTIVES);
1145:       assertEquals(37, Node.OPT_ARG_NAME);
1146:       assertEquals(57, Node.REFLECTED_OBJECT);
1147:       assertEquals(56, Node.CHANGE_TIME);
1148:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1149:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1150:       assertEquals(50, Node.FREE_CALL);
1151:       assertEquals(8, Node.FLAG_NO_THROWS);
1152:       assertEquals(39, Node.EMPTY_BLOCK);
1153:       assertEquals(40, Node.ORIGINALNAME_PROP);
1154:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1155:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1156:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1157:       assertEquals(57, Node.LAST_PROP);
1158:       assertEquals(30, Node.VAR_ARGS_NAME);
1159:       assertEquals(1, Node.DECR_FLAG);
1160:       assertEquals(46, Node.IS_NAMESPACE);
1161:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1162:       assertEquals(54, Node.SLASH_V);
1163:       assertEquals(43, Node.IS_CONSTANT_NAME);
1164:       assertEquals(40, Node.ORIGINALNAME_PROP);
1165:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1166:       assertEquals(50, Node.FREE_CALL);
1167:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1168:       assertEquals(57, Node.REFLECTED_OBJECT);
1169:       assertEquals(54, Node.SLASH_V);
1170:       assertEquals(48, Node.DIRECTIVES);
1171:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1172:       assertEquals(1, Node.DECR_FLAG);
1173:       assertEquals(4095, Node.COLUMN_MASK);
1174:       assertEquals(46, Node.IS_NAMESPACE);
1175:       assertEquals(43, Node.IS_CONSTANT_NAME);
1176:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1177:       assertEquals(12, Node.COLUMN_BITS);
1178:       assertEquals(32, Node.INCRDECR_PROP);
1179:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1180:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1181:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1182:       assertEquals(56, Node.CHANGE_TIME);
1183:       assertEquals(47, Node.IS_DISPATCHER);
1184:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1185:       assertEquals(37, Node.OPT_ARG_NAME);
1186:       assertEquals(2, Node.POST_FLAG);
1187:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1188:       assertEquals(55, Node.INFERRED_FUNCTION);
1189:       assertEquals(49, Node.DIRECT_EVAL);
1190:       assertEquals(30, Node.VAR_ARGS_NAME);
1191:       assertEquals(36, Node.QUOTED_PROP);
1192:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1193:       assertEquals(52, Node.LENGTH);
1194:       assertEquals(8, Node.FLAG_NO_THROWS);
1195:       assertEquals(57, Node.LAST_PROP);
1196:       assertEquals(29, Node.JSDOC_INFO_PROP);
1197:       assertEquals(53, Node.INPUT_ID);
1198:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1199:       assertEquals(39, Node.EMPTY_BLOCK);
1200:       assertFalse(node1.equals((Object)node0));
1201:       assertFalse(node1.equals((Object)node2));
1202:       assertFalse(node1.equals((Object)node3));
1203:       assertFalse(node2.equals((Object)node0));
1204:       assertFalse(node2.equals((Object)node1));
1205:       assertFalse(node3.equals((Object)node1));
1206:       assertFalse(node3.equals((Object)node0));
1207:       assertTrue(boolean1 == boolean0);
1208:       assertFalse(node1.isIn());
1209:       assertEquals(49, node1.getType());
1210:       assertFalse(node1.isNE());
1211:       assertFalse(node1.isGetterDef());
1212:       assertFalse(node1.isCase());
1213:       assertFalse(node1.isEmpty());
1214:       assertFalse(node1.isFor());
1215:       assertFalse(node1.isString());
1216:       assertFalse(node1.isInc());
1217:       assertFalse(node1.isFunction());
1218:       assertEquals((-1), node1.getCharno());
1219:       assertFalse(node1.isDebugger());
1220:       assertFalse(node1.isFalse());
1221:       assertFalse(node1.isArrayLit());
1222:       assertFalse(node1.isSwitch());
1223:       assertFalse(node1.isGetProp());
1224:       assertFalse(node1.isNull());
1225:       assertTrue(node1.isThrow());
1226:       assertFalse(node1.isObjectLit());
1227:       assertFalse(node1.isComma());
1228:       assertEquals(0, node1.getChildCount());
1229:       assertFalse(node1.isNot());
1230:       assertFalse(node1.isDefaultCase());
1231:       assertFalse(node1.isAdd());
1232:       assertFalse(node1.isTrue());
1233:       assertFalse(node1.isExprResult());
1234:       assertFalse(node1.isName());
1235:       assertFalse(node1.isAssign());
1236:       assertFalse(node1.isGetElem());
1237:       assertFalse(node1.isCall());
1238:       assertFalse(node1.isVoid());
1239:       assertFalse(node1.isDelProp());
1240:       assertFalse(node1.isBreak());
1241:       assertFalse(node1.isLabel());
1242:       assertFalse(node1.isAssignAdd());
1243:       assertFalse(node1.isOr());
1244:       assertFalse(node1.isReturn());
1245:       assertFalse(node1.isTypeOf());
1246:       assertFalse(node1.isNumber());
1247:       assertFalse(node1.hasMoreThanOneChild());
1248:       assertFalse(node1.hasChildren());
1249:       assertFalse(node1.isDec());
1250:       assertEquals((-1), node1.getSourcePosition());
1251:       assertFalse(node1.isDo());
1252:       assertFalse(node1.isWhile());
1253:       assertFalse(node1.isNew());
1254:       assertFalse(node1.hasOneChild());
1255:       assertFalse(node1.isVar());
1256:       assertFalse(node1.isLabelName());
1257:       assertFalse(node1.isAnd());
1258:       assertFalse(node1.isContinue());
1259:       assertFalse(node1.isStringKey());
1260:       assertFalse(node1.isCast());
1261:       assertFalse(node1.isParamList());
1262:       assertFalse(node1.isInstanceOf());
1263:       assertFalse(node1.isThis());
1264:       assertFalse(node1.isScript());
1265:       assertFalse(node1.isSetterDef());
1266:       assertFalse(node1.isTry());
1267:       assertFalse(node1.isBlock());
1268:       assertFalse(node1.isRegExp());
1269:       assertFalse(node1.isHook());
1270:       assertFalse(node1.isWith());
1271:       assertFalse(node1.isIf());
1272:       assertFalse(node1.isCatch());
1273:       assertEquals((-1), node1.getLineno());
1274:       assertFalse(node2.isArrayLit());
1275:       assertFalse(node2.isEmpty());
1276:       assertFalse(node2.isNE());
1277:       assertFalse(node2.isTrue());
1278:       assertFalse(node2.isGetterDef());
1279:       assertFalse(node2.isVoid());
1280:       assertFalse(node2.isDebugger());
1281:       assertFalse(node2.isDelProp());
1282:       assertFalse(node2.isIf());
1283:       assertFalse(node2.isCatch());
1284:       assertFalse(node2.isCase());
1285:       assertFalse(node2.isRegExp());
1286:       assertFalse(node2.isTry());
1287:       assertFalse(node2.isFor());
1288:       assertFalse(node2.isVar());
1289:       assertFalse(node2.isCall());
1290:       assertFalse(node2.isAdd());
1291:       assertFalse(node2.isSwitch());
1292:       assertFalse(node2.isNull());
1293:       assertFalse(node2.isBreak());
1294:       assertEquals((-1), node2.getCharno());
1295:       assertFalse(node2.isName());
1296:       assertFalse(node2.isParamList());
1297:       assertFalse(node2.isStringKey());
1298:       assertEquals(0, node2.getChildCount());
1299:       assertFalse(node2.isOr());
1300:       assertFalse(node2.isNew());
1301:       assertFalse(node2.isLabel());
1302:       assertFalse(node2.isDo());
1303:       assertFalse(node2.isAssignAdd());
1304:       assertFalse(node2.isDefaultCase());
1305:       assertFalse(node2.isCast());
1306:       assertFalse(node2.hasOneChild());
1307:       assertFalse(node2.isAssign());
1308:       assertFalse(node2.isGetElem());
1309:       assertFalse(node2.isNumber());
1310:       assertFalse(node2.isExprResult());
1311:       assertEquals((-1), node2.getSourcePosition());
1312:       assertFalse(node2.isLabelName());
1313:       assertFalse(node2.isAnd());
1314:       assertFalse(node2.hasMoreThanOneChild());
1315:       assertFalse(node2.isObjectLit());
1316:       assertEquals((-1), node2.getLineno());
1317:       assertFalse(node2.isWith());
1318:       assertFalse(node2.isNot());
1319:       assertFalse(node2.isInstanceOf());
1320:       assertFalse(node2.isScript());
1321:       assertFalse(node2.isThis());
1322:       assertFalse(node2.isTypeOf());
1323:       assertFalse(node2.isDec());
1324:       assertFalse(node2.hasChildren());
1325:       assertFalse(node2.isGetProp());
1326:       assertFalse(node2.isComma());
1327:       assertTrue(node2.isString());
1328:       assertFalse(node2.isReturn());
1329:       assertFalse(node2.isBlock());
1330:       assertFalse(node2.isWhile());
1331:       assertFalse(node2.isHook());
1332:       assertFalse(node2.isFalse());
1333:       assertFalse(node2.isIn());
1334:       assertFalse(node2.isContinue());
1335:       assertFalse(node2.isSetterDef());
1336:       assertFalse(node2.isInc());
1337:       assertFalse(node2.isFunction());
1338:       assertEquals(40, node2.getType());
1339:       assertFalse(node2.isThrow());
1340:       assertEquals((-1), node3.getCharno());
1341:       assertFalse(node3.isThrow());
1342:       assertFalse(node3.isHook());
1343:       assertFalse(node3.isCase());
1344:       assertFalse(node3.isInc());
1345:       assertFalse(node3.isGetProp());
1346:       assertFalse(node3.isAnd());
1347:       assertFalse(node3.isObjectLit());
1348:       assertFalse(node3.isSwitch());
1349:       assertFalse(node3.isFalse());
1350:       assertFalse(node3.isArrayLit());
1351:       assertFalse(node3.hasOneChild());
1352:       assertFalse(node3.isTry());
1353:       assertFalse(node3.isFunction());
1354:       assertFalse(node3.isFor());
1355:       assertFalse(node3.isGetterDef());
1356:       assertFalse(node3.isNumber());
1357:       assertFalse(node3.isScript());
1358:       assertEquals((-1), node3.getLineno());
1359:       assertFalse(node3.isInstanceOf());
1360:       assertFalse(node3.isIn());
1361:       assertFalse(node3.hasMoreThanOneChild());
1362:       assertFalse(node3.isNE());
1363:       assertFalse(node3.isThis());
1364:       assertFalse(node3.isRegExp());
1365:       assertFalse(node3.isIf());
1366:       assertFalse(node3.isWith());
1367:       assertFalse(node3.isCatch());
1368:       assertTrue(node3.isString());
1369:       assertFalse(node3.isStringKey());
1370:       assertFalse(node3.isVar());
1371:       assertFalse(node3.isBlock());
1372:       assertFalse(node3.isWhile());
1373:       assertFalse(node3.isDo());
1374:       assertFalse(node3.isNew());
1375:       assertFalse(node3.isAdd());
1376:       assertFalse(node3.isSetterDef());
1377:       assertEquals(0, node3.getChildCount());
1378:       assertFalse(node3.isAssignAdd());
1379:       assertFalse(node3.isParamList());
1380:       assertFalse(node3.isLabel());
1381:       assertEquals((-1), node3.getSourcePosition());
1382:       assertEquals(40, node3.getType());
1383:       assertFalse(node3.isLabelName());
1384:       assertFalse(node3.isContinue());
1385:       assertFalse(node3.isCast());
1386:       assertFalse(node3.isTrue());
1387:       assertFalse(node3.isDebugger());
1388:       assertFalse(node3.isNot());
1389:       assertFalse(node3.isDefaultCase());
1390:       assertFalse(node3.isEmpty());
1391:       assertFalse(node3.isOr());
1392:       assertFalse(node3.isComma());
1393:       assertFalse(node3.isNull());
1394:       assertFalse(node3.isReturn());
1395:       assertFalse(node3.hasChildren());
1396:       assertFalse(node3.isDelProp());
1397:       assertFalse(node3.isBreak());
1398:       assertFalse(node3.isDec());
1399:       assertFalse(node3.isAssign());
1400:       assertFalse(node3.isName());
1401:       assertFalse(node3.isTypeOf());
1402:       assertFalse(node3.isVoid());
1403:       assertFalse(node3.isCall());
1404:       assertFalse(node3.isExprResult());
1405:       assertFalse(node3.isGetElem());
1406:       
1407:       boolean boolean2 = node2.isSwitch();
1408:       assertFalse(boolean2);
1409:       assertSame(node2, node3);
1410:       assertEquals(29, Node.JSDOC_INFO_PROP);
1411:       assertEquals(47, Node.IS_DISPATCHER);
1412:       assertEquals(2, Node.POST_FLAG);
1413:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1414:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1415:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1416:       assertEquals(32, Node.INCRDECR_PROP);
1417:       assertEquals(53, Node.INPUT_ID);
1418:       assertEquals(12, Node.COLUMN_BITS);
1419:       assertEquals(49, Node.DIRECT_EVAL);
1420:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1421:       assertEquals(36, Node.QUOTED_PROP);
1422:       assertEquals(55, Node.INFERRED_FUNCTION);
1423:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1424:       assertEquals(4095, Node.COLUMN_MASK);
1425:       assertEquals(52, Node.LENGTH);
1426:       assertEquals(48, Node.DIRECTIVES);
1427:       assertEquals(37, Node.OPT_ARG_NAME);
1428:       assertEquals(57, Node.REFLECTED_OBJECT);
1429:       assertEquals(56, Node.CHANGE_TIME);
1430:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1431:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1432:       assertEquals(50, Node.FREE_CALL);
1433:       assertEquals(8, Node.FLAG_NO_THROWS);
1434:       assertEquals(39, Node.EMPTY_BLOCK);
1435:       assertEquals(40, Node.ORIGINALNAME_PROP);
1436:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1437:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1438:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1439:       assertEquals(57, Node.LAST_PROP);
1440:       assertEquals(30, Node.VAR_ARGS_NAME);
1441:       assertEquals(1, Node.DECR_FLAG);
1442:       assertEquals(46, Node.IS_NAMESPACE);
1443:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1444:       assertEquals(54, Node.SLASH_V);
1445:       assertEquals(43, Node.IS_CONSTANT_NAME);
1446:       assertFalse(node2.equals((Object)node0));
1447:       assertFalse(node2.equals((Object)node1));
1448:       assertTrue(boolean2 == boolean1);
1449:       assertTrue(boolean2 == boolean0);
1450:       assertFalse(node2.isArrayLit());
1451:       assertFalse(node2.isEmpty());
1452:       assertFalse(node2.isNE());
1453:       assertFalse(node2.isTrue());
1454:       assertFalse(node2.isGetterDef());
1455:       assertFalse(node2.isVoid());
1456:       assertFalse(node2.isDebugger());
1457:       assertFalse(node2.isDelProp());
1458:       assertFalse(node2.isIf());
1459:       assertFalse(node2.isCatch());
1460:       assertFalse(node2.isCase());
1461:       assertFalse(node2.isRegExp());
1462:       assertFalse(node2.isTry());
1463:       assertFalse(node2.isFor());
1464:       assertFalse(node2.isVar());
1465:       assertFalse(node2.isCall());
1466:       assertFalse(node2.isAdd());
1467:       assertFalse(node2.isSwitch());
1468:       assertFalse(node2.isNull());
1469:       assertFalse(node2.isBreak());
1470:       assertEquals((-1), node2.getCharno());
1471:       assertFalse(node2.isName());
1472:       assertFalse(node2.isParamList());
1473:       assertFalse(node2.isStringKey());
1474:       assertEquals(0, node2.getChildCount());
1475:       assertFalse(node2.isOr());
1476:       assertFalse(node2.isNew());
1477:       assertFalse(node2.isLabel());
1478:       assertFalse(node2.isDo());
1479:       assertFalse(node2.isAssignAdd());
1480:       assertFalse(node2.isDefaultCase());
1481:       assertFalse(node2.isCast());
1482:       assertFalse(node2.hasOneChild());
1483:       assertFalse(node2.isAssign());
1484:       assertFalse(node2.isGetElem());
1485:       assertFalse(node2.isNumber());
1486:       assertFalse(node2.isExprResult());
1487:       assertEquals((-1), node2.getSourcePosition());
1488:       assertFalse(node2.isLabelName());
1489:       assertFalse(node2.isAnd());
1490:       assertFalse(node2.hasMoreThanOneChild());
1491:       assertFalse(node2.isObjectLit());
1492:       assertEquals((-1), node2.getLineno());
1493:       assertFalse(node2.isWith());
1494:       assertFalse(node2.isNot());
1495:       assertFalse(node2.isInstanceOf());
1496:       assertFalse(node2.isScript());
1497:       assertFalse(node2.isThis());
1498:       assertFalse(node2.isTypeOf());
1499:       assertFalse(node2.isDec());
1500:       assertFalse(node2.hasChildren());
1501:       assertFalse(node2.isGetProp());
1502:       assertFalse(node2.isComma());
1503:       assertTrue(node2.isString());
1504:       assertFalse(node2.isReturn());
1505:       assertFalse(node2.isBlock());
1506:       assertFalse(node2.isWhile());
1507:       assertFalse(node2.isHook());
1508:       assertFalse(node2.isFalse());
1509:       assertFalse(node2.isIn());
1510:       assertFalse(node2.isContinue());
1511:       assertFalse(node2.isSetterDef());
1512:       assertFalse(node2.isInc());
1513:       assertFalse(node2.isFunction());
1514:       assertEquals(40, node2.getType());
1515:       assertFalse(node2.isThrow());
1516:       
1517:       Node node4 = node0.cloneNode();
1518:       assertNotSame(node0, node4);
1519:       assertNotSame(node0, node1);
1520:       assertNotSame(node4, node1);
1521:       assertNotSame(node4, node0);
1522:       assertEquals(12, Node.COLUMN_BITS);
1523:       assertEquals(32, Node.INCRDECR_PROP);
1524:       assertEquals(46, Node.IS_NAMESPACE);
1525:       assertEquals(2, Node.POST_FLAG);
1526:       assertEquals(30, Node.VAR_ARGS_NAME);
1527:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1528:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1529:       assertEquals(57, Node.LAST_PROP);
1530:       assertEquals(47, Node.IS_DISPATCHER);
1531:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1532:       assertEquals(1, Node.DECR_FLAG);
1533:       assertEquals(29, Node.JSDOC_INFO_PROP);
1534:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1535:       assertEquals(50, Node.FREE_CALL);
1536:       assertEquals(54, Node.SLASH_V);
1537:       assertEquals(43, Node.IS_CONSTANT_NAME);
1538:       assertEquals(40, Node.ORIGINALNAME_PROP);
1539:       assertEquals(55, Node.INFERRED_FUNCTION);
1540:       assertEquals(4095, Node.COLUMN_MASK);
1541:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1542:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1543:       assertEquals(8, Node.FLAG_NO_THROWS);
1544:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1545:       assertEquals(53, Node.INPUT_ID);
1546:       assertEquals(39, Node.EMPTY_BLOCK);
1547:       assertEquals(57, Node.REFLECTED_OBJECT);
1548:       assertEquals(52, Node.LENGTH);
1549:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1550:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1551:       assertEquals(36, Node.QUOTED_PROP);
1552:       assertEquals(56, Node.CHANGE_TIME);
1553:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1554:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1555:       assertEquals(48, Node.DIRECTIVES);
1556:       assertEquals(49, Node.DIRECT_EVAL);
1557:       assertEquals(37, Node.OPT_ARG_NAME);
1558:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1559:       assertEquals(36, Node.QUOTED_PROP);
1560:       assertEquals(43, Node.IS_CONSTANT_NAME);
1561:       assertEquals(55, Node.INFERRED_FUNCTION);
1562:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1563:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1564:       assertEquals(29, Node.JSDOC_INFO_PROP);
1565:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1566:       assertEquals(53, Node.INPUT_ID);
1567:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1568:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1569:       assertEquals(47, Node.IS_DISPATCHER);
1570:       assertEquals(46, Node.IS_NAMESPACE);
1571:       assertEquals(30, Node.VAR_ARGS_NAME);
1572:       assertEquals(2, Node.POST_FLAG);
1573:       assertEquals(40, Node.ORIGINALNAME_PROP);
1574:       assertEquals(52, Node.LENGTH);
1575:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1576:       assertEquals(57, Node.REFLECTED_OBJECT);
1577:       assertEquals(54, Node.SLASH_V);
1578:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1579:       assertEquals(57, Node.LAST_PROP);
1580:       assertEquals(1, Node.DECR_FLAG);
1581:       assertEquals(50, Node.FREE_CALL);
1582:       assertEquals(8, Node.FLAG_NO_THROWS);
1583:       assertEquals(39, Node.EMPTY_BLOCK);
1584:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1585:       assertEquals(48, Node.DIRECTIVES);
1586:       assertEquals(32, Node.INCRDECR_PROP);
1587:       assertEquals(56, Node.CHANGE_TIME);
1588:       assertEquals(12, Node.COLUMN_BITS);
1589:       assertEquals(49, Node.DIRECT_EVAL);
1590:       assertEquals(37, Node.OPT_ARG_NAME);
1591:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1592:       assertEquals(4095, Node.COLUMN_MASK);
1593:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1594:       assertEquals(0, nodeArray0.length);
1595:       assertNotNull(node4);
1596:       assertFalse(node0.equals((Object)node2));
1597:       assertFalse(node0.equals((Object)node3));
1598:       assertFalse(node0.equals((Object)node1));
1599:       assertFalse(node4.equals((Object)node3));
1600:       assertFalse(node4.equals((Object)node2));
1601:       assertFalse(node4.equals((Object)node1));
1602:       assertFalse(node4.equals((Object)node0));
1603:       assertFalse(node0.isAssignAdd());
1604:       assertFalse(node0.isNumber());
1605:       assertFalse(node0.isDec());
1606:       assertFalse(node0.hasChildren());
1607:       assertFalse(node0.isReturn());
1608:       assertFalse(node0.isTypeOf());
1609:       assertFalse(node0.isLabel());
1610:       assertFalse(node0.isOr());
1611:       assertFalse(node0.isAssign());
1612:       assertFalse(node0.isGetElem());
1613:       assertFalse(node0.hasMoreThanOneChild());
1614:       assertFalse(node0.isCast());
1615:       assertFalse(node0.isContinue());
1616:       assertFalse(node0.isLabelName());
1617:       assertFalse(node0.isAdd());
1618:       assertEquals(0, node0.getCharno());
1619:       assertFalse(node0.isVar());
1620:       assertFalse(node0.isDo());
1621:       assertFalse(node0.isSetterDef());
1622:       assertFalse(node0.isNew());
1623:       assertFalse(node0.isGetProp());
1624:       assertEquals(0, node0.getSourcePosition());
1625:       assertFalse(node0.isNull());
1626:       assertFalse(node0.isComma());
1627:       assertFalse(node0.isFalse());
1628:       assertFalse(node0.isCall());
1629:       assertFalse(node0.isName());
1630:       assertFalse(node0.isAnd());
1631:       assertFalse(node0.isBreak());
1632:       assertEquals(0, node0.getLineno());
1633:       assertFalse(node0.isExprResult());
1634:       assertFalse(node0.isNot());
1635:       assertFalse(node0.isDebugger());
1636:       assertFalse(node0.isObjectLit());
1637:       assertFalse(node0.isString());
1638:       assertFalse(node0.isWhile());
1639:       assertEquals(330, node0.getType());
1640:       assertFalse(node0.isNE());
1641:       assertFalse(node0.isIn());
1642:       assertFalse(node0.isGetterDef());
1643:       assertFalse(node0.isIf());
1644:       assertFalse(node0.isDelProp());
1645:       assertFalse(node0.isArrayLit());
1646:       assertFalse(node0.isVoid());
1647:       assertFalse(node0.isInc());
1648:       assertFalse(node0.isTrue());
1649:       assertFalse(node0.isFunction());
1650:       assertFalse(node0.isThrow());
1651:       assertFalse(node0.isEmpty());
1652:       assertFalse(node0.isDefaultCase());
1653:       assertFalse(node0.isThis());
1654:       assertFalse(node0.isParamList());
1655:       assertEquals(0, node0.getChildCount());
1656:       assertFalse(node0.isStringKey());
1657:       assertFalse(node0.isWith());
1658:       assertFalse(node0.isCatch());
1659:       assertFalse(node0.isInstanceOf());
1660:       assertFalse(node0.isBlock());
1661:       assertFalse(node0.isSwitch());
1662:       assertFalse(node0.isHook());
1663:       assertFalse(node0.isRegExp());
1664:       assertFalse(node0.isFor());
1665:       assertFalse(node0.hasOneChild());
1666:       assertFalse(node0.isScript());
1667:       assertFalse(node0.isTry());
1668:       assertFalse(node0.isCase());
1669:       assertFalse(node4.isDebugger());
1670:       assertFalse(node4.isDefaultCase());
1671:       assertFalse(node4.isTry());
1672:       assertFalse(node4.isVoid());
1673:       assertFalse(node4.isRegExp());
1674:       assertFalse(node4.isFunction());
1675:       assertFalse(node4.isTrue());
1676:       assertFalse(node4.isCatch());
1677:       assertFalse(node4.isArrayLit());
1678:       assertEquals(0, node4.getChildCount());
1679:       assertEquals(0, node4.getLineno());
1680:       assertFalse(node4.isNE());
1681:       assertFalse(node4.isSetterDef());
1682:       assertFalse(node4.isIf());
1683:       assertFalse(node4.isDelProp());
1684:       assertEquals(0, node4.getSourcePosition());
1685:       assertFalse(node4.isNull());
1686:       assertFalse(node4.isIn());
1687:       assertFalse(node4.isNew());
1688:       assertFalse(node4.isEmpty());
1689:       assertFalse(node4.isAdd());
1690:       assertFalse(node4.isSwitch());
1691:       assertFalse(node4.isHook());
1692:       assertFalse(node4.isVar());
1693:       assertFalse(node4.isBlock());
1694:       assertFalse(node4.hasMoreThanOneChild());
1695:       assertFalse(node4.isThis());
1696:       assertFalse(node4.isParamList());
1697:       assertFalse(node4.isNumber());
1698:       assertFalse(node4.isGetterDef());
1699:       assertFalse(node4.isStringKey());
1700:       assertFalse(node4.isFor());
1701:       assertFalse(node4.hasOneChild());
1702:       assertFalse(node4.isCase());
1703:       assertFalse(node4.isScript());
1704:       assertEquals(0, node4.getCharno());
1705:       assertFalse(node4.isNot());
1706:       assertFalse(node4.isCast());
1707:       assertFalse(node4.isAnd());
1708:       assertFalse(node4.isLabelName());
1709:       assertFalse(node4.isWith());
1710:       assertFalse(node4.isGetElem());
1711:       assertFalse(node4.isInstanceOf());
1712:       assertFalse(node4.isExprResult());
1713:       assertFalse(node4.isAssignAdd());
1714:       assertFalse(node4.isOr());
1715:       assertFalse(node4.isLabel());
1716:       assertFalse(node4.isThrow());
1717:       assertFalse(node4.isDo());
1718:       assertFalse(node4.isInc());
1719:       assertFalse(node4.isWhile());
1720:       assertFalse(node4.isContinue());
1721:       assertFalse(node4.isFalse());
1722:       assertFalse(node4.isName());
1723:       assertFalse(node4.isBreak());
1724:       assertFalse(node4.isCall());
1725:       assertFalse(node4.isComma());
1726:       assertFalse(node4.isDec());
1727:       assertFalse(node4.isTypeOf());
1728:       assertFalse(node4.isReturn());
1729:       assertFalse(node4.isAssign());
1730:       assertFalse(node4.hasChildren());
1731:       assertEquals(330, node4.getType());
1732:       assertFalse(node4.isObjectLit());
1733:       assertFalse(node4.isString());
1734:       assertFalse(node4.isGetProp());
1735:       
1736:       Node node5 = Node.newString(153, "com.google.javascript.rhino.Node$IntPropListItem", 51, 44);
1737:       assertNotSame(node5, node2);
1738:       assertNotSame(node5, node3);
1739:       assertEquals(39, Node.EMPTY_BLOCK);
1740:       assertEquals(55, Node.INFERRED_FUNCTION);
1741:       assertEquals(4095, Node.COLUMN_MASK);
1742:       assertEquals(8, Node.FLAG_NO_THROWS);
1743:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1744:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1745:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1746:       assertEquals(54, Node.SLASH_V);
1747:       assertEquals(50, Node.FREE_CALL);
1748:       assertEquals(40, Node.ORIGINALNAME_PROP);
1749:       assertEquals(43, Node.IS_CONSTANT_NAME);
1750:       assertEquals(46, Node.IS_NAMESPACE);
1751:       assertEquals(12, Node.COLUMN_BITS);
1752:       assertEquals(2, Node.POST_FLAG);
1753:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1754:       assertEquals(29, Node.JSDOC_INFO_PROP);
1755:       assertEquals(30, Node.VAR_ARGS_NAME);
1756:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1757:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1758:       assertEquals(47, Node.IS_DISPATCHER);
1759:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1760:       assertEquals(57, Node.LAST_PROP);
1761:       assertEquals(1, Node.DECR_FLAG);
1762:       assertEquals(32, Node.INCRDECR_PROP);
1763:       assertEquals(52, Node.LENGTH);
1764:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1765:       assertEquals(53, Node.INPUT_ID);
1766:       assertEquals(57, Node.REFLECTED_OBJECT);
1767:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1768:       assertEquals(36, Node.QUOTED_PROP);
1769:       assertEquals(49, Node.DIRECT_EVAL);
1770:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1771:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1772:       assertEquals(37, Node.OPT_ARG_NAME);
1773:       assertEquals(56, Node.CHANGE_TIME);
1774:       assertEquals(48, Node.DIRECTIVES);
1775:       assertNotNull(node5);
1776:       assertFalse(node5.equals((Object)node2));
1777:       assertFalse(node5.equals((Object)node0));
1778:       assertFalse(node5.equals((Object)node3));
1779:       assertFalse(node5.equals((Object)node4));
1780:       assertFalse(node5.equals((Object)node1));
1781:       assertFalse(node5.isParamList());
1782:       assertFalse(node5.isNull());
1783:       assertFalse(node5.isSetterDef());
1784:       assertEquals(0, node5.getChildCount());
1785:       assertFalse(node5.isCatch());
1786:       assertFalse(node5.isCall());
1787:       assertFalse(node5.isStringKey());
1788:       assertFalse(node5.isName());
1789:       assertFalse(node5.isTrue());
1790:       assertFalse(node5.isAdd());
1791:       assertFalse(node5.isContinue());
1792:       assertFalse(node5.isFunction());
1793:       assertFalse(node5.isVar());
1794:       assertFalse(node5.isDo());
1795:       assertFalse(node5.isAssignAdd());
1796:       assertFalse(node5.isNew());
1797:       assertFalse(node5.isDefaultCase());
1798:       assertFalse(node5.isNE());
1799:       assertFalse(node5.isLabel());
1800:       assertFalse(node5.isGetterDef());
1801:       assertFalse(node5.isIn());
1802:       assertEquals(44, node5.getCharno());
1803:       assertFalse(node5.isNumber());
1804:       assertFalse(node5.isArrayLit());
1805:       assertFalse(node5.isIf());
1806:       assertFalse(node5.isRegExp());
1807:       assertFalse(node5.isScript());
1808:       assertFalse(node5.isSwitch());
1809:       assertFalse(node5.isBlock());
1810:       assertEquals(208940, node5.getSourcePosition());
1811:       assertFalse(node5.hasMoreThanOneChild());
1812:       assertFalse(node5.isWith());
1813:       assertFalse(node5.hasOneChild());
1814:       assertFalse(node5.isHook());
1815:       assertFalse(node5.isFor());
1816:       assertFalse(node5.isTry());
1817:       assertFalse(node5.isCase());
1818:       assertFalse(node5.isComma());
1819:       assertFalse(node5.isBreak());
1820:       assertFalse(node5.isGetProp());
1821:       assertFalse(node5.isThis());
1822:       assertFalse(node5.isFalse());
1823:       assertFalse(node5.isInstanceOf());
1824:       assertEquals(153, node5.getType());
1825:       assertFalse(node5.isAnd());
1826:       assertEquals(51, node5.getLineno());
1827:       assertFalse(node5.isInc());
1828:       assertFalse(node5.isThrow());
1829:       assertFalse(node5.isDec());
1830:       assertTrue(node5.isLabelName());
1831:       assertFalse(node5.hasChildren());
1832:       assertFalse(node5.isEmpty());
1833:       assertFalse(node5.isOr());
1834:       assertFalse(node5.isAssign());
1835:       assertFalse(node5.isTypeOf());
1836:       assertFalse(node5.isCast());
1837:       assertFalse(node5.isGetElem());
1838:       assertFalse(node5.isVoid());
1839:       assertFalse(node5.isDelProp());
1840:       assertFalse(node5.isDebugger());
1841:       assertFalse(node5.isExprResult());
1842:       assertFalse(node5.isNot());
1843:       assertFalse(node5.isString());
1844:       assertFalse(node5.isObjectLit());
1845:       assertFalse(node5.isReturn());
1846:       assertFalse(node5.isWhile());
1847:       
1848:       int int0 = node3.getLineno();
1849:       assertEquals((-1), int0);
1850:       assertNotSame(node1, node4);
1851:       assertNotSame(node1, node0);
1852:       assertSame(node2, node3);
1853:       assertNotSame(node2, node5);
1854:       assertSame(node3, node2);
1855:       assertNotSame(node3, node5);
1856:       assertEquals(12, Node.COLUMN_BITS);
1857:       assertEquals(46, Node.IS_NAMESPACE);
1858:       assertEquals(30, Node.VAR_ARGS_NAME);
1859:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1860:       assertEquals(2, Node.POST_FLAG);
1861:       assertEquals(54, Node.SLASH_V);
1862:       assertEquals(56, Node.CHANGE_TIME);
1863:       assertEquals(49, Node.DIRECT_EVAL);
1864:       assertEquals(37, Node.OPT_ARG_NAME);
1865:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1866:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1867:       assertEquals(50, Node.FREE_CALL);
1868:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1869:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1870:       assertEquals(32, Node.INCRDECR_PROP);
1871:       assertEquals(1, Node.DECR_FLAG);
1872:       assertEquals(4095, Node.COLUMN_MASK);
1873:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1874:       assertEquals(55, Node.INFERRED_FUNCTION);
1875:       assertEquals(36, Node.QUOTED_PROP);
1876:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1877:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1878:       assertEquals(43, Node.IS_CONSTANT_NAME);
1879:       assertEquals(48, Node.DIRECTIVES);
1880:       assertEquals(40, Node.ORIGINALNAME_PROP);
1881:       assertEquals(57, Node.REFLECTED_OBJECT);
1882:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1883:       assertEquals(52, Node.LENGTH);
1884:       assertEquals(47, Node.IS_DISPATCHER);
1885:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1886:       assertEquals(8, Node.FLAG_NO_THROWS);
1887:       assertEquals(39, Node.EMPTY_BLOCK);
1888:       assertEquals(57, Node.LAST_PROP);
1889:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1890:       assertEquals(29, Node.JSDOC_INFO_PROP);
1891:       assertEquals(53, Node.INPUT_ID);
1892:       assertEquals(29, Node.JSDOC_INFO_PROP);
1893:       assertEquals(47, Node.IS_DISPATCHER);
1894:       assertEquals(2, Node.POST_FLAG);
1895:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1896:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1897:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1898:       assertEquals(32, Node.INCRDECR_PROP);
1899:       assertEquals(53, Node.INPUT_ID);
1900:       assertEquals(12, Node.COLUMN_BITS);
1901:       assertEquals(49, Node.DIRECT_EVAL);
1902:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1903:       assertEquals(36, Node.QUOTED_PROP);
1904:       assertEquals(55, Node.INFERRED_FUNCTION);
1905:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1906:       assertEquals(4095, Node.COLUMN_MASK);
1907:       assertEquals(52, Node.LENGTH);
1908:       assertEquals(48, Node.DIRECTIVES);
1909:       assertEquals(37, Node.OPT_ARG_NAME);
1910:       assertEquals(57, Node.REFLECTED_OBJECT);
1911:       assertEquals(56, Node.CHANGE_TIME);
1912:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1913:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1914:       assertEquals(50, Node.FREE_CALL);
1915:       assertEquals(8, Node.FLAG_NO_THROWS);
1916:       assertEquals(39, Node.EMPTY_BLOCK);
1917:       assertEquals(40, Node.ORIGINALNAME_PROP);
1918:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1919:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1920:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1921:       assertEquals(57, Node.LAST_PROP);
1922:       assertEquals(30, Node.VAR_ARGS_NAME);
1923:       assertEquals(1, Node.DECR_FLAG);
1924:       assertEquals(46, Node.IS_NAMESPACE);
1925:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1926:       assertEquals(54, Node.SLASH_V);
1927:       assertEquals(43, Node.IS_CONSTANT_NAME);
1928:       assertEquals(40, Node.ORIGINALNAME_PROP);
1929:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1930:       assertEquals(50, Node.FREE_CALL);
1931:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1932:       assertEquals(57, Node.REFLECTED_OBJECT);
1933:       assertEquals(54, Node.SLASH_V);
1934:       assertEquals(48, Node.DIRECTIVES);
1935:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1936:       assertEquals(1, Node.DECR_FLAG);
1937:       assertEquals(4095, Node.COLUMN_MASK);
1938:       assertEquals(46, Node.IS_NAMESPACE);
1939:       assertEquals(43, Node.IS_CONSTANT_NAME);
1940:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1941:       assertEquals(12, Node.COLUMN_BITS);
1942:       assertEquals(32, Node.INCRDECR_PROP);
1943:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1944:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1945:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1946:       assertEquals(56, Node.CHANGE_TIME);
1947:       assertEquals(47, Node.IS_DISPATCHER);
1948:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1949:       assertEquals(37, Node.OPT_ARG_NAME);
1950:       assertEquals(2, Node.POST_FLAG);
1951:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1952:       assertEquals(55, Node.INFERRED_FUNCTION);
1953:       assertEquals(49, Node.DIRECT_EVAL);
1954:       assertEquals(30, Node.VAR_ARGS_NAME);
1955:       assertEquals(36, Node.QUOTED_PROP);
1956:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1957:       assertEquals(52, Node.LENGTH);
1958:       assertEquals(8, Node.FLAG_NO_THROWS);
1959:       assertEquals(57, Node.LAST_PROP);
1960:       assertEquals(29, Node.JSDOC_INFO_PROP);
1961:       assertEquals(53, Node.INPUT_ID);
1962:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1963:       assertEquals(39, Node.EMPTY_BLOCK);
1964:       assertFalse(node1.equals((Object)node4));
1965:       assertFalse(node1.equals((Object)node0));
1966:       assertFalse(node1.equals((Object)node2));
1967:       assertFalse(node1.equals((Object)node3));
1968:       assertFalse(node1.equals((Object)node5));
1969:       assertFalse(node2.equals((Object)node4));
1970:       assertFalse(node2.equals((Object)node0));
1971:       assertFalse(node2.equals((Object)node5));
1972:       assertFalse(node2.equals((Object)node1));
1973:       assertFalse(node3.equals((Object)node4));
1974:       assertFalse(node3.equals((Object)node1));
1975:       assertFalse(node3.equals((Object)node5));
1976:       assertFalse(node3.equals((Object)node0));
1977:       assertFalse(node1.isIn());
1978:       assertEquals(49, node1.getType());
1979:       assertFalse(node1.isNE());
1980:       assertFalse(node1.isGetterDef());
1981:       assertFalse(node1.isCase());
1982:       assertFalse(node1.isEmpty());
1983:       assertFalse(node1.isFor());
1984:       assertFalse(node1.isString());
1985:       assertFalse(node1.isInc());
1986:       assertFalse(node1.isFunction());
1987:       assertEquals((-1), node1.getCharno());
1988:       assertFalse(node1.isDebugger());
1989:       assertFalse(node1.isFalse());
1990:       assertFalse(node1.isArrayLit());
1991:       assertFalse(node1.isSwitch());
1992:       assertFalse(node1.isGetProp());
1993:       assertFalse(node1.isNull());
1994:       assertTrue(node1.isThrow());
1995:       assertFalse(node1.isObjectLit());
1996:       assertFalse(node1.isComma());
1997:       assertEquals(0, node1.getChildCount());
1998:       assertFalse(node1.isNot());
1999:       assertFalse(node1.isDefaultCase());
2000:       assertFalse(node1.isAdd());
2001:       assertFalse(node1.isTrue());
2002:       assertFalse(node1.isExprResult());
2003:       assertFalse(node1.isName());
2004:       assertFalse(node1.isAssign());
2005:       assertFalse(node1.isGetElem());
2006:       assertFalse(node1.isCall());
2007:       assertFalse(node1.isVoid());
2008:       assertFalse(node1.isDelProp());
2009:       assertFalse(node1.isBreak());
2010:       assertFalse(node1.isLabel());
2011:       assertFalse(node1.isAssignAdd());
2012:       assertFalse(node1.isOr());
2013:       assertFalse(node1.isReturn());
2014:       assertFalse(node1.isTypeOf());
2015:       assertFalse(node1.isNumber());
2016:       assertFalse(node1.hasMoreThanOneChild());
2017:       assertFalse(node1.hasChildren());
2018:       assertFalse(node1.isDec());
2019:       assertEquals((-1), node1.getSourcePosition());
2020:       assertFalse(node1.isDo());
2021:       assertFalse(node1.isWhile());
2022:       assertFalse(node1.isNew());
2023:       assertFalse(node1.hasOneChild());
2024:       assertFalse(node1.isVar());
2025:       assertFalse(node1.isLabelName());
2026:       assertFalse(node1.isAnd());
2027:       assertFalse(node1.isContinue());
2028:       assertFalse(node1.isStringKey());
2029:       assertFalse(node1.isCast());
2030:       assertFalse(node1.isParamList());
2031:       assertFalse(node1.isInstanceOf());
2032:       assertFalse(node1.isThis());
2033:       assertFalse(node1.isScript());
2034:       assertFalse(node1.isSetterDef());
2035:       assertFalse(node1.isTry());
2036:       assertFalse(node1.isBlock());
2037:       assertFalse(node1.isRegExp());
2038:       assertFalse(node1.isHook());
2039:       assertFalse(node1.isWith());
2040:       assertFalse(node1.isIf());
2041:       assertFalse(node1.isCatch());
2042:       assertEquals((-1), node1.getLineno());
2043:       assertFalse(node2.isArrayLit());
2044:       assertFalse(node2.isEmpty());
2045:       assertFalse(node2.isNE());
2046:       assertFalse(node2.isTrue());
2047:       assertFalse(node2.isGetterDef());
2048:       assertFalse(node2.isVoid());
2049:       assertFalse(node2.isDebugger());
2050:       assertFalse(node2.isDelProp());
2051:       assertFalse(node2.isIf());
2052:       assertFalse(node2.isCatch());
2053:       assertFalse(node2.isCase());
2054:       assertFalse(node2.isRegExp());
2055:       assertFalse(node2.isTry());
2056:       assertFalse(node2.isFor());
2057:       assertFalse(node2.isVar());
2058:       assertFalse(node2.isCall());
2059:       assertFalse(node2.isAdd());
2060:       assertFalse(node2.isSwitch());
2061:       assertFalse(node2.isNull());
2062:       assertFalse(node2.isBreak());
2063:       assertEquals((-1), node2.getCharno());
2064:       assertFalse(node2.isName());
2065:       assertFalse(node2.isParamList());
2066:       assertFalse(node2.isStringKey());
2067:       assertEquals(0, node2.getChildCount());
2068:       assertFalse(node2.isOr());
2069:       assertFalse(node2.isNew());
2070:       assertFalse(node2.isLabel());
2071:       assertFalse(node2.isDo());
2072:       assertFalse(node2.isAssignAdd());
2073:       assertFalse(node2.isDefaultCase());
2074:       assertFalse(node2.isCast());
2075:       assertFalse(node2.hasOneChild());
2076:       assertFalse(node2.isAssign());
2077:       assertFalse(node2.isGetElem());
2078:       assertFalse(node2.isNumber());
2079:       assertFalse(node2.isExprResult());
2080:       assertEquals((-1), node2.getSourcePosition());
2081:       assertFalse(node2.isLabelName());
2082:       assertFalse(node2.isAnd());
2083:       assertFalse(node2.hasMoreThanOneChild());
2084:       assertFalse(node2.isObjectLit());
2085:       assertEquals((-1), node2.getLineno());
2086:       assertFalse(node2.isWith());
2087:       
2088:       Node node6 = new Node(118, node0, node4, node2);
2089:       assertEquals(12, Node.COLUMN_BITS);
2090:       assertEquals(32, Node.INCRDECR_PROP);
2091:       assertEquals(46, Node.IS_NAMESPACE);
2092:       assertEquals(2, Node.POST_FLAG);
2093:       assertEquals(30, Node.VAR_ARGS_NAME);
2094:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2095:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2096:       assertEquals(57, Node.LAST_PROP);
2097:       assertEquals(47, Node.IS_DISPATCHER);
2098:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2099:       assertEquals(1, Node.DECR_FLAG);
2100:       assertEquals(29, Node.JSDOC_INFO_PROP);
2101:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2102:       assertEquals(50, Node.FREE_CALL);
2103:       assertEquals(54, Node.SLASH_V);
2104:       assertEquals(43, Node.IS_CONSTANT_NAME);
2105:       assertEquals(40, Node.ORIGINALNAME_PROP);
2106:       assertEquals(55, Node.INFERRED_FUNCTION);
2107:       assertEquals(4095, Node.COLUMN_MASK);
2108:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2110:       assertEquals(8, Node.FLAG_NO_THROWS);
2111:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2112:       assertEquals(53, Node.INPUT_ID);
2113:       assertEquals(39, Node.EMPTY_BLOCK);
2114:       assertEquals(57, Node.REFLECTED_OBJECT);
2115:       assertEquals(52, Node.LENGTH);
2116:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2117:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2118:       assertEquals(36, Node.QUOTED_PROP);
2119:       assertEquals(56, Node.CHANGE_TIME);
2120:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2121:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2122:       assertEquals(48, Node.DIRECTIVES);
2123:       assertEquals(49, Node.DIRECT_EVAL);
2124:       assertEquals(37, Node.OPT_ARG_NAME);
2125:       assertEquals(29, Node.JSDOC_INFO_PROP);
2126:       assertEquals(47, Node.IS_DISPATCHER);
2127:       assertEquals(2, Node.POST_FLAG);
2128:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2129:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2130:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2131:       assertEquals(32, Node.INCRDECR_PROP);
2132:       assertEquals(53, Node.INPUT_ID);
2133:       assertEquals(12, Node.COLUMN_BITS);
2134:       assertEquals(49, Node.DIRECT_EVAL);
2135:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2136:       assertEquals(36, Node.QUOTED_PROP);
2137:       assertEquals(55, Node.INFERRED_FUNCTION);
2138:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2139:       assertEquals(4095, Node.COLUMN_MASK);
2140:       assertEquals(52, Node.LENGTH);
2141:       assertEquals(48, Node.DIRECTIVES);
2142:       assertEquals(37, Node.OPT_ARG_NAME);
2143:       assertEquals(57, Node.REFLECTED_OBJECT);
2144:       assertEquals(56, Node.CHANGE_TIME);
2145:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2146:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2147:       assertEquals(50, Node.FREE_CALL);
2148:       assertEquals(8, Node.FLAG_NO_THROWS);
2149:       assertEquals(39, Node.EMPTY_BLOCK);
2150:       assertEquals(40, Node.ORIGINALNAME_PROP);
2151:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2152:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2153:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2154:       assertEquals(57, Node.LAST_PROP);
2155:       assertEquals(30, Node.VAR_ARGS_NAME);
2156:       assertEquals(1, Node.DECR_FLAG);
2157:       assertEquals(46, Node.IS_NAMESPACE);
2158:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2159:       assertEquals(54, Node.SLASH_V);
2160:       assertEquals(43, Node.IS_CONSTANT_NAME);
2161:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2162:       assertEquals(36, Node.QUOTED_PROP);
2163:       assertEquals(43, Node.IS_CONSTANT_NAME);
2164:       assertEquals(55, Node.INFERRED_FUNCTION);
2165:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2166:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2167:       assertEquals(29, Node.JSDOC_INFO_PROP);
2168:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2169:       assertEquals(53, Node.INPUT_ID);
2170:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2171:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2172:       assertEquals(47, Node.IS_DISPATCHER);
2173:       assertEquals(46, Node.IS_NAMESPACE);
2174:       assertEquals(30, Node.VAR_ARGS_NAME);
2175:       assertEquals(2, Node.POST_FLAG);
2176:       assertEquals(40, Node.ORIGINALNAME_PROP);
2177:       assertEquals(52, Node.LENGTH);
2178:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2179:       assertEquals(57, Node.REFLECTED_OBJECT);
2180:       assertEquals(54, Node.SLASH_V);
2181:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2182:       assertEquals(57, Node.LAST_PROP);
2183:       assertEquals(1, Node.DECR_FLAG);
2184:       assertEquals(50, Node.FREE_CALL);
2185:       assertEquals(8, Node.FLAG_NO_THROWS);
2186:       assertEquals(39, Node.EMPTY_BLOCK);
2187:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2188:       assertEquals(48, Node.DIRECTIVES);
2189:       assertEquals(32, Node.INCRDECR_PROP);
2190:       assertEquals(56, Node.CHANGE_TIME);
2191:       assertEquals(12, Node.COLUMN_BITS);
2192:       assertEquals(49, Node.DIRECT_EVAL);
2193:       assertEquals(37, Node.OPT_ARG_NAME);
2194:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2195:       assertEquals(4095, Node.COLUMN_MASK);
2196:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2197:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2198:       assertEquals(36, Node.QUOTED_PROP);
2199:       assertEquals(55, Node.INFERRED_FUNCTION);
2200:       assertEquals(4095, Node.COLUMN_MASK);
2201:       assertEquals(48, Node.DIRECTIVES);
2202:       assertEquals(43, Node.IS_CONSTANT_NAME);
2203:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2204:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2205:       assertEquals(50, Node.FREE_CALL);
2206:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2207:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2208:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2209:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2210:       assertEquals(12, Node.COLUMN_BITS);
2211:       assertEquals(32, Node.INCRDECR_PROP);
2212:       assertEquals(30, Node.VAR_ARGS_NAME);
2213:       assertEquals(49, Node.DIRECT_EVAL);
2214:       assertEquals(1, Node.DECR_FLAG);
2215:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2216:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2217:       assertEquals(54, Node.SLASH_V);
2218:       assertEquals(37, Node.OPT_ARG_NAME);
2219:       assertEquals(56, Node.CHANGE_TIME);
2220:       assertEquals(57, Node.REFLECTED_OBJECT);
2221:       assertEquals(46, Node.IS_NAMESPACE);
2222:       assertEquals(29, Node.JSDOC_INFO_PROP);
2223:       assertEquals(40, Node.ORIGINALNAME_PROP);
2224:       assertEquals(47, Node.IS_DISPATCHER);
2225:       assertEquals(2, Node.POST_FLAG);
2226:       assertEquals(8, Node.FLAG_NO_THROWS);
2227:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2228:       assertEquals(52, Node.LENGTH);
2229:       assertEquals(53, Node.INPUT_ID);
2230:       assertEquals(39, Node.EMPTY_BLOCK);
2231:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2232:       assertEquals(57, Node.LAST_PROP);
2233:       assertEquals(0, nodeArray0.length);
2234:       assertNotNull(node6);
2235:       assertFalse(node0.equals((Object)node2));
2236:       assertFalse(node0.equals((Object)node3));
2237:       assertFalse(node0.equals((Object)node4));
2238:       assertFalse(node0.equals((Object)node5));
2239:       assertFalse(node0.equals((Object)node1));
2240:       assertFalse(node2.equals((Object)node4));
2241:       assertFalse(node2.equals((Object)node0));
2242:       assertFalse(node2.equals((Object)node5));
2243:       assertFalse(node2.equals((Object)node1));
2244:       assertFalse(node4.equals((Object)node5));
2245:       assertFalse(node4.equals((Object)node3));
2246:       assertFalse(node4.equals((Object)node2));
2247:       assertFalse(node4.equals((Object)node1));
2248:       assertFalse(node4.equals((Object)node0));
2249:       assertFalse(node6.equals((Object)node4));
2250:       assertFalse(node6.equals((Object)node3));
2251:       assertFalse(node6.equals((Object)node0));
2252:       assertFalse(node6.equals((Object)node5));
2253:       assertFalse(node6.equals((Object)node2));
2254:       assertFalse(node6.equals((Object)node1));
2255:       
2256:       Node node7 = node1.useSourceInfoFrom(node6);
2257:       assertNotSame(node0, node6);
2258:       assertNotSame(node0, node7);
2259:       assertNotSame(node0, node4);
2260:       assertNotSame(node0, node1);
2261:       assertNotSame(node1, node4);
2262:       assertNotSame(node1, node0);
2263:       assertSame(node1, node7);
2264:       assertNotSame(node1, node6);
2265:       assertSame(node2, node3);
2266:       assertNotSame(node2, node5);
2267:       assertNotSame(node4, node6);
2268:       assertNotSame(node4, node7);
2269:       assertNotSame(node4, node1);
2270:       assertNotSame(node4, node0);
2271:       assertNotSame(node6, node4);
2272:       assertNotSame(node6, node0);
2273:       assertNotSame(node6, node1);
2274:       assertNotSame(node6, node7);
2275:       assertNotSame(node7, node6);
2276:       assertNotSame(node7, node0);
2277:       assertNotSame(node7, node4);
2278:       assertSame(node7, node1);
2279:       assertEquals(12, Node.COLUMN_BITS);
2280:       assertEquals(32, Node.INCRDECR_PROP);
2281:       assertEquals(46, Node.IS_NAMESPACE);
2282:       assertEquals(2, Node.POST_FLAG);
2283:       assertEquals(30, Node.VAR_ARGS_NAME);
2284:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2285:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2286:       assertEquals(57, Node.LAST_PROP);
2287:       assertEquals(47, Node.IS_DISPATCHER);
2288:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2289:       assertEquals(1, Node.DECR_FLAG);
2290:       assertEquals(29, Node.JSDOC_INFO_PROP);
2291:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2292:       assertEquals(50, Node.FREE_CALL);
2293:       assertEquals(54, Node.SLASH_V);
2294:       assertEquals(43, Node.IS_CONSTANT_NAME);
2295:       assertEquals(40, Node.ORIGINALNAME_PROP);
2296:       assertEquals(55, Node.INFERRED_FUNCTION);
2297:       assertEquals(4095, Node.COLUMN_MASK);
2298:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2299:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2300:       assertEquals(8, Node.FLAG_NO_THROWS);
2301:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2302:       assertEquals(53, Node.INPUT_ID);
2303:       assertEquals(39, Node.EMPTY_BLOCK);
2304:       assertEquals(57, Node.REFLECTED_OBJECT);
2305:       assertEquals(52, Node.LENGTH);
2306:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2307:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2308:       assertEquals(36, Node.QUOTED_PROP);
2309:       assertEquals(56, Node.CHANGE_TIME);
2310:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2311:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2312:       assertEquals(48, Node.DIRECTIVES);
2313:       assertEquals(49, Node.DIRECT_EVAL);
2314:       assertEquals(37, Node.OPT_ARG_NAME);
2315:       assertEquals(12, Node.COLUMN_BITS);
2316:       assertEquals(46, Node.IS_NAMESPACE);
2317:       assertEquals(30, Node.VAR_ARGS_NAME);
2318:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2319:       assertEquals(2, Node.POST_FLAG);
2320:       assertEquals(54, Node.SLASH_V);
2321:       assertEquals(56, Node.CHANGE_TIME);
2322:       assertEquals(49, Node.DIRECT_EVAL);
2323:       assertEquals(37, Node.OPT_ARG_NAME);
2324:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2325:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2326:       assertEquals(50, Node.FREE_CALL);
2327:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2328:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2329:       assertEquals(32, Node.INCRDECR_PROP);
2330:       assertEquals(1, Node.DECR_FLAG);
2331:       assertEquals(4095, Node.COLUMN_MASK);
2332:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2333:       assertEquals(55, Node.INFERRED_FUNCTION);
2334:       assertEquals(36, Node.QUOTED_PROP);
2335:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2336:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2337:       assertEquals(43, Node.IS_CONSTANT_NAME);
2338:       assertEquals(48, Node.DIRECTIVES);
2339:       assertEquals(40, Node.ORIGINALNAME_PROP);
2340:       assertEquals(57, Node.REFLECTED_OBJECT);
2341:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2342:       assertEquals(52, Node.LENGTH);
2343:       assertEquals(47, Node.IS_DISPATCHER);
2344:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2345:       assertEquals(8, Node.FLAG_NO_THROWS);
2346:       assertEquals(39, Node.EMPTY_BLOCK);
2347:       assertEquals(57, Node.LAST_PROP);
2348:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2349:       assertEquals(29, Node.JSDOC_INFO_PROP);
2350:       assertEquals(53, Node.INPUT_ID);
2351:       assertEquals(29, Node.JSDOC_INFO_PROP);
2352:       assertEquals(47, Node.IS_DISPATCHER);
2353:       assertEquals(2, Node.POST_FLAG);
2354:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2355:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2356:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2357:       assertEquals(32, Node.INCRDECR_PROP);
2358:       assertEquals(53, Node.INPUT_ID);
2359:       assertEquals(12, Node.COLUMN_BITS);
2360:       assertEquals(49, Node.DIRECT_EVAL);
2361:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2362:       assertEquals(36, Node.QUOTED_PROP);
2363:       assertEquals(55, Node.INFERRED_FUNCTION);
2364:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2365:       assertEquals(4095, Node.COLUMN_MASK);
2366:       assertEquals(52, Node.LENGTH);
2367:       assertEquals(48, Node.DIRECTIVES);
2368:       assertEquals(37, Node.OPT_ARG_NAME);
2369:       assertEquals(57, Node.REFLECTED_OBJECT);
2370:       assertEquals(56, Node.CHANGE_TIME);
2371:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2372:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2373:       assertEquals(50, Node.FREE_CALL);
2374:       assertEquals(8, Node.FLAG_NO_THROWS);
2375:       assertEquals(39, Node.EMPTY_BLOCK);
2376:       assertEquals(40, Node.ORIGINALNAME_PROP);
2377:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2378:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2379:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2380:       assertEquals(57, Node.LAST_PROP);
2381:       assertEquals(30, Node.VAR_ARGS_NAME);
2382:       assertEquals(1, Node.DECR_FLAG);
2383:       assertEquals(46, Node.IS_NAMESPACE);
2384:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2385:       assertEquals(54, Node.SLASH_V);
2386:       assertEquals(43, Node.IS_CONSTANT_NAME);
2387:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2388:       assertEquals(36, Node.QUOTED_PROP);
2389:       assertEquals(43, Node.IS_CONSTANT_NAME);
2390:       assertEquals(55, Node.INFERRED_FUNCTION);
2391:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2392:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2393:       assertEquals(29, Node.JSDOC_INFO_PROP);
2394:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2395:       assertEquals(53, Node.INPUT_ID);
2396:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2397:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2398:       assertEquals(47, Node.IS_DISPATCHER);
2399:       assertEquals(46, Node.IS_NAMESPACE);
2400:       assertEquals(30, Node.VAR_ARGS_NAME);
2401:       assertEquals(2, Node.POST_FLAG);
2402:       assertEquals(40, Node.ORIGINALNAME_PROP);
2403:       assertEquals(52, Node.LENGTH);
2404:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2405:       assertEquals(57, Node.REFLECTED_OBJECT);
2406:       assertEquals(54, Node.SLASH_V);
2407:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2408:       assertEquals(57, Node.LAST_PROP);
2409:       assertEquals(1, Node.DECR_FLAG);
2410:       assertEquals(50, Node.FREE_CALL);
2411:       assertEquals(8, Node.FLAG_NO_THROWS);
2412:       assertEquals(39, Node.EMPTY_BLOCK);
2413:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2414:       assertEquals(48, Node.DIRECTIVES);
2415:       assertEquals(32, Node.INCRDECR_PROP);
2416:       assertEquals(56, Node.CHANGE_TIME);
2417:       assertEquals(12, Node.COLUMN_BITS);
2418:       assertEquals(49, Node.DIRECT_EVAL);
2419:       assertEquals(37, Node.OPT_ARG_NAME);
2420:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2421:       assertEquals(4095, Node.COLUMN_MASK);
2422:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2423:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2424:       assertEquals(36, Node.QUOTED_PROP);
2425:       assertEquals(55, Node.INFERRED_FUNCTION);
2426:       assertEquals(4095, Node.COLUMN_MASK);
2427:       assertEquals(48, Node.DIRECTIVES);
2428:       assertEquals(43, Node.IS_CONSTANT_NAME);
2429:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2430:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2431:       assertEquals(50, Node.FREE_CALL);
2432:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2433:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2434:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2435:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2436:       assertEquals(12, Node.COLUMN_BITS);
2437:       assertEquals(32, Node.INCRDECR_PROP);
2438:       assertEquals(30, Node.VAR_ARGS_NAME);
2439:       assertEquals(49, Node.DIRECT_EVAL);
2440:       assertEquals(1, Node.DECR_FLAG);
2441:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2442:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2443:       assertEquals(54, Node.SLASH_V);
2444:       assertEquals(37, Node.OPT_ARG_NAME);
2445:       assertEquals(56, Node.CHANGE_TIME);
2446:       assertEquals(57, Node.REFLECTED_OBJECT);
2447:       assertEquals(46, Node.IS_NAMESPACE);
2448:       assertEquals(29, Node.JSDOC_INFO_PROP);
2449:       assertEquals(40, Node.ORIGINALNAME_PROP);
2450:       assertEquals(47, Node.IS_DISPATCHER);
2451:       assertEquals(2, Node.POST_FLAG);
2452:       assertEquals(8, Node.FLAG_NO_THROWS);
2453:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2454:       assertEquals(52, Node.LENGTH);
2455:       assertEquals(53, Node.INPUT_ID);
2456:       assertEquals(39, Node.EMPTY_BLOCK);
2457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2458:       assertEquals(57, Node.LAST_PROP);
2459:       assertEquals(48, Node.DIRECTIVES);
2460:       assertEquals(8, Node.FLAG_NO_THROWS);
2461:       assertEquals(39, Node.EMPTY_BLOCK);
2462:       assertEquals(4095, Node.COLUMN_MASK);
2463:       assertEquals(55, Node.INFERRED_FUNCTION);
2464:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2465:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2466:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2467:       assertEquals(36, Node.QUOTED_PROP);
2468:       assertEquals(50, Node.FREE_CALL);
2469:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2470:       assertEquals(43, Node.IS_CONSTANT_NAME);
2471:       assertEquals(57, Node.REFLECTED_OBJECT);
2472:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2473:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2474:       assertEquals(1, Node.DECR_FLAG);
2475:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2476:       assertEquals(12, Node.COLUMN_BITS);
2477:       assertEquals(32, Node.INCRDECR_PROP);
2478:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2479:       assertEquals(37, Node.OPT_ARG_NAME);
2480:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2481:       assertEquals(49, Node.DIRECT_EVAL);
2482:       assertEquals(56, Node.CHANGE_TIME);
2483:       assertEquals(46, Node.IS_NAMESPACE);
2484:       assertEquals(54, Node.SLASH_V);
2485:       assertEquals(52, Node.LENGTH);
2486:       assertEquals(40, Node.ORIGINALNAME_PROP);
2487:       assertEquals(53, Node.INPUT_ID);
2488:       assertEquals(29, Node.JSDOC_INFO_PROP);
2489:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2490:       assertEquals(57, Node.LAST_PROP);
2491:       assertEquals(47, Node.IS_DISPATCHER);
2492:       assertEquals(2, Node.POST_FLAG);
2493:       assertEquals(30, Node.VAR_ARGS_NAME);
2494:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2495:       assertEquals(0, nodeArray0.length);
2496:       assertNotNull(node7);
2497:       assertFalse(node0.equals((Object)node2));
2498:       assertFalse(node0.equals((Object)node6));
2499:       assertFalse(node0.equals((Object)node3));
2500:       assertFalse(node0.equals((Object)node4));
2501:       assertFalse(node0.equals((Object)node5));
2502:       assertFalse(node0.equals((Object)node1));
2503:       assertFalse(node1.equals((Object)node4));
2504:       assertFalse(node1.equals((Object)node0));
2505:       assertFalse(node1.equals((Object)node2));
2506:       assertFalse(node1.equals((Object)node6));
2507:       assertFalse(node1.equals((Object)node3));
2508:       assertFalse(node1.equals((Object)node5));
2509:       assertFalse(node2.equals((Object)node4));
2510:       assertFalse(node2.equals((Object)node0));
2511:       assertFalse(node2.equals((Object)node5));
2512:       assertFalse(node2.equals((Object)node6));
2513:       assertFalse(node2.equals((Object)node1));
2514:       assertFalse(node4.equals((Object)node5));
2515:       assertFalse(node4.equals((Object)node6));
2516:       assertFalse(node4.equals((Object)node3));
2517:       assertFalse(node4.equals((Object)node2));
2518:       assertFalse(node4.equals((Object)node1));
2519:       assertFalse(node4.equals((Object)node0));
2520:       assertFalse(node6.equals((Object)node4));
2521:       assertFalse(node6.equals((Object)node3));
2522:       assertFalse(node6.equals((Object)node0));
2523:       assertFalse(node6.equals((Object)node5));
2524:       assertFalse(node6.equals((Object)node2));
2525:       assertFalse(node6.equals((Object)node1));
2526:       assertFalse(node7.equals((Object)node5));
2527:       assertFalse(node7.equals((Object)node6));
2528:       assertFalse(node7.equals((Object)node0));
2529:       assertFalse(node7.equals((Object)node4));
2530:       assertFalse(node7.equals((Object)node3));
2531:       assertFalse(node7.equals((Object)node2));
2532:   }
2533: }
RegularFileObject[/tmp/EvoSuite_158_1628157533704/com/google/javascript/rhino/Node_158_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:54 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_158_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_158_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_158_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.JSTypeNative",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.JSType$TypePair",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.JSType$2",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
375:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
377:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
378:     );
379:   }
380: }

[MASTER] 09:58:54.275 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node[] nodeArray0 = new Node[0];
Node node0 = new Node(330, nodeArray0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, nodeArray0.length);
assertNotNull(node0);
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertEquals(0, node0.getCharno());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isBreak());
assertEquals(0, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertEquals(330, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isCase());

Node node1 = new Node(49);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isIn());
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertTrue(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.hasOneChild());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());

Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isAdd());
assertFalse(node2.isSwitch());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isNumber());
assertFalse(node2.isExprResult());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertTrue(node2.isString());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertEquals(40, node2.getType());
assertFalse(node2.isThrow());

Node node3 = node2.useSourceInfoIfMissingFrom(node1);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertNotNull(node3);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node1.isIn());
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertTrue(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.hasOneChild());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isAdd());
assertFalse(node2.isSwitch());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isNumber());
assertFalse(node2.isExprResult());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertTrue(node2.isString());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertEquals(40, node2.getType());
assertFalse(node2.isThrow());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isThrow());
assertFalse(node3.isHook());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isGetProp());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isSwitch());
assertFalse(node3.isFalse());
assertFalse(node3.isArrayLit());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isFunction());
assertFalse(node3.isFor());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isIn());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isNE());
assertFalse(node3.isThis());
assertFalse(node3.isRegExp());
assertFalse(node3.isIf());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertTrue(node3.isString());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isParamList());
assertFalse(node3.isLabel());
assertEquals((-1), node3.getSourcePosition());
assertEquals(40, node3.getType());
assertFalse(node3.isLabelName());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isNot());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isEmpty());
assertFalse(node3.isOr());
assertFalse(node3.isComma());
assertFalse(node3.isNull());
assertFalse(node3.isReturn());
assertFalse(node3.hasChildren());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isName());
assertFalse(node3.isTypeOf());
assertFalse(node3.isVoid());
assertFalse(node3.isCall());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());

Iterable<Node> iterable0 = node3.children();
assertFalse(iterable0.contains(node2));
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node1.isIn());
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertTrue(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.hasOneChild());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isAdd());
assertFalse(node2.isSwitch());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isNumber());
assertFalse(node2.isExprResult());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertTrue(node2.isString());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertEquals(40, node2.getType());
assertFalse(node2.isThrow());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isThrow());
assertFalse(node3.isHook());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isGetProp());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isSwitch());
assertFalse(node3.isFalse());
assertFalse(node3.isArrayLit());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isFunction());
assertFalse(node3.isFor());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isIn());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isNE());
assertFalse(node3.isThis());
assertFalse(node3.isRegExp());
assertFalse(node3.isIf());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertTrue(node3.isString());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isParamList());
assertFalse(node3.isLabel());
assertEquals((-1), node3.getSourcePosition());
assertEquals(40, node3.getType());
assertFalse(node3.isLabelName());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isNot());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isEmpty());
assertFalse(node3.isOr());
assertFalse(node3.isComma());
assertFalse(node3.isNull());
assertFalse(node3.isReturn());
assertFalse(node3.hasChildren());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isName());
assertFalse(node3.isTypeOf());
assertFalse(node3.isVoid());
assertFalse(node3.isCall());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());

boolean boolean0 = node1.isGetProp();
assertFalse(boolean0);
assertNotSame(node1, node0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.isIn());
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertTrue(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.hasOneChild());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());

boolean boolean1 = node3.hasChildren();
assertFalse(boolean1);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node1.isIn());
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertTrue(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.hasOneChild());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isAdd());
assertFalse(node2.isSwitch());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isNumber());
assertFalse(node2.isExprResult());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertTrue(node2.isString());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertEquals(40, node2.getType());
assertFalse(node2.isThrow());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isThrow());
assertFalse(node3.isHook());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isGetProp());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isSwitch());
assertFalse(node3.isFalse());
assertFalse(node3.isArrayLit());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isFunction());
assertFalse(node3.isFor());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isIn());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isNE());
assertFalse(node3.isThis());
assertFalse(node3.isRegExp());
assertFalse(node3.isIf());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertTrue(node3.isString());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isSetterDef());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isParamList());
assertFalse(node3.isLabel());
assertEquals((-1), node3.getSourcePosition());
assertEquals(40, node3.getType());
assertFalse(node3.isLabelName());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isNot());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isEmpty());
assertFalse(node3.isOr());
assertFalse(node3.isComma());
assertFalse(node3.isNull());
assertFalse(node3.isReturn());
assertFalse(node3.hasChildren());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isName());
assertFalse(node3.isTypeOf());
assertFalse(node3.isVoid());
assertFalse(node3.isCall());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());

boolean boolean2 = node2.isSwitch();
assertFalse(boolean2);
assertSame(node2, node3);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isAdd());
assertFalse(node2.isSwitch());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isNumber());
assertFalse(node2.isExprResult());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertTrue(node2.isString());
assertFalse(node2.isReturn());
assertFalse(node2.isBlock());
assertFalse(node2.isWhile());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertEquals(40, node2.getType());
assertFalse(node2.isThrow());

Node node4 = node0.cloneNode();
assertNotSame(node0, node4);
assertNotSame(node0, node1);
assertNotSame(node4, node1);
assertNotSame(node4, node0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, nodeArray0.length);
assertNotNull(node4);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertEquals(0, node0.getCharno());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isBreak());
assertEquals(0, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertEquals(330, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node4.isDebugger());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isTry());
assertFalse(node4.isVoid());
assertFalse(node4.isRegExp());
assertFalse(node4.isFunction());
assertFalse(node4.isTrue());
assertFalse(node4.isCatch());
assertFalse(node4.isArrayLit());
assertEquals(0, node4.getChildCount());
assertEquals(0, node4.getLineno());
assertFalse(node4.isNE());
assertFalse(node4.isSetterDef());
assertFalse(node4.isIf());
assertFalse(node4.isDelProp());
assertEquals(0, node4.getSourcePosition());
assertFalse(node4.isNull());
assertFalse(node4.isIn());
assertFalse(node4.isNew());
assertFalse(node4.isEmpty());
assertFalse(node4.isAdd());
assertFalse(node4.isSwitch());
assertFalse(node4.isHook());
assertFalse(node4.isVar());
assertFalse(node4.isBlock());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isThis());
assertFalse(node4.isParamList());
assertFalse(node4.isNumber());
assertFalse(node4.isGetterDef());
assertFalse(node4.isStringKey());
assertFalse(node4.isFor());
assertFalse(node4.hasOneChild());
assertFalse(node4.isCase());
assertFalse(node4.isScript());
assertEquals(0, node4.getCharno());
assertFalse(node4.isNot());
assertFalse(node4.isCast());
assertFalse(node4.isAnd());
assertFalse(node4.isLabelName());
assertFalse(node4.isWith());
assertFalse(node4.isGetElem());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isExprResult());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isOr());
assertFalse(node4.isLabel());
assertFalse(node4.isThrow());
assertFalse(node4.isDo());
assertFalse(node4.isInc());
assertFalse(node4.isWhile());
assertFalse(node4.isContinue());
assertFalse(node4.isFalse());
assertFalse(node4.isName());
assertFalse(node4.isBreak());
assertFalse(node4.isCall());
assertFalse(node4.isComma());
assertFalse(node4.isDec());
assertFalse(node4.isTypeOf());
assertFalse(node4.isReturn());
assertFalse(node4.isAssign());
assertFalse(node4.hasChildren());
assertEquals(330, node4.getType());
assertFalse(node4.isObjectLit());
assertFalse(node4.isString());
assertFalse(node4.isGetProp());

Node node5 = Node.newString(153, "com.google.javascript.rhino.Node$IntPropListItem", 51, 44);
assertNotSame(node5, node2);
assertNotSame(node5, node3);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertNotNull(node5);
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.isParamList());
assertFalse(node5.isNull());
assertFalse(node5.isSetterDef());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isCatch());
assertFalse(node5.isCall());
assertFalse(node5.isStringKey());
assertFalse(node5.isName());
assertFalse(node5.isTrue());
assertFalse(node5.isAdd());
assertFalse(node5.isContinue());
assertFalse(node5.isFunction());
assertFalse(node5.isVar());
assertFalse(node5.isDo());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isNew());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isNE());
assertFalse(node5.isLabel());
assertFalse(node5.isGetterDef());
assertFalse(node5.isIn());
assertEquals(44, node5.getCharno());
assertFalse(node5.isNumber());
assertFalse(node5.isArrayLit());
assertFalse(node5.isIf());
assertFalse(node5.isRegExp());
assertFalse(node5.isScript());
assertFalse(node5.isSwitch());
assertFalse(node5.isBlock());
assertEquals(208940, node5.getSourcePosition());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isWith());
assertFalse(node5.hasOneChild());
assertFalse(node5.isHook());
assertFalse(node5.isFor());
assertFalse(node5.isTry());
assertFalse(node5.isCase());
assertFalse(node5.isComma());
assertFalse(node5.isBreak());
assertFalse(node5.isGetProp());
assertFalse(node5.isThis());
assertFalse(node5.isFalse());
assertFalse(node5.isInstanceOf());
assertEquals(153, node5.getType());
assertFalse(node5.isAnd());
assertEquals(51, node5.getLineno());
assertFalse(node5.isInc());
assertFalse(node5.isThrow());
assertFalse(node5.isDec());
assertTrue(node5.isLabelName());
assertFalse(node5.hasChildren());
assertFalse(node5.isEmpty());
assertFalse(node5.isOr());
assertFalse(node5.isAssign());
assertFalse(node5.isTypeOf());
assertFalse(node5.isCast());
assertFalse(node5.isGetElem());
assertFalse(node5.isVoid());
assertFalse(node5.isDelProp());
assertFalse(node5.isDebugger());
assertFalse(node5.isExprResult());
assertFalse(node5.isNot());
assertFalse(node5.isString());
assertFalse(node5.isObjectLit());
assertFalse(node5.isReturn());
assertFalse(node5.isWhile());

int int0 = node3.getLineno();
assertEquals((-1), int0);
assertNotSame(node1, node4);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertNotSame(node2, node5);
assertSame(node3, node2);
assertNotSame(node3, node5);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node5));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node0));
assertFalse(node1.isIn());
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertTrue(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.hasOneChild());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isAdd());
assertFalse(node2.isSwitch());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isNumber());
assertFalse(node2.isExprResult());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isWith());

Node node6 = new Node(118, node0, node4, node2);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(0, nodeArray0.length);
assertNotNull(node6);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node4.equals((Object)node5));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node1));

Node node7 = node1.useSourceInfoFrom(node6);
assertNotSame(node0, node6);
assertNotSame(node0, node7);
assertNotSame(node0, node4);
assertNotSame(node0, node1);
assertNotSame(node1, node4);
assertNotSame(node1, node0);
assertSame(node1, node7);
assertNotSame(node1, node6);
assertSame(node2, node3);
assertNotSame(node2, node5);
assertNotSame(node4, node6);
assertNotSame(node4, node7);
assertNotSame(node4, node1);
assertNotSame(node4, node0);
assertNotSame(node6, node4);
assertNotSame(node6, node0);
assertNotSame(node6, node1);
assertNotSame(node6, node7);
assertNotSame(node7, node6);
assertNotSame(node7, node0);
assertNotSame(node7, node4);
assertSame(node7, node1);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, nodeArray0.length);
assertNotNull(node7);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node6));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node6));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node5));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node6));
assertFalse(node2.equals((Object)node1));
assertFalse(node4.equals((Object)node5));
assertFalse(node4.equals((Object)node6));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node1));
assertFalse(node7.equals((Object)node5));
assertFalse(node7.equals((Object)node6));
assertFalse(node7.equals((Object)node0));
assertFalse(node7.equals((Object)node4));
assertFalse(node7.equals((Object)node3));
assertFalse(node7.equals((Object)node2));


[MASTER] 09:58:55.714 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_165_1628157535179/com/google/javascript/rhino/Node_165_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_165_1628157535179/com/google/javascript/rhino/Node_165_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:55.714 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:55.714 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:55.715 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 659
[MASTER] 09:58:55.716 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_165_1628157535179/com/google/javascript/rhino/Node_165_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:55 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_165_tmp__ESTest extends Node_165_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node[] nodeArray0 = new Node[0];
21:       Node node0 = new Node(330, nodeArray0);
22:       assertEquals(51, Node.STATIC_SOURCE_FILE);
23:       assertEquals(32, Node.INCRDECR_PROP);
24:       assertEquals(12, Node.COLUMN_BITS);
25:       assertEquals(46, Node.IS_NAMESPACE);
26:       assertEquals(56, Node.CHANGE_TIME);
27:       assertEquals(47, Node.IS_DISPATCHER);
28:       assertEquals(2, Node.POST_FLAG);
29:       assertEquals(30, Node.VAR_ARGS_NAME);
30:       assertEquals(49, Node.DIRECT_EVAL);
31:       assertEquals(37, Node.OPT_ARG_NAME);
32:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
33:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
34:       assertEquals(54, Node.SLASH_V);
35:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
36:       assertEquals(50, Node.FREE_CALL);
37:       assertEquals(1, Node.DECR_FLAG);
38:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
39:       assertEquals(4095, Node.COLUMN_MASK);
40:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
41:       assertEquals(43, Node.IS_CONSTANT_NAME);
42:       assertEquals(48, Node.DIRECTIVES);
43:       assertEquals(40, Node.ORIGINALNAME_PROP);
44:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
45:       assertEquals(57, Node.REFLECTED_OBJECT);
46:       assertEquals(52, Node.LENGTH);
47:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
48:       assertEquals(15, Node.NO_SIDE_EFFECTS);
49:       assertEquals(57, Node.LAST_PROP);
50:       assertEquals(36, Node.QUOTED_PROP);
51:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
52:       assertEquals(8, Node.FLAG_NO_THROWS);
53:       assertEquals(55, Node.INFERRED_FUNCTION);
54:       assertEquals(39, Node.EMPTY_BLOCK);
55:       assertEquals(29, Node.JSDOC_INFO_PROP);
56:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
57:       assertEquals(53, Node.INPUT_ID);
58:       assertEquals(0, nodeArray0.length);
59:       assertNotNull(node0);
60:       assertFalse(node0.isAssignAdd());
61:       assertFalse(node0.isOr());
62:       assertFalse(node0.isTypeOf());
63:       assertFalse(node0.isDec());
64:       assertFalse(node0.hasChildren());
65:       assertFalse(node0.isLabel());
66:       assertFalse(node0.isReturn());
67:       assertFalse(node0.isDo());
68:       assertFalse(node0.isNumber());
69:       assertFalse(node0.hasOneChild());
70:       assertFalse(node0.isNew());
71:       assertFalse(node0.isVar());
72:       assertFalse(node0.isStringKey());
73:       assertFalse(node0.isAnd());
74:       assertFalse(node0.isContinue());
75:       assertFalse(node0.isLabelName());
76:       assertFalse(node0.isCast());
77:       assertFalse(node0.isGetProp());
78:       assertFalse(node0.isComma());
79:       assertEquals(0, node0.getSourcePosition());
80:       assertEquals(0, node0.getChildCount());
81:       assertFalse(node0.isNull());
82:       assertFalse(node0.isNot());
83:       assertFalse(node0.isObjectLit());
84:       assertFalse(node0.isAdd());
85:       assertFalse(node0.isVoid());
86:       assertFalse(node0.isWhile());
87:       assertFalse(node0.isTrue());
88:       assertFalse(node0.isAssign());
89:       assertFalse(node0.isDelProp());
90:       assertFalse(node0.isName());
91:       assertFalse(node0.isBreak());
92:       assertFalse(node0.isCall());
93:       assertFalse(node0.isExprResult());
94:       assertFalse(node0.isGetElem());
95:       assertFalse(node0.isIf());
96:       assertFalse(node0.isNE());
97:       assertFalse(node0.isFor());
98:       assertFalse(node0.isCase());
99:       assertEquals(330, node0.getType());
100:       assertFalse(node0.isGetterDef());
101:       assertFalse(node0.isIn());
102:       assertFalse(node0.isString());
103:       assertFalse(node0.isEmpty());
104:       assertFalse(node0.isInc());
105:       assertFalse(node0.isDebugger());
106:       assertFalse(node0.isSwitch());
107:       assertFalse(node0.isFunction());
108:       assertFalse(node0.isDefaultCase());
109:       assertFalse(node0.isFalse());
110:       assertFalse(node0.isArrayLit());
111:       assertEquals(0, node0.getLineno());
112:       assertFalse(node0.isParamList());
113:       assertFalse(node0.isThis());
114:       assertFalse(node0.isThrow());
115:       assertFalse(node0.isSetterDef());
116:       assertFalse(node0.isScript());
117:       assertFalse(node0.isTry());
118:       assertFalse(node0.isRegExp());
119:       assertFalse(node0.isHook());
120:       assertEquals(0, node0.getCharno());
121:       assertFalse(node0.isBlock());
122:       assertFalse(node0.hasMoreThanOneChild());
123:       assertFalse(node0.isWith());
124:       assertFalse(node0.isInstanceOf());
125:       assertFalse(node0.isCatch());
126:       
127:       Node node1 = new Node(49);
128:       assertEquals(46, Node.IS_NAMESPACE);
129:       assertEquals(12, Node.COLUMN_BITS);
130:       assertEquals(32, Node.INCRDECR_PROP);
131:       assertEquals(1, Node.DECR_FLAG);
132:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
133:       assertEquals(49, Node.DIRECT_EVAL);
134:       assertEquals(37, Node.OPT_ARG_NAME);
135:       assertEquals(15, Node.NO_SIDE_EFFECTS);
136:       assertEquals(29, Node.JSDOC_INFO_PROP);
137:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
138:       assertEquals(56, Node.CHANGE_TIME);
139:       assertEquals(54, Node.SLASH_V);
140:       assertEquals(51, Node.STATIC_SOURCE_FILE);
141:       assertEquals(52, Node.LENGTH);
142:       assertEquals(40, Node.ORIGINALNAME_PROP);
143:       assertEquals(53, Node.INPUT_ID);
144:       assertEquals(57, Node.LAST_PROP);
145:       assertEquals(47, Node.IS_DISPATCHER);
146:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
147:       assertEquals(2, Node.POST_FLAG);
148:       assertEquals(30, Node.VAR_ARGS_NAME);
149:       assertEquals(55, Node.INFERRED_FUNCTION);
150:       assertEquals(4095, Node.COLUMN_MASK);
151:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
152:       assertEquals(48, Node.DIRECTIVES);
153:       assertEquals(39, Node.EMPTY_BLOCK);
154:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
155:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
156:       assertEquals(43, Node.IS_CONSTANT_NAME);
157:       assertEquals(8, Node.FLAG_NO_THROWS);
158:       assertEquals(50, Node.FREE_CALL);
159:       assertEquals(36, Node.QUOTED_PROP);
160:       assertEquals(57, Node.REFLECTED_OBJECT);
161:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
162:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
163:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
164:       assertNotNull(node1);
165:       assertFalse(node1.equals((Object)node0));
166:       assertEquals(49, node1.getType());
167:       assertFalse(node1.isNE());
168:       assertFalse(node1.isDelProp());
169:       assertFalse(node1.isIf());
170:       assertFalse(node1.isFor());
171:       assertFalse(node1.isVoid());
172:       assertFalse(node1.isInc());
173:       assertFalse(node1.isTrue());
174:       assertFalse(node1.isDefaultCase());
175:       assertFalse(node1.isEmpty());
176:       assertFalse(node1.isIn());
177:       assertFalse(node1.isGetProp());
178:       assertFalse(node1.isSetterDef());
179:       assertFalse(node1.isBreak());
180:       assertFalse(node1.isCall());
181:       assertFalse(node1.isFalse());
182:       assertFalse(node1.isComma());
183:       assertFalse(node1.isDebugger());
184:       assertFalse(node1.isFunction());
185:       assertFalse(node1.isAnd());
186:       assertFalse(node1.isObjectLit());
187:       assertFalse(node1.isString());
188:       assertFalse(node1.isNot());
189:       assertEquals((-1), node1.getSourcePosition());
190:       assertFalse(node1.isAssignAdd());
191:       assertFalse(node1.isLabelName());
192:       assertEquals((-1), node1.getLineno());
193:       assertFalse(node1.isContinue());
194:       assertFalse(node1.isGetElem());
195:       assertFalse(node1.hasMoreThanOneChild());
196:       assertFalse(node1.isCast());
197:       assertFalse(node1.isWhile());
198:       assertFalse(node1.hasChildren());
199:       assertFalse(node1.isReturn());
200:       assertFalse(node1.isTypeOf());
201:       assertFalse(node1.isLabel());
202:       assertFalse(node1.isAssign());
203:       assertFalse(node1.isDec());
204:       assertFalse(node1.isExprResult());
205:       assertFalse(node1.isAdd());
206:       assertFalse(node1.isDo());
207:       assertFalse(node1.isNew());
208:       assertFalse(node1.isName());
209:       assertFalse(node1.isNull());
210:       assertFalse(node1.isOr());
211:       assertFalse(node1.isThis());
212:       assertTrue(node1.isThrow());
213:       assertFalse(node1.isParamList());
214:       assertFalse(node1.isVar());
215:       assertFalse(node1.isInstanceOf());
216:       assertFalse(node1.isCatch());
217:       assertEquals(0, node1.getChildCount());
218:       assertFalse(node1.isHook());
219:       assertFalse(node1.isWith());
220:       assertFalse(node1.isRegExp());
221:       assertEquals((-1), node1.getCharno());
222:       assertFalse(node1.isBlock());
223:       assertFalse(node1.isScript());
224:       assertFalse(node1.isSwitch());
225:       assertFalse(node1.isTry());
226:       assertFalse(node1.isArrayLit());
227:       assertFalse(node1.isCase());
228:       assertFalse(node1.hasOneChild());
229:       assertFalse(node1.isStringKey());
230:       assertFalse(node1.isGetterDef());
231:       assertFalse(node1.isNumber());
232:       
233:       Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
234:       assertEquals(8, Node.FLAG_NO_THROWS);
235:       assertEquals(48, Node.DIRECTIVES);
236:       assertEquals(50, Node.FREE_CALL);
237:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
238:       assertEquals(40, Node.ORIGINALNAME_PROP);
239:       assertEquals(39, Node.EMPTY_BLOCK);
240:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
241:       assertEquals(4095, Node.COLUMN_MASK);
242:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
243:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
244:       assertEquals(43, Node.IS_CONSTANT_NAME);
245:       assertEquals(30, Node.VAR_ARGS_NAME);
246:       assertEquals(51, Node.STATIC_SOURCE_FILE);
247:       assertEquals(46, Node.IS_NAMESPACE);
248:       assertEquals(54, Node.SLASH_V);
249:       assertEquals(56, Node.CHANGE_TIME);
250:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
251:       assertEquals(47, Node.IS_DISPATCHER);
252:       assertEquals(37, Node.OPT_ARG_NAME);
253:       assertEquals(2, Node.POST_FLAG);
254:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
255:       assertEquals(29, Node.JSDOC_INFO_PROP);
256:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
257:       assertEquals(12, Node.COLUMN_BITS);
258:       assertEquals(32, Node.INCRDECR_PROP);
259:       assertEquals(1, Node.DECR_FLAG);
260:       assertEquals(36, Node.QUOTED_PROP);
261:       assertEquals(15, Node.NO_SIDE_EFFECTS);
262:       assertEquals(57, Node.LAST_PROP);
263:       assertEquals(49, Node.DIRECT_EVAL);
264:       assertEquals(53, Node.INPUT_ID);
265:       assertEquals(52, Node.LENGTH);
266:       assertEquals(55, Node.INFERRED_FUNCTION);
267:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
268:       assertEquals(57, Node.REFLECTED_OBJECT);
269:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
270:       assertNotNull(node2);
271:       assertFalse(node2.equals((Object)node0));
272:       assertFalse(node2.equals((Object)node1));
273:       assertFalse(node2.isFalse());
274:       assertFalse(node2.isBreak());
275:       assertEquals((-1), node2.getCharno());
276:       assertFalse(node2.isSwitch());
277:       assertFalse(node2.isAnd());
278:       assertFalse(node2.isIn());
279:       assertFalse(node2.isInc());
280:       assertFalse(node2.isThrow());
281:       assertFalse(node2.isGetterDef());
282:       assertFalse(node2.isLabelName());
283:       assertFalse(node2.isNumber());
284:       assertFalse(node2.hasOneChild());
285:       assertFalse(node2.isArrayLit());
286:       assertEquals((-1), node2.getLineno());
287:       assertFalse(node2.isIf());
288:       assertFalse(node2.isNE());
289:       assertFalse(node2.isCase());
290:       assertFalse(node2.isWith());
291:       assertFalse(node2.isInstanceOf());
292:       assertFalse(node2.hasMoreThanOneChild());
293:       assertFalse(node2.isCatch());
294:       assertFalse(node2.isScript());
295:       assertTrue(node2.isString());
296:       assertFalse(node2.isBlock());
297:       assertFalse(node2.isTry());
298:       assertFalse(node2.isRegExp());
299:       assertFalse(node2.isHook());
300:       assertFalse(node2.isThis());
301:       assertFalse(node2.isFor());
302:       assertFalse(node2.isStringKey());
303:       assertFalse(node2.isName());
304:       assertFalse(node2.isCall());
305:       assertFalse(node2.isSetterDef());
306:       assertFalse(node2.isAdd());
307:       assertFalse(node2.isNull());
308:       assertFalse(node2.isParamList());
309:       assertEquals(40, node2.getType());
310:       assertFalse(node2.isContinue());
311:       assertFalse(node2.isDo());
312:       assertFalse(node2.isNew());
313:       assertFalse(node2.isLabel());
314:       assertFalse(node2.isAssignAdd());
315:       assertFalse(node2.isFunction());
316:       assertEquals(0, node2.getChildCount());
317:       assertFalse(node2.isDefaultCase());
318:       assertFalse(node2.isVar());
319:       assertFalse(node2.isGetElem());
320:       assertFalse(node2.isDelProp());
321:       assertFalse(node2.isAssign());
322:       assertFalse(node2.isTypeOf());
323:       assertFalse(node2.isEmpty());
324:       assertFalse(node2.isCast());
325:       assertFalse(node2.isDebugger());
326:       assertFalse(node2.isVoid());
327:       assertFalse(node2.isOr());
328:       assertEquals((-1), node2.getSourcePosition());
329:       assertFalse(node2.isTrue());
330:       assertFalse(node2.isNot());
331:       assertFalse(node2.isObjectLit());
332:       assertFalse(node2.isExprResult());
333:       assertFalse(node2.isGetProp());
334:       assertFalse(node2.isComma());
335:       assertFalse(node2.isDec());
336:       assertFalse(node2.hasChildren());
337:       assertFalse(node2.isReturn());
338:       assertFalse(node2.isWhile());
339:       
340:       Node node3 = node2.useSourceInfoIfMissingFrom(node1);
341:       assertNotSame(node1, node0);
342:       assertSame(node2, node3);
343:       assertSame(node3, node2);
344:       assertEquals(46, Node.IS_NAMESPACE);
345:       assertEquals(12, Node.COLUMN_BITS);
346:       assertEquals(32, Node.INCRDECR_PROP);
347:       assertEquals(1, Node.DECR_FLAG);
348:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
349:       assertEquals(49, Node.DIRECT_EVAL);
350:       assertEquals(37, Node.OPT_ARG_NAME);
351:       assertEquals(15, Node.NO_SIDE_EFFECTS);
352:       assertEquals(29, Node.JSDOC_INFO_PROP);
353:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
354:       assertEquals(56, Node.CHANGE_TIME);
355:       assertEquals(54, Node.SLASH_V);
356:       assertEquals(51, Node.STATIC_SOURCE_FILE);
357:       assertEquals(52, Node.LENGTH);
358:       assertEquals(40, Node.ORIGINALNAME_PROP);
359:       assertEquals(53, Node.INPUT_ID);
360:       assertEquals(57, Node.LAST_PROP);
361:       assertEquals(47, Node.IS_DISPATCHER);
362:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
363:       assertEquals(2, Node.POST_FLAG);
364:       assertEquals(30, Node.VAR_ARGS_NAME);
365:       assertEquals(55, Node.INFERRED_FUNCTION);
366:       assertEquals(4095, Node.COLUMN_MASK);
367:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
368:       assertEquals(48, Node.DIRECTIVES);
369:       assertEquals(39, Node.EMPTY_BLOCK);
370:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
371:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
372:       assertEquals(43, Node.IS_CONSTANT_NAME);
373:       assertEquals(8, Node.FLAG_NO_THROWS);
374:       assertEquals(50, Node.FREE_CALL);
375:       assertEquals(36, Node.QUOTED_PROP);
376:       assertEquals(57, Node.REFLECTED_OBJECT);
377:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
378:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
379:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
380:       assertEquals(8, Node.FLAG_NO_THROWS);
381:       assertEquals(48, Node.DIRECTIVES);
382:       assertEquals(50, Node.FREE_CALL);
383:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
384:       assertEquals(40, Node.ORIGINALNAME_PROP);
385:       assertEquals(39, Node.EMPTY_BLOCK);
386:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
387:       assertEquals(4095, Node.COLUMN_MASK);
388:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
389:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
390:       assertEquals(43, Node.IS_CONSTANT_NAME);
391:       assertEquals(30, Node.VAR_ARGS_NAME);
392:       assertEquals(51, Node.STATIC_SOURCE_FILE);
393:       assertEquals(46, Node.IS_NAMESPACE);
394:       assertEquals(54, Node.SLASH_V);
395:       assertEquals(56, Node.CHANGE_TIME);
396:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
397:       assertEquals(47, Node.IS_DISPATCHER);
398:       assertEquals(37, Node.OPT_ARG_NAME);
399:       assertEquals(2, Node.POST_FLAG);
400:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
401:       assertEquals(29, Node.JSDOC_INFO_PROP);
402:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
403:       assertEquals(12, Node.COLUMN_BITS);
404:       assertEquals(32, Node.INCRDECR_PROP);
405:       assertEquals(1, Node.DECR_FLAG);
406:       assertEquals(36, Node.QUOTED_PROP);
407:       assertEquals(15, Node.NO_SIDE_EFFECTS);
408:       assertEquals(57, Node.LAST_PROP);
409:       assertEquals(49, Node.DIRECT_EVAL);
410:       assertEquals(53, Node.INPUT_ID);
411:       assertEquals(52, Node.LENGTH);
412:       assertEquals(55, Node.INFERRED_FUNCTION);
413:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
414:       assertEquals(57, Node.REFLECTED_OBJECT);
415:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
416:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
417:       assertEquals(54, Node.SLASH_V);
418:       assertEquals(15, Node.NO_SIDE_EFFECTS);
419:       assertEquals(49, Node.DIRECT_EVAL);
420:       assertEquals(57, Node.LAST_PROP);
421:       assertEquals(1, Node.DECR_FLAG);
422:       assertEquals(51, Node.STATIC_SOURCE_FILE);
423:       assertEquals(46, Node.IS_NAMESPACE);
424:       assertEquals(57, Node.REFLECTED_OBJECT);
425:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
426:       assertEquals(52, Node.LENGTH);
427:       assertEquals(50, Node.FREE_CALL);
428:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
429:       assertEquals(37, Node.OPT_ARG_NAME);
430:       assertEquals(56, Node.CHANGE_TIME);
431:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
432:       assertEquals(48, Node.DIRECTIVES);
433:       assertEquals(32, Node.INCRDECR_PROP);
434:       assertEquals(12, Node.COLUMN_BITS);
435:       assertEquals(4095, Node.COLUMN_MASK);
436:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
437:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
438:       assertEquals(43, Node.IS_CONSTANT_NAME);
439:       assertEquals(36, Node.QUOTED_PROP);
440:       assertEquals(53, Node.INPUT_ID);
441:       assertEquals(55, Node.INFERRED_FUNCTION);
442:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
443:       assertEquals(29, Node.JSDOC_INFO_PROP);
444:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
445:       assertEquals(8, Node.FLAG_NO_THROWS);
446:       assertEquals(2, Node.POST_FLAG);
447:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
448:       assertEquals(47, Node.IS_DISPATCHER);
449:       assertEquals(39, Node.EMPTY_BLOCK);
450:       assertEquals(40, Node.ORIGINALNAME_PROP);
451:       assertEquals(30, Node.VAR_ARGS_NAME);
452:       assertNotNull(node3);
453:       assertFalse(node1.equals((Object)node0));
454:       assertFalse(node1.equals((Object)node2));
455:       assertFalse(node2.equals((Object)node0));
456:       assertFalse(node2.equals((Object)node1));
457:       assertFalse(node3.equals((Object)node1));
458:       assertFalse(node3.equals((Object)node0));
459:       assertEquals(49, node1.getType());
460:       assertFalse(node1.isNE());
461:       assertFalse(node1.isDelProp());
462:       assertFalse(node1.isIf());
463:       assertFalse(node1.isFor());
464:       assertFalse(node1.isVoid());
465:       assertFalse(node1.isInc());
466:       assertFalse(node1.isTrue());
467:       assertFalse(node1.isDefaultCase());
468:       assertFalse(node1.isEmpty());
469:       assertFalse(node1.isIn());
470:       assertFalse(node1.isGetProp());
471:       assertFalse(node1.isSetterDef());
472:       assertFalse(node1.isBreak());
473:       assertFalse(node1.isCall());
474:       assertFalse(node1.isFalse());
475:       assertFalse(node1.isComma());
476:       assertFalse(node1.isDebugger());
477:       assertFalse(node1.isFunction());
478:       assertFalse(node1.isAnd());
479:       assertFalse(node1.isObjectLit());
480:       assertFalse(node1.isString());
481:       assertFalse(node1.isNot());
482:       assertEquals((-1), node1.getSourcePosition());
483:       assertFalse(node1.isAssignAdd());
484:       assertFalse(node1.isLabelName());
485:       assertEquals((-1), node1.getLineno());
486:       assertFalse(node1.isContinue());
487:       assertFalse(node1.isGetElem());
488:       assertFalse(node1.hasMoreThanOneChild());
489:       assertFalse(node1.isCast());
490:       assertFalse(node1.isWhile());
491:       assertFalse(node1.hasChildren());
492:       assertFalse(node1.isReturn());
493:       assertFalse(node1.isTypeOf());
494:       assertFalse(node1.isLabel());
495:       assertFalse(node1.isAssign());
496:       assertFalse(node1.isDec());
497:       assertFalse(node1.isExprResult());
498:       assertFalse(node1.isAdd());
499:       assertFalse(node1.isDo());
500:       assertFalse(node1.isNew());
501:       assertFalse(node1.isName());
502:       assertFalse(node1.isNull());
503:       assertFalse(node1.isOr());
504:       assertFalse(node1.isThis());
505:       assertTrue(node1.isThrow());
506:       assertFalse(node1.isParamList());
507:       assertFalse(node1.isVar());
508:       assertFalse(node1.isInstanceOf());
509:       assertFalse(node1.isCatch());
510:       assertEquals(0, node1.getChildCount());
511:       assertFalse(node1.isHook());
512:       assertFalse(node1.isWith());
513:       assertFalse(node1.isRegExp());
514:       assertEquals((-1), node1.getCharno());
515:       assertFalse(node1.isBlock());
516:       assertFalse(node1.isScript());
517:       assertFalse(node1.isSwitch());
518:       assertFalse(node1.isTry());
519:       assertFalse(node1.isArrayLit());
520:       assertFalse(node1.isCase());
521:       assertFalse(node1.hasOneChild());
522:       assertFalse(node1.isStringKey());
523:       assertFalse(node1.isGetterDef());
524:       assertFalse(node1.isNumber());
525:       assertFalse(node2.isFalse());
526:       assertFalse(node2.isBreak());
527:       assertEquals((-1), node2.getCharno());
528:       assertFalse(node2.isSwitch());
529:       assertFalse(node2.isAnd());
530:       assertFalse(node2.isIn());
531:       assertFalse(node2.isInc());
532:       assertFalse(node2.isThrow());
533:       assertFalse(node2.isGetterDef());
534:       assertFalse(node2.isLabelName());
535:       assertFalse(node2.isNumber());
536:       assertFalse(node2.hasOneChild());
537:       assertFalse(node2.isArrayLit());
538:       assertEquals((-1), node2.getLineno());
539:       assertFalse(node2.isIf());
540:       assertFalse(node2.isNE());
541:       assertFalse(node2.isCase());
542:       assertFalse(node2.isWith());
543:       assertFalse(node2.isInstanceOf());
544:       assertFalse(node2.hasMoreThanOneChild());
545:       assertFalse(node2.isCatch());
546:       assertFalse(node2.isScript());
547:       assertTrue(node2.isString());
548:       assertFalse(node2.isBlock());
549:       assertFalse(node2.isTry());
550:       assertFalse(node2.isRegExp());
551:       assertFalse(node2.isHook());
552:       assertFalse(node2.isThis());
553:       assertFalse(node2.isFor());
554:       assertFalse(node2.isStringKey());
555:       assertFalse(node2.isName());
556:       assertFalse(node2.isCall());
557:       assertFalse(node2.isSetterDef());
558:       assertFalse(node2.isAdd());
559:       assertFalse(node2.isNull());
560:       assertFalse(node2.isParamList());
561:       assertEquals(40, node2.getType());
562:       assertFalse(node2.isContinue());
563:       assertFalse(node2.isDo());
564:       assertFalse(node2.isNew());
565:       assertFalse(node2.isLabel());
566:       assertFalse(node2.isAssignAdd());
567:       assertFalse(node2.isFunction());
568:       assertEquals(0, node2.getChildCount());
569:       assertFalse(node2.isDefaultCase());
570:       assertFalse(node2.isVar());
571:       assertFalse(node2.isGetElem());
572:       assertFalse(node2.isDelProp());
573:       assertFalse(node2.isAssign());
574:       assertFalse(node2.isTypeOf());
575:       assertFalse(node2.isEmpty());
576:       assertFalse(node2.isCast());
577:       assertFalse(node2.isDebugger());
578:       assertFalse(node2.isVoid());
579:       assertFalse(node2.isOr());
580:       assertEquals((-1), node2.getSourcePosition());
581:       assertFalse(node2.isTrue());
582:       assertFalse(node2.isNot());
583:       assertFalse(node2.isObjectLit());
584:       assertFalse(node2.isExprResult());
585:       assertFalse(node2.isGetProp());
586:       assertFalse(node2.isComma());
587:       assertFalse(node2.isDec());
588:       assertFalse(node2.hasChildren());
589:       assertFalse(node2.isReturn());
590:       assertFalse(node2.isWhile());
591:       assertFalse(node3.isCase());
592:       assertFalse(node3.isSwitch());
593:       assertFalse(node3.isHook());
594:       assertFalse(node3.isFalse());
595:       assertFalse(node3.isFor());
596:       assertFalse(node3.isArrayLit());
597:       assertFalse(node3.isTry());
598:       assertEquals((-1), node3.getCharno());
599:       assertFalse(node3.isDebugger());
600:       assertFalse(node3.isGetProp());
601:       assertFalse(node3.isGetterDef());
602:       assertFalse(node3.isObjectLit());
603:       assertFalse(node3.isVoid());
604:       assertFalse(node3.isDefaultCase());
605:       assertFalse(node3.isExprResult());
606:       assertFalse(node3.isComma());
607:       assertEquals(0, node3.getChildCount());
608:       assertFalse(node3.isEmpty());
609:       assertFalse(node3.isBreak());
610:       assertFalse(node3.isNull());
611:       assertFalse(node3.isCall());
612:       assertFalse(node3.isGetElem());
613:       assertFalse(node3.isVar());
614:       assertFalse(node3.isDelProp());
615:       assertFalse(node3.isName());
616:       assertFalse(node3.isAdd());
617:       assertFalse(node3.isOr());
618:       assertFalse(node3.isNew());
619:       assertFalse(node3.isTrue());
620:       assertFalse(node3.isDo());
621:       assertFalse(node3.isWhile());
622:       assertTrue(node3.isString());
623:       assertFalse(node3.isLabel());
624:       assertFalse(node3.isAssignAdd());
625:       assertEquals((-1), node3.getLineno());
626:       assertFalse(node3.isReturn());
627:       assertFalse(node3.isBlock());
628:       assertFalse(node3.isTypeOf());
629:       assertFalse(node3.isDec());
630:       assertFalse(node3.isContinue());
631:       assertFalse(node3.hasMoreThanOneChild());
632:       assertFalse(node3.isLabelName());
633:       assertFalse(node3.isAssign());
634:       assertFalse(node3.isStringKey());
635:       assertFalse(node3.hasChildren());
636:       assertFalse(node3.isParamList());
637:       assertFalse(node3.hasOneChild());
638:       assertFalse(node3.isScript());
639:       assertEquals((-1), node3.getSourcePosition());
640:       assertFalse(node3.isNumber());
641:       assertFalse(node3.isNot());
642:       assertEquals(40, node3.getType());
643:       assertFalse(node3.isAnd());
644:       assertFalse(node3.isThis());
645:       assertFalse(node3.isRegExp());
646:       assertFalse(node3.isCast());
647:       assertFalse(node3.isInstanceOf());
648:       assertFalse(node3.isCatch());
649:       assertFalse(node3.isWith());
650:       assertFalse(node3.isFunction());
651:       assertFalse(node3.isThrow());
652:       assertFalse(node3.isNE());
653:       assertFalse(node3.isIf());
654:       assertFalse(node3.isInc());
655:       assertFalse(node3.isSetterDef());
656:       assertFalse(node3.isIn());
657:       
658:       Iterable<Node> iterable0 = node3.children();
659:       assertFalse(iterable0.contains(node2));
660:       assertNotSame(node1, node0);
661:       assertSame(node2, node3);
662:       assertSame(node3, node2);
663:       assertEquals(46, Node.IS_NAMESPACE);
664:       assertEquals(12, Node.COLUMN_BITS);
665:       assertEquals(32, Node.INCRDECR_PROP);
666:       assertEquals(1, Node.DECR_FLAG);
667:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
668:       assertEquals(49, Node.DIRECT_EVAL);
669:       assertEquals(37, Node.OPT_ARG_NAME);
670:       assertEquals(15, Node.NO_SIDE_EFFECTS);
671:       assertEquals(29, Node.JSDOC_INFO_PROP);
672:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
673:       assertEquals(56, Node.CHANGE_TIME);
674:       assertEquals(54, Node.SLASH_V);
675:       assertEquals(51, Node.STATIC_SOURCE_FILE);
676:       assertEquals(52, Node.LENGTH);
677:       assertEquals(40, Node.ORIGINALNAME_PROP);
678:       assertEquals(53, Node.INPUT_ID);
679:       assertEquals(57, Node.LAST_PROP);
680:       assertEquals(47, Node.IS_DISPATCHER);
681:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
682:       assertEquals(2, Node.POST_FLAG);
683:       assertEquals(30, Node.VAR_ARGS_NAME);
684:       assertEquals(55, Node.INFERRED_FUNCTION);
685:       assertEquals(4095, Node.COLUMN_MASK);
686:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
687:       assertEquals(48, Node.DIRECTIVES);
688:       assertEquals(39, Node.EMPTY_BLOCK);
689:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
690:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
691:       assertEquals(43, Node.IS_CONSTANT_NAME);
692:       assertEquals(8, Node.FLAG_NO_THROWS);
693:       assertEquals(50, Node.FREE_CALL);
694:       assertEquals(36, Node.QUOTED_PROP);
695:       assertEquals(57, Node.REFLECTED_OBJECT);
696:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
697:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
698:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
699:       assertEquals(8, Node.FLAG_NO_THROWS);
700:       assertEquals(48, Node.DIRECTIVES);
701:       assertEquals(50, Node.FREE_CALL);
702:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
703:       assertEquals(40, Node.ORIGINALNAME_PROP);
704:       assertEquals(39, Node.EMPTY_BLOCK);
705:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
706:       assertEquals(4095, Node.COLUMN_MASK);
707:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
708:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
709:       assertEquals(43, Node.IS_CONSTANT_NAME);
710:       assertEquals(30, Node.VAR_ARGS_NAME);
711:       assertEquals(51, Node.STATIC_SOURCE_FILE);
712:       assertEquals(46, Node.IS_NAMESPACE);
713:       assertEquals(54, Node.SLASH_V);
714:       assertEquals(56, Node.CHANGE_TIME);
715:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
716:       assertEquals(47, Node.IS_DISPATCHER);
717:       assertEquals(37, Node.OPT_ARG_NAME);
718:       assertEquals(2, Node.POST_FLAG);
719:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
720:       assertEquals(29, Node.JSDOC_INFO_PROP);
721:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
722:       assertEquals(12, Node.COLUMN_BITS);
723:       assertEquals(32, Node.INCRDECR_PROP);
724:       assertEquals(1, Node.DECR_FLAG);
725:       assertEquals(36, Node.QUOTED_PROP);
726:       assertEquals(15, Node.NO_SIDE_EFFECTS);
727:       assertEquals(57, Node.LAST_PROP);
728:       assertEquals(49, Node.DIRECT_EVAL);
729:       assertEquals(53, Node.INPUT_ID);
730:       assertEquals(52, Node.LENGTH);
731:       assertEquals(55, Node.INFERRED_FUNCTION);
732:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
733:       assertEquals(57, Node.REFLECTED_OBJECT);
734:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
735:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
736:       assertEquals(54, Node.SLASH_V);
737:       assertEquals(15, Node.NO_SIDE_EFFECTS);
738:       assertEquals(49, Node.DIRECT_EVAL);
739:       assertEquals(57, Node.LAST_PROP);
740:       assertEquals(1, Node.DECR_FLAG);
741:       assertEquals(51, Node.STATIC_SOURCE_FILE);
742:       assertEquals(46, Node.IS_NAMESPACE);
743:       assertEquals(57, Node.REFLECTED_OBJECT);
744:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
745:       assertEquals(52, Node.LENGTH);
746:       assertEquals(50, Node.FREE_CALL);
747:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
748:       assertEquals(37, Node.OPT_ARG_NAME);
749:       assertEquals(56, Node.CHANGE_TIME);
750:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
751:       assertEquals(48, Node.DIRECTIVES);
752:       assertEquals(32, Node.INCRDECR_PROP);
753:       assertEquals(12, Node.COLUMN_BITS);
754:       assertEquals(4095, Node.COLUMN_MASK);
755:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
756:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
757:       assertEquals(43, Node.IS_CONSTANT_NAME);
758:       assertEquals(36, Node.QUOTED_PROP);
759:       assertEquals(53, Node.INPUT_ID);
760:       assertEquals(55, Node.INFERRED_FUNCTION);
761:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
762:       assertEquals(29, Node.JSDOC_INFO_PROP);
763:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
764:       assertEquals(8, Node.FLAG_NO_THROWS);
765:       assertEquals(2, Node.POST_FLAG);
766:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
767:       assertEquals(47, Node.IS_DISPATCHER);
768:       assertEquals(39, Node.EMPTY_BLOCK);
769:       assertEquals(40, Node.ORIGINALNAME_PROP);
770:       assertEquals(30, Node.VAR_ARGS_NAME);
771:       assertNotNull(iterable0);
772:       assertFalse(node1.equals((Object)node0));
773:       assertFalse(node1.equals((Object)node2));
774:       assertFalse(node1.equals((Object)node3));
775:       assertFalse(node2.equals((Object)node0));
776:       assertFalse(node2.equals((Object)node1));
777:       assertFalse(node3.equals((Object)node1));
778:       assertFalse(node3.equals((Object)node0));
779:       assertEquals(49, node1.getType());
780:       assertFalse(node1.isNE());
781:       assertFalse(node1.isDelProp());
782:       assertFalse(node1.isIf());
783:       assertFalse(node1.isFor());
784:       assertFalse(node1.isVoid());
785:       assertFalse(node1.isInc());
786:       assertFalse(node1.isTrue());
787:       assertFalse(node1.isDefaultCase());
788:       assertFalse(node1.isEmpty());
789:       assertFalse(node1.isIn());
790:       assertFalse(node1.isGetProp());
791:       assertFalse(node1.isSetterDef());
792:       assertFalse(node1.isBreak());
793:       assertFalse(node1.isCall());
794:       assertFalse(node1.isFalse());
795:       assertFalse(node1.isComma());
796:       assertFalse(node1.isDebugger());
797:       assertFalse(node1.isFunction());
798:       assertFalse(node1.isAnd());
799:       assertFalse(node1.isObjectLit());
800:       assertFalse(node1.isString());
801:       assertFalse(node1.isNot());
802:       assertEquals((-1), node1.getSourcePosition());
803:       assertFalse(node1.isAssignAdd());
804:       assertFalse(node1.isLabelName());
805:       assertEquals((-1), node1.getLineno());
806:       assertFalse(node1.isContinue());
807:       assertFalse(node1.isGetElem());
808:       assertFalse(node1.hasMoreThanOneChild());
809:       assertFalse(node1.isCast());
810:       assertFalse(node1.isWhile());
811:       assertFalse(node1.hasChildren());
812:       assertFalse(node1.isReturn());
813:       assertFalse(node1.isTypeOf());
814:       assertFalse(node1.isLabel());
815:       assertFalse(node1.isAssign());
816:       assertFalse(node1.isDec());
817:       assertFalse(node1.isExprResult());
818:       assertFalse(node1.isAdd());
819:       assertFalse(node1.isDo());
820:       assertFalse(node1.isNew());
821:       assertFalse(node1.isName());
822:       assertFalse(node1.isNull());
823:       assertFalse(node1.isOr());
824:       assertFalse(node1.isThis());
825:       assertTrue(node1.isThrow());
826:       assertFalse(node1.isParamList());
827:       assertFalse(node1.isVar());
828:       assertFalse(node1.isInstanceOf());
829:       assertFalse(node1.isCatch());
830:       assertEquals(0, node1.getChildCount());
831:       assertFalse(node1.isHook());
832:       assertFalse(node1.isWith());
833:       assertFalse(node1.isRegExp());
834:       assertEquals((-1), node1.getCharno());
835:       assertFalse(node1.isBlock());
836:       assertFalse(node1.isScript());
837:       assertFalse(node1.isSwitch());
838:       assertFalse(node1.isTry());
839:       assertFalse(node1.isArrayLit());
840:       assertFalse(node1.isCase());
841:       assertFalse(node1.hasOneChild());
842:       assertFalse(node1.isStringKey());
843:       assertFalse(node1.isGetterDef());
844:       assertFalse(node1.isNumber());
845:       assertFalse(node2.isFalse());
846:       assertFalse(node2.isBreak());
847:       assertEquals((-1), node2.getCharno());
848:       assertFalse(node2.isSwitch());
849:       assertFalse(node2.isAnd());
850:       assertFalse(node2.isIn());
851:       assertFalse(node2.isInc());
852:       assertFalse(node2.isThrow());
853:       assertFalse(node2.isGetterDef());
854:       assertFalse(node2.isLabelName());
855:       assertFalse(node2.isNumber());
856:       assertFalse(node2.hasOneChild());
857:       assertFalse(node2.isArrayLit());
858:       assertEquals((-1), node2.getLineno());
859:       assertFalse(node2.isIf());
860:       assertFalse(node2.isNE());
861:       assertFalse(node2.isCase());
862:       assertFalse(node2.isWith());
863:       assertFalse(node2.isInstanceOf());
864:       assertFalse(node2.hasMoreThanOneChild());
865:       assertFalse(node2.isCatch());
866:       assertFalse(node2.isScript());
867:       assertTrue(node2.isString());
868:       assertFalse(node2.isBlock());
869:       assertFalse(node2.isTry());
870:       assertFalse(node2.isRegExp());
871:       assertFalse(node2.isHook());
872:       assertFalse(node2.isThis());
873:       assertFalse(node2.isFor());
874:       assertFalse(node2.isStringKey());
875:       assertFalse(node2.isName());
876:       assertFalse(node2.isCall());
877:       assertFalse(node2.isSetterDef());
878:       assertFalse(node2.isAdd());
879:       assertFalse(node2.isNull());
880:       assertFalse(node2.isParamList());
881:       assertEquals(40, node2.getType());
882:       assertFalse(node2.isContinue());
883:       assertFalse(node2.isDo());
884:       assertFalse(node2.isNew());
885:       assertFalse(node2.isLabel());
886:       assertFalse(node2.isAssignAdd());
887:       assertFalse(node2.isFunction());
888:       assertEquals(0, node2.getChildCount());
889:       assertFalse(node2.isDefaultCase());
890:       assertFalse(node2.isVar());
891:       assertFalse(node2.isGetElem());
892:       assertFalse(node2.isDelProp());
893:       assertFalse(node2.isAssign());
894:       assertFalse(node2.isTypeOf());
895:       assertFalse(node2.isEmpty());
896:       assertFalse(node2.isCast());
897:       assertFalse(node2.isDebugger());
898:       assertFalse(node2.isVoid());
899:       assertFalse(node2.isOr());
900:       assertEquals((-1), node2.getSourcePosition());
901:       assertFalse(node2.isTrue());
902:       assertFalse(node2.isNot());
903:       assertFalse(node2.isObjectLit());
904:       assertFalse(node2.isExprResult());
905:       assertFalse(node2.isGetProp());
906:       assertFalse(node2.isComma());
907:       assertFalse(node2.isDec());
908:       assertFalse(node2.hasChildren());
909:       assertFalse(node2.isReturn());
910:       assertFalse(node2.isWhile());
911:       assertFalse(node3.isCase());
912:       assertFalse(node3.isSwitch());
913:       assertFalse(node3.isHook());
914:       assertFalse(node3.isFalse());
915:       assertFalse(node3.isFor());
916:       assertFalse(node3.isArrayLit());
917:       assertFalse(node3.isTry());
918:       assertEquals((-1), node3.getCharno());
919:       assertFalse(node3.isDebugger());
920:       assertFalse(node3.isGetProp());
921:       assertFalse(node3.isGetterDef());
922:       assertFalse(node3.isObjectLit());
923:       assertFalse(node3.isVoid());
924:       assertFalse(node3.isDefaultCase());
925:       assertFalse(node3.isExprResult());
926:       assertFalse(node3.isComma());
927:       assertEquals(0, node3.getChildCount());
928:       assertFalse(node3.isEmpty());
929:       assertFalse(node3.isBreak());
930:       assertFalse(node3.isNull());
931:       assertFalse(node3.isCall());
932:       assertFalse(node3.isGetElem());
933:       assertFalse(node3.isVar());
934:       assertFalse(node3.isDelProp());
935:       assertFalse(node3.isName());
936:       assertFalse(node3.isAdd());
937:       assertFalse(node3.isOr());
938:       assertFalse(node3.isNew());
939:       assertFalse(node3.isTrue());
940:       assertFalse(node3.isDo());
941:       assertFalse(node3.isWhile());
942:       assertTrue(node3.isString());
943:       assertFalse(node3.isLabel());
944:       assertFalse(node3.isAssignAdd());
945:       assertEquals((-1), node3.getLineno());
946:       assertFalse(node3.isReturn());
947:       assertFalse(node3.isBlock());
948:       assertFalse(node3.isTypeOf());
949:       assertFalse(node3.isDec());
950:       assertFalse(node3.isContinue());
951:       assertFalse(node3.hasMoreThanOneChild());
952:       assertFalse(node3.isLabelName());
953:       assertFalse(node3.isAssign());
954:       assertFalse(node3.isStringKey());
955:       assertFalse(node3.hasChildren());
956:       assertFalse(node3.isParamList());
957:       assertFalse(node3.hasOneChild());
958:       assertFalse(node3.isScript());
959:       assertEquals((-1), node3.getSourcePosition());
960:       assertFalse(node3.isNumber());
961:       assertFalse(node3.isNot());
962:       assertEquals(40, node3.getType());
963:       assertFalse(node3.isAnd());
964:       assertFalse(node3.isThis());
965:       assertFalse(node3.isRegExp());
966:       assertFalse(node3.isCast());
967:       assertFalse(node3.isInstanceOf());
968:       assertFalse(node3.isCatch());
969:       assertFalse(node3.isWith());
970:       assertFalse(node3.isFunction());
971:       assertFalse(node3.isThrow());
972:       assertFalse(node3.isNE());
973:       assertFalse(node3.isIf());
974:       assertFalse(node3.isInc());
975:       assertFalse(node3.isSetterDef());
976:       assertFalse(node3.isIn());
977:       
978:       boolean boolean0 = node1.isGetProp();
979:       assertFalse(boolean0);
980:       assertNotSame(node1, node0);
981:       assertEquals(46, Node.IS_NAMESPACE);
982:       assertEquals(12, Node.COLUMN_BITS);
983:       assertEquals(32, Node.INCRDECR_PROP);
984:       assertEquals(1, Node.DECR_FLAG);
985:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
986:       assertEquals(49, Node.DIRECT_EVAL);
987:       assertEquals(37, Node.OPT_ARG_NAME);
988:       assertEquals(15, Node.NO_SIDE_EFFECTS);
989:       assertEquals(29, Node.JSDOC_INFO_PROP);
990:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
991:       assertEquals(56, Node.CHANGE_TIME);
992:       assertEquals(54, Node.SLASH_V);
993:       assertEquals(51, Node.STATIC_SOURCE_FILE);
994:       assertEquals(52, Node.LENGTH);
995:       assertEquals(40, Node.ORIGINALNAME_PROP);
996:       assertEquals(53, Node.INPUT_ID);
997:       assertEquals(57, Node.LAST_PROP);
998:       assertEquals(47, Node.IS_DISPATCHER);
999:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1000:       assertEquals(2, Node.POST_FLAG);
1001:       assertEquals(30, Node.VAR_ARGS_NAME);
1002:       assertEquals(55, Node.INFERRED_FUNCTION);
1003:       assertEquals(4095, Node.COLUMN_MASK);
1004:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1005:       assertEquals(48, Node.DIRECTIVES);
1006:       assertEquals(39, Node.EMPTY_BLOCK);
1007:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1008:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1009:       assertEquals(43, Node.IS_CONSTANT_NAME);
1010:       assertEquals(8, Node.FLAG_NO_THROWS);
1011:       assertEquals(50, Node.FREE_CALL);
1012:       assertEquals(36, Node.QUOTED_PROP);
1013:       assertEquals(57, Node.REFLECTED_OBJECT);
1014:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1015:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1016:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1017:       assertFalse(node1.equals((Object)node0));
1018:       assertFalse(node1.equals((Object)node2));
1019:       assertFalse(node1.equals((Object)node3));
1020:       assertEquals(49, node1.getType());
1021:       assertFalse(node1.isNE());
1022:       assertFalse(node1.isDelProp());
1023:       assertFalse(node1.isIf());
1024:       assertFalse(node1.isFor());
1025:       assertFalse(node1.isVoid());
1026:       assertFalse(node1.isInc());
1027:       assertFalse(node1.isTrue());
1028:       assertFalse(node1.isDefaultCase());
1029:       assertFalse(node1.isEmpty());
1030:       assertFalse(node1.isIn());
1031:       assertFalse(node1.isGetProp());
1032:       assertFalse(node1.isSetterDef());
1033:       assertFalse(node1.isBreak());
1034:       assertFalse(node1.isCall());
1035:       assertFalse(node1.isFalse());
1036:       assertFalse(node1.isComma());
1037:       assertFalse(node1.isDebugger());
1038:       assertFalse(node1.isFunction());
1039:       assertFalse(node1.isAnd());
1040:       assertFalse(node1.isObjectLit());
1041:       assertFalse(node1.isString());
1042:       assertFalse(node1.isNot());
1043:       assertEquals((-1), node1.getSourcePosition());
1044:       assertFalse(node1.isAssignAdd());
1045:       assertFalse(node1.isLabelName());
1046:       assertEquals((-1), node1.getLineno());
1047:       assertFalse(node1.isContinue());
1048:       assertFalse(node1.isGetElem());
1049:       assertFalse(node1.hasMoreThanOneChild());
1050:       assertFalse(node1.isCast());
1051:       assertFalse(node1.isWhile());
1052:       assertFalse(node1.hasChildren());
1053:       assertFalse(node1.isReturn());
1054:       assertFalse(node1.isTypeOf());
1055:       assertFalse(node1.isLabel());
1056:       assertFalse(node1.isAssign());
1057:       assertFalse(node1.isDec());
1058:       assertFalse(node1.isExprResult());
1059:       assertFalse(node1.isAdd());
1060:       assertFalse(node1.isDo());
1061:       assertFalse(node1.isNew());
1062:       assertFalse(node1.isName());
1063:       assertFalse(node1.isNull());
1064:       assertFalse(node1.isOr());
1065:       assertFalse(node1.isThis());
1066:       assertTrue(node1.isThrow());
1067:       assertFalse(node1.isParamList());
1068:       assertFalse(node1.isVar());
1069:       assertFalse(node1.isInstanceOf());
1070:       assertFalse(node1.isCatch());
1071:       assertEquals(0, node1.getChildCount());
1072:       assertFalse(node1.isHook());
1073:       assertFalse(node1.isWith());
1074:       assertFalse(node1.isRegExp());
1075:       assertEquals((-1), node1.getCharno());
1076:       assertFalse(node1.isBlock());
1077:       assertFalse(node1.isScript());
1078:       assertFalse(node1.isSwitch());
1079:       assertFalse(node1.isTry());
1080:       assertFalse(node1.isArrayLit());
1081:       assertFalse(node1.isCase());
1082:       assertFalse(node1.hasOneChild());
1083:       assertFalse(node1.isStringKey());
1084:       assertFalse(node1.isGetterDef());
1085:       assertFalse(node1.isNumber());
1086:       
1087:       boolean boolean1 = node3.hasChildren();
1088:       assertFalse(boolean1);
1089:       assertNotSame(node1, node0);
1090:       assertSame(node2, node3);
1091:       assertSame(node3, node2);
1092:       assertEquals(46, Node.IS_NAMESPACE);
1093:       assertEquals(12, Node.COLUMN_BITS);
1094:       assertEquals(32, Node.INCRDECR_PROP);
1095:       assertEquals(1, Node.DECR_FLAG);
1096:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1097:       assertEquals(49, Node.DIRECT_EVAL);
1098:       assertEquals(37, Node.OPT_ARG_NAME);
1099:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1100:       assertEquals(29, Node.JSDOC_INFO_PROP);
1101:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1102:       assertEquals(56, Node.CHANGE_TIME);
1103:       assertEquals(54, Node.SLASH_V);
1104:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1105:       assertEquals(52, Node.LENGTH);
1106:       assertEquals(40, Node.ORIGINALNAME_PROP);
1107:       assertEquals(53, Node.INPUT_ID);
1108:       assertEquals(57, Node.LAST_PROP);
1109:       assertEquals(47, Node.IS_DISPATCHER);
1110:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1111:       assertEquals(2, Node.POST_FLAG);
1112:       assertEquals(30, Node.VAR_ARGS_NAME);
1113:       assertEquals(55, Node.INFERRED_FUNCTION);
1114:       assertEquals(4095, Node.COLUMN_MASK);
1115:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1116:       assertEquals(48, Node.DIRECTIVES);
1117:       assertEquals(39, Node.EMPTY_BLOCK);
1118:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1119:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1120:       assertEquals(43, Node.IS_CONSTANT_NAME);
1121:       assertEquals(8, Node.FLAG_NO_THROWS);
1122:       assertEquals(50, Node.FREE_CALL);
1123:       assertEquals(36, Node.QUOTED_PROP);
1124:       assertEquals(57, Node.REFLECTED_OBJECT);
1125:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1126:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1127:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1128:       assertEquals(8, Node.FLAG_NO_THROWS);
1129:       assertEquals(48, Node.DIRECTIVES);
1130:       assertEquals(50, Node.FREE_CALL);
1131:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1132:       assertEquals(40, Node.ORIGINALNAME_PROP);
1133:       assertEquals(39, Node.EMPTY_BLOCK);
1134:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1135:       assertEquals(4095, Node.COLUMN_MASK);
1136:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1137:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1138:       assertEquals(43, Node.IS_CONSTANT_NAME);
1139:       assertEquals(30, Node.VAR_ARGS_NAME);
1140:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1141:       assertEquals(46, Node.IS_NAMESPACE);
1142:       assertEquals(54, Node.SLASH_V);
1143:       assertEquals(56, Node.CHANGE_TIME);
1144:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1145:       assertEquals(47, Node.IS_DISPATCHER);
1146:       assertEquals(37, Node.OPT_ARG_NAME);
1147:       assertEquals(2, Node.POST_FLAG);
1148:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1149:       assertEquals(29, Node.JSDOC_INFO_PROP);
1150:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1151:       assertEquals(12, Node.COLUMN_BITS);
1152:       assertEquals(32, Node.INCRDECR_PROP);
1153:       assertEquals(1, Node.DECR_FLAG);
1154:       assertEquals(36, Node.QUOTED_PROP);
1155:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1156:       assertEquals(57, Node.LAST_PROP);
1157:       assertEquals(49, Node.DIRECT_EVAL);
1158:       assertEquals(53, Node.INPUT_ID);
1159:       assertEquals(52, Node.LENGTH);
1160:       assertEquals(55, Node.INFERRED_FUNCTION);
1161:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1162:       assertEquals(57, Node.REFLECTED_OBJECT);
1163:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1164:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1165:       assertEquals(54, Node.SLASH_V);
1166:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1167:       assertEquals(49, Node.DIRECT_EVAL);
1168:       assertEquals(57, Node.LAST_PROP);
1169:       assertEquals(1, Node.DECR_FLAG);
1170:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1171:       assertEquals(46, Node.IS_NAMESPACE);
1172:       assertEquals(57, Node.REFLECTED_OBJECT);
1173:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1174:       assertEquals(52, Node.LENGTH);
1175:       assertEquals(50, Node.FREE_CALL);
1176:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1177:       assertEquals(37, Node.OPT_ARG_NAME);
1178:       assertEquals(56, Node.CHANGE_TIME);
1179:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1180:       assertEquals(48, Node.DIRECTIVES);
1181:       assertEquals(32, Node.INCRDECR_PROP);
1182:       assertEquals(12, Node.COLUMN_BITS);
1183:       assertEquals(4095, Node.COLUMN_MASK);
1184:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1185:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1186:       assertEquals(43, Node.IS_CONSTANT_NAME);
1187:       assertEquals(36, Node.QUOTED_PROP);
1188:       assertEquals(53, Node.INPUT_ID);
1189:       assertEquals(55, Node.INFERRED_FUNCTION);
1190:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1191:       assertEquals(29, Node.JSDOC_INFO_PROP);
1192:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1193:       assertEquals(8, Node.FLAG_NO_THROWS);
1194:       assertEquals(2, Node.POST_FLAG);
1195:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1196:       assertEquals(47, Node.IS_DISPATCHER);
1197:       assertEquals(39, Node.EMPTY_BLOCK);
1198:       assertEquals(40, Node.ORIGINALNAME_PROP);
1199:       assertEquals(30, Node.VAR_ARGS_NAME);
1200:       assertFalse(node1.equals((Object)node0));
1201:       assertFalse(node1.equals((Object)node2));
1202:       assertFalse(node1.equals((Object)node3));
1203:       assertFalse(node2.equals((Object)node0));
1204:       assertFalse(node2.equals((Object)node1));
1205:       assertFalse(node3.equals((Object)node1));
1206:       assertFalse(node3.equals((Object)node0));
1207:       assertTrue(boolean1 == boolean0);
1208:       assertEquals(49, node1.getType());
1209:       assertFalse(node1.isNE());
1210:       assertFalse(node1.isDelProp());
1211:       assertFalse(node1.isIf());
1212:       assertFalse(node1.isFor());
1213:       assertFalse(node1.isVoid());
1214:       assertFalse(node1.isInc());
1215:       assertFalse(node1.isTrue());
1216:       assertFalse(node1.isDefaultCase());
1217:       assertFalse(node1.isEmpty());
1218:       assertFalse(node1.isIn());
1219:       assertFalse(node1.isGetProp());
1220:       assertFalse(node1.isSetterDef());
1221:       assertFalse(node1.isBreak());
1222:       assertFalse(node1.isCall());
1223:       assertFalse(node1.isFalse());
1224:       assertFalse(node1.isComma());
1225:       assertFalse(node1.isDebugger());
1226:       assertFalse(node1.isFunction());
1227:       assertFalse(node1.isAnd());
1228:       assertFalse(node1.isObjectLit());
1229:       assertFalse(node1.isString());
1230:       assertFalse(node1.isNot());
1231:       assertEquals((-1), node1.getSourcePosition());
1232:       assertFalse(node1.isAssignAdd());
1233:       assertFalse(node1.isLabelName());
1234:       assertEquals((-1), node1.getLineno());
1235:       assertFalse(node1.isContinue());
1236:       assertFalse(node1.isGetElem());
1237:       assertFalse(node1.hasMoreThanOneChild());
1238:       assertFalse(node1.isCast());
1239:       assertFalse(node1.isWhile());
1240:       assertFalse(node1.hasChildren());
1241:       assertFalse(node1.isReturn());
1242:       assertFalse(node1.isTypeOf());
1243:       assertFalse(node1.isLabel());
1244:       assertFalse(node1.isAssign());
1245:       assertFalse(node1.isDec());
1246:       assertFalse(node1.isExprResult());
1247:       assertFalse(node1.isAdd());
1248:       assertFalse(node1.isDo());
1249:       assertFalse(node1.isNew());
1250:       assertFalse(node1.isName());
1251:       assertFalse(node1.isNull());
1252:       assertFalse(node1.isOr());
1253:       assertFalse(node1.isThis());
1254:       assertTrue(node1.isThrow());
1255:       assertFalse(node1.isParamList());
1256:       assertFalse(node1.isVar());
1257:       assertFalse(node1.isInstanceOf());
1258:       assertFalse(node1.isCatch());
1259:       
1260:       boolean boolean2 = node2.isSwitch();
1261:       assertFalse(boolean2);
1262:       assertSame(node2, node3);
1263:       assertEquals(8, Node.FLAG_NO_THROWS);
1264:       assertEquals(48, Node.DIRECTIVES);
1265:       assertEquals(50, Node.FREE_CALL);
1266:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1267:       assertEquals(40, Node.ORIGINALNAME_PROP);
1268:       assertEquals(39, Node.EMPTY_BLOCK);
1269:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1270:       assertEquals(4095, Node.COLUMN_MASK);
1271:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1272:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1273:       assertEquals(43, Node.IS_CONSTANT_NAME);
1274:       assertEquals(30, Node.VAR_ARGS_NAME);
1275:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1276:       assertEquals(46, Node.IS_NAMESPACE);
1277:       assertEquals(54, Node.SLASH_V);
1278:       assertEquals(56, Node.CHANGE_TIME);
1279:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1280:       assertEquals(47, Node.IS_DISPATCHER);
1281:       assertEquals(37, Node.OPT_ARG_NAME);
1282:       assertEquals(2, Node.POST_FLAG);
1283:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1284:       assertEquals(29, Node.JSDOC_INFO_PROP);
1285:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1286:       assertEquals(12, Node.COLUMN_BITS);
1287:       assertEquals(32, Node.INCRDECR_PROP);
1288:       assertEquals(1, Node.DECR_FLAG);
1289:       assertEquals(36, Node.QUOTED_PROP);
1290:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1291:       assertEquals(57, Node.LAST_PROP);
1292:       assertEquals(49, Node.DIRECT_EVAL);
1293:       assertEquals(53, Node.INPUT_ID);
1294:       assertEquals(52, Node.LENGTH);
1295:       assertEquals(55, Node.INFERRED_FUNCTION);
1296:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1297:       assertEquals(57, Node.REFLECTED_OBJECT);
1298:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1299:       assertFalse(node2.equals((Object)node0));
1300:       assertFalse(node2.equals((Object)node1));
1301:       assertTrue(boolean2 == boolean0);
1302:       assertTrue(boolean2 == boolean1);
1303:       
1304:       Node node4 = node0.cloneNode();
1305:       assertNotSame(node0, node1);
1306:       assertNotSame(node0, node4);
1307:       assertNotSame(node4, node0);
1308:       assertNotSame(node4, node1);
1309:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1310:       assertEquals(32, Node.INCRDECR_PROP);
1311:       assertEquals(12, Node.COLUMN_BITS);
1312:       assertEquals(46, Node.IS_NAMESPACE);
1313:       assertEquals(56, Node.CHANGE_TIME);
1314:       assertEquals(47, Node.IS_DISPATCHER);
1315:       assertEquals(2, Node.POST_FLAG);
1316:       assertEquals(30, Node.VAR_ARGS_NAME);
1317:       assertEquals(49, Node.DIRECT_EVAL);
1318:       assertEquals(37, Node.OPT_ARG_NAME);
1319:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1320:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1321:       assertEquals(54, Node.SLASH_V);
1322:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1323:       assertEquals(50, Node.FREE_CALL);
1324:       assertEquals(1, Node.DECR_FLAG);
1325:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1326:       assertEquals(4095, Node.COLUMN_MASK);
1327:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1328:       assertEquals(43, Node.IS_CONSTANT_NAME);
1329:       assertEquals(48, Node.DIRECTIVES);
1330:       assertEquals(40, Node.ORIGINALNAME_PROP);
1331:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1332:       assertEquals(57, Node.REFLECTED_OBJECT);
1333:       assertEquals(52, Node.LENGTH);
1334:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1335:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1336:       assertEquals(57, Node.LAST_PROP);
1337:       assertEquals(36, Node.QUOTED_PROP);
1338:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1339:       assertEquals(8, Node.FLAG_NO_THROWS);
1340:       assertEquals(55, Node.INFERRED_FUNCTION);
1341:       assertEquals(39, Node.EMPTY_BLOCK);
1342:       assertEquals(29, Node.JSDOC_INFO_PROP);
1343:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1344:       assertEquals(53, Node.INPUT_ID);
1345:       assertEquals(40, Node.ORIGINALNAME_PROP);
1346:       assertEquals(50, Node.FREE_CALL);
1347:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1348:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1349:       assertEquals(52, Node.LENGTH);
1350:       assertEquals(48, Node.DIRECTIVES);
1351:       assertEquals(54, Node.SLASH_V);
1352:       assertEquals(8, Node.FLAG_NO_THROWS);
1353:       assertEquals(57, Node.REFLECTED_OBJECT);
1354:       assertEquals(1, Node.DECR_FLAG);
1355:       assertEquals(49, Node.DIRECT_EVAL);
1356:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1357:       assertEquals(4095, Node.COLUMN_MASK);
1358:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1359:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1360:       assertEquals(32, Node.INCRDECR_PROP);
1361:       assertEquals(12, Node.COLUMN_BITS);
1362:       assertEquals(29, Node.JSDOC_INFO_PROP);
1363:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1364:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1365:       assertEquals(37, Node.OPT_ARG_NAME);
1366:       assertEquals(36, Node.QUOTED_PROP);
1367:       assertEquals(46, Node.IS_NAMESPACE);
1368:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1369:       assertEquals(43, Node.IS_CONSTANT_NAME);
1370:       assertEquals(56, Node.CHANGE_TIME);
1371:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1372:       assertEquals(30, Node.VAR_ARGS_NAME);
1373:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1374:       assertEquals(55, Node.INFERRED_FUNCTION);
1375:       assertEquals(39, Node.EMPTY_BLOCK);
1376:       assertEquals(53, Node.INPUT_ID);
1377:       assertEquals(2, Node.POST_FLAG);
1378:       assertEquals(57, Node.LAST_PROP);
1379:       assertEquals(47, Node.IS_DISPATCHER);
1380:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1381:       assertEquals(0, nodeArray0.length);
1382:       assertNotNull(node4);
1383:       assertFalse(node0.equals((Object)node3));
1384:       assertFalse(node0.equals((Object)node1));
1385:       assertFalse(node0.equals((Object)node2));
1386:       assertFalse(node4.equals((Object)node2));
1387:       assertFalse(node4.equals((Object)node3));
1388:       assertFalse(node4.equals((Object)node0));
1389:       assertFalse(node4.equals((Object)node1));
1390:       
1391:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
1392:       assertNotNull(node_SideEffectFlags0);
1393:       
1394:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
1395:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1396:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1397:       assertNotNull(node_SideEffectFlags1);
1398:       
1399:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
1400:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1401:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1402:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1403:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1404:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1405:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1406:       assertNotNull(node_SideEffectFlags2);
1407:       
1408:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
1409:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1410:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1411:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1412:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1413:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1414:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1415:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1416:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1417:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1418:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1419:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1420:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1421:       assertNotNull(node_SideEffectFlags3);
1422:       
1423:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
1424:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1425:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1426:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1427:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1428:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1429:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1430:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1431:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1432:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1433:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1434:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1435:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1436:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1437:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1438:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1439:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1440:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1441:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1442:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1443:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1444:       assertNotNull(node_SideEffectFlags4);
1445:       
1446:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
1447:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1448:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1449:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1450:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1451:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1452:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1453:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1454:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1455:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1456:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1457:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1458:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1459:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1460:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1461:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1462:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1463:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1464:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1465:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1466:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1467:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1468:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1469:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1470:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1471:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
1472:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
1473:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
1474:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
1475:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
1476:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
1477:       assertNotNull(node_SideEffectFlags5);
1478:       
1479:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setMutatesGlobalState();
1480:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
1481:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
1482:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
1483:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
1484:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
1485:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
1486:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1487:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1488:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1489:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1490:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1491:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1492:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1493:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1494:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1495:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1496:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1497:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1498:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1499:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1500:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1501:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1502:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
1503:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1504:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1505:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1506:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1507:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
1508:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1509:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1510:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
1511:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1512:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1513:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1514:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1515:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
1516:       assertNotNull(node_SideEffectFlags6);
1517:       
1518:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setReturnsTainted();
1519:       assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
1520:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
1521:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
1522:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
1523:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
1524:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
1525:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
1526:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
1527:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
1528:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
1529:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
1530:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
1531:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
1532:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
1533:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1534:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1535:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1536:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1537:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1538:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1539:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1540:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1541:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1542:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1543:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
1544:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1545:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1546:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1547:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1548:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1549:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1550:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1551:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
1552:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1553:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
1554:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1555:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1556:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1557:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
1558:       assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
1559:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1560:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1561:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
1562:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1563:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1564:       assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
1565:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1566:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1567:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
1568:       assertNotNull(node_SideEffectFlags7);
1569:       
1570:       Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags7.setMutatesArguments();
1571:       assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
1572:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
1573:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
1574:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
1575:       assertSame(node_SideEffectFlags6, node_SideEffectFlags8);
1576:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
1577:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
1578:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
1579:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
1580:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
1581:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
1582:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
1583:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
1584:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
1585:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
1586:       assertSame(node_SideEffectFlags7, node_SideEffectFlags8);
1587:       assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
1588:       assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
1589:       assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
1590:       assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
1591:       assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
1592:       assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
1593:       assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
1594:       assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
1595:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1596:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1597:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1598:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1599:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1600:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1601:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1602:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1603:       assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
1604:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1605:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1606:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1607:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
1608:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1609:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1610:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1611:       assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
1612:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1613:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1614:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1615:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1616:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
1617:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1618:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
1619:       assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
1620:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1621:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1622:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1623:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
1624:       assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
1625:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1626:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1627:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
1628:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1629:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1630:       assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
1631:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1632:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1633:       assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
1634:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
1635:       assertNotNull(node_SideEffectFlags8);
1636:       
1637:       Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags2.setMutatesGlobalState();
1638:       assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
1639:       assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
1640:       assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
1641:       assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
1642:       assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
1643:       assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
1644:       assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
1645:       assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
1646:       assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
1647:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1648:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1649:       assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
1650:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1651:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1652:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1653:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1654:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1655:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1656:       assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
1657:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1658:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1659:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1660:       assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
1661:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
1662:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1663:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1664:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1665:       assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
1666:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1667:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1668:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1669:       assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
1670:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1671:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
1672:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1673:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
1674:       assertNotNull(node_SideEffectFlags9);
1675:       
1676:       Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags0.setMutatesArguments();
1677:       assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
1678:       assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
1679:       assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
1680:       assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
1681:       assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
1682:       assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
1683:       assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
1684:       assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
1685:       assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
1686:       assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
1687:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1688:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1689:       assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
1690:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1691:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1692:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1693:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1694:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1695:       assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
1696:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1697:       assertNotNull(node_SideEffectFlags10);
1698:       
1699:       Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags10.setMutatesGlobalState();
1700:       assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
1701:       assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
1702:       assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
1703:       assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
1704:       assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
1705:       assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
1706:       assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
1707:       assertSame(node_SideEffectFlags10, node_SideEffectFlags11);
1708:       assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
1709:       assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
1710:       assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
1711:       assertSame(node_SideEffectFlags11, node_SideEffectFlags4);
1712:       assertSame(node_SideEffectFlags11, node_SideEffectFlags8);
1713:       assertSame(node_SideEffectFlags11, node_SideEffectFlags7);
1714:       assertSame(node_SideEffectFlags11, node_SideEffectFlags1);
1715:       assertSame(node_SideEffectFlags11, node_SideEffectFlags2);
1716:       assertSame(node_SideEffectFlags11, node_SideEffectFlags0);
1717:       assertSame(node_SideEffectFlags11, node_SideEffectFlags3);
1718:       assertSame(node_SideEffectFlags11, node_SideEffectFlags6);
1719:       assertSame(node_SideEffectFlags11, node_SideEffectFlags10);
1720:       assertSame(node_SideEffectFlags11, node_SideEffectFlags5);
1721:       assertSame(node_SideEffectFlags11, node_SideEffectFlags9);
1722:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1723:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1724:       assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
1725:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1726:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1727:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1728:       assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
1729:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1730:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1731:       assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
1732:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1733:       assertNotNull(node_SideEffectFlags11);
1734:       
1735:       Node node5 = new Node(48, node1, node0);
1736:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1737:       assertEquals(32, Node.INCRDECR_PROP);
1738:       assertEquals(12, Node.COLUMN_BITS);
1739:       assertEquals(46, Node.IS_NAMESPACE);
1740:       assertEquals(56, Node.CHANGE_TIME);
1741:       assertEquals(47, Node.IS_DISPATCHER);
1742:       assertEquals(2, Node.POST_FLAG);
1743:       assertEquals(30, Node.VAR_ARGS_NAME);
1744:       assertEquals(49, Node.DIRECT_EVAL);
1745:       assertEquals(37, Node.OPT_ARG_NAME);
1746:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1747:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1748:       assertEquals(54, Node.SLASH_V);
1749:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1750:       assertEquals(50, Node.FREE_CALL);
1751:       assertEquals(1, Node.DECR_FLAG);
1752:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1753:       assertEquals(4095, Node.COLUMN_MASK);
1754:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1755:       assertEquals(43, Node.IS_CONSTANT_NAME);
1756:       assertEquals(48, Node.DIRECTIVES);
1757:       assertEquals(40, Node.ORIGINALNAME_PROP);
1758:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1759:       assertEquals(57, Node.REFLECTED_OBJECT);
1760:       assertEquals(52, Node.LENGTH);
1761:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1762:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1763:       assertEquals(57, Node.LAST_PROP);
1764:       assertEquals(36, Node.QUOTED_PROP);
1765:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1766:       assertEquals(8, Node.FLAG_NO_THROWS);
1767:       assertEquals(55, Node.INFERRED_FUNCTION);
1768:       assertEquals(39, Node.EMPTY_BLOCK);
1769:       assertEquals(29, Node.JSDOC_INFO_PROP);
1770:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1771:       assertEquals(53, Node.INPUT_ID);
1772:       assertEquals(46, Node.IS_NAMESPACE);
1773:       assertEquals(12, Node.COLUMN_BITS);
1774:       assertEquals(32, Node.INCRDECR_PROP);
1775:       assertEquals(1, Node.DECR_FLAG);
1776:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1777:       assertEquals(49, Node.DIRECT_EVAL);
1778:       assertEquals(37, Node.OPT_ARG_NAME);
1779:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1780:       assertEquals(29, Node.JSDOC_INFO_PROP);
1781:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1782:       assertEquals(56, Node.CHANGE_TIME);
1783:       assertEquals(54, Node.SLASH_V);
1784:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1785:       assertEquals(52, Node.LENGTH);
1786:       assertEquals(40, Node.ORIGINALNAME_PROP);
1787:       assertEquals(53, Node.INPUT_ID);
1788:       assertEquals(57, Node.LAST_PROP);
1789:       assertEquals(47, Node.IS_DISPATCHER);
1790:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1791:       assertEquals(2, Node.POST_FLAG);
1792:       assertEquals(30, Node.VAR_ARGS_NAME);
1793:       assertEquals(55, Node.INFERRED_FUNCTION);
1794:       assertEquals(4095, Node.COLUMN_MASK);
1795:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1796:       assertEquals(48, Node.DIRECTIVES);
1797:       assertEquals(39, Node.EMPTY_BLOCK);
1798:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1799:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1800:       assertEquals(43, Node.IS_CONSTANT_NAME);
1801:       assertEquals(8, Node.FLAG_NO_THROWS);
1802:       assertEquals(50, Node.FREE_CALL);
1803:       assertEquals(36, Node.QUOTED_PROP);
1804:       assertEquals(57, Node.REFLECTED_OBJECT);
1805:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1806:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1807:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1808:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1809:       assertEquals(37, Node.OPT_ARG_NAME);
1810:       assertEquals(2, Node.POST_FLAG);
1811:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1812:       assertEquals(29, Node.JSDOC_INFO_PROP);
1813:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1814:       assertEquals(1, Node.DECR_FLAG);
1815:       assertEquals(32, Node.INCRDECR_PROP);
1816:       assertEquals(30, Node.VAR_ARGS_NAME);
1817:       assertEquals(57, Node.LAST_PROP);
1818:       assertEquals(47, Node.IS_DISPATCHER);
1819:       assertEquals(12, Node.COLUMN_BITS);
1820:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1821:       assertEquals(36, Node.QUOTED_PROP);
1822:       assertEquals(52, Node.LENGTH);
1823:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1824:       assertEquals(53, Node.INPUT_ID);
1825:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1826:       assertEquals(55, Node.INFERRED_FUNCTION);
1827:       assertEquals(49, Node.DIRECT_EVAL);
1828:       assertEquals(56, Node.CHANGE_TIME);
1829:       assertEquals(57, Node.REFLECTED_OBJECT);
1830:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1831:       assertEquals(8, Node.FLAG_NO_THROWS);
1832:       assertEquals(39, Node.EMPTY_BLOCK);
1833:       assertEquals(48, Node.DIRECTIVES);
1834:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1835:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1836:       assertEquals(4095, Node.COLUMN_MASK);
1837:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1838:       assertEquals(40, Node.ORIGINALNAME_PROP);
1839:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1840:       assertEquals(50, Node.FREE_CALL);
1841:       assertEquals(43, Node.IS_CONSTANT_NAME);
1842:       assertEquals(46, Node.IS_NAMESPACE);
1843:       assertEquals(54, Node.SLASH_V);
1844:       assertEquals(0, nodeArray0.length);
1845:       assertNotNull(node5);
1846:       assertFalse(node0.equals((Object)node3));
1847:       assertFalse(node0.equals((Object)node1));
1848:       assertFalse(node0.equals((Object)node2));
1849:       assertFalse(node0.equals((Object)node4));
1850:       assertFalse(node1.equals((Object)node0));
1851:       assertFalse(node1.equals((Object)node4));
1852:       assertFalse(node1.equals((Object)node2));
1853:       assertFalse(node1.equals((Object)node3));
1854:       assertFalse(node5.equals((Object)node4));
1855:       assertFalse(node5.equals((Object)node0));
1856:       assertFalse(node5.equals((Object)node3));
1857:       assertFalse(node5.equals((Object)node1));
1858:       assertFalse(node5.equals((Object)node2));
1859:       
1860:       boolean boolean3 = node1.hasOneChild();
1861:       assertFalse(boolean3);
1862:       assertNotSame(node1, node0);
1863:       assertNotSame(node1, node5);
1864:       assertNotSame(node1, node4);
1865:       assertEquals(46, Node.IS_NAMESPACE);
1866:       assertEquals(12, Node.COLUMN_BITS);
1867:       assertEquals(32, Node.INCRDECR_PROP);
1868:       assertEquals(1, Node.DECR_FLAG);
1869:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1870:       assertEquals(49, Node.DIRECT_EVAL);
1871:       assertEquals(37, Node.OPT_ARG_NAME);
1872:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1873:       assertEquals(29, Node.JSDOC_INFO_PROP);
1874:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1875:       assertEquals(56, Node.CHANGE_TIME);
1876:       assertEquals(54, Node.SLASH_V);
1877:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1878:       assertEquals(52, Node.LENGTH);
1879:       assertEquals(40, Node.ORIGINALNAME_PROP);
1880:       assertEquals(53, Node.INPUT_ID);
1881:       assertEquals(57, Node.LAST_PROP);
1882:       assertEquals(47, Node.IS_DISPATCHER);
1883:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1884:       assertEquals(2, Node.POST_FLAG);
1885:       assertEquals(30, Node.VAR_ARGS_NAME);
1886:       assertEquals(55, Node.INFERRED_FUNCTION);
1887:       assertEquals(4095, Node.COLUMN_MASK);
1888:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1889:       assertEquals(48, Node.DIRECTIVES);
1890:       assertEquals(39, Node.EMPTY_BLOCK);
1891:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1892:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1893:       assertEquals(43, Node.IS_CONSTANT_NAME);
1894:       assertEquals(8, Node.FLAG_NO_THROWS);
1895:       assertEquals(50, Node.FREE_CALL);
1896:       assertEquals(36, Node.QUOTED_PROP);
1897:       assertEquals(57, Node.REFLECTED_OBJECT);
1898:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1899:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1900:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1901:       assertFalse(node1.equals((Object)node0));
1902:       assertFalse(node1.equals((Object)node5));
1903:       assertFalse(node1.equals((Object)node4));
1904:       assertFalse(node1.equals((Object)node2));
1905:       assertFalse(node1.equals((Object)node3));
1906:       assertTrue(boolean3 == boolean2);
1907:       assertTrue(boolean3 == boolean1);
1908:       assertTrue(boolean3 == boolean0);
1909:       
1910:       boolean boolean4 = node5.isEquivalentToShallow(node0);
1911:       assertFalse(boolean4);
1912:       assertNotSame(node0, node1);
1913:       assertNotSame(node0, node5);
1914:       assertNotSame(node0, node4);
1915:       assertNotSame(node1, node0);
1916:       assertNotSame(node1, node5);
1917:       assertNotSame(node1, node4);
1918:       assertNotSame(node5, node4);
1919:       assertNotSame(node5, node0);
1920:       assertNotSame(node5, node1);
1921:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1922:       assertEquals(32, Node.INCRDECR_PROP);
1923:       assertEquals(12, Node.COLUMN_BITS);
1924:       assertEquals(46, Node.IS_NAMESPACE);
1925:       assertEquals(56, Node.CHANGE_TIME);
1926:       assertEquals(47, Node.IS_DISPATCHER);
1927:       assertEquals(2, Node.POST_FLAG);
1928:       assertEquals(30, Node.VAR_ARGS_NAME);
1929:       assertEquals(49, Node.DIRECT_EVAL);
1930:       assertEquals(37, Node.OPT_ARG_NAME);
1931:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1932:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1933:       assertEquals(54, Node.SLASH_V);
1934:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1935:       assertEquals(50, Node.FREE_CALL);
1936:       assertEquals(1, Node.DECR_FLAG);
1937:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1938:       assertEquals(4095, Node.COLUMN_MASK);
1939:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1940:       assertEquals(43, Node.IS_CONSTANT_NAME);
1941:       assertEquals(48, Node.DIRECTIVES);
1942:       assertEquals(40, Node.ORIGINALNAME_PROP);
1943:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1944:       assertEquals(57, Node.REFLECTED_OBJECT);
1945:       assertEquals(52, Node.LENGTH);
1946:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1947:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1948:       assertEquals(57, Node.LAST_PROP);
1949:       assertEquals(36, Node.QUOTED_PROP);
1950:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1951:       assertEquals(8, Node.FLAG_NO_THROWS);
1952:       assertEquals(55, Node.INFERRED_FUNCTION);
1953:       assertEquals(39, Node.EMPTY_BLOCK);
1954:       assertEquals(29, Node.JSDOC_INFO_PROP);
1955:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1956:       assertEquals(53, Node.INPUT_ID);
1957:       assertEquals(46, Node.IS_NAMESPACE);
1958:       assertEquals(12, Node.COLUMN_BITS);
1959:       assertEquals(32, Node.INCRDECR_PROP);
1960:       assertEquals(1, Node.DECR_FLAG);
1961:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1962:       assertEquals(49, Node.DIRECT_EVAL);
1963:       assertEquals(37, Node.OPT_ARG_NAME);
1964:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1965:       assertEquals(29, Node.JSDOC_INFO_PROP);
1966:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1967:       assertEquals(56, Node.CHANGE_TIME);
1968:       assertEquals(54, Node.SLASH_V);
1969:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1970:       assertEquals(52, Node.LENGTH);
1971:       assertEquals(40, Node.ORIGINALNAME_PROP);
1972:       assertEquals(53, Node.INPUT_ID);
1973:       assertEquals(57, Node.LAST_PROP);
1974:       assertEquals(47, Node.IS_DISPATCHER);
1975:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1976:       assertEquals(2, Node.POST_FLAG);
1977:       assertEquals(30, Node.VAR_ARGS_NAME);
1978:       assertEquals(55, Node.INFERRED_FUNCTION);
1979:       assertEquals(4095, Node.COLUMN_MASK);
1980:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1981:       assertEquals(48, Node.DIRECTIVES);
1982:       assertEquals(39, Node.EMPTY_BLOCK);
1983:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1984:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1985:       assertEquals(43, Node.IS_CONSTANT_NAME);
1986:       assertEquals(8, Node.FLAG_NO_THROWS);
1987:       assertEquals(50, Node.FREE_CALL);
1988:       assertEquals(36, Node.QUOTED_PROP);
1989:       assertEquals(57, Node.REFLECTED_OBJECT);
1990:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1991:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1992:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1993:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1994:       assertEquals(37, Node.OPT_ARG_NAME);
1995:       assertEquals(2, Node.POST_FLAG);
1996:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1997:       assertEquals(29, Node.JSDOC_INFO_PROP);
1998:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1999:       assertEquals(1, Node.DECR_FLAG);
2000:       assertEquals(32, Node.INCRDECR_PROP);
2001:       assertEquals(30, Node.VAR_ARGS_NAME);
2002:       assertEquals(57, Node.LAST_PROP);
2003:       assertEquals(47, Node.IS_DISPATCHER);
2004:       assertEquals(12, Node.COLUMN_BITS);
2005:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2006:       assertEquals(36, Node.QUOTED_PROP);
2007:       assertEquals(52, Node.LENGTH);
2008:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2009:       assertEquals(53, Node.INPUT_ID);
2010:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2011:       assertEquals(55, Node.INFERRED_FUNCTION);
2012:       assertEquals(49, Node.DIRECT_EVAL);
2013:       assertEquals(56, Node.CHANGE_TIME);
2014:       assertEquals(57, Node.REFLECTED_OBJECT);
2015:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2016:       assertEquals(8, Node.FLAG_NO_THROWS);
2017:       assertEquals(39, Node.EMPTY_BLOCK);
2018:       assertEquals(48, Node.DIRECTIVES);
2019:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2020:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2021:       assertEquals(4095, Node.COLUMN_MASK);
2022:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2023:       assertEquals(40, Node.ORIGINALNAME_PROP);
2024:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2025:       assertEquals(50, Node.FREE_CALL);
2026:       assertEquals(43, Node.IS_CONSTANT_NAME);
2027:       assertEquals(46, Node.IS_NAMESPACE);
2028:       assertEquals(54, Node.SLASH_V);
2029:       assertEquals(0, nodeArray0.length);
2030:       assertFalse(node0.equals((Object)node3));
2031:       assertFalse(node0.equals((Object)node1));
2032:       assertFalse(node0.equals((Object)node5));
2033:       assertFalse(node0.equals((Object)node2));
2034:       assertFalse(node0.equals((Object)node4));
2035:       assertFalse(node1.equals((Object)node0));
2036:       assertFalse(node1.equals((Object)node5));
2037:       assertFalse(node1.equals((Object)node4));
2038:       assertFalse(node1.equals((Object)node2));
2039:       assertFalse(node1.equals((Object)node3));
2040:       assertFalse(node5.equals((Object)node4));
2041:       assertFalse(node5.equals((Object)node0));
2042:       assertFalse(node5.equals((Object)node3));
2043:       assertFalse(node5.equals((Object)node1));
2044:       assertFalse(node5.equals((Object)node2));
2045:       assertTrue(boolean4 == boolean0);
2046:       assertTrue(boolean4 == boolean2);
2047:       assertTrue(boolean4 == boolean3);
2048:       assertTrue(boolean4 == boolean1);
2049:       
2050:       boolean boolean5 = node0.isEquivalentTo(node2, false, false, true);
2051:       assertFalse(boolean5);
2052:       assertNotSame(node0, node1);
2053:       assertNotSame(node0, node5);
2054:       assertNotSame(node0, node4);
2055:       assertSame(node2, node3);
2056:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2057:       assertEquals(32, Node.INCRDECR_PROP);
2058:       assertEquals(12, Node.COLUMN_BITS);
2059:       assertEquals(46, Node.IS_NAMESPACE);
2060:       assertEquals(56, Node.CHANGE_TIME);
2061:       assertEquals(47, Node.IS_DISPATCHER);
2062:       assertEquals(2, Node.POST_FLAG);
2063:       assertEquals(30, Node.VAR_ARGS_NAME);
2064:       assertEquals(49, Node.DIRECT_EVAL);
2065:       assertEquals(37, Node.OPT_ARG_NAME);
2066:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2067:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2068:       assertEquals(54, Node.SLASH_V);
2069:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2070:       assertEquals(50, Node.FREE_CALL);
2071:       assertEquals(1, Node.DECR_FLAG);
2072:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2073:       assertEquals(4095, Node.COLUMN_MASK);
2074:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2075:       assertEquals(43, Node.IS_CONSTANT_NAME);
2076:       assertEquals(48, Node.DIRECTIVES);
2077:       assertEquals(40, Node.ORIGINALNAME_PROP);
2078:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2079:       assertEquals(57, Node.REFLECTED_OBJECT);
2080:       assertEquals(52, Node.LENGTH);
2081:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2082:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2083:       assertEquals(57, Node.LAST_PROP);
2084:       assertEquals(36, Node.QUOTED_PROP);
2085:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2086:       assertEquals(8, Node.FLAG_NO_THROWS);
2087:       assertEquals(55, Node.INFERRED_FUNCTION);
2088:       assertEquals(39, Node.EMPTY_BLOCK);
2089:       assertEquals(29, Node.JSDOC_INFO_PROP);
2090:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2091:       assertEquals(53, Node.INPUT_ID);
2092:       assertEquals(8, Node.FLAG_NO_THROWS);
2093:       assertEquals(48, Node.DIRECTIVES);
2094:       assertEquals(50, Node.FREE_CALL);
2095:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2096:       assertEquals(40, Node.ORIGINALNAME_PROP);
2097:       assertEquals(39, Node.EMPTY_BLOCK);
2098:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2099:       assertEquals(4095, Node.COLUMN_MASK);
2100:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2101:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2102:       assertEquals(43, Node.IS_CONSTANT_NAME);
2103:       assertEquals(30, Node.VAR_ARGS_NAME);
2104:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2105:       assertEquals(46, Node.IS_NAMESPACE);
2106:       assertEquals(54, Node.SLASH_V);
2107:       assertEquals(56, Node.CHANGE_TIME);
2108:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2109:       assertEquals(47, Node.IS_DISPATCHER);
2110:       assertEquals(37, Node.OPT_ARG_NAME);
2111:       assertEquals(2, Node.POST_FLAG);
2112:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2113:       assertEquals(29, Node.JSDOC_INFO_PROP);
2114:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2115:       assertEquals(12, Node.COLUMN_BITS);
2116:       assertEquals(32, Node.INCRDECR_PROP);
2117:       assertEquals(1, Node.DECR_FLAG);
2118:       assertEquals(36, Node.QUOTED_PROP);
2119:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2120:       assertEquals(57, Node.LAST_PROP);
2121:       assertEquals(49, Node.DIRECT_EVAL);
2122:       assertEquals(53, Node.INPUT_ID);
2123:       assertEquals(52, Node.LENGTH);
2124:       assertEquals(55, Node.INFERRED_FUNCTION);
2125:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2126:       assertEquals(57, Node.REFLECTED_OBJECT);
2127:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2128:       assertEquals(0, nodeArray0.length);
2129:       assertFalse(node0.equals((Object)node3));
2130:       assertFalse(node0.equals((Object)node1));
2131:       assertFalse(node0.equals((Object)node5));
2132:       assertFalse(node0.equals((Object)node2));
2133:       assertFalse(node0.equals((Object)node4));
2134:       assertFalse(node2.equals((Object)node4));
2135:       assertFalse(node2.equals((Object)node0));
2136:       assertFalse(node2.equals((Object)node1));
2137:       assertFalse(node2.equals((Object)node5));
2138:       assertTrue(boolean5 == boolean2);
2139:       assertTrue(boolean5 == boolean0);
2140:       assertTrue(boolean5 == boolean4);
2141:       assertTrue(boolean5 == boolean1);
2142:       assertTrue(boolean5 == boolean3);
2143:       
2144:       Node node6 = node3.useSourceInfoFrom(node0);
2145:       assertNotSame(node0, node1);
2146:       assertNotSame(node0, node5);
2147:       assertNotSame(node0, node4);
2148:       assertNotSame(node1, node0);
2149:       assertNotSame(node1, node5);
2150:       assertNotSame(node1, node4);
2151:       assertSame(node2, node3);
2152:       assertSame(node2, node6);
2153:       assertSame(node3, node2);
2154:       assertSame(node3, node6);
2155:       assertSame(node6, node3);
2156:       assertSame(node6, node2);
2157:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2158:       assertEquals(32, Node.INCRDECR_PROP);
2159:       assertEquals(12, Node.COLUMN_BITS);
2160:       assertEquals(46, Node.IS_NAMESPACE);
2161:       assertEquals(56, Node.CHANGE_TIME);
2162:       assertEquals(47, Node.IS_DISPATCHER);
2163:       assertEquals(2, Node.POST_FLAG);
2164:       assertEquals(30, Node.VAR_ARGS_NAME);
2165:       assertEquals(49, Node.DIRECT_EVAL);
2166:       assertEquals(37, Node.OPT_ARG_NAME);
2167:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2168:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2169:       assertEquals(54, Node.SLASH_V);
2170:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2171:       assertEquals(50, Node.FREE_CALL);
2172:       assertEquals(1, Node.DECR_FLAG);
2173:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2174:       assertEquals(4095, Node.COLUMN_MASK);
2175:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2176:       assertEquals(43, Node.IS_CONSTANT_NAME);
2177:       assertEquals(48, Node.DIRECTIVES);
2178:       assertEquals(40, Node.ORIGINALNAME_PROP);
2179:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2180:       assertEquals(57, Node.REFLECTED_OBJECT);
2181:       assertEquals(52, Node.LENGTH);
2182:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2183:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2184:       assertEquals(57, Node.LAST_PROP);
2185:       assertEquals(36, Node.QUOTED_PROP);
2186:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2187:       assertEquals(8, Node.FLAG_NO_THROWS);
2188:       assertEquals(55, Node.INFERRED_FUNCTION);
2189:       assertEquals(39, Node.EMPTY_BLOCK);
2190:       assertEquals(29, Node.JSDOC_INFO_PROP);
2191:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2192:       assertEquals(53, Node.INPUT_ID);
2193:       assertEquals(46, Node.IS_NAMESPACE);
2194:       assertEquals(12, Node.COLUMN_BITS);
2195:       assertEquals(32, Node.INCRDECR_PROP);
2196:       assertEquals(1, Node.DECR_FLAG);
2197:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2198:       assertEquals(49, Node.DIRECT_EVAL);
2199:       assertEquals(37, Node.OPT_ARG_NAME);
2200:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2201:       assertEquals(29, Node.JSDOC_INFO_PROP);
2202:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2203:       assertEquals(56, Node.CHANGE_TIME);
2204:       assertEquals(54, Node.SLASH_V);
2205:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2206:       assertEquals(52, Node.LENGTH);
2207:       assertEquals(40, Node.ORIGINALNAME_PROP);
2208:       assertEquals(53, Node.INPUT_ID);
2209:       assertEquals(57, Node.LAST_PROP);
2210:       assertEquals(47, Node.IS_DISPATCHER);
2211:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2212:       assertEquals(2, Node.POST_FLAG);
2213:       assertEquals(30, Node.VAR_ARGS_NAME);
2214:       assertEquals(55, Node.INFERRED_FUNCTION);
2215:       assertEquals(4095, Node.COLUMN_MASK);
2216:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2217:       assertEquals(48, Node.DIRECTIVES);
2218:       assertEquals(39, Node.EMPTY_BLOCK);
2219:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2220:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2221:       assertEquals(43, Node.IS_CONSTANT_NAME);
2222:       assertEquals(8, Node.FLAG_NO_THROWS);
2223:       assertEquals(50, Node.FREE_CALL);
2224:       assertEquals(36, Node.QUOTED_PROP);
2225:       assertEquals(57, Node.REFLECTED_OBJECT);
2226:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2227:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2228:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2229:       assertEquals(8, Node.FLAG_NO_THROWS);
2230:       assertEquals(48, Node.DIRECTIVES);
2231:       assertEquals(50, Node.FREE_CALL);
2232:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2233:       assertEquals(40, Node.ORIGINALNAME_PROP);
2234:       assertEquals(39, Node.EMPTY_BLOCK);
2235:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2236:       assertEquals(4095, Node.COLUMN_MASK);
2237:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2238:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2239:       assertEquals(43, Node.IS_CONSTANT_NAME);
2240:       assertEquals(30, Node.VAR_ARGS_NAME);
2241:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2242:       assertEquals(46, Node.IS_NAMESPACE);
2243:       assertEquals(54, Node.SLASH_V);
2244:       assertEquals(56, Node.CHANGE_TIME);
2245:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2246:       assertEquals(47, Node.IS_DISPATCHER);
2247:       assertEquals(37, Node.OPT_ARG_NAME);
2248:       assertEquals(2, Node.POST_FLAG);
2249:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2250:       assertEquals(29, Node.JSDOC_INFO_PROP);
2251:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2252:       assertEquals(12, Node.COLUMN_BITS);
2253:       assertEquals(32, Node.INCRDECR_PROP);
2254:       assertEquals(1, Node.DECR_FLAG);
2255:       assertEquals(36, Node.QUOTED_PROP);
2256:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2257:       assertEquals(57, Node.LAST_PROP);
2258:       assertEquals(49, Node.DIRECT_EVAL);
2259:       assertEquals(53, Node.INPUT_ID);
2260:       assertEquals(52, Node.LENGTH);
2261:       assertEquals(55, Node.INFERRED_FUNCTION);
2262:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2263:       assertEquals(57, Node.REFLECTED_OBJECT);
2264:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2265:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2266:       assertEquals(54, Node.SLASH_V);
2267:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2268:       assertEquals(49, Node.DIRECT_EVAL);
2269:       assertEquals(57, Node.LAST_PROP);
2270:       assertEquals(1, Node.DECR_FLAG);
2271:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2272:       assertEquals(46, Node.IS_NAMESPACE);
2273:       assertEquals(57, Node.REFLECTED_OBJECT);
2274:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2275:       assertEquals(52, Node.LENGTH);
2276:       assertEquals(50, Node.FREE_CALL);
2277:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2278:       assertEquals(37, Node.OPT_ARG_NAME);
2279:       assertEquals(56, Node.CHANGE_TIME);
2280:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2281:       assertEquals(48, Node.DIRECTIVES);
2282:       assertEquals(32, Node.INCRDECR_PROP);
2283:       assertEquals(12, Node.COLUMN_BITS);
2284:       assertEquals(4095, Node.COLUMN_MASK);
2285:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2286:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2287:       assertEquals(43, Node.IS_CONSTANT_NAME);
2288:       assertEquals(36, Node.QUOTED_PROP);
2289:       assertEquals(53, Node.INPUT_ID);
2290:       assertEquals(55, Node.INFERRED_FUNCTION);
2291:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2292:       assertEquals(29, Node.JSDOC_INFO_PROP);
2293:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2294:       assertEquals(8, Node.FLAG_NO_THROWS);
2295:       assertEquals(2, Node.POST_FLAG);
2296:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2297:       assertEquals(47, Node.IS_DISPATCHER);
2298:       assertEquals(39, Node.EMPTY_BLOCK);
2299:       assertEquals(40, Node.ORIGINALNAME_PROP);
2300:       assertEquals(30, Node.VAR_ARGS_NAME);
2301:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2302:       assertEquals(29, Node.JSDOC_INFO_PROP);
2303:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2304:       assertEquals(43, Node.IS_CONSTANT_NAME);
2305:       assertEquals(56, Node.CHANGE_TIME);
2306:       assertEquals(36, Node.QUOTED_PROP);
2307:       assertEquals(37, Node.OPT_ARG_NAME);
2308:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2309:       assertEquals(12, Node.COLUMN_BITS);
2310:       assertEquals(4095, Node.COLUMN_MASK);
2311:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2312:       assertEquals(46, Node.IS_NAMESPACE);
2313:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2314:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2315:       assertEquals(1, Node.DECR_FLAG);
2316:       assertEquals(32, Node.INCRDECR_PROP);
2317:       assertEquals(40, Node.ORIGINALNAME_PROP);
2318:       assertEquals(57, Node.REFLECTED_OBJECT);
2319:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2320:       assertEquals(50, Node.FREE_CALL);
2321:       assertEquals(52, Node.LENGTH);
2322:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2323:       assertEquals(54, Node.SLASH_V);
2324:       assertEquals(49, Node.DIRECT_EVAL);
2325:       assertEquals(48, Node.DIRECTIVES);
2326:       assertEquals(55, Node.INFERRED_FUNCTION);
2327:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2328:       assertEquals(30, Node.VAR_ARGS_NAME);
2329:       assertEquals(8, Node.FLAG_NO_THROWS);
2330:       assertEquals(2, Node.POST_FLAG);
2331:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2332:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2333:       assertEquals(39, Node.EMPTY_BLOCK);
2334:       assertEquals(47, Node.IS_DISPATCHER);
2335:       assertEquals(53, Node.INPUT_ID);
2336:       assertEquals(57, Node.LAST_PROP);
2337:       assertEquals(0, nodeArray0.length);
2338:       assertNotNull(node6);
2339:       assertFalse(node0.equals((Object)node3));
2340:       assertFalse(node0.equals((Object)node1));
2341:       assertFalse(node0.equals((Object)node5));
2342:       assertFalse(node0.equals((Object)node2));
2343:       assertFalse(node0.equals((Object)node4));
2344:       assertFalse(node1.equals((Object)node0));
2345:       assertFalse(node1.equals((Object)node5));
2346:       assertFalse(node1.equals((Object)node4));
2347:       assertFalse(node1.equals((Object)node2));
2348:       assertFalse(node1.equals((Object)node3));
2349:       assertFalse(node2.equals((Object)node4));
2350:       assertFalse(node2.equals((Object)node0));
2351:       assertFalse(node2.equals((Object)node1));
2352:       assertFalse(node2.equals((Object)node5));
2353:       assertFalse(node3.equals((Object)node4));
2354:       assertFalse(node3.equals((Object)node5));
2355:       assertFalse(node3.equals((Object)node1));
2356:       assertFalse(node3.equals((Object)node0));
2357:       assertFalse(node6.equals((Object)node1));
2358:       assertFalse(node6.equals((Object)node0));
2359:       assertFalse(node6.equals((Object)node4));
2360:       assertFalse(node6.equals((Object)node5));
2361:       
2362:       node1.setChangeTime(47);
2363:       assertNotSame(node1, node0);
2364:       assertNotSame(node1, node5);
2365:       assertNotSame(node1, node4);
2366:       assertEquals(46, Node.IS_NAMESPACE);
2367:       assertEquals(12, Node.COLUMN_BITS);
2368:       assertEquals(32, Node.INCRDECR_PROP);
2369:       assertEquals(1, Node.DECR_FLAG);
2370:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2371:       assertEquals(49, Node.DIRECT_EVAL);
2372:       assertEquals(37, Node.OPT_ARG_NAME);
2373:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2374:       assertEquals(29, Node.JSDOC_INFO_PROP);
2375:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2376:       assertEquals(56, Node.CHANGE_TIME);
2377:       assertEquals(54, Node.SLASH_V);
2378:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2379:       assertEquals(52, Node.LENGTH);
2380:       assertEquals(40, Node.ORIGINALNAME_PROP);
2381:       assertEquals(53, Node.INPUT_ID);
2382:       assertEquals(57, Node.LAST_PROP);
2383:       assertEquals(47, Node.IS_DISPATCHER);
2384:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2385:       assertEquals(2, Node.POST_FLAG);
2386:       assertEquals(30, Node.VAR_ARGS_NAME);
2387:       assertEquals(55, Node.INFERRED_FUNCTION);
2388:       assertEquals(4095, Node.COLUMN_MASK);
2389:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2390:       assertEquals(48, Node.DIRECTIVES);
2391:       assertEquals(39, Node.EMPTY_BLOCK);
2392:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2393:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2394:       assertEquals(43, Node.IS_CONSTANT_NAME);
2395:       assertEquals(8, Node.FLAG_NO_THROWS);
2396:       assertEquals(50, Node.FREE_CALL);
2397:       assertEquals(36, Node.QUOTED_PROP);
2398:       assertEquals(57, Node.REFLECTED_OBJECT);
2399:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2400:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2401:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2402:       assertFalse(node1.equals((Object)node0));
2403:       assertFalse(node1.equals((Object)node6));
2404:       assertFalse(node1.equals((Object)node5));
2405:       assertFalse(node1.equals((Object)node4));
2406:       assertFalse(node1.equals((Object)node2));
2407:       assertFalse(node1.equals((Object)node3));
2408:       
2409:       int int0 = node5.getCharno();
2410:       assertEquals((-1), int0);
2411:       assertNotSame(node0, node1);
2412:       assertNotSame(node0, node5);
2413:       assertNotSame(node0, node4);
2414:       assertNotSame(node1, node0);
2415:       assertNotSame(node1, node5);
2416:       assertNotSame(node1, node4);
2417:       assertNotSame(node5, node4);
2418:       assertNotSame(node5, node0);
2419:       assertNotSame(node5, node1);
2420:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2421:       assertEquals(32, Node.INCRDECR_PROP);
2422:       assertEquals(12, Node.COLUMN_BITS);
2423:       assertEquals(46, Node.IS_NAMESPACE);
2424:       assertEquals(56, Node.CHANGE_TIME);
2425:       assertEquals(47, Node.IS_DISPATCHER);
2426:       assertEquals(2, Node.POST_FLAG);
2427:       assertEquals(30, Node.VAR_ARGS_NAME);
2428:       assertEquals(49, Node.DIRECT_EVAL);
2429:       assertEquals(37, Node.OPT_ARG_NAME);
2430:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2431:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2432:       assertEquals(54, Node.SLASH_V);
2433:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2434:       assertEquals(50, Node.FREE_CALL);
2435:       assertEquals(1, Node.DECR_FLAG);
2436:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2437:       assertEquals(4095, Node.COLUMN_MASK);
2438:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2439:       assertEquals(43, Node.IS_CONSTANT_NAME);
2440:       assertEquals(48, Node.DIRECTIVES);
2441:       assertEquals(40, Node.ORIGINALNAME_PROP);
2442:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2443:       assertEquals(57, Node.REFLECTED_OBJECT);
2444:       assertEquals(52, Node.LENGTH);
2445:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2446:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2447:       assertEquals(57, Node.LAST_PROP);
2448:       assertEquals(36, Node.QUOTED_PROP);
2449:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2450:       assertEquals(8, Node.FLAG_NO_THROWS);
2451:       assertEquals(55, Node.INFERRED_FUNCTION);
2452:       assertEquals(39, Node.EMPTY_BLOCK);
2453:       assertEquals(29, Node.JSDOC_INFO_PROP);
2454:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2455:       assertEquals(53, Node.INPUT_ID);
2456:       assertEquals(46, Node.IS_NAMESPACE);
2457:       assertEquals(12, Node.COLUMN_BITS);
2458:       assertEquals(32, Node.INCRDECR_PROP);
2459:       assertEquals(1, Node.DECR_FLAG);
2460:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2461:       assertEquals(49, Node.DIRECT_EVAL);
2462:       assertEquals(37, Node.OPT_ARG_NAME);
2463:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2464:       assertEquals(29, Node.JSDOC_INFO_PROP);
2465:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2466:       assertEquals(56, Node.CHANGE_TIME);
2467:       assertEquals(54, Node.SLASH_V);
2468:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2469:       assertEquals(52, Node.LENGTH);
2470:       assertEquals(40, Node.ORIGINALNAME_PROP);
2471:       assertEquals(53, Node.INPUT_ID);
2472:       assertEquals(57, Node.LAST_PROP);
2473:       assertEquals(47, Node.IS_DISPATCHER);
2474:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2475:       assertEquals(2, Node.POST_FLAG);
2476:       assertEquals(30, Node.VAR_ARGS_NAME);
2477:       assertEquals(55, Node.INFERRED_FUNCTION);
2478:       assertEquals(4095, Node.COLUMN_MASK);
2479:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2480:       assertEquals(48, Node.DIRECTIVES);
2481:       assertEquals(39, Node.EMPTY_BLOCK);
2482:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2483:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2484:       assertEquals(43, Node.IS_CONSTANT_NAME);
2485:       assertEquals(8, Node.FLAG_NO_THROWS);
2486:       assertEquals(50, Node.FREE_CALL);
2487:       assertEquals(36, Node.QUOTED_PROP);
2488:       assertEquals(57, Node.REFLECTED_OBJECT);
2489:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2490:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2491:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2492:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2493:       assertEquals(37, Node.OPT_ARG_NAME);
2494:       assertEquals(2, Node.POST_FLAG);
2495:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2496:       assertEquals(29, Node.JSDOC_INFO_PROP);
2497:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2498:       assertEquals(1, Node.DECR_FLAG);
2499:       assertEquals(32, Node.INCRDECR_PROP);
2500:       assertEquals(30, Node.VAR_ARGS_NAME);
2501:       assertEquals(57, Node.LAST_PROP);
2502:       assertEquals(47, Node.IS_DISPATCHER);
2503:       assertEquals(12, Node.COLUMN_BITS);
2504:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2505:       assertEquals(36, Node.QUOTED_PROP);
2506:       assertEquals(52, Node.LENGTH);
2507:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2508:       assertEquals(53, Node.INPUT_ID);
2509:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2510:       assertEquals(55, Node.INFERRED_FUNCTION);
2511:       assertEquals(49, Node.DIRECT_EVAL);
2512:       assertEquals(56, Node.CHANGE_TIME);
2513:       assertEquals(57, Node.REFLECTED_OBJECT);
2514:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2515:       assertEquals(8, Node.FLAG_NO_THROWS);
2516:       assertEquals(39, Node.EMPTY_BLOCK);
2517:       assertEquals(48, Node.DIRECTIVES);
2518:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2519:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2520:       assertEquals(4095, Node.COLUMN_MASK);
2521:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2522:       assertEquals(40, Node.ORIGINALNAME_PROP);
2523:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2524:       assertEquals(50, Node.FREE_CALL);
2525:       assertEquals(43, Node.IS_CONSTANT_NAME);
2526:       assertEquals(46, Node.IS_NAMESPACE);
2527:       assertEquals(54, Node.SLASH_V);
2528:       assertEquals(0, nodeArray0.length);
2529:       assertFalse(node0.equals((Object)node3));
2530:       assertFalse(node0.equals((Object)node1));
2531:       assertFalse(node0.equals((Object)node5));
2532:       assertFalse(node0.equals((Object)node6));
2533:       assertFalse(node0.equals((Object)node2));
2534:       assertFalse(node0.equals((Object)node4));
2535:       assertFalse(node1.equals((Object)node0));
2536:       assertFalse(node1.equals((Object)node6));
2537:       assertFalse(node1.equals((Object)node5));
2538:       assertFalse(node1.equals((Object)node4));
2539:       assertFalse(node1.equals((Object)node2));
2540:       assertFalse(node1.equals((Object)node3));
2541:       assertFalse(node5.equals((Object)node4));
2542:       assertFalse(node5.equals((Object)node6));
2543:       assertFalse(node5.equals((Object)node0));
2544:       assertFalse(node5.equals((Object)node1));
2545:       assertFalse(node5.equals((Object)node3));
2546:       assertFalse(node5.equals((Object)node2));
2547:   }
2548: }
RegularFileObject[/tmp/EvoSuite_165_1628157535179/com/google/javascript/rhino/Node_165_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:55 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_165_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_165_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_165_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.JSTypeNative",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.JSType$TypePair",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.JSType$2",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
375:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
377:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
378:     );
379:   }
380: }

[MASTER] 09:58:55.878 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node[] nodeArray0 = new Node[0];
Node node0 = new Node(330, nodeArray0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, nodeArray0.length);
assertNotNull(node0);
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertEquals(0, node0.getSourcePosition());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertEquals(330, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isDebugger());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertEquals(0, node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());

Node node1 = new Node(49);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isVoid());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isThis());
assertTrue(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());

Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertEquals(40, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isEmpty());
assertFalse(node2.isCast());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTrue());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());

Node node3 = node2.useSourceInfoIfMissingFrom(node1);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node3);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isVoid());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isThis());
assertTrue(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertEquals(40, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isEmpty());
assertFalse(node2.isCast());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTrue());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isHook());
assertFalse(node3.isFalse());
assertFalse(node3.isFor());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetProp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isObjectLit());
assertFalse(node3.isVoid());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isExprResult());
assertFalse(node3.isComma());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isEmpty());
assertFalse(node3.isBreak());
assertFalse(node3.isNull());
assertFalse(node3.isCall());
assertFalse(node3.isGetElem());
assertFalse(node3.isVar());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isAdd());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isTrue());
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertTrue(node3.isString());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isReturn());
assertFalse(node3.isBlock());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.isStringKey());
assertFalse(node3.hasChildren());
assertFalse(node3.isParamList());
assertFalse(node3.hasOneChild());
assertFalse(node3.isScript());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNumber());
assertFalse(node3.isNot());
assertEquals(40, node3.getType());
assertFalse(node3.isAnd());
assertFalse(node3.isThis());
assertFalse(node3.isRegExp());
assertFalse(node3.isCast());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isFunction());
assertFalse(node3.isThrow());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());

Iterable<Node> iterable0 = node3.children();
assertFalse(iterable0.contains(node2));
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isVoid());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isThis());
assertTrue(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertEquals(40, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isEmpty());
assertFalse(node2.isCast());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTrue());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isHook());
assertFalse(node3.isFalse());
assertFalse(node3.isFor());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetProp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isObjectLit());
assertFalse(node3.isVoid());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isExprResult());
assertFalse(node3.isComma());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isEmpty());
assertFalse(node3.isBreak());
assertFalse(node3.isNull());
assertFalse(node3.isCall());
assertFalse(node3.isGetElem());
assertFalse(node3.isVar());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isAdd());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isTrue());
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertTrue(node3.isString());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isReturn());
assertFalse(node3.isBlock());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.isStringKey());
assertFalse(node3.hasChildren());
assertFalse(node3.isParamList());
assertFalse(node3.hasOneChild());
assertFalse(node3.isScript());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNumber());
assertFalse(node3.isNot());
assertEquals(40, node3.getType());
assertFalse(node3.isAnd());
assertFalse(node3.isThis());
assertFalse(node3.isRegExp());
assertFalse(node3.isCast());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isFunction());
assertFalse(node3.isThrow());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());

boolean boolean0 = node1.isGetProp();
assertFalse(boolean0);
assertNotSame(node1, node0);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isVoid());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isThis());
assertTrue(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());

boolean boolean1 = node3.hasChildren();
assertFalse(boolean1);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isVoid());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isThis());
assertTrue(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());

boolean boolean2 = node2.isSwitch();
assertFalse(boolean2);
assertSame(node2, node3);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

Node node4 = node0.cloneNode();
assertNotSame(node0, node1);
assertNotSame(node0, node4);
assertNotSame(node4, node0);
assertNotSame(node4, node1);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, nodeArray0.length);
assertNotNull(node4);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags3);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertNotNull(node_SideEffectFlags4);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertNotNull(node_SideEffectFlags5);

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setMutatesGlobalState();
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertNotNull(node_SideEffectFlags6);

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setReturnsTainted();
assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertNotNull(node_SideEffectFlags7);

Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags7.setMutatesArguments();
assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags8);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertSame(node_SideEffectFlags7, node_SideEffectFlags8);
assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertNotNull(node_SideEffectFlags8);

Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags2.setMutatesGlobalState();
assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertNotNull(node_SideEffectFlags9);

Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags0.setMutatesArguments();
assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertNotNull(node_SideEffectFlags10);

Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags10.setMutatesGlobalState();
assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
assertSame(node_SideEffectFlags10, node_SideEffectFlags11);
assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
assertSame(node_SideEffectFlags11, node_SideEffectFlags4);
assertSame(node_SideEffectFlags11, node_SideEffectFlags8);
assertSame(node_SideEffectFlags11, node_SideEffectFlags7);
assertSame(node_SideEffectFlags11, node_SideEffectFlags1);
assertSame(node_SideEffectFlags11, node_SideEffectFlags2);
assertSame(node_SideEffectFlags11, node_SideEffectFlags0);
assertSame(node_SideEffectFlags11, node_SideEffectFlags3);
assertSame(node_SideEffectFlags11, node_SideEffectFlags6);
assertSame(node_SideEffectFlags11, node_SideEffectFlags10);
assertSame(node_SideEffectFlags11, node_SideEffectFlags5);
assertSame(node_SideEffectFlags11, node_SideEffectFlags9);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertNotNull(node_SideEffectFlags11);

Node node5 = new Node(48, node1, node0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, nodeArray0.length);
assertNotNull(node5);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node2));

boolean boolean3 = node1.hasOneChild();
assertFalse(boolean3);
assertNotSame(node1, node0);
assertNotSame(node1, node5);
assertNotSame(node1, node4);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);

boolean boolean4 = node5.isEquivalentToShallow(node0);
assertFalse(boolean4);
assertNotSame(node0, node1);
assertNotSame(node0, node5);
assertNotSame(node0, node4);
assertNotSame(node1, node0);
assertNotSame(node1, node5);
assertNotSame(node1, node4);
assertNotSame(node5, node4);
assertNotSame(node5, node0);
assertNotSame(node5, node1);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, nodeArray0.length);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node2));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);

boolean boolean5 = node0.isEquivalentTo(node2, false, false, true);
assertFalse(boolean5);
assertNotSame(node0, node1);
assertNotSame(node0, node5);
assertNotSame(node0, node4);
assertSame(node2, node3);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, nodeArray0.length);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node5));
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean3);

Node node6 = node3.useSourceInfoFrom(node0);
assertNotSame(node0, node1);
assertNotSame(node0, node5);
assertNotSame(node0, node4);
assertNotSame(node1, node0);
assertNotSame(node1, node5);
assertNotSame(node1, node4);
assertSame(node2, node3);
assertSame(node2, node6);
assertSame(node3, node2);
assertSame(node3, node6);
assertSame(node6, node3);
assertSame(node6, node2);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(0, nodeArray0.length);
assertNotNull(node6);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node5));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node5));

node1.setChangeTime(47);
assertNotSame(node1, node0);
assertNotSame(node1, node5);
assertNotSame(node1, node4);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node6));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));

int int0 = node5.getCharno();
assertEquals((-1), int0);
assertNotSame(node0, node1);
assertNotSame(node0, node5);
assertNotSame(node0, node4);
assertNotSame(node1, node0);
assertNotSame(node1, node5);
assertNotSame(node1, node4);
assertNotSame(node5, node4);
assertNotSame(node5, node0);
assertNotSame(node5, node1);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, nodeArray0.length);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node6));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node6));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node6));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node2));


[MASTER] 09:58:56.258 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_166_1628157535879/com/google/javascript/rhino/Node_166_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_166_1628157535879/com/google/javascript/rhino/Node_166_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:56.258 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:56.258 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:56.259 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 661
[MASTER] 09:58:56.260 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_166_1628157535879/com/google/javascript/rhino/Node_166_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:55 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_166_tmp__ESTest extends Node_166_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node[] nodeArray0 = new Node[0];
22:       Node node0 = new Node(330, nodeArray0);
23:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
24:       assertEquals(47, Node.IS_DISPATCHER);
25:       assertEquals(36, Node.QUOTED_PROP);
26:       assertEquals(29, Node.JSDOC_INFO_PROP);
27:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
28:       assertEquals(53, Node.INPUT_ID);
29:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
30:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
31:       assertEquals(51, Node.STATIC_SOURCE_FILE);
32:       assertEquals(30, Node.VAR_ARGS_NAME);
33:       assertEquals(46, Node.IS_NAMESPACE);
34:       assertEquals(43, Node.IS_CONSTANT_NAME);
35:       assertEquals(2, Node.POST_FLAG);
36:       assertEquals(40, Node.ORIGINALNAME_PROP);
37:       assertEquals(57, Node.REFLECTED_OBJECT);
38:       assertEquals(52, Node.LENGTH);
39:       assertEquals(50, Node.FREE_CALL);
40:       assertEquals(54, Node.SLASH_V);
41:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
42:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
43:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
44:       assertEquals(8, Node.FLAG_NO_THROWS);
45:       assertEquals(57, Node.LAST_PROP);
46:       assertEquals(1, Node.DECR_FLAG);
47:       assertEquals(15, Node.NO_SIDE_EFFECTS);
48:       assertEquals(39, Node.EMPTY_BLOCK);
49:       assertEquals(12, Node.COLUMN_BITS);
50:       assertEquals(4095, Node.COLUMN_MASK);
51:       assertEquals(55, Node.INFERRED_FUNCTION);
52:       assertEquals(32, Node.INCRDECR_PROP);
53:       assertEquals(56, Node.CHANGE_TIME);
54:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
55:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
56:       assertEquals(48, Node.DIRECTIVES);
57:       assertEquals(49, Node.DIRECT_EVAL);
58:       assertEquals(37, Node.OPT_ARG_NAME);
59:       assertEquals(0, nodeArray0.length);
60:       assertNotNull(node0);
61:       assertFalse(node0.isTry());
62:       assertFalse(node0.isVoid());
63:       assertFalse(node0.isFunction());
64:       assertFalse(node0.isRegExp());
65:       assertFalse(node0.isTrue());
66:       assertFalse(node0.isDebugger());
67:       assertFalse(node0.isDelProp());
68:       assertFalse(node0.isIf());
69:       assertFalse(node0.isArrayLit());
70:       assertFalse(node0.isCatch());
71:       assertEquals(0, node0.getLineno());
72:       assertFalse(node0.isIn());
73:       assertFalse(node0.isNull());
74:       assertFalse(node0.isNE());
75:       assertEquals(0, node0.getChildCount());
76:       assertEquals(0, node0.getSourcePosition());
77:       assertFalse(node0.isEmpty());
78:       assertFalse(node0.isDefaultCase());
79:       assertFalse(node0.isInc());
80:       assertFalse(node0.isSetterDef());
81:       assertFalse(node0.isAdd());
82:       assertFalse(node0.isName());
83:       assertFalse(node0.isFalse());
84:       assertFalse(node0.isContinue());
85:       assertFalse(node0.isCall());
86:       assertFalse(node0.isBreak());
87:       assertFalse(node0.isTypeOf());
88:       assertFalse(node0.isDec());
89:       assertFalse(node0.isComma());
90:       assertFalse(node0.isReturn());
91:       assertFalse(node0.hasChildren());
92:       assertFalse(node0.isNot());
93:       assertFalse(node0.isString());
94:       assertFalse(node0.isWhile());
95:       assertFalse(node0.isObjectLit());
96:       assertEquals(330, node0.getType());
97:       assertFalse(node0.isGetProp());
98:       assertEquals(0, node0.getCharno());
99:       assertFalse(node0.isGetElem());
100:       assertFalse(node0.isLabelName());
101:       assertFalse(node0.isAssign());
102:       assertFalse(node0.isAnd());
103:       assertFalse(node0.isWith());
104:       assertFalse(node0.isInstanceOf());
105:       assertFalse(node0.isCast());
106:       assertFalse(node0.isExprResult());
107:       assertFalse(node0.isOr());
108:       assertFalse(node0.isAssignAdd());
109:       assertFalse(node0.isLabel());
110:       assertFalse(node0.isDo());
111:       assertFalse(node0.isThrow());
112:       assertFalse(node0.isNew());
113:       assertFalse(node0.isBlock());
114:       assertFalse(node0.isSwitch());
115:       assertFalse(node0.isHook());
116:       assertFalse(node0.isVar());
117:       assertFalse(node0.isStringKey());
118:       assertFalse(node0.hasMoreThanOneChild());
119:       assertFalse(node0.isParamList());
120:       assertFalse(node0.isNumber());
121:       assertFalse(node0.isGetterDef());
122:       assertFalse(node0.isThis());
123:       assertFalse(node0.isCase());
124:       assertFalse(node0.isFor());
125:       assertFalse(node0.hasOneChild());
126:       assertFalse(node0.isScript());
127:       
128:       Node node1 = new Node(49);
129:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
130:       assertEquals(39, Node.EMPTY_BLOCK);
131:       assertEquals(8, Node.FLAG_NO_THROWS);
132:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
133:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
134:       assertEquals(50, Node.FREE_CALL);
135:       assertEquals(4095, Node.COLUMN_MASK);
136:       assertEquals(40, Node.ORIGINALNAME_PROP);
137:       assertEquals(57, Node.REFLECTED_OBJECT);
138:       assertEquals(48, Node.DIRECTIVES);
139:       assertEquals(54, Node.SLASH_V);
140:       assertEquals(43, Node.IS_CONSTANT_NAME);
141:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
142:       assertEquals(12, Node.COLUMN_BITS);
143:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
144:       assertEquals(32, Node.INCRDECR_PROP);
145:       assertEquals(1, Node.DECR_FLAG);
146:       assertEquals(2, Node.POST_FLAG);
147:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
148:       assertEquals(56, Node.CHANGE_TIME);
149:       assertEquals(47, Node.IS_DISPATCHER);
150:       assertEquals(51, Node.STATIC_SOURCE_FILE);
151:       assertEquals(46, Node.IS_NAMESPACE);
152:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
153:       assertEquals(49, Node.DIRECT_EVAL);
154:       assertEquals(37, Node.OPT_ARG_NAME);
155:       assertEquals(57, Node.LAST_PROP);
156:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
157:       assertEquals(30, Node.VAR_ARGS_NAME);
158:       assertEquals(52, Node.LENGTH);
159:       assertEquals(36, Node.QUOTED_PROP);
160:       assertEquals(55, Node.INFERRED_FUNCTION);
161:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
162:       assertEquals(29, Node.JSDOC_INFO_PROP);
163:       assertEquals(53, Node.INPUT_ID);
164:       assertEquals(15, Node.NO_SIDE_EFFECTS);
165:       assertNotNull(node1);
166:       assertFalse(node1.equals((Object)node0));
167:       assertFalse(node1.isFalse());
168:       assertFalse(node1.isHook());
169:       assertFalse(node1.isThis());
170:       assertFalse(node1.isComma());
171:       assertFalse(node1.isInc());
172:       assertFalse(node1.isGetProp());
173:       assertFalse(node1.isNot());
174:       assertFalse(node1.isAnd());
175:       assertFalse(node1.isString());
176:       assertFalse(node1.isObjectLit());
177:       assertEquals((-1), node1.getCharno());
178:       assertFalse(node1.isSwitch());
179:       assertFalse(node1.isCast());
180:       assertFalse(node1.isFor());
181:       assertFalse(node1.isLabelName());
182:       assertFalse(node1.isIf());
183:       assertFalse(node1.isNE());
184:       assertFalse(node1.isNumber());
185:       assertFalse(node1.isGetterDef());
186:       assertFalse(node1.isTry());
187:       assertFalse(node1.isIn());
188:       assertFalse(node1.isScript());
189:       assertFalse(node1.isCase());
190:       assertFalse(node1.hasOneChild());
191:       assertFalse(node1.isWith());
192:       assertFalse(node1.isCatch());
193:       assertFalse(node1.hasMoreThanOneChild());
194:       assertFalse(node1.isRegExp());
195:       assertFalse(node1.isInstanceOf());
196:       assertEquals((-1), node1.getLineno());
197:       assertFalse(node1.isName());
198:       assertFalse(node1.isStringKey());
199:       assertFalse(node1.isVar());
200:       assertTrue(node1.isThrow());
201:       assertFalse(node1.isNull());
202:       assertFalse(node1.isAdd());
203:       assertFalse(node1.isBlock());
204:       assertFalse(node1.isSetterDef());
205:       assertFalse(node1.isNew());
206:       assertFalse(node1.isDo());
207:       assertFalse(node1.isDefaultCase());
208:       assertFalse(node1.isContinue());
209:       assertFalse(node1.isFunction());
210:       assertEquals(0, node1.getChildCount());
211:       assertFalse(node1.isDebugger());
212:       assertFalse(node1.isParamList());
213:       assertFalse(node1.isArrayLit());
214:       assertFalse(node1.isEmpty());
215:       assertFalse(node1.isAssign());
216:       assertFalse(node1.isGetElem());
217:       assertFalse(node1.isTypeOf());
218:       assertFalse(node1.hasChildren());
219:       assertFalse(node1.isDec());
220:       assertEquals((-1), node1.getSourcePosition());
221:       assertFalse(node1.isLabel());
222:       assertFalse(node1.isAssignAdd());
223:       assertFalse(node1.isOr());
224:       assertFalse(node1.isReturn());
225:       assertEquals(49, node1.getType());
226:       assertFalse(node1.isWhile());
227:       assertFalse(node1.isTrue());
228:       assertFalse(node1.isCall());
229:       assertFalse(node1.isExprResult());
230:       assertFalse(node1.isVoid());
231:       assertFalse(node1.isDelProp());
232:       assertFalse(node1.isBreak());
233:       
234:       String string0 = "xpBF>P}ZAl``iC)9";
235:       Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
236:       assertEquals(43, Node.IS_CONSTANT_NAME);
237:       assertEquals(36, Node.QUOTED_PROP);
238:       assertEquals(48, Node.DIRECTIVES);
239:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
240:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
241:       assertEquals(4095, Node.COLUMN_MASK);
242:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
243:       assertEquals(29, Node.JSDOC_INFO_PROP);
244:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
245:       assertEquals(2, Node.POST_FLAG);
246:       assertEquals(56, Node.CHANGE_TIME);
247:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
248:       assertEquals(47, Node.IS_DISPATCHER);
249:       assertEquals(57, Node.REFLECTED_OBJECT);
250:       assertEquals(53, Node.INPUT_ID);
251:       assertEquals(52, Node.LENGTH);
252:       assertEquals(8, Node.FLAG_NO_THROWS);
253:       assertEquals(55, Node.INFERRED_FUNCTION);
254:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
255:       assertEquals(15, Node.NO_SIDE_EFFECTS);
256:       assertEquals(39, Node.EMPTY_BLOCK);
257:       assertEquals(49, Node.DIRECT_EVAL);
258:       assertEquals(30, Node.VAR_ARGS_NAME);
259:       assertEquals(1, Node.DECR_FLAG);
260:       assertEquals(57, Node.LAST_PROP);
261:       assertEquals(51, Node.STATIC_SOURCE_FILE);
262:       assertEquals(12, Node.COLUMN_BITS);
263:       assertEquals(46, Node.IS_NAMESPACE);
264:       assertEquals(54, Node.SLASH_V);
265:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
266:       assertEquals(40, Node.ORIGINALNAME_PROP);
267:       assertEquals(37, Node.OPT_ARG_NAME);
268:       assertEquals(50, Node.FREE_CALL);
269:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
270:       assertEquals(32, Node.INCRDECR_PROP);
271:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
272:       assertNotNull(node2);
273:       assertFalse(node2.equals((Object)node0));
274:       assertFalse(node2.equals((Object)node1));
275:       assertFalse(node2.isCatch());
276:       assertEquals(0, node2.getChildCount());
277:       assertEquals(40, node2.getType());
278:       assertFalse(node2.isDefaultCase());
279:       assertFalse(node2.isTry());
280:       assertFalse(node2.isSetterDef());
281:       assertFalse(node2.isFor());
282:       assertFalse(node2.isBlock());
283:       assertFalse(node2.isTrue());
284:       assertFalse(node2.isRegExp());
285:       assertFalse(node2.isNull());
286:       assertFalse(node2.isNE());
287:       assertFalse(node2.isDelProp());
288:       assertFalse(node2.isIf());
289:       assertFalse(node2.isName());
290:       assertFalse(node2.isVoid());
291:       assertFalse(node2.isCall());
292:       assertFalse(node2.isAssignAdd());
293:       assertFalse(node2.hasMoreThanOneChild());
294:       assertFalse(node2.isOr());
295:       assertFalse(node2.isLabel());
296:       assertFalse(node2.isGetterDef());
297:       assertFalse(node2.isNumber());
298:       assertFalse(node2.isCase());
299:       assertTrue(node2.isString());
300:       assertFalse(node2.isNew());
301:       assertFalse(node2.isAdd());
302:       assertFalse(node2.isEmpty());
303:       assertFalse(node2.isDo());
304:       assertFalse(node2.isArrayLit());
305:       assertFalse(node2.isVar());
306:       assertFalse(node2.isStringKey());
307:       assertEquals((-1), node2.getCharno());
308:       assertFalse(node2.isParamList());
309:       assertFalse(node2.isSwitch());
310:       assertFalse(node2.isLabelName());
311:       assertFalse(node2.isInstanceOf());
312:       assertFalse(node2.isAnd());
313:       assertFalse(node2.isObjectLit());
314:       assertFalse(node2.isNot());
315:       assertFalse(node2.isThis());
316:       assertFalse(node2.isScript());
317:       assertFalse(node2.isGetProp());
318:       assertFalse(node2.hasOneChild());
319:       assertFalse(node2.isAssign());
320:       assertFalse(node2.isHook());
321:       assertFalse(node2.hasChildren());
322:       assertFalse(node2.isTypeOf());
323:       assertFalse(node2.isComma());
324:       assertFalse(node2.isDec());
325:       assertFalse(node2.isWith());
326:       assertFalse(node2.isGetElem());
327:       assertEquals((-1), node2.getLineno());
328:       assertFalse(node2.isExprResult());
329:       assertFalse(node2.isBreak());
330:       assertFalse(node2.isContinue());
331:       assertFalse(node2.isIn());
332:       assertFalse(node2.isReturn());
333:       assertEquals((-1), node2.getSourcePosition());
334:       assertFalse(node2.isWhile());
335:       assertFalse(node2.isInc());
336:       assertFalse(node2.isCast());
337:       assertFalse(node2.isFalse());
338:       assertFalse(node2.isThrow());
339:       assertFalse(node2.isDebugger());
340:       assertFalse(node2.isFunction());
341:       
342:       Node node3 = node2.useSourceInfoIfMissingFrom(node1);
343:       assertNotSame(node1, node0);
344:       assertSame(node2, node3);
345:       assertSame(node3, node2);
346:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
347:       assertEquals(39, Node.EMPTY_BLOCK);
348:       assertEquals(8, Node.FLAG_NO_THROWS);
349:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
350:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
351:       assertEquals(50, Node.FREE_CALL);
352:       assertEquals(4095, Node.COLUMN_MASK);
353:       assertEquals(40, Node.ORIGINALNAME_PROP);
354:       assertEquals(57, Node.REFLECTED_OBJECT);
355:       assertEquals(48, Node.DIRECTIVES);
356:       assertEquals(54, Node.SLASH_V);
357:       assertEquals(43, Node.IS_CONSTANT_NAME);
358:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
359:       assertEquals(12, Node.COLUMN_BITS);
360:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
361:       assertEquals(32, Node.INCRDECR_PROP);
362:       assertEquals(1, Node.DECR_FLAG);
363:       assertEquals(2, Node.POST_FLAG);
364:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
365:       assertEquals(56, Node.CHANGE_TIME);
366:       assertEquals(47, Node.IS_DISPATCHER);
367:       assertEquals(51, Node.STATIC_SOURCE_FILE);
368:       assertEquals(46, Node.IS_NAMESPACE);
369:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
370:       assertEquals(49, Node.DIRECT_EVAL);
371:       assertEquals(37, Node.OPT_ARG_NAME);
372:       assertEquals(57, Node.LAST_PROP);
373:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
374:       assertEquals(30, Node.VAR_ARGS_NAME);
375:       assertEquals(52, Node.LENGTH);
376:       assertEquals(36, Node.QUOTED_PROP);
377:       assertEquals(55, Node.INFERRED_FUNCTION);
378:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
379:       assertEquals(29, Node.JSDOC_INFO_PROP);
380:       assertEquals(53, Node.INPUT_ID);
381:       assertEquals(15, Node.NO_SIDE_EFFECTS);
382:       assertEquals(43, Node.IS_CONSTANT_NAME);
383:       assertEquals(36, Node.QUOTED_PROP);
384:       assertEquals(48, Node.DIRECTIVES);
385:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
386:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
387:       assertEquals(4095, Node.COLUMN_MASK);
388:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
389:       assertEquals(29, Node.JSDOC_INFO_PROP);
390:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
391:       assertEquals(2, Node.POST_FLAG);
392:       assertEquals(56, Node.CHANGE_TIME);
393:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
394:       assertEquals(47, Node.IS_DISPATCHER);
395:       assertEquals(57, Node.REFLECTED_OBJECT);
396:       assertEquals(53, Node.INPUT_ID);
397:       assertEquals(52, Node.LENGTH);
398:       assertEquals(8, Node.FLAG_NO_THROWS);
399:       assertEquals(55, Node.INFERRED_FUNCTION);
400:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
401:       assertEquals(15, Node.NO_SIDE_EFFECTS);
402:       assertEquals(39, Node.EMPTY_BLOCK);
403:       assertEquals(49, Node.DIRECT_EVAL);
404:       assertEquals(30, Node.VAR_ARGS_NAME);
405:       assertEquals(1, Node.DECR_FLAG);
406:       assertEquals(57, Node.LAST_PROP);
407:       assertEquals(51, Node.STATIC_SOURCE_FILE);
408:       assertEquals(12, Node.COLUMN_BITS);
409:       assertEquals(46, Node.IS_NAMESPACE);
410:       assertEquals(54, Node.SLASH_V);
411:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
412:       assertEquals(40, Node.ORIGINALNAME_PROP);
413:       assertEquals(37, Node.OPT_ARG_NAME);
414:       assertEquals(50, Node.FREE_CALL);
415:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
416:       assertEquals(32, Node.INCRDECR_PROP);
417:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
418:       assertEquals(56, Node.CHANGE_TIME);
419:       assertEquals(51, Node.STATIC_SOURCE_FILE);
420:       assertEquals(47, Node.IS_DISPATCHER);
421:       assertEquals(2, Node.POST_FLAG);
422:       assertEquals(12, Node.COLUMN_BITS);
423:       assertEquals(46, Node.IS_NAMESPACE);
424:       assertEquals(49, Node.DIRECT_EVAL);
425:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
426:       assertEquals(37, Node.OPT_ARG_NAME);
427:       assertEquals(53, Node.INPUT_ID);
428:       assertEquals(52, Node.LENGTH);
429:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
430:       assertEquals(36, Node.QUOTED_PROP);
431:       assertEquals(57, Node.REFLECTED_OBJECT);
432:       assertEquals(30, Node.VAR_ARGS_NAME);
433:       assertEquals(29, Node.JSDOC_INFO_PROP);
434:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
435:       assertEquals(55, Node.INFERRED_FUNCTION);
436:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
437:       assertEquals(57, Node.LAST_PROP);
438:       assertEquals(15, Node.NO_SIDE_EFFECTS);
439:       assertEquals(39, Node.EMPTY_BLOCK);
440:       assertEquals(48, Node.DIRECTIVES);
441:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
442:       assertEquals(8, Node.FLAG_NO_THROWS);
443:       assertEquals(40, Node.ORIGINALNAME_PROP);
444:       assertEquals(4095, Node.COLUMN_MASK);
445:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
446:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
447:       assertEquals(54, Node.SLASH_V);
448:       assertEquals(43, Node.IS_CONSTANT_NAME);
449:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
450:       assertEquals(1, Node.DECR_FLAG);
451:       assertEquals(50, Node.FREE_CALL);
452:       assertEquals(32, Node.INCRDECR_PROP);
453:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
454:       assertNotNull(node3);
455:       assertFalse(node1.equals((Object)node2));
456:       assertFalse(node1.equals((Object)node0));
457:       assertFalse(node2.equals((Object)node0));
458:       assertFalse(node2.equals((Object)node1));
459:       assertFalse(node3.equals((Object)node1));
460:       assertFalse(node3.equals((Object)node0));
461:       assertFalse(node1.isFalse());
462:       assertFalse(node1.isHook());
463:       assertFalse(node1.isThis());
464:       assertFalse(node1.isComma());
465:       assertFalse(node1.isInc());
466:       assertFalse(node1.isGetProp());
467:       assertFalse(node1.isNot());
468:       assertFalse(node1.isAnd());
469:       assertFalse(node1.isString());
470:       assertFalse(node1.isObjectLit());
471:       assertEquals((-1), node1.getCharno());
472:       assertFalse(node1.isSwitch());
473:       assertFalse(node1.isCast());
474:       assertFalse(node1.isFor());
475:       assertFalse(node1.isLabelName());
476:       assertFalse(node1.isIf());
477:       assertFalse(node1.isNE());
478:       assertFalse(node1.isNumber());
479:       assertFalse(node1.isGetterDef());
480:       assertFalse(node1.isTry());
481:       assertFalse(node1.isIn());
482:       assertFalse(node1.isScript());
483:       assertFalse(node1.isCase());
484:       assertFalse(node1.hasOneChild());
485:       assertFalse(node1.isWith());
486:       assertFalse(node1.isCatch());
487:       assertFalse(node1.hasMoreThanOneChild());
488:       assertFalse(node1.isRegExp());
489:       assertFalse(node1.isInstanceOf());
490:       assertEquals((-1), node1.getLineno());
491:       assertFalse(node1.isName());
492:       assertFalse(node1.isStringKey());
493:       assertFalse(node1.isVar());
494:       assertTrue(node1.isThrow());
495:       assertFalse(node1.isNull());
496:       assertFalse(node1.isAdd());
497:       assertFalse(node1.isBlock());
498:       assertFalse(node1.isSetterDef());
499:       assertFalse(node1.isNew());
500:       assertFalse(node1.isDo());
501:       assertFalse(node1.isDefaultCase());
502:       assertFalse(node1.isContinue());
503:       assertFalse(node1.isFunction());
504:       assertEquals(0, node1.getChildCount());
505:       assertFalse(node1.isDebugger());
506:       assertFalse(node1.isParamList());
507:       assertFalse(node1.isArrayLit());
508:       assertFalse(node1.isEmpty());
509:       assertFalse(node1.isAssign());
510:       assertFalse(node1.isGetElem());
511:       assertFalse(node1.isTypeOf());
512:       assertFalse(node1.hasChildren());
513:       assertFalse(node1.isDec());
514:       assertEquals((-1), node1.getSourcePosition());
515:       assertFalse(node1.isLabel());
516:       assertFalse(node1.isAssignAdd());
517:       assertFalse(node1.isOr());
518:       assertFalse(node1.isReturn());
519:       assertEquals(49, node1.getType());
520:       assertFalse(node1.isWhile());
521:       assertFalse(node1.isTrue());
522:       assertFalse(node1.isCall());
523:       assertFalse(node1.isExprResult());
524:       assertFalse(node1.isVoid());
525:       assertFalse(node1.isDelProp());
526:       assertFalse(node1.isBreak());
527:       assertFalse(node2.isCatch());
528:       assertEquals(0, node2.getChildCount());
529:       assertEquals(40, node2.getType());
530:       assertFalse(node2.isDefaultCase());
531:       assertFalse(node2.isTry());
532:       assertFalse(node2.isSetterDef());
533:       assertFalse(node2.isFor());
534:       assertFalse(node2.isBlock());
535:       assertFalse(node2.isTrue());
536:       assertFalse(node2.isRegExp());
537:       assertFalse(node2.isNull());
538:       assertFalse(node2.isNE());
539:       assertFalse(node2.isDelProp());
540:       assertFalse(node2.isIf());
541:       assertFalse(node2.isName());
542:       assertFalse(node2.isVoid());
543:       assertFalse(node2.isCall());
544:       assertFalse(node2.isAssignAdd());
545:       assertFalse(node2.hasMoreThanOneChild());
546:       assertFalse(node2.isOr());
547:       assertFalse(node2.isLabel());
548:       assertFalse(node2.isGetterDef());
549:       assertFalse(node2.isNumber());
550:       assertFalse(node2.isCase());
551:       assertTrue(node2.isString());
552:       assertFalse(node2.isNew());
553:       assertFalse(node2.isAdd());
554:       assertFalse(node2.isEmpty());
555:       assertFalse(node2.isDo());
556:       assertFalse(node2.isArrayLit());
557:       assertFalse(node2.isVar());
558:       assertFalse(node2.isStringKey());
559:       assertEquals((-1), node2.getCharno());
560:       assertFalse(node2.isParamList());
561:       assertFalse(node2.isSwitch());
562:       assertFalse(node2.isLabelName());
563:       assertFalse(node2.isInstanceOf());
564:       assertFalse(node2.isAnd());
565:       assertFalse(node2.isObjectLit());
566:       assertFalse(node2.isNot());
567:       assertFalse(node2.isThis());
568:       assertFalse(node2.isScript());
569:       assertFalse(node2.isGetProp());
570:       assertFalse(node2.hasOneChild());
571:       assertFalse(node2.isAssign());
572:       assertFalse(node2.isHook());
573:       assertFalse(node2.hasChildren());
574:       assertFalse(node2.isTypeOf());
575:       assertFalse(node2.isComma());
576:       assertFalse(node2.isDec());
577:       assertFalse(node2.isWith());
578:       assertFalse(node2.isGetElem());
579:       assertEquals((-1), node2.getLineno());
580:       assertFalse(node2.isExprResult());
581:       assertFalse(node2.isBreak());
582:       assertFalse(node2.isContinue());
583:       assertFalse(node2.isIn());
584:       assertFalse(node2.isReturn());
585:       assertEquals((-1), node2.getSourcePosition());
586:       assertFalse(node2.isWhile());
587:       assertFalse(node2.isInc());
588:       assertFalse(node2.isCast());
589:       assertFalse(node2.isFalse());
590:       assertFalse(node2.isThrow());
591:       assertFalse(node2.isDebugger());
592:       assertFalse(node2.isFunction());
593:       assertFalse(node3.isNumber());
594:       assertFalse(node3.isDec());
595:       assertFalse(node3.isTypeOf());
596:       assertFalse(node3.isReturn());
597:       assertFalse(node3.isOr());
598:       assertFalse(node3.isAssign());
599:       assertFalse(node3.isLabel());
600:       assertFalse(node3.hasChildren());
601:       assertEquals((-1), node3.getSourcePosition());
602:       assertFalse(node3.hasOneChild());
603:       assertFalse(node3.isAssignAdd());
604:       assertFalse(node3.isDo());
605:       assertFalse(node3.isWith());
606:       assertFalse(node3.isWhile());
607:       assertFalse(node3.isBlock());
608:       assertFalse(node3.isInstanceOf());
609:       assertFalse(node3.hasMoreThanOneChild());
610:       assertFalse(node3.isGetElem());
611:       assertFalse(node3.isCall());
612:       assertFalse(node3.isName());
613:       assertFalse(node3.isExprResult());
614:       assertEquals((-1), node3.getLineno());
615:       assertFalse(node3.isThrow());
616:       assertFalse(node3.isFalse());
617:       assertFalse(node3.isComma());
618:       assertFalse(node3.isGetProp());
619:       assertFalse(node3.isInc());
620:       assertFalse(node3.isSetterDef());
621:       assertFalse(node3.isFunction());
622:       assertFalse(node3.isNot());
623:       assertFalse(node3.isObjectLit());
624:       assertEquals(40, node3.getType());
625:       assertFalse(node3.isDebugger());
626:       assertFalse(node3.isCast());
627:       assertFalse(node3.isAnd());
628:       assertFalse(node3.isContinue());
629:       assertFalse(node3.isIf());
630:       assertFalse(node3.isGetterDef());
631:       assertFalse(node3.isDelProp());
632:       assertFalse(node3.isNE());
633:       assertFalse(node3.isFor());
634:       assertFalse(node3.isIn());
635:       assertFalse(node3.isEmpty());
636:       assertFalse(node3.isTry());
637:       assertFalse(node3.isCase());
638:       assertFalse(node3.isRegExp());
639:       assertFalse(node3.isTrue());
640:       assertFalse(node3.isCatch());
641:       assertFalse(node3.isVoid());
642:       assertFalse(node3.isBreak());
643:       assertFalse(node3.isNull());
644:       assertFalse(node3.isParamList());
645:       assertFalse(node3.isStringKey());
646:       assertFalse(node3.isThis());
647:       assertFalse(node3.isHook());
648:       assertFalse(node3.isVar());
649:       assertFalse(node3.isNew());
650:       assertTrue(node3.isString());
651:       assertFalse(node3.isAdd());
652:       assertFalse(node3.isDefaultCase());
653:       assertFalse(node3.isScript());
654:       assertFalse(node3.isSwitch());
655:       assertEquals((-1), node3.getCharno());
656:       assertEquals(0, node3.getChildCount());
657:       assertFalse(node3.isLabelName());
658:       assertFalse(node3.isArrayLit());
659:       
660:       Iterable<Node> iterable0 = node3.children();
661:       assertFalse(iterable0.contains(node0));
662:       assertNotSame(node1, node0);
663:       assertSame(node2, node3);
664:       assertSame(node3, node2);
665:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
666:       assertEquals(39, Node.EMPTY_BLOCK);
667:       assertEquals(8, Node.FLAG_NO_THROWS);
668:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
669:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
670:       assertEquals(50, Node.FREE_CALL);
671:       assertEquals(4095, Node.COLUMN_MASK);
672:       assertEquals(40, Node.ORIGINALNAME_PROP);
673:       assertEquals(57, Node.REFLECTED_OBJECT);
674:       assertEquals(48, Node.DIRECTIVES);
675:       assertEquals(54, Node.SLASH_V);
676:       assertEquals(43, Node.IS_CONSTANT_NAME);
677:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
678:       assertEquals(12, Node.COLUMN_BITS);
679:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
680:       assertEquals(32, Node.INCRDECR_PROP);
681:       assertEquals(1, Node.DECR_FLAG);
682:       assertEquals(2, Node.POST_FLAG);
683:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
684:       assertEquals(56, Node.CHANGE_TIME);
685:       assertEquals(47, Node.IS_DISPATCHER);
686:       assertEquals(51, Node.STATIC_SOURCE_FILE);
687:       assertEquals(46, Node.IS_NAMESPACE);
688:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
689:       assertEquals(49, Node.DIRECT_EVAL);
690:       assertEquals(37, Node.OPT_ARG_NAME);
691:       assertEquals(57, Node.LAST_PROP);
692:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
693:       assertEquals(30, Node.VAR_ARGS_NAME);
694:       assertEquals(52, Node.LENGTH);
695:       assertEquals(36, Node.QUOTED_PROP);
696:       assertEquals(55, Node.INFERRED_FUNCTION);
697:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
698:       assertEquals(29, Node.JSDOC_INFO_PROP);
699:       assertEquals(53, Node.INPUT_ID);
700:       assertEquals(15, Node.NO_SIDE_EFFECTS);
701:       assertEquals(43, Node.IS_CONSTANT_NAME);
702:       assertEquals(36, Node.QUOTED_PROP);
703:       assertEquals(48, Node.DIRECTIVES);
704:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
705:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
706:       assertEquals(4095, Node.COLUMN_MASK);
707:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
708:       assertEquals(29, Node.JSDOC_INFO_PROP);
709:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
710:       assertEquals(2, Node.POST_FLAG);
711:       assertEquals(56, Node.CHANGE_TIME);
712:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
713:       assertEquals(47, Node.IS_DISPATCHER);
714:       assertEquals(57, Node.REFLECTED_OBJECT);
715:       assertEquals(53, Node.INPUT_ID);
716:       assertEquals(52, Node.LENGTH);
717:       assertEquals(8, Node.FLAG_NO_THROWS);
718:       assertEquals(55, Node.INFERRED_FUNCTION);
719:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
720:       assertEquals(15, Node.NO_SIDE_EFFECTS);
721:       assertEquals(39, Node.EMPTY_BLOCK);
722:       assertEquals(49, Node.DIRECT_EVAL);
723:       assertEquals(30, Node.VAR_ARGS_NAME);
724:       assertEquals(1, Node.DECR_FLAG);
725:       assertEquals(57, Node.LAST_PROP);
726:       assertEquals(51, Node.STATIC_SOURCE_FILE);
727:       assertEquals(12, Node.COLUMN_BITS);
728:       assertEquals(46, Node.IS_NAMESPACE);
729:       assertEquals(54, Node.SLASH_V);
730:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
731:       assertEquals(40, Node.ORIGINALNAME_PROP);
732:       assertEquals(37, Node.OPT_ARG_NAME);
733:       assertEquals(50, Node.FREE_CALL);
734:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
735:       assertEquals(32, Node.INCRDECR_PROP);
736:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
737:       assertEquals(56, Node.CHANGE_TIME);
738:       assertEquals(51, Node.STATIC_SOURCE_FILE);
739:       assertEquals(47, Node.IS_DISPATCHER);
740:       assertEquals(2, Node.POST_FLAG);
741:       assertEquals(12, Node.COLUMN_BITS);
742:       assertEquals(46, Node.IS_NAMESPACE);
743:       assertEquals(49, Node.DIRECT_EVAL);
744:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
745:       assertEquals(37, Node.OPT_ARG_NAME);
746:       assertEquals(53, Node.INPUT_ID);
747:       assertEquals(52, Node.LENGTH);
748:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
749:       assertEquals(36, Node.QUOTED_PROP);
750:       assertEquals(57, Node.REFLECTED_OBJECT);
751:       assertEquals(30, Node.VAR_ARGS_NAME);
752:       assertEquals(29, Node.JSDOC_INFO_PROP);
753:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
754:       assertEquals(55, Node.INFERRED_FUNCTION);
755:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
756:       assertEquals(57, Node.LAST_PROP);
757:       assertEquals(15, Node.NO_SIDE_EFFECTS);
758:       assertEquals(39, Node.EMPTY_BLOCK);
759:       assertEquals(48, Node.DIRECTIVES);
760:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
761:       assertEquals(8, Node.FLAG_NO_THROWS);
762:       assertEquals(40, Node.ORIGINALNAME_PROP);
763:       assertEquals(4095, Node.COLUMN_MASK);
764:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
765:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
766:       assertEquals(54, Node.SLASH_V);
767:       assertEquals(43, Node.IS_CONSTANT_NAME);
768:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
769:       assertEquals(1, Node.DECR_FLAG);
770:       assertEquals(50, Node.FREE_CALL);
771:       assertEquals(32, Node.INCRDECR_PROP);
772:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
773:       assertNotNull(iterable0);
774:       assertFalse(node1.equals((Object)node2));
775:       assertFalse(node1.equals((Object)node0));
776:       assertFalse(node1.equals((Object)node3));
777:       assertFalse(node2.equals((Object)node0));
778:       assertFalse(node2.equals((Object)node1));
779:       assertFalse(node3.equals((Object)node1));
780:       assertFalse(node3.equals((Object)node0));
781:       assertFalse(node1.isFalse());
782:       assertFalse(node1.isHook());
783:       assertFalse(node1.isThis());
784:       assertFalse(node1.isComma());
785:       assertFalse(node1.isInc());
786:       assertFalse(node1.isGetProp());
787:       assertFalse(node1.isNot());
788:       assertFalse(node1.isAnd());
789:       assertFalse(node1.isString());
790:       assertFalse(node1.isObjectLit());
791:       assertEquals((-1), node1.getCharno());
792:       assertFalse(node1.isSwitch());
793:       assertFalse(node1.isCast());
794:       assertFalse(node1.isFor());
795:       assertFalse(node1.isLabelName());
796:       assertFalse(node1.isIf());
797:       assertFalse(node1.isNE());
798:       assertFalse(node1.isNumber());
799:       assertFalse(node1.isGetterDef());
800:       assertFalse(node1.isTry());
801:       assertFalse(node1.isIn());
802:       assertFalse(node1.isScript());
803:       assertFalse(node1.isCase());
804:       assertFalse(node1.hasOneChild());
805:       assertFalse(node1.isWith());
806:       assertFalse(node1.isCatch());
807:       assertFalse(node1.hasMoreThanOneChild());
808:       assertFalse(node1.isRegExp());
809:       assertFalse(node1.isInstanceOf());
810:       assertEquals((-1), node1.getLineno());
811:       assertFalse(node1.isName());
812:       assertFalse(node1.isStringKey());
813:       assertFalse(node1.isVar());
814:       assertTrue(node1.isThrow());
815:       assertFalse(node1.isNull());
816:       assertFalse(node1.isAdd());
817:       assertFalse(node1.isBlock());
818:       assertFalse(node1.isSetterDef());
819:       assertFalse(node1.isNew());
820:       assertFalse(node1.isDo());
821:       assertFalse(node1.isDefaultCase());
822:       assertFalse(node1.isContinue());
823:       assertFalse(node1.isFunction());
824:       assertEquals(0, node1.getChildCount());
825:       assertFalse(node1.isDebugger());
826:       assertFalse(node1.isParamList());
827:       assertFalse(node1.isArrayLit());
828:       assertFalse(node1.isEmpty());
829:       assertFalse(node1.isAssign());
830:       assertFalse(node1.isGetElem());
831:       assertFalse(node1.isTypeOf());
832:       assertFalse(node1.hasChildren());
833:       assertFalse(node1.isDec());
834:       assertEquals((-1), node1.getSourcePosition());
835:       assertFalse(node1.isLabel());
836:       assertFalse(node1.isAssignAdd());
837:       assertFalse(node1.isOr());
838:       assertFalse(node1.isReturn());
839:       assertEquals(49, node1.getType());
840:       assertFalse(node1.isWhile());
841:       assertFalse(node1.isTrue());
842:       assertFalse(node1.isCall());
843:       assertFalse(node1.isExprResult());
844:       assertFalse(node1.isVoid());
845:       assertFalse(node1.isDelProp());
846:       assertFalse(node1.isBreak());
847:       assertFalse(node2.isCatch());
848:       assertEquals(0, node2.getChildCount());
849:       assertEquals(40, node2.getType());
850:       assertFalse(node2.isDefaultCase());
851:       assertFalse(node2.isTry());
852:       assertFalse(node2.isSetterDef());
853:       assertFalse(node2.isFor());
854:       assertFalse(node2.isBlock());
855:       assertFalse(node2.isTrue());
856:       assertFalse(node2.isRegExp());
857:       assertFalse(node2.isNull());
858:       assertFalse(node2.isNE());
859:       assertFalse(node2.isDelProp());
860:       assertFalse(node2.isIf());
861:       assertFalse(node2.isName());
862:       assertFalse(node2.isVoid());
863:       assertFalse(node2.isCall());
864:       assertFalse(node2.isAssignAdd());
865:       assertFalse(node2.hasMoreThanOneChild());
866:       assertFalse(node2.isOr());
867:       assertFalse(node2.isLabel());
868:       assertFalse(node2.isGetterDef());
869:       assertFalse(node2.isNumber());
870:       assertFalse(node2.isCase());
871:       assertTrue(node2.isString());
872:       assertFalse(node2.isNew());
873:       assertFalse(node2.isAdd());
874:       assertFalse(node2.isEmpty());
875:       assertFalse(node2.isDo());
876:       assertFalse(node2.isArrayLit());
877:       assertFalse(node2.isVar());
878:       assertFalse(node2.isStringKey());
879:       assertEquals((-1), node2.getCharno());
880:       assertFalse(node2.isParamList());
881:       assertFalse(node2.isSwitch());
882:       assertFalse(node2.isLabelName());
883:       assertFalse(node2.isInstanceOf());
884:       assertFalse(node2.isAnd());
885:       assertFalse(node2.isObjectLit());
886:       assertFalse(node2.isNot());
887:       assertFalse(node2.isThis());
888:       assertFalse(node2.isScript());
889:       assertFalse(node2.isGetProp());
890:       assertFalse(node2.hasOneChild());
891:       assertFalse(node2.isAssign());
892:       assertFalse(node2.isHook());
893:       assertFalse(node2.hasChildren());
894:       assertFalse(node2.isTypeOf());
895:       assertFalse(node2.isComma());
896:       assertFalse(node2.isDec());
897:       assertFalse(node2.isWith());
898:       assertFalse(node2.isGetElem());
899:       assertEquals((-1), node2.getLineno());
900:       assertFalse(node2.isExprResult());
901:       assertFalse(node2.isBreak());
902:       assertFalse(node2.isContinue());
903:       assertFalse(node2.isIn());
904:       assertFalse(node2.isReturn());
905:       assertEquals((-1), node2.getSourcePosition());
906:       assertFalse(node2.isWhile());
907:       assertFalse(node2.isInc());
908:       assertFalse(node2.isCast());
909:       assertFalse(node2.isFalse());
910:       assertFalse(node2.isThrow());
911:       assertFalse(node2.isDebugger());
912:       assertFalse(node2.isFunction());
913:       assertFalse(node3.isNumber());
914:       assertFalse(node3.isDec());
915:       assertFalse(node3.isTypeOf());
916:       assertFalse(node3.isReturn());
917:       assertFalse(node3.isOr());
918:       assertFalse(node3.isAssign());
919:       assertFalse(node3.isLabel());
920:       assertFalse(node3.hasChildren());
921:       assertEquals((-1), node3.getSourcePosition());
922:       assertFalse(node3.hasOneChild());
923:       assertFalse(node3.isAssignAdd());
924:       assertFalse(node3.isDo());
925:       assertFalse(node3.isWith());
926:       assertFalse(node3.isWhile());
927:       assertFalse(node3.isBlock());
928:       assertFalse(node3.isInstanceOf());
929:       assertFalse(node3.hasMoreThanOneChild());
930:       assertFalse(node3.isGetElem());
931:       assertFalse(node3.isCall());
932:       assertFalse(node3.isName());
933:       assertFalse(node3.isExprResult());
934:       assertEquals((-1), node3.getLineno());
935:       assertFalse(node3.isThrow());
936:       assertFalse(node3.isFalse());
937:       assertFalse(node3.isComma());
938:       assertFalse(node3.isGetProp());
939:       assertFalse(node3.isInc());
940:       assertFalse(node3.isSetterDef());
941:       assertFalse(node3.isFunction());
942:       assertFalse(node3.isNot());
943:       assertFalse(node3.isObjectLit());
944:       assertEquals(40, node3.getType());
945:       assertFalse(node3.isDebugger());
946:       assertFalse(node3.isCast());
947:       assertFalse(node3.isAnd());
948:       assertFalse(node3.isContinue());
949:       assertFalse(node3.isIf());
950:       assertFalse(node3.isGetterDef());
951:       assertFalse(node3.isDelProp());
952:       assertFalse(node3.isNE());
953:       assertFalse(node3.isFor());
954:       assertFalse(node3.isIn());
955:       assertFalse(node3.isEmpty());
956:       assertFalse(node3.isTry());
957:       assertFalse(node3.isCase());
958:       assertFalse(node3.isRegExp());
959:       assertFalse(node3.isTrue());
960:       assertFalse(node3.isCatch());
961:       assertFalse(node3.isVoid());
962:       assertFalse(node3.isBreak());
963:       assertFalse(node3.isNull());
964:       assertFalse(node3.isParamList());
965:       assertFalse(node3.isStringKey());
966:       assertFalse(node3.isThis());
967:       assertFalse(node3.isHook());
968:       assertFalse(node3.isVar());
969:       assertFalse(node3.isNew());
970:       assertTrue(node3.isString());
971:       assertFalse(node3.isAdd());
972:       assertFalse(node3.isDefaultCase());
973:       assertFalse(node3.isScript());
974:       assertFalse(node3.isSwitch());
975:       assertEquals((-1), node3.getCharno());
976:       assertEquals(0, node3.getChildCount());
977:       assertFalse(node3.isLabelName());
978:       assertFalse(node3.isArrayLit());
979:       
980:       boolean boolean0 = node1.isGetProp();
981:       assertFalse(boolean0);
982:       assertNotSame(node1, node0);
983:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
984:       assertEquals(39, Node.EMPTY_BLOCK);
985:       assertEquals(8, Node.FLAG_NO_THROWS);
986:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
987:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
988:       assertEquals(50, Node.FREE_CALL);
989:       assertEquals(4095, Node.COLUMN_MASK);
990:       assertEquals(40, Node.ORIGINALNAME_PROP);
991:       assertEquals(57, Node.REFLECTED_OBJECT);
992:       assertEquals(48, Node.DIRECTIVES);
993:       assertEquals(54, Node.SLASH_V);
994:       assertEquals(43, Node.IS_CONSTANT_NAME);
995:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
996:       assertEquals(12, Node.COLUMN_BITS);
997:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
998:       assertEquals(32, Node.INCRDECR_PROP);
999:       assertEquals(1, Node.DECR_FLAG);
1000:       assertEquals(2, Node.POST_FLAG);
1001:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1002:       assertEquals(56, Node.CHANGE_TIME);
1003:       assertEquals(47, Node.IS_DISPATCHER);
1004:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1005:       assertEquals(46, Node.IS_NAMESPACE);
1006:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1007:       assertEquals(49, Node.DIRECT_EVAL);
1008:       assertEquals(37, Node.OPT_ARG_NAME);
1009:       assertEquals(57, Node.LAST_PROP);
1010:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1011:       assertEquals(30, Node.VAR_ARGS_NAME);
1012:       assertEquals(52, Node.LENGTH);
1013:       assertEquals(36, Node.QUOTED_PROP);
1014:       assertEquals(55, Node.INFERRED_FUNCTION);
1015:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1016:       assertEquals(29, Node.JSDOC_INFO_PROP);
1017:       assertEquals(53, Node.INPUT_ID);
1018:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1019:       assertFalse(node1.equals((Object)node2));
1020:       assertFalse(node1.equals((Object)node0));
1021:       assertFalse(node1.equals((Object)node3));
1022:       assertFalse(node1.isFalse());
1023:       assertFalse(node1.isHook());
1024:       assertFalse(node1.isThis());
1025:       assertFalse(node1.isComma());
1026:       assertFalse(node1.isInc());
1027:       assertFalse(node1.isGetProp());
1028:       assertFalse(node1.isNot());
1029:       assertFalse(node1.isAnd());
1030:       assertFalse(node1.isString());
1031:       assertFalse(node1.isObjectLit());
1032:       assertEquals((-1), node1.getCharno());
1033:       assertFalse(node1.isSwitch());
1034:       assertFalse(node1.isCast());
1035:       assertFalse(node1.isFor());
1036:       assertFalse(node1.isLabelName());
1037:       assertFalse(node1.isIf());
1038:       assertFalse(node1.isNE());
1039:       assertFalse(node1.isNumber());
1040:       assertFalse(node1.isGetterDef());
1041:       assertFalse(node1.isTry());
1042:       assertFalse(node1.isIn());
1043:       assertFalse(node1.isScript());
1044:       assertFalse(node1.isCase());
1045:       assertFalse(node1.hasOneChild());
1046:       assertFalse(node1.isWith());
1047:       assertFalse(node1.isCatch());
1048:       assertFalse(node1.hasMoreThanOneChild());
1049:       assertFalse(node1.isRegExp());
1050:       assertFalse(node1.isInstanceOf());
1051:       assertEquals((-1), node1.getLineno());
1052:       assertFalse(node1.isName());
1053:       assertFalse(node1.isStringKey());
1054:       assertFalse(node1.isVar());
1055:       assertTrue(node1.isThrow());
1056:       assertFalse(node1.isNull());
1057:       assertFalse(node1.isAdd());
1058:       assertFalse(node1.isBlock());
1059:       assertFalse(node1.isSetterDef());
1060:       assertFalse(node1.isNew());
1061:       assertFalse(node1.isDo());
1062:       assertFalse(node1.isDefaultCase());
1063:       assertFalse(node1.isContinue());
1064:       assertFalse(node1.isFunction());
1065:       assertEquals(0, node1.getChildCount());
1066:       assertFalse(node1.isDebugger());
1067:       assertFalse(node1.isParamList());
1068:       assertFalse(node1.isArrayLit());
1069:       assertFalse(node1.isEmpty());
1070:       assertFalse(node1.isAssign());
1071:       assertFalse(node1.isGetElem());
1072:       assertFalse(node1.isTypeOf());
1073:       assertFalse(node1.hasChildren());
1074:       assertFalse(node1.isDec());
1075:       assertEquals((-1), node1.getSourcePosition());
1076:       assertFalse(node1.isLabel());
1077:       assertFalse(node1.isAssignAdd());
1078:       assertFalse(node1.isOr());
1079:       assertFalse(node1.isReturn());
1080:       assertEquals(49, node1.getType());
1081:       assertFalse(node1.isWhile());
1082:       assertFalse(node1.isTrue());
1083:       assertFalse(node1.isCall());
1084:       assertFalse(node1.isExprResult());
1085:       assertFalse(node1.isVoid());
1086:       assertFalse(node1.isDelProp());
1087:       assertFalse(node1.isBreak());
1088:       
1089:       boolean boolean1 = node3.hasChildren();
1090:       assertFalse(boolean1);
1091:       assertNotSame(node1, node0);
1092:       assertSame(node2, node3);
1093:       assertSame(node3, node2);
1094:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1095:       assertEquals(39, Node.EMPTY_BLOCK);
1096:       assertEquals(8, Node.FLAG_NO_THROWS);
1097:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1098:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1099:       assertEquals(50, Node.FREE_CALL);
1100:       assertEquals(4095, Node.COLUMN_MASK);
1101:       assertEquals(40, Node.ORIGINALNAME_PROP);
1102:       assertEquals(57, Node.REFLECTED_OBJECT);
1103:       assertEquals(48, Node.DIRECTIVES);
1104:       assertEquals(54, Node.SLASH_V);
1105:       assertEquals(43, Node.IS_CONSTANT_NAME);
1106:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1107:       assertEquals(12, Node.COLUMN_BITS);
1108:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1109:       assertEquals(32, Node.INCRDECR_PROP);
1110:       assertEquals(1, Node.DECR_FLAG);
1111:       assertEquals(2, Node.POST_FLAG);
1112:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1113:       assertEquals(56, Node.CHANGE_TIME);
1114:       assertEquals(47, Node.IS_DISPATCHER);
1115:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1116:       assertEquals(46, Node.IS_NAMESPACE);
1117:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1118:       assertEquals(49, Node.DIRECT_EVAL);
1119:       assertEquals(37, Node.OPT_ARG_NAME);
1120:       assertEquals(57, Node.LAST_PROP);
1121:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1122:       assertEquals(30, Node.VAR_ARGS_NAME);
1123:       assertEquals(52, Node.LENGTH);
1124:       assertEquals(36, Node.QUOTED_PROP);
1125:       assertEquals(55, Node.INFERRED_FUNCTION);
1126:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1127:       assertEquals(29, Node.JSDOC_INFO_PROP);
1128:       assertEquals(53, Node.INPUT_ID);
1129:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1130:       assertEquals(43, Node.IS_CONSTANT_NAME);
1131:       assertEquals(36, Node.QUOTED_PROP);
1132:       assertEquals(48, Node.DIRECTIVES);
1133:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1134:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1135:       assertEquals(4095, Node.COLUMN_MASK);
1136:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1137:       assertEquals(29, Node.JSDOC_INFO_PROP);
1138:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1139:       assertEquals(2, Node.POST_FLAG);
1140:       assertEquals(56, Node.CHANGE_TIME);
1141:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1142:       assertEquals(47, Node.IS_DISPATCHER);
1143:       assertEquals(57, Node.REFLECTED_OBJECT);
1144:       assertEquals(53, Node.INPUT_ID);
1145:       assertEquals(52, Node.LENGTH);
1146:       assertEquals(8, Node.FLAG_NO_THROWS);
1147:       assertEquals(55, Node.INFERRED_FUNCTION);
1148:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1149:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1150:       assertEquals(39, Node.EMPTY_BLOCK);
1151:       assertEquals(49, Node.DIRECT_EVAL);
1152:       assertEquals(30, Node.VAR_ARGS_NAME);
1153:       assertEquals(1, Node.DECR_FLAG);
1154:       assertEquals(57, Node.LAST_PROP);
1155:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1156:       assertEquals(12, Node.COLUMN_BITS);
1157:       assertEquals(46, Node.IS_NAMESPACE);
1158:       assertEquals(54, Node.SLASH_V);
1159:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1160:       assertEquals(40, Node.ORIGINALNAME_PROP);
1161:       assertEquals(37, Node.OPT_ARG_NAME);
1162:       assertEquals(50, Node.FREE_CALL);
1163:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1164:       assertEquals(32, Node.INCRDECR_PROP);
1165:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1166:       assertEquals(56, Node.CHANGE_TIME);
1167:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1168:       assertEquals(47, Node.IS_DISPATCHER);
1169:       assertEquals(2, Node.POST_FLAG);
1170:       assertEquals(12, Node.COLUMN_BITS);
1171:       assertEquals(46, Node.IS_NAMESPACE);
1172:       assertEquals(49, Node.DIRECT_EVAL);
1173:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1174:       assertEquals(37, Node.OPT_ARG_NAME);
1175:       assertEquals(53, Node.INPUT_ID);
1176:       assertEquals(52, Node.LENGTH);
1177:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1178:       assertEquals(36, Node.QUOTED_PROP);
1179:       assertEquals(57, Node.REFLECTED_OBJECT);
1180:       assertEquals(30, Node.VAR_ARGS_NAME);
1181:       assertEquals(29, Node.JSDOC_INFO_PROP);
1182:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1183:       assertEquals(55, Node.INFERRED_FUNCTION);
1184:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1185:       assertEquals(57, Node.LAST_PROP);
1186:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1187:       assertEquals(39, Node.EMPTY_BLOCK);
1188:       assertEquals(48, Node.DIRECTIVES);
1189:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1190:       assertEquals(8, Node.FLAG_NO_THROWS);
1191:       assertEquals(40, Node.ORIGINALNAME_PROP);
1192:       assertEquals(4095, Node.COLUMN_MASK);
1193:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1194:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1195:       assertEquals(54, Node.SLASH_V);
1196:       assertEquals(43, Node.IS_CONSTANT_NAME);
1197:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1198:       assertEquals(1, Node.DECR_FLAG);
1199:       assertEquals(50, Node.FREE_CALL);
1200:       assertEquals(32, Node.INCRDECR_PROP);
1201:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1202:       assertFalse(node1.equals((Object)node2));
1203:       assertFalse(node1.equals((Object)node0));
1204:       assertFalse(node1.equals((Object)node3));
1205:       assertFalse(node2.equals((Object)node0));
1206:       assertFalse(node2.equals((Object)node1));
1207:       assertFalse(node3.equals((Object)node1));
1208:       assertFalse(node3.equals((Object)node0));
1209:       assertTrue(boolean1 == boolean0);
1210:       assertFalse(node1.isFalse());
1211:       assertFalse(node1.isHook());
1212:       assertFalse(node1.isThis());
1213:       assertFalse(node1.isComma());
1214:       assertFalse(node1.isInc());
1215:       assertFalse(node1.isGetProp());
1216:       assertFalse(node1.isNot());
1217:       assertFalse(node1.isAnd());
1218:       assertFalse(node1.isString());
1219:       assertFalse(node1.isObjectLit());
1220:       assertEquals((-1), node1.getCharno());
1221:       assertFalse(node1.isSwitch());
1222:       assertFalse(node1.isCast());
1223:       assertFalse(node1.isFor());
1224:       assertFalse(node1.isLabelName());
1225:       assertFalse(node1.isIf());
1226:       assertFalse(node1.isNE());
1227:       assertFalse(node1.isNumber());
1228:       assertFalse(node1.isGetterDef());
1229:       assertFalse(node1.isTry());
1230:       assertFalse(node1.isIn());
1231:       assertFalse(node1.isScript());
1232:       assertFalse(node1.isCase());
1233:       assertFalse(node1.hasOneChild());
1234:       assertFalse(node1.isWith());
1235:       assertFalse(node1.isCatch());
1236:       assertFalse(node1.hasMoreThanOneChild());
1237:       assertFalse(node1.isRegExp());
1238:       assertFalse(node1.isInstanceOf());
1239:       assertEquals((-1), node1.getLineno());
1240:       assertFalse(node1.isName());
1241:       assertFalse(node1.isStringKey());
1242:       assertFalse(node1.isVar());
1243:       assertTrue(node1.isThrow());
1244:       assertFalse(node1.isNull());
1245:       assertFalse(node1.isAdd());
1246:       assertFalse(node1.isBlock());
1247:       assertFalse(node1.isSetterDef());
1248:       assertFalse(node1.isNew());
1249:       assertFalse(node1.isDo());
1250:       assertFalse(node1.isDefaultCase());
1251:       assertFalse(node1.isContinue());
1252:       assertFalse(node1.isFunction());
1253:       assertEquals(0, node1.getChildCount());
1254:       assertFalse(node1.isDebugger());
1255:       assertFalse(node1.isParamList());
1256:       assertFalse(node1.isArrayLit());
1257:       assertFalse(node1.isEmpty());
1258:       assertFalse(node1.isAssign());
1259:       assertFalse(node1.isGetElem());
1260:       assertFalse(node1.isTypeOf());
1261:       assertFalse(node1.hasChildren());
1262:       assertFalse(node1.isDec());
1263:       assertEquals((-1), node1.getSourcePosition());
1264:       assertFalse(node1.isLabel());
1265:       assertFalse(node1.isAssignAdd());
1266:       assertFalse(node1.isOr());
1267:       assertFalse(node1.isReturn());
1268:       assertEquals(49, node1.getType());
1269:       assertFalse(node1.isWhile());
1270:       assertFalse(node1.isTrue());
1271:       assertFalse(node1.isCall());
1272:       assertFalse(node1.isExprResult());
1273:       assertFalse(node1.isVoid());
1274:       assertFalse(node1.isDelProp());
1275:       assertFalse(node1.isBreak());
1276:       assertFalse(node2.isCatch());
1277:       assertEquals(0, node2.getChildCount());
1278:       assertEquals(40, node2.getType());
1279:       assertFalse(node2.isDefaultCase());
1280:       assertFalse(node2.isTry());
1281:       assertFalse(node2.isSetterDef());
1282:       assertFalse(node2.isFor());
1283:       assertFalse(node2.isBlock());
1284:       assertFalse(node2.isTrue());
1285:       assertFalse(node2.isRegExp());
1286:       assertFalse(node2.isNull());
1287:       assertFalse(node2.isNE());
1288:       assertFalse(node2.isDelProp());
1289:       assertFalse(node2.isIf());
1290:       assertFalse(node2.isName());
1291:       assertFalse(node2.isVoid());
1292:       assertFalse(node2.isCall());
1293:       assertFalse(node2.isAssignAdd());
1294:       assertFalse(node2.hasMoreThanOneChild());
1295:       assertFalse(node2.isOr());
1296:       assertFalse(node2.isLabel());
1297:       assertFalse(node2.isGetterDef());
1298:       assertFalse(node2.isNumber());
1299:       assertFalse(node2.isCase());
1300:       assertTrue(node2.isString());
1301:       assertFalse(node2.isNew());
1302:       assertFalse(node2.isAdd());
1303:       assertFalse(node2.isEmpty());
1304:       assertFalse(node2.isDo());
1305:       assertFalse(node2.isArrayLit());
1306:       assertFalse(node2.isVar());
1307:       assertFalse(node2.isStringKey());
1308:       assertEquals((-1), node2.getCharno());
1309:       assertFalse(node2.isParamList());
1310:       assertFalse(node2.isSwitch());
1311:       assertFalse(node2.isLabelName());
1312:       assertFalse(node2.isInstanceOf());
1313:       assertFalse(node2.isAnd());
1314:       assertFalse(node2.isObjectLit());
1315:       assertFalse(node2.isNot());
1316:       assertFalse(node2.isThis());
1317:       assertFalse(node2.isScript());
1318:       assertFalse(node2.isGetProp());
1319:       assertFalse(node2.hasOneChild());
1320:       assertFalse(node2.isAssign());
1321:       assertFalse(node2.isHook());
1322:       assertFalse(node2.hasChildren());
1323:       assertFalse(node2.isTypeOf());
1324:       assertFalse(node2.isComma());
1325:       assertFalse(node2.isDec());
1326:       assertFalse(node2.isWith());
1327:       assertFalse(node2.isGetElem());
1328:       assertEquals((-1), node2.getLineno());
1329:       assertFalse(node2.isExprResult());
1330:       assertFalse(node2.isBreak());
1331:       assertFalse(node2.isContinue());
1332:       assertFalse(node2.isIn());
1333:       assertFalse(node2.isReturn());
1334:       assertEquals((-1), node2.getSourcePosition());
1335:       assertFalse(node2.isWhile());
1336:       assertFalse(node2.isInc());
1337:       assertFalse(node2.isCast());
1338:       assertFalse(node2.isFalse());
1339:       assertFalse(node2.isThrow());
1340:       assertFalse(node2.isDebugger());
1341:       assertFalse(node2.isFunction());
1342:       assertFalse(node3.isNumber());
1343:       assertFalse(node3.isDec());
1344:       assertFalse(node3.isTypeOf());
1345:       assertFalse(node3.isReturn());
1346:       assertFalse(node3.isOr());
1347:       assertFalse(node3.isAssign());
1348:       assertFalse(node3.isLabel());
1349:       assertFalse(node3.hasChildren());
1350:       assertEquals((-1), node3.getSourcePosition());
1351:       assertFalse(node3.hasOneChild());
1352:       assertFalse(node3.isAssignAdd());
1353:       assertFalse(node3.isDo());
1354:       assertFalse(node3.isWith());
1355:       assertFalse(node3.isWhile());
1356:       assertFalse(node3.isBlock());
1357:       assertFalse(node3.isInstanceOf());
1358:       assertFalse(node3.hasMoreThanOneChild());
1359:       assertFalse(node3.isGetElem());
1360:       assertFalse(node3.isCall());
1361:       assertFalse(node3.isName());
1362:       assertFalse(node3.isExprResult());
1363:       assertEquals((-1), node3.getLineno());
1364:       assertFalse(node3.isThrow());
1365:       assertFalse(node3.isFalse());
1366:       assertFalse(node3.isComma());
1367:       assertFalse(node3.isGetProp());
1368:       assertFalse(node3.isInc());
1369:       assertFalse(node3.isSetterDef());
1370:       assertFalse(node3.isFunction());
1371:       assertFalse(node3.isNot());
1372:       assertFalse(node3.isObjectLit());
1373:       assertEquals(40, node3.getType());
1374:       assertFalse(node3.isDebugger());
1375:       assertFalse(node3.isCast());
1376:       assertFalse(node3.isAnd());
1377:       assertFalse(node3.isContinue());
1378:       assertFalse(node3.isIf());
1379:       assertFalse(node3.isGetterDef());
1380:       assertFalse(node3.isDelProp());
1381:       assertFalse(node3.isNE());
1382:       assertFalse(node3.isFor());
1383:       assertFalse(node3.isIn());
1384:       assertFalse(node3.isEmpty());
1385:       assertFalse(node3.isTry());
1386:       assertFalse(node3.isCase());
1387:       assertFalse(node3.isRegExp());
1388:       assertFalse(node3.isTrue());
1389:       assertFalse(node3.isCatch());
1390:       assertFalse(node3.isVoid());
1391:       assertFalse(node3.isBreak());
1392:       assertFalse(node3.isNull());
1393:       assertFalse(node3.isParamList());
1394:       assertFalse(node3.isStringKey());
1395:       assertFalse(node3.isThis());
1396:       assertFalse(node3.isHook());
1397:       assertFalse(node3.isVar());
1398:       assertFalse(node3.isNew());
1399:       assertTrue(node3.isString());
1400:       assertFalse(node3.isAdd());
1401:       assertFalse(node3.isDefaultCase());
1402:       assertFalse(node3.isScript());
1403:       assertFalse(node3.isSwitch());
1404:       assertEquals((-1), node3.getCharno());
1405:       assertEquals(0, node3.getChildCount());
1406:       assertFalse(node3.isLabelName());
1407:       assertFalse(node3.isArrayLit());
1408:       
1409:       boolean boolean2 = node2.isSwitch();
1410:       assertFalse(boolean2);
1411:       assertSame(node2, node3);
1412:       assertEquals(43, Node.IS_CONSTANT_NAME);
1413:       assertEquals(36, Node.QUOTED_PROP);
1414:       assertEquals(48, Node.DIRECTIVES);
1415:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1416:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1417:       assertEquals(4095, Node.COLUMN_MASK);
1418:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1419:       assertEquals(29, Node.JSDOC_INFO_PROP);
1420:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1421:       assertEquals(2, Node.POST_FLAG);
1422:       assertEquals(56, Node.CHANGE_TIME);
1423:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1424:       assertEquals(47, Node.IS_DISPATCHER);
1425:       assertEquals(57, Node.REFLECTED_OBJECT);
1426:       assertEquals(53, Node.INPUT_ID);
1427:       assertEquals(52, Node.LENGTH);
1428:       assertEquals(8, Node.FLAG_NO_THROWS);
1429:       assertEquals(55, Node.INFERRED_FUNCTION);
1430:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1431:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1432:       assertEquals(39, Node.EMPTY_BLOCK);
1433:       assertEquals(49, Node.DIRECT_EVAL);
1434:       assertEquals(30, Node.VAR_ARGS_NAME);
1435:       assertEquals(1, Node.DECR_FLAG);
1436:       assertEquals(57, Node.LAST_PROP);
1437:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1438:       assertEquals(12, Node.COLUMN_BITS);
1439:       assertEquals(46, Node.IS_NAMESPACE);
1440:       assertEquals(54, Node.SLASH_V);
1441:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1442:       assertEquals(40, Node.ORIGINALNAME_PROP);
1443:       assertEquals(37, Node.OPT_ARG_NAME);
1444:       assertEquals(50, Node.FREE_CALL);
1445:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1446:       assertEquals(32, Node.INCRDECR_PROP);
1447:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1448:       assertFalse(node2.equals((Object)node0));
1449:       assertFalse(node2.equals((Object)node1));
1450:       assertTrue(boolean2 == boolean0);
1451:       assertTrue(boolean2 == boolean1);
1452:       assertFalse(node2.isCatch());
1453:       assertEquals(0, node2.getChildCount());
1454:       assertEquals(40, node2.getType());
1455:       assertFalse(node2.isDefaultCase());
1456:       assertFalse(node2.isTry());
1457:       assertFalse(node2.isSetterDef());
1458:       assertFalse(node2.isFor());
1459:       assertFalse(node2.isBlock());
1460:       assertFalse(node2.isTrue());
1461:       assertFalse(node2.isRegExp());
1462:       assertFalse(node2.isNull());
1463:       assertFalse(node2.isNE());
1464:       assertFalse(node2.isDelProp());
1465:       assertFalse(node2.isIf());
1466:       assertFalse(node2.isName());
1467:       assertFalse(node2.isVoid());
1468:       assertFalse(node2.isCall());
1469:       assertFalse(node2.isAssignAdd());
1470:       assertFalse(node2.hasMoreThanOneChild());
1471:       assertFalse(node2.isOr());
1472:       assertFalse(node2.isLabel());
1473:       assertFalse(node2.isGetterDef());
1474:       assertFalse(node2.isNumber());
1475:       assertFalse(node2.isCase());
1476:       assertTrue(node2.isString());
1477:       assertFalse(node2.isNew());
1478:       assertFalse(node2.isAdd());
1479:       assertFalse(node2.isEmpty());
1480:       assertFalse(node2.isDo());
1481:       assertFalse(node2.isArrayLit());
1482:       assertFalse(node2.isVar());
1483:       assertFalse(node2.isStringKey());
1484:       assertEquals((-1), node2.getCharno());
1485:       assertFalse(node2.isParamList());
1486:       assertFalse(node2.isSwitch());
1487:       assertFalse(node2.isLabelName());
1488:       assertFalse(node2.isInstanceOf());
1489:       assertFalse(node2.isAnd());
1490:       assertFalse(node2.isObjectLit());
1491:       assertFalse(node2.isNot());
1492:       assertFalse(node2.isThis());
1493:       assertFalse(node2.isScript());
1494:       assertFalse(node2.isGetProp());
1495:       assertFalse(node2.hasOneChild());
1496:       assertFalse(node2.isAssign());
1497:       assertFalse(node2.isHook());
1498:       assertFalse(node2.hasChildren());
1499:       assertFalse(node2.isTypeOf());
1500:       assertFalse(node2.isComma());
1501:       assertFalse(node2.isDec());
1502:       assertFalse(node2.isWith());
1503:       assertFalse(node2.isGetElem());
1504:       assertEquals((-1), node2.getLineno());
1505:       assertFalse(node2.isExprResult());
1506:       assertFalse(node2.isBreak());
1507:       assertFalse(node2.isContinue());
1508:       assertFalse(node2.isIn());
1509:       assertFalse(node2.isReturn());
1510:       assertEquals((-1), node2.getSourcePosition());
1511:       assertFalse(node2.isWhile());
1512:       assertFalse(node2.isInc());
1513:       assertFalse(node2.isCast());
1514:       assertFalse(node2.isFalse());
1515:       assertFalse(node2.isThrow());
1516:       assertFalse(node2.isDebugger());
1517:       assertFalse(node2.isFunction());
1518:       
1519:       Node node4 = node0.cloneNode();
1520:       assertNotSame(node0, node4);
1521:       assertNotSame(node0, node1);
1522:       assertNotSame(node4, node0);
1523:       assertNotSame(node4, node1);
1524:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1525:       assertEquals(47, Node.IS_DISPATCHER);
1526:       assertEquals(36, Node.QUOTED_PROP);
1527:       assertEquals(29, Node.JSDOC_INFO_PROP);
1528:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1529:       assertEquals(53, Node.INPUT_ID);
1530:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1531:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1532:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1533:       assertEquals(30, Node.VAR_ARGS_NAME);
1534:       assertEquals(46, Node.IS_NAMESPACE);
1535:       assertEquals(43, Node.IS_CONSTANT_NAME);
1536:       assertEquals(2, Node.POST_FLAG);
1537:       assertEquals(40, Node.ORIGINALNAME_PROP);
1538:       assertEquals(57, Node.REFLECTED_OBJECT);
1539:       assertEquals(52, Node.LENGTH);
1540:       assertEquals(50, Node.FREE_CALL);
1541:       assertEquals(54, Node.SLASH_V);
1542:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1543:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1544:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1545:       assertEquals(8, Node.FLAG_NO_THROWS);
1546:       assertEquals(57, Node.LAST_PROP);
1547:       assertEquals(1, Node.DECR_FLAG);
1548:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1549:       assertEquals(39, Node.EMPTY_BLOCK);
1550:       assertEquals(12, Node.COLUMN_BITS);
1551:       assertEquals(4095, Node.COLUMN_MASK);
1552:       assertEquals(55, Node.INFERRED_FUNCTION);
1553:       assertEquals(32, Node.INCRDECR_PROP);
1554:       assertEquals(56, Node.CHANGE_TIME);
1555:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1556:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1557:       assertEquals(48, Node.DIRECTIVES);
1558:       assertEquals(49, Node.DIRECT_EVAL);
1559:       assertEquals(37, Node.OPT_ARG_NAME);
1560:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1561:       assertEquals(57, Node.LAST_PROP);
1562:       assertEquals(1, Node.DECR_FLAG);
1563:       assertEquals(49, Node.DIRECT_EVAL);
1564:       assertEquals(57, Node.REFLECTED_OBJECT);
1565:       assertEquals(46, Node.IS_NAMESPACE);
1566:       assertEquals(52, Node.LENGTH);
1567:       assertEquals(50, Node.FREE_CALL);
1568:       assertEquals(54, Node.SLASH_V);
1569:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1570:       assertEquals(56, Node.CHANGE_TIME);
1571:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1572:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1573:       assertEquals(48, Node.DIRECTIVES);
1574:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1575:       assertEquals(37, Node.OPT_ARG_NAME);
1576:       assertEquals(12, Node.COLUMN_BITS);
1577:       assertEquals(32, Node.INCRDECR_PROP);
1578:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1579:       assertEquals(4095, Node.COLUMN_MASK);
1580:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1581:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1582:       assertEquals(43, Node.IS_CONSTANT_NAME);
1583:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1584:       assertEquals(53, Node.INPUT_ID);
1585:       assertEquals(55, Node.INFERRED_FUNCTION);
1586:       assertEquals(36, Node.QUOTED_PROP);
1587:       assertEquals(47, Node.IS_DISPATCHER);
1588:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1589:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1590:       assertEquals(8, Node.FLAG_NO_THROWS);
1591:       assertEquals(40, Node.ORIGINALNAME_PROP);
1592:       assertEquals(29, Node.JSDOC_INFO_PROP);
1593:       assertEquals(39, Node.EMPTY_BLOCK);
1594:       assertEquals(2, Node.POST_FLAG);
1595:       assertEquals(30, Node.VAR_ARGS_NAME);
1596:       assertEquals(0, nodeArray0.length);
1597:       assertNotNull(node4);
1598:       assertFalse(node0.equals((Object)node2));
1599:       assertFalse(node0.equals((Object)node3));
1600:       assertFalse(node0.equals((Object)node1));
1601:       assertFalse(node4.equals((Object)node2));
1602:       assertFalse(node4.equals((Object)node3));
1603:       assertFalse(node4.equals((Object)node0));
1604:       assertFalse(node4.equals((Object)node1));
1605:       assertFalse(node0.isTry());
1606:       assertFalse(node0.isVoid());
1607:       assertFalse(node0.isFunction());
1608:       assertFalse(node0.isRegExp());
1609:       assertFalse(node0.isTrue());
1610:       assertFalse(node0.isDebugger());
1611:       assertFalse(node0.isDelProp());
1612:       assertFalse(node0.isIf());
1613:       assertFalse(node0.isArrayLit());
1614:       assertFalse(node0.isCatch());
1615:       assertEquals(0, node0.getLineno());
1616:       assertFalse(node0.isIn());
1617:       assertFalse(node0.isNull());
1618:       assertFalse(node0.isNE());
1619:       assertEquals(0, node0.getChildCount());
1620:       assertEquals(0, node0.getSourcePosition());
1621:       assertFalse(node0.isEmpty());
1622:       assertFalse(node0.isDefaultCase());
1623:       assertFalse(node0.isInc());
1624:       assertFalse(node0.isSetterDef());
1625:       assertFalse(node0.isAdd());
1626:       assertFalse(node0.isName());
1627:       assertFalse(node0.isFalse());
1628:       assertFalse(node0.isContinue());
1629:       assertFalse(node0.isCall());
1630:       assertFalse(node0.isBreak());
1631:       assertFalse(node0.isTypeOf());
1632:       assertFalse(node0.isDec());
1633:       assertFalse(node0.isComma());
1634:       assertFalse(node0.isReturn());
1635:       assertFalse(node0.hasChildren());
1636:       assertFalse(node0.isNot());
1637:       assertFalse(node0.isString());
1638:       assertFalse(node0.isWhile());
1639:       assertFalse(node0.isObjectLit());
1640:       assertEquals(330, node0.getType());
1641:       assertFalse(node0.isGetProp());
1642:       assertEquals(0, node0.getCharno());
1643:       assertFalse(node0.isGetElem());
1644:       assertFalse(node0.isLabelName());
1645:       assertFalse(node0.isAssign());
1646:       assertFalse(node0.isAnd());
1647:       assertFalse(node0.isWith());
1648:       assertFalse(node0.isInstanceOf());
1649:       assertFalse(node0.isCast());
1650:       assertFalse(node0.isExprResult());
1651:       assertFalse(node0.isOr());
1652:       assertFalse(node0.isAssignAdd());
1653:       assertFalse(node0.isLabel());
1654:       assertFalse(node0.isDo());
1655:       assertFalse(node0.isThrow());
1656:       assertFalse(node0.isNew());
1657:       assertFalse(node0.isBlock());
1658:       assertFalse(node0.isSwitch());
1659:       assertFalse(node0.isHook());
1660:       assertFalse(node0.isVar());
1661:       assertFalse(node0.isStringKey());
1662:       assertFalse(node0.hasMoreThanOneChild());
1663:       assertFalse(node0.isParamList());
1664:       assertFalse(node0.isNumber());
1665:       assertFalse(node0.isGetterDef());
1666:       assertFalse(node0.isThis());
1667:       assertFalse(node0.isCase());
1668:       assertFalse(node0.isFor());
1669:       assertFalse(node0.hasOneChild());
1670:       assertFalse(node0.isScript());
1671:       assertFalse(node4.isString());
1672:       assertEquals(330, node4.getType());
1673:       assertFalse(node4.isCase());
1674:       assertFalse(node4.isHook());
1675:       assertFalse(node4.isFalse());
1676:       assertFalse(node4.isFor());
1677:       assertFalse(node4.isTry());
1678:       assertFalse(node4.isArrayLit());
1679:       assertFalse(node4.isGetProp());
1680:       assertFalse(node4.isSwitch());
1681:       assertFalse(node4.isGetterDef());
1682:       assertFalse(node4.isDebugger());
1683:       assertFalse(node4.isWith());
1684:       assertFalse(node4.isCatch());
1685:       assertFalse(node4.isAnd());
1686:       assertFalse(node4.isInstanceOf());
1687:       assertFalse(node4.isScript());
1688:       assertEquals(0, node4.getLineno());
1689:       assertFalse(node4.isThis());
1690:       assertFalse(node4.isFunction());
1691:       assertFalse(node4.isRegExp());
1692:       assertFalse(node4.isThrow());
1693:       assertFalse(node4.isIf());
1694:       assertFalse(node4.isSetterDef());
1695:       assertFalse(node4.isInc());
1696:       assertFalse(node4.isNE());
1697:       assertFalse(node4.isIn());
1698:       assertEquals(0, node4.getCharno());
1699:       assertFalse(node4.hasMoreThanOneChild());
1700:       assertFalse(node4.isWhile());
1701:       assertFalse(node4.isContinue());
1702:       assertFalse(node4.isDo());
1703:       assertFalse(node4.isBlock());
1704:       assertFalse(node4.isAssignAdd());
1705:       assertFalse(node4.isDec());
1706:       assertFalse(node4.hasChildren());
1707:       assertFalse(node4.isReturn());
1708:       assertFalse(node4.isTypeOf());
1709:       assertFalse(node4.isLabel());
1710:       assertFalse(node4.isAssign());
1711:       assertFalse(node4.isStringKey());
1712:       assertFalse(node4.isCast());
1713:       assertFalse(node4.hasOneChild());
1714:       assertFalse(node4.isLabelName());
1715:       assertFalse(node4.isParamList());
1716:       assertFalse(node4.isNumber());
1717:       assertFalse(node4.isNot());
1718:       assertFalse(node4.isObjectLit());
1719:       assertFalse(node4.isDefaultCase());
1720:       assertFalse(node4.isExprResult());
1721:       assertEquals(0, node4.getChildCount());
1722:       assertFalse(node4.isComma());
1723:       assertFalse(node4.isCall());
1724:       assertFalse(node4.isName());
1725:       assertFalse(node4.isGetElem());
1726:       assertFalse(node4.isEmpty());
1727:       assertFalse(node4.isVar());
1728:       assertFalse(node4.isBreak());
1729:       assertFalse(node4.isDelProp());
1730:       assertFalse(node4.isNew());
1731:       assertFalse(node4.isVoid());
1732:       assertFalse(node4.isTrue());
1733:       assertFalse(node4.isAdd());
1734:       assertEquals(0, node4.getSourcePosition());
1735:       assertFalse(node4.isNull());
1736:       assertFalse(node4.isOr());
1737:       
1738:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
1739:       assertNotNull(node_SideEffectFlags0);
1740:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1741:       assertEquals(48, node_SideEffectFlags0.valueOf());
1742:       
1743:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
1744:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1745:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1746:       assertNotNull(node_SideEffectFlags1);
1747:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1748:       assertEquals(48, node_SideEffectFlags0.valueOf());
1749:       assertEquals(48, node_SideEffectFlags1.valueOf());
1750:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1751:       
1752:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
1753:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1754:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1755:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1756:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1757:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1758:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1759:       assertNotNull(node_SideEffectFlags2);
1760:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1761:       assertEquals(48, node_SideEffectFlags0.valueOf());
1762:       assertEquals(48, node_SideEffectFlags1.valueOf());
1763:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1764:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1765:       assertEquals(48, node_SideEffectFlags2.valueOf());
1766:       
1767:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
1768:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1769:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1770:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1771:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1772:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1773:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1774:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1775:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1776:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1777:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1778:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1779:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1780:       assertNotNull(node_SideEffectFlags3);
1781:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1782:       assertEquals(31, node_SideEffectFlags0.valueOf());
1783:       assertEquals(31, node_SideEffectFlags1.valueOf());
1784:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1785:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1786:       assertEquals(31, node_SideEffectFlags2.valueOf());
1787:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
1788:       assertEquals(31, node_SideEffectFlags3.valueOf());
1789:       
1790:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
1791:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1792:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1793:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1794:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1795:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1796:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1797:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1798:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1799:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1800:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1801:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1802:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1803:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1804:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1805:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1806:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1807:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1808:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1809:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1810:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1811:       assertNotNull(node_SideEffectFlags4);
1812:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1813:       assertEquals(0, node_SideEffectFlags0.valueOf());
1814:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1815:       assertEquals(0, node_SideEffectFlags1.valueOf());
1816:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1817:       assertEquals(0, node_SideEffectFlags2.valueOf());
1818:       assertEquals(0, node_SideEffectFlags3.valueOf());
1819:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1820:       assertEquals(0, node_SideEffectFlags4.valueOf());
1821:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
1822:       
1823:       boolean boolean3 = node1.isIf();
1824:       assertFalse(boolean3);
1825:       assertNotSame(node1, node0);
1826:       assertNotSame(node1, node4);
1827:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1828:       assertEquals(39, Node.EMPTY_BLOCK);
1829:       assertEquals(8, Node.FLAG_NO_THROWS);
1830:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1831:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1832:       assertEquals(50, Node.FREE_CALL);
1833:       assertEquals(4095, Node.COLUMN_MASK);
1834:       assertEquals(40, Node.ORIGINALNAME_PROP);
1835:       assertEquals(57, Node.REFLECTED_OBJECT);
1836:       assertEquals(48, Node.DIRECTIVES);
1837:       assertEquals(54, Node.SLASH_V);
1838:       assertEquals(43, Node.IS_CONSTANT_NAME);
1839:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1840:       assertEquals(12, Node.COLUMN_BITS);
1841:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1842:       assertEquals(32, Node.INCRDECR_PROP);
1843:       assertEquals(1, Node.DECR_FLAG);
1844:       assertEquals(2, Node.POST_FLAG);
1845:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1846:       assertEquals(56, Node.CHANGE_TIME);
1847:       assertEquals(47, Node.IS_DISPATCHER);
1848:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1849:       assertEquals(46, Node.IS_NAMESPACE);
1850:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1851:       assertEquals(49, Node.DIRECT_EVAL);
1852:       assertEquals(37, Node.OPT_ARG_NAME);
1853:       assertEquals(57, Node.LAST_PROP);
1854:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1855:       assertEquals(30, Node.VAR_ARGS_NAME);
1856:       assertEquals(52, Node.LENGTH);
1857:       assertEquals(36, Node.QUOTED_PROP);
1858:       assertEquals(55, Node.INFERRED_FUNCTION);
1859:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1860:       assertEquals(29, Node.JSDOC_INFO_PROP);
1861:       assertEquals(53, Node.INPUT_ID);
1862:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1863:       assertTrue(boolean3 == boolean2);
1864:       assertTrue(boolean3 == boolean1);
1865:       assertTrue(boolean3 == boolean0);
1866:       assertFalse(node1.equals((Object)node2));
1867:       assertFalse(node1.equals((Object)node0));
1868:       assertFalse(node1.equals((Object)node4));
1869:       assertFalse(node1.equals((Object)node3));
1870:       assertFalse(node1.isFalse());
1871:       assertFalse(node1.isHook());
1872:       assertFalse(node1.isThis());
1873:       assertFalse(node1.isComma());
1874:       assertFalse(node1.isInc());
1875:       assertFalse(node1.isGetProp());
1876:       assertFalse(node1.isNot());
1877:       assertFalse(node1.isAnd());
1878:       assertFalse(node1.isString());
1879:       assertFalse(node1.isObjectLit());
1880:       assertEquals((-1), node1.getCharno());
1881:       assertFalse(node1.isSwitch());
1882:       assertFalse(node1.isCast());
1883:       assertFalse(node1.isFor());
1884:       assertFalse(node1.isLabelName());
1885:       assertFalse(node1.isIf());
1886:       assertFalse(node1.isNE());
1887:       assertFalse(node1.isNumber());
1888:       assertFalse(node1.isGetterDef());
1889:       assertFalse(node1.isTry());
1890:       assertFalse(node1.isIn());
1891:       assertFalse(node1.isScript());
1892:       assertFalse(node1.isCase());
1893:       assertFalse(node1.hasOneChild());
1894:       assertFalse(node1.isWith());
1895:       assertFalse(node1.isCatch());
1896:       assertFalse(node1.hasMoreThanOneChild());
1897:       assertFalse(node1.isRegExp());
1898:       assertFalse(node1.isInstanceOf());
1899:       assertEquals((-1), node1.getLineno());
1900:       assertFalse(node1.isName());
1901:       assertFalse(node1.isStringKey());
1902:       assertFalse(node1.isVar());
1903:       assertTrue(node1.isThrow());
1904:       assertFalse(node1.isNull());
1905:       assertFalse(node1.isAdd());
1906:       assertFalse(node1.isBlock());
1907:       assertFalse(node1.isSetterDef());
1908:       assertFalse(node1.isNew());
1909:       assertFalse(node1.isDo());
1910:       assertFalse(node1.isDefaultCase());
1911:       assertFalse(node1.isContinue());
1912:       assertFalse(node1.isFunction());
1913:       assertEquals(0, node1.getChildCount());
1914:       assertFalse(node1.isDebugger());
1915:       assertFalse(node1.isParamList());
1916:       assertFalse(node1.isArrayLit());
1917:       assertFalse(node1.isEmpty());
1918:       assertFalse(node1.isAssign());
1919:       assertFalse(node1.isGetElem());
1920:       assertFalse(node1.isTypeOf());
1921:       assertFalse(node1.hasChildren());
1922:       assertFalse(node1.isDec());
1923:       assertEquals((-1), node1.getSourcePosition());
1924:       assertFalse(node1.isLabel());
1925:       assertFalse(node1.isAssignAdd());
1926:       assertFalse(node1.isOr());
1927:       assertFalse(node1.isReturn());
1928:       assertEquals(49, node1.getType());
1929:       assertFalse(node1.isWhile());
1930:       assertFalse(node1.isTrue());
1931:       assertFalse(node1.isCall());
1932:       assertFalse(node1.isExprResult());
1933:       assertFalse(node1.isVoid());
1934:       assertFalse(node1.isDelProp());
1935:       assertFalse(node1.isBreak());
1936:       
1937:       boolean boolean4 = node3.isNot();
1938:       assertFalse(boolean4);
1939:       assertNotSame(node1, node0);
1940:       assertNotSame(node1, node4);
1941:       assertSame(node2, node3);
1942:       assertSame(node3, node2);
1943:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1944:       assertEquals(39, Node.EMPTY_BLOCK);
1945:       assertEquals(8, Node.FLAG_NO_THROWS);
1946:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1947:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1948:       assertEquals(50, Node.FREE_CALL);
1949:       assertEquals(4095, Node.COLUMN_MASK);
1950:       assertEquals(40, Node.ORIGINALNAME_PROP);
1951:       assertEquals(57, Node.REFLECTED_OBJECT);
1952:       assertEquals(48, Node.DIRECTIVES);
1953:       assertEquals(54, Node.SLASH_V);
1954:       assertEquals(43, Node.IS_CONSTANT_NAME);
1955:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1956:       assertEquals(12, Node.COLUMN_BITS);
1957:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1958:       assertEquals(32, Node.INCRDECR_PROP);
1959:       assertEquals(1, Node.DECR_FLAG);
1960:       assertEquals(2, Node.POST_FLAG);
1961:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1962:       assertEquals(56, Node.CHANGE_TIME);
1963:       assertEquals(47, Node.IS_DISPATCHER);
1964:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1965:       assertEquals(46, Node.IS_NAMESPACE);
1966:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1967:       assertEquals(49, Node.DIRECT_EVAL);
1968:       assertEquals(37, Node.OPT_ARG_NAME);
1969:       assertEquals(57, Node.LAST_PROP);
1970:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1971:       assertEquals(30, Node.VAR_ARGS_NAME);
1972:       assertEquals(52, Node.LENGTH);
1973:       assertEquals(36, Node.QUOTED_PROP);
1974:       assertEquals(55, Node.INFERRED_FUNCTION);
1975:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1976:       assertEquals(29, Node.JSDOC_INFO_PROP);
1977:       assertEquals(53, Node.INPUT_ID);
1978:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1979:       assertEquals(43, Node.IS_CONSTANT_NAME);
1980:       assertEquals(36, Node.QUOTED_PROP);
1981:       assertEquals(48, Node.DIRECTIVES);
1982:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1983:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1984:       assertEquals(4095, Node.COLUMN_MASK);
1985:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1986:       assertEquals(29, Node.JSDOC_INFO_PROP);
1987:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1988:       assertEquals(2, Node.POST_FLAG);
1989:       assertEquals(56, Node.CHANGE_TIME);
1990:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1991:       assertEquals(47, Node.IS_DISPATCHER);
1992:       assertEquals(57, Node.REFLECTED_OBJECT);
1993:       assertEquals(53, Node.INPUT_ID);
1994:       assertEquals(52, Node.LENGTH);
1995:       assertEquals(8, Node.FLAG_NO_THROWS);
1996:       assertEquals(55, Node.INFERRED_FUNCTION);
1997:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1998:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1999:       assertEquals(39, Node.EMPTY_BLOCK);
2000:       assertEquals(49, Node.DIRECT_EVAL);
2001:       assertEquals(30, Node.VAR_ARGS_NAME);
2002:       assertEquals(1, Node.DECR_FLAG);
2003:       assertEquals(57, Node.LAST_PROP);
2004:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2005:       assertEquals(12, Node.COLUMN_BITS);
2006:       assertEquals(46, Node.IS_NAMESPACE);
2007:       assertEquals(54, Node.SLASH_V);
2008:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2009:       assertEquals(40, Node.ORIGINALNAME_PROP);
2010:       assertEquals(37, Node.OPT_ARG_NAME);
2011:       assertEquals(50, Node.FREE_CALL);
2012:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2013:       assertEquals(32, Node.INCRDECR_PROP);
2014:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2015:       assertEquals(56, Node.CHANGE_TIME);
2016:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2017:       assertEquals(47, Node.IS_DISPATCHER);
2018:       assertEquals(2, Node.POST_FLAG);
2019:       assertEquals(12, Node.COLUMN_BITS);
2020:       assertEquals(46, Node.IS_NAMESPACE);
2021:       assertEquals(49, Node.DIRECT_EVAL);
2022:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2023:       assertEquals(37, Node.OPT_ARG_NAME);
2024:       assertEquals(53, Node.INPUT_ID);
2025:       assertEquals(52, Node.LENGTH);
2026:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2027:       assertEquals(36, Node.QUOTED_PROP);
2028:       assertEquals(57, Node.REFLECTED_OBJECT);
2029:       assertEquals(30, Node.VAR_ARGS_NAME);
2030:       assertEquals(29, Node.JSDOC_INFO_PROP);
2031:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2032:       assertEquals(55, Node.INFERRED_FUNCTION);
2033:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2034:       assertEquals(57, Node.LAST_PROP);
2035:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2036:       assertEquals(39, Node.EMPTY_BLOCK);
2037:       assertEquals(48, Node.DIRECTIVES);
2038:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2039:       assertEquals(8, Node.FLAG_NO_THROWS);
2040:       assertEquals(40, Node.ORIGINALNAME_PROP);
2041:       assertEquals(4095, Node.COLUMN_MASK);
2042:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2043:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2044:       assertEquals(54, Node.SLASH_V);
2045:       assertEquals(43, Node.IS_CONSTANT_NAME);
2046:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2047:       assertEquals(1, Node.DECR_FLAG);
2048:       assertEquals(50, Node.FREE_CALL);
2049:       assertEquals(32, Node.INCRDECR_PROP);
2050:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2051:       assertTrue(boolean4 == boolean0);
2052:       assertTrue(boolean4 == boolean1);
2053:       assertTrue(boolean4 == boolean3);
2054:       assertTrue(boolean4 == boolean2);
2055:       assertFalse(node1.equals((Object)node2));
2056:       assertFalse(node1.equals((Object)node0));
2057:       assertFalse(node1.equals((Object)node4));
2058:       assertFalse(node1.equals((Object)node3));
2059:       assertFalse(node2.equals((Object)node0));
2060:       assertFalse(node2.equals((Object)node4));
2061:       assertFalse(node2.equals((Object)node1));
2062:       assertFalse(node3.equals((Object)node1));
2063:       assertFalse(node3.equals((Object)node0));
2064:       assertFalse(node3.equals((Object)node4));
2065:       assertFalse(node1.isFalse());
2066:       assertFalse(node1.isHook());
2067:       assertFalse(node1.isThis());
2068:       assertFalse(node1.isComma());
2069:       assertFalse(node1.isInc());
2070:       assertFalse(node1.isGetProp());
2071:       assertFalse(node1.isNot());
2072:       assertFalse(node1.isAnd());
2073:       assertFalse(node1.isString());
2074:       assertFalse(node1.isObjectLit());
2075:       assertEquals((-1), node1.getCharno());
2076:       assertFalse(node1.isSwitch());
2077:       assertFalse(node1.isCast());
2078:       assertFalse(node1.isFor());
2079:       assertFalse(node1.isLabelName());
2080:       assertFalse(node1.isIf());
2081:       assertFalse(node1.isNE());
2082:       assertFalse(node1.isNumber());
2083:       assertFalse(node1.isGetterDef());
2084:       assertFalse(node1.isTry());
2085:       assertFalse(node1.isIn());
2086:       assertFalse(node1.isScript());
2087:       assertFalse(node1.isCase());
2088:       assertFalse(node1.hasOneChild());
2089:       assertFalse(node1.isWith());
2090:       assertFalse(node1.isCatch());
2091:       assertFalse(node1.hasMoreThanOneChild());
2092:       assertFalse(node1.isRegExp());
2093:       assertFalse(node1.isInstanceOf());
2094:       assertEquals((-1), node1.getLineno());
2095:       assertFalse(node1.isName());
2096:       assertFalse(node1.isStringKey());
2097:       assertFalse(node1.isVar());
2098:       assertTrue(node1.isThrow());
2099:       assertFalse(node1.isNull());
2100:       assertFalse(node1.isAdd());
2101:       assertFalse(node1.isBlock());
2102:       assertFalse(node1.isSetterDef());
2103:       assertFalse(node1.isNew());
2104:       assertFalse(node1.isDo());
2105:       assertFalse(node1.isDefaultCase());
2106:       assertFalse(node1.isContinue());
2107:       assertFalse(node1.isFunction());
2108:       assertEquals(0, node1.getChildCount());
2109:       assertFalse(node1.isDebugger());
2110:       assertFalse(node1.isParamList());
2111:       assertFalse(node1.isArrayLit());
2112:       assertFalse(node1.isEmpty());
2113:       assertFalse(node1.isAssign());
2114:       assertFalse(node1.isGetElem());
2115:       assertFalse(node1.isTypeOf());
2116:       assertFalse(node1.hasChildren());
2117:       assertFalse(node1.isDec());
2118:       assertEquals((-1), node1.getSourcePosition());
2119:       assertFalse(node1.isLabel());
2120:       assertFalse(node1.isAssignAdd());
2121:       assertFalse(node1.isOr());
2122:       assertFalse(node1.isReturn());
2123:       assertEquals(49, node1.getType());
2124:       assertFalse(node1.isWhile());
2125:       assertFalse(node1.isTrue());
2126:       assertFalse(node1.isCall());
2127:       assertFalse(node1.isExprResult());
2128:       assertFalse(node1.isVoid());
2129:       assertFalse(node1.isDelProp());
2130:       assertFalse(node1.isBreak());
2131:       assertFalse(node2.isCatch());
2132:       assertEquals(0, node2.getChildCount());
2133:       assertEquals(40, node2.getType());
2134:       assertFalse(node2.isDefaultCase());
2135:       assertFalse(node2.isTry());
2136:       assertFalse(node2.isSetterDef());
2137:       assertFalse(node2.isFor());
2138:       assertFalse(node2.isBlock());
2139:       assertFalse(node2.isTrue());
2140:       assertFalse(node2.isRegExp());
2141:       assertFalse(node2.isNull());
2142:       assertFalse(node2.isNE());
2143:       assertFalse(node2.isDelProp());
2144:       assertFalse(node2.isIf());
2145:       assertFalse(node2.isName());
2146:       assertFalse(node2.isVoid());
2147:       assertFalse(node2.isCall());
2148:       assertFalse(node2.isAssignAdd());
2149:       assertFalse(node2.hasMoreThanOneChild());
2150:       assertFalse(node2.isOr());
2151:       assertFalse(node2.isLabel());
2152:       assertFalse(node2.isGetterDef());
2153:       assertFalse(node2.isNumber());
2154:       assertFalse(node2.isCase());
2155:       assertTrue(node2.isString());
2156:       assertFalse(node2.isNew());
2157:       assertFalse(node2.isAdd());
2158:       assertFalse(node2.isEmpty());
2159:       assertFalse(node2.isDo());
2160:       assertFalse(node2.isArrayLit());
2161:       assertFalse(node2.isVar());
2162:       assertFalse(node2.isStringKey());
2163:       assertEquals((-1), node2.getCharno());
2164:       assertFalse(node2.isParamList());
2165:       assertFalse(node2.isSwitch());
2166:       assertFalse(node2.isLabelName());
2167:       assertFalse(node2.isInstanceOf());
2168:       assertFalse(node2.isAnd());
2169:       assertFalse(node2.isObjectLit());
2170:       assertFalse(node2.isNot());
2171:       assertFalse(node2.isThis());
2172:       assertFalse(node2.isScript());
2173:       assertFalse(node2.isGetProp());
2174:       assertFalse(node2.hasOneChild());
2175:       assertFalse(node2.isAssign());
2176:       assertFalse(node2.isHook());
2177:       assertFalse(node2.hasChildren());
2178:       assertFalse(node2.isTypeOf());
2179:       assertFalse(node2.isComma());
2180:       assertFalse(node2.isDec());
2181:       assertFalse(node2.isWith());
2182:       assertFalse(node2.isGetElem());
2183:       assertEquals((-1), node2.getLineno());
2184:       assertFalse(node2.isExprResult());
2185:       assertFalse(node2.isBreak());
2186:       assertFalse(node2.isContinue());
2187:       assertFalse(node2.isIn());
2188:       assertFalse(node2.isReturn());
2189:       assertEquals((-1), node2.getSourcePosition());
2190:       assertFalse(node2.isWhile());
2191:       assertFalse(node2.isInc());
2192:       assertFalse(node2.isCast());
2193:       assertFalse(node2.isFalse());
2194:       assertFalse(node2.isThrow());
2195:       assertFalse(node2.isDebugger());
2196:       assertFalse(node2.isFunction());
2197:       assertFalse(node3.isNumber());
2198:       assertFalse(node3.isDec());
2199:       assertFalse(node3.isTypeOf());
2200:       assertFalse(node3.isReturn());
2201:       assertFalse(node3.isOr());
2202:       assertFalse(node3.isAssign());
2203:       assertFalse(node3.isLabel());
2204:       assertFalse(node3.hasChildren());
2205:       assertEquals((-1), node3.getSourcePosition());
2206:       assertFalse(node3.hasOneChild());
2207:       assertFalse(node3.isAssignAdd());
2208:       assertFalse(node3.isDo());
2209:       assertFalse(node3.isWith());
2210:       assertFalse(node3.isWhile());
2211:       assertFalse(node3.isBlock());
2212:       assertFalse(node3.isInstanceOf());
2213:       assertFalse(node3.hasMoreThanOneChild());
2214:       assertFalse(node3.isGetElem());
2215:       assertFalse(node3.isCall());
2216:       assertFalse(node3.isName());
2217:       assertFalse(node3.isExprResult());
2218:       assertEquals((-1), node3.getLineno());
2219:       assertFalse(node3.isThrow());
2220:       assertFalse(node3.isFalse());
2221:       assertFalse(node3.isComma());
2222:       assertFalse(node3.isGetProp());
2223:       assertFalse(node3.isInc());
2224:       assertFalse(node3.isSetterDef());
2225:       assertFalse(node3.isFunction());
2226:       assertFalse(node3.isNot());
2227:       assertFalse(node3.isObjectLit());
2228:       assertEquals(40, node3.getType());
2229:       assertFalse(node3.isDebugger());
2230:       assertFalse(node3.isCast());
2231:       assertFalse(node3.isAnd());
2232:       assertFalse(node3.isContinue());
2233:       assertFalse(node3.isIf());
2234:       assertFalse(node3.isGetterDef());
2235:       assertFalse(node3.isDelProp());
2236:       assertFalse(node3.isNE());
2237:       assertFalse(node3.isFor());
2238:       assertFalse(node3.isIn());
2239:       assertFalse(node3.isEmpty());
2240:       assertFalse(node3.isTry());
2241:       assertFalse(node3.isCase());
2242:       assertFalse(node3.isRegExp());
2243:       assertFalse(node3.isTrue());
2244:       assertFalse(node3.isCatch());
2245:       assertFalse(node3.isVoid());
2246:       assertFalse(node3.isBreak());
2247:       assertFalse(node3.isNull());
2248:       assertFalse(node3.isParamList());
2249:       assertFalse(node3.isStringKey());
2250:       assertFalse(node3.isThis());
2251:       assertFalse(node3.isHook());
2252:       assertFalse(node3.isVar());
2253:       assertFalse(node3.isNew());
2254:       assertTrue(node3.isString());
2255:       assertFalse(node3.isAdd());
2256:       assertFalse(node3.isDefaultCase());
2257:       assertFalse(node3.isScript());
2258:       assertFalse(node3.isSwitch());
2259:       assertEquals((-1), node3.getCharno());
2260:       assertEquals(0, node3.getChildCount());
2261:       assertFalse(node3.isLabelName());
2262:       assertFalse(node3.isArrayLit());
2263:       
2264:       try { 
2265:         node1.getString();
2266:         fail("Expecting exception: UnsupportedOperationException");
2267:       
2268:       } catch(UnsupportedOperationException e) {
2269:          //
2270:          // THROW is not a string node
2271:          //
2272:          verifyException("com.google.javascript.rhino.Node", e);
2273:       }
2274:   }
2275: }
RegularFileObject[/tmp/EvoSuite_166_1628157535879/com/google/javascript/rhino/Node_166_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:56 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_166_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_166_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_166_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.JSTypeNative",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.JSType$TypePair",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.JSType$2",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
375:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
377:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
378:     );
379:   }
380: }

[MASTER] 09:58:56.415 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node[] nodeArray0 = new Node[0];
Node node0 = new Node(330, nodeArray0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, nodeArray0.length);
assertNotNull(node0);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals(0, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertEquals(330, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getCharno());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isThrow());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());

Node node1 = new Node(49);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertTrue(node1.isThrow());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertEquals(49, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());

String string0 = "xpBF>P}ZAl``iC)9";
Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertEquals(40, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isCase());
assertTrue(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isHook());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isWith());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isWhile());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());

Node node3 = node2.useSourceInfoIfMissingFrom(node1);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(node3);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertTrue(node1.isThrow());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertEquals(49, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertEquals(40, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isCase());
assertTrue(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isHook());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isWith());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isWhile());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node3.isNumber());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isReturn());
assertFalse(node3.isOr());
assertFalse(node3.isAssign());
assertFalse(node3.isLabel());
assertFalse(node3.hasChildren());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.hasOneChild());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isWith());
assertFalse(node3.isWhile());
assertFalse(node3.isBlock());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isExprResult());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isGetProp());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFunction());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertEquals(40, node3.getType());
assertFalse(node3.isDebugger());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertFalse(node3.isContinue());
assertFalse(node3.isIf());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.isIn());
assertFalse(node3.isEmpty());
assertFalse(node3.isTry());
assertFalse(node3.isCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isTrue());
assertFalse(node3.isCatch());
assertFalse(node3.isVoid());
assertFalse(node3.isBreak());
assertFalse(node3.isNull());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isVar());
assertFalse(node3.isNew());
assertTrue(node3.isString());
assertFalse(node3.isAdd());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isScript());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());

Iterable<Node> iterable0 = node3.children();
assertFalse(iterable0.contains(node0));
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertTrue(node1.isThrow());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertEquals(49, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertEquals(40, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isCase());
assertTrue(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isHook());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isWith());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isWhile());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node3.isNumber());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isReturn());
assertFalse(node3.isOr());
assertFalse(node3.isAssign());
assertFalse(node3.isLabel());
assertFalse(node3.hasChildren());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.hasOneChild());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isWith());
assertFalse(node3.isWhile());
assertFalse(node3.isBlock());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isExprResult());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isGetProp());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFunction());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertEquals(40, node3.getType());
assertFalse(node3.isDebugger());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertFalse(node3.isContinue());
assertFalse(node3.isIf());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.isIn());
assertFalse(node3.isEmpty());
assertFalse(node3.isTry());
assertFalse(node3.isCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isTrue());
assertFalse(node3.isCatch());
assertFalse(node3.isVoid());
assertFalse(node3.isBreak());
assertFalse(node3.isNull());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isVar());
assertFalse(node3.isNew());
assertTrue(node3.isString());
assertFalse(node3.isAdd());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isScript());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());

boolean boolean0 = node1.isGetProp();
assertFalse(boolean0);
assertNotSame(node1, node0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertTrue(node1.isThrow());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertEquals(49, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());

boolean boolean1 = node3.hasChildren();
assertFalse(boolean1);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertTrue(node1.isThrow());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertEquals(49, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertEquals(40, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isCase());
assertTrue(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isHook());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isWith());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isWhile());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node3.isNumber());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isReturn());
assertFalse(node3.isOr());
assertFalse(node3.isAssign());
assertFalse(node3.isLabel());
assertFalse(node3.hasChildren());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.hasOneChild());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isWith());
assertFalse(node3.isWhile());
assertFalse(node3.isBlock());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isExprResult());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isGetProp());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFunction());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertEquals(40, node3.getType());
assertFalse(node3.isDebugger());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertFalse(node3.isContinue());
assertFalse(node3.isIf());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.isIn());
assertFalse(node3.isEmpty());
assertFalse(node3.isTry());
assertFalse(node3.isCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isTrue());
assertFalse(node3.isCatch());
assertFalse(node3.isVoid());
assertFalse(node3.isBreak());
assertFalse(node3.isNull());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isVar());
assertFalse(node3.isNew());
assertTrue(node3.isString());
assertFalse(node3.isAdd());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isScript());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());

boolean boolean2 = node2.isSwitch();
assertFalse(boolean2);
assertSame(node2, node3);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertEquals(40, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isCase());
assertTrue(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isHook());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isWith());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isWhile());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());

Node node4 = node0.cloneNode();
assertNotSame(node0, node4);
assertNotSame(node0, node1);
assertNotSame(node4, node0);
assertNotSame(node4, node1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, nodeArray0.length);
assertNotNull(node4);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals(0, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertEquals(330, node0.getType());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getCharno());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isThrow());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node4.isString());
assertEquals(330, node4.getType());
assertFalse(node4.isCase());
assertFalse(node4.isHook());
assertFalse(node4.isFalse());
assertFalse(node4.isFor());
assertFalse(node4.isTry());
assertFalse(node4.isArrayLit());
assertFalse(node4.isGetProp());
assertFalse(node4.isSwitch());
assertFalse(node4.isGetterDef());
assertFalse(node4.isDebugger());
assertFalse(node4.isWith());
assertFalse(node4.isCatch());
assertFalse(node4.isAnd());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isScript());
assertEquals(0, node4.getLineno());
assertFalse(node4.isThis());
assertFalse(node4.isFunction());
assertFalse(node4.isRegExp());
assertFalse(node4.isThrow());
assertFalse(node4.isIf());
assertFalse(node4.isSetterDef());
assertFalse(node4.isInc());
assertFalse(node4.isNE());
assertFalse(node4.isIn());
assertEquals(0, node4.getCharno());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isWhile());
assertFalse(node4.isContinue());
assertFalse(node4.isDo());
assertFalse(node4.isBlock());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isReturn());
assertFalse(node4.isTypeOf());
assertFalse(node4.isLabel());
assertFalse(node4.isAssign());
assertFalse(node4.isStringKey());
assertFalse(node4.isCast());
assertFalse(node4.hasOneChild());
assertFalse(node4.isLabelName());
assertFalse(node4.isParamList());
assertFalse(node4.isNumber());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isExprResult());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isComma());
assertFalse(node4.isCall());
assertFalse(node4.isName());
assertFalse(node4.isGetElem());
assertFalse(node4.isEmpty());
assertFalse(node4.isVar());
assertFalse(node4.isBreak());
assertFalse(node4.isDelProp());
assertFalse(node4.isNew());
assertFalse(node4.isVoid());
assertFalse(node4.isTrue());
assertFalse(node4.isAdd());
assertEquals(0, node4.getSourcePosition());
assertFalse(node4.isNull());
assertFalse(node4.isOr());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
assertNotNull(node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags0.valueOf());
assertEquals(48, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags2);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags0.valueOf());
assertEquals(48, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags2.valueOf());

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertNotNull(node_SideEffectFlags3);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags3.valueOf());

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags4);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());

boolean boolean3 = node1.isIf();
assertFalse(boolean3);
assertNotSame(node1, node0);
assertNotSame(node1, node4);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertTrue(node1.isThrow());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertEquals(49, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());

boolean boolean4 = node3.isNot();
assertFalse(boolean4);
assertNotSame(node1, node0);
assertNotSame(node1, node4);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertTrue(node1.isThrow());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertEquals(49, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertEquals(40, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isCase());
assertTrue(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isHook());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isWith());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isContinue());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isWhile());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node3.isNumber());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isReturn());
assertFalse(node3.isOr());
assertFalse(node3.isAssign());
assertFalse(node3.isLabel());
assertFalse(node3.hasChildren());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.hasOneChild());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isWith());
assertFalse(node3.isWhile());
assertFalse(node3.isBlock());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isExprResult());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isGetProp());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFunction());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertEquals(40, node3.getType());
assertFalse(node3.isDebugger());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertFalse(node3.isContinue());
assertFalse(node3.isIf());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.isIn());
assertFalse(node3.isEmpty());
assertFalse(node3.isTry());
assertFalse(node3.isCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isTrue());
assertFalse(node3.isCatch());
assertFalse(node3.isVoid());
assertFalse(node3.isBreak());
assertFalse(node3.isNull());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isVar());
assertFalse(node3.isNew());
assertTrue(node3.isString());
assertFalse(node3.isAdd());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isScript());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());

node1.getString();

[MASTER] 09:59:00.176 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_177_1628157539731/com/google/javascript/rhino/Node_177_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_177_1628157539731/com/google/javascript/rhino/Node_177_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:00.176 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:00.176 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:00.177 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 991
[MASTER] 09:59:00.178 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_177_1628157539731/com/google/javascript/rhino/Node_177_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:59 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSType;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import java.util.List;
15: import java.util.Vector;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_177_tmp__ESTest extends Node_177_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Node node0 = Node.newString("8`QN");
26:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
27:       assertEquals(55, Node.INFERRED_FUNCTION);
28:       assertEquals(4095, Node.COLUMN_MASK);
29:       assertEquals(39, Node.EMPTY_BLOCK);
30:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
31:       assertEquals(53, Node.INPUT_ID);
32:       assertEquals(40, Node.ORIGINALNAME_PROP);
33:       assertEquals(50, Node.FREE_CALL);
34:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
35:       assertEquals(54, Node.SLASH_V);
36:       assertEquals(46, Node.IS_NAMESPACE);
37:       assertEquals(43, Node.IS_CONSTANT_NAME);
38:       assertEquals(1, Node.DECR_FLAG);
39:       assertEquals(51, Node.STATIC_SOURCE_FILE);
40:       assertEquals(12, Node.COLUMN_BITS);
41:       assertEquals(30, Node.VAR_ARGS_NAME);
42:       assertEquals(2, Node.POST_FLAG);
43:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
44:       assertEquals(15, Node.NO_SIDE_EFFECTS);
45:       assertEquals(47, Node.IS_DISPATCHER);
46:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
47:       assertEquals(32, Node.INCRDECR_PROP);
48:       assertEquals(57, Node.LAST_PROP);
49:       assertEquals(57, Node.REFLECTED_OBJECT);
50:       assertEquals(29, Node.JSDOC_INFO_PROP);
51:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
52:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
53:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
54:       assertEquals(52, Node.LENGTH);
55:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
56:       assertEquals(37, Node.OPT_ARG_NAME);
57:       assertEquals(8, Node.FLAG_NO_THROWS);
58:       assertEquals(48, Node.DIRECTIVES);
59:       assertEquals(36, Node.QUOTED_PROP);
60:       assertEquals(49, Node.DIRECT_EVAL);
61:       assertEquals(56, Node.CHANGE_TIME);
62:       assertNotNull(node0);
63:       assertFalse(node0.isGetProp());
64:       assertFalse(node0.isComma());
65:       assertFalse(node0.isObjectLit());
66:       assertFalse(node0.isInstanceOf());
67:       assertFalse(node0.isNot());
68:       assertFalse(node0.isBreak());
69:       assertFalse(node0.isAnd());
70:       assertFalse(node0.isInc());
71:       assertFalse(node0.isCast());
72:       assertFalse(node0.isFalse());
73:       assertFalse(node0.isThrow());
74:       assertFalse(node0.isAssignAdd());
75:       assertFalse(node0.isReturn());
76:       assertFalse(node0.isOr());
77:       assertFalse(node0.isTypeOf());
78:       assertFalse(node0.isContinue());
79:       assertFalse(node0.isDelProp());
80:       assertFalse(node0.isGetElem());
81:       assertEquals((-1), node0.getSourcePosition());
82:       assertFalse(node0.isDebugger());
83:       assertFalse(node0.isCall());
84:       assertFalse(node0.isExprResult());
85:       assertFalse(node0.isWhile());
86:       assertFalse(node0.isAssign());
87:       assertFalse(node0.isDec());
88:       assertFalse(node0.hasChildren());
89:       assertEquals(0, node0.getChildCount());
90:       assertFalse(node0.isCatch());
91:       assertFalse(node0.isSetterDef());
92:       assertFalse(node0.isNull());
93:       assertFalse(node0.isParamList());
94:       assertFalse(node0.isTrue());
95:       assertFalse(node0.isVoid());
96:       assertFalse(node0.isStringKey());
97:       assertFalse(node0.isName());
98:       assertFalse(node0.isAdd());
99:       assertFalse(node0.isNew());
100:       assertFalse(node0.isArrayLit());
101:       assertFalse(node0.isFunction());
102:       assertFalse(node0.isEmpty());
103:       assertFalse(node0.isDo());
104:       assertEquals(40, node0.getType());
105:       assertFalse(node0.isVar());
106:       assertFalse(node0.isDefaultCase());
107:       assertEquals((-1), node0.getLineno());
108:       assertFalse(node0.isLabel());
109:       assertFalse(node0.isNumber());
110:       assertFalse(node0.isIn());
111:       assertFalse(node0.hasMoreThanOneChild());
112:       assertFalse(node0.isGetterDef());
113:       assertFalse(node0.isLabelName());
114:       assertFalse(node0.isNE());
115:       assertFalse(node0.isIf());
116:       assertFalse(node0.isSwitch());
117:       assertFalse(node0.isTry());
118:       assertFalse(node0.isHook());
119:       assertFalse(node0.hasOneChild());
120:       assertFalse(node0.isBlock());
121:       assertEquals((-1), node0.getCharno());
122:       assertFalse(node0.isRegExp());
123:       assertFalse(node0.isScript());
124:       assertFalse(node0.isWith());
125:       assertFalse(node0.isFor());
126:       assertFalse(node0.isCase());
127:       assertFalse(node0.isThis());
128:       assertTrue(node0.isString());
129:       
130:       boolean boolean0 = node0.isEmpty();
131:       assertFalse(boolean0);
132:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
133:       assertEquals(55, Node.INFERRED_FUNCTION);
134:       assertEquals(4095, Node.COLUMN_MASK);
135:       assertEquals(39, Node.EMPTY_BLOCK);
136:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
137:       assertEquals(53, Node.INPUT_ID);
138:       assertEquals(40, Node.ORIGINALNAME_PROP);
139:       assertEquals(50, Node.FREE_CALL);
140:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
141:       assertEquals(54, Node.SLASH_V);
142:       assertEquals(46, Node.IS_NAMESPACE);
143:       assertEquals(43, Node.IS_CONSTANT_NAME);
144:       assertEquals(1, Node.DECR_FLAG);
145:       assertEquals(51, Node.STATIC_SOURCE_FILE);
146:       assertEquals(12, Node.COLUMN_BITS);
147:       assertEquals(30, Node.VAR_ARGS_NAME);
148:       assertEquals(2, Node.POST_FLAG);
149:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
150:       assertEquals(15, Node.NO_SIDE_EFFECTS);
151:       assertEquals(47, Node.IS_DISPATCHER);
152:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
153:       assertEquals(32, Node.INCRDECR_PROP);
154:       assertEquals(57, Node.LAST_PROP);
155:       assertEquals(57, Node.REFLECTED_OBJECT);
156:       assertEquals(29, Node.JSDOC_INFO_PROP);
157:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
159:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
160:       assertEquals(52, Node.LENGTH);
161:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
162:       assertEquals(37, Node.OPT_ARG_NAME);
163:       assertEquals(8, Node.FLAG_NO_THROWS);
164:       assertEquals(48, Node.DIRECTIVES);
165:       assertEquals(36, Node.QUOTED_PROP);
166:       assertEquals(49, Node.DIRECT_EVAL);
167:       assertEquals(56, Node.CHANGE_TIME);
168:       assertFalse(node0.isGetProp());
169:       assertFalse(node0.isComma());
170:       assertFalse(node0.isObjectLit());
171:       assertFalse(node0.isInstanceOf());
172:       assertFalse(node0.isNot());
173:       assertFalse(node0.isBreak());
174:       assertFalse(node0.isAnd());
175:       assertFalse(node0.isInc());
176:       assertFalse(node0.isCast());
177:       assertFalse(node0.isFalse());
178:       assertFalse(node0.isThrow());
179:       assertFalse(node0.isAssignAdd());
180:       assertFalse(node0.isReturn());
181:       assertFalse(node0.isOr());
182:       assertFalse(node0.isTypeOf());
183:       assertFalse(node0.isContinue());
184:       assertFalse(node0.isDelProp());
185:       assertFalse(node0.isGetElem());
186:       assertEquals((-1), node0.getSourcePosition());
187:       assertFalse(node0.isDebugger());
188:       assertFalse(node0.isCall());
189:       assertFalse(node0.isExprResult());
190:       assertFalse(node0.isWhile());
191:       assertFalse(node0.isAssign());
192:       assertFalse(node0.isDec());
193:       assertFalse(node0.hasChildren());
194:       assertEquals(0, node0.getChildCount());
195:       assertFalse(node0.isCatch());
196:       assertFalse(node0.isSetterDef());
197:       assertFalse(node0.isNull());
198:       assertFalse(node0.isParamList());
199:       assertFalse(node0.isTrue());
200:       assertFalse(node0.isVoid());
201:       assertFalse(node0.isStringKey());
202:       assertFalse(node0.isName());
203:       assertFalse(node0.isAdd());
204:       assertFalse(node0.isNew());
205:       assertFalse(node0.isArrayLit());
206:       assertFalse(node0.isFunction());
207:       assertFalse(node0.isEmpty());
208:       assertFalse(node0.isDo());
209:       assertEquals(40, node0.getType());
210:       assertFalse(node0.isVar());
211:       assertFalse(node0.isDefaultCase());
212:       assertEquals((-1), node0.getLineno());
213:       assertFalse(node0.isLabel());
214:       assertFalse(node0.isNumber());
215:       assertFalse(node0.isIn());
216:       assertFalse(node0.hasMoreThanOneChild());
217:       assertFalse(node0.isGetterDef());
218:       assertFalse(node0.isLabelName());
219:       assertFalse(node0.isNE());
220:       assertFalse(node0.isIf());
221:       assertFalse(node0.isSwitch());
222:       assertFalse(node0.isTry());
223:       assertFalse(node0.isHook());
224:       assertFalse(node0.hasOneChild());
225:       assertFalse(node0.isBlock());
226:       assertEquals((-1), node0.getCharno());
227:       assertFalse(node0.isRegExp());
228:       assertFalse(node0.isScript());
229:       assertFalse(node0.isWith());
230:       assertFalse(node0.isFor());
231:       assertFalse(node0.isCase());
232:       assertFalse(node0.isThis());
233:       assertTrue(node0.isString());
234:       
235:       boolean boolean1 = node0.isAssign();
236:       assertFalse(boolean1);
237:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
238:       assertEquals(55, Node.INFERRED_FUNCTION);
239:       assertEquals(4095, Node.COLUMN_MASK);
240:       assertEquals(39, Node.EMPTY_BLOCK);
241:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
242:       assertEquals(53, Node.INPUT_ID);
243:       assertEquals(40, Node.ORIGINALNAME_PROP);
244:       assertEquals(50, Node.FREE_CALL);
245:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
246:       assertEquals(54, Node.SLASH_V);
247:       assertEquals(46, Node.IS_NAMESPACE);
248:       assertEquals(43, Node.IS_CONSTANT_NAME);
249:       assertEquals(1, Node.DECR_FLAG);
250:       assertEquals(51, Node.STATIC_SOURCE_FILE);
251:       assertEquals(12, Node.COLUMN_BITS);
252:       assertEquals(30, Node.VAR_ARGS_NAME);
253:       assertEquals(2, Node.POST_FLAG);
254:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
255:       assertEquals(15, Node.NO_SIDE_EFFECTS);
256:       assertEquals(47, Node.IS_DISPATCHER);
257:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
258:       assertEquals(32, Node.INCRDECR_PROP);
259:       assertEquals(57, Node.LAST_PROP);
260:       assertEquals(57, Node.REFLECTED_OBJECT);
261:       assertEquals(29, Node.JSDOC_INFO_PROP);
262:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
263:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
264:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
265:       assertEquals(52, Node.LENGTH);
266:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
267:       assertEquals(37, Node.OPT_ARG_NAME);
268:       assertEquals(8, Node.FLAG_NO_THROWS);
269:       assertEquals(48, Node.DIRECTIVES);
270:       assertEquals(36, Node.QUOTED_PROP);
271:       assertEquals(49, Node.DIRECT_EVAL);
272:       assertEquals(56, Node.CHANGE_TIME);
273:       assertTrue(boolean1 == boolean0);
274:       assertFalse(node0.isGetProp());
275:       assertFalse(node0.isComma());
276:       assertFalse(node0.isObjectLit());
277:       assertFalse(node0.isInstanceOf());
278:       assertFalse(node0.isNot());
279:       assertFalse(node0.isBreak());
280:       assertFalse(node0.isAnd());
281:       assertFalse(node0.isInc());
282:       assertFalse(node0.isCast());
283:       assertFalse(node0.isFalse());
284:       assertFalse(node0.isThrow());
285:       assertFalse(node0.isAssignAdd());
286:       assertFalse(node0.isReturn());
287:       assertFalse(node0.isOr());
288:       assertFalse(node0.isTypeOf());
289:       assertFalse(node0.isContinue());
290:       assertFalse(node0.isDelProp());
291:       assertFalse(node0.isGetElem());
292:       assertEquals((-1), node0.getSourcePosition());
293:       assertFalse(node0.isDebugger());
294:       assertFalse(node0.isCall());
295:       assertFalse(node0.isExprResult());
296:       assertFalse(node0.isWhile());
297:       assertFalse(node0.isAssign());
298:       assertFalse(node0.isDec());
299:       assertFalse(node0.hasChildren());
300:       assertEquals(0, node0.getChildCount());
301:       assertFalse(node0.isCatch());
302:       assertFalse(node0.isSetterDef());
303:       assertFalse(node0.isNull());
304:       assertFalse(node0.isParamList());
305:       assertFalse(node0.isTrue());
306:       assertFalse(node0.isVoid());
307:       assertFalse(node0.isStringKey());
308:       assertFalse(node0.isName());
309:       assertFalse(node0.isAdd());
310:       assertFalse(node0.isNew());
311:       assertFalse(node0.isArrayLit());
312:       assertFalse(node0.isFunction());
313:       assertFalse(node0.isEmpty());
314:       assertFalse(node0.isDo());
315:       assertEquals(40, node0.getType());
316:       assertFalse(node0.isVar());
317:       assertFalse(node0.isDefaultCase());
318:       assertEquals((-1), node0.getLineno());
319:       assertFalse(node0.isLabel());
320:       assertFalse(node0.isNumber());
321:       assertFalse(node0.isIn());
322:       assertFalse(node0.hasMoreThanOneChild());
323:       assertFalse(node0.isGetterDef());
324:       assertFalse(node0.isLabelName());
325:       assertFalse(node0.isNE());
326:       assertFalse(node0.isIf());
327:       assertFalse(node0.isSwitch());
328:       assertFalse(node0.isTry());
329:       assertFalse(node0.isHook());
330:       assertFalse(node0.hasOneChild());
331:       assertFalse(node0.isBlock());
332:       assertEquals((-1), node0.getCharno());
333:       assertFalse(node0.isRegExp());
334:       assertFalse(node0.isScript());
335:       assertFalse(node0.isWith());
336:       assertFalse(node0.isFor());
337:       assertFalse(node0.isCase());
338:       assertFalse(node0.isThis());
339:       assertTrue(node0.isString());
340:       
341:       node0.detachChildren();
342:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
343:       assertEquals(55, Node.INFERRED_FUNCTION);
344:       assertEquals(4095, Node.COLUMN_MASK);
345:       assertEquals(39, Node.EMPTY_BLOCK);
346:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
347:       assertEquals(53, Node.INPUT_ID);
348:       assertEquals(40, Node.ORIGINALNAME_PROP);
349:       assertEquals(50, Node.FREE_CALL);
350:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
351:       assertEquals(54, Node.SLASH_V);
352:       assertEquals(46, Node.IS_NAMESPACE);
353:       assertEquals(43, Node.IS_CONSTANT_NAME);
354:       assertEquals(1, Node.DECR_FLAG);
355:       assertEquals(51, Node.STATIC_SOURCE_FILE);
356:       assertEquals(12, Node.COLUMN_BITS);
357:       assertEquals(30, Node.VAR_ARGS_NAME);
358:       assertEquals(2, Node.POST_FLAG);
359:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
360:       assertEquals(15, Node.NO_SIDE_EFFECTS);
361:       assertEquals(47, Node.IS_DISPATCHER);
362:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
363:       assertEquals(32, Node.INCRDECR_PROP);
364:       assertEquals(57, Node.LAST_PROP);
365:       assertEquals(57, Node.REFLECTED_OBJECT);
366:       assertEquals(29, Node.JSDOC_INFO_PROP);
367:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
368:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
369:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
370:       assertEquals(52, Node.LENGTH);
371:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
372:       assertEquals(37, Node.OPT_ARG_NAME);
373:       assertEquals(8, Node.FLAG_NO_THROWS);
374:       assertEquals(48, Node.DIRECTIVES);
375:       assertEquals(36, Node.QUOTED_PROP);
376:       assertEquals(49, Node.DIRECT_EVAL);
377:       assertEquals(56, Node.CHANGE_TIME);
378:       assertFalse(node0.isGetProp());
379:       assertFalse(node0.isComma());
380:       assertFalse(node0.isObjectLit());
381:       assertFalse(node0.isInstanceOf());
382:       assertFalse(node0.isNot());
383:       assertFalse(node0.isBreak());
384:       assertFalse(node0.isAnd());
385:       assertFalse(node0.isInc());
386:       assertFalse(node0.isCast());
387:       assertFalse(node0.isFalse());
388:       assertFalse(node0.isThrow());
389:       assertFalse(node0.isAssignAdd());
390:       assertFalse(node0.isReturn());
391:       assertFalse(node0.isOr());
392:       assertFalse(node0.isTypeOf());
393:       assertFalse(node0.isContinue());
394:       assertFalse(node0.isDelProp());
395:       assertFalse(node0.isGetElem());
396:       assertEquals((-1), node0.getSourcePosition());
397:       assertFalse(node0.isDebugger());
398:       assertFalse(node0.isCall());
399:       assertFalse(node0.isExprResult());
400:       assertFalse(node0.isWhile());
401:       assertFalse(node0.isAssign());
402:       assertFalse(node0.isDec());
403:       assertFalse(node0.hasChildren());
404:       assertEquals(0, node0.getChildCount());
405:       assertFalse(node0.isCatch());
406:       assertFalse(node0.isSetterDef());
407:       assertFalse(node0.isNull());
408:       assertFalse(node0.isParamList());
409:       assertFalse(node0.isTrue());
410:       assertFalse(node0.isVoid());
411:       assertFalse(node0.isStringKey());
412:       assertFalse(node0.isName());
413:       assertFalse(node0.isAdd());
414:       assertFalse(node0.isNew());
415:       assertFalse(node0.isArrayLit());
416:       assertFalse(node0.isFunction());
417:       assertFalse(node0.isEmpty());
418:       assertFalse(node0.isDo());
419:       assertEquals(40, node0.getType());
420:       assertFalse(node0.isVar());
421:       assertFalse(node0.isDefaultCase());
422:       assertEquals((-1), node0.getLineno());
423:       assertFalse(node0.isLabel());
424:       assertFalse(node0.isNumber());
425:       assertFalse(node0.isIn());
426:       assertFalse(node0.hasMoreThanOneChild());
427:       assertFalse(node0.isGetterDef());
428:       assertFalse(node0.isLabelName());
429:       assertFalse(node0.isNE());
430:       assertFalse(node0.isIf());
431:       assertFalse(node0.isSwitch());
432:       assertFalse(node0.isTry());
433:       assertFalse(node0.isHook());
434:       assertFalse(node0.hasOneChild());
435:       assertFalse(node0.isBlock());
436:       assertEquals((-1), node0.getCharno());
437:       assertFalse(node0.isRegExp());
438:       assertFalse(node0.isScript());
439:       assertFalse(node0.isWith());
440:       assertFalse(node0.isFor());
441:       assertFalse(node0.isCase());
442:       assertFalse(node0.isThis());
443:       assertTrue(node0.isString());
444:       
445:       Node node1 = new Node(39, 3053, 4095);
446:       assertEquals(12, Node.COLUMN_BITS);
447:       assertEquals(46, Node.IS_NAMESPACE);
448:       assertEquals(30, Node.VAR_ARGS_NAME);
449:       assertEquals(51, Node.STATIC_SOURCE_FILE);
450:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
451:       assertEquals(57, Node.LAST_PROP);
452:       assertEquals(29, Node.JSDOC_INFO_PROP);
453:       assertEquals(15, Node.NO_SIDE_EFFECTS);
454:       assertEquals(32, Node.INCRDECR_PROP);
455:       assertEquals(1, Node.DECR_FLAG);
456:       assertEquals(57, Node.REFLECTED_OBJECT);
457:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
458:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
459:       assertEquals(52, Node.LENGTH);
460:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
461:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
462:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
463:       assertEquals(56, Node.CHANGE_TIME);
464:       assertEquals(49, Node.DIRECT_EVAL);
465:       assertEquals(48, Node.DIRECTIVES);
466:       assertEquals(37, Node.OPT_ARG_NAME);
467:       assertEquals(55, Node.INFERRED_FUNCTION);
468:       assertEquals(4095, Node.COLUMN_MASK);
469:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
470:       assertEquals(36, Node.QUOTED_PROP);
471:       assertEquals(8, Node.FLAG_NO_THROWS);
472:       assertEquals(39, Node.EMPTY_BLOCK);
473:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
474:       assertEquals(53, Node.INPUT_ID);
475:       assertEquals(40, Node.ORIGINALNAME_PROP);
476:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
477:       assertEquals(50, Node.FREE_CALL);
478:       assertEquals(47, Node.IS_DISPATCHER);
479:       assertEquals(2, Node.POST_FLAG);
480:       assertEquals(54, Node.SLASH_V);
481:       assertEquals(43, Node.IS_CONSTANT_NAME);
482:       assertNotNull(node1);
483:       assertFalse(node1.equals((Object)node0));
484:       assertFalse(node1.isLabel());
485:       assertFalse(node1.isAssignAdd());
486:       assertFalse(node1.isOr());
487:       assertFalse(node1.isReturn());
488:       assertFalse(node1.isTypeOf());
489:       assertFalse(node1.hasMoreThanOneChild());
490:       assertFalse(node1.hasChildren());
491:       assertFalse(node1.isDec());
492:       assertFalse(node1.isLabelName());
493:       assertFalse(node1.isAssign());
494:       assertFalse(node1.isGetElem());
495:       assertFalse(node1.isContinue());
496:       assertFalse(node1.isCast());
497:       assertFalse(node1.isBlock());
498:       assertFalse(node1.isNot());
499:       assertEquals(39, node1.getType());
500:       assertFalse(node1.isWhile());
501:       assertFalse(node1.isScript());
502:       assertFalse(node1.hasOneChild());
503:       assertEquals(12509183, node1.getSourcePosition());
504:       assertFalse(node1.isParamList());
505:       assertFalse(node1.isNull());
506:       assertEquals(0, node1.getChildCount());
507:       assertFalse(node1.isComma());
508:       assertFalse(node1.isName());
509:       assertFalse(node1.isStringKey());
510:       assertFalse(node1.isCall());
511:       assertFalse(node1.isExprResult());
512:       assertFalse(node1.isVoid());
513:       assertFalse(node1.isBreak());
514:       assertFalse(node1.isAdd());
515:       assertEquals(3053, node1.getLineno());
516:       assertFalse(node1.isVar());
517:       assertFalse(node1.isTrue());
518:       assertFalse(node1.isEmpty());
519:       assertFalse(node1.isDo());
520:       assertFalse(node1.isDefaultCase());
521:       assertFalse(node1.isNew());
522:       assertFalse(node1.isIn());
523:       assertFalse(node1.isNE());
524:       assertFalse(node1.isGetterDef());
525:       assertFalse(node1.isIf());
526:       assertFalse(node1.isArrayLit());
527:       assertFalse(node1.isSwitch());
528:       assertFalse(node1.isDelProp());
529:       assertFalse(node1.isTry());
530:       assertFalse(node1.isRegExp());
531:       assertEquals(4095, node1.getCharno());
532:       assertFalse(node1.isHook());
533:       assertFalse(node1.isDebugger());
534:       assertFalse(node1.isFor());
535:       assertFalse(node1.isString());
536:       assertFalse(node1.isGetProp());
537:       assertFalse(node1.isCase());
538:       assertTrue(node1.isNumber());
539:       assertFalse(node1.isInstanceOf());
540:       assertFalse(node1.isThis());
541:       assertFalse(node1.isObjectLit());
542:       assertFalse(node1.isWith());
543:       assertFalse(node1.isFalse());
544:       assertFalse(node1.isAnd());
545:       assertFalse(node1.isCatch());
546:       assertFalse(node1.isFunction());
547:       assertFalse(node1.isThrow());
548:       assertFalse(node1.isInc());
549:       assertFalse(node1.isSetterDef());
550:       
551:       boolean boolean2 = node1.wasEmptyNode();
552:       assertFalse(boolean2);
553:       assertEquals(12, Node.COLUMN_BITS);
554:       assertEquals(46, Node.IS_NAMESPACE);
555:       assertEquals(30, Node.VAR_ARGS_NAME);
556:       assertEquals(51, Node.STATIC_SOURCE_FILE);
557:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
558:       assertEquals(57, Node.LAST_PROP);
559:       assertEquals(29, Node.JSDOC_INFO_PROP);
560:       assertEquals(15, Node.NO_SIDE_EFFECTS);
561:       assertEquals(32, Node.INCRDECR_PROP);
562:       assertEquals(1, Node.DECR_FLAG);
563:       assertEquals(57, Node.REFLECTED_OBJECT);
564:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
565:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
566:       assertEquals(52, Node.LENGTH);
567:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
568:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
569:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
570:       assertEquals(56, Node.CHANGE_TIME);
571:       assertEquals(49, Node.DIRECT_EVAL);
572:       assertEquals(48, Node.DIRECTIVES);
573:       assertEquals(37, Node.OPT_ARG_NAME);
574:       assertEquals(55, Node.INFERRED_FUNCTION);
575:       assertEquals(4095, Node.COLUMN_MASK);
576:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
577:       assertEquals(36, Node.QUOTED_PROP);
578:       assertEquals(8, Node.FLAG_NO_THROWS);
579:       assertEquals(39, Node.EMPTY_BLOCK);
580:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
581:       assertEquals(53, Node.INPUT_ID);
582:       assertEquals(40, Node.ORIGINALNAME_PROP);
583:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
584:       assertEquals(50, Node.FREE_CALL);
585:       assertEquals(47, Node.IS_DISPATCHER);
586:       assertEquals(2, Node.POST_FLAG);
587:       assertEquals(54, Node.SLASH_V);
588:       assertEquals(43, Node.IS_CONSTANT_NAME);
589:       assertFalse(node1.equals((Object)node0));
590:       assertTrue(boolean2 == boolean1);
591:       assertTrue(boolean2 == boolean0);
592:       assertFalse(node1.isLabel());
593:       assertFalse(node1.isAssignAdd());
594:       assertFalse(node1.isOr());
595:       assertFalse(node1.isReturn());
596:       assertFalse(node1.isTypeOf());
597:       assertFalse(node1.hasMoreThanOneChild());
598:       assertFalse(node1.hasChildren());
599:       assertFalse(node1.isDec());
600:       assertFalse(node1.isLabelName());
601:       assertFalse(node1.isAssign());
602:       assertFalse(node1.isGetElem());
603:       assertFalse(node1.isContinue());
604:       assertFalse(node1.isCast());
605:       assertFalse(node1.isBlock());
606:       assertFalse(node1.isNot());
607:       assertEquals(39, node1.getType());
608:       assertFalse(node1.isWhile());
609:       assertFalse(node1.isScript());
610:       assertFalse(node1.hasOneChild());
611:       assertEquals(12509183, node1.getSourcePosition());
612:       assertFalse(node1.isParamList());
613:       assertFalse(node1.isNull());
614:       assertEquals(0, node1.getChildCount());
615:       assertFalse(node1.isComma());
616:       assertFalse(node1.isName());
617:       assertFalse(node1.isStringKey());
618:       assertFalse(node1.isCall());
619:       assertFalse(node1.isExprResult());
620:       assertFalse(node1.isVoid());
621:       assertFalse(node1.isBreak());
622:       assertFalse(node1.isAdd());
623:       assertEquals(3053, node1.getLineno());
624:       assertFalse(node1.isVar());
625:       assertFalse(node1.isTrue());
626:       assertFalse(node1.isEmpty());
627:       assertFalse(node1.isDo());
628:       assertFalse(node1.isDefaultCase());
629:       assertFalse(node1.isNew());
630:       assertFalse(node1.isIn());
631:       assertFalse(node1.isNE());
632:       assertFalse(node1.isGetterDef());
633:       assertFalse(node1.isIf());
634:       assertFalse(node1.isArrayLit());
635:       assertFalse(node1.isSwitch());
636:       assertFalse(node1.isDelProp());
637:       assertFalse(node1.isTry());
638:       assertFalse(node1.isRegExp());
639:       assertEquals(4095, node1.getCharno());
640:       assertFalse(node1.isHook());
641:       assertFalse(node1.isDebugger());
642:       assertFalse(node1.isFor());
643:       assertFalse(node1.isString());
644:       assertFalse(node1.isGetProp());
645:       assertFalse(node1.isCase());
646:       assertTrue(node1.isNumber());
647:       assertFalse(node1.isInstanceOf());
648:       assertFalse(node1.isThis());
649:       assertFalse(node1.isObjectLit());
650:       assertFalse(node1.isWith());
651:       assertFalse(node1.isFalse());
652:       assertFalse(node1.isAnd());
653:       assertFalse(node1.isCatch());
654:       assertFalse(node1.isFunction());
655:       assertFalse(node1.isThrow());
656:       assertFalse(node1.isInc());
657:       assertFalse(node1.isSetterDef());
658:       
659:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
660:       assertNotNull(simpleErrorReporter0);
661:       
662:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
663:       assertNotNull(jSTypeRegistry0);
664:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
665:       
666:       JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
667:       assertNotNull(jSTypeRegistry1);
668:       assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
669:       assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
670:       
671:       Node node2 = new Node(49);
672:       assertEquals(48, Node.DIRECTIVES);
673:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
674:       assertEquals(8, Node.FLAG_NO_THROWS);
675:       assertEquals(39, Node.EMPTY_BLOCK);
676:       assertEquals(4095, Node.COLUMN_MASK);
677:       assertEquals(55, Node.INFERRED_FUNCTION);
678:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
679:       assertEquals(52, Node.LENGTH);
680:       assertEquals(57, Node.REFLECTED_OBJECT);
681:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
682:       assertEquals(29, Node.JSDOC_INFO_PROP);
683:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
684:       assertEquals(53, Node.INPUT_ID);
685:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
686:       assertEquals(49, Node.DIRECT_EVAL);
687:       assertEquals(36, Node.QUOTED_PROP);
688:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
689:       assertEquals(56, Node.CHANGE_TIME);
690:       assertEquals(32, Node.INCRDECR_PROP);
691:       assertEquals(46, Node.IS_NAMESPACE);
692:       assertEquals(51, Node.STATIC_SOURCE_FILE);
693:       assertEquals(37, Node.OPT_ARG_NAME);
694:       assertEquals(15, Node.NO_SIDE_EFFECTS);
695:       assertEquals(57, Node.LAST_PROP);
696:       assertEquals(47, Node.IS_DISPATCHER);
697:       assertEquals(2, Node.POST_FLAG);
698:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
699:       assertEquals(30, Node.VAR_ARGS_NAME);
700:       assertEquals(1, Node.DECR_FLAG);
701:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
702:       assertEquals(12, Node.COLUMN_BITS);
703:       assertEquals(40, Node.ORIGINALNAME_PROP);
704:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
705:       assertEquals(50, Node.FREE_CALL);
706:       assertEquals(54, Node.SLASH_V);
707:       assertEquals(43, Node.IS_CONSTANT_NAME);
708:       assertNotNull(node2);
709:       assertFalse(node2.equals((Object)node0));
710:       assertFalse(node2.equals((Object)node1));
711:       assertFalse(node2.isThis());
712:       assertFalse(node2.isGetProp());
713:       assertFalse(node2.isComma());
714:       assertFalse(node2.isBreak());
715:       assertFalse(node2.isInstanceOf());
716:       assertFalse(node2.isAnd());
717:       assertFalse(node2.isObjectLit());
718:       assertFalse(node2.isNot());
719:       assertEquals((-1), node2.getCharno());
720:       assertFalse(node2.isExprResult());
721:       assertFalse(node2.isString());
722:       assertFalse(node2.isWith());
723:       assertFalse(node2.isScript());
724:       assertFalse(node2.isCase());
725:       assertFalse(node2.hasOneChild());
726:       assertFalse(node2.isAssign());
727:       assertFalse(node2.isHook());
728:       assertFalse(node2.hasChildren());
729:       assertEquals((-1), node2.getSourcePosition());
730:       assertEquals((-1), node2.getLineno());
731:       assertFalse(node2.isIn());
732:       assertEquals(49, node2.getType());
733:       assertFalse(node2.isIf());
734:       assertFalse(node2.isNE());
735:       assertFalse(node2.isInc());
736:       assertFalse(node2.isFunction());
737:       assertFalse(node2.isCast());
738:       assertFalse(node2.isContinue());
739:       assertFalse(node2.isFalse());
740:       assertFalse(node2.isParamList());
741:       assertFalse(node2.isSetterDef());
742:       assertTrue(node2.isThrow());
743:       assertFalse(node2.isCatch());
744:       assertFalse(node2.isCall());
745:       assertFalse(node2.isName());
746:       assertFalse(node2.isNull());
747:       assertFalse(node2.isStringKey());
748:       assertFalse(node2.isVoid());
749:       assertFalse(node2.isDebugger());
750:       assertFalse(node2.isTry());
751:       assertFalse(node2.isRegExp());
752:       assertFalse(node2.hasMoreThanOneChild());
753:       assertFalse(node2.isWhile());
754:       assertFalse(node2.isReturn());
755:       assertFalse(node2.isFor());
756:       assertFalse(node2.isBlock());
757:       assertFalse(node2.isLabel());
758:       assertFalse(node2.isTypeOf());
759:       assertFalse(node2.isOr());
760:       assertFalse(node2.isDec());
761:       assertFalse(node2.isGetterDef());
762:       assertFalse(node2.isNumber());
763:       assertFalse(node2.isEmpty());
764:       assertFalse(node2.isGetElem());
765:       assertFalse(node2.isArrayLit());
766:       assertFalse(node2.isLabelName());
767:       assertFalse(node2.isDelProp());
768:       assertFalse(node2.isTrue());
769:       assertFalse(node2.isSwitch());
770:       assertFalse(node2.isNew());
771:       assertFalse(node2.isAdd());
772:       assertFalse(node2.isDo());
773:       assertEquals(0, node2.getChildCount());
774:       assertFalse(node2.isDefaultCase());
775:       assertFalse(node2.isAssignAdd());
776:       assertFalse(node2.isVar());
777:       
778:       Node node3 = new Node(2025, node1);
779:       assertEquals(12, Node.COLUMN_BITS);
780:       assertEquals(46, Node.IS_NAMESPACE);
781:       assertEquals(30, Node.VAR_ARGS_NAME);
782:       assertEquals(51, Node.STATIC_SOURCE_FILE);
783:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
784:       assertEquals(57, Node.LAST_PROP);
785:       assertEquals(29, Node.JSDOC_INFO_PROP);
786:       assertEquals(15, Node.NO_SIDE_EFFECTS);
787:       assertEquals(32, Node.INCRDECR_PROP);
788:       assertEquals(1, Node.DECR_FLAG);
789:       assertEquals(57, Node.REFLECTED_OBJECT);
790:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
791:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
792:       assertEquals(52, Node.LENGTH);
793:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
794:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
795:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
796:       assertEquals(56, Node.CHANGE_TIME);
797:       assertEquals(49, Node.DIRECT_EVAL);
798:       assertEquals(48, Node.DIRECTIVES);
799:       assertEquals(37, Node.OPT_ARG_NAME);
800:       assertEquals(55, Node.INFERRED_FUNCTION);
801:       assertEquals(4095, Node.COLUMN_MASK);
802:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
803:       assertEquals(36, Node.QUOTED_PROP);
804:       assertEquals(8, Node.FLAG_NO_THROWS);
805:       assertEquals(39, Node.EMPTY_BLOCK);
806:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
807:       assertEquals(53, Node.INPUT_ID);
808:       assertEquals(40, Node.ORIGINALNAME_PROP);
809:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
810:       assertEquals(50, Node.FREE_CALL);
811:       assertEquals(47, Node.IS_DISPATCHER);
812:       assertEquals(2, Node.POST_FLAG);
813:       assertEquals(54, Node.SLASH_V);
814:       assertEquals(43, Node.IS_CONSTANT_NAME);
815:       assertEquals(1, Node.DECR_FLAG);
816:       assertEquals(12, Node.COLUMN_BITS);
817:       assertEquals(51, Node.STATIC_SOURCE_FILE);
818:       assertEquals(30, Node.VAR_ARGS_NAME);
819:       assertEquals(37, Node.OPT_ARG_NAME);
820:       assertEquals(46, Node.IS_NAMESPACE);
821:       assertEquals(54, Node.SLASH_V);
822:       assertEquals(56, Node.CHANGE_TIME);
823:       assertEquals(49, Node.DIRECT_EVAL);
824:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
825:       assertEquals(40, Node.ORIGINALNAME_PROP);
826:       assertEquals(29, Node.JSDOC_INFO_PROP);
827:       assertEquals(47, Node.IS_DISPATCHER);
828:       assertEquals(57, Node.REFLECTED_OBJECT);
829:       assertEquals(52, Node.LENGTH);
830:       assertEquals(8, Node.FLAG_NO_THROWS);
831:       assertEquals(2, Node.POST_FLAG);
832:       assertEquals(53, Node.INPUT_ID);
833:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
834:       assertEquals(39, Node.EMPTY_BLOCK);
835:       assertEquals(15, Node.NO_SIDE_EFFECTS);
836:       assertEquals(57, Node.LAST_PROP);
837:       assertEquals(55, Node.INFERRED_FUNCTION);
838:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
839:       assertEquals(36, Node.QUOTED_PROP);
840:       assertEquals(4095, Node.COLUMN_MASK);
841:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
842:       assertEquals(43, Node.IS_CONSTANT_NAME);
843:       assertEquals(48, Node.DIRECTIVES);
844:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
845:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
846:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
847:       assertEquals(50, Node.FREE_CALL);
848:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
849:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
850:       assertEquals(32, Node.INCRDECR_PROP);
851:       assertNotNull(node3);
852:       assertFalse(node1.equals((Object)node0));
853:       assertFalse(node1.equals((Object)node2));
854:       assertFalse(node3.equals((Object)node0));
855:       assertFalse(node3.equals((Object)node1));
856:       assertFalse(node3.equals((Object)node2));
857:       assertFalse(node1.isLabel());
858:       assertFalse(node1.isAssignAdd());
859:       assertFalse(node1.isOr());
860:       assertFalse(node1.isReturn());
861:       assertFalse(node1.isTypeOf());
862:       assertFalse(node1.hasMoreThanOneChild());
863:       assertFalse(node1.hasChildren());
864:       assertFalse(node1.isDec());
865:       assertFalse(node1.isLabelName());
866:       assertFalse(node1.isAssign());
867:       assertFalse(node1.isGetElem());
868:       assertFalse(node1.isContinue());
869:       assertFalse(node1.isCast());
870:       assertFalse(node1.isBlock());
871:       assertFalse(node1.isNot());
872:       assertEquals(39, node1.getType());
873:       assertFalse(node1.isWhile());
874:       assertFalse(node1.isScript());
875:       assertFalse(node1.hasOneChild());
876:       assertEquals(12509183, node1.getSourcePosition());
877:       assertFalse(node1.isParamList());
878:       assertFalse(node1.isNull());
879:       assertEquals(0, node1.getChildCount());
880:       assertFalse(node1.isComma());
881:       assertFalse(node1.isName());
882:       assertFalse(node1.isStringKey());
883:       assertFalse(node1.isCall());
884:       assertFalse(node1.isExprResult());
885:       assertFalse(node1.isVoid());
886:       assertFalse(node1.isBreak());
887:       assertFalse(node1.isAdd());
888:       assertEquals(3053, node1.getLineno());
889:       assertFalse(node1.isVar());
890:       assertFalse(node1.isTrue());
891:       assertFalse(node1.isEmpty());
892:       assertFalse(node1.isDo());
893:       assertFalse(node1.isDefaultCase());
894:       assertFalse(node1.isNew());
895:       assertFalse(node1.isIn());
896:       assertFalse(node1.isNE());
897:       assertFalse(node1.isGetterDef());
898:       assertFalse(node1.isIf());
899:       assertFalse(node1.isArrayLit());
900:       assertFalse(node1.isSwitch());
901:       assertFalse(node1.isDelProp());
902:       assertFalse(node1.isTry());
903:       assertFalse(node1.isRegExp());
904:       assertEquals(4095, node1.getCharno());
905:       assertFalse(node1.isHook());
906:       assertFalse(node1.isDebugger());
907:       assertFalse(node1.isFor());
908:       assertFalse(node1.isString());
909:       assertFalse(node1.isGetProp());
910:       assertFalse(node1.isCase());
911:       assertTrue(node1.isNumber());
912:       assertFalse(node1.isInstanceOf());
913:       assertFalse(node1.isThis());
914:       assertFalse(node1.isObjectLit());
915:       assertFalse(node1.isWith());
916:       assertFalse(node1.isFalse());
917:       assertFalse(node1.isAnd());
918:       assertFalse(node1.isCatch());
919:       assertFalse(node1.isFunction());
920:       assertFalse(node1.isThrow());
921:       assertFalse(node1.isInc());
922:       assertFalse(node1.isSetterDef());
923:       assertFalse(node3.isReturn());
924:       assertEquals(2025, node3.getType());
925:       assertFalse(node3.isLabel());
926:       assertFalse(node3.isContinue());
927:       assertFalse(node3.isOr());
928:       assertFalse(node3.hasMoreThanOneChild());
929:       assertFalse(node3.isTypeOf());
930:       assertFalse(node3.isNumber());
931:       assertFalse(node3.isDec());
932:       assertFalse(node3.isWhile());
933:       assertFalse(node3.isNew());
934:       assertFalse(node3.isAssignAdd());
935:       assertFalse(node3.isDo());
936:       assertFalse(node3.isAdd());
937:       assertFalse(node3.isCall());
938:       assertFalse(node3.isBlock());
939:       assertFalse(node3.isAssign());
940:       assertFalse(node3.isNull());
941:       assertFalse(node3.isExprResult());
942:       assertFalse(node3.isGetElem());
943:       assertEquals((-1), node3.getLineno());
944:       assertFalse(node3.isName());
945:       assertFalse(node3.isInstanceOf());
946:       assertFalse(node3.isCatch());
947:       assertFalse(node3.isWith());
948:       assertFalse(node3.isDefaultCase());
949:       assertFalse(node3.isThis());
950:       assertFalse(node3.isScript());
951:       assertFalse(node3.isTry());
952:       assertFalse(node3.isArrayLit());
953:       assertFalse(node3.isVar());
954:       assertEquals((-1), node3.getCharno());
955:       assertFalse(node3.isGetterDef());
956:       assertFalse(node3.isParamList());
957:       assertFalse(node3.isStringKey());
958:       assertFalse(node3.isSwitch());
959:       assertFalse(node3.isLabelName());
960:       assertFalse(node3.isIn());
961:       assertEquals(1, node3.getChildCount());
962:       assertTrue(node3.hasChildren());
963:       assertFalse(node3.isString());
964:       assertFalse(node3.isInc());
965:       assertTrue(node3.hasOneChild());
966:       assertFalse(node3.isEmpty());
967:       assertFalse(node3.isFor());
968:       assertFalse(node3.isCase());
969:       assertFalse(node3.isHook());
970:       assertFalse(node3.isRegExp());
971:       assertFalse(node3.isIf());
972:       assertFalse(node3.isBreak());
973:       assertFalse(node3.isNE());
974:       assertFalse(node3.isTrue());
975:       assertFalse(node3.isVoid());
976:       assertFalse(node3.isDelProp());
977:       assertFalse(node3.isComma());
978:       assertFalse(node3.isNot());
979:       assertFalse(node3.isObjectLit());
980:       assertFalse(node3.isSetterDef());
981:       assertFalse(node3.isGetProp());
982:       assertFalse(node3.isThrow());
983:       assertFalse(node3.isCast());
984:       assertFalse(node3.isFalse());
985:       assertFalse(node3.isDebugger());
986:       assertFalse(node3.isFunction());
987:       assertEquals((-1), node3.getSourcePosition());
988:       assertFalse(node3.isAnd());
989:       
990:       Iterable<Node> iterable0 = node2.children();
991:       assertFalse(iterable0.contains(node0));
992:       assertNotSame(node2, node1);
993:       assertNotSame(node2, node3);
994:       assertEquals(48, Node.DIRECTIVES);
995:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
996:       assertEquals(8, Node.FLAG_NO_THROWS);
997:       assertEquals(39, Node.EMPTY_BLOCK);
998:       assertEquals(4095, Node.COLUMN_MASK);
999:       assertEquals(55, Node.INFERRED_FUNCTION);
1000:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1001:       assertEquals(52, Node.LENGTH);
1002:       assertEquals(57, Node.REFLECTED_OBJECT);
1003:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1004:       assertEquals(29, Node.JSDOC_INFO_PROP);
1005:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1006:       assertEquals(53, Node.INPUT_ID);
1007:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1008:       assertEquals(49, Node.DIRECT_EVAL);
1009:       assertEquals(36, Node.QUOTED_PROP);
1010:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1011:       assertEquals(56, Node.CHANGE_TIME);
1012:       assertEquals(32, Node.INCRDECR_PROP);
1013:       assertEquals(46, Node.IS_NAMESPACE);
1014:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1015:       assertEquals(37, Node.OPT_ARG_NAME);
1016:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1017:       assertEquals(57, Node.LAST_PROP);
1018:       assertEquals(47, Node.IS_DISPATCHER);
1019:       assertEquals(2, Node.POST_FLAG);
1020:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1021:       assertEquals(30, Node.VAR_ARGS_NAME);
1022:       assertEquals(1, Node.DECR_FLAG);
1023:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1024:       assertEquals(12, Node.COLUMN_BITS);
1025:       assertEquals(40, Node.ORIGINALNAME_PROP);
1026:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1027:       assertEquals(50, Node.FREE_CALL);
1028:       assertEquals(54, Node.SLASH_V);
1029:       assertEquals(43, Node.IS_CONSTANT_NAME);
1030:       assertNotNull(iterable0);
1031:       assertFalse(node2.equals((Object)node0));
1032:       assertFalse(node2.equals((Object)node1));
1033:       assertFalse(node2.equals((Object)node3));
1034:       assertFalse(node2.isThis());
1035:       assertFalse(node2.isGetProp());
1036:       assertFalse(node2.isComma());
1037:       assertFalse(node2.isBreak());
1038:       assertFalse(node2.isInstanceOf());
1039:       assertFalse(node2.isAnd());
1040:       assertFalse(node2.isObjectLit());
1041:       assertFalse(node2.isNot());
1042:       assertEquals((-1), node2.getCharno());
1043:       assertFalse(node2.isExprResult());
1044:       assertFalse(node2.isString());
1045:       assertFalse(node2.isWith());
1046:       assertFalse(node2.isScript());
1047:       assertFalse(node2.isCase());
1048:       assertFalse(node2.hasOneChild());
1049:       assertFalse(node2.isAssign());
1050:       assertFalse(node2.isHook());
1051:       assertFalse(node2.hasChildren());
1052:       assertEquals((-1), node2.getSourcePosition());
1053:       assertEquals((-1), node2.getLineno());
1054:       assertFalse(node2.isIn());
1055:       assertEquals(49, node2.getType());
1056:       assertFalse(node2.isIf());
1057:       assertFalse(node2.isNE());
1058:       assertFalse(node2.isInc());
1059:       assertFalse(node2.isFunction());
1060:       assertFalse(node2.isCast());
1061:       assertFalse(node2.isContinue());
1062:       assertFalse(node2.isFalse());
1063:       assertFalse(node2.isParamList());
1064:       assertFalse(node2.isSetterDef());
1065:       assertTrue(node2.isThrow());
1066:       assertFalse(node2.isCatch());
1067:       assertFalse(node2.isCall());
1068:       assertFalse(node2.isName());
1069:       assertFalse(node2.isNull());
1070:       assertFalse(node2.isStringKey());
1071:       assertFalse(node2.isVoid());
1072:       assertFalse(node2.isDebugger());
1073:       assertFalse(node2.isTry());
1074:       assertFalse(node2.isRegExp());
1075:       assertFalse(node2.hasMoreThanOneChild());
1076:       assertFalse(node2.isWhile());
1077:       assertFalse(node2.isReturn());
1078:       assertFalse(node2.isFor());
1079:       assertFalse(node2.isBlock());
1080:       assertFalse(node2.isLabel());
1081:       assertFalse(node2.isTypeOf());
1082:       assertFalse(node2.isOr());
1083:       assertFalse(node2.isDec());
1084:       assertFalse(node2.isGetterDef());
1085:       assertFalse(node2.isNumber());
1086:       assertFalse(node2.isEmpty());
1087:       assertFalse(node2.isGetElem());
1088:       assertFalse(node2.isArrayLit());
1089:       assertFalse(node2.isLabelName());
1090:       assertFalse(node2.isDelProp());
1091:       assertFalse(node2.isTrue());
1092:       assertFalse(node2.isSwitch());
1093:       assertFalse(node2.isNew());
1094:       assertFalse(node2.isAdd());
1095:       assertFalse(node2.isDo());
1096:       assertEquals(0, node2.getChildCount());
1097:       assertFalse(node2.isDefaultCase());
1098:       assertFalse(node2.isAssignAdd());
1099:       assertFalse(node2.isVar());
1100:       
1101:       boolean boolean3 = node3.isGetProp();
1102:       assertFalse(boolean3);
1103:       assertNotSame(node1, node3);
1104:       assertNotSame(node1, node2);
1105:       assertNotSame(node3, node1);
1106:       assertNotSame(node3, node2);
1107:       assertEquals(12, Node.COLUMN_BITS);
1108:       assertEquals(46, Node.IS_NAMESPACE);
1109:       assertEquals(30, Node.VAR_ARGS_NAME);
1110:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1111:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1112:       assertEquals(57, Node.LAST_PROP);
1113:       assertEquals(29, Node.JSDOC_INFO_PROP);
1114:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1115:       assertEquals(32, Node.INCRDECR_PROP);
1116:       assertEquals(1, Node.DECR_FLAG);
1117:       assertEquals(57, Node.REFLECTED_OBJECT);
1118:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1119:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1120:       assertEquals(52, Node.LENGTH);
1121:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1122:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1123:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1124:       assertEquals(56, Node.CHANGE_TIME);
1125:       assertEquals(49, Node.DIRECT_EVAL);
1126:       assertEquals(48, Node.DIRECTIVES);
1127:       assertEquals(37, Node.OPT_ARG_NAME);
1128:       assertEquals(55, Node.INFERRED_FUNCTION);
1129:       assertEquals(4095, Node.COLUMN_MASK);
1130:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1131:       assertEquals(36, Node.QUOTED_PROP);
1132:       assertEquals(8, Node.FLAG_NO_THROWS);
1133:       assertEquals(39, Node.EMPTY_BLOCK);
1134:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1135:       assertEquals(53, Node.INPUT_ID);
1136:       assertEquals(40, Node.ORIGINALNAME_PROP);
1137:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1138:       assertEquals(50, Node.FREE_CALL);
1139:       assertEquals(47, Node.IS_DISPATCHER);
1140:       assertEquals(2, Node.POST_FLAG);
1141:       assertEquals(54, Node.SLASH_V);
1142:       assertEquals(43, Node.IS_CONSTANT_NAME);
1143:       assertEquals(1, Node.DECR_FLAG);
1144:       assertEquals(12, Node.COLUMN_BITS);
1145:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1146:       assertEquals(30, Node.VAR_ARGS_NAME);
1147:       assertEquals(37, Node.OPT_ARG_NAME);
1148:       assertEquals(46, Node.IS_NAMESPACE);
1149:       assertEquals(54, Node.SLASH_V);
1150:       assertEquals(56, Node.CHANGE_TIME);
1151:       assertEquals(49, Node.DIRECT_EVAL);
1152:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1153:       assertEquals(40, Node.ORIGINALNAME_PROP);
1154:       assertEquals(29, Node.JSDOC_INFO_PROP);
1155:       assertEquals(47, Node.IS_DISPATCHER);
1156:       assertEquals(57, Node.REFLECTED_OBJECT);
1157:       assertEquals(52, Node.LENGTH);
1158:       assertEquals(8, Node.FLAG_NO_THROWS);
1159:       assertEquals(2, Node.POST_FLAG);
1160:       assertEquals(53, Node.INPUT_ID);
1161:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1162:       assertEquals(39, Node.EMPTY_BLOCK);
1163:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1164:       assertEquals(57, Node.LAST_PROP);
1165:       assertEquals(55, Node.INFERRED_FUNCTION);
1166:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1167:       assertEquals(36, Node.QUOTED_PROP);
1168:       assertEquals(4095, Node.COLUMN_MASK);
1169:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1170:       assertEquals(43, Node.IS_CONSTANT_NAME);
1171:       assertEquals(48, Node.DIRECTIVES);
1172:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1173:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1174:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1175:       assertEquals(50, Node.FREE_CALL);
1176:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1177:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1178:       assertEquals(32, Node.INCRDECR_PROP);
1179:       assertFalse(node1.equals((Object)node3));
1180:       assertFalse(node1.equals((Object)node0));
1181:       assertFalse(node1.equals((Object)node2));
1182:       assertFalse(node3.equals((Object)node0));
1183:       assertFalse(node3.equals((Object)node1));
1184:       assertFalse(node3.equals((Object)node2));
1185:       assertTrue(boolean3 == boolean0);
1186:       assertTrue(boolean3 == boolean2);
1187:       assertTrue(boolean3 == boolean1);
1188:       assertFalse(node1.isLabel());
1189:       assertFalse(node1.isAssignAdd());
1190:       assertFalse(node1.isOr());
1191:       assertFalse(node1.isReturn());
1192:       assertFalse(node1.isTypeOf());
1193:       assertFalse(node1.hasMoreThanOneChild());
1194:       assertFalse(node1.hasChildren());
1195:       assertFalse(node1.isDec());
1196:       assertFalse(node1.isLabelName());
1197:       assertFalse(node1.isAssign());
1198:       assertFalse(node1.isGetElem());
1199:       assertFalse(node1.isContinue());
1200:       assertFalse(node1.isCast());
1201:       assertFalse(node1.isBlock());
1202:       assertFalse(node1.isNot());
1203:       assertEquals(39, node1.getType());
1204:       assertFalse(node1.isWhile());
1205:       assertFalse(node1.isScript());
1206:       assertFalse(node1.hasOneChild());
1207:       assertEquals(12509183, node1.getSourcePosition());
1208:       assertFalse(node1.isParamList());
1209:       assertFalse(node1.isNull());
1210:       assertEquals(0, node1.getChildCount());
1211:       assertFalse(node1.isComma());
1212:       assertFalse(node1.isName());
1213:       assertFalse(node1.isStringKey());
1214:       assertFalse(node1.isCall());
1215:       assertFalse(node1.isExprResult());
1216:       assertFalse(node1.isVoid());
1217:       assertFalse(node1.isBreak());
1218:       assertFalse(node1.isAdd());
1219:       assertEquals(3053, node1.getLineno());
1220:       assertFalse(node1.isVar());
1221:       assertFalse(node1.isTrue());
1222:       assertFalse(node1.isEmpty());
1223:       assertFalse(node1.isDo());
1224:       assertFalse(node1.isDefaultCase());
1225:       assertFalse(node1.isNew());
1226:       assertFalse(node1.isIn());
1227:       assertFalse(node1.isNE());
1228:       assertFalse(node1.isGetterDef());
1229:       assertFalse(node1.isIf());
1230:       assertFalse(node1.isArrayLit());
1231:       assertFalse(node1.isSwitch());
1232:       assertFalse(node1.isDelProp());
1233:       assertFalse(node1.isTry());
1234:       assertFalse(node1.isRegExp());
1235:       assertEquals(4095, node1.getCharno());
1236:       assertFalse(node1.isHook());
1237:       assertFalse(node1.isDebugger());
1238:       assertFalse(node1.isFor());
1239:       assertFalse(node1.isString());
1240:       assertFalse(node1.isGetProp());
1241:       assertFalse(node1.isCase());
1242:       assertTrue(node1.isNumber());
1243:       assertFalse(node1.isInstanceOf());
1244:       assertFalse(node1.isThis());
1245:       assertFalse(node1.isObjectLit());
1246:       assertFalse(node1.isWith());
1247:       assertFalse(node1.isFalse());
1248:       assertFalse(node1.isAnd());
1249:       assertFalse(node1.isCatch());
1250:       assertFalse(node1.isFunction());
1251:       assertFalse(node1.isThrow());
1252:       assertFalse(node1.isInc());
1253:       assertFalse(node1.isSetterDef());
1254:       assertFalse(node3.isReturn());
1255:       assertEquals(2025, node3.getType());
1256:       assertFalse(node3.isLabel());
1257:       assertFalse(node3.isContinue());
1258:       assertFalse(node3.isOr());
1259:       assertFalse(node3.hasMoreThanOneChild());
1260:       assertFalse(node3.isTypeOf());
1261:       assertFalse(node3.isNumber());
1262:       assertFalse(node3.isDec());
1263:       assertFalse(node3.isWhile());
1264:       assertFalse(node3.isNew());
1265:       assertFalse(node3.isAssignAdd());
1266:       assertFalse(node3.isDo());
1267:       assertFalse(node3.isAdd());
1268:       assertFalse(node3.isCall());
1269:       assertFalse(node3.isBlock());
1270:       assertFalse(node3.isAssign());
1271:       assertFalse(node3.isNull());
1272:       assertFalse(node3.isExprResult());
1273:       assertFalse(node3.isGetElem());
1274:       assertEquals((-1), node3.getLineno());
1275:       assertFalse(node3.isName());
1276:       assertFalse(node3.isInstanceOf());
1277:       assertFalse(node3.isCatch());
1278:       assertFalse(node3.isWith());
1279:       assertFalse(node3.isDefaultCase());
1280:       assertFalse(node3.isThis());
1281:       assertFalse(node3.isScript());
1282:       assertFalse(node3.isTry());
1283:       assertFalse(node3.isArrayLit());
1284:       assertFalse(node3.isVar());
1285:       assertEquals((-1), node3.getCharno());
1286:       assertFalse(node3.isGetterDef());
1287:       assertFalse(node3.isParamList());
1288:       assertFalse(node3.isStringKey());
1289:       assertFalse(node3.isSwitch());
1290:       assertFalse(node3.isLabelName());
1291:       assertFalse(node3.isIn());
1292:       assertEquals(1, node3.getChildCount());
1293:       assertTrue(node3.hasChildren());
1294:       assertFalse(node3.isString());
1295:       assertFalse(node3.isInc());
1296:       assertTrue(node3.hasOneChild());
1297:       assertFalse(node3.isEmpty());
1298:       assertFalse(node3.isFor());
1299:       assertFalse(node3.isCase());
1300:       assertFalse(node3.isHook());
1301:       assertFalse(node3.isRegExp());
1302:       assertFalse(node3.isIf());
1303:       assertFalse(node3.isBreak());
1304:       assertFalse(node3.isNE());
1305:       assertFalse(node3.isTrue());
1306:       assertFalse(node3.isVoid());
1307:       assertFalse(node3.isDelProp());
1308:       assertFalse(node3.isComma());
1309:       assertFalse(node3.isNot());
1310:       assertFalse(node3.isObjectLit());
1311:       assertFalse(node3.isSetterDef());
1312:       assertFalse(node3.isGetProp());
1313:       assertFalse(node3.isThrow());
1314:       assertFalse(node3.isCast());
1315:       assertFalse(node3.isFalse());
1316:       assertFalse(node3.isDebugger());
1317:       assertFalse(node3.isFunction());
1318:       assertEquals((-1), node3.getSourcePosition());
1319:       assertFalse(node3.isAnd());
1320:       
1321:       boolean boolean4 = node1.isParamList();
1322:       assertFalse(boolean4);
1323:       assertNotSame(node1, node3);
1324:       assertNotSame(node1, node2);
1325:       assertEquals(12, Node.COLUMN_BITS);
1326:       assertEquals(46, Node.IS_NAMESPACE);
1327:       assertEquals(30, Node.VAR_ARGS_NAME);
1328:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1329:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1330:       assertEquals(57, Node.LAST_PROP);
1331:       assertEquals(29, Node.JSDOC_INFO_PROP);
1332:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1333:       assertEquals(32, Node.INCRDECR_PROP);
1334:       assertEquals(1, Node.DECR_FLAG);
1335:       assertEquals(57, Node.REFLECTED_OBJECT);
1336:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1337:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1338:       assertEquals(52, Node.LENGTH);
1339:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1340:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1341:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1342:       assertEquals(56, Node.CHANGE_TIME);
1343:       assertEquals(49, Node.DIRECT_EVAL);
1344:       assertEquals(48, Node.DIRECTIVES);
1345:       assertEquals(37, Node.OPT_ARG_NAME);
1346:       assertEquals(55, Node.INFERRED_FUNCTION);
1347:       assertEquals(4095, Node.COLUMN_MASK);
1348:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1349:       assertEquals(36, Node.QUOTED_PROP);
1350:       assertEquals(8, Node.FLAG_NO_THROWS);
1351:       assertEquals(39, Node.EMPTY_BLOCK);
1352:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1353:       assertEquals(53, Node.INPUT_ID);
1354:       assertEquals(40, Node.ORIGINALNAME_PROP);
1355:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1356:       assertEquals(50, Node.FREE_CALL);
1357:       assertEquals(47, Node.IS_DISPATCHER);
1358:       assertEquals(2, Node.POST_FLAG);
1359:       assertEquals(54, Node.SLASH_V);
1360:       assertEquals(43, Node.IS_CONSTANT_NAME);
1361:       assertFalse(node1.equals((Object)node3));
1362:       assertFalse(node1.equals((Object)node0));
1363:       assertFalse(node1.equals((Object)node2));
1364:       assertTrue(boolean4 == boolean1);
1365:       assertTrue(boolean4 == boolean3);
1366:       assertTrue(boolean4 == boolean2);
1367:       assertTrue(boolean4 == boolean0);
1368:       assertFalse(node1.isLabel());
1369:       assertFalse(node1.isAssignAdd());
1370:       assertFalse(node1.isOr());
1371:       assertFalse(node1.isReturn());
1372:       assertFalse(node1.isTypeOf());
1373:       assertFalse(node1.hasMoreThanOneChild());
1374:       assertFalse(node1.hasChildren());
1375:       assertFalse(node1.isDec());
1376:       assertFalse(node1.isLabelName());
1377:       assertFalse(node1.isAssign());
1378:       assertFalse(node1.isGetElem());
1379:       assertFalse(node1.isContinue());
1380:       assertFalse(node1.isCast());
1381:       assertFalse(node1.isBlock());
1382:       assertFalse(node1.isNot());
1383:       assertEquals(39, node1.getType());
1384:       assertFalse(node1.isWhile());
1385:       assertFalse(node1.isScript());
1386:       assertFalse(node1.hasOneChild());
1387:       assertEquals(12509183, node1.getSourcePosition());
1388:       assertFalse(node1.isParamList());
1389:       assertFalse(node1.isNull());
1390:       assertEquals(0, node1.getChildCount());
1391:       assertFalse(node1.isComma());
1392:       assertFalse(node1.isName());
1393:       assertFalse(node1.isStringKey());
1394:       assertFalse(node1.isCall());
1395:       assertFalse(node1.isExprResult());
1396:       assertFalse(node1.isVoid());
1397:       assertFalse(node1.isBreak());
1398:       assertFalse(node1.isAdd());
1399:       assertEquals(3053, node1.getLineno());
1400:       assertFalse(node1.isVar());
1401:       assertFalse(node1.isTrue());
1402:       assertFalse(node1.isEmpty());
1403:       assertFalse(node1.isDo());
1404:       assertFalse(node1.isDefaultCase());
1405:       assertFalse(node1.isNew());
1406:       assertFalse(node1.isIn());
1407:       assertFalse(node1.isNE());
1408:       assertFalse(node1.isGetterDef());
1409:       assertFalse(node1.isIf());
1410:       assertFalse(node1.isArrayLit());
1411:       assertFalse(node1.isSwitch());
1412:       assertFalse(node1.isDelProp());
1413:       assertFalse(node1.isTry());
1414:       assertFalse(node1.isRegExp());
1415:       assertEquals(4095, node1.getCharno());
1416:       assertFalse(node1.isHook());
1417:       assertFalse(node1.isDebugger());
1418:       assertFalse(node1.isFor());
1419:       assertFalse(node1.isString());
1420:       assertFalse(node1.isGetProp());
1421:       assertFalse(node1.isCase());
1422:       assertTrue(node1.isNumber());
1423:       assertFalse(node1.isInstanceOf());
1424:       assertFalse(node1.isThis());
1425:       assertFalse(node1.isObjectLit());
1426:       assertFalse(node1.isWith());
1427:       assertFalse(node1.isFalse());
1428:       assertFalse(node1.isAnd());
1429:       assertFalse(node1.isCatch());
1430:       assertFalse(node1.isFunction());
1431:       assertFalse(node1.isThrow());
1432:       assertFalse(node1.isInc());
1433:       assertFalse(node1.isSetterDef());
1434:       
1435:       boolean boolean5 = node2.isSetterDef();
1436:       assertFalse(boolean5);
1437:       assertNotSame(node2, node1);
1438:       assertNotSame(node2, node3);
1439:       assertEquals(48, Node.DIRECTIVES);
1440:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1441:       assertEquals(8, Node.FLAG_NO_THROWS);
1442:       assertEquals(39, Node.EMPTY_BLOCK);
1443:       assertEquals(4095, Node.COLUMN_MASK);
1444:       assertEquals(55, Node.INFERRED_FUNCTION);
1445:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1446:       assertEquals(52, Node.LENGTH);
1447:       assertEquals(57, Node.REFLECTED_OBJECT);
1448:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1449:       assertEquals(29, Node.JSDOC_INFO_PROP);
1450:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1451:       assertEquals(53, Node.INPUT_ID);
1452:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1453:       assertEquals(49, Node.DIRECT_EVAL);
1454:       assertEquals(36, Node.QUOTED_PROP);
1455:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1456:       assertEquals(56, Node.CHANGE_TIME);
1457:       assertEquals(32, Node.INCRDECR_PROP);
1458:       assertEquals(46, Node.IS_NAMESPACE);
1459:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1460:       assertEquals(37, Node.OPT_ARG_NAME);
1461:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1462:       assertEquals(57, Node.LAST_PROP);
1463:       assertEquals(47, Node.IS_DISPATCHER);
1464:       assertEquals(2, Node.POST_FLAG);
1465:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1466:       assertEquals(30, Node.VAR_ARGS_NAME);
1467:       assertEquals(1, Node.DECR_FLAG);
1468:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1469:       assertEquals(12, Node.COLUMN_BITS);
1470:       assertEquals(40, Node.ORIGINALNAME_PROP);
1471:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1472:       assertEquals(50, Node.FREE_CALL);
1473:       assertEquals(54, Node.SLASH_V);
1474:       assertEquals(43, Node.IS_CONSTANT_NAME);
1475:       assertFalse(node2.equals((Object)node0));
1476:       assertFalse(node2.equals((Object)node1));
1477:       assertFalse(node2.equals((Object)node3));
1478:       assertTrue(boolean5 == boolean1);
1479:       assertTrue(boolean5 == boolean2);
1480:       assertTrue(boolean5 == boolean3);
1481:       assertTrue(boolean5 == boolean0);
1482:       assertTrue(boolean5 == boolean4);
1483:       assertFalse(node2.isThis());
1484:       assertFalse(node2.isGetProp());
1485:       assertFalse(node2.isComma());
1486:       assertFalse(node2.isBreak());
1487:       assertFalse(node2.isInstanceOf());
1488:       assertFalse(node2.isAnd());
1489:       assertFalse(node2.isObjectLit());
1490:       assertFalse(node2.isNot());
1491:       assertEquals((-1), node2.getCharno());
1492:       assertFalse(node2.isExprResult());
1493:       assertFalse(node2.isString());
1494:       assertFalse(node2.isWith());
1495:       assertFalse(node2.isScript());
1496:       assertFalse(node2.isCase());
1497:       assertFalse(node2.hasOneChild());
1498:       assertFalse(node2.isAssign());
1499:       assertFalse(node2.isHook());
1500:       assertFalse(node2.hasChildren());
1501:       assertEquals((-1), node2.getSourcePosition());
1502:       assertEquals((-1), node2.getLineno());
1503:       assertFalse(node2.isIn());
1504:       assertEquals(49, node2.getType());
1505:       assertFalse(node2.isIf());
1506:       assertFalse(node2.isNE());
1507:       assertFalse(node2.isInc());
1508:       assertFalse(node2.isFunction());
1509:       assertFalse(node2.isCast());
1510:       assertFalse(node2.isContinue());
1511:       assertFalse(node2.isFalse());
1512:       assertFalse(node2.isParamList());
1513:       assertFalse(node2.isSetterDef());
1514:       assertTrue(node2.isThrow());
1515:       assertFalse(node2.isCatch());
1516:       assertFalse(node2.isCall());
1517:       assertFalse(node2.isName());
1518:       assertFalse(node2.isNull());
1519:       assertFalse(node2.isStringKey());
1520:       assertFalse(node2.isVoid());
1521:       assertFalse(node2.isDebugger());
1522:       assertFalse(node2.isTry());
1523:       assertFalse(node2.isRegExp());
1524:       assertFalse(node2.hasMoreThanOneChild());
1525:       assertFalse(node2.isWhile());
1526:       assertFalse(node2.isReturn());
1527:       assertFalse(node2.isFor());
1528:       assertFalse(node2.isBlock());
1529:       assertFalse(node2.isLabel());
1530:       assertFalse(node2.isTypeOf());
1531:       assertFalse(node2.isOr());
1532:       assertFalse(node2.isDec());
1533:       assertFalse(node2.isGetterDef());
1534:       assertFalse(node2.isNumber());
1535:       assertFalse(node2.isEmpty());
1536:       assertFalse(node2.isGetElem());
1537:       assertFalse(node2.isArrayLit());
1538:       assertFalse(node2.isLabelName());
1539:       assertFalse(node2.isDelProp());
1540:       assertFalse(node2.isTrue());
1541:       assertFalse(node2.isSwitch());
1542:       assertFalse(node2.isNew());
1543:       assertFalse(node2.isAdd());
1544:       assertFalse(node2.isDo());
1545:       assertEquals(0, node2.getChildCount());
1546:       assertFalse(node2.isDefaultCase());
1547:       assertFalse(node2.isAssignAdd());
1548:       assertFalse(node2.isVar());
1549:       
1550:       Node node4 = Node.newString("GeSc");
1551:       assertNotSame(node4, node0);
1552:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1553:       assertEquals(29, Node.JSDOC_INFO_PROP);
1554:       assertEquals(56, Node.CHANGE_TIME);
1555:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1556:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1557:       assertEquals(36, Node.QUOTED_PROP);
1558:       assertEquals(53, Node.INPUT_ID);
1559:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1560:       assertEquals(1, Node.DECR_FLAG);
1561:       assertEquals(12, Node.COLUMN_BITS);
1562:       assertEquals(32, Node.INCRDECR_PROP);
1563:       assertEquals(49, Node.DIRECT_EVAL);
1564:       assertEquals(37, Node.OPT_ARG_NAME);
1565:       assertEquals(48, Node.DIRECTIVES);
1566:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1567:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1568:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1569:       assertEquals(4095, Node.COLUMN_MASK);
1570:       assertEquals(40, Node.ORIGINALNAME_PROP);
1571:       assertEquals(57, Node.REFLECTED_OBJECT);
1572:       assertEquals(54, Node.SLASH_V);
1573:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1574:       assertEquals(39, Node.EMPTY_BLOCK);
1575:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1576:       assertEquals(50, Node.FREE_CALL);
1577:       assertEquals(52, Node.LENGTH);
1578:       assertEquals(8, Node.FLAG_NO_THROWS);
1579:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1580:       assertEquals(55, Node.INFERRED_FUNCTION);
1581:       assertEquals(46, Node.IS_NAMESPACE);
1582:       assertEquals(43, Node.IS_CONSTANT_NAME);
1583:       assertEquals(57, Node.LAST_PROP);
1584:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1585:       assertEquals(47, Node.IS_DISPATCHER);
1586:       assertEquals(30, Node.VAR_ARGS_NAME);
1587:       assertEquals(2, Node.POST_FLAG);
1588:       assertNotNull(node4);
1589:       assertFalse(node4.equals((Object)node3));
1590:       assertFalse(node4.equals((Object)node2));
1591:       assertFalse(node4.equals((Object)node1));
1592:       assertFalse(node4.equals((Object)node0));
1593:       assertFalse(node4.hasOneChild());
1594:       assertFalse(node4.isLabelName());
1595:       assertFalse(node4.isDec());
1596:       assertFalse(node4.isAssign());
1597:       assertFalse(node4.hasChildren());
1598:       assertFalse(node4.isGetElem());
1599:       assertFalse(node4.isExprResult());
1600:       assertFalse(node4.isCast());
1601:       assertFalse(node4.isTypeOf());
1602:       assertFalse(node4.isWith());
1603:       assertFalse(node4.isReturn());
1604:       assertFalse(node4.isGetProp());
1605:       assertFalse(node4.isAnd());
1606:       assertFalse(node4.isNot());
1607:       assertFalse(node4.isScript());
1608:       assertEquals((-1), node4.getSourcePosition());
1609:       assertFalse(node4.isObjectLit());
1610:       assertFalse(node4.isNumber());
1611:       assertFalse(node4.isVar());
1612:       assertFalse(node4.isNew());
1613:       assertFalse(node4.isAdd());
1614:       assertFalse(node4.isStringKey());
1615:       assertFalse(node4.isName());
1616:       assertFalse(node4.isSwitch());
1617:       assertFalse(node4.isBreak());
1618:       assertFalse(node4.isWhile());
1619:       assertFalse(node4.isCall());
1620:       assertFalse(node4.isComma());
1621:       assertFalse(node4.isOr());
1622:       assertEquals(0, node4.getChildCount());
1623:       assertFalse(node4.isLabel());
1624:       assertFalse(node4.isAssignAdd());
1625:       assertFalse(node4.isDo());
1626:       assertFalse(node4.isEmpty());
1627:       assertFalse(node4.isNull());
1628:       assertFalse(node4.isArrayLit());
1629:       assertFalse(node4.isVoid());
1630:       assertFalse(node4.isTrue());
1631:       assertFalse(node4.isTry());
1632:       assertFalse(node4.isDefaultCase());
1633:       assertFalse(node4.isDelProp());
1634:       assertFalse(node4.isFor());
1635:       assertEquals(40, node4.getType());
1636:       assertFalse(node4.isFunction());
1637:       assertFalse(node4.isCatch());
1638:       assertFalse(node4.isRegExp());
1639:       assertFalse(node4.isParamList());
1640:       assertFalse(node4.isGetterDef());
1641:       assertFalse(node4.isCase());
1642:       assertEquals((-1), node4.getCharno());
1643:       assertFalse(node4.isDebugger());
1644:       assertFalse(node4.isBlock());
1645:       assertFalse(node4.isHook());
1646:       assertFalse(node4.isThrow());
1647:       assertTrue(node4.isString());
1648:       assertFalse(node4.isThis());
1649:       assertFalse(node4.isContinue());
1650:       assertFalse(node4.hasMoreThanOneChild());
1651:       assertFalse(node4.isFalse());
1652:       assertEquals((-1), node4.getLineno());
1653:       assertFalse(node4.isInstanceOf());
1654:       assertFalse(node4.isNE());
1655:       assertFalse(node4.isIf());
1656:       assertFalse(node4.isSetterDef());
1657:       assertFalse(node4.isInc());
1658:       assertFalse(node4.isIn());
1659:       
1660:       boolean boolean6 = node0.isUnscopedQualifiedName();
1661:       assertFalse(boolean6);
1662:       assertNotSame(node0, node4);
1663:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1664:       assertEquals(55, Node.INFERRED_FUNCTION);
1665:       assertEquals(4095, Node.COLUMN_MASK);
1666:       assertEquals(39, Node.EMPTY_BLOCK);
1667:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1668:       assertEquals(53, Node.INPUT_ID);
1669:       assertEquals(40, Node.ORIGINALNAME_PROP);
1670:       assertEquals(50, Node.FREE_CALL);
1671:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1672:       assertEquals(54, Node.SLASH_V);
1673:       assertEquals(46, Node.IS_NAMESPACE);
1674:       assertEquals(43, Node.IS_CONSTANT_NAME);
1675:       assertEquals(1, Node.DECR_FLAG);
1676:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1677:       assertEquals(12, Node.COLUMN_BITS);
1678:       assertEquals(30, Node.VAR_ARGS_NAME);
1679:       assertEquals(2, Node.POST_FLAG);
1680:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1681:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1682:       assertEquals(47, Node.IS_DISPATCHER);
1683:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1684:       assertEquals(32, Node.INCRDECR_PROP);
1685:       assertEquals(57, Node.LAST_PROP);
1686:       assertEquals(57, Node.REFLECTED_OBJECT);
1687:       assertEquals(29, Node.JSDOC_INFO_PROP);
1688:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1689:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1690:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1691:       assertEquals(52, Node.LENGTH);
1692:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1693:       assertEquals(37, Node.OPT_ARG_NAME);
1694:       assertEquals(8, Node.FLAG_NO_THROWS);
1695:       assertEquals(48, Node.DIRECTIVES);
1696:       assertEquals(36, Node.QUOTED_PROP);
1697:       assertEquals(49, Node.DIRECT_EVAL);
1698:       assertEquals(56, Node.CHANGE_TIME);
1699:       assertTrue(boolean6 == boolean4);
1700:       assertTrue(boolean6 == boolean3);
1701:       assertTrue(boolean6 == boolean0);
1702:       assertTrue(boolean6 == boolean5);
1703:       assertTrue(boolean6 == boolean1);
1704:       assertTrue(boolean6 == boolean2);
1705:       assertFalse(node0.equals((Object)node3));
1706:       assertFalse(node0.equals((Object)node4));
1707:       assertFalse(node0.equals((Object)node1));
1708:       assertFalse(node0.equals((Object)node2));
1709:       assertFalse(node0.isGetProp());
1710:       assertFalse(node0.isComma());
1711:       assertFalse(node0.isObjectLit());
1712:       assertFalse(node0.isInstanceOf());
1713:       assertFalse(node0.isNot());
1714:       assertFalse(node0.isBreak());
1715:       assertFalse(node0.isAnd());
1716:       assertFalse(node0.isInc());
1717:       assertFalse(node0.isCast());
1718:       assertFalse(node0.isFalse());
1719:       assertFalse(node0.isThrow());
1720:       assertFalse(node0.isAssignAdd());
1721:       assertFalse(node0.isReturn());
1722:       assertFalse(node0.isOr());
1723:       assertFalse(node0.isTypeOf());
1724:       assertFalse(node0.isContinue());
1725:       assertFalse(node0.isDelProp());
1726:       assertFalse(node0.isGetElem());
1727:       assertEquals((-1), node0.getSourcePosition());
1728:       assertFalse(node0.isDebugger());
1729:       assertFalse(node0.isCall());
1730:       assertFalse(node0.isExprResult());
1731:       assertFalse(node0.isWhile());
1732:       assertFalse(node0.isAssign());
1733:       assertFalse(node0.isDec());
1734:       assertFalse(node0.hasChildren());
1735:       assertEquals(0, node0.getChildCount());
1736:       assertFalse(node0.isCatch());
1737:       assertFalse(node0.isSetterDef());
1738:       assertFalse(node0.isNull());
1739:       assertFalse(node0.isParamList());
1740:       assertFalse(node0.isTrue());
1741:       assertFalse(node0.isVoid());
1742:       assertFalse(node0.isStringKey());
1743:       assertFalse(node0.isName());
1744:       assertFalse(node0.isAdd());
1745:       assertFalse(node0.isNew());
1746:       assertFalse(node0.isArrayLit());
1747:       assertFalse(node0.isFunction());
1748:       assertFalse(node0.isEmpty());
1749:       assertFalse(node0.isDo());
1750:       assertEquals(40, node0.getType());
1751:       assertFalse(node0.isVar());
1752:       assertFalse(node0.isDefaultCase());
1753:       assertEquals((-1), node0.getLineno());
1754:       assertFalse(node0.isLabel());
1755:       assertFalse(node0.isNumber());
1756:       assertFalse(node0.isIn());
1757:       assertFalse(node0.hasMoreThanOneChild());
1758:       assertFalse(node0.isGetterDef());
1759:       assertFalse(node0.isLabelName());
1760:       assertFalse(node0.isNE());
1761:       assertFalse(node0.isIf());
1762:       assertFalse(node0.isSwitch());
1763:       assertFalse(node0.isTry());
1764:       assertFalse(node0.isHook());
1765:       assertFalse(node0.hasOneChild());
1766:       assertFalse(node0.isBlock());
1767:       assertEquals((-1), node0.getCharno());
1768:       assertFalse(node0.isRegExp());
1769:       assertFalse(node0.isScript());
1770:       assertFalse(node0.isWith());
1771:       assertFalse(node0.isFor());
1772:       assertFalse(node0.isCase());
1773:       assertFalse(node0.isThis());
1774:       assertTrue(node0.isString());
1775:       
1776:       boolean boolean7 = node1.isWith();
1777:       assertFalse(boolean7);
1778:       assertNotSame(node1, node3);
1779:       assertNotSame(node1, node2);
1780:       assertEquals(12, Node.COLUMN_BITS);
1781:       assertEquals(46, Node.IS_NAMESPACE);
1782:       assertEquals(30, Node.VAR_ARGS_NAME);
1783:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1784:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1785:       assertEquals(57, Node.LAST_PROP);
1786:       assertEquals(29, Node.JSDOC_INFO_PROP);
1787:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1788:       assertEquals(32, Node.INCRDECR_PROP);
1789:       assertEquals(1, Node.DECR_FLAG);
1790:       assertEquals(57, Node.REFLECTED_OBJECT);
1791:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1792:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1793:       assertEquals(52, Node.LENGTH);
1794:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1795:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1796:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1797:       assertEquals(56, Node.CHANGE_TIME);
1798:       assertEquals(49, Node.DIRECT_EVAL);
1799:       assertEquals(48, Node.DIRECTIVES);
1800:       assertEquals(37, Node.OPT_ARG_NAME);
1801:       assertEquals(55, Node.INFERRED_FUNCTION);
1802:       assertEquals(4095, Node.COLUMN_MASK);
1803:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1804:       assertEquals(36, Node.QUOTED_PROP);
1805:       assertEquals(8, Node.FLAG_NO_THROWS);
1806:       assertEquals(39, Node.EMPTY_BLOCK);
1807:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1808:       assertEquals(53, Node.INPUT_ID);
1809:       assertEquals(40, Node.ORIGINALNAME_PROP);
1810:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1811:       assertEquals(50, Node.FREE_CALL);
1812:       assertEquals(47, Node.IS_DISPATCHER);
1813:       assertEquals(2, Node.POST_FLAG);
1814:       assertEquals(54, Node.SLASH_V);
1815:       assertEquals(43, Node.IS_CONSTANT_NAME);
1816:       assertTrue(boolean7 == boolean2);
1817:       assertTrue(boolean7 == boolean6);
1818:       assertTrue(boolean7 == boolean3);
1819:       assertTrue(boolean7 == boolean1);
1820:       assertTrue(boolean7 == boolean4);
1821:       assertTrue(boolean7 == boolean0);
1822:       assertTrue(boolean7 == boolean5);
1823:       assertFalse(node1.equals((Object)node4));
1824:       assertFalse(node1.equals((Object)node3));
1825:       assertFalse(node1.equals((Object)node0));
1826:       assertFalse(node1.equals((Object)node2));
1827:       assertFalse(node1.isLabel());
1828:       assertFalse(node1.isAssignAdd());
1829:       assertFalse(node1.isOr());
1830:       assertFalse(node1.isReturn());
1831:       assertFalse(node1.isTypeOf());
1832:       assertFalse(node1.hasMoreThanOneChild());
1833:       assertFalse(node1.hasChildren());
1834:       assertFalse(node1.isDec());
1835:       assertFalse(node1.isLabelName());
1836:       assertFalse(node1.isAssign());
1837:       assertFalse(node1.isGetElem());
1838:       assertFalse(node1.isContinue());
1839:       assertFalse(node1.isCast());
1840:       assertFalse(node1.isBlock());
1841:       assertFalse(node1.isNot());
1842:       assertEquals(39, node1.getType());
1843:       assertFalse(node1.isWhile());
1844:       assertFalse(node1.isScript());
1845:       assertFalse(node1.hasOneChild());
1846:       assertEquals(12509183, node1.getSourcePosition());
1847:       assertFalse(node1.isParamList());
1848:       assertFalse(node1.isNull());
1849:       assertEquals(0, node1.getChildCount());
1850:       assertFalse(node1.isComma());
1851:       assertFalse(node1.isName());
1852:       assertFalse(node1.isStringKey());
1853:       assertFalse(node1.isCall());
1854:       assertFalse(node1.isExprResult());
1855:       assertFalse(node1.isVoid());
1856:       assertFalse(node1.isBreak());
1857:       assertFalse(node1.isAdd());
1858:       assertEquals(3053, node1.getLineno());
1859:       assertFalse(node1.isVar());
1860:       assertFalse(node1.isTrue());
1861:       assertFalse(node1.isEmpty());
1862:       assertFalse(node1.isDo());
1863:       assertFalse(node1.isDefaultCase());
1864:       assertFalse(node1.isNew());
1865:       assertFalse(node1.isIn());
1866:       assertFalse(node1.isNE());
1867:       assertFalse(node1.isGetterDef());
1868:       assertFalse(node1.isIf());
1869:       assertFalse(node1.isArrayLit());
1870:       assertFalse(node1.isSwitch());
1871:       assertFalse(node1.isDelProp());
1872:       assertFalse(node1.isTry());
1873:       assertFalse(node1.isRegExp());
1874:       assertEquals(4095, node1.getCharno());
1875:       assertFalse(node1.isHook());
1876:       assertFalse(node1.isDebugger());
1877:       assertFalse(node1.isFor());
1878:       assertFalse(node1.isString());
1879:       assertFalse(node1.isGetProp());
1880:       assertFalse(node1.isCase());
1881:       assertTrue(node1.isNumber());
1882:       assertFalse(node1.isInstanceOf());
1883:       assertFalse(node1.isThis());
1884:       assertFalse(node1.isObjectLit());
1885:       assertFalse(node1.isWith());
1886:       assertFalse(node1.isFalse());
1887:       assertFalse(node1.isAnd());
1888:       assertFalse(node1.isCatch());
1889:       assertFalse(node1.isFunction());
1890:       assertFalse(node1.isThrow());
1891:       assertFalse(node1.isInc());
1892:       assertFalse(node1.isSetterDef());
1893:       
1894:       node0.removeProp(461845907);
1895:       assertNotSame(node0, node4);
1896:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1897:       assertEquals(55, Node.INFERRED_FUNCTION);
1898:       assertEquals(4095, Node.COLUMN_MASK);
1899:       assertEquals(39, Node.EMPTY_BLOCK);
1900:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1901:       assertEquals(53, Node.INPUT_ID);
1902:       assertEquals(40, Node.ORIGINALNAME_PROP);
1903:       assertEquals(50, Node.FREE_CALL);
1904:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1905:       assertEquals(54, Node.SLASH_V);
1906:       assertEquals(46, Node.IS_NAMESPACE);
1907:       assertEquals(43, Node.IS_CONSTANT_NAME);
1908:       assertEquals(1, Node.DECR_FLAG);
1909:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1910:       assertEquals(12, Node.COLUMN_BITS);
1911:       assertEquals(30, Node.VAR_ARGS_NAME);
1912:       assertEquals(2, Node.POST_FLAG);
1913:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1914:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1915:       assertEquals(47, Node.IS_DISPATCHER);
1916:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1917:       assertEquals(32, Node.INCRDECR_PROP);
1918:       assertEquals(57, Node.LAST_PROP);
1919:       assertEquals(57, Node.REFLECTED_OBJECT);
1920:       assertEquals(29, Node.JSDOC_INFO_PROP);
1921:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1922:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1923:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1924:       assertEquals(52, Node.LENGTH);
1925:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1926:       assertEquals(37, Node.OPT_ARG_NAME);
1927:       assertEquals(8, Node.FLAG_NO_THROWS);
1928:       assertEquals(48, Node.DIRECTIVES);
1929:       assertEquals(36, Node.QUOTED_PROP);
1930:       assertEquals(49, Node.DIRECT_EVAL);
1931:       assertEquals(56, Node.CHANGE_TIME);
1932:       assertFalse(node0.equals((Object)node3));
1933:       assertFalse(node0.equals((Object)node4));
1934:       assertFalse(node0.equals((Object)node1));
1935:       assertFalse(node0.equals((Object)node2));
1936:       assertFalse(node0.isGetProp());
1937:       assertFalse(node0.isComma());
1938:       assertFalse(node0.isObjectLit());
1939:       assertFalse(node0.isInstanceOf());
1940:       assertFalse(node0.isNot());
1941:       assertFalse(node0.isBreak());
1942:       assertFalse(node0.isAnd());
1943:       assertFalse(node0.isInc());
1944:       assertFalse(node0.isCast());
1945:       assertFalse(node0.isFalse());
1946:       assertFalse(node0.isThrow());
1947:       assertFalse(node0.isAssignAdd());
1948:       assertFalse(node0.isReturn());
1949:       assertFalse(node0.isOr());
1950:       assertFalse(node0.isTypeOf());
1951:       assertFalse(node0.isContinue());
1952:       assertFalse(node0.isDelProp());
1953:       assertFalse(node0.isGetElem());
1954:       assertEquals((-1), node0.getSourcePosition());
1955:       assertFalse(node0.isDebugger());
1956:       assertFalse(node0.isCall());
1957:       assertFalse(node0.isExprResult());
1958:       assertFalse(node0.isWhile());
1959:       assertFalse(node0.isAssign());
1960:       assertFalse(node0.isDec());
1961:       assertFalse(node0.hasChildren());
1962:       assertEquals(0, node0.getChildCount());
1963:       assertFalse(node0.isCatch());
1964:       assertFalse(node0.isSetterDef());
1965:       assertFalse(node0.isNull());
1966:       assertFalse(node0.isParamList());
1967:       assertFalse(node0.isTrue());
1968:       assertFalse(node0.isVoid());
1969:       assertFalse(node0.isStringKey());
1970:       assertFalse(node0.isName());
1971:       assertFalse(node0.isAdd());
1972:       assertFalse(node0.isNew());
1973:       assertFalse(node0.isArrayLit());
1974:       assertFalse(node0.isFunction());
1975:       assertFalse(node0.isEmpty());
1976:       assertFalse(node0.isDo());
1977:       assertEquals(40, node0.getType());
1978:       assertFalse(node0.isVar());
1979:       assertFalse(node0.isDefaultCase());
1980:       assertEquals((-1), node0.getLineno());
1981:       assertFalse(node0.isLabel());
1982:       assertFalse(node0.isNumber());
1983:       assertFalse(node0.isIn());
1984:       assertFalse(node0.hasMoreThanOneChild());
1985:       assertFalse(node0.isGetterDef());
1986:       assertFalse(node0.isLabelName());
1987:       assertFalse(node0.isNE());
1988:       assertFalse(node0.isIf());
1989:       assertFalse(node0.isSwitch());
1990:       assertFalse(node0.isTry());
1991:       assertFalse(node0.isHook());
1992:       assertFalse(node0.hasOneChild());
1993:       assertFalse(node0.isBlock());
1994:       assertEquals((-1), node0.getCharno());
1995:       assertFalse(node0.isRegExp());
1996:       assertFalse(node0.isScript());
1997:       assertFalse(node0.isWith());
1998:       assertFalse(node0.isFor());
1999:       assertFalse(node0.isCase());
2000:       assertFalse(node0.isThis());
2001:       assertTrue(node0.isString());
2002:       
2003:       Vector<JSType> vector0 = new Vector<JSType>();
2004:       assertNotNull(vector0);
2005:       assertEquals(0, vector0.size());
2006:       assertTrue(vector0.isEmpty());
2007:       assertEquals(10, vector0.capacity());
2008:       assertEquals("[]", vector0.toString());
2009:       
2010:       Node node5 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
2011:       assertNotSame(node5, node1);
2012:       assertNotSame(node5, node3);
2013:       assertNotSame(node5, node2);
2014:       assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
2015:       assertEquals(53, Node.INPUT_ID);
2016:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2017:       assertEquals(43, Node.IS_CONSTANT_NAME);
2018:       assertEquals(29, Node.JSDOC_INFO_PROP);
2019:       assertEquals(36, Node.QUOTED_PROP);
2020:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2021:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2022:       assertEquals(55, Node.INFERRED_FUNCTION);
2023:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2024:       assertEquals(37, Node.OPT_ARG_NAME);
2025:       assertEquals(48, Node.DIRECTIVES);
2026:       assertEquals(32, Node.INCRDECR_PROP);
2027:       assertEquals(12, Node.COLUMN_BITS);
2028:       assertEquals(56, Node.CHANGE_TIME);
2029:       assertEquals(49, Node.DIRECT_EVAL);
2030:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2031:       assertEquals(4095, Node.COLUMN_MASK);
2032:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2033:       assertEquals(52, Node.LENGTH);
2034:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2035:       assertEquals(57, Node.REFLECTED_OBJECT);
2036:       assertEquals(57, Node.LAST_PROP);
2037:       assertEquals(54, Node.SLASH_V);
2038:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2039:       assertEquals(50, Node.FREE_CALL);
2040:       assertEquals(1, Node.DECR_FLAG);
2041:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2042:       assertEquals(8, Node.FLAG_NO_THROWS);
2043:       assertEquals(39, Node.EMPTY_BLOCK);
2044:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2045:       assertEquals(47, Node.IS_DISPATCHER);
2046:       assertEquals(46, Node.IS_NAMESPACE);
2047:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2048:       assertEquals(30, Node.VAR_ARGS_NAME);
2049:       assertEquals(2, Node.POST_FLAG);
2050:       assertEquals(40, Node.ORIGINALNAME_PROP);
2051:       assertNotNull(node5);
2052:       assertFalse(node5.equals((Object)node0));
2053:       assertFalse(node5.equals((Object)node1));
2054:       assertFalse(node5.equals((Object)node3));
2055:       assertFalse(node5.equals((Object)node2));
2056:       assertFalse(node5.equals((Object)node4));
2057:       assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
2058:       assertEquals(0, vector0.size());
2059:       assertTrue(vector0.isEmpty());
2060:       assertEquals(10, vector0.capacity());
2061:       assertEquals("[]", vector0.toString());
2062:       assertFalse(node5.isRegExp());
2063:       assertFalse(node5.isDefaultCase());
2064:       assertFalse(node5.isFunction());
2065:       assertFalse(node5.isVoid());
2066:       assertFalse(node5.isDebugger());
2067:       assertFalse(node5.isTry());
2068:       assertFalse(node5.isTrue());
2069:       assertFalse(node5.isArrayLit());
2070:       assertEquals(0, node5.getChildCount());
2071:       assertFalse(node5.isCatch());
2072:       assertFalse(node5.isGetterDef());
2073:       assertFalse(node5.isFor());
2074:       assertFalse(node5.isStringKey());
2075:       assertFalse(node5.isCase());
2076:       assertFalse(node5.isString());
2077:       assertFalse(node5.isSwitch());
2078:       assertEquals((-1), node5.getCharno());
2079:       assertFalse(node5.isNew());
2080:       assertFalse(node5.isDo());
2081:       assertFalse(node5.isWhile());
2082:       assertFalse(node5.isVar());
2083:       assertFalse(node5.isCall());
2084:       assertFalse(node5.isNull());
2085:       assertEquals(83, node5.getType());
2086:       assertFalse(node5.isDelProp());
2087:       assertFalse(node5.isBreak());
2088:       assertFalse(node5.isLabel());
2089:       assertFalse(node5.isAssignAdd());
2090:       assertFalse(node5.isName());
2091:       assertFalse(node5.isEmpty());
2092:       assertFalse(node5.isAdd());
2093:       assertFalse(node5.isOr());
2094:       assertFalse(node5.isScript());
2095:       assertFalse(node5.isAnd());
2096:       assertFalse(node5.isAssign());
2097:       assertFalse(node5.isGetElem());
2098:       assertFalse(node5.isWith());
2099:       assertFalse(node5.isExprResult());
2100:       assertFalse(node5.isInstanceOf());
2101:       assertFalse(node5.isCast());
2102:       assertFalse(node5.isTypeOf());
2103:       assertEquals((-1), node5.getSourcePosition());
2104:       assertFalse(node5.isThis());
2105:       assertFalse(node5.isNumber());
2106:       assertFalse(node5.hasChildren());
2107:       assertFalse(node5.isComma());
2108:       assertFalse(node5.isDec());
2109:       assertFalse(node5.isLabelName());
2110:       assertFalse(node5.isReturn());
2111:       assertTrue(node5.isParamList());
2112:       assertFalse(node5.isObjectLit());
2113:       assertFalse(node5.hasOneChild());
2114:       assertFalse(node5.isNot());
2115:       assertFalse(node5.isGetProp());
2116:       assertFalse(node5.isInc());
2117:       assertFalse(node5.isBlock());
2118:       assertFalse(node5.isHook());
2119:       assertFalse(node5.hasMoreThanOneChild());
2120:       assertEquals((-1), node5.getLineno());
2121:       assertFalse(node5.isFalse());
2122:       assertFalse(node5.isContinue());
2123:       assertFalse(node5.isNE());
2124:       assertFalse(node5.isSetterDef());
2125:       assertFalse(node5.isIf());
2126:       assertFalse(node5.isThrow());
2127:       assertFalse(node5.isIn());
2128:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
2129:       
2130:       boolean boolean8 = node2.hasChildren();
2131:       assertFalse(boolean8);
2132:       assertNotSame(node2, node5);
2133:       assertNotSame(node2, node1);
2134:       assertNotSame(node2, node3);
2135:       assertEquals(48, Node.DIRECTIVES);
2136:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2137:       assertEquals(8, Node.FLAG_NO_THROWS);
2138:       assertEquals(39, Node.EMPTY_BLOCK);
2139:       assertEquals(4095, Node.COLUMN_MASK);
2140:       assertEquals(55, Node.INFERRED_FUNCTION);
2141:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2142:       assertEquals(52, Node.LENGTH);
2143:       assertEquals(57, Node.REFLECTED_OBJECT);
2144:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2145:       assertEquals(29, Node.JSDOC_INFO_PROP);
2146:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2147:       assertEquals(53, Node.INPUT_ID);
2148:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2149:       assertEquals(49, Node.DIRECT_EVAL);
2150:       assertEquals(36, Node.QUOTED_PROP);
2151:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2152:       assertEquals(56, Node.CHANGE_TIME);
2153:       assertEquals(32, Node.INCRDECR_PROP);
2154:       assertEquals(46, Node.IS_NAMESPACE);
2155:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2156:       assertEquals(37, Node.OPT_ARG_NAME);
2157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2158:       assertEquals(57, Node.LAST_PROP);
2159:       assertEquals(47, Node.IS_DISPATCHER);
2160:       assertEquals(2, Node.POST_FLAG);
2161:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2162:       assertEquals(30, Node.VAR_ARGS_NAME);
2163:       assertEquals(1, Node.DECR_FLAG);
2164:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2165:       assertEquals(12, Node.COLUMN_BITS);
2166:       assertEquals(40, Node.ORIGINALNAME_PROP);
2167:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2168:       assertEquals(50, Node.FREE_CALL);
2169:       assertEquals(54, Node.SLASH_V);
2170:       assertEquals(43, Node.IS_CONSTANT_NAME);
2171:       assertTrue(boolean8 == boolean7);
2172:       assertTrue(boolean8 == boolean3);
2173:       assertTrue(boolean8 == boolean4);
2174:       assertTrue(boolean8 == boolean2);
2175:       assertTrue(boolean8 == boolean1);
2176:       assertTrue(boolean8 == boolean5);
2177:       assertTrue(boolean8 == boolean0);
2178:       assertTrue(boolean8 == boolean6);
2179:       assertFalse(node2.equals((Object)node5));
2180:       assertFalse(node2.equals((Object)node0));
2181:       assertFalse(node2.equals((Object)node1));
2182:       assertFalse(node2.equals((Object)node4));
2183:       assertFalse(node2.equals((Object)node3));
2184:       assertFalse(node2.isThis());
2185:       assertFalse(node2.isGetProp());
2186:       assertFalse(node2.isComma());
2187:       assertFalse(node2.isBreak());
2188:       assertFalse(node2.isInstanceOf());
2189:       assertFalse(node2.isAnd());
2190:       assertFalse(node2.isObjectLit());
2191:       assertFalse(node2.isNot());
2192:       assertEquals((-1), node2.getCharno());
2193:       assertFalse(node2.isExprResult());
2194:       assertFalse(node2.isString());
2195:       assertFalse(node2.isWith());
2196:       assertFalse(node2.isScript());
2197:       assertFalse(node2.isCase());
2198:       assertFalse(node2.hasOneChild());
2199:       assertFalse(node2.isAssign());
2200:       assertFalse(node2.isHook());
2201:       assertFalse(node2.hasChildren());
2202:       assertEquals((-1), node2.getSourcePosition());
2203:       assertEquals((-1), node2.getLineno());
2204:       assertFalse(node2.isIn());
2205:       assertEquals(49, node2.getType());
2206:       assertFalse(node2.isIf());
2207:       assertFalse(node2.isNE());
2208:       assertFalse(node2.isInc());
2209:       assertFalse(node2.isFunction());
2210:       assertFalse(node2.isCast());
2211:       assertFalse(node2.isContinue());
2212:       assertFalse(node2.isFalse());
2213:       assertFalse(node2.isParamList());
2214:       assertFalse(node2.isSetterDef());
2215:       assertTrue(node2.isThrow());
2216:       assertFalse(node2.isCatch());
2217:       assertFalse(node2.isCall());
2218:       assertFalse(node2.isName());
2219:       assertFalse(node2.isNull());
2220:       assertFalse(node2.isStringKey());
2221:       assertFalse(node2.isVoid());
2222:       assertFalse(node2.isDebugger());
2223:       assertFalse(node2.isTry());
2224:       assertFalse(node2.isRegExp());
2225:       assertFalse(node2.hasMoreThanOneChild());
2226:       assertFalse(node2.isWhile());
2227:       assertFalse(node2.isReturn());
2228:       assertFalse(node2.isFor());
2229:       assertFalse(node2.isBlock());
2230:       assertFalse(node2.isLabel());
2231:       assertFalse(node2.isTypeOf());
2232:       assertFalse(node2.isOr());
2233:       assertFalse(node2.isDec());
2234:       assertFalse(node2.isGetterDef());
2235:       assertFalse(node2.isNumber());
2236:       assertFalse(node2.isEmpty());
2237:       assertFalse(node2.isGetElem());
2238:       assertFalse(node2.isArrayLit());
2239:       assertFalse(node2.isLabelName());
2240:       assertFalse(node2.isDelProp());
2241:       assertFalse(node2.isTrue());
2242:       assertFalse(node2.isSwitch());
2243:       assertFalse(node2.isNew());
2244:       assertFalse(node2.isAdd());
2245:       assertFalse(node2.isDo());
2246:       assertEquals(0, node2.getChildCount());
2247:       assertFalse(node2.isDefaultCase());
2248:       assertFalse(node2.isAssignAdd());
2249:       assertFalse(node2.isVar());
2250:       
2251:       boolean boolean9 = node2.isSwitch();
2252:       assertFalse(boolean9);
2253:       assertNotSame(node2, node5);
2254:       assertNotSame(node2, node1);
2255:       assertNotSame(node2, node3);
2256:       assertEquals(48, Node.DIRECTIVES);
2257:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2258:       assertEquals(8, Node.FLAG_NO_THROWS);
2259:       assertEquals(39, Node.EMPTY_BLOCK);
2260:       assertEquals(4095, Node.COLUMN_MASK);
2261:       assertEquals(55, Node.INFERRED_FUNCTION);
2262:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2263:       assertEquals(52, Node.LENGTH);
2264:       assertEquals(57, Node.REFLECTED_OBJECT);
2265:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2266:       assertEquals(29, Node.JSDOC_INFO_PROP);
2267:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2268:       assertEquals(53, Node.INPUT_ID);
2269:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2270:       assertEquals(49, Node.DIRECT_EVAL);
2271:       assertEquals(36, Node.QUOTED_PROP);
2272:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2273:       assertEquals(56, Node.CHANGE_TIME);
2274:       assertEquals(32, Node.INCRDECR_PROP);
2275:       assertEquals(46, Node.IS_NAMESPACE);
2276:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2277:       assertEquals(37, Node.OPT_ARG_NAME);
2278:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2279:       assertEquals(57, Node.LAST_PROP);
2280:       assertEquals(47, Node.IS_DISPATCHER);
2281:       assertEquals(2, Node.POST_FLAG);
2282:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2283:       assertEquals(30, Node.VAR_ARGS_NAME);
2284:       assertEquals(1, Node.DECR_FLAG);
2285:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2286:       assertEquals(12, Node.COLUMN_BITS);
2287:       assertEquals(40, Node.ORIGINALNAME_PROP);
2288:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2289:       assertEquals(50, Node.FREE_CALL);
2290:       assertEquals(54, Node.SLASH_V);
2291:       assertEquals(43, Node.IS_CONSTANT_NAME);
2292:       assertTrue(boolean9 == boolean7);
2293:       assertTrue(boolean9 == boolean3);
2294:       assertTrue(boolean9 == boolean4);
2295:       assertTrue(boolean9 == boolean2);
2296:       assertTrue(boolean9 == boolean1);
2297:       assertTrue(boolean9 == boolean5);
2298:       assertTrue(boolean9 == boolean0);
2299:       assertTrue(boolean9 == boolean8);
2300:       assertTrue(boolean9 == boolean6);
2301:       assertFalse(node2.equals((Object)node5));
2302:       assertFalse(node2.equals((Object)node0));
2303:       assertFalse(node2.equals((Object)node1));
2304:       assertFalse(node2.equals((Object)node4));
2305:       assertFalse(node2.equals((Object)node3));
2306:       assertFalse(node2.isThis());
2307:       assertFalse(node2.isGetProp());
2308:       assertFalse(node2.isComma());
2309:       assertFalse(node2.isBreak());
2310:       assertFalse(node2.isInstanceOf());
2311:       assertFalse(node2.isAnd());
2312:       assertFalse(node2.isObjectLit());
2313:       assertFalse(node2.isNot());
2314:       assertEquals((-1), node2.getCharno());
2315:       assertFalse(node2.isExprResult());
2316:       assertFalse(node2.isString());
2317:       assertFalse(node2.isWith());
2318:       assertFalse(node2.isScript());
2319:       assertFalse(node2.isCase());
2320:       assertFalse(node2.hasOneChild());
2321:       assertFalse(node2.isAssign());
2322:       assertFalse(node2.isHook());
2323:       assertFalse(node2.hasChildren());
2324:       assertEquals((-1), node2.getSourcePosition());
2325:       assertEquals((-1), node2.getLineno());
2326:       assertFalse(node2.isIn());
2327:       assertEquals(49, node2.getType());
2328:       assertFalse(node2.isIf());
2329:       assertFalse(node2.isNE());
2330:       assertFalse(node2.isInc());
2331:       assertFalse(node2.isFunction());
2332:       assertFalse(node2.isCast());
2333:       assertFalse(node2.isContinue());
2334:       assertFalse(node2.isFalse());
2335:       assertFalse(node2.isParamList());
2336:       assertFalse(node2.isSetterDef());
2337:       assertTrue(node2.isThrow());
2338:       assertFalse(node2.isCatch());
2339:       assertFalse(node2.isCall());
2340:       assertFalse(node2.isName());
2341:       assertFalse(node2.isNull());
2342:       assertFalse(node2.isStringKey());
2343:       assertFalse(node2.isVoid());
2344:       assertFalse(node2.isDebugger());
2345:       assertFalse(node2.isTry());
2346:       assertFalse(node2.isRegExp());
2347:       assertFalse(node2.hasMoreThanOneChild());
2348:       assertFalse(node2.isWhile());
2349:       assertFalse(node2.isReturn());
2350:       assertFalse(node2.isFor());
2351:       assertFalse(node2.isBlock());
2352:       assertFalse(node2.isLabel());
2353:       assertFalse(node2.isTypeOf());
2354:       assertFalse(node2.isOr());
2355:       assertFalse(node2.isDec());
2356:       assertFalse(node2.isGetterDef());
2357:       assertFalse(node2.isNumber());
2358:       assertFalse(node2.isEmpty());
2359:       assertFalse(node2.isGetElem());
2360:       assertFalse(node2.isArrayLit());
2361:       assertFalse(node2.isLabelName());
2362:       assertFalse(node2.isDelProp());
2363:       assertFalse(node2.isTrue());
2364:       assertFalse(node2.isSwitch());
2365:       assertFalse(node2.isNew());
2366:       assertFalse(node2.isAdd());
2367:       assertFalse(node2.isDo());
2368:       assertEquals(0, node2.getChildCount());
2369:       assertFalse(node2.isDefaultCase());
2370:       assertFalse(node2.isAssignAdd());
2371:       assertFalse(node2.isVar());
2372:       
2373:       boolean boolean10 = node4.isNE();
2374:       assertFalse(boolean10);
2375:       assertNotSame(node4, node0);
2376:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2377:       assertEquals(29, Node.JSDOC_INFO_PROP);
2378:       assertEquals(56, Node.CHANGE_TIME);
2379:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2380:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2381:       assertEquals(36, Node.QUOTED_PROP);
2382:       assertEquals(53, Node.INPUT_ID);
2383:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2384:       assertEquals(1, Node.DECR_FLAG);
2385:       assertEquals(12, Node.COLUMN_BITS);
2386:       assertEquals(32, Node.INCRDECR_PROP);
2387:       assertEquals(49, Node.DIRECT_EVAL);
2388:       assertEquals(37, Node.OPT_ARG_NAME);
2389:       assertEquals(48, Node.DIRECTIVES);
2390:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2391:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2392:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2393:       assertEquals(4095, Node.COLUMN_MASK);
2394:       assertEquals(40, Node.ORIGINALNAME_PROP);
2395:       assertEquals(57, Node.REFLECTED_OBJECT);
2396:       assertEquals(54, Node.SLASH_V);
2397:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2398:       assertEquals(39, Node.EMPTY_BLOCK);
2399:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2400:       assertEquals(50, Node.FREE_CALL);
2401:       assertEquals(52, Node.LENGTH);
2402:       assertEquals(8, Node.FLAG_NO_THROWS);
2403:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2404:       assertEquals(55, Node.INFERRED_FUNCTION);
2405:       assertEquals(46, Node.IS_NAMESPACE);
2406:       assertEquals(43, Node.IS_CONSTANT_NAME);
2407:       assertEquals(57, Node.LAST_PROP);
2408:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2409:       assertEquals(47, Node.IS_DISPATCHER);
2410:       assertEquals(30, Node.VAR_ARGS_NAME);
2411:       assertEquals(2, Node.POST_FLAG);
2412:       assertTrue(boolean10 == boolean7);
2413:       assertTrue(boolean10 == boolean4);
2414:       assertTrue(boolean10 == boolean3);
2415:       assertTrue(boolean10 == boolean1);
2416:       assertTrue(boolean10 == boolean6);
2417:       assertTrue(boolean10 == boolean8);
2418:       assertTrue(boolean10 == boolean0);
2419:       assertTrue(boolean10 == boolean5);
2420:       assertTrue(boolean10 == boolean9);
2421:       assertTrue(boolean10 == boolean2);
2422:       assertFalse(node4.equals((Object)node3));
2423:       assertFalse(node4.equals((Object)node2));
2424:       assertFalse(node4.equals((Object)node5));
2425:       assertFalse(node4.equals((Object)node1));
2426:       assertFalse(node4.equals((Object)node0));
2427:       assertFalse(node4.hasOneChild());
2428:       assertFalse(node4.isLabelName());
2429:       assertFalse(node4.isDec());
2430:       assertFalse(node4.isAssign());
2431:       assertFalse(node4.hasChildren());
2432:       assertFalse(node4.isGetElem());
2433:       assertFalse(node4.isExprResult());
2434:       assertFalse(node4.isCast());
2435:       assertFalse(node4.isTypeOf());
2436:       assertFalse(node4.isWith());
2437:       assertFalse(node4.isReturn());
2438:       assertFalse(node4.isGetProp());
2439:       assertFalse(node4.isAnd());
2440:       assertFalse(node4.isNot());
2441:       assertFalse(node4.isScript());
2442:       assertEquals((-1), node4.getSourcePosition());
2443:       assertFalse(node4.isObjectLit());
2444:       assertFalse(node4.isNumber());
2445:       assertFalse(node4.isVar());
2446:       assertFalse(node4.isNew());
2447:       assertFalse(node4.isAdd());
2448:       assertFalse(node4.isStringKey());
2449:       assertFalse(node4.isName());
2450:       assertFalse(node4.isSwitch());
2451:       assertFalse(node4.isBreak());
2452:       assertFalse(node4.isWhile());
2453:       assertFalse(node4.isCall());
2454:       assertFalse(node4.isComma());
2455:       assertFalse(node4.isOr());
2456:       assertEquals(0, node4.getChildCount());
2457:       assertFalse(node4.isLabel());
2458:       assertFalse(node4.isAssignAdd());
2459:       assertFalse(node4.isDo());
2460:       assertFalse(node4.isEmpty());
2461:       assertFalse(node4.isNull());
2462:       assertFalse(node4.isArrayLit());
2463:       assertFalse(node4.isVoid());
2464:       assertFalse(node4.isTrue());
2465:       assertFalse(node4.isTry());
2466:       assertFalse(node4.isDefaultCase());
2467:       assertFalse(node4.isDelProp());
2468:       assertFalse(node4.isFor());
2469:       assertEquals(40, node4.getType());
2470:       assertFalse(node4.isFunction());
2471:       assertFalse(node4.isCatch());
2472:       assertFalse(node4.isRegExp());
2473:       assertFalse(node4.isParamList());
2474:       assertFalse(node4.isGetterDef());
2475:       assertFalse(node4.isCase());
2476:       assertEquals((-1), node4.getCharno());
2477:       assertFalse(node4.isDebugger());
2478:       assertFalse(node4.isBlock());
2479:       assertFalse(node4.isHook());
2480:       assertFalse(node4.isThrow());
2481:       assertTrue(node4.isString());
2482:       assertFalse(node4.isThis());
2483:       assertFalse(node4.isContinue());
2484:       assertFalse(node4.hasMoreThanOneChild());
2485:       assertFalse(node4.isFalse());
2486:       assertEquals((-1), node4.getLineno());
2487:       assertFalse(node4.isInstanceOf());
2488:       assertFalse(node4.isNE());
2489:       assertFalse(node4.isIf());
2490:       assertFalse(node4.isSetterDef());
2491:       assertFalse(node4.isInc());
2492:       assertFalse(node4.isIn());
2493:   }
2494: }
RegularFileObject[/tmp/EvoSuite_177_1628157539731/com/google/javascript/rhino/Node_177_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:00 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_177_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_177_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_177_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.JSTypeNative",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.JSType$TypePair",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.JSType$2",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
375:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
377:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
378:     );
379:   }
380: }

[MASTER] 09:59:00.395 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("8`QN");
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertNotNull(node0);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());

boolean boolean0 = node0.isEmpty();
assertFalse(boolean0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());

boolean boolean1 = node0.isAssign();
assertFalse(boolean1);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());

node0.detachChildren();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());

Node node1 = new Node(39, 3053, 4095);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isBlock());
assertFalse(node1.isNot());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertEquals(12509183, node1.getSourcePosition());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertEquals(3053, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

boolean boolean2 = node1.wasEmptyNode();
assertFalse(boolean2);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isBlock());
assertFalse(node1.isNot());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertEquals(12509183, node1.getSourcePosition());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertEquals(3053, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
assertNotNull(jSTypeRegistry1);
assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());

Node node2 = new Node(49);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isExprResult());
assertFalse(node2.isString());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isHook());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIn());
assertEquals(49, node2.getType());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertTrue(node2.isThrow());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isDelProp());
assertFalse(node2.isTrue());
assertFalse(node2.isSwitch());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());

Node node3 = new Node(2025, node1);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(node3);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isBlock());
assertFalse(node1.isNot());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertEquals(12509183, node1.getSourcePosition());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertEquals(3053, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node3.isReturn());
assertEquals(2025, node3.getType());
assertFalse(node3.isLabel());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNumber());
assertFalse(node3.isDec());
assertFalse(node3.isWhile());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isCall());
assertFalse(node3.isBlock());
assertFalse(node3.isAssign());
assertFalse(node3.isNull());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isName());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isThis());
assertFalse(node3.isScript());
assertFalse(node3.isTry());
assertFalse(node3.isArrayLit());
assertFalse(node3.isVar());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isGetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isSwitch());
assertFalse(node3.isLabelName());
assertFalse(node3.isIn());
assertEquals(1, node3.getChildCount());
assertTrue(node3.hasChildren());
assertFalse(node3.isString());
assertFalse(node3.isInc());
assertTrue(node3.hasOneChild());
assertFalse(node3.isEmpty());
assertFalse(node3.isFor());
assertFalse(node3.isCase());
assertFalse(node3.isHook());
assertFalse(node3.isRegExp());
assertFalse(node3.isIf());
assertFalse(node3.isBreak());
assertFalse(node3.isNE());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isDelProp());
assertFalse(node3.isComma());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetProp());
assertFalse(node3.isThrow());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isAnd());

Iterable<Node> iterable0 = node2.children();
assertFalse(iterable0.contains(node0));
assertNotSame(node2, node1);
assertNotSame(node2, node3);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(iterable0);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isExprResult());
assertFalse(node2.isString());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isHook());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIn());
assertEquals(49, node2.getType());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertTrue(node2.isThrow());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isDelProp());
assertFalse(node2.isTrue());
assertFalse(node2.isSwitch());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());

boolean boolean3 = node3.isGetProp();
assertFalse(boolean3);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertNotSame(node3, node1);
assertNotSame(node3, node2);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isBlock());
assertFalse(node1.isNot());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertEquals(12509183, node1.getSourcePosition());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertEquals(3053, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node3.isReturn());
assertEquals(2025, node3.getType());
assertFalse(node3.isLabel());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNumber());
assertFalse(node3.isDec());
assertFalse(node3.isWhile());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isCall());
assertFalse(node3.isBlock());
assertFalse(node3.isAssign());
assertFalse(node3.isNull());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isName());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isThis());
assertFalse(node3.isScript());
assertFalse(node3.isTry());
assertFalse(node3.isArrayLit());
assertFalse(node3.isVar());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isGetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isSwitch());
assertFalse(node3.isLabelName());
assertFalse(node3.isIn());
assertEquals(1, node3.getChildCount());
assertTrue(node3.hasChildren());
assertFalse(node3.isString());
assertFalse(node3.isInc());
assertTrue(node3.hasOneChild());
assertFalse(node3.isEmpty());
assertFalse(node3.isFor());
assertFalse(node3.isCase());
assertFalse(node3.isHook());
assertFalse(node3.isRegExp());
assertFalse(node3.isIf());
assertFalse(node3.isBreak());
assertFalse(node3.isNE());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isDelProp());
assertFalse(node3.isComma());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetProp());
assertFalse(node3.isThrow());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isAnd());

boolean boolean4 = node1.isParamList();
assertFalse(boolean4);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isBlock());
assertFalse(node1.isNot());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertEquals(12509183, node1.getSourcePosition());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertEquals(3053, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

boolean boolean5 = node2.isSetterDef();
assertFalse(boolean5);
assertNotSame(node2, node1);
assertNotSame(node2, node3);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean4);
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isExprResult());
assertFalse(node2.isString());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isHook());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIn());
assertEquals(49, node2.getType());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertTrue(node2.isThrow());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isDelProp());
assertFalse(node2.isTrue());
assertFalse(node2.isSwitch());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());

Node node4 = Node.newString("GeSc");
assertNotSame(node4, node0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertNotNull(node4);
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.hasOneChild());
assertFalse(node4.isLabelName());
assertFalse(node4.isDec());
assertFalse(node4.isAssign());
assertFalse(node4.hasChildren());
assertFalse(node4.isGetElem());
assertFalse(node4.isExprResult());
assertFalse(node4.isCast());
assertFalse(node4.isTypeOf());
assertFalse(node4.isWith());
assertFalse(node4.isReturn());
assertFalse(node4.isGetProp());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isScript());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNumber());
assertFalse(node4.isVar());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isStringKey());
assertFalse(node4.isName());
assertFalse(node4.isSwitch());
assertFalse(node4.isBreak());
assertFalse(node4.isWhile());
assertFalse(node4.isCall());
assertFalse(node4.isComma());
assertFalse(node4.isOr());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDo());
assertFalse(node4.isEmpty());
assertFalse(node4.isNull());
assertFalse(node4.isArrayLit());
assertFalse(node4.isVoid());
assertFalse(node4.isTrue());
assertFalse(node4.isTry());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDelProp());
assertFalse(node4.isFor());
assertEquals(40, node4.getType());
assertFalse(node4.isFunction());
assertFalse(node4.isCatch());
assertFalse(node4.isRegExp());
assertFalse(node4.isParamList());
assertFalse(node4.isGetterDef());
assertFalse(node4.isCase());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isDebugger());
assertFalse(node4.isBlock());
assertFalse(node4.isHook());
assertFalse(node4.isThrow());
assertTrue(node4.isString());
assertFalse(node4.isThis());
assertFalse(node4.isContinue());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isFalse());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isSetterDef());
assertFalse(node4.isInc());
assertFalse(node4.isIn());

boolean boolean6 = node0.isUnscopedQualifiedName();
assertFalse(boolean6);
assertNotSame(node0, node4);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());

boolean boolean7 = node1.isWith();
assertFalse(boolean7);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean5);
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isBlock());
assertFalse(node1.isNot());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertEquals(12509183, node1.getSourcePosition());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertEquals(3053, node1.getLineno());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());

node0.removeProp(461845907);
assertNotSame(node0, node4);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());

Vector<JSType> vector0 = new Vector<JSType>();
assertNotNull(vector0);
assertEquals(0, vector0.size());
assertTrue(vector0.isEmpty());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());

Node node5 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
assertNotSame(node5, node1);
assertNotSame(node5, node3);
assertNotSame(node5, node2);
assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node5);
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
assertEquals(0, vector0.size());
assertTrue(vector0.isEmpty());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertFalse(node5.isRegExp());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isFunction());
assertFalse(node5.isVoid());
assertFalse(node5.isDebugger());
assertFalse(node5.isTry());
assertFalse(node5.isTrue());
assertFalse(node5.isArrayLit());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isCatch());
assertFalse(node5.isGetterDef());
assertFalse(node5.isFor());
assertFalse(node5.isStringKey());
assertFalse(node5.isCase());
assertFalse(node5.isString());
assertFalse(node5.isSwitch());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isNew());
assertFalse(node5.isDo());
assertFalse(node5.isWhile());
assertFalse(node5.isVar());
assertFalse(node5.isCall());
assertFalse(node5.isNull());
assertEquals(83, node5.getType());
assertFalse(node5.isDelProp());
assertFalse(node5.isBreak());
assertFalse(node5.isLabel());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isName());
assertFalse(node5.isEmpty());
assertFalse(node5.isAdd());
assertFalse(node5.isOr());
assertFalse(node5.isScript());
assertFalse(node5.isAnd());
assertFalse(node5.isAssign());
assertFalse(node5.isGetElem());
assertFalse(node5.isWith());
assertFalse(node5.isExprResult());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isCast());
assertFalse(node5.isTypeOf());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isThis());
assertFalse(node5.isNumber());
assertFalse(node5.hasChildren());
assertFalse(node5.isComma());
assertFalse(node5.isDec());
assertFalse(node5.isLabelName());
assertFalse(node5.isReturn());
assertTrue(node5.isParamList());
assertFalse(node5.isObjectLit());
assertFalse(node5.hasOneChild());
assertFalse(node5.isNot());
assertFalse(node5.isGetProp());
assertFalse(node5.isInc());
assertFalse(node5.isBlock());
assertFalse(node5.isHook());
assertFalse(node5.hasMoreThanOneChild());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isFalse());
assertFalse(node5.isContinue());
assertFalse(node5.isNE());
assertFalse(node5.isSetterDef());
assertFalse(node5.isIf());
assertFalse(node5.isThrow());
assertFalse(node5.isIn());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

boolean boolean8 = node2.hasChildren();
assertFalse(boolean8);
assertNotSame(node2, node5);
assertNotSame(node2, node1);
assertNotSame(node2, node3);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertTrue(boolean8 == boolean7);
assertTrue(boolean8 == boolean3);
assertTrue(boolean8 == boolean4);
assertTrue(boolean8 == boolean2);
assertTrue(boolean8 == boolean1);
assertTrue(boolean8 == boolean5);
assertTrue(boolean8 == boolean0);
assertTrue(boolean8 == boolean6);
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isExprResult());
assertFalse(node2.isString());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isHook());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIn());
assertEquals(49, node2.getType());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertTrue(node2.isThrow());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isDelProp());
assertFalse(node2.isTrue());
assertFalse(node2.isSwitch());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());

boolean boolean9 = node2.isSwitch();
assertFalse(boolean9);
assertNotSame(node2, node5);
assertNotSame(node2, node1);
assertNotSame(node2, node3);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertTrue(boolean9 == boolean7);
assertTrue(boolean9 == boolean3);
assertTrue(boolean9 == boolean4);
assertTrue(boolean9 == boolean2);
assertTrue(boolean9 == boolean1);
assertTrue(boolean9 == boolean5);
assertTrue(boolean9 == boolean0);
assertTrue(boolean9 == boolean8);
assertTrue(boolean9 == boolean6);
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isExprResult());
assertFalse(node2.isString());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isHook());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIn());
assertEquals(49, node2.getType());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertTrue(node2.isThrow());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isDelProp());
assertFalse(node2.isTrue());
assertFalse(node2.isSwitch());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());

boolean boolean10 = node4.isNE();
assertFalse(boolean10);
assertNotSame(node4, node0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertTrue(boolean10 == boolean7);
assertTrue(boolean10 == boolean4);
assertTrue(boolean10 == boolean3);
assertTrue(boolean10 == boolean1);
assertTrue(boolean10 == boolean6);
assertTrue(boolean10 == boolean8);
assertTrue(boolean10 == boolean0);
assertTrue(boolean10 == boolean5);
assertTrue(boolean10 == boolean9);
assertTrue(boolean10 == boolean2);
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node5));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.hasOneChild());
assertFalse(node4.isLabelName());
assertFalse(node4.isDec());
assertFalse(node4.isAssign());
assertFalse(node4.hasChildren());
assertFalse(node4.isGetElem());
assertFalse(node4.isExprResult());
assertFalse(node4.isCast());
assertFalse(node4.isTypeOf());
assertFalse(node4.isWith());
assertFalse(node4.isReturn());
assertFalse(node4.isGetProp());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isScript());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNumber());
assertFalse(node4.isVar());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isStringKey());
assertFalse(node4.isName());
assertFalse(node4.isSwitch());
assertFalse(node4.isBreak());
assertFalse(node4.isWhile());
assertFalse(node4.isCall());
assertFalse(node4.isComma());
assertFalse(node4.isOr());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDo());
assertFalse(node4.isEmpty());
assertFalse(node4.isNull());
assertFalse(node4.isArrayLit());
assertFalse(node4.isVoid());
assertFalse(node4.isTrue());
assertFalse(node4.isTry());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDelProp());
assertFalse(node4.isFor());
assertEquals(40, node4.getType());
assertFalse(node4.isFunction());
assertFalse(node4.isCatch());
assertFalse(node4.isRegExp());
assertFalse(node4.isParamList());
assertFalse(node4.isGetterDef());
assertFalse(node4.isCase());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isDebugger());
assertFalse(node4.isBlock());
assertFalse(node4.isHook());
assertFalse(node4.isThrow());
assertTrue(node4.isString());
assertFalse(node4.isThis());
assertFalse(node4.isContinue());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isFalse());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isSetterDef());
assertFalse(node4.isInc());
assertFalse(node4.isIn());


[MASTER] 09:59:01.690 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_186_1628157541269/com/google/javascript/rhino/Node_186_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_186_1628157541269/com/google/javascript/rhino/Node_186_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:01.690 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:01.690 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:01.691 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 659
[MASTER] 09:59:01.693 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_186_1628157541269/com/google/javascript/rhino/Node_186_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:01 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_186_tmp__ESTest extends Node_186_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node[] nodeArray0 = new Node[0];
21:       Node node0 = new Node(330, nodeArray0);
22:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
23:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
24:       assertEquals(43, Node.IS_CONSTANT_NAME);
25:       assertEquals(56, Node.CHANGE_TIME);
26:       assertEquals(36, Node.QUOTED_PROP);
27:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
28:       assertEquals(37, Node.OPT_ARG_NAME);
29:       assertEquals(51, Node.STATIC_SOURCE_FILE);
30:       assertEquals(12, Node.COLUMN_BITS);
31:       assertEquals(4095, Node.COLUMN_MASK);
32:       assertEquals(46, Node.IS_NAMESPACE);
33:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
34:       assertEquals(32, Node.INCRDECR_PROP);
35:       assertEquals(1, Node.DECR_FLAG);
36:       assertEquals(57, Node.REFLECTED_OBJECT);
37:       assertEquals(40, Node.ORIGINALNAME_PROP);
38:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
39:       assertEquals(52, Node.LENGTH);
40:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
41:       assertEquals(50, Node.FREE_CALL);
42:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
43:       assertEquals(54, Node.SLASH_V);
44:       assertEquals(48, Node.DIRECTIVES);
45:       assertEquals(49, Node.DIRECT_EVAL);
46:       assertEquals(55, Node.INFERRED_FUNCTION);
47:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
48:       assertEquals(8, Node.FLAG_NO_THROWS);
49:       assertEquals(2, Node.POST_FLAG);
50:       assertEquals(30, Node.VAR_ARGS_NAME);
51:       assertEquals(15, Node.NO_SIDE_EFFECTS);
52:       assertEquals(57, Node.LAST_PROP);
53:       assertEquals(47, Node.IS_DISPATCHER);
54:       assertEquals(39, Node.EMPTY_BLOCK);
55:       assertEquals(29, Node.JSDOC_INFO_PROP);
56:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
57:       assertEquals(53, Node.INPUT_ID);
58:       assertEquals(0, nodeArray0.length);
59:       assertNotNull(node0);
60:       assertFalse(node0.isDebugger());
61:       assertFalse(node0.isTrue());
62:       assertFalse(node0.isFunction());
63:       assertFalse(node0.isRegExp());
64:       assertFalse(node0.isEmpty());
65:       assertFalse(node0.isFor());
66:       assertFalse(node0.isDefaultCase());
67:       assertFalse(node0.isTry());
68:       assertEquals(0, node0.getLineno());
69:       assertFalse(node0.isParamList());
70:       assertFalse(node0.isGetterDef());
71:       assertEquals(0, node0.getChildCount());
72:       assertFalse(node0.isStringKey());
73:       assertFalse(node0.isArrayLit());
74:       assertFalse(node0.isSwitch());
75:       assertFalse(node0.isNew());
76:       assertFalse(node0.isAdd());
77:       assertFalse(node0.isString());
78:       assertFalse(node0.isWhile());
79:       assertEquals(330, node0.getType());
80:       assertFalse(node0.isVar());
81:       assertFalse(node0.isDo());
82:       assertFalse(node0.isReturn());
83:       assertFalse(node0.isNull());
84:       assertFalse(node0.isTypeOf());
85:       assertFalse(node0.isDec());
86:       assertFalse(node0.hasChildren());
87:       assertEquals(0, node0.getSourcePosition());
88:       assertFalse(node0.isComma());
89:       assertFalse(node0.isOr());
90:       assertFalse(node0.isAssign());
91:       assertFalse(node0.isName());
92:       assertFalse(node0.isGetElem());
93:       assertFalse(node0.isCall());
94:       assertFalse(node0.isBreak());
95:       assertFalse(node0.isVoid());
96:       assertFalse(node0.isDelProp());
97:       assertEquals(0, node0.getCharno());
98:       assertFalse(node0.isExprResult());
99:       assertFalse(node0.isScript());
100:       assertFalse(node0.isWith());
101:       assertFalse(node0.isNot());
102:       assertFalse(node0.hasOneChild());
103:       assertFalse(node0.isLabel());
104:       assertFalse(node0.isAssignAdd());
105:       assertFalse(node0.isGetProp());
106:       assertFalse(node0.isNumber());
107:       assertFalse(node0.isObjectLit());
108:       assertFalse(node0.isFalse());
109:       assertFalse(node0.isAnd());
110:       assertFalse(node0.isContinue());
111:       assertFalse(node0.isCast());
112:       assertFalse(node0.isLabelName());
113:       assertFalse(node0.isBlock());
114:       assertFalse(node0.isInc());
115:       assertFalse(node0.isHook());
116:       assertFalse(node0.isCase());
117:       assertFalse(node0.isThrow());
118:       assertFalse(node0.isThis());
119:       assertFalse(node0.isSetterDef());
120:       assertFalse(node0.isNE());
121:       assertFalse(node0.isInstanceOf());
122:       assertFalse(node0.isIn());
123:       assertFalse(node0.hasMoreThanOneChild());
124:       assertFalse(node0.isCatch());
125:       assertFalse(node0.isIf());
126:       
127:       Node node1 = new Node(49);
128:       assertEquals(57, Node.LAST_PROP);
129:       assertEquals(30, Node.VAR_ARGS_NAME);
130:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
131:       assertEquals(57, Node.REFLECTED_OBJECT);
132:       assertEquals(54, Node.SLASH_V);
133:       assertEquals(49, Node.DIRECT_EVAL);
134:       assertEquals(40, Node.ORIGINALNAME_PROP);
135:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
136:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
137:       assertEquals(12, Node.COLUMN_BITS);
138:       assertEquals(46, Node.IS_NAMESPACE);
139:       assertEquals(51, Node.STATIC_SOURCE_FILE);
140:       assertEquals(1, Node.DECR_FLAG);
141:       assertEquals(32, Node.INCRDECR_PROP);
142:       assertEquals(50, Node.FREE_CALL);
143:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
144:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
145:       assertEquals(43, Node.IS_CONSTANT_NAME);
146:       assertEquals(36, Node.QUOTED_PROP);
147:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
148:       assertEquals(4095, Node.COLUMN_MASK);
149:       assertEquals(2, Node.POST_FLAG);
150:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
151:       assertEquals(8, Node.FLAG_NO_THROWS);
152:       assertEquals(39, Node.EMPTY_BLOCK);
153:       assertEquals(37, Node.OPT_ARG_NAME);
154:       assertEquals(48, Node.DIRECTIVES);
155:       assertEquals(56, Node.CHANGE_TIME);
156:       assertEquals(47, Node.IS_DISPATCHER);
157:       assertEquals(55, Node.INFERRED_FUNCTION);
158:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
159:       assertEquals(52, Node.LENGTH);
160:       assertEquals(15, Node.NO_SIDE_EFFECTS);
161:       assertEquals(29, Node.JSDOC_INFO_PROP);
162:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
163:       assertEquals(53, Node.INPUT_ID);
164:       assertNotNull(node1);
165:       assertFalse(node1.equals((Object)node0));
166:       assertFalse(node1.isCase());
167:       assertFalse(node1.isString());
168:       assertFalse(node1.isSwitch());
169:       assertEquals((-1), node1.getCharno());
170:       assertFalse(node1.isIn());
171:       assertEquals(49, node1.getType());
172:       assertFalse(node1.isInc());
173:       assertFalse(node1.isFalse());
174:       assertFalse(node1.isGetterDef());
175:       assertFalse(node1.isFunction());
176:       assertFalse(node1.isArrayLit());
177:       assertFalse(node1.isNot());
178:       assertFalse(node1.isDefaultCase());
179:       assertFalse(node1.isObjectLit());
180:       assertFalse(node1.isAnd());
181:       assertFalse(node1.isDebugger());
182:       assertFalse(node1.isTrue());
183:       assertFalse(node1.isGetProp());
184:       assertFalse(node1.isEmpty());
185:       assertFalse(node1.isAssign());
186:       assertFalse(node1.isDec());
187:       assertFalse(node1.isDelProp());
188:       assertFalse(node1.isName());
189:       assertFalse(node1.isTypeOf());
190:       assertFalse(node1.isComma());
191:       assertFalse(node1.hasChildren());
192:       assertFalse(node1.isNull());
193:       assertFalse(node1.isVoid());
194:       assertFalse(node1.isBreak());
195:       assertFalse(node1.isCall());
196:       assertFalse(node1.isExprResult());
197:       assertFalse(node1.isGetElem());
198:       assertFalse(node1.isDo());
199:       assertFalse(node1.isWhile());
200:       assertFalse(node1.isReturn());
201:       assertFalse(node1.isBlock());
202:       assertFalse(node1.isAssignAdd());
203:       assertFalse(node1.isOr());
204:       assertFalse(node1.isNew());
205:       assertFalse(node1.isAdd());
206:       assertFalse(node1.isLabelName());
207:       assertFalse(node1.isNumber());
208:       assertFalse(node1.isVar());
209:       assertFalse(node1.isParamList());
210:       assertEquals((-1), node1.getSourcePosition());
211:       assertFalse(node1.isStringKey());
212:       assertFalse(node1.isLabel());
213:       assertEquals(0, node1.getChildCount());
214:       assertFalse(node1.isCast());
215:       assertTrue(node1.isThrow());
216:       assertFalse(node1.isContinue());
217:       assertFalse(node1.isWith());
218:       assertFalse(node1.isRegExp());
219:       assertFalse(node1.isTry());
220:       assertFalse(node1.isSetterDef());
221:       assertFalse(node1.hasOneChild());
222:       assertFalse(node1.isScript());
223:       assertFalse(node1.isIf());
224:       assertFalse(node1.isNE());
225:       assertFalse(node1.isHook());
226:       assertFalse(node1.isFor());
227:       assertFalse(node1.isThis());
228:       assertEquals((-1), node1.getLineno());
229:       assertFalse(node1.hasMoreThanOneChild());
230:       assertFalse(node1.isCatch());
231:       assertFalse(node1.isInstanceOf());
232:       
233:       Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
234:       assertEquals(29, Node.JSDOC_INFO_PROP);
235:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
236:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
237:       assertEquals(47, Node.IS_DISPATCHER);
238:       assertEquals(2, Node.POST_FLAG);
239:       assertEquals(53, Node.INPUT_ID);
240:       assertEquals(32, Node.INCRDECR_PROP);
241:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
242:       assertEquals(46, Node.IS_NAMESPACE);
243:       assertEquals(30, Node.VAR_ARGS_NAME);
244:       assertEquals(51, Node.STATIC_SOURCE_FILE);
245:       assertEquals(54, Node.SLASH_V);
246:       assertEquals(43, Node.IS_CONSTANT_NAME);
247:       assertEquals(40, Node.ORIGINALNAME_PROP);
248:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
249:       assertEquals(57, Node.REFLECTED_OBJECT);
250:       assertEquals(50, Node.FREE_CALL);
251:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
252:       assertEquals(8, Node.FLAG_NO_THROWS);
253:       assertEquals(39, Node.EMPTY_BLOCK);
254:       assertEquals(52, Node.LENGTH);
255:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
256:       assertEquals(15, Node.NO_SIDE_EFFECTS);
257:       assertEquals(57, Node.LAST_PROP);
258:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
259:       assertEquals(1, Node.DECR_FLAG);
260:       assertEquals(55, Node.INFERRED_FUNCTION);
261:       assertEquals(4095, Node.COLUMN_MASK);
262:       assertEquals(12, Node.COLUMN_BITS);
263:       assertEquals(36, Node.QUOTED_PROP);
264:       assertEquals(48, Node.DIRECTIVES);
265:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
266:       assertEquals(56, Node.CHANGE_TIME);
267:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
268:       assertEquals(49, Node.DIRECT_EVAL);
269:       assertEquals(37, Node.OPT_ARG_NAME);
270:       assertNotNull(node2);
271:       assertFalse(node2.equals((Object)node0));
272:       assertFalse(node2.equals((Object)node1));
273:       assertFalse(node2.isCast());
274:       assertFalse(node2.isAssign());
275:       assertFalse(node2.isTypeOf());
276:       assertFalse(node2.isWith());
277:       assertFalse(node2.isAnd());
278:       assertFalse(node2.isExprResult());
279:       assertFalse(node2.isGetElem());
280:       assertFalse(node2.isLabelName());
281:       assertEquals((-1), node2.getLineno());
282:       assertFalse(node2.isAssignAdd());
283:       assertFalse(node2.isContinue());
284:       assertFalse(node2.isLabel());
285:       assertFalse(node2.isOr());
286:       assertFalse(node2.isDo());
287:       assertFalse(node2.isNew());
288:       assertFalse(node2.isHook());
289:       assertFalse(node2.isVar());
290:       assertEquals((-1), node2.getCharno());
291:       assertFalse(node2.isBlock());
292:       assertFalse(node2.isParamList());
293:       assertFalse(node2.isStringKey());
294:       assertFalse(node2.isSwitch());
295:       assertFalse(node2.isInstanceOf());
296:       assertFalse(node2.isCatch());
297:       assertFalse(node2.isThis());
298:       assertFalse(node2.hasMoreThanOneChild());
299:       assertFalse(node2.isGetterDef());
300:       assertFalse(node2.isNumber());
301:       assertFalse(node2.isFor());
302:       assertFalse(node2.isScript());
303:       assertTrue(node2.isString());
304:       assertFalse(node2.isTry());
305:       assertFalse(node2.isCase());
306:       assertFalse(node2.hasOneChild());
307:       assertFalse(node2.isDebugger());
308:       assertFalse(node2.isTrue());
309:       assertFalse(node2.isFunction());
310:       assertFalse(node2.isRegExp());
311:       assertFalse(node2.isDelProp());
312:       assertFalse(node2.isIf());
313:       assertFalse(node2.isNE());
314:       assertFalse(node2.isVoid());
315:       assertFalse(node2.isArrayLit());
316:       assertFalse(node2.isIn());
317:       assertEquals(0, node2.getChildCount());
318:       assertEquals(40, node2.getType());
319:       assertFalse(node2.isDefaultCase());
320:       assertFalse(node2.isEmpty());
321:       assertFalse(node2.isInc());
322:       assertFalse(node2.isSetterDef());
323:       assertFalse(node2.isAdd());
324:       assertFalse(node2.isThrow());
325:       assertFalse(node2.isFalse());
326:       assertFalse(node2.isBreak());
327:       assertFalse(node2.isNull());
328:       assertFalse(node2.isCall());
329:       assertFalse(node2.isName());
330:       assertFalse(node2.isReturn());
331:       assertFalse(node2.isObjectLit());
332:       assertFalse(node2.isNot());
333:       assertFalse(node2.isComma());
334:       assertFalse(node2.isDec());
335:       assertEquals((-1), node2.getSourcePosition());
336:       assertFalse(node2.hasChildren());
337:       assertFalse(node2.isWhile());
338:       assertFalse(node2.isGetProp());
339:       
340:       Node node3 = node2.useSourceInfoIfMissingFrom(node1);
341:       assertNotSame(node1, node0);
342:       assertSame(node2, node3);
343:       assertSame(node3, node2);
344:       assertEquals(57, Node.LAST_PROP);
345:       assertEquals(30, Node.VAR_ARGS_NAME);
346:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
347:       assertEquals(57, Node.REFLECTED_OBJECT);
348:       assertEquals(54, Node.SLASH_V);
349:       assertEquals(49, Node.DIRECT_EVAL);
350:       assertEquals(40, Node.ORIGINALNAME_PROP);
351:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
352:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
353:       assertEquals(12, Node.COLUMN_BITS);
354:       assertEquals(46, Node.IS_NAMESPACE);
355:       assertEquals(51, Node.STATIC_SOURCE_FILE);
356:       assertEquals(1, Node.DECR_FLAG);
357:       assertEquals(32, Node.INCRDECR_PROP);
358:       assertEquals(50, Node.FREE_CALL);
359:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
360:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
361:       assertEquals(43, Node.IS_CONSTANT_NAME);
362:       assertEquals(36, Node.QUOTED_PROP);
363:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
364:       assertEquals(4095, Node.COLUMN_MASK);
365:       assertEquals(2, Node.POST_FLAG);
366:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
367:       assertEquals(8, Node.FLAG_NO_THROWS);
368:       assertEquals(39, Node.EMPTY_BLOCK);
369:       assertEquals(37, Node.OPT_ARG_NAME);
370:       assertEquals(48, Node.DIRECTIVES);
371:       assertEquals(56, Node.CHANGE_TIME);
372:       assertEquals(47, Node.IS_DISPATCHER);
373:       assertEquals(55, Node.INFERRED_FUNCTION);
374:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
375:       assertEquals(52, Node.LENGTH);
376:       assertEquals(15, Node.NO_SIDE_EFFECTS);
377:       assertEquals(29, Node.JSDOC_INFO_PROP);
378:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
379:       assertEquals(53, Node.INPUT_ID);
380:       assertEquals(29, Node.JSDOC_INFO_PROP);
381:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
382:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
383:       assertEquals(47, Node.IS_DISPATCHER);
384:       assertEquals(2, Node.POST_FLAG);
385:       assertEquals(53, Node.INPUT_ID);
386:       assertEquals(32, Node.INCRDECR_PROP);
387:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
388:       assertEquals(46, Node.IS_NAMESPACE);
389:       assertEquals(30, Node.VAR_ARGS_NAME);
390:       assertEquals(51, Node.STATIC_SOURCE_FILE);
391:       assertEquals(54, Node.SLASH_V);
392:       assertEquals(43, Node.IS_CONSTANT_NAME);
393:       assertEquals(40, Node.ORIGINALNAME_PROP);
394:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
395:       assertEquals(57, Node.REFLECTED_OBJECT);
396:       assertEquals(50, Node.FREE_CALL);
397:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
398:       assertEquals(8, Node.FLAG_NO_THROWS);
399:       assertEquals(39, Node.EMPTY_BLOCK);
400:       assertEquals(52, Node.LENGTH);
401:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
402:       assertEquals(15, Node.NO_SIDE_EFFECTS);
403:       assertEquals(57, Node.LAST_PROP);
404:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
405:       assertEquals(1, Node.DECR_FLAG);
406:       assertEquals(55, Node.INFERRED_FUNCTION);
407:       assertEquals(4095, Node.COLUMN_MASK);
408:       assertEquals(12, Node.COLUMN_BITS);
409:       assertEquals(36, Node.QUOTED_PROP);
410:       assertEquals(48, Node.DIRECTIVES);
411:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
412:       assertEquals(56, Node.CHANGE_TIME);
413:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
414:       assertEquals(49, Node.DIRECT_EVAL);
415:       assertEquals(37, Node.OPT_ARG_NAME);
416:       assertEquals(48, Node.DIRECTIVES);
417:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
418:       assertEquals(40, Node.ORIGINALNAME_PROP);
419:       assertEquals(4095, Node.COLUMN_MASK);
420:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
421:       assertEquals(43, Node.IS_CONSTANT_NAME);
422:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
423:       assertEquals(54, Node.SLASH_V);
424:       assertEquals(1, Node.DECR_FLAG);
425:       assertEquals(50, Node.FREE_CALL);
426:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
427:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
428:       assertEquals(51, Node.STATIC_SOURCE_FILE);
429:       assertEquals(32, Node.INCRDECR_PROP);
430:       assertEquals(56, Node.CHANGE_TIME);
431:       assertEquals(12, Node.COLUMN_BITS);
432:       assertEquals(46, Node.IS_NAMESPACE);
433:       assertEquals(47, Node.IS_DISPATCHER);
434:       assertEquals(2, Node.POST_FLAG);
435:       assertEquals(30, Node.VAR_ARGS_NAME);
436:       assertEquals(49, Node.DIRECT_EVAL);
437:       assertEquals(37, Node.OPT_ARG_NAME);
438:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
439:       assertEquals(52, Node.LENGTH);
440:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
441:       assertEquals(57, Node.REFLECTED_OBJECT);
442:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
443:       assertEquals(57, Node.LAST_PROP);
444:       assertEquals(36, Node.QUOTED_PROP);
445:       assertEquals(55, Node.INFERRED_FUNCTION);
446:       assertEquals(8, Node.FLAG_NO_THROWS);
447:       assertEquals(39, Node.EMPTY_BLOCK);
448:       assertEquals(15, Node.NO_SIDE_EFFECTS);
449:       assertEquals(53, Node.INPUT_ID);
450:       assertEquals(29, Node.JSDOC_INFO_PROP);
451:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
452:       assertNotNull(node3);
453:       assertFalse(node1.equals((Object)node2));
454:       assertFalse(node1.equals((Object)node0));
455:       assertFalse(node2.equals((Object)node0));
456:       assertFalse(node2.equals((Object)node1));
457:       assertFalse(node3.equals((Object)node0));
458:       assertFalse(node3.equals((Object)node1));
459:       assertFalse(node1.isCase());
460:       assertFalse(node1.isString());
461:       assertFalse(node1.isSwitch());
462:       assertEquals((-1), node1.getCharno());
463:       assertFalse(node1.isIn());
464:       assertEquals(49, node1.getType());
465:       assertFalse(node1.isInc());
466:       assertFalse(node1.isFalse());
467:       assertFalse(node1.isGetterDef());
468:       assertFalse(node1.isFunction());
469:       assertFalse(node1.isArrayLit());
470:       assertFalse(node1.isNot());
471:       assertFalse(node1.isDefaultCase());
472:       assertFalse(node1.isObjectLit());
473:       assertFalse(node1.isAnd());
474:       assertFalse(node1.isDebugger());
475:       assertFalse(node1.isTrue());
476:       assertFalse(node1.isGetProp());
477:       assertFalse(node1.isEmpty());
478:       assertFalse(node1.isAssign());
479:       assertFalse(node1.isDec());
480:       assertFalse(node1.isDelProp());
481:       assertFalse(node1.isName());
482:       assertFalse(node1.isTypeOf());
483:       assertFalse(node1.isComma());
484:       assertFalse(node1.hasChildren());
485:       assertFalse(node1.isNull());
486:       assertFalse(node1.isVoid());
487:       assertFalse(node1.isBreak());
488:       assertFalse(node1.isCall());
489:       assertFalse(node1.isExprResult());
490:       assertFalse(node1.isGetElem());
491:       assertFalse(node1.isDo());
492:       assertFalse(node1.isWhile());
493:       assertFalse(node1.isReturn());
494:       assertFalse(node1.isBlock());
495:       assertFalse(node1.isAssignAdd());
496:       assertFalse(node1.isOr());
497:       assertFalse(node1.isNew());
498:       assertFalse(node1.isAdd());
499:       assertFalse(node1.isLabelName());
500:       assertFalse(node1.isNumber());
501:       assertFalse(node1.isVar());
502:       assertFalse(node1.isParamList());
503:       assertEquals((-1), node1.getSourcePosition());
504:       assertFalse(node1.isStringKey());
505:       assertFalse(node1.isLabel());
506:       assertEquals(0, node1.getChildCount());
507:       assertFalse(node1.isCast());
508:       assertTrue(node1.isThrow());
509:       assertFalse(node1.isContinue());
510:       assertFalse(node1.isWith());
511:       assertFalse(node1.isRegExp());
512:       assertFalse(node1.isTry());
513:       assertFalse(node1.isSetterDef());
514:       assertFalse(node1.hasOneChild());
515:       assertFalse(node1.isScript());
516:       assertFalse(node1.isIf());
517:       assertFalse(node1.isNE());
518:       assertFalse(node1.isHook());
519:       assertFalse(node1.isFor());
520:       assertFalse(node1.isThis());
521:       assertEquals((-1), node1.getLineno());
522:       assertFalse(node1.hasMoreThanOneChild());
523:       assertFalse(node1.isCatch());
524:       assertFalse(node1.isInstanceOf());
525:       assertFalse(node2.isCast());
526:       assertFalse(node2.isAssign());
527:       assertFalse(node2.isTypeOf());
528:       assertFalse(node2.isWith());
529:       assertFalse(node2.isAnd());
530:       assertFalse(node2.isExprResult());
531:       assertFalse(node2.isGetElem());
532:       assertFalse(node2.isLabelName());
533:       assertEquals((-1), node2.getLineno());
534:       assertFalse(node2.isAssignAdd());
535:       assertFalse(node2.isContinue());
536:       assertFalse(node2.isLabel());
537:       assertFalse(node2.isOr());
538:       assertFalse(node2.isDo());
539:       assertFalse(node2.isNew());
540:       assertFalse(node2.isHook());
541:       assertFalse(node2.isVar());
542:       assertEquals((-1), node2.getCharno());
543:       assertFalse(node2.isBlock());
544:       assertFalse(node2.isParamList());
545:       assertFalse(node2.isStringKey());
546:       assertFalse(node2.isSwitch());
547:       assertFalse(node2.isInstanceOf());
548:       assertFalse(node2.isCatch());
549:       assertFalse(node2.isThis());
550:       assertFalse(node2.hasMoreThanOneChild());
551:       assertFalse(node2.isGetterDef());
552:       assertFalse(node2.isNumber());
553:       assertFalse(node2.isFor());
554:       assertFalse(node2.isScript());
555:       assertTrue(node2.isString());
556:       assertFalse(node2.isTry());
557:       assertFalse(node2.isCase());
558:       assertFalse(node2.hasOneChild());
559:       assertFalse(node2.isDebugger());
560:       assertFalse(node2.isTrue());
561:       assertFalse(node2.isFunction());
562:       assertFalse(node2.isRegExp());
563:       assertFalse(node2.isDelProp());
564:       assertFalse(node2.isIf());
565:       assertFalse(node2.isNE());
566:       assertFalse(node2.isVoid());
567:       assertFalse(node2.isArrayLit());
568:       assertFalse(node2.isIn());
569:       assertEquals(0, node2.getChildCount());
570:       assertEquals(40, node2.getType());
571:       assertFalse(node2.isDefaultCase());
572:       assertFalse(node2.isEmpty());
573:       assertFalse(node2.isInc());
574:       assertFalse(node2.isSetterDef());
575:       assertFalse(node2.isAdd());
576:       assertFalse(node2.isThrow());
577:       assertFalse(node2.isFalse());
578:       assertFalse(node2.isBreak());
579:       assertFalse(node2.isNull());
580:       assertFalse(node2.isCall());
581:       assertFalse(node2.isName());
582:       assertFalse(node2.isReturn());
583:       assertFalse(node2.isObjectLit());
584:       assertFalse(node2.isNot());
585:       assertFalse(node2.isComma());
586:       assertFalse(node2.isDec());
587:       assertEquals((-1), node2.getSourcePosition());
588:       assertFalse(node2.hasChildren());
589:       assertFalse(node2.isWhile());
590:       assertFalse(node2.isGetProp());
591:       assertFalse(node3.isComma());
592:       assertFalse(node3.isThis());
593:       assertFalse(node3.isThrow());
594:       assertFalse(node3.isNot());
595:       assertFalse(node3.isObjectLit());
596:       assertFalse(node3.isGetProp());
597:       assertFalse(node3.isScript());
598:       assertFalse(node3.isInc());
599:       assertFalse(node3.isSwitch());
600:       assertEquals((-1), node3.getCharno());
601:       assertFalse(node3.isCast());
602:       assertFalse(node3.isAnd());
603:       assertFalse(node3.isFalse());
604:       assertFalse(node3.isLabelName());
605:       assertFalse(node3.isNumber());
606:       assertFalse(node3.isGetterDef());
607:       assertFalse(node3.isIf());
608:       assertFalse(node3.isNE());
609:       assertFalse(node3.isFor());
610:       assertFalse(node3.hasOneChild());
611:       assertFalse(node3.isCase());
612:       assertFalse(node3.isIn());
613:       assertTrue(node3.isString());
614:       assertFalse(node3.isTry());
615:       assertFalse(node3.isRegExp());
616:       assertFalse(node3.isHook());
617:       assertFalse(node3.isBlock());
618:       assertFalse(node3.hasMoreThanOneChild());
619:       assertFalse(node3.isCatch());
620:       assertEquals((-1), node3.getLineno());
621:       assertFalse(node3.isWith());
622:       assertFalse(node3.isInstanceOf());
623:       assertFalse(node3.isParamList());
624:       assertFalse(node3.isSetterDef());
625:       assertFalse(node3.isStringKey());
626:       assertFalse(node3.isNull());
627:       assertFalse(node3.isAdd());
628:       assertFalse(node3.isFunction());
629:       assertFalse(node3.isDebugger());
630:       assertFalse(node3.isDefaultCase());
631:       assertFalse(node3.isNew());
632:       assertEquals(40, node3.getType());
633:       assertFalse(node3.isVar());
634:       assertFalse(node3.isArrayLit());
635:       assertFalse(node3.isContinue());
636:       assertEquals(0, node3.getChildCount());
637:       assertFalse(node3.isDec());
638:       assertEquals((-1), node3.getSourcePosition());
639:       assertFalse(node3.isDelProp());
640:       assertFalse(node3.isOr());
641:       assertFalse(node3.isTypeOf());
642:       assertFalse(node3.isReturn());
643:       assertFalse(node3.isLabel());
644:       assertFalse(node3.isAssignAdd());
645:       assertFalse(node3.hasChildren());
646:       assertFalse(node3.isDo());
647:       assertFalse(node3.isEmpty());
648:       assertFalse(node3.isVoid());
649:       assertFalse(node3.isWhile());
650:       assertFalse(node3.isTrue());
651:       assertFalse(node3.isName());
652:       assertFalse(node3.isAssign());
653:       assertFalse(node3.isBreak());
654:       assertFalse(node3.isGetElem());
655:       assertFalse(node3.isCall());
656:       assertFalse(node3.isExprResult());
657:       
658:       Iterable<Node> iterable0 = node3.children();
659:       assertFalse(iterable0.contains(node1));
660:       assertNotSame(node1, node0);
661:       assertSame(node2, node3);
662:       assertSame(node3, node2);
663:       assertEquals(57, Node.LAST_PROP);
664:       assertEquals(30, Node.VAR_ARGS_NAME);
665:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
666:       assertEquals(57, Node.REFLECTED_OBJECT);
667:       assertEquals(54, Node.SLASH_V);
668:       assertEquals(49, Node.DIRECT_EVAL);
669:       assertEquals(40, Node.ORIGINALNAME_PROP);
670:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
671:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
672:       assertEquals(12, Node.COLUMN_BITS);
673:       assertEquals(46, Node.IS_NAMESPACE);
674:       assertEquals(51, Node.STATIC_SOURCE_FILE);
675:       assertEquals(1, Node.DECR_FLAG);
676:       assertEquals(32, Node.INCRDECR_PROP);
677:       assertEquals(50, Node.FREE_CALL);
678:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
679:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
680:       assertEquals(43, Node.IS_CONSTANT_NAME);
681:       assertEquals(36, Node.QUOTED_PROP);
682:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
683:       assertEquals(4095, Node.COLUMN_MASK);
684:       assertEquals(2, Node.POST_FLAG);
685:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
686:       assertEquals(8, Node.FLAG_NO_THROWS);
687:       assertEquals(39, Node.EMPTY_BLOCK);
688:       assertEquals(37, Node.OPT_ARG_NAME);
689:       assertEquals(48, Node.DIRECTIVES);
690:       assertEquals(56, Node.CHANGE_TIME);
691:       assertEquals(47, Node.IS_DISPATCHER);
692:       assertEquals(55, Node.INFERRED_FUNCTION);
693:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
694:       assertEquals(52, Node.LENGTH);
695:       assertEquals(15, Node.NO_SIDE_EFFECTS);
696:       assertEquals(29, Node.JSDOC_INFO_PROP);
697:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
698:       assertEquals(53, Node.INPUT_ID);
699:       assertEquals(29, Node.JSDOC_INFO_PROP);
700:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
701:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
702:       assertEquals(47, Node.IS_DISPATCHER);
703:       assertEquals(2, Node.POST_FLAG);
704:       assertEquals(53, Node.INPUT_ID);
705:       assertEquals(32, Node.INCRDECR_PROP);
706:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
707:       assertEquals(46, Node.IS_NAMESPACE);
708:       assertEquals(30, Node.VAR_ARGS_NAME);
709:       assertEquals(51, Node.STATIC_SOURCE_FILE);
710:       assertEquals(54, Node.SLASH_V);
711:       assertEquals(43, Node.IS_CONSTANT_NAME);
712:       assertEquals(40, Node.ORIGINALNAME_PROP);
713:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
714:       assertEquals(57, Node.REFLECTED_OBJECT);
715:       assertEquals(50, Node.FREE_CALL);
716:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
717:       assertEquals(8, Node.FLAG_NO_THROWS);
718:       assertEquals(39, Node.EMPTY_BLOCK);
719:       assertEquals(52, Node.LENGTH);
720:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
721:       assertEquals(15, Node.NO_SIDE_EFFECTS);
722:       assertEquals(57, Node.LAST_PROP);
723:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
724:       assertEquals(1, Node.DECR_FLAG);
725:       assertEquals(55, Node.INFERRED_FUNCTION);
726:       assertEquals(4095, Node.COLUMN_MASK);
727:       assertEquals(12, Node.COLUMN_BITS);
728:       assertEquals(36, Node.QUOTED_PROP);
729:       assertEquals(48, Node.DIRECTIVES);
730:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
731:       assertEquals(56, Node.CHANGE_TIME);
732:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
733:       assertEquals(49, Node.DIRECT_EVAL);
734:       assertEquals(37, Node.OPT_ARG_NAME);
735:       assertEquals(48, Node.DIRECTIVES);
736:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
737:       assertEquals(40, Node.ORIGINALNAME_PROP);
738:       assertEquals(4095, Node.COLUMN_MASK);
739:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
740:       assertEquals(43, Node.IS_CONSTANT_NAME);
741:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
742:       assertEquals(54, Node.SLASH_V);
743:       assertEquals(1, Node.DECR_FLAG);
744:       assertEquals(50, Node.FREE_CALL);
745:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
746:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
747:       assertEquals(51, Node.STATIC_SOURCE_FILE);
748:       assertEquals(32, Node.INCRDECR_PROP);
749:       assertEquals(56, Node.CHANGE_TIME);
750:       assertEquals(12, Node.COLUMN_BITS);
751:       assertEquals(46, Node.IS_NAMESPACE);
752:       assertEquals(47, Node.IS_DISPATCHER);
753:       assertEquals(2, Node.POST_FLAG);
754:       assertEquals(30, Node.VAR_ARGS_NAME);
755:       assertEquals(49, Node.DIRECT_EVAL);
756:       assertEquals(37, Node.OPT_ARG_NAME);
757:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
758:       assertEquals(52, Node.LENGTH);
759:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
760:       assertEquals(57, Node.REFLECTED_OBJECT);
761:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
762:       assertEquals(57, Node.LAST_PROP);
763:       assertEquals(36, Node.QUOTED_PROP);
764:       assertEquals(55, Node.INFERRED_FUNCTION);
765:       assertEquals(8, Node.FLAG_NO_THROWS);
766:       assertEquals(39, Node.EMPTY_BLOCK);
767:       assertEquals(15, Node.NO_SIDE_EFFECTS);
768:       assertEquals(53, Node.INPUT_ID);
769:       assertEquals(29, Node.JSDOC_INFO_PROP);
770:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
771:       assertNotNull(iterable0);
772:       assertFalse(node1.equals((Object)node2));
773:       assertFalse(node1.equals((Object)node0));
774:       assertFalse(node1.equals((Object)node3));
775:       assertFalse(node2.equals((Object)node0));
776:       assertFalse(node2.equals((Object)node1));
777:       assertFalse(node3.equals((Object)node0));
778:       assertFalse(node3.equals((Object)node1));
779:       assertFalse(node1.isCase());
780:       assertFalse(node1.isString());
781:       assertFalse(node1.isSwitch());
782:       assertEquals((-1), node1.getCharno());
783:       assertFalse(node1.isIn());
784:       assertEquals(49, node1.getType());
785:       assertFalse(node1.isInc());
786:       assertFalse(node1.isFalse());
787:       assertFalse(node1.isGetterDef());
788:       assertFalse(node1.isFunction());
789:       assertFalse(node1.isArrayLit());
790:       assertFalse(node1.isNot());
791:       assertFalse(node1.isDefaultCase());
792:       assertFalse(node1.isObjectLit());
793:       assertFalse(node1.isAnd());
794:       assertFalse(node1.isDebugger());
795:       assertFalse(node1.isTrue());
796:       assertFalse(node1.isGetProp());
797:       assertFalse(node1.isEmpty());
798:       assertFalse(node1.isAssign());
799:       assertFalse(node1.isDec());
800:       assertFalse(node1.isDelProp());
801:       assertFalse(node1.isName());
802:       assertFalse(node1.isTypeOf());
803:       assertFalse(node1.isComma());
804:       assertFalse(node1.hasChildren());
805:       assertFalse(node1.isNull());
806:       assertFalse(node1.isVoid());
807:       assertFalse(node1.isBreak());
808:       assertFalse(node1.isCall());
809:       assertFalse(node1.isExprResult());
810:       assertFalse(node1.isGetElem());
811:       assertFalse(node1.isDo());
812:       assertFalse(node1.isWhile());
813:       assertFalse(node1.isReturn());
814:       assertFalse(node1.isBlock());
815:       assertFalse(node1.isAssignAdd());
816:       assertFalse(node1.isOr());
817:       assertFalse(node1.isNew());
818:       assertFalse(node1.isAdd());
819:       assertFalse(node1.isLabelName());
820:       assertFalse(node1.isNumber());
821:       assertFalse(node1.isVar());
822:       assertFalse(node1.isParamList());
823:       assertEquals((-1), node1.getSourcePosition());
824:       assertFalse(node1.isStringKey());
825:       assertFalse(node1.isLabel());
826:       
827:       boolean boolean0 = node1.isGetProp();
828:       assertFalse(boolean0);
829:       assertNotSame(node1, node0);
830:       assertEquals(57, Node.LAST_PROP);
831:       assertEquals(30, Node.VAR_ARGS_NAME);
832:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
833:       assertEquals(57, Node.REFLECTED_OBJECT);
834:       assertEquals(54, Node.SLASH_V);
835:       assertEquals(49, Node.DIRECT_EVAL);
836:       assertEquals(40, Node.ORIGINALNAME_PROP);
837:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
838:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
839:       assertEquals(12, Node.COLUMN_BITS);
840:       assertEquals(46, Node.IS_NAMESPACE);
841:       assertEquals(51, Node.STATIC_SOURCE_FILE);
842:       assertEquals(1, Node.DECR_FLAG);
843:       assertEquals(32, Node.INCRDECR_PROP);
844:       assertEquals(50, Node.FREE_CALL);
845:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
846:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
847:       assertEquals(43, Node.IS_CONSTANT_NAME);
848:       assertEquals(36, Node.QUOTED_PROP);
849:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
850:       assertEquals(4095, Node.COLUMN_MASK);
851:       assertEquals(2, Node.POST_FLAG);
852:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
853:       assertEquals(8, Node.FLAG_NO_THROWS);
854:       assertEquals(39, Node.EMPTY_BLOCK);
855:       assertEquals(37, Node.OPT_ARG_NAME);
856:       assertEquals(48, Node.DIRECTIVES);
857:       assertEquals(56, Node.CHANGE_TIME);
858:       assertEquals(47, Node.IS_DISPATCHER);
859:       assertEquals(55, Node.INFERRED_FUNCTION);
860:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
861:       assertEquals(52, Node.LENGTH);
862:       assertEquals(15, Node.NO_SIDE_EFFECTS);
863:       assertEquals(29, Node.JSDOC_INFO_PROP);
864:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
865:       assertEquals(53, Node.INPUT_ID);
866:       assertFalse(node1.equals((Object)node2));
867:       assertFalse(node1.equals((Object)node0));
868:       assertFalse(node1.equals((Object)node3));
869:       
870:       boolean boolean1 = node3.hasChildren();
871:       assertFalse(boolean1);
872:       assertNotSame(node1, node0);
873:       assertSame(node2, node3);
874:       assertSame(node3, node2);
875:       assertEquals(57, Node.LAST_PROP);
876:       assertEquals(30, Node.VAR_ARGS_NAME);
877:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
878:       assertEquals(57, Node.REFLECTED_OBJECT);
879:       assertEquals(54, Node.SLASH_V);
880:       assertEquals(49, Node.DIRECT_EVAL);
881:       assertEquals(40, Node.ORIGINALNAME_PROP);
882:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
883:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
884:       assertEquals(12, Node.COLUMN_BITS);
885:       assertEquals(46, Node.IS_NAMESPACE);
886:       assertEquals(51, Node.STATIC_SOURCE_FILE);
887:       assertEquals(1, Node.DECR_FLAG);
888:       assertEquals(32, Node.INCRDECR_PROP);
889:       assertEquals(50, Node.FREE_CALL);
890:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
891:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
892:       assertEquals(43, Node.IS_CONSTANT_NAME);
893:       assertEquals(36, Node.QUOTED_PROP);
894:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
895:       assertEquals(4095, Node.COLUMN_MASK);
896:       assertEquals(2, Node.POST_FLAG);
897:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
898:       assertEquals(8, Node.FLAG_NO_THROWS);
899:       assertEquals(39, Node.EMPTY_BLOCK);
900:       assertEquals(37, Node.OPT_ARG_NAME);
901:       assertEquals(48, Node.DIRECTIVES);
902:       assertEquals(56, Node.CHANGE_TIME);
903:       assertEquals(47, Node.IS_DISPATCHER);
904:       assertEquals(55, Node.INFERRED_FUNCTION);
905:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
906:       assertEquals(52, Node.LENGTH);
907:       assertEquals(15, Node.NO_SIDE_EFFECTS);
908:       assertEquals(29, Node.JSDOC_INFO_PROP);
909:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
910:       assertEquals(53, Node.INPUT_ID);
911:       assertEquals(29, Node.JSDOC_INFO_PROP);
912:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
913:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
914:       assertEquals(47, Node.IS_DISPATCHER);
915:       assertEquals(2, Node.POST_FLAG);
916:       assertEquals(53, Node.INPUT_ID);
917:       assertEquals(32, Node.INCRDECR_PROP);
918:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
919:       assertEquals(46, Node.IS_NAMESPACE);
920:       assertEquals(30, Node.VAR_ARGS_NAME);
921:       assertEquals(51, Node.STATIC_SOURCE_FILE);
922:       assertEquals(54, Node.SLASH_V);
923:       assertEquals(43, Node.IS_CONSTANT_NAME);
924:       assertEquals(40, Node.ORIGINALNAME_PROP);
925:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
926:       assertEquals(57, Node.REFLECTED_OBJECT);
927:       assertEquals(50, Node.FREE_CALL);
928:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
929:       assertEquals(8, Node.FLAG_NO_THROWS);
930:       assertEquals(39, Node.EMPTY_BLOCK);
931:       assertEquals(52, Node.LENGTH);
932:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
933:       assertEquals(15, Node.NO_SIDE_EFFECTS);
934:       assertEquals(57, Node.LAST_PROP);
935:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
936:       assertEquals(1, Node.DECR_FLAG);
937:       assertEquals(55, Node.INFERRED_FUNCTION);
938:       assertEquals(4095, Node.COLUMN_MASK);
939:       assertEquals(12, Node.COLUMN_BITS);
940:       assertEquals(36, Node.QUOTED_PROP);
941:       assertEquals(48, Node.DIRECTIVES);
942:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
943:       assertEquals(56, Node.CHANGE_TIME);
944:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
945:       assertEquals(49, Node.DIRECT_EVAL);
946:       assertEquals(37, Node.OPT_ARG_NAME);
947:       assertEquals(48, Node.DIRECTIVES);
948:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
949:       assertEquals(40, Node.ORIGINALNAME_PROP);
950:       assertEquals(4095, Node.COLUMN_MASK);
951:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
952:       assertEquals(43, Node.IS_CONSTANT_NAME);
953:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
954:       assertEquals(54, Node.SLASH_V);
955:       assertEquals(1, Node.DECR_FLAG);
956:       assertEquals(50, Node.FREE_CALL);
957:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
958:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
959:       assertEquals(51, Node.STATIC_SOURCE_FILE);
960:       assertEquals(32, Node.INCRDECR_PROP);
961:       assertEquals(56, Node.CHANGE_TIME);
962:       assertEquals(12, Node.COLUMN_BITS);
963:       assertEquals(46, Node.IS_NAMESPACE);
964:       assertEquals(47, Node.IS_DISPATCHER);
965:       assertEquals(2, Node.POST_FLAG);
966:       assertEquals(30, Node.VAR_ARGS_NAME);
967:       assertEquals(49, Node.DIRECT_EVAL);
968:       assertEquals(37, Node.OPT_ARG_NAME);
969:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
970:       assertEquals(52, Node.LENGTH);
971:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
972:       assertEquals(57, Node.REFLECTED_OBJECT);
973:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
974:       assertEquals(57, Node.LAST_PROP);
975:       assertEquals(36, Node.QUOTED_PROP);
976:       assertEquals(55, Node.INFERRED_FUNCTION);
977:       assertEquals(8, Node.FLAG_NO_THROWS);
978:       assertEquals(39, Node.EMPTY_BLOCK);
979:       assertEquals(15, Node.NO_SIDE_EFFECTS);
980:       assertEquals(53, Node.INPUT_ID);
981:       assertEquals(29, Node.JSDOC_INFO_PROP);
982:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
983:       assertFalse(node1.equals((Object)node2));
984:       assertFalse(node1.equals((Object)node0));
985:       assertFalse(node1.equals((Object)node3));
986:       assertFalse(node2.equals((Object)node0));
987:       assertFalse(node2.equals((Object)node1));
988:       assertFalse(node3.equals((Object)node0));
989:       assertFalse(node3.equals((Object)node1));
990:       assertTrue(boolean1 == boolean0);
991:       
992:       boolean boolean2 = node2.isSwitch();
993:       assertFalse(boolean2);
994:       assertSame(node2, node3);
995:       assertEquals(29, Node.JSDOC_INFO_PROP);
996:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
997:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
998:       assertEquals(47, Node.IS_DISPATCHER);
999:       assertEquals(2, Node.POST_FLAG);
1000:       assertEquals(53, Node.INPUT_ID);
1001:       assertEquals(32, Node.INCRDECR_PROP);
1002:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1003:       assertEquals(46, Node.IS_NAMESPACE);
1004:       assertEquals(30, Node.VAR_ARGS_NAME);
1005:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1006:       assertEquals(54, Node.SLASH_V);
1007:       assertEquals(43, Node.IS_CONSTANT_NAME);
1008:       assertEquals(40, Node.ORIGINALNAME_PROP);
1009:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1010:       assertEquals(57, Node.REFLECTED_OBJECT);
1011:       assertEquals(50, Node.FREE_CALL);
1012:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1013:       assertEquals(8, Node.FLAG_NO_THROWS);
1014:       assertEquals(39, Node.EMPTY_BLOCK);
1015:       assertEquals(52, Node.LENGTH);
1016:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1017:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1018:       assertEquals(57, Node.LAST_PROP);
1019:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1020:       assertEquals(1, Node.DECR_FLAG);
1021:       assertEquals(55, Node.INFERRED_FUNCTION);
1022:       assertEquals(4095, Node.COLUMN_MASK);
1023:       assertEquals(12, Node.COLUMN_BITS);
1024:       assertEquals(36, Node.QUOTED_PROP);
1025:       assertEquals(48, Node.DIRECTIVES);
1026:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1027:       assertEquals(56, Node.CHANGE_TIME);
1028:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1029:       assertEquals(49, Node.DIRECT_EVAL);
1030:       assertEquals(37, Node.OPT_ARG_NAME);
1031:       assertFalse(node2.equals((Object)node0));
1032:       assertFalse(node2.equals((Object)node1));
1033:       assertTrue(boolean2 == boolean1);
1034:       assertTrue(boolean2 == boolean0);
1035:       
1036:       Node node4 = node0.cloneNode();
1037:       assertNotSame(node0, node4);
1038:       assertNotSame(node0, node1);
1039:       assertNotSame(node4, node1);
1040:       assertNotSame(node4, node0);
1041:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1042:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1043:       assertEquals(43, Node.IS_CONSTANT_NAME);
1044:       assertEquals(56, Node.CHANGE_TIME);
1045:       assertEquals(36, Node.QUOTED_PROP);
1046:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1047:       assertEquals(37, Node.OPT_ARG_NAME);
1048:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1049:       assertEquals(12, Node.COLUMN_BITS);
1050:       assertEquals(4095, Node.COLUMN_MASK);
1051:       assertEquals(46, Node.IS_NAMESPACE);
1052:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1053:       assertEquals(32, Node.INCRDECR_PROP);
1054:       assertEquals(1, Node.DECR_FLAG);
1055:       assertEquals(57, Node.REFLECTED_OBJECT);
1056:       assertEquals(40, Node.ORIGINALNAME_PROP);
1057:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1058:       assertEquals(52, Node.LENGTH);
1059:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1060:       assertEquals(50, Node.FREE_CALL);
1061:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1062:       assertEquals(54, Node.SLASH_V);
1063:       assertEquals(48, Node.DIRECTIVES);
1064:       assertEquals(49, Node.DIRECT_EVAL);
1065:       assertEquals(55, Node.INFERRED_FUNCTION);
1066:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1067:       assertEquals(8, Node.FLAG_NO_THROWS);
1068:       assertEquals(2, Node.POST_FLAG);
1069:       assertEquals(30, Node.VAR_ARGS_NAME);
1070:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1071:       assertEquals(57, Node.LAST_PROP);
1072:       assertEquals(47, Node.IS_DISPATCHER);
1073:       assertEquals(39, Node.EMPTY_BLOCK);
1074:       assertEquals(29, Node.JSDOC_INFO_PROP);
1075:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1076:       assertEquals(53, Node.INPUT_ID);
1077:       assertEquals(32, Node.INCRDECR_PROP);
1078:       assertEquals(46, Node.IS_NAMESPACE);
1079:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1080:       assertEquals(12, Node.COLUMN_BITS);
1081:       assertEquals(37, Node.OPT_ARG_NAME);
1082:       assertEquals(1, Node.DECR_FLAG);
1083:       assertEquals(49, Node.DIRECT_EVAL);
1084:       assertEquals(56, Node.CHANGE_TIME);
1085:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1086:       assertEquals(29, Node.JSDOC_INFO_PROP);
1087:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1088:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1089:       assertEquals(52, Node.LENGTH);
1090:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1091:       assertEquals(57, Node.REFLECTED_OBJECT);
1092:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1093:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1094:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1095:       assertEquals(4095, Node.COLUMN_MASK);
1096:       assertEquals(48, Node.DIRECTIVES);
1097:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1098:       assertEquals(43, Node.IS_CONSTANT_NAME);
1099:       assertEquals(36, Node.QUOTED_PROP);
1100:       assertEquals(39, Node.EMPTY_BLOCK);
1101:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1102:       assertEquals(55, Node.INFERRED_FUNCTION);
1103:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1104:       assertEquals(50, Node.FREE_CALL);
1105:       assertEquals(8, Node.FLAG_NO_THROWS);
1106:       assertEquals(53, Node.INPUT_ID);
1107:       assertEquals(54, Node.SLASH_V);
1108:       assertEquals(57, Node.LAST_PROP);
1109:       assertEquals(30, Node.VAR_ARGS_NAME);
1110:       assertEquals(47, Node.IS_DISPATCHER);
1111:       assertEquals(40, Node.ORIGINALNAME_PROP);
1112:       assertEquals(2, Node.POST_FLAG);
1113:       assertEquals(0, nodeArray0.length);
1114:       assertNotNull(node4);
1115:       assertFalse(node0.equals((Object)node3));
1116:       assertFalse(node0.equals((Object)node2));
1117:       assertFalse(node0.equals((Object)node1));
1118:       assertFalse(node4.equals((Object)node3));
1119:       assertFalse(node4.equals((Object)node1));
1120:       assertFalse(node4.equals((Object)node0));
1121:       assertFalse(node4.equals((Object)node2));
1122:       
1123:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
1124:       assertNotNull(node_SideEffectFlags0);
1125:       
1126:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
1127:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1128:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1129:       assertNotNull(node_SideEffectFlags1);
1130:       
1131:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
1132:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1133:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1134:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1135:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1136:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1137:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1138:       assertNotNull(node_SideEffectFlags2);
1139:       
1140:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
1141:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1142:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1143:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1144:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1145:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1146:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1147:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1148:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1149:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1150:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1151:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1152:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1153:       assertNotNull(node_SideEffectFlags3);
1154:       
1155:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
1156:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1157:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1158:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1159:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1160:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1161:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1162:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1163:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1164:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1165:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1166:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1167:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1168:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1169:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1170:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1171:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1172:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1173:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1174:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1175:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1176:       assertNotNull(node_SideEffectFlags4);
1177:       
1178:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
1179:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1180:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1181:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1182:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1183:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1184:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1185:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1186:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1187:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1188:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1189:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1190:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1191:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1192:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1193:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1194:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1195:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1196:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1197:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1198:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1199:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1200:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1201:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1202:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1203:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
1204:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
1205:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
1206:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
1207:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
1208:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
1209:       assertNotNull(node_SideEffectFlags5);
1210:       
1211:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setMutatesGlobalState();
1212:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
1213:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
1214:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
1215:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
1216:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
1217:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
1218:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1219:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1220:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1221:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1222:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1223:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1224:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1225:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1226:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1227:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1228:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1229:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1230:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1231:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1232:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1233:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1234:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
1235:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1236:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1237:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
1238:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1239:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1240:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1241:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1242:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1243:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1244:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1245:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1246:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
1247:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
1248:       assertNotNull(node_SideEffectFlags6);
1249:       
1250:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setReturnsTainted();
1251:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
1252:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
1253:       assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
1254:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
1255:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
1256:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
1257:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
1258:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
1259:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
1260:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
1261:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
1262:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
1263:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
1264:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
1265:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1266:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1267:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1268:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1269:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1270:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1271:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1272:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1273:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1274:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1275:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
1276:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1277:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1278:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1279:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1280:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1281:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1282:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1283:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
1284:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
1285:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1286:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1287:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
1288:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1289:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1290:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1291:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1292:       assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
1293:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1294:       assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
1295:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1296:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1297:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1298:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
1299:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
1300:       assertNotNull(node_SideEffectFlags7);
1301:       
1302:       Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags7.setMutatesArguments();
1303:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
1304:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
1305:       assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
1306:       assertSame(node_SideEffectFlags6, node_SideEffectFlags8);
1307:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
1308:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
1309:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
1310:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
1311:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
1312:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
1313:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
1314:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
1315:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
1316:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
1317:       assertSame(node_SideEffectFlags7, node_SideEffectFlags8);
1318:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
1319:       assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
1320:       assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
1321:       assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
1322:       assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
1323:       assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
1324:       assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
1325:       assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
1326:       assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
1327:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1328:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1329:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1330:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1331:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1332:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1333:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1334:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1335:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1336:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1337:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1338:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
1339:       assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
1340:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1341:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1342:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1343:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1344:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1345:       assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
1346:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1347:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1348:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
1349:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
1350:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1351:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1352:       assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
1353:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
1354:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1355:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1356:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1357:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1358:       assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
1359:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1360:       assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
1361:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1362:       assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
1363:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1364:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1365:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
1366:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
1367:       assertNotNull(node_SideEffectFlags8);
1368:       
1369:       Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags2.setMutatesGlobalState();
1370:       assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
1371:       assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
1372:       assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
1373:       assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
1374:       assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
1375:       assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
1376:       assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
1377:       assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
1378:       assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
1379:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1380:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1381:       assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
1382:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1383:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1384:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1385:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1386:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1387:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1388:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1389:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1390:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1391:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
1392:       assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
1393:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1394:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1395:       assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
1396:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1397:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1398:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1399:       assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
1400:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1401:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1402:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
1403:       assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
1404:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
1405:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1406:       assertNotNull(node_SideEffectFlags9);
1407:       
1408:       Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags0.setMutatesArguments();
1409:       assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
1410:       assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
1411:       assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
1412:       assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
1413:       assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
1414:       assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
1415:       assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
1416:       assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
1417:       assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
1418:       assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
1419:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1420:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1421:       assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
1422:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1423:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1424:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1425:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1426:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1427:       assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
1428:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1429:       assertNotNull(node_SideEffectFlags10);
1430:       
1431:       node_SideEffectFlags10.clearSideEffectFlags();
1432:       assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
1433:       assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
1434:       assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
1435:       assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
1436:       assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
1437:       assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
1438:       assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
1439:       assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
1440:       assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
1441:       assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
1442:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1443:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1444:       assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
1445:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1446:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1447:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1448:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1449:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1450:       assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
1451:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1452:       
1453:       Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags10.setMutatesGlobalState();
1454:       assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
1455:       assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
1456:       assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
1457:       assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
1458:       assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
1459:       assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
1460:       assertSame(node_SideEffectFlags10, node_SideEffectFlags11);
1461:       assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
1462:       assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
1463:       assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
1464:       assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
1465:       assertSame(node_SideEffectFlags11, node_SideEffectFlags3);
1466:       assertSame(node_SideEffectFlags11, node_SideEffectFlags6);
1467:       assertSame(node_SideEffectFlags11, node_SideEffectFlags2);
1468:       assertSame(node_SideEffectFlags11, node_SideEffectFlags5);
1469:       assertSame(node_SideEffectFlags11, node_SideEffectFlags4);
1470:       assertSame(node_SideEffectFlags11, node_SideEffectFlags8);
1471:       assertSame(node_SideEffectFlags11, node_SideEffectFlags0);
1472:       assertSame(node_SideEffectFlags11, node_SideEffectFlags9);
1473:       assertSame(node_SideEffectFlags11, node_SideEffectFlags1);
1474:       assertSame(node_SideEffectFlags11, node_SideEffectFlags10);
1475:       assertSame(node_SideEffectFlags11, node_SideEffectFlags7);
1476:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1477:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1478:       assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
1479:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1480:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1481:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1482:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1483:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1484:       assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
1485:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1486:       assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
1487:       assertNotNull(node_SideEffectFlags11);
1488:       
1489:       Node node5 = new Node(48, node1, node0);
1490:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1491:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1492:       assertEquals(43, Node.IS_CONSTANT_NAME);
1493:       assertEquals(56, Node.CHANGE_TIME);
1494:       assertEquals(36, Node.QUOTED_PROP);
1495:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1496:       assertEquals(37, Node.OPT_ARG_NAME);
1497:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1498:       assertEquals(12, Node.COLUMN_BITS);
1499:       assertEquals(4095, Node.COLUMN_MASK);
1500:       assertEquals(46, Node.IS_NAMESPACE);
1501:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1502:       assertEquals(32, Node.INCRDECR_PROP);
1503:       assertEquals(1, Node.DECR_FLAG);
1504:       assertEquals(57, Node.REFLECTED_OBJECT);
1505:       assertEquals(40, Node.ORIGINALNAME_PROP);
1506:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1507:       assertEquals(52, Node.LENGTH);
1508:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1509:       assertEquals(50, Node.FREE_CALL);
1510:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1511:       assertEquals(54, Node.SLASH_V);
1512:       assertEquals(48, Node.DIRECTIVES);
1513:       assertEquals(49, Node.DIRECT_EVAL);
1514:       assertEquals(55, Node.INFERRED_FUNCTION);
1515:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1516:       assertEquals(8, Node.FLAG_NO_THROWS);
1517:       assertEquals(2, Node.POST_FLAG);
1518:       assertEquals(30, Node.VAR_ARGS_NAME);
1519:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1520:       assertEquals(57, Node.LAST_PROP);
1521:       assertEquals(47, Node.IS_DISPATCHER);
1522:       assertEquals(39, Node.EMPTY_BLOCK);
1523:       assertEquals(29, Node.JSDOC_INFO_PROP);
1524:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1525:       assertEquals(53, Node.INPUT_ID);
1526:       assertEquals(57, Node.LAST_PROP);
1527:       assertEquals(30, Node.VAR_ARGS_NAME);
1528:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1529:       assertEquals(57, Node.REFLECTED_OBJECT);
1530:       assertEquals(54, Node.SLASH_V);
1531:       assertEquals(49, Node.DIRECT_EVAL);
1532:       assertEquals(40, Node.ORIGINALNAME_PROP);
1533:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1534:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1535:       assertEquals(12, Node.COLUMN_BITS);
1536:       assertEquals(46, Node.IS_NAMESPACE);
1537:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1538:       assertEquals(1, Node.DECR_FLAG);
1539:       assertEquals(32, Node.INCRDECR_PROP);
1540:       assertEquals(50, Node.FREE_CALL);
1541:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1542:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1543:       assertEquals(43, Node.IS_CONSTANT_NAME);
1544:       assertEquals(36, Node.QUOTED_PROP);
1545:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1546:       assertEquals(4095, Node.COLUMN_MASK);
1547:       assertEquals(2, Node.POST_FLAG);
1548:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1549:       assertEquals(8, Node.FLAG_NO_THROWS);
1550:       assertEquals(39, Node.EMPTY_BLOCK);
1551:       assertEquals(37, Node.OPT_ARG_NAME);
1552:       assertEquals(48, Node.DIRECTIVES);
1553:       assertEquals(56, Node.CHANGE_TIME);
1554:       assertEquals(47, Node.IS_DISPATCHER);
1555:       assertEquals(55, Node.INFERRED_FUNCTION);
1556:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1557:       assertEquals(52, Node.LENGTH);
1558:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1559:       assertEquals(29, Node.JSDOC_INFO_PROP);
1560:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1561:       assertEquals(53, Node.INPUT_ID);
1562:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1563:       assertEquals(50, Node.FREE_CALL);
1564:       assertEquals(40, Node.ORIGINALNAME_PROP);
1565:       assertEquals(8, Node.FLAG_NO_THROWS);
1566:       assertEquals(39, Node.EMPTY_BLOCK);
1567:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1568:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1569:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1570:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1571:       assertEquals(57, Node.LAST_PROP);
1572:       assertEquals(36, Node.QUOTED_PROP);
1573:       assertEquals(49, Node.DIRECT_EVAL);
1574:       assertEquals(4095, Node.COLUMN_MASK);
1575:       assertEquals(53, Node.INPUT_ID);
1576:       assertEquals(55, Node.INFERRED_FUNCTION);
1577:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1578:       assertEquals(52, Node.LENGTH);
1579:       assertEquals(48, Node.DIRECTIVES);
1580:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1581:       assertEquals(56, Node.CHANGE_TIME);
1582:       assertEquals(57, Node.REFLECTED_OBJECT);
1583:       assertEquals(47, Node.IS_DISPATCHER);
1584:       assertEquals(2, Node.POST_FLAG);
1585:       assertEquals(37, Node.OPT_ARG_NAME);
1586:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1587:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1588:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1589:       assertEquals(29, Node.JSDOC_INFO_PROP);
1590:       assertEquals(32, Node.INCRDECR_PROP);
1591:       assertEquals(12, Node.COLUMN_BITS);
1592:       assertEquals(30, Node.VAR_ARGS_NAME);
1593:       assertEquals(1, Node.DECR_FLAG);
1594:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1595:       assertEquals(43, Node.IS_CONSTANT_NAME);
1596:       assertEquals(46, Node.IS_NAMESPACE);
1597:       assertEquals(54, Node.SLASH_V);
1598:       assertEquals(0, nodeArray0.length);
1599:       assertNotNull(node5);
1600:       assertFalse(node0.equals((Object)node3));
1601:       assertFalse(node0.equals((Object)node4));
1602:       assertFalse(node0.equals((Object)node2));
1603:       assertFalse(node0.equals((Object)node1));
1604:       assertFalse(node1.equals((Object)node2));
1605:       assertFalse(node1.equals((Object)node4));
1606:       assertFalse(node1.equals((Object)node0));
1607:       assertFalse(node1.equals((Object)node3));
1608:       assertFalse(node5.equals((Object)node0));
1609:       assertFalse(node5.equals((Object)node1));
1610:       assertFalse(node5.equals((Object)node4));
1611:       assertFalse(node5.equals((Object)node2));
1612:       assertFalse(node5.equals((Object)node3));
1613:       
1614:       boolean boolean3 = node1.hasOneChild();
1615:       assertFalse(boolean3);
1616:       assertNotSame(node1, node5);
1617:       assertNotSame(node1, node4);
1618:       assertNotSame(node1, node0);
1619:       assertEquals(57, Node.LAST_PROP);
1620:       assertEquals(30, Node.VAR_ARGS_NAME);
1621:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1622:       assertEquals(57, Node.REFLECTED_OBJECT);
1623:       assertEquals(54, Node.SLASH_V);
1624:       assertEquals(49, Node.DIRECT_EVAL);
1625:       assertEquals(40, Node.ORIGINALNAME_PROP);
1626:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1627:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1628:       assertEquals(12, Node.COLUMN_BITS);
1629:       assertEquals(46, Node.IS_NAMESPACE);
1630:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1631:       assertEquals(1, Node.DECR_FLAG);
1632:       assertEquals(32, Node.INCRDECR_PROP);
1633:       assertEquals(50, Node.FREE_CALL);
1634:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1635:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1636:       assertEquals(43, Node.IS_CONSTANT_NAME);
1637:       assertEquals(36, Node.QUOTED_PROP);
1638:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1639:       assertEquals(4095, Node.COLUMN_MASK);
1640:       assertEquals(2, Node.POST_FLAG);
1641:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1642:       assertEquals(8, Node.FLAG_NO_THROWS);
1643:       assertEquals(39, Node.EMPTY_BLOCK);
1644:       assertEquals(37, Node.OPT_ARG_NAME);
1645:       assertEquals(48, Node.DIRECTIVES);
1646:       assertEquals(56, Node.CHANGE_TIME);
1647:       assertEquals(47, Node.IS_DISPATCHER);
1648:       assertEquals(55, Node.INFERRED_FUNCTION);
1649:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1650:       assertEquals(52, Node.LENGTH);
1651:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1652:       assertEquals(29, Node.JSDOC_INFO_PROP);
1653:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1654:       assertEquals(53, Node.INPUT_ID);
1655:       assertFalse(node1.equals((Object)node2));
1656:       assertFalse(node1.equals((Object)node5));
1657:       assertFalse(node1.equals((Object)node4));
1658:       assertFalse(node1.equals((Object)node0));
1659:       assertFalse(node1.equals((Object)node3));
1660:       assertTrue(boolean3 == boolean0);
1661:       assertTrue(boolean3 == boolean2);
1662:       assertTrue(boolean3 == boolean1);
1663:       
1664:       boolean boolean4 = node5.isEquivalentToShallow(node0);
1665:       assertFalse(boolean4);
1666:       assertNotSame(node0, node4);
1667:       assertNotSame(node0, node5);
1668:       assertNotSame(node0, node1);
1669:       assertNotSame(node1, node5);
1670:       assertNotSame(node1, node4);
1671:       assertNotSame(node1, node0);
1672:       assertNotSame(node5, node0);
1673:       assertNotSame(node5, node1);
1674:       assertNotSame(node5, node4);
1675:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1676:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1677:       assertEquals(43, Node.IS_CONSTANT_NAME);
1678:       assertEquals(56, Node.CHANGE_TIME);
1679:       assertEquals(36, Node.QUOTED_PROP);
1680:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1681:       assertEquals(37, Node.OPT_ARG_NAME);
1682:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1683:       assertEquals(12, Node.COLUMN_BITS);
1684:       assertEquals(4095, Node.COLUMN_MASK);
1685:       assertEquals(46, Node.IS_NAMESPACE);
1686:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1687:       assertEquals(32, Node.INCRDECR_PROP);
1688:       assertEquals(1, Node.DECR_FLAG);
1689:       assertEquals(57, Node.REFLECTED_OBJECT);
1690:       assertEquals(40, Node.ORIGINALNAME_PROP);
1691:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1692:       assertEquals(52, Node.LENGTH);
1693:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1694:       assertEquals(50, Node.FREE_CALL);
1695:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1696:       assertEquals(54, Node.SLASH_V);
1697:       assertEquals(48, Node.DIRECTIVES);
1698:       assertEquals(49, Node.DIRECT_EVAL);
1699:       assertEquals(55, Node.INFERRED_FUNCTION);
1700:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1701:       assertEquals(8, Node.FLAG_NO_THROWS);
1702:       assertEquals(2, Node.POST_FLAG);
1703:       assertEquals(30, Node.VAR_ARGS_NAME);
1704:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1705:       assertEquals(57, Node.LAST_PROP);
1706:       assertEquals(47, Node.IS_DISPATCHER);
1707:       assertEquals(39, Node.EMPTY_BLOCK);
1708:       assertEquals(29, Node.JSDOC_INFO_PROP);
1709:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1710:       assertEquals(53, Node.INPUT_ID);
1711:       assertEquals(57, Node.LAST_PROP);
1712:       assertEquals(30, Node.VAR_ARGS_NAME);
1713:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1714:       assertEquals(57, Node.REFLECTED_OBJECT);
1715:       assertEquals(54, Node.SLASH_V);
1716:       assertEquals(49, Node.DIRECT_EVAL);
1717:       assertEquals(40, Node.ORIGINALNAME_PROP);
1718:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1719:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1720:       assertEquals(12, Node.COLUMN_BITS);
1721:       assertEquals(46, Node.IS_NAMESPACE);
1722:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1723:       assertEquals(1, Node.DECR_FLAG);
1724:       assertEquals(32, Node.INCRDECR_PROP);
1725:       assertEquals(50, Node.FREE_CALL);
1726:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1727:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1728:       assertEquals(43, Node.IS_CONSTANT_NAME);
1729:       assertEquals(36, Node.QUOTED_PROP);
1730:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1731:       assertEquals(4095, Node.COLUMN_MASK);
1732:       assertEquals(2, Node.POST_FLAG);
1733:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1734:       assertEquals(8, Node.FLAG_NO_THROWS);
1735:       assertEquals(39, Node.EMPTY_BLOCK);
1736:       assertEquals(37, Node.OPT_ARG_NAME);
1737:       assertEquals(48, Node.DIRECTIVES);
1738:       assertEquals(56, Node.CHANGE_TIME);
1739:       assertEquals(47, Node.IS_DISPATCHER);
1740:       assertEquals(55, Node.INFERRED_FUNCTION);
1741:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1742:       assertEquals(52, Node.LENGTH);
1743:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1744:       assertEquals(29, Node.JSDOC_INFO_PROP);
1745:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1746:       assertEquals(53, Node.INPUT_ID);
1747:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1748:       assertEquals(50, Node.FREE_CALL);
1749:       assertEquals(40, Node.ORIGINALNAME_PROP);
1750:       assertEquals(8, Node.FLAG_NO_THROWS);
1751:       assertEquals(39, Node.EMPTY_BLOCK);
1752:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1753:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1754:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1755:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1756:       assertEquals(57, Node.LAST_PROP);
1757:       assertEquals(36, Node.QUOTED_PROP);
1758:       assertEquals(49, Node.DIRECT_EVAL);
1759:       assertEquals(4095, Node.COLUMN_MASK);
1760:       assertEquals(53, Node.INPUT_ID);
1761:       assertEquals(55, Node.INFERRED_FUNCTION);
1762:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1763:       assertEquals(52, Node.LENGTH);
1764:       assertEquals(48, Node.DIRECTIVES);
1765:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1766:       assertEquals(56, Node.CHANGE_TIME);
1767:       assertEquals(57, Node.REFLECTED_OBJECT);
1768:       assertEquals(47, Node.IS_DISPATCHER);
1769:       assertEquals(2, Node.POST_FLAG);
1770:       assertEquals(37, Node.OPT_ARG_NAME);
1771:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1772:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1773:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1774:       assertEquals(29, Node.JSDOC_INFO_PROP);
1775:       assertEquals(32, Node.INCRDECR_PROP);
1776:       assertEquals(12, Node.COLUMN_BITS);
1777:       assertEquals(30, Node.VAR_ARGS_NAME);
1778:       assertEquals(1, Node.DECR_FLAG);
1779:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1780:       assertEquals(43, Node.IS_CONSTANT_NAME);
1781:       assertEquals(46, Node.IS_NAMESPACE);
1782:       assertEquals(54, Node.SLASH_V);
1783:       assertEquals(0, nodeArray0.length);
1784:       assertFalse(node0.equals((Object)node3));
1785:       assertFalse(node0.equals((Object)node4));
1786:       assertFalse(node0.equals((Object)node2));
1787:       assertFalse(node0.equals((Object)node5));
1788:       assertFalse(node0.equals((Object)node1));
1789:       assertFalse(node1.equals((Object)node2));
1790:       assertFalse(node1.equals((Object)node5));
1791:       assertFalse(node1.equals((Object)node4));
1792:       assertFalse(node1.equals((Object)node0));
1793:       assertFalse(node1.equals((Object)node3));
1794:       assertFalse(node5.equals((Object)node0));
1795:       assertFalse(node5.equals((Object)node1));
1796:       assertFalse(node5.equals((Object)node4));
1797:       assertFalse(node5.equals((Object)node2));
1798:       assertFalse(node5.equals((Object)node3));
1799:       assertTrue(boolean4 == boolean3);
1800:       assertTrue(boolean4 == boolean1);
1801:       assertTrue(boolean4 == boolean0);
1802:       assertTrue(boolean4 == boolean2);
1803:       
1804:       boolean boolean5 = node4.isName();
1805:       assertFalse(boolean5);
1806:       assertNotSame(node0, node4);
1807:       assertNotSame(node0, node5);
1808:       assertNotSame(node0, node1);
1809:       assertNotSame(node4, node1);
1810:       assertNotSame(node4, node0);
1811:       assertNotSame(node4, node5);
1812:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1813:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1814:       assertEquals(43, Node.IS_CONSTANT_NAME);
1815:       assertEquals(56, Node.CHANGE_TIME);
1816:       assertEquals(36, Node.QUOTED_PROP);
1817:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1818:       assertEquals(37, Node.OPT_ARG_NAME);
1819:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1820:       assertEquals(12, Node.COLUMN_BITS);
1821:       assertEquals(4095, Node.COLUMN_MASK);
1822:       assertEquals(46, Node.IS_NAMESPACE);
1823:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1824:       assertEquals(32, Node.INCRDECR_PROP);
1825:       assertEquals(1, Node.DECR_FLAG);
1826:       assertEquals(57, Node.REFLECTED_OBJECT);
1827:       assertEquals(40, Node.ORIGINALNAME_PROP);
1828:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1829:       assertEquals(52, Node.LENGTH);
1830:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1831:       assertEquals(50, Node.FREE_CALL);
1832:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1833:       assertEquals(54, Node.SLASH_V);
1834:       assertEquals(48, Node.DIRECTIVES);
1835:       assertEquals(49, Node.DIRECT_EVAL);
1836:       assertEquals(55, Node.INFERRED_FUNCTION);
1837:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1838:       assertEquals(8, Node.FLAG_NO_THROWS);
1839:       assertEquals(2, Node.POST_FLAG);
1840:       assertEquals(30, Node.VAR_ARGS_NAME);
1841:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1842:       assertEquals(57, Node.LAST_PROP);
1843:       assertEquals(47, Node.IS_DISPATCHER);
1844:       assertEquals(39, Node.EMPTY_BLOCK);
1845:       assertEquals(29, Node.JSDOC_INFO_PROP);
1846:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1847:       assertEquals(53, Node.INPUT_ID);
1848:       assertEquals(32, Node.INCRDECR_PROP);
1849:       assertEquals(46, Node.IS_NAMESPACE);
1850:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1851:       assertEquals(12, Node.COLUMN_BITS);
1852:       assertEquals(37, Node.OPT_ARG_NAME);
1853:       assertEquals(1, Node.DECR_FLAG);
1854:       assertEquals(49, Node.DIRECT_EVAL);
1855:       assertEquals(56, Node.CHANGE_TIME);
1856:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1857:       assertEquals(29, Node.JSDOC_INFO_PROP);
1858:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1859:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1860:       assertEquals(52, Node.LENGTH);
1861:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1862:       assertEquals(57, Node.REFLECTED_OBJECT);
1863:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1864:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1865:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1866:       assertEquals(4095, Node.COLUMN_MASK);
1867:       assertEquals(48, Node.DIRECTIVES);
1868:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1869:       assertEquals(43, Node.IS_CONSTANT_NAME);
1870:       assertEquals(36, Node.QUOTED_PROP);
1871:       assertEquals(39, Node.EMPTY_BLOCK);
1872:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1873:       assertEquals(55, Node.INFERRED_FUNCTION);
1874:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1875:       assertEquals(50, Node.FREE_CALL);
1876:       assertEquals(8, Node.FLAG_NO_THROWS);
1877:       assertEquals(53, Node.INPUT_ID);
1878:       assertEquals(54, Node.SLASH_V);
1879:       assertEquals(57, Node.LAST_PROP);
1880:       assertEquals(30, Node.VAR_ARGS_NAME);
1881:       assertEquals(47, Node.IS_DISPATCHER);
1882:       assertEquals(40, Node.ORIGINALNAME_PROP);
1883:       assertEquals(2, Node.POST_FLAG);
1884:       assertEquals(0, nodeArray0.length);
1885:       assertFalse(node0.equals((Object)node3));
1886:       assertFalse(node0.equals((Object)node4));
1887:       assertFalse(node0.equals((Object)node2));
1888:       assertFalse(node0.equals((Object)node5));
1889:       assertFalse(node0.equals((Object)node1));
1890:       assertFalse(node4.equals((Object)node3));
1891:       assertFalse(node4.equals((Object)node1));
1892:       assertFalse(node4.equals((Object)node0));
1893:       assertFalse(node4.equals((Object)node2));
1894:       assertFalse(node4.equals((Object)node5));
1895:       assertTrue(boolean5 == boolean4);
1896:       assertTrue(boolean5 == boolean3);
1897:       assertTrue(boolean5 == boolean1);
1898:       assertTrue(boolean5 == boolean0);
1899:       assertTrue(boolean5 == boolean2);
1900:       
1901:       boolean boolean6 = node3.isDelProp();
1902:       assertFalse(boolean6);
1903:       assertNotSame(node1, node5);
1904:       assertNotSame(node1, node4);
1905:       assertNotSame(node1, node0);
1906:       assertSame(node2, node3);
1907:       assertSame(node3, node2);
1908:       assertEquals(57, Node.LAST_PROP);
1909:       assertEquals(30, Node.VAR_ARGS_NAME);
1910:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1911:       assertEquals(57, Node.REFLECTED_OBJECT);
1912:       assertEquals(54, Node.SLASH_V);
1913:       assertEquals(49, Node.DIRECT_EVAL);
1914:       assertEquals(40, Node.ORIGINALNAME_PROP);
1915:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1916:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1917:       assertEquals(12, Node.COLUMN_BITS);
1918:       assertEquals(46, Node.IS_NAMESPACE);
1919:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1920:       assertEquals(1, Node.DECR_FLAG);
1921:       assertEquals(32, Node.INCRDECR_PROP);
1922:       assertEquals(50, Node.FREE_CALL);
1923:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1924:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1925:       assertEquals(43, Node.IS_CONSTANT_NAME);
1926:       assertEquals(36, Node.QUOTED_PROP);
1927:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1928:       assertEquals(4095, Node.COLUMN_MASK);
1929:       assertEquals(2, Node.POST_FLAG);
1930:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1931:       assertEquals(8, Node.FLAG_NO_THROWS);
1932:       assertEquals(39, Node.EMPTY_BLOCK);
1933:       assertEquals(37, Node.OPT_ARG_NAME);
1934:       assertEquals(48, Node.DIRECTIVES);
1935:       assertEquals(56, Node.CHANGE_TIME);
1936:       assertEquals(47, Node.IS_DISPATCHER);
1937:       assertEquals(55, Node.INFERRED_FUNCTION);
1938:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1939:       assertEquals(52, Node.LENGTH);
1940:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1941:       assertEquals(29, Node.JSDOC_INFO_PROP);
1942:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1943:       assertEquals(53, Node.INPUT_ID);
1944:       assertEquals(29, Node.JSDOC_INFO_PROP);
1945:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1946:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1947:       assertEquals(47, Node.IS_DISPATCHER);
1948:       assertEquals(2, Node.POST_FLAG);
1949:       assertEquals(53, Node.INPUT_ID);
1950:       assertEquals(32, Node.INCRDECR_PROP);
1951:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1952:       assertEquals(46, Node.IS_NAMESPACE);
1953:       assertEquals(30, Node.VAR_ARGS_NAME);
1954:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1955:       assertEquals(54, Node.SLASH_V);
1956:       assertEquals(43, Node.IS_CONSTANT_NAME);
1957:       assertEquals(40, Node.ORIGINALNAME_PROP);
1958:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1959:       assertEquals(57, Node.REFLECTED_OBJECT);
1960:       assertEquals(50, Node.FREE_CALL);
1961:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1962:       assertEquals(8, Node.FLAG_NO_THROWS);
1963:       assertEquals(39, Node.EMPTY_BLOCK);
1964:       assertEquals(52, Node.LENGTH);
1965:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1966:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1967:       assertEquals(57, Node.LAST_PROP);
1968:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1969:       assertEquals(1, Node.DECR_FLAG);
1970:       assertEquals(55, Node.INFERRED_FUNCTION);
1971:       assertEquals(4095, Node.COLUMN_MASK);
1972:       assertEquals(12, Node.COLUMN_BITS);
1973:       assertEquals(36, Node.QUOTED_PROP);
1974:       assertEquals(48, Node.DIRECTIVES);
1975:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1976:       assertEquals(56, Node.CHANGE_TIME);
1977:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1978:       assertEquals(49, Node.DIRECT_EVAL);
1979:       assertEquals(37, Node.OPT_ARG_NAME);
1980:       assertEquals(48, Node.DIRECTIVES);
1981:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1982:       assertEquals(40, Node.ORIGINALNAME_PROP);
1983:       assertEquals(4095, Node.COLUMN_MASK);
1984:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1985:       assertEquals(43, Node.IS_CONSTANT_NAME);
1986:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1987:       assertEquals(54, Node.SLASH_V);
1988:       assertEquals(1, Node.DECR_FLAG);
1989:       assertEquals(50, Node.FREE_CALL);
1990:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1991:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1992:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1993:       assertEquals(32, Node.INCRDECR_PROP);
1994:       assertEquals(56, Node.CHANGE_TIME);
1995:       assertEquals(12, Node.COLUMN_BITS);
1996:       assertEquals(46, Node.IS_NAMESPACE);
1997:       assertEquals(47, Node.IS_DISPATCHER);
1998:       assertEquals(2, Node.POST_FLAG);
1999:       assertEquals(30, Node.VAR_ARGS_NAME);
2000:       assertEquals(49, Node.DIRECT_EVAL);
2001:       assertEquals(37, Node.OPT_ARG_NAME);
2002:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2003:       assertEquals(52, Node.LENGTH);
2004:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2005:       assertEquals(57, Node.REFLECTED_OBJECT);
2006:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2007:       assertEquals(57, Node.LAST_PROP);
2008:       assertEquals(36, Node.QUOTED_PROP);
2009:       assertEquals(55, Node.INFERRED_FUNCTION);
2010:       assertEquals(8, Node.FLAG_NO_THROWS);
2011:       assertEquals(39, Node.EMPTY_BLOCK);
2012:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2013:       assertEquals(53, Node.INPUT_ID);
2014:       assertEquals(29, Node.JSDOC_INFO_PROP);
2015:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2016:       assertFalse(node1.equals((Object)node2));
2017:       assertFalse(node1.equals((Object)node5));
2018:       assertFalse(node1.equals((Object)node4));
2019:       assertFalse(node1.equals((Object)node0));
2020:       assertFalse(node1.equals((Object)node3));
2021:       assertFalse(node2.equals((Object)node0));
2022:       assertFalse(node2.equals((Object)node4));
2023:       assertFalse(node2.equals((Object)node5));
2024:       assertFalse(node2.equals((Object)node1));
2025:       assertFalse(node3.equals((Object)node5));
2026:       assertFalse(node3.equals((Object)node0));
2027:       assertFalse(node3.equals((Object)node1));
2028:       assertFalse(node3.equals((Object)node4));
2029:       assertTrue(boolean6 == boolean0);
2030:       assertTrue(boolean6 == boolean2);
2031:       assertTrue(boolean6 == boolean4);
2032:       assertTrue(boolean6 == boolean5);
2033:       assertTrue(boolean6 == boolean1);
2034:       assertTrue(boolean6 == boolean3);
2035:       
2036:       node2.putIntProp(29, 4095);
2037:       assertSame(node2, node3);
2038:       assertEquals(29, Node.JSDOC_INFO_PROP);
2039:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2040:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2041:       assertEquals(47, Node.IS_DISPATCHER);
2042:       assertEquals(2, Node.POST_FLAG);
2043:       assertEquals(53, Node.INPUT_ID);
2044:       assertEquals(32, Node.INCRDECR_PROP);
2045:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2046:       assertEquals(46, Node.IS_NAMESPACE);
2047:       assertEquals(30, Node.VAR_ARGS_NAME);
2048:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2049:       assertEquals(54, Node.SLASH_V);
2050:       assertEquals(43, Node.IS_CONSTANT_NAME);
2051:       assertEquals(40, Node.ORIGINALNAME_PROP);
2052:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2053:       assertEquals(57, Node.REFLECTED_OBJECT);
2054:       assertEquals(50, Node.FREE_CALL);
2055:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2056:       assertEquals(8, Node.FLAG_NO_THROWS);
2057:       assertEquals(39, Node.EMPTY_BLOCK);
2058:       assertEquals(52, Node.LENGTH);
2059:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2060:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2061:       assertEquals(57, Node.LAST_PROP);
2062:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2063:       assertEquals(1, Node.DECR_FLAG);
2064:       assertEquals(55, Node.INFERRED_FUNCTION);
2065:       assertEquals(4095, Node.COLUMN_MASK);
2066:       assertEquals(12, Node.COLUMN_BITS);
2067:       assertEquals(36, Node.QUOTED_PROP);
2068:       assertEquals(48, Node.DIRECTIVES);
2069:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2070:       assertEquals(56, Node.CHANGE_TIME);
2071:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2072:       assertEquals(49, Node.DIRECT_EVAL);
2073:       assertEquals(37, Node.OPT_ARG_NAME);
2074:       assertFalse(node2.equals((Object)node0));
2075:       assertFalse(node2.equals((Object)node4));
2076:       assertFalse(node2.equals((Object)node5));
2077:       assertFalse(node2.equals((Object)node1));
2078:       
2079:       boolean boolean7 = node3.isOr();
2080:       assertFalse(boolean7);
2081:       assertNotSame(node1, node5);
2082:       assertNotSame(node1, node4);
2083:       assertNotSame(node1, node0);
2084:       assertSame(node2, node3);
2085:       assertSame(node3, node2);
2086:       assertEquals(57, Node.LAST_PROP);
2087:       assertEquals(30, Node.VAR_ARGS_NAME);
2088:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2089:       assertEquals(57, Node.REFLECTED_OBJECT);
2090:       assertEquals(54, Node.SLASH_V);
2091:       assertEquals(49, Node.DIRECT_EVAL);
2092:       assertEquals(40, Node.ORIGINALNAME_PROP);
2093:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2094:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2095:       assertEquals(12, Node.COLUMN_BITS);
2096:       assertEquals(46, Node.IS_NAMESPACE);
2097:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2098:       assertEquals(1, Node.DECR_FLAG);
2099:       assertEquals(32, Node.INCRDECR_PROP);
2100:       assertEquals(50, Node.FREE_CALL);
2101:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2102:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2103:       assertEquals(43, Node.IS_CONSTANT_NAME);
2104:       assertEquals(36, Node.QUOTED_PROP);
2105:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2106:       assertEquals(4095, Node.COLUMN_MASK);
2107:       assertEquals(2, Node.POST_FLAG);
2108:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2109:       assertEquals(8, Node.FLAG_NO_THROWS);
2110:       assertEquals(39, Node.EMPTY_BLOCK);
2111:       assertEquals(37, Node.OPT_ARG_NAME);
2112:       assertEquals(48, Node.DIRECTIVES);
2113:       assertEquals(56, Node.CHANGE_TIME);
2114:       assertEquals(47, Node.IS_DISPATCHER);
2115:       assertEquals(55, Node.INFERRED_FUNCTION);
2116:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2117:       assertEquals(52, Node.LENGTH);
2118:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2119:       assertEquals(29, Node.JSDOC_INFO_PROP);
2120:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2121:       assertEquals(53, Node.INPUT_ID);
2122:       assertEquals(29, Node.JSDOC_INFO_PROP);
2123:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2124:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2125:       assertEquals(47, Node.IS_DISPATCHER);
2126:       assertEquals(2, Node.POST_FLAG);
2127:       assertEquals(53, Node.INPUT_ID);
2128:       assertEquals(32, Node.INCRDECR_PROP);
2129:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2130:       assertEquals(46, Node.IS_NAMESPACE);
2131:       assertEquals(30, Node.VAR_ARGS_NAME);
2132:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2133:       assertEquals(54, Node.SLASH_V);
2134:       assertEquals(43, Node.IS_CONSTANT_NAME);
2135:       assertEquals(40, Node.ORIGINALNAME_PROP);
2136:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2137:       assertEquals(57, Node.REFLECTED_OBJECT);
2138:       assertEquals(50, Node.FREE_CALL);
2139:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2140:       assertEquals(8, Node.FLAG_NO_THROWS);
2141:       assertEquals(39, Node.EMPTY_BLOCK);
2142:       assertEquals(52, Node.LENGTH);
2143:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2144:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2145:       assertEquals(57, Node.LAST_PROP);
2146:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2147:       assertEquals(1, Node.DECR_FLAG);
2148:       assertEquals(55, Node.INFERRED_FUNCTION);
2149:       assertEquals(4095, Node.COLUMN_MASK);
2150:       assertEquals(12, Node.COLUMN_BITS);
2151:       assertEquals(36, Node.QUOTED_PROP);
2152:       assertEquals(48, Node.DIRECTIVES);
2153:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2154:       assertEquals(56, Node.CHANGE_TIME);
2155:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2156:       assertEquals(49, Node.DIRECT_EVAL);
2157:       assertEquals(37, Node.OPT_ARG_NAME);
2158:       assertEquals(48, Node.DIRECTIVES);
2159:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2160:       assertEquals(40, Node.ORIGINALNAME_PROP);
2161:       assertEquals(4095, Node.COLUMN_MASK);
2162:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2163:       assertEquals(43, Node.IS_CONSTANT_NAME);
2164:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2165:       assertEquals(54, Node.SLASH_V);
2166:       assertEquals(1, Node.DECR_FLAG);
2167:       assertEquals(50, Node.FREE_CALL);
2168:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2169:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2170:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2171:       assertEquals(32, Node.INCRDECR_PROP);
2172:       assertEquals(56, Node.CHANGE_TIME);
2173:       assertEquals(12, Node.COLUMN_BITS);
2174:       assertEquals(46, Node.IS_NAMESPACE);
2175:       assertEquals(47, Node.IS_DISPATCHER);
2176:       assertEquals(2, Node.POST_FLAG);
2177:       assertEquals(30, Node.VAR_ARGS_NAME);
2178:       assertEquals(49, Node.DIRECT_EVAL);
2179:       assertEquals(37, Node.OPT_ARG_NAME);
2180:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2181:       assertEquals(52, Node.LENGTH);
2182:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2183:       assertEquals(57, Node.REFLECTED_OBJECT);
2184:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2185:       assertEquals(57, Node.LAST_PROP);
2186:       assertEquals(36, Node.QUOTED_PROP);
2187:       assertEquals(55, Node.INFERRED_FUNCTION);
2188:       assertEquals(8, Node.FLAG_NO_THROWS);
2189:       assertEquals(39, Node.EMPTY_BLOCK);
2190:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2191:       assertEquals(53, Node.INPUT_ID);
2192:       assertEquals(29, Node.JSDOC_INFO_PROP);
2193:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2194:       assertFalse(node1.equals((Object)node2));
2195:       assertFalse(node1.equals((Object)node5));
2196:       assertFalse(node1.equals((Object)node4));
2197:       assertFalse(node1.equals((Object)node0));
2198:       assertFalse(node1.equals((Object)node3));
2199:       assertFalse(node2.equals((Object)node0));
2200:       assertFalse(node2.equals((Object)node4));
2201:       assertFalse(node2.equals((Object)node5));
2202:       assertFalse(node2.equals((Object)node1));
2203:       assertFalse(node3.equals((Object)node5));
2204:       assertFalse(node3.equals((Object)node0));
2205:       assertFalse(node3.equals((Object)node1));
2206:       assertFalse(node3.equals((Object)node4));
2207:       assertTrue(boolean7 == boolean3);
2208:       assertTrue(boolean7 == boolean4);
2209:       assertTrue(boolean7 == boolean1);
2210:       assertTrue(boolean7 == boolean2);
2211:       assertTrue(boolean7 == boolean6);
2212:       assertTrue(boolean7 == boolean5);
2213:       assertTrue(boolean7 == boolean0);
2214:       
2215:       Node node6 = new Node(31, node2, (-792), 101);
2216:       assertEquals(29, Node.JSDOC_INFO_PROP);
2217:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2218:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2219:       assertEquals(47, Node.IS_DISPATCHER);
2220:       assertEquals(2, Node.POST_FLAG);
2221:       assertEquals(53, Node.INPUT_ID);
2222:       assertEquals(32, Node.INCRDECR_PROP);
2223:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2224:       assertEquals(46, Node.IS_NAMESPACE);
2225:       assertEquals(30, Node.VAR_ARGS_NAME);
2226:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2227:       assertEquals(54, Node.SLASH_V);
2228:       assertEquals(43, Node.IS_CONSTANT_NAME);
2229:       assertEquals(40, Node.ORIGINALNAME_PROP);
2230:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2231:       assertEquals(57, Node.REFLECTED_OBJECT);
2232:       assertEquals(50, Node.FREE_CALL);
2233:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2234:       assertEquals(8, Node.FLAG_NO_THROWS);
2235:       assertEquals(39, Node.EMPTY_BLOCK);
2236:       assertEquals(52, Node.LENGTH);
2237:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2238:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2239:       assertEquals(57, Node.LAST_PROP);
2240:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2241:       assertEquals(1, Node.DECR_FLAG);
2242:       assertEquals(55, Node.INFERRED_FUNCTION);
2243:       assertEquals(4095, Node.COLUMN_MASK);
2244:       assertEquals(12, Node.COLUMN_BITS);
2245:       assertEquals(36, Node.QUOTED_PROP);
2246:       assertEquals(48, Node.DIRECTIVES);
2247:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2248:       assertEquals(56, Node.CHANGE_TIME);
2249:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2250:       assertEquals(49, Node.DIRECT_EVAL);
2251:       assertEquals(37, Node.OPT_ARG_NAME);
2252:       assertEquals(39, Node.EMPTY_BLOCK);
2253:       assertEquals(4095, Node.COLUMN_MASK);
2254:       assertEquals(55, Node.INFERRED_FUNCTION);
2255:       assertEquals(8, Node.FLAG_NO_THROWS);
2256:       assertEquals(50, Node.FREE_CALL);
2257:       assertEquals(40, Node.ORIGINALNAME_PROP);
2258:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2259:       assertEquals(43, Node.IS_CONSTANT_NAME);
2260:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2261:       assertEquals(48, Node.DIRECTIVES);
2262:       assertEquals(53, Node.INPUT_ID);
2263:       assertEquals(57, Node.REFLECTED_OBJECT);
2264:       assertEquals(36, Node.QUOTED_PROP);
2265:       assertEquals(52, Node.LENGTH);
2266:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2267:       assertEquals(29, Node.JSDOC_INFO_PROP);
2268:       assertEquals(30, Node.VAR_ARGS_NAME);
2269:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2270:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2271:       assertEquals(47, Node.IS_DISPATCHER);
2272:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2273:       assertEquals(57, Node.LAST_PROP);
2274:       assertEquals(37, Node.OPT_ARG_NAME);
2275:       assertEquals(46, Node.IS_NAMESPACE);
2276:       assertEquals(2, Node.POST_FLAG);
2277:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2278:       assertEquals(49, Node.DIRECT_EVAL);
2279:       assertEquals(56, Node.CHANGE_TIME);
2280:       assertEquals(54, Node.SLASH_V);
2281:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2282:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2283:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2284:       assertEquals(1, Node.DECR_FLAG);
2285:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2286:       assertEquals(12, Node.COLUMN_BITS);
2287:       assertEquals(32, Node.INCRDECR_PROP);
2288:       assertNotNull(node6);
2289:       assertFalse(node2.equals((Object)node0));
2290:       assertFalse(node2.equals((Object)node4));
2291:       assertFalse(node2.equals((Object)node5));
2292:       assertFalse(node2.equals((Object)node1));
2293:       assertFalse(node6.equals((Object)node5));
2294:       assertFalse(node6.equals((Object)node4));
2295:       assertFalse(node6.equals((Object)node1));
2296:       assertFalse(node6.equals((Object)node3));
2297:       assertFalse(node6.equals((Object)node2));
2298:       assertFalse(node6.equals((Object)node0));
2299:       
2300:       int int0 = node6.getSourcePosition();
2301:       assertEquals((-1), int0);
2302:       assertSame(node2, node3);
2303:       assertNotSame(node6, node5);
2304:       assertNotSame(node6, node4);
2305:       assertNotSame(node6, node1);
2306:       assertNotSame(node6, node0);
2307:       assertEquals(29, Node.JSDOC_INFO_PROP);
2308:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2309:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2310:       assertEquals(47, Node.IS_DISPATCHER);
2311:       assertEquals(2, Node.POST_FLAG);
2312:       assertEquals(53, Node.INPUT_ID);
2313:       assertEquals(32, Node.INCRDECR_PROP);
2314:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2315:       assertEquals(46, Node.IS_NAMESPACE);
2316:       assertEquals(30, Node.VAR_ARGS_NAME);
2317:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2318:       assertEquals(54, Node.SLASH_V);
2319:       assertEquals(43, Node.IS_CONSTANT_NAME);
2320:       assertEquals(40, Node.ORIGINALNAME_PROP);
2321:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2322:       assertEquals(57, Node.REFLECTED_OBJECT);
2323:       assertEquals(50, Node.FREE_CALL);
2324:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2325:       assertEquals(8, Node.FLAG_NO_THROWS);
2326:       assertEquals(39, Node.EMPTY_BLOCK);
2327:       assertEquals(52, Node.LENGTH);
2328:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2329:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2330:       assertEquals(57, Node.LAST_PROP);
2331:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2332:       assertEquals(1, Node.DECR_FLAG);
2333:       assertEquals(55, Node.INFERRED_FUNCTION);
2334:       assertEquals(4095, Node.COLUMN_MASK);
2335:       assertEquals(12, Node.COLUMN_BITS);
2336:       assertEquals(36, Node.QUOTED_PROP);
2337:       assertEquals(48, Node.DIRECTIVES);
2338:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2339:       assertEquals(56, Node.CHANGE_TIME);
2340:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2341:       assertEquals(49, Node.DIRECT_EVAL);
2342:       assertEquals(37, Node.OPT_ARG_NAME);
2343:       assertEquals(39, Node.EMPTY_BLOCK);
2344:       assertEquals(4095, Node.COLUMN_MASK);
2345:       assertEquals(55, Node.INFERRED_FUNCTION);
2346:       assertEquals(8, Node.FLAG_NO_THROWS);
2347:       assertEquals(50, Node.FREE_CALL);
2348:       assertEquals(40, Node.ORIGINALNAME_PROP);
2349:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2350:       assertEquals(43, Node.IS_CONSTANT_NAME);
2351:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2352:       assertEquals(48, Node.DIRECTIVES);
2353:       assertEquals(53, Node.INPUT_ID);
2354:       assertEquals(57, Node.REFLECTED_OBJECT);
2355:       assertEquals(36, Node.QUOTED_PROP);
2356:       assertEquals(52, Node.LENGTH);
2357:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2358:       assertEquals(29, Node.JSDOC_INFO_PROP);
2359:       assertEquals(30, Node.VAR_ARGS_NAME);
2360:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2361:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2362:       assertEquals(47, Node.IS_DISPATCHER);
2363:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2364:       assertEquals(57, Node.LAST_PROP);
2365:       assertEquals(37, Node.OPT_ARG_NAME);
2366:       assertEquals(46, Node.IS_NAMESPACE);
2367:       assertEquals(2, Node.POST_FLAG);
2368:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2369:       assertEquals(49, Node.DIRECT_EVAL);
2370:       assertEquals(56, Node.CHANGE_TIME);
2371:       assertEquals(54, Node.SLASH_V);
2372:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2373:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2374:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2375:       assertEquals(1, Node.DECR_FLAG);
2376:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2377:       assertEquals(12, Node.COLUMN_BITS);
2378:       assertEquals(32, Node.INCRDECR_PROP);
2379:       assertFalse(node2.equals((Object)node0));
2380:       assertFalse(node2.equals((Object)node6));
2381:       assertFalse(node2.equals((Object)node4));
2382:       assertFalse(node2.equals((Object)node5));
2383:       assertFalse(node2.equals((Object)node1));
2384:       assertFalse(node6.equals((Object)node5));
2385:       assertFalse(node6.equals((Object)node4));
2386:       assertFalse(node6.equals((Object)node1));
2387:       assertFalse(node6.equals((Object)node3));
2388:       assertFalse(node6.equals((Object)node2));
2389:       assertFalse(node6.equals((Object)node0));
2390:       
2391:       boolean boolean8 = node1.isQualifiedName();
2392:       assertFalse(boolean8);
2393:       assertNotSame(node1, node5);
2394:       assertNotSame(node1, node4);
2395:       assertNotSame(node1, node0);
2396:       assertNotSame(node1, node6);
2397:       assertEquals(57, Node.LAST_PROP);
2398:       assertEquals(30, Node.VAR_ARGS_NAME);
2399:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2400:       assertEquals(57, Node.REFLECTED_OBJECT);
2401:       assertEquals(54, Node.SLASH_V);
2402:       assertEquals(49, Node.DIRECT_EVAL);
2403:       assertEquals(40, Node.ORIGINALNAME_PROP);
2404:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2405:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2406:       assertEquals(12, Node.COLUMN_BITS);
2407:       assertEquals(46, Node.IS_NAMESPACE);
2408:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2409:       assertEquals(1, Node.DECR_FLAG);
2410:       assertEquals(32, Node.INCRDECR_PROP);
2411:       assertEquals(50, Node.FREE_CALL);
2412:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2413:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2414:       assertEquals(43, Node.IS_CONSTANT_NAME);
2415:       assertEquals(36, Node.QUOTED_PROP);
2416:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2417:       assertEquals(4095, Node.COLUMN_MASK);
2418:       assertEquals(2, Node.POST_FLAG);
2419:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2420:       assertEquals(8, Node.FLAG_NO_THROWS);
2421:       assertEquals(39, Node.EMPTY_BLOCK);
2422:       assertEquals(37, Node.OPT_ARG_NAME);
2423:       assertEquals(48, Node.DIRECTIVES);
2424:       assertEquals(56, Node.CHANGE_TIME);
2425:       assertEquals(47, Node.IS_DISPATCHER);
2426:       assertEquals(55, Node.INFERRED_FUNCTION);
2427:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2428:       assertEquals(52, Node.LENGTH);
2429:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2430:       assertEquals(29, Node.JSDOC_INFO_PROP);
2431:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2432:       assertEquals(53, Node.INPUT_ID);
2433:       assertTrue(boolean8 == boolean4);
2434:       assertTrue(boolean8 == boolean3);
2435:       assertTrue(boolean8 == boolean1);
2436:       assertTrue(boolean8 == boolean7);
2437:       assertTrue(boolean8 == boolean2);
2438:       assertTrue(boolean8 == boolean6);
2439:       assertTrue(boolean8 == boolean0);
2440:       assertTrue(boolean8 == boolean5);
2441:       assertFalse(node1.equals((Object)node2));
2442:       assertFalse(node1.equals((Object)node5));
2443:       assertFalse(node1.equals((Object)node4));
2444:       assertFalse(node1.equals((Object)node0));
2445:       assertFalse(node1.equals((Object)node6));
2446:       assertFalse(node1.equals((Object)node3));
2447:       
2448:       boolean boolean9 = node4.isOptionalArg();
2449:       assertFalse(boolean9);
2450:       assertNotSame(node0, node4);
2451:       assertNotSame(node0, node5);
2452:       assertNotSame(node0, node6);
2453:       assertNotSame(node0, node1);
2454:       assertNotSame(node4, node1);
2455:       assertNotSame(node4, node6);
2456:       assertNotSame(node4, node0);
2457:       assertNotSame(node4, node5);
2458:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2459:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2460:       assertEquals(43, Node.IS_CONSTANT_NAME);
2461:       assertEquals(56, Node.CHANGE_TIME);
2462:       assertEquals(36, Node.QUOTED_PROP);
2463:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2464:       assertEquals(37, Node.OPT_ARG_NAME);
2465:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2466:       assertEquals(12, Node.COLUMN_BITS);
2467:       assertEquals(4095, Node.COLUMN_MASK);
2468:       assertEquals(46, Node.IS_NAMESPACE);
2469:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2470:       assertEquals(32, Node.INCRDECR_PROP);
2471:       assertEquals(1, Node.DECR_FLAG);
2472:       assertEquals(57, Node.REFLECTED_OBJECT);
2473:       assertEquals(40, Node.ORIGINALNAME_PROP);
2474:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2475:       assertEquals(52, Node.LENGTH);
2476:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2477:       assertEquals(50, Node.FREE_CALL);
2478:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2479:       assertEquals(54, Node.SLASH_V);
2480:       assertEquals(48, Node.DIRECTIVES);
2481:       assertEquals(49, Node.DIRECT_EVAL);
2482:       assertEquals(55, Node.INFERRED_FUNCTION);
2483:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2484:       assertEquals(8, Node.FLAG_NO_THROWS);
2485:       assertEquals(2, Node.POST_FLAG);
2486:       assertEquals(30, Node.VAR_ARGS_NAME);
2487:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2488:       assertEquals(57, Node.LAST_PROP);
2489:       assertEquals(47, Node.IS_DISPATCHER);
2490:       assertEquals(39, Node.EMPTY_BLOCK);
2491:       assertEquals(29, Node.JSDOC_INFO_PROP);
2492:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2493:       assertEquals(53, Node.INPUT_ID);
2494:       assertEquals(32, Node.INCRDECR_PROP);
2495:       assertEquals(46, Node.IS_NAMESPACE);
2496:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2497:       assertEquals(12, Node.COLUMN_BITS);
2498:       assertEquals(37, Node.OPT_ARG_NAME);
2499:       assertEquals(1, Node.DECR_FLAG);
2500:       assertEquals(49, Node.DIRECT_EVAL);
2501:       assertEquals(56, Node.CHANGE_TIME);
2502:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2503:       assertEquals(29, Node.JSDOC_INFO_PROP);
2504:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2505:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2506:       assertEquals(52, Node.LENGTH);
2507:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2508:       assertEquals(57, Node.REFLECTED_OBJECT);
2509:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2510:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2511:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2512:       assertEquals(4095, Node.COLUMN_MASK);
2513:       assertEquals(48, Node.DIRECTIVES);
2514:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2515:       assertEquals(43, Node.IS_CONSTANT_NAME);
2516:       assertEquals(36, Node.QUOTED_PROP);
2517:       assertEquals(39, Node.EMPTY_BLOCK);
2518:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2519:       assertEquals(55, Node.INFERRED_FUNCTION);
2520:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2521:       assertEquals(50, Node.FREE_CALL);
2522:       assertEquals(8, Node.FLAG_NO_THROWS);
2523:       assertEquals(53, Node.INPUT_ID);
2524:       assertEquals(54, Node.SLASH_V);
2525:       assertEquals(57, Node.LAST_PROP);
2526:       assertEquals(30, Node.VAR_ARGS_NAME);
2527:       assertEquals(47, Node.IS_DISPATCHER);
2528:       assertEquals(40, Node.ORIGINALNAME_PROP);
2529:       assertEquals(2, Node.POST_FLAG);
2530:       assertEquals(0, nodeArray0.length);
2531:       assertTrue(boolean9 == boolean8);
2532:       assertTrue(boolean9 == boolean0);
2533:       assertTrue(boolean9 == boolean2);
2534:       assertTrue(boolean9 == boolean6);
2535:       assertTrue(boolean9 == boolean7);
2536:       assertTrue(boolean9 == boolean1);
2537:       assertTrue(boolean9 == boolean4);
2538:       assertTrue(boolean9 == boolean5);
2539:       assertTrue(boolean9 == boolean3);
2540:       assertFalse(node0.equals((Object)node3));
2541:       assertFalse(node0.equals((Object)node4));
2542:       assertFalse(node0.equals((Object)node2));
2543:       assertFalse(node0.equals((Object)node5));
2544:       assertFalse(node0.equals((Object)node6));
2545:       assertFalse(node0.equals((Object)node1));
2546:       assertFalse(node4.equals((Object)node3));
2547:       assertFalse(node4.equals((Object)node1));
2548:       assertFalse(node4.equals((Object)node6));
2549:       assertFalse(node4.equals((Object)node0));
2550:       assertFalse(node4.equals((Object)node2));
2551:       assertFalse(node4.equals((Object)node5));
2552:   }
2553: }
RegularFileObject[/tmp/EvoSuite_186_1628157541269/com/google/javascript/rhino/Node_186_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:01 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_186_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_186_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_186_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.JSTypeNative",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.JSType$TypePair",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.JSType$2",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
375:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
377:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
378:     );
379:   }
380: }

[MASTER] 09:59:02.016 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node[] nodeArray0 = new Node[0];
Node node0 = new Node(330, nodeArray0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, nodeArray0.length);
assertNotNull(node0);
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertEquals(0, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertEquals(330, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertEquals(0, node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());

Node node1 = new Node(49);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertEquals(49, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isGetProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCast());
assertTrue(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());

Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isContinue());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBlock());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIn());
assertEquals(0, node2.getChildCount());
assertEquals(40, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isWhile());
assertFalse(node2.isGetProp());

Node node3 = node2.useSourceInfoIfMissingFrom(node1);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotNull(node3);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertEquals(49, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isGetProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCast());
assertTrue(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isContinue());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isHook());
assertFalse(node2.isVar());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBlock());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIn());
assertEquals(0, node2.getChildCount());
assertEquals(40, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isWhile());
assertFalse(node2.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isThrow());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetProp());
assertFalse(node3.isScript());
assertFalse(node3.isInc());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertFalse(node3.isFalse());
assertFalse(node3.isLabelName());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.hasOneChild());
assertFalse(node3.isCase());
assertFalse(node3.isIn());
assertTrue(node3.isString());
assertFalse(node3.isTry());
assertFalse(node3.isRegExp());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isParamList());
assertFalse(node3.isSetterDef());
assertFalse(node3.isStringKey());
assertFalse(node3.isNull());
assertFalse(node3.isAdd());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isNew());
assertEquals(40, node3.getType());
assertFalse(node3.isVar());
assertFalse(node3.isArrayLit());
assertFalse(node3.isContinue());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isDec());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDelProp());
assertFalse(node3.isOr());
assertFalse(node3.isTypeOf());
assertFalse(node3.isReturn());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.hasChildren());
assertFalse(node3.isDo());
assertFalse(node3.isEmpty());
assertFalse(node3.isVoid());
assertFalse(node3.isWhile());
assertFalse(node3.isTrue());
assertFalse(node3.isName());
assertFalse(node3.isAssign());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isExprResult());

Iterable<Node> iterable0 = node3.children();
assertFalse(iterable0.contains(node1));
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertEquals(49, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNot());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isGetProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabel());

boolean boolean0 = node1.isGetProp();
assertFalse(boolean0);
assertNotSame(node1, node0);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));

boolean boolean1 = node3.hasChildren();
assertFalse(boolean1);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean1 == boolean0);

boolean boolean2 = node2.isSwitch();
assertFalse(boolean2);
assertSame(node2, node3);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

Node node4 = node0.cloneNode();
assertNotSame(node0, node4);
assertNotSame(node0, node1);
assertNotSame(node4, node1);
assertNotSame(node4, node0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, nodeArray0.length);
assertNotNull(node4);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags3);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertNotNull(node_SideEffectFlags4);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags5);

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setMutatesGlobalState();
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertNotNull(node_SideEffectFlags6);

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setReturnsTainted();
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertNotNull(node_SideEffectFlags7);

Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags7.setMutatesArguments();
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
assertSame(node_SideEffectFlags6, node_SideEffectFlags8);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags8);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertNotNull(node_SideEffectFlags8);

Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags2.setMutatesGlobalState();
assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertNotNull(node_SideEffectFlags9);

Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags0.setMutatesArguments();
assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertNotNull(node_SideEffectFlags10);

node_SideEffectFlags10.clearSideEffectFlags();
assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);

Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags10.setMutatesGlobalState();
assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
assertSame(node_SideEffectFlags10, node_SideEffectFlags11);
assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
assertSame(node_SideEffectFlags11, node_SideEffectFlags3);
assertSame(node_SideEffectFlags11, node_SideEffectFlags6);
assertSame(node_SideEffectFlags11, node_SideEffectFlags2);
assertSame(node_SideEffectFlags11, node_SideEffectFlags5);
assertSame(node_SideEffectFlags11, node_SideEffectFlags4);
assertSame(node_SideEffectFlags11, node_SideEffectFlags8);
assertSame(node_SideEffectFlags11, node_SideEffectFlags0);
assertSame(node_SideEffectFlags11, node_SideEffectFlags9);
assertSame(node_SideEffectFlags11, node_SideEffectFlags1);
assertSame(node_SideEffectFlags11, node_SideEffectFlags10);
assertSame(node_SideEffectFlags11, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
assertNotNull(node_SideEffectFlags11);

Node node5 = new Node(48, node1, node0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, nodeArray0.length);
assertNotNull(node5);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node3));

boolean boolean3 = node1.hasOneChild();
assertFalse(boolean3);
assertNotSame(node1, node5);
assertNotSame(node1, node4);
assertNotSame(node1, node0);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);

boolean boolean4 = node5.isEquivalentToShallow(node0);
assertFalse(boolean4);
assertNotSame(node0, node4);
assertNotSame(node0, node5);
assertNotSame(node0, node1);
assertNotSame(node1, node5);
assertNotSame(node1, node4);
assertNotSame(node1, node0);
assertNotSame(node5, node0);
assertNotSame(node5, node1);
assertNotSame(node5, node4);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, nodeArray0.length);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node3));
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);

boolean boolean5 = node4.isName();
assertFalse(boolean5);
assertNotSame(node0, node4);
assertNotSame(node0, node5);
assertNotSame(node0, node1);
assertNotSame(node4, node1);
assertNotSame(node4, node0);
assertNotSame(node4, node5);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, nodeArray0.length);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node5));
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean2);

boolean boolean6 = node3.isDelProp();
assertFalse(boolean6);
assertNotSame(node1, node5);
assertNotSame(node1, node4);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node4));
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean3);

node2.putIntProp(29, 4095);
assertSame(node2, node3);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));

boolean boolean7 = node3.isOr();
assertFalse(boolean7);
assertNotSame(node1, node5);
assertNotSame(node1, node4);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node4));
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean0);

Node node6 = new Node(31, node2, (-792), 101);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(node6);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node0));

int int0 = node6.getSourcePosition();
assertEquals((-1), int0);
assertSame(node2, node3);
assertNotSame(node6, node5);
assertNotSame(node6, node4);
assertNotSame(node6, node1);
assertNotSame(node6, node0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node6));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node0));

boolean boolean8 = node1.isQualifiedName();
assertFalse(boolean8);
assertNotSame(node1, node5);
assertNotSame(node1, node4);
assertNotSame(node1, node0);
assertNotSame(node1, node6);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertTrue(boolean8 == boolean4);
assertTrue(boolean8 == boolean3);
assertTrue(boolean8 == boolean1);
assertTrue(boolean8 == boolean7);
assertTrue(boolean8 == boolean2);
assertTrue(boolean8 == boolean6);
assertTrue(boolean8 == boolean0);
assertTrue(boolean8 == boolean5);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node6));
assertFalse(node1.equals((Object)node3));

boolean boolean9 = node4.isOptionalArg();
assertFalse(boolean9);
assertNotSame(node0, node4);
assertNotSame(node0, node5);
assertNotSame(node0, node6);
assertNotSame(node0, node1);
assertNotSame(node4, node1);
assertNotSame(node4, node6);
assertNotSame(node4, node0);
assertNotSame(node4, node5);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, nodeArray0.length);
assertTrue(boolean9 == boolean8);
assertTrue(boolean9 == boolean0);
assertTrue(boolean9 == boolean2);
assertTrue(boolean9 == boolean6);
assertTrue(boolean9 == boolean7);
assertTrue(boolean9 == boolean1);
assertTrue(boolean9 == boolean4);
assertTrue(boolean9 == boolean5);
assertTrue(boolean9 == boolean3);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node6));
assertFalse(node0.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node6));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node5));


[MASTER] 09:59:02.613 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_191_1628157542581/com/google/javascript/rhino/Node_191_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_191_1628157542581/com/google/javascript/rhino/Node_191_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:02.613 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:02.613 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:02.614 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 127
[MASTER] 09:59:02.614 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_191_1628157542581/com/google/javascript/rhino/Node_191_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:02 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_191_tmp__ESTest extends Node_191_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("8`QN");
22:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
23:       assertEquals(8, Node.FLAG_NO_THROWS);
24:       assertEquals(39, Node.EMPTY_BLOCK);
25:       assertEquals(48, Node.DIRECTIVES);
26:       assertEquals(40, Node.ORIGINALNAME_PROP);
27:       assertEquals(4095, Node.COLUMN_MASK);
28:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
29:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
30:       assertEquals(36, Node.QUOTED_PROP);
31:       assertEquals(57, Node.LAST_PROP);
32:       assertEquals(57, Node.REFLECTED_OBJECT);
33:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
34:       assertEquals(52, Node.LENGTH);
35:       assertEquals(15, Node.NO_SIDE_EFFECTS);
36:       assertEquals(53, Node.INPUT_ID);
37:       assertEquals(55, Node.INFERRED_FUNCTION);
38:       assertEquals(29, Node.JSDOC_INFO_PROP);
39:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
40:       assertEquals(37, Node.OPT_ARG_NAME);
41:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
42:       assertEquals(2, Node.POST_FLAG);
43:       assertEquals(32, Node.INCRDECR_PROP);
44:       assertEquals(47, Node.IS_DISPATCHER);
45:       assertEquals(56, Node.CHANGE_TIME);
46:       assertEquals(12, Node.COLUMN_BITS);
47:       assertEquals(46, Node.IS_NAMESPACE);
48:       assertEquals(30, Node.VAR_ARGS_NAME);
49:       assertEquals(49, Node.DIRECT_EVAL);
50:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
51:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
52:       assertEquals(43, Node.IS_CONSTANT_NAME);
53:       assertEquals(54, Node.SLASH_V);
54:       assertEquals(51, Node.STATIC_SOURCE_FILE);
55:       assertEquals(1, Node.DECR_FLAG);
56:       assertEquals(50, Node.FREE_CALL);
57:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
58:       assertNotNull(node0);
59:       assertFalse(node0.isName());
60:       assertFalse(node0.isParamList());
61:       assertFalse(node0.isNull());
62:       assertFalse(node0.isStringKey());
63:       assertFalse(node0.isVar());
64:       assertTrue(node0.isString());
65:       assertFalse(node0.isNew());
66:       assertFalse(node0.isSetterDef());
67:       assertFalse(node0.isAdd());
68:       assertFalse(node0.isWhile());
69:       assertFalse(node0.isRegExp());
70:       assertFalse(node0.isTrue());
71:       assertFalse(node0.isBlock());
72:       assertEquals((-1), node0.getLineno());
73:       assertFalse(node0.isReturn());
74:       assertFalse(node0.isVoid());
75:       assertFalse(node0.isCall());
76:       assertFalse(node0.hasMoreThanOneChild());
77:       assertFalse(node0.isCatch());
78:       assertFalse(node0.isIf());
79:       assertFalse(node0.hasChildren());
80:       assertFalse(node0.isTypeOf());
81:       assertFalse(node0.isDec());
82:       assertEquals((-1), node0.getSourcePosition());
83:       assertFalse(node0.isAssign());
84:       assertFalse(node0.isNE());
85:       assertFalse(node0.isIn());
86:       assertFalse(node0.isNot());
87:       assertFalse(node0.isObjectLit());
88:       assertFalse(node0.isAnd());
89:       assertFalse(node0.isDebugger());
90:       assertEquals(40, node0.getType());
91:       assertFalse(node0.isFunction());
92:       assertFalse(node0.isContinue());
93:       assertFalse(node0.isCast());
94:       assertFalse(node0.isBreak());
95:       assertFalse(node0.isFalse());
96:       assertFalse(node0.isComma());
97:       assertFalse(node0.isThis());
98:       assertFalse(node0.isHook());
99:       assertFalse(node0.isThrow());
100:       assertFalse(node0.isInc());
101:       assertFalse(node0.isGetProp());
102:       assertFalse(node0.isWith());
103:       assertFalse(node0.isCase());
104:       assertFalse(node0.isExprResult());
105:       assertFalse(node0.isGetElem());
106:       assertFalse(node0.isInstanceOf());
107:       assertFalse(node0.isNumber());
108:       assertFalse(node0.isGetterDef());
109:       assertFalse(node0.isDelProp());
110:       assertFalse(node0.isLabelName());
111:       assertFalse(node0.isFor());
112:       assertFalse(node0.isAssignAdd());
113:       assertFalse(node0.hasOneChild());
114:       assertFalse(node0.isTry());
115:       assertFalse(node0.isOr());
116:       assertFalse(node0.isEmpty());
117:       assertFalse(node0.isScript());
118:       assertFalse(node0.isDefaultCase());
119:       assertFalse(node0.isDo());
120:       assertEquals((-1), node0.getCharno());
121:       assertFalse(node0.isSwitch());
122:       assertFalse(node0.isLabel());
123:       assertEquals(0, node0.getChildCount());
124:       assertFalse(node0.isArrayLit());
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertFalse(iterable0.contains(node0));
128:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
129:       assertEquals(8, Node.FLAG_NO_THROWS);
130:       assertEquals(39, Node.EMPTY_BLOCK);
131:       assertEquals(48, Node.DIRECTIVES);
132:       assertEquals(40, Node.ORIGINALNAME_PROP);
133:       assertEquals(4095, Node.COLUMN_MASK);
134:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
135:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
136:       assertEquals(36, Node.QUOTED_PROP);
137:       assertEquals(57, Node.LAST_PROP);
138:       assertEquals(57, Node.REFLECTED_OBJECT);
139:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
140:       assertEquals(52, Node.LENGTH);
141:       assertEquals(15, Node.NO_SIDE_EFFECTS);
142:       assertEquals(53, Node.INPUT_ID);
143:       assertEquals(55, Node.INFERRED_FUNCTION);
144:       assertEquals(29, Node.JSDOC_INFO_PROP);
145:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
146:       assertEquals(37, Node.OPT_ARG_NAME);
147:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
148:       assertEquals(2, Node.POST_FLAG);
149:       assertEquals(32, Node.INCRDECR_PROP);
150:       assertEquals(47, Node.IS_DISPATCHER);
151:       assertEquals(56, Node.CHANGE_TIME);
152:       assertEquals(12, Node.COLUMN_BITS);
153:       assertEquals(46, Node.IS_NAMESPACE);
154:       assertEquals(30, Node.VAR_ARGS_NAME);
155:       assertEquals(49, Node.DIRECT_EVAL);
156:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
157:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
158:       assertEquals(43, Node.IS_CONSTANT_NAME);
159:       assertEquals(54, Node.SLASH_V);
160:       assertEquals(51, Node.STATIC_SOURCE_FILE);
161:       assertEquals(1, Node.DECR_FLAG);
162:       assertEquals(50, Node.FREE_CALL);
163:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
164:       assertNotNull(iterable0);
165:       assertFalse(node0.isName());
166:       assertFalse(node0.isParamList());
167:       assertFalse(node0.isNull());
168:       assertFalse(node0.isStringKey());
169:       assertFalse(node0.isVar());
170:       assertTrue(node0.isString());
171:       assertFalse(node0.isNew());
172:       assertFalse(node0.isSetterDef());
173:       assertFalse(node0.isAdd());
174:       assertFalse(node0.isWhile());
175:       assertFalse(node0.isRegExp());
176:       assertFalse(node0.isTrue());
177:       assertFalse(node0.isBlock());
178:       assertEquals((-1), node0.getLineno());
179:       assertFalse(node0.isReturn());
180:       assertFalse(node0.isVoid());
181:       assertFalse(node0.isCall());
182:       assertFalse(node0.hasMoreThanOneChild());
183:       assertFalse(node0.isCatch());
184:       assertFalse(node0.isIf());
185:       assertFalse(node0.hasChildren());
186:       assertFalse(node0.isTypeOf());
187:       assertFalse(node0.isDec());
188:       assertEquals((-1), node0.getSourcePosition());
189:       assertFalse(node0.isAssign());
190:       assertFalse(node0.isNE());
191:       assertFalse(node0.isIn());
192:       assertFalse(node0.isNot());
193:       assertFalse(node0.isObjectLit());
194:       assertFalse(node0.isAnd());
195:       assertFalse(node0.isDebugger());
196:       assertEquals(40, node0.getType());
197:       assertFalse(node0.isFunction());
198:       assertFalse(node0.isContinue());
199:       assertFalse(node0.isCast());
200:       assertFalse(node0.isBreak());
201:       assertFalse(node0.isFalse());
202:       assertFalse(node0.isComma());
203:       assertFalse(node0.isThis());
204:       assertFalse(node0.isHook());
205:       assertFalse(node0.isThrow());
206:       assertFalse(node0.isInc());
207:       assertFalse(node0.isGetProp());
208:       assertFalse(node0.isWith());
209:       assertFalse(node0.isCase());
210:       assertFalse(node0.isExprResult());
211:       assertFalse(node0.isGetElem());
212:       assertFalse(node0.isInstanceOf());
213:       assertFalse(node0.isNumber());
214:       assertFalse(node0.isGetterDef());
215:       assertFalse(node0.isDelProp());
216:       assertFalse(node0.isLabelName());
217:       assertFalse(node0.isFor());
218:       assertFalse(node0.isAssignAdd());
219:       assertFalse(node0.hasOneChild());
220:       assertFalse(node0.isTry());
221:       assertFalse(node0.isOr());
222:       assertFalse(node0.isEmpty());
223:       assertFalse(node0.isScript());
224:       assertFalse(node0.isDefaultCase());
225:       assertFalse(node0.isDo());
226:       assertEquals((-1), node0.getCharno());
227:       assertFalse(node0.isSwitch());
228:       assertFalse(node0.isLabel());
229:       assertEquals(0, node0.getChildCount());
230:       assertFalse(node0.isArrayLit());
231:       
232:       boolean boolean0 = node0.isWhile();
233:       assertFalse(boolean0);
234:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
235:       assertEquals(8, Node.FLAG_NO_THROWS);
236:       assertEquals(39, Node.EMPTY_BLOCK);
237:       assertEquals(48, Node.DIRECTIVES);
238:       assertEquals(40, Node.ORIGINALNAME_PROP);
239:       assertEquals(4095, Node.COLUMN_MASK);
240:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
241:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
242:       assertEquals(36, Node.QUOTED_PROP);
243:       assertEquals(57, Node.LAST_PROP);
244:       assertEquals(57, Node.REFLECTED_OBJECT);
245:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
246:       assertEquals(52, Node.LENGTH);
247:       assertEquals(15, Node.NO_SIDE_EFFECTS);
248:       assertEquals(53, Node.INPUT_ID);
249:       assertEquals(55, Node.INFERRED_FUNCTION);
250:       assertEquals(29, Node.JSDOC_INFO_PROP);
251:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
252:       assertEquals(37, Node.OPT_ARG_NAME);
253:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
254:       assertEquals(2, Node.POST_FLAG);
255:       assertEquals(32, Node.INCRDECR_PROP);
256:       assertEquals(47, Node.IS_DISPATCHER);
257:       assertEquals(56, Node.CHANGE_TIME);
258:       assertEquals(12, Node.COLUMN_BITS);
259:       assertEquals(46, Node.IS_NAMESPACE);
260:       assertEquals(30, Node.VAR_ARGS_NAME);
261:       assertEquals(49, Node.DIRECT_EVAL);
262:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
263:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
264:       assertEquals(43, Node.IS_CONSTANT_NAME);
265:       assertEquals(54, Node.SLASH_V);
266:       assertEquals(51, Node.STATIC_SOURCE_FILE);
267:       assertEquals(1, Node.DECR_FLAG);
268:       assertEquals(50, Node.FREE_CALL);
269:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
270:       assertFalse(node0.isName());
271:       assertFalse(node0.isParamList());
272:       assertFalse(node0.isNull());
273:       assertFalse(node0.isStringKey());
274:       assertFalse(node0.isVar());
275:       assertTrue(node0.isString());
276:       assertFalse(node0.isNew());
277:       assertFalse(node0.isSetterDef());
278:       assertFalse(node0.isAdd());
279:       assertFalse(node0.isWhile());
280:       assertFalse(node0.isRegExp());
281:       assertFalse(node0.isTrue());
282:       assertFalse(node0.isBlock());
283:       assertEquals((-1), node0.getLineno());
284:       assertFalse(node0.isReturn());
285:       assertFalse(node0.isVoid());
286:       assertFalse(node0.isCall());
287:       assertFalse(node0.hasMoreThanOneChild());
288:       assertFalse(node0.isCatch());
289:       assertFalse(node0.isIf());
290:       assertFalse(node0.hasChildren());
291:       assertFalse(node0.isTypeOf());
292:       assertFalse(node0.isDec());
293:       assertEquals((-1), node0.getSourcePosition());
294:       assertFalse(node0.isAssign());
295:       assertFalse(node0.isNE());
296:       assertFalse(node0.isIn());
297:       assertFalse(node0.isNot());
298:       assertFalse(node0.isObjectLit());
299:       assertFalse(node0.isAnd());
300:       assertFalse(node0.isDebugger());
301:       assertEquals(40, node0.getType());
302:       assertFalse(node0.isFunction());
303:       assertFalse(node0.isContinue());
304:       assertFalse(node0.isCast());
305:       assertFalse(node0.isBreak());
306:       assertFalse(node0.isFalse());
307:       assertFalse(node0.isComma());
308:       assertFalse(node0.isThis());
309:       assertFalse(node0.isHook());
310:       assertFalse(node0.isThrow());
311:       assertFalse(node0.isInc());
312:       assertFalse(node0.isGetProp());
313:       assertFalse(node0.isWith());
314:       assertFalse(node0.isCase());
315:       assertFalse(node0.isExprResult());
316:       assertFalse(node0.isGetElem());
317:       assertFalse(node0.isInstanceOf());
318:       assertFalse(node0.isNumber());
319:       assertFalse(node0.isGetterDef());
320:       assertFalse(node0.isDelProp());
321:       assertFalse(node0.isLabelName());
322:       assertFalse(node0.isFor());
323:       assertFalse(node0.isAssignAdd());
324:       assertFalse(node0.hasOneChild());
325:       assertFalse(node0.isTry());
326:       assertFalse(node0.isOr());
327:       assertFalse(node0.isEmpty());
328:       assertFalse(node0.isScript());
329:       assertFalse(node0.isDefaultCase());
330:       assertFalse(node0.isDo());
331:       assertEquals((-1), node0.getCharno());
332:       assertFalse(node0.isSwitch());
333:       assertFalse(node0.isLabel());
334:       assertEquals(0, node0.getChildCount());
335:       assertFalse(node0.isArrayLit());
336:       
337:       boolean boolean1 = node0.isTrue();
338:       assertFalse(boolean1);
339:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
340:       assertEquals(8, Node.FLAG_NO_THROWS);
341:       assertEquals(39, Node.EMPTY_BLOCK);
342:       assertEquals(48, Node.DIRECTIVES);
343:       assertEquals(40, Node.ORIGINALNAME_PROP);
344:       assertEquals(4095, Node.COLUMN_MASK);
345:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
346:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
347:       assertEquals(36, Node.QUOTED_PROP);
348:       assertEquals(57, Node.LAST_PROP);
349:       assertEquals(57, Node.REFLECTED_OBJECT);
350:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
351:       assertEquals(52, Node.LENGTH);
352:       assertEquals(15, Node.NO_SIDE_EFFECTS);
353:       assertEquals(53, Node.INPUT_ID);
354:       assertEquals(55, Node.INFERRED_FUNCTION);
355:       assertEquals(29, Node.JSDOC_INFO_PROP);
356:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
357:       assertEquals(37, Node.OPT_ARG_NAME);
358:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
359:       assertEquals(2, Node.POST_FLAG);
360:       assertEquals(32, Node.INCRDECR_PROP);
361:       assertEquals(47, Node.IS_DISPATCHER);
362:       assertEquals(56, Node.CHANGE_TIME);
363:       assertEquals(12, Node.COLUMN_BITS);
364:       assertEquals(46, Node.IS_NAMESPACE);
365:       assertEquals(30, Node.VAR_ARGS_NAME);
366:       assertEquals(49, Node.DIRECT_EVAL);
367:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
368:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
369:       assertEquals(43, Node.IS_CONSTANT_NAME);
370:       assertEquals(54, Node.SLASH_V);
371:       assertEquals(51, Node.STATIC_SOURCE_FILE);
372:       assertEquals(1, Node.DECR_FLAG);
373:       assertEquals(50, Node.FREE_CALL);
374:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
375:       assertTrue(boolean1 == boolean0);
376:       assertFalse(node0.isName());
377:       assertFalse(node0.isParamList());
378:       assertFalse(node0.isNull());
379:       assertFalse(node0.isStringKey());
380:       assertFalse(node0.isVar());
381:       assertTrue(node0.isString());
382:       assertFalse(node0.isNew());
383:       assertFalse(node0.isSetterDef());
384:       assertFalse(node0.isAdd());
385:       assertFalse(node0.isWhile());
386:       assertFalse(node0.isRegExp());
387:       assertFalse(node0.isTrue());
388:       assertFalse(node0.isBlock());
389:       assertEquals((-1), node0.getLineno());
390:       assertFalse(node0.isReturn());
391:       assertFalse(node0.isVoid());
392:       assertFalse(node0.isCall());
393:       assertFalse(node0.hasMoreThanOneChild());
394:       assertFalse(node0.isCatch());
395:       assertFalse(node0.isIf());
396:       assertFalse(node0.hasChildren());
397:       assertFalse(node0.isTypeOf());
398:       assertFalse(node0.isDec());
399:       assertEquals((-1), node0.getSourcePosition());
400:       assertFalse(node0.isAssign());
401:       assertFalse(node0.isNE());
402:       assertFalse(node0.isIn());
403:       assertFalse(node0.isNot());
404:       assertFalse(node0.isObjectLit());
405:       assertFalse(node0.isAnd());
406:       assertFalse(node0.isDebugger());
407:       assertEquals(40, node0.getType());
408:       assertFalse(node0.isFunction());
409:       assertFalse(node0.isContinue());
410:       assertFalse(node0.isCast());
411:       assertFalse(node0.isBreak());
412:       assertFalse(node0.isFalse());
413:       assertFalse(node0.isComma());
414:       assertFalse(node0.isThis());
415:       assertFalse(node0.isHook());
416:       assertFalse(node0.isThrow());
417:       assertFalse(node0.isInc());
418:       assertFalse(node0.isGetProp());
419:       assertFalse(node0.isWith());
420:       assertFalse(node0.isCase());
421:       assertFalse(node0.isExprResult());
422:       assertFalse(node0.isGetElem());
423:       assertFalse(node0.isInstanceOf());
424:       assertFalse(node0.isNumber());
425:       assertFalse(node0.isGetterDef());
426:       assertFalse(node0.isDelProp());
427:       assertFalse(node0.isLabelName());
428:       assertFalse(node0.isFor());
429:       assertFalse(node0.isAssignAdd());
430:       assertFalse(node0.hasOneChild());
431:       assertFalse(node0.isTry());
432:       assertFalse(node0.isOr());
433:       assertFalse(node0.isEmpty());
434:       assertFalse(node0.isScript());
435:       assertFalse(node0.isDefaultCase());
436:       assertFalse(node0.isDo());
437:       assertEquals((-1), node0.getCharno());
438:       assertFalse(node0.isSwitch());
439:       assertFalse(node0.isLabel());
440:       assertEquals(0, node0.getChildCount());
441:       assertFalse(node0.isArrayLit());
442:       
443:       try { 
444:         node0.setDouble(53.0);
445:         fail("Expecting exception: UnsupportedOperationException");
446:       
447:       } catch(UnsupportedOperationException e) {
448:          //
449:          // STRING 8`QN is not a string node
450:          //
451:          verifyException("com.google.javascript.rhino.Node", e);
452:       }
453:   }
454: }
RegularFileObject[/tmp/EvoSuite_191_1628157542581/com/google/javascript/rhino/Node_191_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:02 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_191_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_191_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_191_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.JSTypeNative",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.JSType$TypePair",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.JSType$2",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
375:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
377:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
378:     );
379:   }
380: }

[MASTER] 09:59:02.619 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("8`QN");
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(node0);
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertNotNull(iterable0);
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());

boolean boolean0 = node0.isWhile();
assertFalse(boolean0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());

boolean boolean1 = node0.isTrue();
assertFalse(boolean1);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());

node0.setDouble(53.0);

[MASTER] 09:59:03.552 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_195_1628157543151/com/google/javascript/rhino/Node_195_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_195_1628157543151/com/google/javascript/rhino/Node_195_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:03.552 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:03.552 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:03.553 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 587
[MASTER] 09:59:03.554 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_195_1628157543151/com/google/javascript/rhino/Node_195_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:03 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSType;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import java.util.ArrayList;
15: import java.util.List;
16: import java.util.Vector;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class Node_195_tmp__ESTest extends Node_195_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
27:       assertNotNull(simpleErrorReporter0);
28:       
29:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
30:       assertNotNull(jSTypeRegistry0);
31:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
32:       
33:       ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
34:       assertNotNull(arrayList0);
35:       assertTrue(arrayList0.isEmpty());
36:       assertEquals(0, arrayList0.size());
37:       
38:       Vector<JSType> vector0 = new Vector<JSType>();
39:       assertNotNull(vector0);
40:       assertEquals(0, vector0.size());
41:       assertEquals("[]", vector0.toString());
42:       assertTrue(vector0.isEmpty());
43:       assertEquals(10, vector0.capacity());
44:       
45:       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
46:       assertEquals(4095, Node.COLUMN_MASK);
47:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
48:       assertEquals(8, Node.FLAG_NO_THROWS);
49:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
50:       assertEquals(43, Node.IS_CONSTANT_NAME);
51:       assertEquals(40, Node.ORIGINALNAME_PROP);
52:       assertEquals(48, Node.DIRECTIVES);
53:       assertEquals(54, Node.SLASH_V);
54:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
55:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
56:       assertEquals(50, Node.FREE_CALL);
57:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
58:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
59:       assertEquals(1, Node.DECR_FLAG);
60:       assertEquals(32, Node.INCRDECR_PROP);
61:       assertEquals(46, Node.IS_NAMESPACE);
62:       assertEquals(2, Node.POST_FLAG);
63:       assertEquals(12, Node.COLUMN_BITS);
64:       assertEquals(47, Node.IS_DISPATCHER);
65:       assertEquals(51, Node.STATIC_SOURCE_FILE);
66:       assertEquals(30, Node.VAR_ARGS_NAME);
67:       assertEquals(49, Node.DIRECT_EVAL);
68:       assertEquals(56, Node.CHANGE_TIME);
69:       assertEquals(37, Node.OPT_ARG_NAME);
70:       assertEquals(52, Node.LENGTH);
71:       assertEquals(53, Node.INPUT_ID);
72:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
73:       assertEquals(57, Node.REFLECTED_OBJECT);
74:       assertEquals(36, Node.QUOTED_PROP);
75:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
76:       assertEquals(29, Node.JSDOC_INFO_PROP);
77:       assertEquals(57, Node.LAST_PROP);
78:       assertEquals(55, Node.INFERRED_FUNCTION);
79:       assertEquals(39, Node.EMPTY_BLOCK);
80:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
81:       assertEquals(15, Node.NO_SIDE_EFFECTS);
82:       assertNotNull(node0);
83:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
84:       assertEquals(0, vector0.size());
85:       assertEquals("[]", vector0.toString());
86:       assertTrue(vector0.isEmpty());
87:       assertEquals(10, vector0.capacity());
88:       assertEquals(83, node0.getType());
89:       assertFalse(node0.isThis());
90:       assertFalse(node0.isFalse());
91:       assertFalse(node0.isComma());
92:       assertFalse(node0.isHook());
93:       assertTrue(node0.isParamList());
94:       assertFalse(node0.isObjectLit());
95:       assertFalse(node0.isThrow());
96:       assertFalse(node0.isGetProp());
97:       assertFalse(node0.isScript());
98:       assertFalse(node0.isSwitch());
99:       assertFalse(node0.isString());
100:       assertFalse(node0.isNot());
101:       assertEquals((-1), node0.getCharno());
102:       assertFalse(node0.isCast());
103:       assertFalse(node0.isAnd());
104:       assertFalse(node0.isLabelName());
105:       assertFalse(node0.isTypeOf());
106:       assertFalse(node0.isLabel());
107:       assertFalse(node0.isOr());
108:       assertFalse(node0.isAssign());
109:       assertFalse(node0.isReturn());
110:       assertFalse(node0.hasChildren());
111:       assertFalse(node0.isDec());
112:       assertEquals((-1), node0.getSourcePosition());
113:       assertFalse(node0.isEmpty());
114:       assertFalse(node0.isDo());
115:       assertFalse(node0.isAssignAdd());
116:       assertFalse(node0.isTrue());
117:       assertFalse(node0.isExprResult());
118:       assertFalse(node0.isWhile());
119:       assertFalse(node0.isCall());
120:       assertFalse(node0.isDelProp());
121:       assertFalse(node0.isName());
122:       assertFalse(node0.isGetElem());
123:       assertFalse(node0.isVoid());
124:       assertFalse(node0.isBreak());
125:       assertFalse(node0.isNull());
126:       assertFalse(node0.isSetterDef());
127:       assertEquals(0, node0.getChildCount());
128:       assertFalse(node0.isVar());
129:       assertFalse(node0.isAdd());
130:       assertFalse(node0.isNew());
131:       assertFalse(node0.isFunction());
132:       assertFalse(node0.isDefaultCase());
133:       assertFalse(node0.isDebugger());
134:       assertFalse(node0.isContinue());
135:       assertFalse(node0.isStringKey());
136:       assertFalse(node0.isArrayLit());
137:       assertFalse(node0.isNE());
138:       assertFalse(node0.isNumber());
139:       assertFalse(node0.isIf());
140:       assertFalse(node0.isFor());
141:       assertFalse(node0.isGetterDef());
142:       assertFalse(node0.isIn());
143:       assertFalse(node0.isTry());
144:       assertFalse(node0.isCase());
145:       assertFalse(node0.hasOneChild());
146:       assertFalse(node0.isInc());
147:       assertFalse(node0.isRegExp());
148:       assertFalse(node0.isWith());
149:       assertFalse(node0.isBlock());
150:       assertFalse(node0.hasMoreThanOneChild());
151:       assertFalse(node0.isCatch());
152:       assertFalse(node0.isInstanceOf());
153:       assertEquals((-1), node0.getLineno());
154:       
155:       boolean boolean0 = node0.isDefaultCase();
156:       assertFalse(boolean0);
157:       assertEquals(4095, Node.COLUMN_MASK);
158:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
159:       assertEquals(8, Node.FLAG_NO_THROWS);
160:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
161:       assertEquals(43, Node.IS_CONSTANT_NAME);
162:       assertEquals(40, Node.ORIGINALNAME_PROP);
163:       assertEquals(48, Node.DIRECTIVES);
164:       assertEquals(54, Node.SLASH_V);
165:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
166:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
167:       assertEquals(50, Node.FREE_CALL);
168:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
169:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
170:       assertEquals(1, Node.DECR_FLAG);
171:       assertEquals(32, Node.INCRDECR_PROP);
172:       assertEquals(46, Node.IS_NAMESPACE);
173:       assertEquals(2, Node.POST_FLAG);
174:       assertEquals(12, Node.COLUMN_BITS);
175:       assertEquals(47, Node.IS_DISPATCHER);
176:       assertEquals(51, Node.STATIC_SOURCE_FILE);
177:       assertEquals(30, Node.VAR_ARGS_NAME);
178:       assertEquals(49, Node.DIRECT_EVAL);
179:       assertEquals(56, Node.CHANGE_TIME);
180:       assertEquals(37, Node.OPT_ARG_NAME);
181:       assertEquals(52, Node.LENGTH);
182:       assertEquals(53, Node.INPUT_ID);
183:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
184:       assertEquals(57, Node.REFLECTED_OBJECT);
185:       assertEquals(36, Node.QUOTED_PROP);
186:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
187:       assertEquals(29, Node.JSDOC_INFO_PROP);
188:       assertEquals(57, Node.LAST_PROP);
189:       assertEquals(55, Node.INFERRED_FUNCTION);
190:       assertEquals(39, Node.EMPTY_BLOCK);
191:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
192:       assertEquals(15, Node.NO_SIDE_EFFECTS);
193:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
194:       assertEquals(0, vector0.size());
195:       assertEquals("[]", vector0.toString());
196:       assertTrue(vector0.isEmpty());
197:       assertEquals(10, vector0.capacity());
198:       assertEquals(83, node0.getType());
199:       assertFalse(node0.isThis());
200:       assertFalse(node0.isFalse());
201:       assertFalse(node0.isComma());
202:       assertFalse(node0.isHook());
203:       assertTrue(node0.isParamList());
204:       assertFalse(node0.isObjectLit());
205:       assertFalse(node0.isThrow());
206:       assertFalse(node0.isGetProp());
207:       assertFalse(node0.isScript());
208:       assertFalse(node0.isSwitch());
209:       assertFalse(node0.isString());
210:       assertFalse(node0.isNot());
211:       assertEquals((-1), node0.getCharno());
212:       assertFalse(node0.isCast());
213:       assertFalse(node0.isAnd());
214:       assertFalse(node0.isLabelName());
215:       assertFalse(node0.isTypeOf());
216:       assertFalse(node0.isLabel());
217:       assertFalse(node0.isOr());
218:       assertFalse(node0.isAssign());
219:       assertFalse(node0.isReturn());
220:       assertFalse(node0.hasChildren());
221:       assertFalse(node0.isDec());
222:       assertEquals((-1), node0.getSourcePosition());
223:       assertFalse(node0.isEmpty());
224:       assertFalse(node0.isDo());
225:       assertFalse(node0.isAssignAdd());
226:       assertFalse(node0.isTrue());
227:       assertFalse(node0.isExprResult());
228:       assertFalse(node0.isWhile());
229:       assertFalse(node0.isCall());
230:       assertFalse(node0.isDelProp());
231:       assertFalse(node0.isName());
232:       assertFalse(node0.isGetElem());
233:       assertFalse(node0.isVoid());
234:       assertFalse(node0.isBreak());
235:       assertFalse(node0.isNull());
236:       assertFalse(node0.isSetterDef());
237:       assertEquals(0, node0.getChildCount());
238:       assertFalse(node0.isVar());
239:       assertFalse(node0.isAdd());
240:       assertFalse(node0.isNew());
241:       assertFalse(node0.isFunction());
242:       assertFalse(node0.isDefaultCase());
243:       assertFalse(node0.isDebugger());
244:       assertFalse(node0.isContinue());
245:       assertFalse(node0.isStringKey());
246:       assertFalse(node0.isArrayLit());
247:       assertFalse(node0.isNE());
248:       assertFalse(node0.isNumber());
249:       assertFalse(node0.isIf());
250:       assertFalse(node0.isFor());
251:       assertFalse(node0.isGetterDef());
252:       assertFalse(node0.isIn());
253:       assertFalse(node0.isTry());
254:       assertFalse(node0.isCase());
255:       assertFalse(node0.hasOneChild());
256:       assertFalse(node0.isInc());
257:       assertFalse(node0.isRegExp());
258:       assertFalse(node0.isWith());
259:       assertFalse(node0.isBlock());
260:       assertFalse(node0.hasMoreThanOneChild());
261:       assertFalse(node0.isCatch());
262:       assertFalse(node0.isInstanceOf());
263:       assertEquals((-1), node0.getLineno());
264:       
265:       JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
266:       assertNotNull(jSTypeRegistry1);
267:       assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
268:       assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
269:       
270:       Node node1 = new Node(3082);
271:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
272:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
273:       assertEquals(56, Node.CHANGE_TIME);
274:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
275:       assertEquals(36, Node.QUOTED_PROP);
276:       assertEquals(29, Node.JSDOC_INFO_PROP);
277:       assertEquals(53, Node.INPUT_ID);
278:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
279:       assertEquals(55, Node.INFERRED_FUNCTION);
280:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
281:       assertEquals(12, Node.COLUMN_BITS);
282:       assertEquals(4095, Node.COLUMN_MASK);
283:       assertEquals(32, Node.INCRDECR_PROP);
284:       assertEquals(1, Node.DECR_FLAG);
285:       assertEquals(49, Node.DIRECT_EVAL);
286:       assertEquals(37, Node.OPT_ARG_NAME);
287:       assertEquals(48, Node.DIRECTIVES);
288:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
289:       assertEquals(40, Node.ORIGINALNAME_PROP);
290:       assertEquals(57, Node.REFLECTED_OBJECT);
291:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
292:       assertEquals(54, Node.SLASH_V);
293:       assertEquals(15, Node.NO_SIDE_EFFECTS);
294:       assertEquals(8, Node.FLAG_NO_THROWS);
295:       assertEquals(39, Node.EMPTY_BLOCK);
296:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
297:       assertEquals(50, Node.FREE_CALL);
298:       assertEquals(52, Node.LENGTH);
299:       assertEquals(51, Node.STATIC_SOURCE_FILE);
300:       assertEquals(57, Node.LAST_PROP);
301:       assertEquals(46, Node.IS_NAMESPACE);
302:       assertEquals(43, Node.IS_CONSTANT_NAME);
303:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
304:       assertEquals(2, Node.POST_FLAG);
305:       assertEquals(47, Node.IS_DISPATCHER);
306:       assertEquals(30, Node.VAR_ARGS_NAME);
307:       assertNotNull(node1);
308:       assertFalse(node1.equals((Object)node0));
309:       assertFalse(node1.isTry());
310:       assertFalse(node1.isVoid());
311:       assertFalse(node1.isDebugger());
312:       assertFalse(node1.isDefaultCase());
313:       assertFalse(node1.isTrue());
314:       assertFalse(node1.isFor());
315:       assertFalse(node1.isDelProp());
316:       assertFalse(node1.isRegExp());
317:       assertFalse(node1.isArrayLit());
318:       assertFalse(node1.isFunction());
319:       assertFalse(node1.isCatch());
320:       assertFalse(node1.isParamList());
321:       assertFalse(node1.isCase());
322:       assertFalse(node1.isGetterDef());
323:       assertFalse(node1.isString());
324:       assertFalse(node1.isBlock());
325:       assertFalse(node1.isHook());
326:       assertFalse(node1.isThrow());
327:       assertFalse(node1.isFalse());
328:       assertFalse(node1.hasMoreThanOneChild());
329:       assertFalse(node1.isContinue());
330:       assertEquals((-1), node1.getLineno());
331:       assertFalse(node1.isNE());
332:       assertFalse(node1.isIf());
333:       assertFalse(node1.isInc());
334:       assertFalse(node1.isSetterDef());
335:       assertFalse(node1.isIn());
336:       assertFalse(node1.hasOneChild());
337:       assertFalse(node1.isLabelName());
338:       assertFalse(node1.isAssign());
339:       assertFalse(node1.isGetElem());
340:       assertFalse(node1.isWith());
341:       assertFalse(node1.hasChildren());
342:       assertFalse(node1.isDec());
343:       assertFalse(node1.isTypeOf());
344:       assertFalse(node1.isExprResult());
345:       assertFalse(node1.isInstanceOf());
346:       assertFalse(node1.isCast());
347:       assertFalse(node1.isReturn());
348:       assertFalse(node1.isGetProp());
349:       assertFalse(node1.isComma());
350:       assertEquals(3082, node1.getType());
351:       assertFalse(node1.isThis());
352:       assertFalse(node1.isAnd());
353:       assertFalse(node1.isNot());
354:       assertFalse(node1.isObjectLit());
355:       assertEquals((-1), node1.getSourcePosition());
356:       assertFalse(node1.isScript());
357:       assertFalse(node1.isNumber());
358:       assertFalse(node1.isAdd());
359:       assertEquals((-1), node1.getCharno());
360:       assertFalse(node1.isNew());
361:       assertFalse(node1.isVar());
362:       assertFalse(node1.isSwitch());
363:       assertFalse(node1.isWhile());
364:       assertFalse(node1.isStringKey());
365:       assertFalse(node1.isName());
366:       assertFalse(node1.isBreak());
367:       assertFalse(node1.isCall());
368:       assertFalse(node1.isLabel());
369:       assertFalse(node1.isAssignAdd());
370:       assertFalse(node1.isOr());
371:       assertEquals(0, node1.getChildCount());
372:       assertFalse(node1.isNull());
373:       assertFalse(node1.isEmpty());
374:       assertFalse(node1.isDo());
375:       
376:       Node node2 = new Node(43, node1);
377:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
378:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
379:       assertEquals(56, Node.CHANGE_TIME);
380:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
381:       assertEquals(36, Node.QUOTED_PROP);
382:       assertEquals(29, Node.JSDOC_INFO_PROP);
383:       assertEquals(53, Node.INPUT_ID);
384:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
385:       assertEquals(55, Node.INFERRED_FUNCTION);
386:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
387:       assertEquals(12, Node.COLUMN_BITS);
388:       assertEquals(4095, Node.COLUMN_MASK);
389:       assertEquals(32, Node.INCRDECR_PROP);
390:       assertEquals(1, Node.DECR_FLAG);
391:       assertEquals(49, Node.DIRECT_EVAL);
392:       assertEquals(37, Node.OPT_ARG_NAME);
393:       assertEquals(48, Node.DIRECTIVES);
394:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
395:       assertEquals(40, Node.ORIGINALNAME_PROP);
396:       assertEquals(57, Node.REFLECTED_OBJECT);
397:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
398:       assertEquals(54, Node.SLASH_V);
399:       assertEquals(15, Node.NO_SIDE_EFFECTS);
400:       assertEquals(8, Node.FLAG_NO_THROWS);
401:       assertEquals(39, Node.EMPTY_BLOCK);
402:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
403:       assertEquals(50, Node.FREE_CALL);
404:       assertEquals(52, Node.LENGTH);
405:       assertEquals(51, Node.STATIC_SOURCE_FILE);
406:       assertEquals(57, Node.LAST_PROP);
407:       assertEquals(46, Node.IS_NAMESPACE);
408:       assertEquals(43, Node.IS_CONSTANT_NAME);
409:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
410:       assertEquals(2, Node.POST_FLAG);
411:       assertEquals(47, Node.IS_DISPATCHER);
412:       assertEquals(30, Node.VAR_ARGS_NAME);
413:       assertEquals(56, Node.CHANGE_TIME);
414:       assertEquals(47, Node.IS_DISPATCHER);
415:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
416:       assertEquals(29, Node.JSDOC_INFO_PROP);
417:       assertEquals(37, Node.OPT_ARG_NAME);
418:       assertEquals(32, Node.INCRDECR_PROP);
419:       assertEquals(51, Node.STATIC_SOURCE_FILE);
420:       assertEquals(46, Node.IS_NAMESPACE);
421:       assertEquals(53, Node.INPUT_ID);
422:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
423:       assertEquals(36, Node.QUOTED_PROP);
424:       assertEquals(1, Node.DECR_FLAG);
425:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
426:       assertEquals(49, Node.DIRECT_EVAL);
427:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
428:       assertEquals(4095, Node.COLUMN_MASK);
429:       assertEquals(12, Node.COLUMN_BITS);
430:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
431:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
432:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
433:       assertEquals(39, Node.EMPTY_BLOCK);
434:       assertEquals(48, Node.DIRECTIVES);
435:       assertEquals(55, Node.INFERRED_FUNCTION);
436:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
437:       assertEquals(57, Node.REFLECTED_OBJECT);
438:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
439:       assertEquals(52, Node.LENGTH);
440:       assertEquals(8, Node.FLAG_NO_THROWS);
441:       assertEquals(50, Node.FREE_CALL);
442:       assertEquals(15, Node.NO_SIDE_EFFECTS);
443:       assertEquals(57, Node.LAST_PROP);
444:       assertEquals(43, Node.IS_CONSTANT_NAME);
445:       assertEquals(54, Node.SLASH_V);
446:       assertEquals(40, Node.ORIGINALNAME_PROP);
447:       assertEquals(2, Node.POST_FLAG);
448:       assertEquals(30, Node.VAR_ARGS_NAME);
449:       assertNotNull(node2);
450:       assertFalse(node1.equals((Object)node0));
451:       assertFalse(node2.equals((Object)node0));
452:       assertFalse(node2.equals((Object)node1));
453:       assertFalse(node1.isTry());
454:       assertFalse(node1.isVoid());
455:       assertFalse(node1.isDebugger());
456:       assertFalse(node1.isDefaultCase());
457:       assertFalse(node1.isTrue());
458:       assertFalse(node1.isFor());
459:       assertFalse(node1.isDelProp());
460:       assertFalse(node1.isRegExp());
461:       assertFalse(node1.isArrayLit());
462:       assertFalse(node1.isFunction());
463:       assertFalse(node1.isCatch());
464:       assertFalse(node1.isParamList());
465:       assertFalse(node1.isCase());
466:       assertFalse(node1.isGetterDef());
467:       assertFalse(node1.isString());
468:       assertFalse(node1.isBlock());
469:       assertFalse(node1.isHook());
470:       assertFalse(node1.isThrow());
471:       assertFalse(node1.isFalse());
472:       assertFalse(node1.hasMoreThanOneChild());
473:       assertFalse(node1.isContinue());
474:       assertEquals((-1), node1.getLineno());
475:       assertFalse(node1.isNE());
476:       assertFalse(node1.isIf());
477:       assertFalse(node1.isInc());
478:       assertFalse(node1.isSetterDef());
479:       assertFalse(node1.isIn());
480:       assertFalse(node1.hasOneChild());
481:       assertFalse(node1.isLabelName());
482:       assertFalse(node1.isAssign());
483:       assertFalse(node1.isGetElem());
484:       assertFalse(node1.isWith());
485:       assertFalse(node1.hasChildren());
486:       assertFalse(node1.isDec());
487:       assertFalse(node1.isTypeOf());
488:       assertFalse(node1.isExprResult());
489:       assertFalse(node1.isInstanceOf());
490:       assertFalse(node1.isCast());
491:       assertFalse(node1.isReturn());
492:       assertFalse(node1.isGetProp());
493:       assertFalse(node1.isComma());
494:       assertEquals(3082, node1.getType());
495:       assertFalse(node1.isThis());
496:       assertFalse(node1.isAnd());
497:       assertFalse(node1.isNot());
498:       assertFalse(node1.isObjectLit());
499:       assertEquals((-1), node1.getSourcePosition());
500:       assertFalse(node1.isScript());
501:       assertFalse(node1.isNumber());
502:       assertFalse(node1.isAdd());
503:       assertEquals((-1), node1.getCharno());
504:       assertFalse(node1.isNew());
505:       assertFalse(node1.isVar());
506:       assertFalse(node1.isSwitch());
507:       assertFalse(node1.isWhile());
508:       assertFalse(node1.isStringKey());
509:       assertFalse(node1.isName());
510:       assertFalse(node1.isBreak());
511:       assertFalse(node1.isCall());
512:       assertFalse(node1.isLabel());
513:       assertFalse(node1.isAssignAdd());
514:       assertFalse(node1.isOr());
515:       assertEquals(0, node1.getChildCount());
516:       assertFalse(node1.isNull());
517:       assertFalse(node1.isEmpty());
518:       assertFalse(node1.isDo());
519:       assertFalse(node2.isEmpty());
520:       assertFalse(node2.isFor());
521:       assertTrue(node2.hasOneChild());
522:       assertFalse(node2.isIf());
523:       assertFalse(node2.isArrayLit());
524:       assertFalse(node2.isTry());
525:       assertFalse(node2.isDelProp());
526:       assertFalse(node2.isVoid());
527:       assertTrue(node2.hasChildren());
528:       assertEquals(1, node2.getChildCount());
529:       assertFalse(node2.isRegExp());
530:       assertFalse(node2.isFunction());
531:       assertFalse(node2.isCase());
532:       assertFalse(node2.isSwitch());
533:       assertEquals((-1), node2.getCharno());
534:       assertFalse(node2.isParamList());
535:       assertFalse(node2.isDebugger());
536:       assertFalse(node2.isString());
537:       assertFalse(node2.isGetterDef());
538:       assertFalse(node2.isStringKey());
539:       assertFalse(node2.isVar());
540:       assertFalse(node2.isCall());
541:       assertFalse(node2.isBreak());
542:       assertTrue(node2.isFalse());
543:       assertFalse(node2.isName());
544:       assertFalse(node2.isComma());
545:       assertFalse(node2.isDefaultCase());
546:       assertFalse(node2.isDo());
547:       assertFalse(node2.isAssignAdd());
548:       assertFalse(node2.isNew());
549:       assertFalse(node2.isNull());
550:       assertFalse(node2.isTrue());
551:       assertFalse(node2.isAdd());
552:       assertFalse(node2.isOr());
553:       assertFalse(node2.isCast());
554:       assertFalse(node2.isGetElem());
555:       assertFalse(node2.isLabelName());
556:       assertFalse(node2.isLabel());
557:       assertFalse(node2.isReturn());
558:       assertFalse(node2.isExprResult());
559:       assertFalse(node2.isDec());
560:       assertFalse(node2.isAssign());
561:       assertFalse(node2.hasMoreThanOneChild());
562:       assertFalse(node2.isWith());
563:       assertFalse(node2.isTypeOf());
564:       assertFalse(node2.isAnd());
565:       assertFalse(node2.isContinue());
566:       assertFalse(node2.isWhile());
567:       assertEquals(43, node2.getType());
568:       assertFalse(node2.isGetProp());
569:       assertFalse(node2.isScript());
570:       assertFalse(node2.isNumber());
571:       assertEquals((-1), node2.getSourcePosition());
572:       assertFalse(node2.isNot());
573:       assertFalse(node2.isObjectLit());
574:       assertFalse(node2.isThrow());
575:       assertFalse(node2.isThis());
576:       assertFalse(node2.isBlock());
577:       assertFalse(node2.isHook());
578:       assertFalse(node2.isInstanceOf());
579:       assertFalse(node2.isCatch());
580:       assertEquals((-1), node2.getLineno());
581:       assertFalse(node2.isNE());
582:       assertFalse(node2.isSetterDef());
583:       assertFalse(node2.isInc());
584:       assertFalse(node2.isIn());
585:       
586:       Iterable<Node> iterable0 = node0.children();
587:       assertFalse(iterable0.contains(node1));
588:       assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
589:       assertNotSame(node0, node1);
590:       assertNotSame(node0, node2);
591:       assertEquals(4095, Node.COLUMN_MASK);
592:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
593:       assertEquals(8, Node.FLAG_NO_THROWS);
594:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
595:       assertEquals(43, Node.IS_CONSTANT_NAME);
596:       assertEquals(40, Node.ORIGINALNAME_PROP);
597:       assertEquals(48, Node.DIRECTIVES);
598:       assertEquals(54, Node.SLASH_V);
599:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
600:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
601:       assertEquals(50, Node.FREE_CALL);
602:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
603:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
604:       assertEquals(1, Node.DECR_FLAG);
605:       assertEquals(32, Node.INCRDECR_PROP);
606:       assertEquals(46, Node.IS_NAMESPACE);
607:       assertEquals(2, Node.POST_FLAG);
608:       assertEquals(12, Node.COLUMN_BITS);
609:       assertEquals(47, Node.IS_DISPATCHER);
610:       assertEquals(51, Node.STATIC_SOURCE_FILE);
611:       assertEquals(30, Node.VAR_ARGS_NAME);
612:       assertEquals(49, Node.DIRECT_EVAL);
613:       assertEquals(56, Node.CHANGE_TIME);
614:       assertEquals(37, Node.OPT_ARG_NAME);
615:       assertEquals(52, Node.LENGTH);
616:       assertEquals(53, Node.INPUT_ID);
617:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
618:       assertEquals(57, Node.REFLECTED_OBJECT);
619:       assertEquals(36, Node.QUOTED_PROP);
620:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
621:       assertEquals(29, Node.JSDOC_INFO_PROP);
622:       assertEquals(57, Node.LAST_PROP);
623:       assertEquals(55, Node.INFERRED_FUNCTION);
624:       assertEquals(39, Node.EMPTY_BLOCK);
625:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
626:       assertEquals(15, Node.NO_SIDE_EFFECTS);
627:       assertNotNull(iterable0);
628:       assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
629:       assertFalse(node0.equals((Object)node1));
630:       assertFalse(node0.equals((Object)node2));
631:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
632:       assertEquals(0, vector0.size());
633:       assertEquals("[]", vector0.toString());
634:       assertTrue(vector0.isEmpty());
635:       assertEquals(10, vector0.capacity());
636:       assertEquals(83, node0.getType());
637:       assertFalse(node0.isThis());
638:       assertFalse(node0.isFalse());
639:       assertFalse(node0.isComma());
640:       assertFalse(node0.isHook());
641:       assertTrue(node0.isParamList());
642:       assertFalse(node0.isObjectLit());
643:       assertFalse(node0.isThrow());
644:       assertFalse(node0.isGetProp());
645:       assertFalse(node0.isScript());
646:       assertFalse(node0.isSwitch());
647:       assertFalse(node0.isString());
648:       assertFalse(node0.isNot());
649:       assertEquals((-1), node0.getCharno());
650:       assertFalse(node0.isCast());
651:       assertFalse(node0.isAnd());
652:       assertFalse(node0.isLabelName());
653:       assertFalse(node0.isTypeOf());
654:       assertFalse(node0.isLabel());
655:       assertFalse(node0.isOr());
656:       assertFalse(node0.isAssign());
657:       assertFalse(node0.isReturn());
658:       assertFalse(node0.hasChildren());
659:       assertFalse(node0.isDec());
660:       assertEquals((-1), node0.getSourcePosition());
661:       assertFalse(node0.isEmpty());
662:       assertFalse(node0.isDo());
663:       assertFalse(node0.isAssignAdd());
664:       assertFalse(node0.isTrue());
665:       assertFalse(node0.isExprResult());
666:       assertFalse(node0.isWhile());
667:       assertFalse(node0.isCall());
668:       assertFalse(node0.isDelProp());
669:       assertFalse(node0.isName());
670:       assertFalse(node0.isGetElem());
671:       assertFalse(node0.isVoid());
672:       assertFalse(node0.isBreak());
673:       assertFalse(node0.isNull());
674:       assertFalse(node0.isSetterDef());
675:       assertEquals(0, node0.getChildCount());
676:       assertFalse(node0.isVar());
677:       assertFalse(node0.isAdd());
678:       assertFalse(node0.isNew());
679:       assertFalse(node0.isFunction());
680:       assertFalse(node0.isDefaultCase());
681:       assertFalse(node0.isDebugger());
682:       assertFalse(node0.isContinue());
683:       assertFalse(node0.isStringKey());
684:       assertFalse(node0.isArrayLit());
685:       assertFalse(node0.isNE());
686:       assertFalse(node0.isNumber());
687:       assertFalse(node0.isIf());
688:       assertFalse(node0.isFor());
689:       assertFalse(node0.isGetterDef());
690:       assertFalse(node0.isIn());
691:       assertFalse(node0.isTry());
692:       assertFalse(node0.isCase());
693:       assertFalse(node0.hasOneChild());
694:       assertFalse(node0.isInc());
695:       assertFalse(node0.isRegExp());
696:       assertFalse(node0.isWith());
697:       assertFalse(node0.isBlock());
698:       assertFalse(node0.hasMoreThanOneChild());
699:       assertFalse(node0.isCatch());
700:       assertFalse(node0.isInstanceOf());
701:       assertEquals((-1), node0.getLineno());
702:       
703:       boolean boolean1 = node1.isGetProp();
704:       assertFalse(boolean1);
705:       assertNotSame(node1, node0);
706:       assertNotSame(node1, node2);
707:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
708:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
709:       assertEquals(56, Node.CHANGE_TIME);
710:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
711:       assertEquals(36, Node.QUOTED_PROP);
712:       assertEquals(29, Node.JSDOC_INFO_PROP);
713:       assertEquals(53, Node.INPUT_ID);
714:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
715:       assertEquals(55, Node.INFERRED_FUNCTION);
716:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
717:       assertEquals(12, Node.COLUMN_BITS);
718:       assertEquals(4095, Node.COLUMN_MASK);
719:       assertEquals(32, Node.INCRDECR_PROP);
720:       assertEquals(1, Node.DECR_FLAG);
721:       assertEquals(49, Node.DIRECT_EVAL);
722:       assertEquals(37, Node.OPT_ARG_NAME);
723:       assertEquals(48, Node.DIRECTIVES);
724:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
725:       assertEquals(40, Node.ORIGINALNAME_PROP);
726:       assertEquals(57, Node.REFLECTED_OBJECT);
727:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
728:       assertEquals(54, Node.SLASH_V);
729:       assertEquals(15, Node.NO_SIDE_EFFECTS);
730:       assertEquals(8, Node.FLAG_NO_THROWS);
731:       assertEquals(39, Node.EMPTY_BLOCK);
732:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
733:       assertEquals(50, Node.FREE_CALL);
734:       assertEquals(52, Node.LENGTH);
735:       assertEquals(51, Node.STATIC_SOURCE_FILE);
736:       assertEquals(57, Node.LAST_PROP);
737:       assertEquals(46, Node.IS_NAMESPACE);
738:       assertEquals(43, Node.IS_CONSTANT_NAME);
739:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
740:       assertEquals(2, Node.POST_FLAG);
741:       assertEquals(47, Node.IS_DISPATCHER);
742:       assertEquals(30, Node.VAR_ARGS_NAME);
743:       assertFalse(node1.equals((Object)node0));
744:       assertFalse(node1.equals((Object)node2));
745:       assertTrue(boolean1 == boolean0);
746:       assertFalse(node1.isTry());
747:       assertFalse(node1.isVoid());
748:       assertFalse(node1.isDebugger());
749:       assertFalse(node1.isDefaultCase());
750:       assertFalse(node1.isTrue());
751:       assertFalse(node1.isFor());
752:       assertFalse(node1.isDelProp());
753:       assertFalse(node1.isRegExp());
754:       assertFalse(node1.isArrayLit());
755:       assertFalse(node1.isFunction());
756:       assertFalse(node1.isCatch());
757:       assertFalse(node1.isParamList());
758:       assertFalse(node1.isCase());
759:       assertFalse(node1.isGetterDef());
760:       assertFalse(node1.isString());
761:       assertFalse(node1.isBlock());
762:       assertFalse(node1.isHook());
763:       assertFalse(node1.isThrow());
764:       assertFalse(node1.isFalse());
765:       assertFalse(node1.hasMoreThanOneChild());
766:       assertFalse(node1.isContinue());
767:       assertEquals((-1), node1.getLineno());
768:       assertFalse(node1.isNE());
769:       assertFalse(node1.isIf());
770:       assertFalse(node1.isInc());
771:       assertFalse(node1.isSetterDef());
772:       assertFalse(node1.isIn());
773:       assertFalse(node1.hasOneChild());
774:       assertFalse(node1.isLabelName());
775:       assertFalse(node1.isAssign());
776:       assertFalse(node1.isGetElem());
777:       assertFalse(node1.isWith());
778:       assertFalse(node1.hasChildren());
779:       assertFalse(node1.isDec());
780:       assertFalse(node1.isTypeOf());
781:       assertFalse(node1.isExprResult());
782:       assertFalse(node1.isInstanceOf());
783:       assertFalse(node1.isCast());
784:       assertFalse(node1.isReturn());
785:       assertFalse(node1.isGetProp());
786:       assertFalse(node1.isComma());
787:       assertEquals(3082, node1.getType());
788:       assertFalse(node1.isThis());
789:       assertFalse(node1.isAnd());
790:       assertFalse(node1.isNot());
791:       assertFalse(node1.isObjectLit());
792:       assertEquals((-1), node1.getSourcePosition());
793:       assertFalse(node1.isScript());
794:       assertFalse(node1.isNumber());
795:       assertFalse(node1.isAdd());
796:       assertEquals((-1), node1.getCharno());
797:       assertFalse(node1.isNew());
798:       assertFalse(node1.isVar());
799:       assertFalse(node1.isSwitch());
800:       assertFalse(node1.isWhile());
801:       assertFalse(node1.isStringKey());
802:       assertFalse(node1.isName());
803:       assertFalse(node1.isBreak());
804:       assertFalse(node1.isCall());
805:       assertFalse(node1.isLabel());
806:       assertFalse(node1.isAssignAdd());
807:       assertFalse(node1.isOr());
808:       assertEquals(0, node1.getChildCount());
809:       assertFalse(node1.isNull());
810:       assertFalse(node1.isEmpty());
811:       assertFalse(node1.isDo());
812:       
813:       boolean boolean2 = node1.isParamList();
814:       assertFalse(boolean2);
815:       assertNotSame(node1, node0);
816:       assertNotSame(node1, node2);
817:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
818:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
819:       assertEquals(56, Node.CHANGE_TIME);
820:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
821:       assertEquals(36, Node.QUOTED_PROP);
822:       assertEquals(29, Node.JSDOC_INFO_PROP);
823:       assertEquals(53, Node.INPUT_ID);
824:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
825:       assertEquals(55, Node.INFERRED_FUNCTION);
826:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
827:       assertEquals(12, Node.COLUMN_BITS);
828:       assertEquals(4095, Node.COLUMN_MASK);
829:       assertEquals(32, Node.INCRDECR_PROP);
830:       assertEquals(1, Node.DECR_FLAG);
831:       assertEquals(49, Node.DIRECT_EVAL);
832:       assertEquals(37, Node.OPT_ARG_NAME);
833:       assertEquals(48, Node.DIRECTIVES);
834:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
835:       assertEquals(40, Node.ORIGINALNAME_PROP);
836:       assertEquals(57, Node.REFLECTED_OBJECT);
837:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
838:       assertEquals(54, Node.SLASH_V);
839:       assertEquals(15, Node.NO_SIDE_EFFECTS);
840:       assertEquals(8, Node.FLAG_NO_THROWS);
841:       assertEquals(39, Node.EMPTY_BLOCK);
842:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
843:       assertEquals(50, Node.FREE_CALL);
844:       assertEquals(52, Node.LENGTH);
845:       assertEquals(51, Node.STATIC_SOURCE_FILE);
846:       assertEquals(57, Node.LAST_PROP);
847:       assertEquals(46, Node.IS_NAMESPACE);
848:       assertEquals(43, Node.IS_CONSTANT_NAME);
849:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
850:       assertEquals(2, Node.POST_FLAG);
851:       assertEquals(47, Node.IS_DISPATCHER);
852:       assertEquals(30, Node.VAR_ARGS_NAME);
853:       assertFalse(node1.equals((Object)node0));
854:       assertFalse(node1.equals((Object)node2));
855:       assertTrue(boolean2 == boolean0);
856:       assertTrue(boolean2 == boolean1);
857:       assertFalse(node1.isTry());
858:       assertFalse(node1.isVoid());
859:       assertFalse(node1.isDebugger());
860:       assertFalse(node1.isDefaultCase());
861:       assertFalse(node1.isTrue());
862:       assertFalse(node1.isFor());
863:       assertFalse(node1.isDelProp());
864:       assertFalse(node1.isRegExp());
865:       assertFalse(node1.isArrayLit());
866:       assertFalse(node1.isFunction());
867:       assertFalse(node1.isCatch());
868:       assertFalse(node1.isParamList());
869:       assertFalse(node1.isCase());
870:       assertFalse(node1.isGetterDef());
871:       assertFalse(node1.isString());
872:       assertFalse(node1.isBlock());
873:       assertFalse(node1.isHook());
874:       assertFalse(node1.isThrow());
875:       assertFalse(node1.isFalse());
876:       assertFalse(node1.hasMoreThanOneChild());
877:       assertFalse(node1.isContinue());
878:       assertEquals((-1), node1.getLineno());
879:       assertFalse(node1.isNE());
880:       assertFalse(node1.isIf());
881:       assertFalse(node1.isInc());
882:       assertFalse(node1.isSetterDef());
883:       assertFalse(node1.isIn());
884:       assertFalse(node1.hasOneChild());
885:       assertFalse(node1.isLabelName());
886:       assertFalse(node1.isAssign());
887:       assertFalse(node1.isGetElem());
888:       assertFalse(node1.isWith());
889:       assertFalse(node1.hasChildren());
890:       assertFalse(node1.isDec());
891:       assertFalse(node1.isTypeOf());
892:       assertFalse(node1.isExprResult());
893:       assertFalse(node1.isInstanceOf());
894:       assertFalse(node1.isCast());
895:       assertFalse(node1.isReturn());
896:       assertFalse(node1.isGetProp());
897:       assertFalse(node1.isComma());
898:       assertEquals(3082, node1.getType());
899:       assertFalse(node1.isThis());
900:       assertFalse(node1.isAnd());
901:       assertFalse(node1.isNot());
902:       assertFalse(node1.isObjectLit());
903:       assertEquals((-1), node1.getSourcePosition());
904:       assertFalse(node1.isScript());
905:       assertFalse(node1.isNumber());
906:       assertFalse(node1.isAdd());
907:       assertEquals((-1), node1.getCharno());
908:       assertFalse(node1.isNew());
909:       assertFalse(node1.isVar());
910:       assertFalse(node1.isSwitch());
911:       assertFalse(node1.isWhile());
912:       assertFalse(node1.isStringKey());
913:       assertFalse(node1.isName());
914:       assertFalse(node1.isBreak());
915:       assertFalse(node1.isCall());
916:       assertFalse(node1.isLabel());
917:       assertFalse(node1.isAssignAdd());
918:       assertFalse(node1.isOr());
919:       assertEquals(0, node1.getChildCount());
920:       assertFalse(node1.isNull());
921:       assertFalse(node1.isEmpty());
922:       assertFalse(node1.isDo());
923:       
924:       boolean boolean3 = node2.isSetterDef();
925:       assertFalse(boolean3);
926:       assertNotSame(node1, node0);
927:       assertNotSame(node1, node2);
928:       assertNotSame(node2, node0);
929:       assertNotSame(node2, node1);
930:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
931:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
932:       assertEquals(56, Node.CHANGE_TIME);
933:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
934:       assertEquals(36, Node.QUOTED_PROP);
935:       assertEquals(29, Node.JSDOC_INFO_PROP);
936:       assertEquals(53, Node.INPUT_ID);
937:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
938:       assertEquals(55, Node.INFERRED_FUNCTION);
939:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
940:       assertEquals(12, Node.COLUMN_BITS);
941:       assertEquals(4095, Node.COLUMN_MASK);
942:       assertEquals(32, Node.INCRDECR_PROP);
943:       assertEquals(1, Node.DECR_FLAG);
944:       assertEquals(49, Node.DIRECT_EVAL);
945:       assertEquals(37, Node.OPT_ARG_NAME);
946:       assertEquals(48, Node.DIRECTIVES);
947:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
948:       assertEquals(40, Node.ORIGINALNAME_PROP);
949:       assertEquals(57, Node.REFLECTED_OBJECT);
950:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
951:       assertEquals(54, Node.SLASH_V);
952:       assertEquals(15, Node.NO_SIDE_EFFECTS);
953:       assertEquals(8, Node.FLAG_NO_THROWS);
954:       assertEquals(39, Node.EMPTY_BLOCK);
955:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
956:       assertEquals(50, Node.FREE_CALL);
957:       assertEquals(52, Node.LENGTH);
958:       assertEquals(51, Node.STATIC_SOURCE_FILE);
959:       assertEquals(57, Node.LAST_PROP);
960:       assertEquals(46, Node.IS_NAMESPACE);
961:       assertEquals(43, Node.IS_CONSTANT_NAME);
962:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
963:       assertEquals(2, Node.POST_FLAG);
964:       assertEquals(47, Node.IS_DISPATCHER);
965:       assertEquals(30, Node.VAR_ARGS_NAME);
966:       assertEquals(56, Node.CHANGE_TIME);
967:       assertEquals(47, Node.IS_DISPATCHER);
968:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
969:       assertEquals(29, Node.JSDOC_INFO_PROP);
970:       assertEquals(37, Node.OPT_ARG_NAME);
971:       assertEquals(32, Node.INCRDECR_PROP);
972:       assertEquals(51, Node.STATIC_SOURCE_FILE);
973:       assertEquals(46, Node.IS_NAMESPACE);
974:       assertEquals(53, Node.INPUT_ID);
975:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
976:       assertEquals(36, Node.QUOTED_PROP);
977:       assertEquals(1, Node.DECR_FLAG);
978:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
979:       assertEquals(49, Node.DIRECT_EVAL);
980:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
981:       assertEquals(4095, Node.COLUMN_MASK);
982:       assertEquals(12, Node.COLUMN_BITS);
983:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
984:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
985:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
986:       assertEquals(39, Node.EMPTY_BLOCK);
987:       assertEquals(48, Node.DIRECTIVES);
988:       assertEquals(55, Node.INFERRED_FUNCTION);
989:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
990:       assertEquals(57, Node.REFLECTED_OBJECT);
991:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
992:       assertEquals(52, Node.LENGTH);
993:       assertEquals(8, Node.FLAG_NO_THROWS);
994:       assertEquals(50, Node.FREE_CALL);
995:       assertEquals(15, Node.NO_SIDE_EFFECTS);
996:       assertEquals(57, Node.LAST_PROP);
997:       assertEquals(43, Node.IS_CONSTANT_NAME);
998:       assertEquals(54, Node.SLASH_V);
999:       assertEquals(40, Node.ORIGINALNAME_PROP);
1000:       assertEquals(2, Node.POST_FLAG);
1001:       assertEquals(30, Node.VAR_ARGS_NAME);
1002:       assertFalse(node1.equals((Object)node0));
1003:       assertFalse(node1.equals((Object)node2));
1004:       assertFalse(node2.equals((Object)node0));
1005:       assertFalse(node2.equals((Object)node1));
1006:       assertTrue(boolean3 == boolean1);
1007:       assertTrue(boolean3 == boolean2);
1008:       assertTrue(boolean3 == boolean0);
1009:       assertFalse(node1.isTry());
1010:       assertFalse(node1.isVoid());
1011:       assertFalse(node1.isDebugger());
1012:       assertFalse(node1.isDefaultCase());
1013:       assertFalse(node1.isTrue());
1014:       assertFalse(node1.isFor());
1015:       assertFalse(node1.isDelProp());
1016:       assertFalse(node1.isRegExp());
1017:       assertFalse(node1.isArrayLit());
1018:       assertFalse(node1.isFunction());
1019:       assertFalse(node1.isCatch());
1020:       assertFalse(node1.isParamList());
1021:       assertFalse(node1.isCase());
1022:       assertFalse(node1.isGetterDef());
1023:       assertFalse(node1.isString());
1024:       assertFalse(node1.isBlock());
1025:       assertFalse(node1.isHook());
1026:       assertFalse(node1.isThrow());
1027:       assertFalse(node1.isFalse());
1028:       assertFalse(node1.hasMoreThanOneChild());
1029:       assertFalse(node1.isContinue());
1030:       assertEquals((-1), node1.getLineno());
1031:       assertFalse(node1.isNE());
1032:       assertFalse(node1.isIf());
1033:       assertFalse(node1.isInc());
1034:       assertFalse(node1.isSetterDef());
1035:       assertFalse(node1.isIn());
1036:       assertFalse(node1.hasOneChild());
1037:       assertFalse(node1.isLabelName());
1038:       assertFalse(node1.isAssign());
1039:       assertFalse(node1.isGetElem());
1040:       assertFalse(node1.isWith());
1041:       assertFalse(node1.hasChildren());
1042:       assertFalse(node1.isDec());
1043:       assertFalse(node1.isTypeOf());
1044:       assertFalse(node1.isExprResult());
1045:       assertFalse(node1.isInstanceOf());
1046:       assertFalse(node1.isCast());
1047:       assertFalse(node1.isReturn());
1048:       assertFalse(node1.isGetProp());
1049:       assertFalse(node1.isComma());
1050:       assertEquals(3082, node1.getType());
1051:       assertFalse(node1.isThis());
1052:       assertFalse(node1.isAnd());
1053:       assertFalse(node1.isNot());
1054:       assertFalse(node1.isObjectLit());
1055:       assertEquals((-1), node1.getSourcePosition());
1056:       assertFalse(node1.isScript());
1057:       assertFalse(node1.isNumber());
1058:       assertFalse(node1.isAdd());
1059:       assertEquals((-1), node1.getCharno());
1060:       assertFalse(node1.isNew());
1061:       assertFalse(node1.isVar());
1062:       assertFalse(node1.isSwitch());
1063:       assertFalse(node1.isWhile());
1064:       assertFalse(node1.isStringKey());
1065:       assertFalse(node1.isName());
1066:       assertFalse(node1.isBreak());
1067:       assertFalse(node1.isCall());
1068:       assertFalse(node1.isLabel());
1069:       assertFalse(node1.isAssignAdd());
1070:       assertFalse(node1.isOr());
1071:       assertEquals(0, node1.getChildCount());
1072:       assertFalse(node1.isNull());
1073:       assertFalse(node1.isEmpty());
1074:       assertFalse(node1.isDo());
1075:       assertFalse(node2.isEmpty());
1076:       assertFalse(node2.isFor());
1077:       assertTrue(node2.hasOneChild());
1078:       assertFalse(node2.isIf());
1079:       assertFalse(node2.isArrayLit());
1080:       assertFalse(node2.isTry());
1081:       assertFalse(node2.isDelProp());
1082:       assertFalse(node2.isVoid());
1083:       assertTrue(node2.hasChildren());
1084:       assertEquals(1, node2.getChildCount());
1085:       assertFalse(node2.isRegExp());
1086:       assertFalse(node2.isFunction());
1087:       assertFalse(node2.isCase());
1088:       assertFalse(node2.isSwitch());
1089:       assertEquals((-1), node2.getCharno());
1090:       assertFalse(node2.isParamList());
1091:       assertFalse(node2.isDebugger());
1092:       assertFalse(node2.isString());
1093:       assertFalse(node2.isGetterDef());
1094:       assertFalse(node2.isStringKey());
1095:       assertFalse(node2.isVar());
1096:       assertFalse(node2.isCall());
1097:       assertFalse(node2.isBreak());
1098:       assertTrue(node2.isFalse());
1099:       assertFalse(node2.isName());
1100:       assertFalse(node2.isComma());
1101:       assertFalse(node2.isDefaultCase());
1102:       assertFalse(node2.isDo());
1103:       assertFalse(node2.isAssignAdd());
1104:       assertFalse(node2.isNew());
1105:       assertFalse(node2.isNull());
1106:       assertFalse(node2.isTrue());
1107:       assertFalse(node2.isAdd());
1108:       assertFalse(node2.isOr());
1109:       assertFalse(node2.isCast());
1110:       assertFalse(node2.isGetElem());
1111:       assertFalse(node2.isLabelName());
1112:       assertFalse(node2.isLabel());
1113:       assertFalse(node2.isReturn());
1114:       assertFalse(node2.isExprResult());
1115:       assertFalse(node2.isDec());
1116:       assertFalse(node2.isAssign());
1117:       assertFalse(node2.hasMoreThanOneChild());
1118:       assertFalse(node2.isWith());
1119:       assertFalse(node2.isTypeOf());
1120:       assertFalse(node2.isAnd());
1121:       assertFalse(node2.isContinue());
1122:       assertFalse(node2.isWhile());
1123:       assertEquals(43, node2.getType());
1124:       assertFalse(node2.isGetProp());
1125:       assertFalse(node2.isScript());
1126:       assertFalse(node2.isNumber());
1127:       assertEquals((-1), node2.getSourcePosition());
1128:       assertFalse(node2.isNot());
1129:       assertFalse(node2.isObjectLit());
1130:       assertFalse(node2.isThrow());
1131:       assertFalse(node2.isThis());
1132:       assertFalse(node2.isBlock());
1133:       assertFalse(node2.isHook());
1134:       assertFalse(node2.isInstanceOf());
1135:       assertFalse(node2.isCatch());
1136:       assertEquals((-1), node2.getLineno());
1137:       assertFalse(node2.isNE());
1138:       assertFalse(node2.isSetterDef());
1139:       assertFalse(node2.isInc());
1140:       assertFalse(node2.isIn());
1141:       
1142:       Node node3 = Node.newString("v");
1143:       assertEquals(48, Node.DIRECTIVES);
1144:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1145:       assertEquals(39, Node.EMPTY_BLOCK);
1146:       assertEquals(40, Node.ORIGINALNAME_PROP);
1147:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1148:       assertEquals(4095, Node.COLUMN_MASK);
1149:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1150:       assertEquals(53, Node.INPUT_ID);
1151:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1152:       assertEquals(57, Node.LAST_PROP);
1153:       assertEquals(49, Node.DIRECT_EVAL);
1154:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1155:       assertEquals(55, Node.INFERRED_FUNCTION);
1156:       assertEquals(29, Node.JSDOC_INFO_PROP);
1157:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1158:       assertEquals(57, Node.REFLECTED_OBJECT);
1159:       assertEquals(36, Node.QUOTED_PROP);
1160:       assertEquals(52, Node.LENGTH);
1161:       assertEquals(8, Node.FLAG_NO_THROWS);
1162:       assertEquals(37, Node.OPT_ARG_NAME);
1163:       assertEquals(46, Node.IS_NAMESPACE);
1164:       assertEquals(56, Node.CHANGE_TIME);
1165:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1166:       assertEquals(32, Node.INCRDECR_PROP);
1167:       assertEquals(12, Node.COLUMN_BITS);
1168:       assertEquals(47, Node.IS_DISPATCHER);
1169:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1170:       assertEquals(30, Node.VAR_ARGS_NAME);
1171:       assertEquals(2, Node.POST_FLAG);
1172:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1173:       assertEquals(54, Node.SLASH_V);
1174:       assertEquals(43, Node.IS_CONSTANT_NAME);
1175:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1176:       assertEquals(1, Node.DECR_FLAG);
1177:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1178:       assertEquals(50, Node.FREE_CALL);
1179:       assertNotNull(node3);
1180:       assertFalse(node3.equals((Object)node2));
1181:       assertFalse(node3.equals((Object)node0));
1182:       assertFalse(node3.equals((Object)node1));
1183:       assertFalse(node3.isSetterDef());
1184:       assertFalse(node3.isNull());
1185:       assertFalse(node3.isStringKey());
1186:       assertFalse(node3.isParamList());
1187:       assertFalse(node3.isName());
1188:       assertFalse(node3.isAdd());
1189:       assertFalse(node3.isWhile());
1190:       assertFalse(node3.isTrue());
1191:       assertTrue(node3.isString());
1192:       assertFalse(node3.isTry());
1193:       assertFalse(node3.isVoid());
1194:       assertEquals((-1), node3.getLineno());
1195:       assertFalse(node3.isReturn());
1196:       assertFalse(node3.isCatch());
1197:       assertFalse(node3.isCall());
1198:       assertFalse(node3.isBlock());
1199:       assertFalse(node3.hasMoreThanOneChild());
1200:       assertFalse(node3.isRegExp());
1201:       assertFalse(node3.isTypeOf());
1202:       assertFalse(node3.isIf());
1203:       assertFalse(node3.isDec());
1204:       assertFalse(node3.hasChildren());
1205:       assertEquals((-1), node3.getSourcePosition());
1206:       assertFalse(node3.isNE());
1207:       assertFalse(node3.isIn());
1208:       assertFalse(node3.isDebugger());
1209:       assertFalse(node3.isInc());
1210:       assertEquals(40, node3.getType());
1211:       assertFalse(node3.isAnd());
1212:       assertFalse(node3.isCast());
1213:       assertFalse(node3.isFalse());
1214:       assertFalse(node3.isContinue());
1215:       assertFalse(node3.isFunction());
1216:       assertFalse(node3.isBreak());
1217:       assertFalse(node3.isThis());
1218:       assertFalse(node3.isGetProp());
1219:       assertFalse(node3.isThrow());
1220:       assertEquals((-1), node3.getCharno());
1221:       assertFalse(node3.isNot());
1222:       assertFalse(node3.isObjectLit());
1223:       assertFalse(node3.isScript());
1224:       assertFalse(node3.isExprResult());
1225:       assertFalse(node3.isCase());
1226:       assertFalse(node3.isHook());
1227:       assertFalse(node3.isInstanceOf());
1228:       assertFalse(node3.isComma());
1229:       assertFalse(node3.isAssign());
1230:       assertFalse(node3.isWith());
1231:       assertFalse(node3.isNumber());
1232:       assertFalse(node3.isEmpty());
1233:       assertFalse(node3.isFor());
1234:       assertFalse(node3.isGetElem());
1235:       assertFalse(node3.isLabelName());
1236:       assertFalse(node3.isAssignAdd());
1237:       assertFalse(node3.isDelProp());
1238:       assertFalse(node3.hasOneChild());
1239:       assertFalse(node3.isOr());
1240:       assertFalse(node3.isGetterDef());
1241:       assertFalse(node3.isDefaultCase());
1242:       assertFalse(node3.isNew());
1243:       assertFalse(node3.isSwitch());
1244:       assertFalse(node3.isDo());
1245:       assertEquals(0, node3.getChildCount());
1246:       assertFalse(node3.isArrayLit());
1247:       assertFalse(node3.isVar());
1248:       assertFalse(node3.isLabel());
1249:       
1250:       Node node4 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) vector0);
1251:       assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
1252:       assertNotSame(node4, node2);
1253:       assertNotSame(node4, node1);
1254:       assertNotSame(node4, node0);
1255:       assertEquals(52, Node.LENGTH);
1256:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1257:       assertEquals(57, Node.REFLECTED_OBJECT);
1258:       assertEquals(40, Node.ORIGINALNAME_PROP);
1259:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1260:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1261:       assertEquals(49, Node.DIRECT_EVAL);
1262:       assertEquals(50, Node.FREE_CALL);
1263:       assertEquals(54, Node.SLASH_V);
1264:       assertEquals(32, Node.INCRDECR_PROP);
1265:       assertEquals(46, Node.IS_NAMESPACE);
1266:       assertEquals(48, Node.DIRECTIVES);
1267:       assertEquals(37, Node.OPT_ARG_NAME);
1268:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1269:       assertEquals(4095, Node.COLUMN_MASK);
1270:       assertEquals(1, Node.DECR_FLAG);
1271:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1272:       assertEquals(12, Node.COLUMN_BITS);
1273:       assertEquals(53, Node.INPUT_ID);
1274:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1275:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1276:       assertEquals(36, Node.QUOTED_PROP);
1277:       assertEquals(43, Node.IS_CONSTANT_NAME);
1278:       assertEquals(56, Node.CHANGE_TIME);
1279:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1280:       assertEquals(55, Node.INFERRED_FUNCTION);
1281:       assertEquals(8, Node.FLAG_NO_THROWS);
1282:       assertEquals(39, Node.EMPTY_BLOCK);
1283:       assertEquals(2, Node.POST_FLAG);
1284:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1285:       assertEquals(30, Node.VAR_ARGS_NAME);
1286:       assertEquals(29, Node.JSDOC_INFO_PROP);
1287:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1288:       assertEquals(47, Node.IS_DISPATCHER);
1289:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1290:       assertEquals(57, Node.LAST_PROP);
1291:       assertNotNull(node4);
1292:       assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
1293:       assertFalse(node4.equals((Object)node2));
1294:       assertFalse(node4.equals((Object)node1));
1295:       assertFalse(node4.equals((Object)node0));
1296:       assertFalse(node4.equals((Object)node3));
1297:       assertEquals(0, vector0.size());
1298:       assertEquals("[]", vector0.toString());
1299:       assertTrue(vector0.isEmpty());
1300:       assertEquals(10, vector0.capacity());
1301:       assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
1302:       assertFalse(node4.isNew());
1303:       assertFalse(node4.isAdd());
1304:       assertFalse(node4.isContinue());
1305:       assertFalse(node4.isVar());
1306:       assertFalse(node4.hasMoreThanOneChild());
1307:       assertFalse(node4.isReturn());
1308:       assertFalse(node4.isDo());
1309:       assertFalse(node4.isAssignAdd());
1310:       assertFalse(node4.isBlock());
1311:       assertFalse(node4.isWhile());
1312:       assertFalse(node4.isLabel());
1313:       assertEquals((-1), node4.getSourcePosition());
1314:       assertFalse(node4.isNumber());
1315:       assertFalse(node4.isCast());
1316:       assertFalse(node4.isLabelName());
1317:       assertFalse(node4.isStringKey());
1318:       assertFalse(node4.isRegExp());
1319:       assertFalse(node4.isScript());
1320:       assertFalse(node4.isFunction());
1321:       assertFalse(node4.isWith());
1322:       assertFalse(node4.hasOneChild());
1323:       assertFalse(node4.isFor());
1324:       assertFalse(node4.isTry());
1325:       assertFalse(node4.isNE());
1326:       assertFalse(node4.isThis());
1327:       assertFalse(node4.isSetterDef());
1328:       assertFalse(node4.isIn());
1329:       assertFalse(node4.isInstanceOf());
1330:       assertFalse(node4.isCatch());
1331:       assertEquals((-1), node4.getLineno());
1332:       assertFalse(node4.isIf());
1333:       assertFalse(node4.isSwitch());
1334:       assertFalse(node4.isInc());
1335:       assertEquals((-1), node4.getCharno());
1336:       assertFalse(node4.isString());
1337:       assertFalse(node4.isHook());
1338:       assertFalse(node4.isCase());
1339:       assertFalse(node4.isThrow());
1340:       assertFalse(node4.isGetProp());
1341:       assertFalse(node4.isGetterDef());
1342:       assertFalse(node4.isFalse());
1343:       assertTrue(node4.isParamList());
1344:       assertFalse(node4.isObjectLit());
1345:       assertFalse(node4.isArrayLit());
1346:       assertFalse(node4.isAnd());
1347:       assertFalse(node4.isVoid());
1348:       assertFalse(node4.isTrue());
1349:       assertFalse(node4.isExprResult());
1350:       assertFalse(node4.isDebugger());
1351:       assertFalse(node4.isNot());
1352:       assertEquals(0, node4.getChildCount());
1353:       assertFalse(node4.isDefaultCase());
1354:       assertFalse(node4.isComma());
1355:       assertEquals(83, node4.getType());
1356:       assertFalse(node4.isNull());
1357:       assertFalse(node4.isTypeOf());
1358:       assertFalse(node4.isBreak());
1359:       assertFalse(node4.isDec());
1360:       assertFalse(node4.hasChildren());
1361:       assertFalse(node4.isOr());
1362:       assertFalse(node4.isAssign());
1363:       assertFalse(node4.isEmpty());
1364:       assertFalse(node4.isGetElem());
1365:       assertFalse(node4.isCall());
1366:       assertFalse(node4.isDelProp());
1367:       assertFalse(node4.isName());
1368:       
1369:       boolean boolean4 = node4.isUnscopedQualifiedName();
1370:       assertFalse(boolean4);
1371:       assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
1372:       assertNotSame(node4, node2);
1373:       assertNotSame(node4, node1);
1374:       assertNotSame(node4, node0);
1375:       assertEquals(52, Node.LENGTH);
1376:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1377:       assertEquals(57, Node.REFLECTED_OBJECT);
1378:       assertEquals(40, Node.ORIGINALNAME_PROP);
1379:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1380:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1381:       assertEquals(49, Node.DIRECT_EVAL);
1382:       assertEquals(50, Node.FREE_CALL);
1383:       assertEquals(54, Node.SLASH_V);
1384:       assertEquals(32, Node.INCRDECR_PROP);
1385:       assertEquals(46, Node.IS_NAMESPACE);
1386:       assertEquals(48, Node.DIRECTIVES);
1387:       assertEquals(37, Node.OPT_ARG_NAME);
1388:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1389:       assertEquals(4095, Node.COLUMN_MASK);
1390:       assertEquals(1, Node.DECR_FLAG);
1391:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1392:       assertEquals(12, Node.COLUMN_BITS);
1393:       assertEquals(53, Node.INPUT_ID);
1394:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1395:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1396:       assertEquals(36, Node.QUOTED_PROP);
1397:       assertEquals(43, Node.IS_CONSTANT_NAME);
1398:       assertEquals(56, Node.CHANGE_TIME);
1399:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1400:       assertEquals(55, Node.INFERRED_FUNCTION);
1401:       assertEquals(8, Node.FLAG_NO_THROWS);
1402:       assertEquals(39, Node.EMPTY_BLOCK);
1403:       assertEquals(2, Node.POST_FLAG);
1404:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1405:       assertEquals(30, Node.VAR_ARGS_NAME);
1406:       assertEquals(29, Node.JSDOC_INFO_PROP);
1407:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1408:       assertEquals(47, Node.IS_DISPATCHER);
1409:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1410:       assertEquals(57, Node.LAST_PROP);
1411:       assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
1412:       assertFalse(node4.equals((Object)node2));
1413:       assertFalse(node4.equals((Object)node1));
1414:       assertFalse(node4.equals((Object)node0));
1415:       assertFalse(node4.equals((Object)node3));
1416:       assertTrue(boolean4 == boolean3);
1417:       assertTrue(boolean4 == boolean2);
1418:       assertTrue(boolean4 == boolean1);
1419:       assertTrue(boolean4 == boolean0);
1420:       assertEquals(0, vector0.size());
1421:       assertEquals("[]", vector0.toString());
1422:       assertTrue(vector0.isEmpty());
1423:       assertEquals(10, vector0.capacity());
1424:       assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
1425:       assertFalse(node4.isNew());
1426:       assertFalse(node4.isAdd());
1427:       assertFalse(node4.isContinue());
1428:       assertFalse(node4.isVar());
1429:       assertFalse(node4.hasMoreThanOneChild());
1430:       assertFalse(node4.isReturn());
1431:       assertFalse(node4.isDo());
1432:       assertFalse(node4.isAssignAdd());
1433:       assertFalse(node4.isBlock());
1434:       assertFalse(node4.isWhile());
1435:       assertFalse(node4.isLabel());
1436:       assertEquals((-1), node4.getSourcePosition());
1437:       assertFalse(node4.isNumber());
1438:       assertFalse(node4.isCast());
1439:       assertFalse(node4.isLabelName());
1440:       assertFalse(node4.isStringKey());
1441:       assertFalse(node4.isRegExp());
1442:       assertFalse(node4.isScript());
1443:       assertFalse(node4.isFunction());
1444:       assertFalse(node4.isWith());
1445:       assertFalse(node4.hasOneChild());
1446:       assertFalse(node4.isFor());
1447:       assertFalse(node4.isTry());
1448:       assertFalse(node4.isNE());
1449:       assertFalse(node4.isThis());
1450:       assertFalse(node4.isSetterDef());
1451:       assertFalse(node4.isIn());
1452:       assertFalse(node4.isInstanceOf());
1453:       assertFalse(node4.isCatch());
1454:       assertEquals((-1), node4.getLineno());
1455:       assertFalse(node4.isIf());
1456:       assertFalse(node4.isSwitch());
1457:       assertFalse(node4.isInc());
1458:       assertEquals((-1), node4.getCharno());
1459:       assertFalse(node4.isString());
1460:       assertFalse(node4.isHook());
1461:       assertFalse(node4.isCase());
1462:       assertFalse(node4.isThrow());
1463:       assertFalse(node4.isGetProp());
1464:       assertFalse(node4.isGetterDef());
1465:       assertFalse(node4.isFalse());
1466:       assertTrue(node4.isParamList());
1467:       assertFalse(node4.isObjectLit());
1468:       assertFalse(node4.isArrayLit());
1469:       assertFalse(node4.isAnd());
1470:       assertFalse(node4.isVoid());
1471:       assertFalse(node4.isTrue());
1472:       assertFalse(node4.isExprResult());
1473:       assertFalse(node4.isDebugger());
1474:       assertFalse(node4.isNot());
1475:       assertEquals(0, node4.getChildCount());
1476:       assertFalse(node4.isDefaultCase());
1477:       assertFalse(node4.isComma());
1478:       assertEquals(83, node4.getType());
1479:       assertFalse(node4.isNull());
1480:       assertFalse(node4.isTypeOf());
1481:       assertFalse(node4.isBreak());
1482:       assertFalse(node4.isDec());
1483:       assertFalse(node4.hasChildren());
1484:       assertFalse(node4.isOr());
1485:       assertFalse(node4.isAssign());
1486:       assertFalse(node4.isEmpty());
1487:       assertFalse(node4.isGetElem());
1488:       assertFalse(node4.isCall());
1489:       assertFalse(node4.isDelProp());
1490:       assertFalse(node4.isName());
1491:       
1492:       boolean boolean5 = node3.isWith();
1493:       assertFalse(boolean5);
1494:       assertEquals(48, Node.DIRECTIVES);
1495:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1496:       assertEquals(39, Node.EMPTY_BLOCK);
1497:       assertEquals(40, Node.ORIGINALNAME_PROP);
1498:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1499:       assertEquals(4095, Node.COLUMN_MASK);
1500:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1501:       assertEquals(53, Node.INPUT_ID);
1502:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1503:       assertEquals(57, Node.LAST_PROP);
1504:       assertEquals(49, Node.DIRECT_EVAL);
1505:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1506:       assertEquals(55, Node.INFERRED_FUNCTION);
1507:       assertEquals(29, Node.JSDOC_INFO_PROP);
1508:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1509:       assertEquals(57, Node.REFLECTED_OBJECT);
1510:       assertEquals(36, Node.QUOTED_PROP);
1511:       assertEquals(52, Node.LENGTH);
1512:       assertEquals(8, Node.FLAG_NO_THROWS);
1513:       assertEquals(37, Node.OPT_ARG_NAME);
1514:       assertEquals(46, Node.IS_NAMESPACE);
1515:       assertEquals(56, Node.CHANGE_TIME);
1516:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1517:       assertEquals(32, Node.INCRDECR_PROP);
1518:       assertEquals(12, Node.COLUMN_BITS);
1519:       assertEquals(47, Node.IS_DISPATCHER);
1520:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1521:       assertEquals(30, Node.VAR_ARGS_NAME);
1522:       assertEquals(2, Node.POST_FLAG);
1523:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1524:       assertEquals(54, Node.SLASH_V);
1525:       assertEquals(43, Node.IS_CONSTANT_NAME);
1526:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1527:       assertEquals(1, Node.DECR_FLAG);
1528:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1529:       assertEquals(50, Node.FREE_CALL);
1530:       assertTrue(boolean5 == boolean2);
1531:       assertTrue(boolean5 == boolean1);
1532:       assertTrue(boolean5 == boolean0);
1533:       assertTrue(boolean5 == boolean4);
1534:       assertTrue(boolean5 == boolean3);
1535:       assertFalse(node3.equals((Object)node2));
1536:       assertFalse(node3.equals((Object)node4));
1537:       assertFalse(node3.equals((Object)node0));
1538:       assertFalse(node3.equals((Object)node1));
1539:       assertFalse(node3.isSetterDef());
1540:       assertFalse(node3.isNull());
1541:       assertFalse(node3.isStringKey());
1542:       assertFalse(node3.isParamList());
1543:       assertFalse(node3.isName());
1544:       assertFalse(node3.isAdd());
1545:       assertFalse(node3.isWhile());
1546:       assertFalse(node3.isTrue());
1547:       assertTrue(node3.isString());
1548:       assertFalse(node3.isTry());
1549:       assertFalse(node3.isVoid());
1550:       assertEquals((-1), node3.getLineno());
1551:       assertFalse(node3.isReturn());
1552:       assertFalse(node3.isCatch());
1553:       assertFalse(node3.isCall());
1554:       assertFalse(node3.isBlock());
1555:       assertFalse(node3.hasMoreThanOneChild());
1556:       assertFalse(node3.isRegExp());
1557:       assertFalse(node3.isTypeOf());
1558:       assertFalse(node3.isIf());
1559:       assertFalse(node3.isDec());
1560:       assertFalse(node3.hasChildren());
1561:       assertEquals((-1), node3.getSourcePosition());
1562:       assertFalse(node3.isNE());
1563:       assertFalse(node3.isIn());
1564:       assertFalse(node3.isDebugger());
1565:       assertFalse(node3.isInc());
1566:       assertEquals(40, node3.getType());
1567:       assertFalse(node3.isAnd());
1568:       assertFalse(node3.isCast());
1569:       assertFalse(node3.isFalse());
1570:       assertFalse(node3.isContinue());
1571:       assertFalse(node3.isFunction());
1572:       assertFalse(node3.isBreak());
1573:       assertFalse(node3.isThis());
1574:       assertFalse(node3.isGetProp());
1575:       assertFalse(node3.isThrow());
1576:       assertEquals((-1), node3.getCharno());
1577:       assertFalse(node3.isNot());
1578:       assertFalse(node3.isObjectLit());
1579:       assertFalse(node3.isScript());
1580:       assertFalse(node3.isExprResult());
1581:       assertFalse(node3.isCase());
1582:       assertFalse(node3.isHook());
1583:       assertFalse(node3.isInstanceOf());
1584:       assertFalse(node3.isComma());
1585:       assertFalse(node3.isAssign());
1586:       assertFalse(node3.isWith());
1587:       assertFalse(node3.isNumber());
1588:       assertFalse(node3.isEmpty());
1589:       assertFalse(node3.isFor());
1590:       assertFalse(node3.isGetElem());
1591:       assertFalse(node3.isLabelName());
1592:       assertFalse(node3.isAssignAdd());
1593:       assertFalse(node3.isDelProp());
1594:       assertFalse(node3.hasOneChild());
1595:       assertFalse(node3.isOr());
1596:       assertFalse(node3.isGetterDef());
1597:       assertFalse(node3.isDefaultCase());
1598:       assertFalse(node3.isNew());
1599:       assertFalse(node3.isSwitch());
1600:       assertFalse(node3.isDo());
1601:       assertEquals(0, node3.getChildCount());
1602:       assertFalse(node3.isArrayLit());
1603:       assertFalse(node3.isVar());
1604:       assertFalse(node3.isLabel());
1605:       
1606:       node1.removeProp(57);
1607:       assertNotSame(node1, node0);
1608:       assertNotSame(node1, node2);
1609:       assertNotSame(node1, node4);
1610:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1611:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1612:       assertEquals(56, Node.CHANGE_TIME);
1613:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1614:       assertEquals(36, Node.QUOTED_PROP);
1615:       assertEquals(29, Node.JSDOC_INFO_PROP);
1616:       assertEquals(53, Node.INPUT_ID);
1617:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1618:       assertEquals(55, Node.INFERRED_FUNCTION);
1619:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1620:       assertEquals(12, Node.COLUMN_BITS);
1621:       assertEquals(4095, Node.COLUMN_MASK);
1622:       assertEquals(32, Node.INCRDECR_PROP);
1623:       assertEquals(1, Node.DECR_FLAG);
1624:       assertEquals(49, Node.DIRECT_EVAL);
1625:       assertEquals(37, Node.OPT_ARG_NAME);
1626:       assertEquals(48, Node.DIRECTIVES);
1627:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1628:       assertEquals(40, Node.ORIGINALNAME_PROP);
1629:       assertEquals(57, Node.REFLECTED_OBJECT);
1630:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1631:       assertEquals(54, Node.SLASH_V);
1632:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1633:       assertEquals(8, Node.FLAG_NO_THROWS);
1634:       assertEquals(39, Node.EMPTY_BLOCK);
1635:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1636:       assertEquals(50, Node.FREE_CALL);
1637:       assertEquals(52, Node.LENGTH);
1638:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1639:       assertEquals(57, Node.LAST_PROP);
1640:       assertEquals(46, Node.IS_NAMESPACE);
1641:       assertEquals(43, Node.IS_CONSTANT_NAME);
1642:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1643:       assertEquals(2, Node.POST_FLAG);
1644:       assertEquals(47, Node.IS_DISPATCHER);
1645:       assertEquals(30, Node.VAR_ARGS_NAME);
1646:       assertFalse(node1.equals((Object)node3));
1647:       assertFalse(node1.equals((Object)node0));
1648:       assertFalse(node1.equals((Object)node2));
1649:       assertFalse(node1.equals((Object)node4));
1650:       assertFalse(node1.isTry());
1651:       assertFalse(node1.isVoid());
1652:       assertFalse(node1.isDebugger());
1653:       assertFalse(node1.isDefaultCase());
1654:       assertFalse(node1.isTrue());
1655:       assertFalse(node1.isFor());
1656:       assertFalse(node1.isDelProp());
1657:       assertFalse(node1.isRegExp());
1658:       assertFalse(node1.isArrayLit());
1659:       assertFalse(node1.isFunction());
1660:       assertFalse(node1.isCatch());
1661:       assertFalse(node1.isParamList());
1662:       assertFalse(node1.isCase());
1663:       assertFalse(node1.isGetterDef());
1664:       assertFalse(node1.isString());
1665:       assertFalse(node1.isBlock());
1666:       assertFalse(node1.isHook());
1667:       assertFalse(node1.isThrow());
1668:       assertFalse(node1.isFalse());
1669:       assertFalse(node1.hasMoreThanOneChild());
1670:       assertFalse(node1.isContinue());
1671:       assertEquals((-1), node1.getLineno());
1672:       assertFalse(node1.isNE());
1673:       assertFalse(node1.isIf());
1674:       assertFalse(node1.isInc());
1675:       assertFalse(node1.isSetterDef());
1676:       assertFalse(node1.isIn());
1677:       assertFalse(node1.hasOneChild());
1678:       assertFalse(node1.isLabelName());
1679:       assertFalse(node1.isAssign());
1680:       assertFalse(node1.isGetElem());
1681:       assertFalse(node1.isWith());
1682:       assertFalse(node1.hasChildren());
1683:       assertFalse(node1.isDec());
1684:       assertFalse(node1.isTypeOf());
1685:       assertFalse(node1.isExprResult());
1686:       assertFalse(node1.isInstanceOf());
1687:       assertFalse(node1.isCast());
1688:       assertFalse(node1.isReturn());
1689:       assertFalse(node1.isGetProp());
1690:       assertFalse(node1.isComma());
1691:       assertEquals(3082, node1.getType());
1692:       assertFalse(node1.isThis());
1693:       assertFalse(node1.isAnd());
1694:       assertFalse(node1.isNot());
1695:       assertFalse(node1.isObjectLit());
1696:       assertEquals((-1), node1.getSourcePosition());
1697:       assertFalse(node1.isScript());
1698:       assertFalse(node1.isNumber());
1699:       assertFalse(node1.isAdd());
1700:       assertEquals((-1), node1.getCharno());
1701:       assertFalse(node1.isNew());
1702:       assertFalse(node1.isVar());
1703:       assertFalse(node1.isSwitch());
1704:       assertFalse(node1.isWhile());
1705:       assertFalse(node1.isStringKey());
1706:       assertFalse(node1.isName());
1707:       assertFalse(node1.isBreak());
1708:       assertFalse(node1.isCall());
1709:       assertFalse(node1.isLabel());
1710:       assertFalse(node1.isAssignAdd());
1711:       assertFalse(node1.isOr());
1712:       assertEquals(0, node1.getChildCount());
1713:       assertFalse(node1.isNull());
1714:       assertFalse(node1.isEmpty());
1715:       assertFalse(node1.isDo());
1716:       
1717:       String string0 = node3.getSourceFileName();
1718:       assertEquals(48, Node.DIRECTIVES);
1719:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1720:       assertEquals(39, Node.EMPTY_BLOCK);
1721:       assertEquals(40, Node.ORIGINALNAME_PROP);
1722:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1723:       assertEquals(4095, Node.COLUMN_MASK);
1724:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1725:       assertEquals(53, Node.INPUT_ID);
1726:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1727:       assertEquals(57, Node.LAST_PROP);
1728:       assertEquals(49, Node.DIRECT_EVAL);
1729:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1730:       assertEquals(55, Node.INFERRED_FUNCTION);
1731:       assertEquals(29, Node.JSDOC_INFO_PROP);
1732:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1733:       assertEquals(57, Node.REFLECTED_OBJECT);
1734:       assertEquals(36, Node.QUOTED_PROP);
1735:       assertEquals(52, Node.LENGTH);
1736:       assertEquals(8, Node.FLAG_NO_THROWS);
1737:       assertEquals(37, Node.OPT_ARG_NAME);
1738:       assertEquals(46, Node.IS_NAMESPACE);
1739:       assertEquals(56, Node.CHANGE_TIME);
1740:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1741:       assertEquals(32, Node.INCRDECR_PROP);
1742:       assertEquals(12, Node.COLUMN_BITS);
1743:       assertEquals(47, Node.IS_DISPATCHER);
1744:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1745:       assertEquals(30, Node.VAR_ARGS_NAME);
1746:       assertEquals(2, Node.POST_FLAG);
1747:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1748:       assertEquals(54, Node.SLASH_V);
1749:       assertEquals(43, Node.IS_CONSTANT_NAME);
1750:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1751:       assertEquals(1, Node.DECR_FLAG);
1752:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1753:       assertEquals(50, Node.FREE_CALL);
1754:       assertNull(string0);
1755:       assertFalse(node3.equals((Object)node2));
1756:       assertFalse(node3.equals((Object)node4));
1757:       assertFalse(node3.equals((Object)node0));
1758:       assertFalse(node3.equals((Object)node1));
1759:       assertFalse(node3.isSetterDef());
1760:       assertFalse(node3.isNull());
1761:       assertFalse(node3.isStringKey());
1762:       assertFalse(node3.isParamList());
1763:       assertFalse(node3.isName());
1764:       assertFalse(node3.isAdd());
1765:       assertFalse(node3.isWhile());
1766:       assertFalse(node3.isTrue());
1767:       assertTrue(node3.isString());
1768:       assertFalse(node3.isTry());
1769:       assertFalse(node3.isVoid());
1770:       assertEquals((-1), node3.getLineno());
1771:       assertFalse(node3.isReturn());
1772:       assertFalse(node3.isCatch());
1773:       assertFalse(node3.isCall());
1774:       assertFalse(node3.isBlock());
1775:       assertFalse(node3.hasMoreThanOneChild());
1776:       assertFalse(node3.isRegExp());
1777:       assertFalse(node3.isTypeOf());
1778:       assertFalse(node3.isIf());
1779:       assertFalse(node3.isDec());
1780:       assertFalse(node3.hasChildren());
1781:       assertEquals((-1), node3.getSourcePosition());
1782:       assertFalse(node3.isNE());
1783:       assertFalse(node3.isIn());
1784:       assertFalse(node3.isDebugger());
1785:       assertFalse(node3.isInc());
1786:       assertEquals(40, node3.getType());
1787:       assertFalse(node3.isAnd());
1788:       assertFalse(node3.isCast());
1789:       assertFalse(node3.isFalse());
1790:       assertFalse(node3.isContinue());
1791:       assertFalse(node3.isFunction());
1792:       assertFalse(node3.isBreak());
1793:       assertFalse(node3.isThis());
1794:       assertFalse(node3.isGetProp());
1795:       assertFalse(node3.isThrow());
1796:       assertEquals((-1), node3.getCharno());
1797:       assertFalse(node3.isNot());
1798:       assertFalse(node3.isObjectLit());
1799:       assertFalse(node3.isScript());
1800:       assertFalse(node3.isExprResult());
1801:       assertFalse(node3.isCase());
1802:       assertFalse(node3.isHook());
1803:       assertFalse(node3.isInstanceOf());
1804:       assertFalse(node3.isComma());
1805:       assertFalse(node3.isAssign());
1806:       assertFalse(node3.isWith());
1807:       assertFalse(node3.isNumber());
1808:       assertFalse(node3.isEmpty());
1809:       assertFalse(node3.isFor());
1810:       assertFalse(node3.isGetElem());
1811:       assertFalse(node3.isLabelName());
1812:       assertFalse(node3.isAssignAdd());
1813:       assertFalse(node3.isDelProp());
1814:       assertFalse(node3.hasOneChild());
1815:       assertFalse(node3.isOr());
1816:       assertFalse(node3.isGetterDef());
1817:       assertFalse(node3.isDefaultCase());
1818:       assertFalse(node3.isNew());
1819:       assertFalse(node3.isSwitch());
1820:       assertFalse(node3.isDo());
1821:       assertEquals(0, node3.getChildCount());
1822:       assertFalse(node3.isArrayLit());
1823:       assertFalse(node3.isVar());
1824:       assertFalse(node3.isLabel());
1825:       
1826:       boolean boolean6 = node0.isFor();
1827:       assertFalse(boolean6);
1828:       assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
1829:       assertNotSame(node0, node4);
1830:       assertNotSame(node0, node1);
1831:       assertNotSame(node0, node2);
1832:       assertEquals(4095, Node.COLUMN_MASK);
1833:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1834:       assertEquals(8, Node.FLAG_NO_THROWS);
1835:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1836:       assertEquals(43, Node.IS_CONSTANT_NAME);
1837:       assertEquals(40, Node.ORIGINALNAME_PROP);
1838:       assertEquals(48, Node.DIRECTIVES);
1839:       assertEquals(54, Node.SLASH_V);
1840:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1841:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1842:       assertEquals(50, Node.FREE_CALL);
1843:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1844:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1845:       assertEquals(1, Node.DECR_FLAG);
1846:       assertEquals(32, Node.INCRDECR_PROP);
1847:       assertEquals(46, Node.IS_NAMESPACE);
1848:       assertEquals(2, Node.POST_FLAG);
1849:       assertEquals(12, Node.COLUMN_BITS);
1850:       assertEquals(47, Node.IS_DISPATCHER);
1851:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1852:       assertEquals(30, Node.VAR_ARGS_NAME);
1853:       assertEquals(49, Node.DIRECT_EVAL);
1854:       assertEquals(56, Node.CHANGE_TIME);
1855:       assertEquals(37, Node.OPT_ARG_NAME);
1856:       assertEquals(52, Node.LENGTH);
1857:       assertEquals(53, Node.INPUT_ID);
1858:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1859:       assertEquals(57, Node.REFLECTED_OBJECT);
1860:       assertEquals(36, Node.QUOTED_PROP);
1861:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1862:       assertEquals(29, Node.JSDOC_INFO_PROP);
1863:       assertEquals(57, Node.LAST_PROP);
1864:       assertEquals(55, Node.INFERRED_FUNCTION);
1865:       assertEquals(39, Node.EMPTY_BLOCK);
1866:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1867:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1868:       assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
1869:       assertTrue(boolean6 == boolean3);
1870:       assertTrue(boolean6 == boolean0);
1871:       assertTrue(boolean6 == boolean1);
1872:       assertTrue(boolean6 == boolean4);
1873:       assertTrue(boolean6 == boolean5);
1874:       assertTrue(boolean6 == boolean2);
1875:       assertFalse(node0.equals((Object)node4));
1876:       assertFalse(node0.equals((Object)node1));
1877:       assertFalse(node0.equals((Object)node3));
1878:       assertFalse(node0.equals((Object)node2));
1879:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1880:       assertEquals(0, vector0.size());
1881:       assertEquals("[]", vector0.toString());
1882:       assertTrue(vector0.isEmpty());
1883:       assertEquals(10, vector0.capacity());
1884:       assertEquals(83, node0.getType());
1885:       assertFalse(node0.isThis());
1886:       assertFalse(node0.isFalse());
1887:       assertFalse(node0.isComma());
1888:       assertFalse(node0.isHook());
1889:       assertTrue(node0.isParamList());
1890:       assertFalse(node0.isObjectLit());
1891:       assertFalse(node0.isThrow());
1892:       assertFalse(node0.isGetProp());
1893:       assertFalse(node0.isScript());
1894:       assertFalse(node0.isSwitch());
1895:       assertFalse(node0.isString());
1896:       assertFalse(node0.isNot());
1897:       assertEquals((-1), node0.getCharno());
1898:       assertFalse(node0.isCast());
1899:       assertFalse(node0.isAnd());
1900:       assertFalse(node0.isLabelName());
1901:       assertFalse(node0.isTypeOf());
1902:       assertFalse(node0.isLabel());
1903:       assertFalse(node0.isOr());
1904:       assertFalse(node0.isAssign());
1905:       assertFalse(node0.isReturn());
1906:       assertFalse(node0.hasChildren());
1907:       assertFalse(node0.isDec());
1908:       assertEquals((-1), node0.getSourcePosition());
1909:       assertFalse(node0.isEmpty());
1910:       assertFalse(node0.isDo());
1911:       assertFalse(node0.isAssignAdd());
1912:       assertFalse(node0.isTrue());
1913:       assertFalse(node0.isExprResult());
1914:       assertFalse(node0.isWhile());
1915:       assertFalse(node0.isCall());
1916:       assertFalse(node0.isDelProp());
1917:       assertFalse(node0.isName());
1918:       assertFalse(node0.isGetElem());
1919:       assertFalse(node0.isVoid());
1920:       assertFalse(node0.isBreak());
1921:       assertFalse(node0.isNull());
1922:       assertFalse(node0.isSetterDef());
1923:       assertEquals(0, node0.getChildCount());
1924:       assertFalse(node0.isVar());
1925:       assertFalse(node0.isAdd());
1926:       assertFalse(node0.isNew());
1927:       assertFalse(node0.isFunction());
1928:       assertFalse(node0.isDefaultCase());
1929:       assertFalse(node0.isDebugger());
1930:       assertFalse(node0.isContinue());
1931:       assertFalse(node0.isStringKey());
1932:       assertFalse(node0.isArrayLit());
1933:       assertFalse(node0.isNE());
1934:       assertFalse(node0.isNumber());
1935:       assertFalse(node0.isIf());
1936:       assertFalse(node0.isFor());
1937:       assertFalse(node0.isGetterDef());
1938:       assertFalse(node0.isIn());
1939:       assertFalse(node0.isTry());
1940:       assertFalse(node0.isCase());
1941:       assertFalse(node0.hasOneChild());
1942:       assertFalse(node0.isInc());
1943:       assertFalse(node0.isRegExp());
1944:       assertFalse(node0.isWith());
1945:       assertFalse(node0.isBlock());
1946:       assertFalse(node0.hasMoreThanOneChild());
1947:       assertFalse(node0.isCatch());
1948:       assertFalse(node0.isInstanceOf());
1949:       assertEquals((-1), node0.getLineno());
1950:       
1951:       String string1 = node3.getSourceFileName();
1952:       assertEquals(48, Node.DIRECTIVES);
1953:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1954:       assertEquals(39, Node.EMPTY_BLOCK);
1955:       assertEquals(40, Node.ORIGINALNAME_PROP);
1956:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1957:       assertEquals(4095, Node.COLUMN_MASK);
1958:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1959:       assertEquals(53, Node.INPUT_ID);
1960:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1961:       assertEquals(57, Node.LAST_PROP);
1962:       assertEquals(49, Node.DIRECT_EVAL);
1963:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1964:       assertEquals(55, Node.INFERRED_FUNCTION);
1965:       assertEquals(29, Node.JSDOC_INFO_PROP);
1966:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1967:       assertEquals(57, Node.REFLECTED_OBJECT);
1968:       assertEquals(36, Node.QUOTED_PROP);
1969:       assertEquals(52, Node.LENGTH);
1970:       assertEquals(8, Node.FLAG_NO_THROWS);
1971:       assertEquals(37, Node.OPT_ARG_NAME);
1972:       assertEquals(46, Node.IS_NAMESPACE);
1973:       assertEquals(56, Node.CHANGE_TIME);
1974:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1975:       assertEquals(32, Node.INCRDECR_PROP);
1976:       assertEquals(12, Node.COLUMN_BITS);
1977:       assertEquals(47, Node.IS_DISPATCHER);
1978:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1979:       assertEquals(30, Node.VAR_ARGS_NAME);
1980:       assertEquals(2, Node.POST_FLAG);
1981:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1982:       assertEquals(54, Node.SLASH_V);
1983:       assertEquals(43, Node.IS_CONSTANT_NAME);
1984:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1985:       assertEquals(1, Node.DECR_FLAG);
1986:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1987:       assertEquals(50, Node.FREE_CALL);
1988:       assertNull(string1);
1989:       assertFalse(node3.equals((Object)node2));
1990:       assertFalse(node3.equals((Object)node4));
1991:       assertFalse(node3.equals((Object)node0));
1992:       assertFalse(node3.equals((Object)node1));
1993:       assertFalse(node3.isSetterDef());
1994:       assertFalse(node3.isNull());
1995:       assertFalse(node3.isStringKey());
1996:       assertFalse(node3.isParamList());
1997:       assertFalse(node3.isName());
1998:       assertFalse(node3.isAdd());
1999:       assertFalse(node3.isWhile());
2000:       assertFalse(node3.isTrue());
2001:       assertTrue(node3.isString());
2002:       assertFalse(node3.isTry());
2003:       assertFalse(node3.isVoid());
2004:       assertEquals((-1), node3.getLineno());
2005:       assertFalse(node3.isReturn());
2006:       assertFalse(node3.isCatch());
2007:       assertFalse(node3.isCall());
2008:       assertFalse(node3.isBlock());
2009:       assertFalse(node3.hasMoreThanOneChild());
2010:       assertFalse(node3.isRegExp());
2011:       assertFalse(node3.isTypeOf());
2012:       assertFalse(node3.isIf());
2013:       assertFalse(node3.isDec());
2014:       assertFalse(node3.hasChildren());
2015:       assertEquals((-1), node3.getSourcePosition());
2016:       assertFalse(node3.isNE());
2017:       assertFalse(node3.isIn());
2018:       assertFalse(node3.isDebugger());
2019:       assertFalse(node3.isInc());
2020:       assertEquals(40, node3.getType());
2021:       assertFalse(node3.isAnd());
2022:       assertFalse(node3.isCast());
2023:       assertFalse(node3.isFalse());
2024:       assertFalse(node3.isContinue());
2025:       assertFalse(node3.isFunction());
2026:       assertFalse(node3.isBreak());
2027:       assertFalse(node3.isThis());
2028:       assertFalse(node3.isGetProp());
2029:       assertFalse(node3.isThrow());
2030:       assertEquals((-1), node3.getCharno());
2031:       assertFalse(node3.isNot());
2032:       assertFalse(node3.isObjectLit());
2033:       assertFalse(node3.isScript());
2034:       assertFalse(node3.isExprResult());
2035:       assertFalse(node3.isCase());
2036:       assertFalse(node3.isHook());
2037:       assertFalse(node3.isInstanceOf());
2038:       assertFalse(node3.isComma());
2039:       assertFalse(node3.isAssign());
2040:       assertFalse(node3.isWith());
2041:       assertFalse(node3.isNumber());
2042:       assertFalse(node3.isEmpty());
2043:       assertFalse(node3.isFor());
2044:       assertFalse(node3.isGetElem());
2045:       assertFalse(node3.isLabelName());
2046:       assertFalse(node3.isAssignAdd());
2047:       assertFalse(node3.isDelProp());
2048:       assertFalse(node3.hasOneChild());
2049:       assertFalse(node3.isOr());
2050:       assertFalse(node3.isGetterDef());
2051:       assertFalse(node3.isDefaultCase());
2052:       assertFalse(node3.isNew());
2053:       assertFalse(node3.isSwitch());
2054:       assertFalse(node3.isDo());
2055:       assertEquals(0, node3.getChildCount());
2056:       assertFalse(node3.isArrayLit());
2057:       assertFalse(node3.isVar());
2058:       assertFalse(node3.isLabel());
2059:       
2060:       Node node5 = node0.srcrefTree(node4);
2061:       assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
2062:       assertNotSame(node0, node4);
2063:       assertSame(node0, node5);
2064:       assertNotSame(node0, node1);
2065:       assertNotSame(node0, node2);
2066:       assertNotSame(node5, node1);
2067:       assertSame(node5, node0);
2068:       assertNotSame(node5, node4);
2069:       assertNotSame(node5, node2);
2070:       assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
2071:       assertNotSame(node4, node2);
2072:       assertNotSame(node4, node1);
2073:       assertNotSame(node4, node5);
2074:       assertNotSame(node4, node0);
2075:       assertEquals(4095, Node.COLUMN_MASK);
2076:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2077:       assertEquals(8, Node.FLAG_NO_THROWS);
2078:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2079:       assertEquals(43, Node.IS_CONSTANT_NAME);
2080:       assertEquals(40, Node.ORIGINALNAME_PROP);
2081:       assertEquals(48, Node.DIRECTIVES);
2082:       assertEquals(54, Node.SLASH_V);
2083:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2084:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2085:       assertEquals(50, Node.FREE_CALL);
2086:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2087:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2088:       assertEquals(1, Node.DECR_FLAG);
2089:       assertEquals(32, Node.INCRDECR_PROP);
2090:       assertEquals(46, Node.IS_NAMESPACE);
2091:       assertEquals(2, Node.POST_FLAG);
2092:       assertEquals(12, Node.COLUMN_BITS);
2093:       assertEquals(47, Node.IS_DISPATCHER);
2094:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2095:       assertEquals(30, Node.VAR_ARGS_NAME);
2096:       assertEquals(49, Node.DIRECT_EVAL);
2097:       assertEquals(56, Node.CHANGE_TIME);
2098:       assertEquals(37, Node.OPT_ARG_NAME);
2099:       assertEquals(52, Node.LENGTH);
2100:       assertEquals(53, Node.INPUT_ID);
2101:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2102:       assertEquals(57, Node.REFLECTED_OBJECT);
2103:       assertEquals(36, Node.QUOTED_PROP);
2104:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2105:       assertEquals(29, Node.JSDOC_INFO_PROP);
2106:       assertEquals(57, Node.LAST_PROP);
2107:       assertEquals(55, Node.INFERRED_FUNCTION);
2108:       assertEquals(39, Node.EMPTY_BLOCK);
2109:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2110:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2111:       assertEquals(36, Node.QUOTED_PROP);
2112:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2113:       assertEquals(55, Node.INFERRED_FUNCTION);
2114:       assertEquals(4095, Node.COLUMN_MASK);
2115:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2116:       assertEquals(48, Node.DIRECTIVES);
2117:       assertEquals(43, Node.IS_CONSTANT_NAME);
2118:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2119:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2120:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2121:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2122:       assertEquals(50, Node.FREE_CALL);
2123:       assertEquals(32, Node.INCRDECR_PROP);
2124:       assertEquals(12, Node.COLUMN_BITS);
2125:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2126:       assertEquals(1, Node.DECR_FLAG);
2127:       assertEquals(30, Node.VAR_ARGS_NAME);
2128:       assertEquals(49, Node.DIRECT_EVAL);
2129:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2130:       assertEquals(52, Node.LENGTH);
2131:       assertEquals(46, Node.IS_NAMESPACE);
2132:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2133:       assertEquals(57, Node.REFLECTED_OBJECT);
2134:       assertEquals(37, Node.OPT_ARG_NAME);
2135:       assertEquals(54, Node.SLASH_V);
2136:       assertEquals(29, Node.JSDOC_INFO_PROP);
2137:       assertEquals(56, Node.CHANGE_TIME);
2138:       assertEquals(39, Node.EMPTY_BLOCK);
2139:       assertEquals(47, Node.IS_DISPATCHER);
2140:       assertEquals(40, Node.ORIGINALNAME_PROP);
2141:       assertEquals(2, Node.POST_FLAG);
2142:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2143:       assertEquals(8, Node.FLAG_NO_THROWS);
2144:       assertEquals(53, Node.INPUT_ID);
2145:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2146:       assertEquals(57, Node.LAST_PROP);
2147:       assertEquals(52, Node.LENGTH);
2148:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2149:       assertEquals(57, Node.REFLECTED_OBJECT);
2150:       assertEquals(40, Node.ORIGINALNAME_PROP);
2151:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2152:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2153:       assertEquals(49, Node.DIRECT_EVAL);
2154:       assertEquals(50, Node.FREE_CALL);
2155:       assertEquals(54, Node.SLASH_V);
2156:       assertEquals(32, Node.INCRDECR_PROP);
2157:       assertEquals(46, Node.IS_NAMESPACE);
2158:       assertEquals(48, Node.DIRECTIVES);
2159:       assertEquals(37, Node.OPT_ARG_NAME);
2160:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2161:       assertEquals(4095, Node.COLUMN_MASK);
2162:       assertEquals(1, Node.DECR_FLAG);
2163:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2164:       assertEquals(12, Node.COLUMN_BITS);
2165:       assertEquals(53, Node.INPUT_ID);
2166:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2167:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2168:       assertEquals(36, Node.QUOTED_PROP);
2169:       assertEquals(43, Node.IS_CONSTANT_NAME);
2170:       assertEquals(56, Node.CHANGE_TIME);
2171:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2172:       assertEquals(55, Node.INFERRED_FUNCTION);
2173:       assertEquals(8, Node.FLAG_NO_THROWS);
2174:       assertEquals(39, Node.EMPTY_BLOCK);
2175:       assertEquals(2, Node.POST_FLAG);
2176:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2177:       assertEquals(30, Node.VAR_ARGS_NAME);
2178:       assertEquals(29, Node.JSDOC_INFO_PROP);
2179:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2180:       assertEquals(47, Node.IS_DISPATCHER);
2181:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2182:       assertEquals(57, Node.LAST_PROP);
2183:       assertNotNull(node5);
2184:       assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
2185:       assertFalse(node0.equals((Object)node4));
2186:       assertFalse(node0.equals((Object)node1));
2187:       assertFalse(node0.equals((Object)node3));
2188:       assertFalse(node0.equals((Object)node2));
2189:       assertFalse(node5.equals((Object)node1));
2190:       assertFalse(node5.equals((Object)node4));
2191:       assertFalse(node5.equals((Object)node2));
2192:       assertFalse(node5.equals((Object)node3));
2193:       assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
2194:       assertFalse(node4.equals((Object)node2));
2195:       assertFalse(node4.equals((Object)node1));
2196:       assertFalse(node4.equals((Object)node0));
2197:       assertFalse(node4.equals((Object)node3));
2198:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
2199:       assertEquals(0, vector0.size());
2200:       assertEquals("[]", vector0.toString());
2201:       assertTrue(vector0.isEmpty());
2202:       assertEquals(10, vector0.capacity());
2203:       assertEquals(83, node0.getType());
2204:       assertFalse(node0.isThis());
2205:       assertFalse(node0.isFalse());
2206:       assertFalse(node0.isComma());
2207:       assertFalse(node0.isHook());
2208:       assertTrue(node0.isParamList());
2209:       assertFalse(node0.isObjectLit());
2210:       assertFalse(node0.isThrow());
2211:       assertFalse(node0.isGetProp());
2212:       assertFalse(node0.isScript());
2213:       assertFalse(node0.isSwitch());
2214:       assertFalse(node0.isString());
2215:       assertFalse(node0.isNot());
2216:       assertEquals((-1), node0.getCharno());
2217:       assertFalse(node0.isCast());
2218:       assertFalse(node0.isAnd());
2219:       assertFalse(node0.isLabelName());
2220:       assertFalse(node0.isTypeOf());
2221:       assertFalse(node0.isLabel());
2222:       assertFalse(node0.isOr());
2223:       assertFalse(node0.isAssign());
2224:       assertFalse(node0.isReturn());
2225:       assertFalse(node0.hasChildren());
2226:       assertFalse(node0.isDec());
2227:       assertEquals((-1), node0.getSourcePosition());
2228:       assertFalse(node0.isEmpty());
2229:       assertFalse(node0.isDo());
2230:       assertFalse(node0.isAssignAdd());
2231:       assertFalse(node0.isTrue());
2232:       assertFalse(node0.isExprResult());
2233:       assertFalse(node0.isWhile());
2234:       assertFalse(node0.isCall());
2235:       assertFalse(node0.isDelProp());
2236:       assertFalse(node0.isName());
2237:       assertFalse(node0.isGetElem());
2238:       assertFalse(node0.isVoid());
2239:       assertFalse(node0.isBreak());
2240:       assertFalse(node0.isNull());
2241:       assertFalse(node0.isSetterDef());
2242:       assertEquals(0, node0.getChildCount());
2243:       assertFalse(node0.isVar());
2244:       assertFalse(node0.isAdd());
2245:       assertFalse(node0.isNew());
2246:       assertFalse(node0.isFunction());
2247:       assertFalse(node0.isDefaultCase());
2248:       assertFalse(node0.isDebugger());
2249:       assertFalse(node0.isContinue());
2250:       assertFalse(node0.isStringKey());
2251:       assertFalse(node0.isArrayLit());
2252:       assertFalse(node0.isNE());
2253:       assertFalse(node0.isNumber());
2254:       assertFalse(node0.isIf());
2255:       assertFalse(node0.isFor());
2256:       assertFalse(node0.isGetterDef());
2257:       assertFalse(node0.isIn());
2258:       assertFalse(node0.isTry());
2259:       assertFalse(node0.isCase());
2260:       assertFalse(node0.hasOneChild());
2261:       assertFalse(node0.isInc());
2262:       assertFalse(node0.isRegExp());
2263:       assertFalse(node0.isWith());
2264:       assertFalse(node0.isBlock());
2265:       assertFalse(node0.hasMoreThanOneChild());
2266:       assertFalse(node0.isCatch());
2267:       assertFalse(node0.isInstanceOf());
2268:       assertEquals((-1), node0.getLineno());
2269:       assertFalse(node5.isAnd());
2270:       assertFalse(node5.isObjectLit());
2271:       assertFalse(node5.isNot());
2272:       assertTrue(node5.isParamList());
2273:       assertFalse(node5.isInstanceOf());
2274:       assertFalse(node5.isWith());
2275:       assertFalse(node5.isComma());
2276:       assertFalse(node5.isThis());
2277:       assertFalse(node5.isScript());
2278:       assertFalse(node5.isGetProp());
2279:       assertFalse(node5.isCast());
2280:       assertFalse(node5.isThrow());
2281:       assertFalse(node5.hasOneChild());
2282:       assertFalse(node5.isNumber());
2283:       assertFalse(node5.isFalse());
2284:       assertEquals((-1), node5.getSourcePosition());
2285:       assertEquals((-1), node5.getCharno());
2286:       assertFalse(node5.isLabelName());
2287:       assertFalse(node5.isSwitch());
2288:       assertFalse(node5.isCase());
2289:       assertFalse(node5.isIn());
2290:       assertFalse(node5.hasMoreThanOneChild());
2291:       assertFalse(node5.isContinue());
2292:       assertFalse(node5.isInc());
2293:       assertFalse(node5.isBlock());
2294:       assertFalse(node5.isFor());
2295:       assertFalse(node5.isHook());
2296:       assertFalse(node5.isNE());
2297:       assertEquals((-1), node5.getLineno());
2298:       assertFalse(node5.isIf());
2299:       assertFalse(node5.isCatch());
2300:       assertEquals(0, node5.getChildCount());
2301:       assertFalse(node5.isRegExp());
2302:       assertFalse(node5.isSetterDef());
2303:       assertFalse(node5.isFunction());
2304:       assertFalse(node5.isTry());
2305:       assertFalse(node5.isDefaultCase());
2306:       assertFalse(node5.isVar());
2307:       assertFalse(node5.isArrayLit());
2308:       assertFalse(node5.isGetterDef());
2309:       assertFalse(node5.isDebugger());
2310:       assertFalse(node5.isStringKey());
2311:       assertFalse(node5.isString());
2312:       assertFalse(node5.isOr());
2313:       assertFalse(node5.isNew());
2314:       assertFalse(node5.isAdd());
2315:       assertFalse(node5.isLabel());
2316:       assertFalse(node5.hasChildren());
2317:       assertFalse(node5.isReturn());
2318:       assertFalse(node5.isWhile());
2319:       assertFalse(node5.isDo());
2320:       assertFalse(node5.isAssignAdd());
2321:       assertFalse(node5.isCall());
2322:       assertFalse(node5.isGetElem());
2323:       assertFalse(node5.isEmpty());
2324:       assertFalse(node5.isDec());
2325:       assertFalse(node5.isAssign());
2326:       assertFalse(node5.isTypeOf());
2327:       assertEquals(83, node5.getType());
2328:       assertFalse(node5.isTrue());
2329:       assertFalse(node5.isExprResult());
2330:       assertFalse(node5.isVoid());
2331:       assertFalse(node5.isNull());
2332:       assertFalse(node5.isBreak());
2333:       assertFalse(node5.isDelProp());
2334:       assertFalse(node5.isName());
2335:       assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
2336:       assertFalse(node4.isNew());
2337:       assertFalse(node4.isAdd());
2338:       assertFalse(node4.isContinue());
2339:       assertFalse(node4.isVar());
2340:       assertFalse(node4.hasMoreThanOneChild());
2341:       assertFalse(node4.isReturn());
2342:       assertFalse(node4.isDo());
2343:       assertFalse(node4.isAssignAdd());
2344:       assertFalse(node4.isBlock());
2345:       assertFalse(node4.isWhile());
2346:       assertFalse(node4.isLabel());
2347:       assertEquals((-1), node4.getSourcePosition());
2348:       assertFalse(node4.isNumber());
2349:       assertFalse(node4.isCast());
2350:       assertFalse(node4.isLabelName());
2351:       assertFalse(node4.isStringKey());
2352:       assertFalse(node4.isRegExp());
2353:       assertFalse(node4.isScript());
2354:       assertFalse(node4.isFunction());
2355:       assertFalse(node4.isWith());
2356:       assertFalse(node4.hasOneChild());
2357:       assertFalse(node4.isFor());
2358:       assertFalse(node4.isTry());
2359:       assertFalse(node4.isNE());
2360:       assertFalse(node4.isThis());
2361:       assertFalse(node4.isSetterDef());
2362:       assertFalse(node4.isIn());
2363:       assertFalse(node4.isInstanceOf());
2364:       assertFalse(node4.isCatch());
2365:       assertEquals((-1), node4.getLineno());
2366:       assertFalse(node4.isIf());
2367:       assertFalse(node4.isSwitch());
2368:       assertFalse(node4.isInc());
2369:       assertEquals((-1), node4.getCharno());
2370:       assertFalse(node4.isString());
2371:       assertFalse(node4.isHook());
2372:       assertFalse(node4.isCase());
2373:       assertFalse(node4.isThrow());
2374:       assertFalse(node4.isGetProp());
2375:       assertFalse(node4.isGetterDef());
2376:       assertFalse(node4.isFalse());
2377:       assertTrue(node4.isParamList());
2378:       assertFalse(node4.isObjectLit());
2379:       assertFalse(node4.isArrayLit());
2380:       assertFalse(node4.isAnd());
2381:       assertFalse(node4.isVoid());
2382:       assertFalse(node4.isTrue());
2383:       assertFalse(node4.isExprResult());
2384:       assertFalse(node4.isDebugger());
2385:       assertFalse(node4.isNot());
2386:       assertEquals(0, node4.getChildCount());
2387:       assertFalse(node4.isDefaultCase());
2388:       assertFalse(node4.isComma());
2389:       assertEquals(83, node4.getType());
2390:       assertFalse(node4.isNull());
2391:       assertFalse(node4.isTypeOf());
2392:       assertFalse(node4.isBreak());
2393:       assertFalse(node4.isDec());
2394:       assertFalse(node4.hasChildren());
2395:       assertFalse(node4.isOr());
2396:       assertFalse(node4.isAssign());
2397:       assertFalse(node4.isEmpty());
2398:       assertFalse(node4.isGetElem());
2399:       assertFalse(node4.isCall());
2400:       assertFalse(node4.isDelProp());
2401:       assertFalse(node4.isName());
2402:       
2403:       Node node6 = node0.cloneTree();
2404:       assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
2405:       assertNotSame(node0, node4);
2406:       assertSame(node0, node5);
2407:       assertNotSame(node0, node1);
2408:       assertNotSame(node0, node6);
2409:       assertNotSame(node0, node2);
2410:       assertNotSame(node6, node2);
2411:       assertNotSame(node6, node5);
2412:       assertNotSame(node6, node4);
2413:       assertNotSame(node6, node1);
2414:       assertNotSame(node6, node0);
2415:       assertEquals(4095, Node.COLUMN_MASK);
2416:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2417:       assertEquals(8, Node.FLAG_NO_THROWS);
2418:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2419:       assertEquals(43, Node.IS_CONSTANT_NAME);
2420:       assertEquals(40, Node.ORIGINALNAME_PROP);
2421:       assertEquals(48, Node.DIRECTIVES);
2422:       assertEquals(54, Node.SLASH_V);
2423:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2424:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2425:       assertEquals(50, Node.FREE_CALL);
2426:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2427:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2428:       assertEquals(1, Node.DECR_FLAG);
2429:       assertEquals(32, Node.INCRDECR_PROP);
2430:       assertEquals(46, Node.IS_NAMESPACE);
2431:       assertEquals(2, Node.POST_FLAG);
2432:       assertEquals(12, Node.COLUMN_BITS);
2433:       assertEquals(47, Node.IS_DISPATCHER);
2434:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2435:       assertEquals(30, Node.VAR_ARGS_NAME);
2436:       assertEquals(49, Node.DIRECT_EVAL);
2437:       assertEquals(56, Node.CHANGE_TIME);
2438:       assertEquals(37, Node.OPT_ARG_NAME);
2439:       assertEquals(52, Node.LENGTH);
2440:       assertEquals(53, Node.INPUT_ID);
2441:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2442:       assertEquals(57, Node.REFLECTED_OBJECT);
2443:       assertEquals(36, Node.QUOTED_PROP);
2444:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2445:       assertEquals(29, Node.JSDOC_INFO_PROP);
2446:       assertEquals(57, Node.LAST_PROP);
2447:       assertEquals(55, Node.INFERRED_FUNCTION);
2448:       assertEquals(39, Node.EMPTY_BLOCK);
2449:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2450:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2451:       assertEquals(48, Node.DIRECTIVES);
2452:       assertEquals(8, Node.FLAG_NO_THROWS);
2453:       assertEquals(39, Node.EMPTY_BLOCK);
2454:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2455:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2456:       assertEquals(4095, Node.COLUMN_MASK);
2457:       assertEquals(55, Node.INFERRED_FUNCTION);
2458:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2459:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2460:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2461:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2462:       assertEquals(36, Node.QUOTED_PROP);
2463:       assertEquals(52, Node.LENGTH);
2464:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2465:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2466:       assertEquals(53, Node.INPUT_ID);
2467:       assertEquals(49, Node.DIRECT_EVAL);
2468:       assertEquals(57, Node.REFLECTED_OBJECT);
2469:       assertEquals(56, Node.CHANGE_TIME);
2470:       assertEquals(37, Node.OPT_ARG_NAME);
2471:       assertEquals(2, Node.POST_FLAG);
2472:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2473:       assertEquals(29, Node.JSDOC_INFO_PROP);
2474:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2475:       assertEquals(30, Node.VAR_ARGS_NAME);
2476:       assertEquals(1, Node.DECR_FLAG);
2477:       assertEquals(57, Node.LAST_PROP);
2478:       assertEquals(32, Node.INCRDECR_PROP);
2479:       assertEquals(47, Node.IS_DISPATCHER);
2480:       assertEquals(12, Node.COLUMN_BITS);
2481:       assertEquals(54, Node.SLASH_V);
2482:       assertEquals(40, Node.ORIGINALNAME_PROP);
2483:       assertEquals(50, Node.FREE_CALL);
2484:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2485:       assertEquals(46, Node.IS_NAMESPACE);
2486:       assertEquals(43, Node.IS_CONSTANT_NAME);
2487:       assertNotNull(node6);
2488:       assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
2489:       assertFalse(node0.equals((Object)node4));
2490:       assertFalse(node0.equals((Object)node1));
2491:       assertFalse(node0.equals((Object)node3));
2492:       assertFalse(node0.equals((Object)node2));
2493:       assertFalse(node6.equals((Object)node2));
2494:       assertFalse(node6.equals((Object)node5));
2495:       assertFalse(node6.equals((Object)node4));
2496:       assertFalse(node6.equals((Object)node3));
2497:       assertFalse(node6.equals((Object)node1));
2498:       assertFalse(node6.equals((Object)node0));
2499:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
2500:       assertEquals(0, vector0.size());
2501:       assertEquals("[]", vector0.toString());
2502:       assertTrue(vector0.isEmpty());
2503:       assertEquals(10, vector0.capacity());
2504:       assertEquals(83, node0.getType());
2505:       assertFalse(node0.isThis());
2506:       assertFalse(node0.isFalse());
2507:       assertFalse(node0.isComma());
2508:       assertFalse(node0.isHook());
2509:       assertTrue(node0.isParamList());
2510:       assertFalse(node0.isObjectLit());
2511:       assertFalse(node0.isThrow());
2512:       assertFalse(node0.isGetProp());
2513:       assertFalse(node0.isScript());
2514:       assertFalse(node0.isSwitch());
2515:       assertFalse(node0.isString());
2516:       assertFalse(node0.isNot());
2517:       assertEquals((-1), node0.getCharno());
2518:       assertFalse(node0.isCast());
2519:       assertFalse(node0.isAnd());
2520:       assertFalse(node0.isLabelName());
2521:       assertFalse(node0.isTypeOf());
2522:       assertFalse(node0.isLabel());
2523:       assertFalse(node0.isOr());
2524:       assertFalse(node0.isAssign());
2525:       assertFalse(node0.isReturn());
2526:       assertFalse(node0.hasChildren());
2527:       assertFalse(node0.isDec());
2528:       assertEquals((-1), node0.getSourcePosition());
2529:       assertFalse(node0.isEmpty());
2530:       assertFalse(node0.isDo());
2531:       assertFalse(node0.isAssignAdd());
2532:       assertFalse(node0.isTrue());
2533:       assertFalse(node0.isExprResult());
2534:       assertFalse(node0.isWhile());
2535:       assertFalse(node0.isCall());
2536:       assertFalse(node0.isDelProp());
2537:       assertFalse(node0.isName());
2538:       assertFalse(node0.isGetElem());
2539:       assertFalse(node0.isVoid());
2540:       assertFalse(node0.isBreak());
2541:       assertFalse(node0.isNull());
2542:       assertFalse(node0.isSetterDef());
2543:       assertEquals(0, node0.getChildCount());
2544:       assertFalse(node0.isVar());
2545:       assertFalse(node0.isAdd());
2546:       assertFalse(node0.isNew());
2547:       assertFalse(node0.isFunction());
2548:   }
2549: }
RegularFileObject[/tmp/EvoSuite_195_1628157543151/com/google/javascript/rhino/Node_195_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:03 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_195_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_195_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_195_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.JSTypeNative",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.JSType$TypePair",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.JSType$2",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
375:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
377:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
378:     );
379:   }
380: }

[MASTER] 09:59:03.694 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
assertNotNull(arrayList0);
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());

Vector<JSType> vector0 = new Vector<JSType>();
assertNotNull(vector0);
assertEquals(0, vector0.size());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertEquals(10, vector0.capacity());

Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotNull(node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertEquals(10, vector0.capacity());
assertEquals(83, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isContinue());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());

boolean boolean0 = node0.isDefaultCase();
assertFalse(boolean0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertEquals(10, vector0.capacity());
assertEquals(83, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isContinue());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());

JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
assertNotNull(jSTypeRegistry1);
assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());

Node node1 = new Node(3082);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertEquals(3082, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());

Node node2 = new Node(43, node1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertEquals(3082, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertTrue(node2.isFalse());
assertFalse(node2.isName());
assertFalse(node2.isComma());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isExprResult());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertEquals(43, node2.getType());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isIn());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node1));
assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertNotNull(iterable0);
assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertEquals(10, vector0.capacity());
assertEquals(83, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isContinue());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());

boolean boolean1 = node1.isGetProp();
assertFalse(boolean1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean1 == boolean0);
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertEquals(3082, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());

boolean boolean2 = node1.isParamList();
assertFalse(boolean2);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertEquals(3082, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());

boolean boolean3 = node2.isSetterDef();
assertFalse(boolean3);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNotSame(node2, node0);
assertNotSame(node2, node1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertEquals(3082, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertTrue(node2.isFalse());
assertFalse(node2.isName());
assertFalse(node2.isComma());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isExprResult());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertEquals(43, node2.getType());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isIn());

Node node3 = Node.newString("v");
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertNotNull(node3);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.isSetterDef());
assertFalse(node3.isNull());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isName());
assertFalse(node3.isAdd());
assertFalse(node3.isWhile());
assertFalse(node3.isTrue());
assertTrue(node3.isString());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isReturn());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.isBlock());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertFalse(node3.isTypeOf());
assertFalse(node3.isIf());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isDebugger());
assertFalse(node3.isInc());
assertEquals(40, node3.getType());
assertFalse(node3.isAnd());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertFalse(node3.isFunction());
assertFalse(node3.isBreak());
assertFalse(node3.isThis());
assertFalse(node3.isGetProp());
assertFalse(node3.isThrow());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isCase());
assertFalse(node3.isHook());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isComma());
assertFalse(node3.isAssign());
assertFalse(node3.isWith());
assertFalse(node3.isNumber());
assertFalse(node3.isEmpty());
assertFalse(node3.isFor());
assertFalse(node3.isGetElem());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDelProp());
assertFalse(node3.hasOneChild());
assertFalse(node3.isOr());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isNew());
assertFalse(node3.isSwitch());
assertFalse(node3.isDo());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isArrayLit());
assertFalse(node3.isVar());
assertFalse(node3.isLabel());

Node node4 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) vector0);
assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
assertNotSame(node4, node2);
assertNotSame(node4, node1);
assertNotSame(node4, node0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertNotNull(node4);
assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertEquals(0, vector0.size());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertEquals(10, vector0.capacity());
assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isContinue());
assertFalse(node4.isVar());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isReturn());
assertFalse(node4.isDo());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isBlock());
assertFalse(node4.isWhile());
assertFalse(node4.isLabel());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isNumber());
assertFalse(node4.isCast());
assertFalse(node4.isLabelName());
assertFalse(node4.isStringKey());
assertFalse(node4.isRegExp());
assertFalse(node4.isScript());
assertFalse(node4.isFunction());
assertFalse(node4.isWith());
assertFalse(node4.hasOneChild());
assertFalse(node4.isFor());
assertFalse(node4.isTry());
assertFalse(node4.isNE());
assertFalse(node4.isThis());
assertFalse(node4.isSetterDef());
assertFalse(node4.isIn());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isCatch());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isIf());
assertFalse(node4.isSwitch());
assertFalse(node4.isInc());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isString());
assertFalse(node4.isHook());
assertFalse(node4.isCase());
assertFalse(node4.isThrow());
assertFalse(node4.isGetProp());
assertFalse(node4.isGetterDef());
assertFalse(node4.isFalse());
assertTrue(node4.isParamList());
assertFalse(node4.isObjectLit());
assertFalse(node4.isArrayLit());
assertFalse(node4.isAnd());
assertFalse(node4.isVoid());
assertFalse(node4.isTrue());
assertFalse(node4.isExprResult());
assertFalse(node4.isDebugger());
assertFalse(node4.isNot());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isComma());
assertEquals(83, node4.getType());
assertFalse(node4.isNull());
assertFalse(node4.isTypeOf());
assertFalse(node4.isBreak());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isOr());
assertFalse(node4.isAssign());
assertFalse(node4.isEmpty());
assertFalse(node4.isGetElem());
assertFalse(node4.isCall());
assertFalse(node4.isDelProp());
assertFalse(node4.isName());

boolean boolean4 = node4.isUnscopedQualifiedName();
assertFalse(boolean4);
assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
assertNotSame(node4, node2);
assertNotSame(node4, node1);
assertNotSame(node4, node0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertEquals(0, vector0.size());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertEquals(10, vector0.capacity());
assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isContinue());
assertFalse(node4.isVar());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isReturn());
assertFalse(node4.isDo());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isBlock());
assertFalse(node4.isWhile());
assertFalse(node4.isLabel());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isNumber());
assertFalse(node4.isCast());
assertFalse(node4.isLabelName());
assertFalse(node4.isStringKey());
assertFalse(node4.isRegExp());
assertFalse(node4.isScript());
assertFalse(node4.isFunction());
assertFalse(node4.isWith());
assertFalse(node4.hasOneChild());
assertFalse(node4.isFor());
assertFalse(node4.isTry());
assertFalse(node4.isNE());
assertFalse(node4.isThis());
assertFalse(node4.isSetterDef());
assertFalse(node4.isIn());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isCatch());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isIf());
assertFalse(node4.isSwitch());
assertFalse(node4.isInc());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isString());
assertFalse(node4.isHook());
assertFalse(node4.isCase());
assertFalse(node4.isThrow());
assertFalse(node4.isGetProp());
assertFalse(node4.isGetterDef());
assertFalse(node4.isFalse());
assertTrue(node4.isParamList());
assertFalse(node4.isObjectLit());
assertFalse(node4.isArrayLit());
assertFalse(node4.isAnd());
assertFalse(node4.isVoid());
assertFalse(node4.isTrue());
assertFalse(node4.isExprResult());
assertFalse(node4.isDebugger());
assertFalse(node4.isNot());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isComma());
assertEquals(83, node4.getType());
assertFalse(node4.isNull());
assertFalse(node4.isTypeOf());
assertFalse(node4.isBreak());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isOr());
assertFalse(node4.isAssign());
assertFalse(node4.isEmpty());
assertFalse(node4.isGetElem());
assertFalse(node4.isCall());
assertFalse(node4.isDelProp());
assertFalse(node4.isName());

boolean boolean5 = node3.isWith();
assertFalse(boolean5);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean3);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.isSetterDef());
assertFalse(node3.isNull());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isName());
assertFalse(node3.isAdd());
assertFalse(node3.isWhile());
assertFalse(node3.isTrue());
assertTrue(node3.isString());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isReturn());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.isBlock());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertFalse(node3.isTypeOf());
assertFalse(node3.isIf());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isDebugger());
assertFalse(node3.isInc());
assertEquals(40, node3.getType());
assertFalse(node3.isAnd());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertFalse(node3.isFunction());
assertFalse(node3.isBreak());
assertFalse(node3.isThis());
assertFalse(node3.isGetProp());
assertFalse(node3.isThrow());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isCase());
assertFalse(node3.isHook());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isComma());
assertFalse(node3.isAssign());
assertFalse(node3.isWith());
assertFalse(node3.isNumber());
assertFalse(node3.isEmpty());
assertFalse(node3.isFor());
assertFalse(node3.isGetElem());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDelProp());
assertFalse(node3.hasOneChild());
assertFalse(node3.isOr());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isNew());
assertFalse(node3.isSwitch());
assertFalse(node3.isDo());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isArrayLit());
assertFalse(node3.isVar());
assertFalse(node3.isLabel());

node1.removeProp(57);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNotSame(node1, node4);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertEquals(3082, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());

String string0 = node3.getSourceFileName();
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertNull(string0);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.isSetterDef());
assertFalse(node3.isNull());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isName());
assertFalse(node3.isAdd());
assertFalse(node3.isWhile());
assertFalse(node3.isTrue());
assertTrue(node3.isString());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isReturn());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.isBlock());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertFalse(node3.isTypeOf());
assertFalse(node3.isIf());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isDebugger());
assertFalse(node3.isInc());
assertEquals(40, node3.getType());
assertFalse(node3.isAnd());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertFalse(node3.isFunction());
assertFalse(node3.isBreak());
assertFalse(node3.isThis());
assertFalse(node3.isGetProp());
assertFalse(node3.isThrow());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isCase());
assertFalse(node3.isHook());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isComma());
assertFalse(node3.isAssign());
assertFalse(node3.isWith());
assertFalse(node3.isNumber());
assertFalse(node3.isEmpty());
assertFalse(node3.isFor());
assertFalse(node3.isGetElem());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDelProp());
assertFalse(node3.hasOneChild());
assertFalse(node3.isOr());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isNew());
assertFalse(node3.isSwitch());
assertFalse(node3.isDo());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isArrayLit());
assertFalse(node3.isVar());
assertFalse(node3.isLabel());

boolean boolean6 = node0.isFor();
assertFalse(boolean6);
assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
assertNotSame(node0, node4);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean2);
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertEquals(10, vector0.capacity());
assertEquals(83, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isContinue());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());

String string1 = node3.getSourceFileName();
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertNull(string1);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.isSetterDef());
assertFalse(node3.isNull());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isName());
assertFalse(node3.isAdd());
assertFalse(node3.isWhile());
assertFalse(node3.isTrue());
assertTrue(node3.isString());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isReturn());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.isBlock());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertFalse(node3.isTypeOf());
assertFalse(node3.isIf());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isDebugger());
assertFalse(node3.isInc());
assertEquals(40, node3.getType());
assertFalse(node3.isAnd());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertFalse(node3.isFunction());
assertFalse(node3.isBreak());
assertFalse(node3.isThis());
assertFalse(node3.isGetProp());
assertFalse(node3.isThrow());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isCase());
assertFalse(node3.isHook());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isComma());
assertFalse(node3.isAssign());
assertFalse(node3.isWith());
assertFalse(node3.isNumber());
assertFalse(node3.isEmpty());
assertFalse(node3.isFor());
assertFalse(node3.isGetElem());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDelProp());
assertFalse(node3.hasOneChild());
assertFalse(node3.isOr());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isNew());
assertFalse(node3.isSwitch());
assertFalse(node3.isDo());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isArrayLit());
assertFalse(node3.isVar());
assertFalse(node3.isLabel());

Node node5 = node0.srcrefTree(node4);
assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
assertNotSame(node0, node4);
assertSame(node0, node5);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node5, node1);
assertSame(node5, node0);
assertNotSame(node5, node4);
assertNotSame(node5, node2);
assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
assertNotSame(node4, node2);
assertNotSame(node4, node1);
assertNotSame(node4, node5);
assertNotSame(node4, node0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertNotNull(node5);
assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node3));
assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertEquals(10, vector0.capacity());
assertEquals(83, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isContinue());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node5.isAnd());
assertFalse(node5.isObjectLit());
assertFalse(node5.isNot());
assertTrue(node5.isParamList());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isWith());
assertFalse(node5.isComma());
assertFalse(node5.isThis());
assertFalse(node5.isScript());
assertFalse(node5.isGetProp());
assertFalse(node5.isCast());
assertFalse(node5.isThrow());
assertFalse(node5.hasOneChild());
assertFalse(node5.isNumber());
assertFalse(node5.isFalse());
assertEquals((-1), node5.getSourcePosition());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isLabelName());
assertFalse(node5.isSwitch());
assertFalse(node5.isCase());
assertFalse(node5.isIn());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isContinue());
assertFalse(node5.isInc());
assertFalse(node5.isBlock());
assertFalse(node5.isFor());
assertFalse(node5.isHook());
assertFalse(node5.isNE());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isIf());
assertFalse(node5.isCatch());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isRegExp());
assertFalse(node5.isSetterDef());
assertFalse(node5.isFunction());
assertFalse(node5.isTry());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isVar());
assertFalse(node5.isArrayLit());
assertFalse(node5.isGetterDef());
assertFalse(node5.isDebugger());
assertFalse(node5.isStringKey());
assertFalse(node5.isString());
assertFalse(node5.isOr());
assertFalse(node5.isNew());
assertFalse(node5.isAdd());
assertFalse(node5.isLabel());
assertFalse(node5.hasChildren());
assertFalse(node5.isReturn());
assertFalse(node5.isWhile());
assertFalse(node5.isDo());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isCall());
assertFalse(node5.isGetElem());
assertFalse(node5.isEmpty());
assertFalse(node5.isDec());
assertFalse(node5.isAssign());
assertFalse(node5.isTypeOf());
assertEquals(83, node5.getType());
assertFalse(node5.isTrue());
assertFalse(node5.isExprResult());
assertFalse(node5.isVoid());
assertFalse(node5.isNull());
assertFalse(node5.isBreak());
assertFalse(node5.isDelProp());
assertFalse(node5.isName());
assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isContinue());
assertFalse(node4.isVar());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isReturn());
assertFalse(node4.isDo());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isBlock());
assertFalse(node4.isWhile());
assertFalse(node4.isLabel());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isNumber());
assertFalse(node4.isCast());
assertFalse(node4.isLabelName());
assertFalse(node4.isStringKey());
assertFalse(node4.isRegExp());
assertFalse(node4.isScript());
assertFalse(node4.isFunction());
assertFalse(node4.isWith());
assertFalse(node4.hasOneChild());
assertFalse(node4.isFor());
assertFalse(node4.isTry());
assertFalse(node4.isNE());
assertFalse(node4.isThis());
assertFalse(node4.isSetterDef());
assertFalse(node4.isIn());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isCatch());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isIf());
assertFalse(node4.isSwitch());
assertFalse(node4.isInc());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isString());
assertFalse(node4.isHook());
assertFalse(node4.isCase());
assertFalse(node4.isThrow());
assertFalse(node4.isGetProp());
assertFalse(node4.isGetterDef());
assertFalse(node4.isFalse());
assertTrue(node4.isParamList());
assertFalse(node4.isObjectLit());
assertFalse(node4.isArrayLit());
assertFalse(node4.isAnd());
assertFalse(node4.isVoid());
assertFalse(node4.isTrue());
assertFalse(node4.isExprResult());
assertFalse(node4.isDebugger());
assertFalse(node4.isNot());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isComma());
assertEquals(83, node4.getType());
assertFalse(node4.isNull());
assertFalse(node4.isTypeOf());
assertFalse(node4.isBreak());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isOr());
assertFalse(node4.isAssign());
assertFalse(node4.isEmpty());
assertFalse(node4.isGetElem());
assertFalse(node4.isCall());
assertFalse(node4.isDelProp());
assertFalse(node4.isName());

Node node6 = node0.cloneTree();
assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
assertNotSame(node0, node4);
assertSame(node0, node5);
assertNotSame(node0, node1);
assertNotSame(node0, node6);
assertNotSame(node0, node2);
assertNotSame(node6, node2);
assertNotSame(node6, node5);
assertNotSame(node6, node4);
assertNotSame(node6, node1);
assertNotSame(node6, node0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(node6);
assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node0));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertEquals(10, vector0.capacity());
assertEquals(83, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());


[MASTER] 09:59:04.359 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_198_1628157543933/com/google/javascript/rhino/Node_198_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_198_1628157543933/com/google/javascript/rhino/Node_198_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:04.359 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:04.359 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:04.359 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 127
[MASTER] 09:59:04.360 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_198_1628157543933/com/google/javascript/rhino/Node_198_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:03 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_198_tmp__ESTest extends Node_198_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("8`QN");
22:       assertEquals(53, Node.INPUT_ID);
23:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
24:       assertEquals(43, Node.IS_CONSTANT_NAME);
25:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
26:       assertEquals(55, Node.INFERRED_FUNCTION);
27:       assertEquals(29, Node.JSDOC_INFO_PROP);
28:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
29:       assertEquals(36, Node.QUOTED_PROP);
30:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
31:       assertEquals(8, Node.FLAG_NO_THROWS);
32:       assertEquals(39, Node.EMPTY_BLOCK);
33:       assertEquals(40, Node.ORIGINALNAME_PROP);
34:       assertEquals(47, Node.IS_DISPATCHER);
35:       assertEquals(2, Node.POST_FLAG);
36:       assertEquals(30, Node.VAR_ARGS_NAME);
37:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
38:       assertEquals(54, Node.SLASH_V);
39:       assertEquals(52, Node.LENGTH);
40:       assertEquals(15, Node.NO_SIDE_EFFECTS);
41:       assertEquals(57, Node.LAST_PROP);
42:       assertEquals(49, Node.DIRECT_EVAL);
43:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
44:       assertEquals(46, Node.IS_NAMESPACE);
45:       assertEquals(57, Node.REFLECTED_OBJECT);
46:       assertEquals(50, Node.FREE_CALL);
47:       assertEquals(51, Node.STATIC_SOURCE_FILE);
48:       assertEquals(48, Node.DIRECTIVES);
49:       assertEquals(56, Node.CHANGE_TIME);
50:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
51:       assertEquals(32, Node.INCRDECR_PROP);
52:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
53:       assertEquals(37, Node.OPT_ARG_NAME);
54:       assertEquals(1, Node.DECR_FLAG);
55:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
56:       assertEquals(4095, Node.COLUMN_MASK);
57:       assertEquals(12, Node.COLUMN_BITS);
58:       assertNotNull(node0);
59:       assertFalse(node0.isDefaultCase());
60:       assertFalse(node0.isRegExp());
61:       assertFalse(node0.isVoid());
62:       assertFalse(node0.isTry());
63:       assertEquals(0, node0.getChildCount());
64:       assertFalse(node0.isCatch());
65:       assertEquals(40, node0.getType());
66:       assertFalse(node0.isFunction());
67:       assertFalse(node0.isDelProp());
68:       assertFalse(node0.isIf());
69:       assertFalse(node0.isNull());
70:       assertFalse(node0.isNE());
71:       assertFalse(node0.isEmpty());
72:       assertFalse(node0.isCall());
73:       assertFalse(node0.isName());
74:       assertFalse(node0.isSetterDef());
75:       assertFalse(node0.isIn());
76:       assertFalse(node0.isAdd());
77:       assertFalse(node0.isTrue());
78:       assertFalse(node0.isSwitch());
79:       assertTrue(node0.isString());
80:       assertFalse(node0.isDo());
81:       assertFalse(node0.isCase());
82:       assertFalse(node0.isNew());
83:       assertFalse(node0.isHook());
84:       assertFalse(node0.isVar());
85:       assertFalse(node0.isAssignAdd());
86:       assertFalse(node0.hasMoreThanOneChild());
87:       assertFalse(node0.isBlock());
88:       assertFalse(node0.isLabel());
89:       assertFalse(node0.isGetterDef());
90:       assertFalse(node0.isNumber());
91:       assertFalse(node0.isFor());
92:       assertFalse(node0.isParamList());
93:       assertFalse(node0.isStringKey());
94:       assertFalse(node0.isLabelName());
95:       assertFalse(node0.isArrayLit());
96:       assertFalse(node0.hasOneChild());
97:       assertEquals((-1), node0.getCharno());
98:       assertFalse(node0.isScript());
99:       assertFalse(node0.isWith());
100:       assertFalse(node0.isAnd());
101:       assertFalse(node0.isExprResult());
102:       assertFalse(node0.isCast());
103:       assertFalse(node0.isInstanceOf());
104:       assertFalse(node0.isThis());
105:       assertFalse(node0.isAssign());
106:       assertFalse(node0.isComma());
107:       assertFalse(node0.isBreak());
108:       assertFalse(node0.isTypeOf());
109:       assertFalse(node0.isGetElem());
110:       assertEquals((-1), node0.getLineno());
111:       assertFalse(node0.isOr());
112:       assertFalse(node0.isWhile());
113:       assertFalse(node0.isInc());
114:       assertFalse(node0.isReturn());
115:       assertFalse(node0.isThrow());
116:       assertFalse(node0.isContinue());
117:       assertFalse(node0.isFalse());
118:       assertFalse(node0.isDec());
119:       assertFalse(node0.hasChildren());
120:       assertFalse(node0.isGetProp());
121:       assertFalse(node0.isObjectLit());
122:       assertFalse(node0.isNot());
123:       assertEquals((-1), node0.getSourcePosition());
124:       assertFalse(node0.isDebugger());
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertFalse(iterable0.contains(node0));
128:       assertEquals(53, Node.INPUT_ID);
129:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
130:       assertEquals(43, Node.IS_CONSTANT_NAME);
131:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
132:       assertEquals(55, Node.INFERRED_FUNCTION);
133:       assertEquals(29, Node.JSDOC_INFO_PROP);
134:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
135:       assertEquals(36, Node.QUOTED_PROP);
136:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
137:       assertEquals(8, Node.FLAG_NO_THROWS);
138:       assertEquals(39, Node.EMPTY_BLOCK);
139:       assertEquals(40, Node.ORIGINALNAME_PROP);
140:       assertEquals(47, Node.IS_DISPATCHER);
141:       assertEquals(2, Node.POST_FLAG);
142:       assertEquals(30, Node.VAR_ARGS_NAME);
143:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
144:       assertEquals(54, Node.SLASH_V);
145:       assertEquals(52, Node.LENGTH);
146:       assertEquals(15, Node.NO_SIDE_EFFECTS);
147:       assertEquals(57, Node.LAST_PROP);
148:       assertEquals(49, Node.DIRECT_EVAL);
149:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
150:       assertEquals(46, Node.IS_NAMESPACE);
151:       assertEquals(57, Node.REFLECTED_OBJECT);
152:       assertEquals(50, Node.FREE_CALL);
153:       assertEquals(51, Node.STATIC_SOURCE_FILE);
154:       assertEquals(48, Node.DIRECTIVES);
155:       assertEquals(56, Node.CHANGE_TIME);
156:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
157:       assertEquals(32, Node.INCRDECR_PROP);
158:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
159:       assertEquals(37, Node.OPT_ARG_NAME);
160:       assertEquals(1, Node.DECR_FLAG);
161:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
162:       assertEquals(4095, Node.COLUMN_MASK);
163:       assertEquals(12, Node.COLUMN_BITS);
164:       assertNotNull(iterable0);
165:       assertFalse(node0.isDefaultCase());
166:       assertFalse(node0.isRegExp());
167:       assertFalse(node0.isVoid());
168:       assertFalse(node0.isTry());
169:       assertEquals(0, node0.getChildCount());
170:       assertFalse(node0.isCatch());
171:       assertEquals(40, node0.getType());
172:       assertFalse(node0.isFunction());
173:       assertFalse(node0.isDelProp());
174:       assertFalse(node0.isIf());
175:       assertFalse(node0.isNull());
176:       assertFalse(node0.isNE());
177:       assertFalse(node0.isEmpty());
178:       assertFalse(node0.isCall());
179:       assertFalse(node0.isName());
180:       assertFalse(node0.isSetterDef());
181:       assertFalse(node0.isIn());
182:       assertFalse(node0.isAdd());
183:       assertFalse(node0.isTrue());
184:       assertFalse(node0.isSwitch());
185:       assertTrue(node0.isString());
186:       assertFalse(node0.isDo());
187:       assertFalse(node0.isCase());
188:       assertFalse(node0.isNew());
189:       assertFalse(node0.isHook());
190:       assertFalse(node0.isVar());
191:       assertFalse(node0.isAssignAdd());
192:       assertFalse(node0.hasMoreThanOneChild());
193:       assertFalse(node0.isBlock());
194:       assertFalse(node0.isLabel());
195:       assertFalse(node0.isGetterDef());
196:       assertFalse(node0.isNumber());
197:       assertFalse(node0.isFor());
198:       assertFalse(node0.isParamList());
199:       assertFalse(node0.isStringKey());
200:       assertFalse(node0.isLabelName());
201:       assertFalse(node0.isArrayLit());
202:       assertFalse(node0.hasOneChild());
203:       assertEquals((-1), node0.getCharno());
204:       assertFalse(node0.isScript());
205:       assertFalse(node0.isWith());
206:       assertFalse(node0.isAnd());
207:       assertFalse(node0.isExprResult());
208:       assertFalse(node0.isCast());
209:       assertFalse(node0.isInstanceOf());
210:       assertFalse(node0.isThis());
211:       assertFalse(node0.isAssign());
212:       assertFalse(node0.isComma());
213:       assertFalse(node0.isBreak());
214:       assertFalse(node0.isTypeOf());
215:       assertFalse(node0.isGetElem());
216:       assertEquals((-1), node0.getLineno());
217:       assertFalse(node0.isOr());
218:       assertFalse(node0.isWhile());
219:       assertFalse(node0.isInc());
220:       assertFalse(node0.isReturn());
221:       assertFalse(node0.isThrow());
222:       assertFalse(node0.isContinue());
223:       assertFalse(node0.isFalse());
224:       assertFalse(node0.isDec());
225:       assertFalse(node0.hasChildren());
226:       assertFalse(node0.isGetProp());
227:       assertFalse(node0.isObjectLit());
228:       assertFalse(node0.isNot());
229:       assertEquals((-1), node0.getSourcePosition());
230:       assertFalse(node0.isDebugger());
231:       
232:       boolean boolean0 = node0.isWhile();
233:       assertFalse(boolean0);
234:       assertEquals(53, Node.INPUT_ID);
235:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
236:       assertEquals(43, Node.IS_CONSTANT_NAME);
237:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
238:       assertEquals(55, Node.INFERRED_FUNCTION);
239:       assertEquals(29, Node.JSDOC_INFO_PROP);
240:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
241:       assertEquals(36, Node.QUOTED_PROP);
242:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
243:       assertEquals(8, Node.FLAG_NO_THROWS);
244:       assertEquals(39, Node.EMPTY_BLOCK);
245:       assertEquals(40, Node.ORIGINALNAME_PROP);
246:       assertEquals(47, Node.IS_DISPATCHER);
247:       assertEquals(2, Node.POST_FLAG);
248:       assertEquals(30, Node.VAR_ARGS_NAME);
249:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
250:       assertEquals(54, Node.SLASH_V);
251:       assertEquals(52, Node.LENGTH);
252:       assertEquals(15, Node.NO_SIDE_EFFECTS);
253:       assertEquals(57, Node.LAST_PROP);
254:       assertEquals(49, Node.DIRECT_EVAL);
255:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
256:       assertEquals(46, Node.IS_NAMESPACE);
257:       assertEquals(57, Node.REFLECTED_OBJECT);
258:       assertEquals(50, Node.FREE_CALL);
259:       assertEquals(51, Node.STATIC_SOURCE_FILE);
260:       assertEquals(48, Node.DIRECTIVES);
261:       assertEquals(56, Node.CHANGE_TIME);
262:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
263:       assertEquals(32, Node.INCRDECR_PROP);
264:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
265:       assertEquals(37, Node.OPT_ARG_NAME);
266:       assertEquals(1, Node.DECR_FLAG);
267:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
268:       assertEquals(4095, Node.COLUMN_MASK);
269:       assertEquals(12, Node.COLUMN_BITS);
270:       assertFalse(node0.isDefaultCase());
271:       assertFalse(node0.isRegExp());
272:       assertFalse(node0.isVoid());
273:       assertFalse(node0.isTry());
274:       assertEquals(0, node0.getChildCount());
275:       assertFalse(node0.isCatch());
276:       assertEquals(40, node0.getType());
277:       assertFalse(node0.isFunction());
278:       assertFalse(node0.isDelProp());
279:       assertFalse(node0.isIf());
280:       assertFalse(node0.isNull());
281:       assertFalse(node0.isNE());
282:       assertFalse(node0.isEmpty());
283:       assertFalse(node0.isCall());
284:       assertFalse(node0.isName());
285:       assertFalse(node0.isSetterDef());
286:       assertFalse(node0.isIn());
287:       assertFalse(node0.isAdd());
288:       assertFalse(node0.isTrue());
289:       assertFalse(node0.isSwitch());
290:       assertTrue(node0.isString());
291:       assertFalse(node0.isDo());
292:       assertFalse(node0.isCase());
293:       assertFalse(node0.isNew());
294:       assertFalse(node0.isHook());
295:       assertFalse(node0.isVar());
296:       assertFalse(node0.isAssignAdd());
297:       assertFalse(node0.hasMoreThanOneChild());
298:       assertFalse(node0.isBlock());
299:       assertFalse(node0.isLabel());
300:       assertFalse(node0.isGetterDef());
301:       assertFalse(node0.isNumber());
302:       assertFalse(node0.isFor());
303:       assertFalse(node0.isParamList());
304:       assertFalse(node0.isStringKey());
305:       assertFalse(node0.isLabelName());
306:       assertFalse(node0.isArrayLit());
307:       assertFalse(node0.hasOneChild());
308:       assertEquals((-1), node0.getCharno());
309:       assertFalse(node0.isScript());
310:       assertFalse(node0.isWith());
311:       assertFalse(node0.isAnd());
312:       assertFalse(node0.isExprResult());
313:       assertFalse(node0.isCast());
314:       assertFalse(node0.isInstanceOf());
315:       assertFalse(node0.isThis());
316:       assertFalse(node0.isAssign());
317:       assertFalse(node0.isComma());
318:       assertFalse(node0.isBreak());
319:       assertFalse(node0.isTypeOf());
320:       assertFalse(node0.isGetElem());
321:       assertEquals((-1), node0.getLineno());
322:       assertFalse(node0.isOr());
323:       assertFalse(node0.isWhile());
324:       assertFalse(node0.isInc());
325:       assertFalse(node0.isReturn());
326:       assertFalse(node0.isThrow());
327:       assertFalse(node0.isContinue());
328:       assertFalse(node0.isFalse());
329:       assertFalse(node0.isDec());
330:       assertFalse(node0.hasChildren());
331:       assertFalse(node0.isGetProp());
332:       assertFalse(node0.isObjectLit());
333:       assertFalse(node0.isNot());
334:       assertEquals((-1), node0.getSourcePosition());
335:       assertFalse(node0.isDebugger());
336:       
337:       boolean boolean1 = node0.isEmpty();
338:       assertFalse(boolean1);
339:       assertEquals(53, Node.INPUT_ID);
340:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
341:       assertEquals(43, Node.IS_CONSTANT_NAME);
342:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
343:       assertEquals(55, Node.INFERRED_FUNCTION);
344:       assertEquals(29, Node.JSDOC_INFO_PROP);
345:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
346:       assertEquals(36, Node.QUOTED_PROP);
347:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
348:       assertEquals(8, Node.FLAG_NO_THROWS);
349:       assertEquals(39, Node.EMPTY_BLOCK);
350:       assertEquals(40, Node.ORIGINALNAME_PROP);
351:       assertEquals(47, Node.IS_DISPATCHER);
352:       assertEquals(2, Node.POST_FLAG);
353:       assertEquals(30, Node.VAR_ARGS_NAME);
354:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
355:       assertEquals(54, Node.SLASH_V);
356:       assertEquals(52, Node.LENGTH);
357:       assertEquals(15, Node.NO_SIDE_EFFECTS);
358:       assertEquals(57, Node.LAST_PROP);
359:       assertEquals(49, Node.DIRECT_EVAL);
360:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
361:       assertEquals(46, Node.IS_NAMESPACE);
362:       assertEquals(57, Node.REFLECTED_OBJECT);
363:       assertEquals(50, Node.FREE_CALL);
364:       assertEquals(51, Node.STATIC_SOURCE_FILE);
365:       assertEquals(48, Node.DIRECTIVES);
366:       assertEquals(56, Node.CHANGE_TIME);
367:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
368:       assertEquals(32, Node.INCRDECR_PROP);
369:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
370:       assertEquals(37, Node.OPT_ARG_NAME);
371:       assertEquals(1, Node.DECR_FLAG);
372:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
373:       assertEquals(4095, Node.COLUMN_MASK);
374:       assertEquals(12, Node.COLUMN_BITS);
375:       assertTrue(boolean1 == boolean0);
376:       assertFalse(node0.isDefaultCase());
377:       assertFalse(node0.isRegExp());
378:       assertFalse(node0.isVoid());
379:       assertFalse(node0.isTry());
380:       assertEquals(0, node0.getChildCount());
381:       assertFalse(node0.isCatch());
382:       assertEquals(40, node0.getType());
383:       assertFalse(node0.isFunction());
384:       assertFalse(node0.isDelProp());
385:       assertFalse(node0.isIf());
386:       assertFalse(node0.isNull());
387:       assertFalse(node0.isNE());
388:       assertFalse(node0.isEmpty());
389:       assertFalse(node0.isCall());
390:       assertFalse(node0.isName());
391:       assertFalse(node0.isSetterDef());
392:       assertFalse(node0.isIn());
393:       assertFalse(node0.isAdd());
394:       assertFalse(node0.isTrue());
395:       assertFalse(node0.isSwitch());
396:       assertTrue(node0.isString());
397:       assertFalse(node0.isDo());
398:       assertFalse(node0.isCase());
399:       assertFalse(node0.isNew());
400:       assertFalse(node0.isHook());
401:       assertFalse(node0.isVar());
402:       assertFalse(node0.isAssignAdd());
403:       assertFalse(node0.hasMoreThanOneChild());
404:       assertFalse(node0.isBlock());
405:       assertFalse(node0.isLabel());
406:       assertFalse(node0.isGetterDef());
407:       assertFalse(node0.isNumber());
408:       assertFalse(node0.isFor());
409:       assertFalse(node0.isParamList());
410:       assertFalse(node0.isStringKey());
411:       assertFalse(node0.isLabelName());
412:       assertFalse(node0.isArrayLit());
413:       assertFalse(node0.hasOneChild());
414:       assertEquals((-1), node0.getCharno());
415:       assertFalse(node0.isScript());
416:       assertFalse(node0.isWith());
417:       assertFalse(node0.isAnd());
418:       assertFalse(node0.isExprResult());
419:       assertFalse(node0.isCast());
420:       assertFalse(node0.isInstanceOf());
421:       assertFalse(node0.isThis());
422:       assertFalse(node0.isAssign());
423:       assertFalse(node0.isComma());
424:       assertFalse(node0.isBreak());
425:       assertFalse(node0.isTypeOf());
426:       assertFalse(node0.isGetElem());
427:       assertEquals((-1), node0.getLineno());
428:       assertFalse(node0.isOr());
429:       assertFalse(node0.isWhile());
430:       assertFalse(node0.isInc());
431:       assertFalse(node0.isReturn());
432:       assertFalse(node0.isThrow());
433:       assertFalse(node0.isContinue());
434:       assertFalse(node0.isFalse());
435:       assertFalse(node0.isDec());
436:       assertFalse(node0.hasChildren());
437:       assertFalse(node0.isGetProp());
438:       assertFalse(node0.isObjectLit());
439:       assertFalse(node0.isNot());
440:       assertEquals((-1), node0.getSourcePosition());
441:       assertFalse(node0.isDebugger());
442:       
443:       Node node1 = new Node((-1047), node0, node0, node0, 4, 4096);
444:       assertEquals(53, Node.INPUT_ID);
445:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
446:       assertEquals(43, Node.IS_CONSTANT_NAME);
447:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
448:       assertEquals(55, Node.INFERRED_FUNCTION);
449:       assertEquals(29, Node.JSDOC_INFO_PROP);
450:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
451:       assertEquals(36, Node.QUOTED_PROP);
452:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
453:       assertEquals(8, Node.FLAG_NO_THROWS);
454:       assertEquals(39, Node.EMPTY_BLOCK);
455:       assertEquals(40, Node.ORIGINALNAME_PROP);
456:       assertEquals(47, Node.IS_DISPATCHER);
457:       assertEquals(2, Node.POST_FLAG);
458:       assertEquals(30, Node.VAR_ARGS_NAME);
459:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
460:       assertEquals(54, Node.SLASH_V);
461:       assertEquals(52, Node.LENGTH);
462:       assertEquals(15, Node.NO_SIDE_EFFECTS);
463:       assertEquals(57, Node.LAST_PROP);
464:       assertEquals(49, Node.DIRECT_EVAL);
465:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
466:       assertEquals(46, Node.IS_NAMESPACE);
467:       assertEquals(57, Node.REFLECTED_OBJECT);
468:       assertEquals(50, Node.FREE_CALL);
469:       assertEquals(51, Node.STATIC_SOURCE_FILE);
470:       assertEquals(48, Node.DIRECTIVES);
471:       assertEquals(56, Node.CHANGE_TIME);
472:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
473:       assertEquals(32, Node.INCRDECR_PROP);
474:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
475:       assertEquals(37, Node.OPT_ARG_NAME);
476:       assertEquals(1, Node.DECR_FLAG);
477:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
478:       assertEquals(4095, Node.COLUMN_MASK);
479:       assertEquals(12, Node.COLUMN_BITS);
480:       assertEquals(37, Node.OPT_ARG_NAME);
481:       assertEquals(2, Node.POST_FLAG);
482:       assertEquals(32, Node.INCRDECR_PROP);
483:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
484:       assertEquals(29, Node.JSDOC_INFO_PROP);
485:       assertEquals(1, Node.DECR_FLAG);
486:       assertEquals(30, Node.VAR_ARGS_NAME);
487:       assertEquals(57, Node.LAST_PROP);
488:       assertEquals(47, Node.IS_DISPATCHER);
489:       assertEquals(12, Node.COLUMN_BITS);
490:       assertEquals(40, Node.ORIGINALNAME_PROP);
491:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
492:       assertEquals(50, Node.FREE_CALL);
493:       assertEquals(43, Node.IS_CONSTANT_NAME);
494:       assertEquals(51, Node.STATIC_SOURCE_FILE);
495:       assertEquals(46, Node.IS_NAMESPACE);
496:       assertEquals(54, Node.SLASH_V);
497:       assertEquals(48, Node.DIRECTIVES);
498:       assertEquals(8, Node.FLAG_NO_THROWS);
499:       assertEquals(4095, Node.COLUMN_MASK);
500:       assertEquals(55, Node.INFERRED_FUNCTION);
501:       assertEquals(39, Node.EMPTY_BLOCK);
502:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
503:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
504:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
505:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
506:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
507:       assertEquals(52, Node.LENGTH);
508:       assertEquals(15, Node.NO_SIDE_EFFECTS);
509:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
510:       assertEquals(53, Node.INPUT_ID);
511:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
512:       assertEquals(49, Node.DIRECT_EVAL);
513:       assertEquals(56, Node.CHANGE_TIME);
514:       assertEquals(57, Node.REFLECTED_OBJECT);
515:       assertEquals(36, Node.QUOTED_PROP);
516:       assertNotNull(node1);
517:       assertFalse(node1.equals((Object)node0));
518:       assertFalse(node0.isDefaultCase());
519:       assertFalse(node0.isRegExp());
520:       assertFalse(node0.isVoid());
521:       assertFalse(node0.isTry());
522:       assertEquals(0, node0.getChildCount());
523:       assertFalse(node0.isCatch());
524:       assertEquals(40, node0.getType());
525:       assertFalse(node0.isFunction());
526:       assertFalse(node0.isDelProp());
527:       assertFalse(node0.isIf());
528:       assertFalse(node0.isNull());
529:       assertFalse(node0.isNE());
530:       assertFalse(node0.isEmpty());
531:       assertFalse(node0.isCall());
532:       assertFalse(node0.isName());
533:       assertFalse(node0.isSetterDef());
534:       assertFalse(node0.isIn());
535:       assertFalse(node0.isAdd());
536:       assertFalse(node0.isTrue());
537:       assertFalse(node0.isSwitch());
538:       assertTrue(node0.isString());
539:       assertFalse(node0.isDo());
540:       assertFalse(node0.isCase());
541:       assertFalse(node0.isNew());
542:       assertFalse(node0.isHook());
543:       assertFalse(node0.isVar());
544:       assertFalse(node0.isAssignAdd());
545:       assertFalse(node0.hasMoreThanOneChild());
546:       assertFalse(node0.isBlock());
547:       assertFalse(node0.isLabel());
548:       assertFalse(node0.isGetterDef());
549:       assertFalse(node0.isNumber());
550:       assertFalse(node0.isFor());
551:       assertFalse(node0.isParamList());
552:       assertFalse(node0.isStringKey());
553:       assertFalse(node0.isLabelName());
554:       assertFalse(node0.isArrayLit());
555:       assertFalse(node0.hasOneChild());
556:       assertEquals((-1), node0.getCharno());
557:       assertFalse(node0.isScript());
558:       assertFalse(node0.isWith());
559:       assertFalse(node0.isAnd());
560:       assertFalse(node0.isExprResult());
561:       assertFalse(node0.isCast());
562:       assertFalse(node0.isInstanceOf());
563:       assertFalse(node0.isThis());
564:       assertFalse(node0.isAssign());
565:       assertFalse(node0.isComma());
566:       assertFalse(node0.isBreak());
567:       assertFalse(node0.isTypeOf());
568:       assertFalse(node0.isGetElem());
569:       assertEquals((-1), node0.getLineno());
570:       assertFalse(node0.isOr());
571:       assertFalse(node0.isWhile());
572:       assertFalse(node0.isInc());
573:       assertFalse(node0.isReturn());
574:       assertFalse(node0.isThrow());
575:       assertFalse(node0.isContinue());
576:       assertFalse(node0.isFalse());
577:       assertFalse(node0.isDec());
578:       assertFalse(node0.hasChildren());
579:       assertFalse(node0.isGetProp());
580:       assertFalse(node0.isObjectLit());
581:       assertFalse(node0.isNot());
582:       assertEquals((-1), node0.getSourcePosition());
583:       assertFalse(node0.isDebugger());
584:       assertFalse(node1.isIf());
585:       assertFalse(node1.isGetterDef());
586:       assertFalse(node1.isDelProp());
587:       assertTrue(node1.hasChildren());
588:       assertFalse(node1.isEmpty());
589:       assertFalse(node1.isIn());
590:       assertFalse(node1.isArrayLit());
591:       assertFalse(node1.isDebugger());
592:       assertFalse(node1.isNE());
593:       assertFalse(node1.isTrue());
594:       assertFalse(node1.isDefaultCase());
595:       assertFalse(node1.isSwitch());
596:       assertFalse(node1.isFunction());
597:       assertFalse(node1.isInc());
598:       assertFalse(node1.isThrow());
599:       assertFalse(node1.isBreak());
600:       assertFalse(node1.isComma());
601:       assertEquals(4, node1.getLineno());
602:       assertFalse(node1.isName());
603:       assertFalse(node1.isGetProp());
604:       assertFalse(node1.isFalse());
605:       assertFalse(node1.isCall());
606:       assertFalse(node1.isObjectLit());
607:       assertFalse(node1.isAnd());
608:       assertFalse(node1.isNull());
609:       assertFalse(node1.isString());
610:       assertFalse(node1.isWhile());
611:       assertFalse(node1.isNot());
612:       assertFalse(node1.isVoid());
613:       assertFalse(node1.isExprResult());
614:       assertEquals(20479, node1.getSourcePosition());
615:       assertFalse(node1.isReturn());
616:       assertTrue(node1.hasOneChild());
617:       assertFalse(node1.isNumber());
618:       assertFalse(node1.isDec());
619:       assertFalse(node1.isLabelName());
620:       assertFalse(node1.isAssign());
621:       assertFalse(node1.isTypeOf());
622:       assertFalse(node1.isCast());
623:       assertFalse(node1.isGetElem());
624:       assertFalse(node1.isOr());
625:       assertFalse(node1.isDo());
626:       assertFalse(node1.isNew());
627:       assertFalse(node1.isContinue());
628:       assertFalse(node1.isAdd());
629:       assertFalse(node1.isAssignAdd());
630:       assertFalse(node1.isLabel());
631:       assertFalse(node1.isVar());
632:       assertFalse(node1.isSetterDef());
633:       assertFalse(node1.isStringKey());
634:       assertFalse(node1.isParamList());
635:       assertFalse(node1.isWith());
636:       assertFalse(node1.isRegExp());
637:       assertEquals(4095, node1.getCharno());
638:       assertFalse(node1.isCase());
639:       assertFalse(node1.isCatch());
640:       assertFalse(node1.isScript());
641:       assertFalse(node1.isHook());
642:       assertFalse(node1.isInstanceOf());
643:       assertEquals(1, node1.getChildCount());
644:       assertFalse(node1.isTry());
645:       assertFalse(node1.hasMoreThanOneChild());
646:       assertEquals((-1047), node1.getType());
647:       assertFalse(node1.isThis());
648:       assertFalse(node1.isFor());
649:       assertFalse(node1.isBlock());
650:       
651:       boolean boolean2 = node0.isGetterDef();
652:       assertFalse(boolean2);
653:       assertEquals(53, Node.INPUT_ID);
654:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
655:       assertEquals(43, Node.IS_CONSTANT_NAME);
656:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
657:       assertEquals(55, Node.INFERRED_FUNCTION);
658:       assertEquals(29, Node.JSDOC_INFO_PROP);
659:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
660:       assertEquals(36, Node.QUOTED_PROP);
661:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
662:       assertEquals(8, Node.FLAG_NO_THROWS);
663:       assertEquals(39, Node.EMPTY_BLOCK);
664:       assertEquals(40, Node.ORIGINALNAME_PROP);
665:       assertEquals(47, Node.IS_DISPATCHER);
666:       assertEquals(2, Node.POST_FLAG);
667:       assertEquals(30, Node.VAR_ARGS_NAME);
668:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
669:       assertEquals(54, Node.SLASH_V);
670:       assertEquals(52, Node.LENGTH);
671:       assertEquals(15, Node.NO_SIDE_EFFECTS);
672:       assertEquals(57, Node.LAST_PROP);
673:       assertEquals(49, Node.DIRECT_EVAL);
674:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
675:       assertEquals(46, Node.IS_NAMESPACE);
676:       assertEquals(57, Node.REFLECTED_OBJECT);
677:       assertEquals(50, Node.FREE_CALL);
678:       assertEquals(51, Node.STATIC_SOURCE_FILE);
679:       assertEquals(48, Node.DIRECTIVES);
680:       assertEquals(56, Node.CHANGE_TIME);
681:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
682:       assertEquals(32, Node.INCRDECR_PROP);
683:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
684:       assertEquals(37, Node.OPT_ARG_NAME);
685:       assertEquals(1, Node.DECR_FLAG);
686:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
687:       assertEquals(4095, Node.COLUMN_MASK);
688:       assertEquals(12, Node.COLUMN_BITS);
689:       assertFalse(node0.equals((Object)node1));
690:       assertTrue(boolean2 == boolean0);
691:       assertTrue(boolean2 == boolean1);
692:       assertFalse(node0.isDefaultCase());
693:       assertFalse(node0.isRegExp());
694:       assertFalse(node0.isVoid());
695:       assertFalse(node0.isTry());
696:       assertEquals(0, node0.getChildCount());
697:       assertFalse(node0.isCatch());
698:       assertEquals(40, node0.getType());
699:       assertFalse(node0.isFunction());
700:       assertFalse(node0.isDelProp());
701:       assertFalse(node0.isIf());
702:       assertFalse(node0.isNull());
703:       assertFalse(node0.isNE());
704:       assertFalse(node0.isEmpty());
705:       assertFalse(node0.isCall());
706:       assertFalse(node0.isName());
707:       assertFalse(node0.isSetterDef());
708:       assertFalse(node0.isIn());
709:       assertFalse(node0.isAdd());
710:       assertFalse(node0.isTrue());
711:       assertFalse(node0.isSwitch());
712:       assertTrue(node0.isString());
713:       assertFalse(node0.isDo());
714:       assertFalse(node0.isCase());
715:       assertFalse(node0.isNew());
716:       assertFalse(node0.isHook());
717:       assertFalse(node0.isVar());
718:       assertFalse(node0.isAssignAdd());
719:       assertFalse(node0.hasMoreThanOneChild());
720:       assertFalse(node0.isBlock());
721:       assertFalse(node0.isLabel());
722:       assertFalse(node0.isGetterDef());
723:       assertFalse(node0.isNumber());
724:       assertFalse(node0.isFor());
725:       assertFalse(node0.isParamList());
726:       assertFalse(node0.isStringKey());
727:       assertFalse(node0.isLabelName());
728:       assertFalse(node0.isArrayLit());
729:       assertFalse(node0.hasOneChild());
730:       assertEquals((-1), node0.getCharno());
731:       assertFalse(node0.isScript());
732:       assertFalse(node0.isWith());
733:       assertFalse(node0.isAnd());
734:       assertFalse(node0.isExprResult());
735:       assertFalse(node0.isCast());
736:       assertFalse(node0.isInstanceOf());
737:       assertFalse(node0.isThis());
738:       assertFalse(node0.isAssign());
739:       assertFalse(node0.isComma());
740:       assertFalse(node0.isBreak());
741:       assertFalse(node0.isTypeOf());
742:       assertFalse(node0.isGetElem());
743:       assertEquals((-1), node0.getLineno());
744:       assertFalse(node0.isOr());
745:       assertFalse(node0.isWhile());
746:       assertFalse(node0.isInc());
747:       assertFalse(node0.isReturn());
748:       assertFalse(node0.isThrow());
749:       assertFalse(node0.isContinue());
750:       assertFalse(node0.isFalse());
751:       assertFalse(node0.isDec());
752:       assertFalse(node0.hasChildren());
753:       assertFalse(node0.isGetProp());
754:       assertFalse(node0.isObjectLit());
755:       assertFalse(node0.isNot());
756:       assertEquals((-1), node0.getSourcePosition());
757:       assertFalse(node0.isDebugger());
758:       
759:       Node node2 = node1.clonePropsFrom(node0);
760:       assertSame(node1, node2);
761:       assertSame(node2, node1);
762:       assertEquals(53, Node.INPUT_ID);
763:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
764:       assertEquals(43, Node.IS_CONSTANT_NAME);
765:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
766:       assertEquals(55, Node.INFERRED_FUNCTION);
767:       assertEquals(29, Node.JSDOC_INFO_PROP);
768:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
769:       assertEquals(36, Node.QUOTED_PROP);
770:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
771:       assertEquals(8, Node.FLAG_NO_THROWS);
772:       assertEquals(39, Node.EMPTY_BLOCK);
773:       assertEquals(40, Node.ORIGINALNAME_PROP);
774:       assertEquals(47, Node.IS_DISPATCHER);
775:       assertEquals(2, Node.POST_FLAG);
776:       assertEquals(30, Node.VAR_ARGS_NAME);
777:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
778:       assertEquals(54, Node.SLASH_V);
779:       assertEquals(52, Node.LENGTH);
780:       assertEquals(15, Node.NO_SIDE_EFFECTS);
781:       assertEquals(57, Node.LAST_PROP);
782:       assertEquals(49, Node.DIRECT_EVAL);
783:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
784:       assertEquals(46, Node.IS_NAMESPACE);
785:       assertEquals(57, Node.REFLECTED_OBJECT);
786:       assertEquals(50, Node.FREE_CALL);
787:       assertEquals(51, Node.STATIC_SOURCE_FILE);
788:       assertEquals(48, Node.DIRECTIVES);
789:       assertEquals(56, Node.CHANGE_TIME);
790:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
791:       assertEquals(32, Node.INCRDECR_PROP);
792:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
793:       assertEquals(37, Node.OPT_ARG_NAME);
794:       assertEquals(1, Node.DECR_FLAG);
795:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
796:       assertEquals(4095, Node.COLUMN_MASK);
797:       assertEquals(12, Node.COLUMN_BITS);
798:       assertEquals(37, Node.OPT_ARG_NAME);
799:       assertEquals(2, Node.POST_FLAG);
800:       assertEquals(32, Node.INCRDECR_PROP);
801:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
802:       assertEquals(29, Node.JSDOC_INFO_PROP);
803:       assertEquals(1, Node.DECR_FLAG);
804:       assertEquals(30, Node.VAR_ARGS_NAME);
805:       assertEquals(57, Node.LAST_PROP);
806:       assertEquals(47, Node.IS_DISPATCHER);
807:       assertEquals(12, Node.COLUMN_BITS);
808:       assertEquals(40, Node.ORIGINALNAME_PROP);
809:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
810:       assertEquals(50, Node.FREE_CALL);
811:       assertEquals(43, Node.IS_CONSTANT_NAME);
812:       assertEquals(51, Node.STATIC_SOURCE_FILE);
813:       assertEquals(46, Node.IS_NAMESPACE);
814:       assertEquals(54, Node.SLASH_V);
815:       assertEquals(48, Node.DIRECTIVES);
816:       assertEquals(8, Node.FLAG_NO_THROWS);
817:       assertEquals(4095, Node.COLUMN_MASK);
818:       assertEquals(55, Node.INFERRED_FUNCTION);
819:       assertEquals(39, Node.EMPTY_BLOCK);
820:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
821:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
822:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
823:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
824:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
825:       assertEquals(52, Node.LENGTH);
826:       assertEquals(15, Node.NO_SIDE_EFFECTS);
827:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
828:       assertEquals(53, Node.INPUT_ID);
829:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
830:       assertEquals(49, Node.DIRECT_EVAL);
831:       assertEquals(56, Node.CHANGE_TIME);
832:       assertEquals(57, Node.REFLECTED_OBJECT);
833:       assertEquals(36, Node.QUOTED_PROP);
834:       assertEquals(8, Node.FLAG_NO_THROWS);
835:       assertEquals(39, Node.EMPTY_BLOCK);
836:       assertEquals(48, Node.DIRECTIVES);
837:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
838:       assertEquals(50, Node.FREE_CALL);
839:       assertEquals(40, Node.ORIGINALNAME_PROP);
840:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
841:       assertEquals(4095, Node.COLUMN_MASK);
842:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
843:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
844:       assertEquals(30, Node.VAR_ARGS_NAME);
845:       assertEquals(51, Node.STATIC_SOURCE_FILE);
846:       assertEquals(46, Node.IS_NAMESPACE);
847:       assertEquals(54, Node.SLASH_V);
848:       assertEquals(43, Node.IS_CONSTANT_NAME);
849:       assertEquals(2, Node.POST_FLAG);
850:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
851:       assertEquals(47, Node.IS_DISPATCHER);
852:       assertEquals(37, Node.OPT_ARG_NAME);
853:       assertEquals(29, Node.JSDOC_INFO_PROP);
854:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
855:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
856:       assertEquals(12, Node.COLUMN_BITS);
857:       assertEquals(32, Node.INCRDECR_PROP);
858:       assertEquals(1, Node.DECR_FLAG);
859:       assertEquals(36, Node.QUOTED_PROP);
860:       assertEquals(15, Node.NO_SIDE_EFFECTS);
861:       assertEquals(57, Node.LAST_PROP);
862:       assertEquals(53, Node.INPUT_ID);
863:       assertEquals(52, Node.LENGTH);
864:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
865:       assertEquals(55, Node.INFERRED_FUNCTION);
866:       assertEquals(57, Node.REFLECTED_OBJECT);
867:       assertEquals(49, Node.DIRECT_EVAL);
868:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
869:       assertEquals(56, Node.CHANGE_TIME);
870:       assertNotNull(node2);
871:       assertFalse(node0.equals((Object)node1));
872:       assertFalse(node1.equals((Object)node0));
873:       assertFalse(node2.equals((Object)node0));
874:       assertFalse(node0.isDefaultCase());
875:       assertFalse(node0.isRegExp());
876:       assertFalse(node0.isVoid());
877:       assertFalse(node0.isTry());
878:       assertEquals(0, node0.getChildCount());
879:       assertFalse(node0.isCatch());
880:       assertEquals(40, node0.getType());
881:       assertFalse(node0.isFunction());
882:       assertFalse(node0.isDelProp());
883:       assertFalse(node0.isIf());
884:       assertFalse(node0.isNull());
885:       assertFalse(node0.isNE());
886:       assertFalse(node0.isEmpty());
887:       assertFalse(node0.isCall());
888:       assertFalse(node0.isName());
889:       assertFalse(node0.isSetterDef());
890:       assertFalse(node0.isIn());
891:       assertFalse(node0.isAdd());
892:       assertFalse(node0.isTrue());
893:       assertFalse(node0.isSwitch());
894:       assertTrue(node0.isString());
895:       assertFalse(node0.isDo());
896:       assertFalse(node0.isCase());
897:       assertFalse(node0.isNew());
898:       assertFalse(node0.isHook());
899:       assertFalse(node0.isVar());
900:       assertFalse(node0.isAssignAdd());
901:       assertFalse(node0.hasMoreThanOneChild());
902:       assertFalse(node0.isBlock());
903:       assertFalse(node0.isLabel());
904:       assertFalse(node0.isGetterDef());
905:       assertFalse(node0.isNumber());
906:       assertFalse(node0.isFor());
907:       assertFalse(node0.isParamList());
908:       assertFalse(node0.isStringKey());
909:       assertFalse(node0.isLabelName());
910:       assertFalse(node0.isArrayLit());
911:       assertFalse(node0.hasOneChild());
912:       assertEquals((-1), node0.getCharno());
913:       assertFalse(node0.isScript());
914:       assertFalse(node0.isWith());
915:       assertFalse(node0.isAnd());
916:       assertFalse(node0.isExprResult());
917:       assertFalse(node0.isCast());
918:       assertFalse(node0.isInstanceOf());
919:       assertFalse(node0.isThis());
920:       assertFalse(node0.isAssign());
921:       assertFalse(node0.isComma());
922:       assertFalse(node0.isBreak());
923:       assertFalse(node0.isTypeOf());
924:       assertFalse(node0.isGetElem());
925:       assertEquals((-1), node0.getLineno());
926:       assertFalse(node0.isOr());
927:       assertFalse(node0.isWhile());
928:       assertFalse(node0.isInc());
929:       assertFalse(node0.isReturn());
930:       assertFalse(node0.isThrow());
931:       assertFalse(node0.isContinue());
932:       assertFalse(node0.isFalse());
933:       assertFalse(node0.isDec());
934:       assertFalse(node0.hasChildren());
935:       assertFalse(node0.isGetProp());
936:       assertFalse(node0.isObjectLit());
937:       assertFalse(node0.isNot());
938:       assertEquals((-1), node0.getSourcePosition());
939:       assertFalse(node0.isDebugger());
940:       assertFalse(node1.isIf());
941:       assertFalse(node1.isGetterDef());
942:       assertFalse(node1.isDelProp());
943:       assertTrue(node1.hasChildren());
944:       assertFalse(node1.isEmpty());
945:       assertFalse(node1.isIn());
946:       assertFalse(node1.isArrayLit());
947:       assertFalse(node1.isDebugger());
948:       assertFalse(node1.isNE());
949:       assertFalse(node1.isTrue());
950:       assertFalse(node1.isDefaultCase());
951:       assertFalse(node1.isSwitch());
952:       assertFalse(node1.isFunction());
953:       assertFalse(node1.isInc());
954:       assertFalse(node1.isThrow());
955:       assertFalse(node1.isBreak());
956:       assertFalse(node1.isComma());
957:       assertEquals(4, node1.getLineno());
958:       assertFalse(node1.isName());
959:       assertFalse(node1.isGetProp());
960:       assertFalse(node1.isFalse());
961:       assertFalse(node1.isCall());
962:       assertFalse(node1.isObjectLit());
963:       assertFalse(node1.isAnd());
964:       assertFalse(node1.isNull());
965:       assertFalse(node1.isString());
966:       assertFalse(node1.isWhile());
967:       assertFalse(node1.isNot());
968:       assertFalse(node1.isVoid());
969:       assertFalse(node1.isExprResult());
970:       assertEquals(20479, node1.getSourcePosition());
971:       assertFalse(node1.isReturn());
972:       assertTrue(node1.hasOneChild());
973:       assertFalse(node1.isNumber());
974:       assertFalse(node1.isDec());
975:       assertFalse(node1.isLabelName());
976:       assertFalse(node1.isAssign());
977:       assertFalse(node1.isTypeOf());
978:       assertFalse(node1.isCast());
979:       assertFalse(node1.isGetElem());
980:       assertFalse(node1.isOr());
981:       assertFalse(node1.isDo());
982:       assertFalse(node1.isNew());
983:       assertFalse(node1.isContinue());
984:       assertFalse(node1.isAdd());
985:       assertFalse(node1.isAssignAdd());
986:       assertFalse(node1.isLabel());
987:       assertFalse(node1.isVar());
988:       assertFalse(node1.isSetterDef());
989:       assertFalse(node1.isStringKey());
990:       assertFalse(node1.isParamList());
991:       assertFalse(node1.isWith());
992:       assertFalse(node1.isRegExp());
993:       assertEquals(4095, node1.getCharno());
994:       assertFalse(node1.isCase());
995:       assertFalse(node1.isCatch());
996:       assertFalse(node1.isScript());
997:       assertFalse(node1.isHook());
998:       assertFalse(node1.isInstanceOf());
999:       assertEquals(1, node1.getChildCount());
1000:       assertFalse(node1.isTry());
1001:       assertFalse(node1.hasMoreThanOneChild());
1002:       assertEquals((-1047), node1.getType());
1003:       assertFalse(node1.isThis());
1004:       assertFalse(node1.isFor());
1005:       assertFalse(node1.isBlock());
1006:       assertFalse(node2.isFalse());
1007:       assertFalse(node2.isBreak());
1008:       assertFalse(node2.isSwitch());
1009:       assertFalse(node2.isAnd());
1010:       assertFalse(node2.isInc());
1011:       assertFalse(node2.isIn());
1012:       assertFalse(node2.isThrow());
1013:       assertFalse(node2.isFor());
1014:       assertFalse(node2.isGetterDef());
1015:       assertFalse(node2.isLabelName());
1016:       assertFalse(node2.isArrayLit());
1017:       assertFalse(node2.isNumber());
1018:       assertFalse(node2.isIf());
1019:       assertFalse(node2.isNE());
1020:       assertFalse(node2.isCase());
1021:       assertFalse(node2.isWith());
1022:       assertFalse(node2.isRegExp());
1023:       assertFalse(node2.isScript());
1024:       assertEquals(4095, node2.getCharno());
1025:       assertFalse(node2.hasMoreThanOneChild());
1026:       assertTrue(node2.hasChildren());
1027:       assertFalse(node2.isInstanceOf());
1028:       assertFalse(node2.isCatch());
1029:       assertFalse(node2.isTry());
1030:       assertFalse(node2.isBlock());
1031:       assertEquals(1, node2.getChildCount());
1032:       assertFalse(node2.isHook());
1033:       assertFalse(node2.isThis());
1034:       assertEquals((-1047), node2.getType());
1035:       assertFalse(node2.isName());
1036:       assertEquals(4, node2.getLineno());
1037:       assertFalse(node2.isSetterDef());
1038:       assertFalse(node2.isCall());
1039:       assertFalse(node2.isNull());
1040:       assertFalse(node2.isParamList());
1041:       assertFalse(node2.isStringKey());
1042:       assertFalse(node2.isDo());
1043:       assertFalse(node2.isContinue());
1044:       assertFalse(node2.isNew());
1045:       assertFalse(node2.isLabel());
1046:       assertFalse(node2.isAdd());
1047:       assertFalse(node2.isAssignAdd());
1048:       assertFalse(node2.isFunction());
1049:       assertFalse(node2.isVar());
1050:       assertFalse(node2.isDefaultCase());
1051:       assertFalse(node2.isEmpty());
1052:       assertTrue(node2.hasOneChild());
1053:       assertFalse(node2.isGetElem());
1054:       assertFalse(node2.isDelProp());
1055:       assertFalse(node2.isDec());
1056:       assertFalse(node2.isAssign());
1057:       assertFalse(node2.isTypeOf());
1058:       assertFalse(node2.isCast());
1059:       assertFalse(node2.isVoid());
1060:       assertFalse(node2.isDebugger());
1061:       assertFalse(node2.isOr());
1062:       assertFalse(node2.isTrue());
1063:       assertFalse(node2.isObjectLit());
1064:       assertFalse(node2.isNot());
1065:       assertFalse(node2.isString());
1066:       assertFalse(node2.isExprResult());
1067:       assertFalse(node2.isReturn());
1068:       assertFalse(node2.isGetProp());
1069:       assertEquals(20479, node2.getSourcePosition());
1070:       assertFalse(node2.isComma());
1071:       assertFalse(node2.isWhile());
1072:       
1073:       Node node3 = new Node(31, node2);
1074:       assertEquals(53, Node.INPUT_ID);
1075:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1076:       assertEquals(43, Node.IS_CONSTANT_NAME);
1077:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1078:       assertEquals(55, Node.INFERRED_FUNCTION);
1079:       assertEquals(29, Node.JSDOC_INFO_PROP);
1080:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1081:       assertEquals(36, Node.QUOTED_PROP);
1082:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1083:       assertEquals(8, Node.FLAG_NO_THROWS);
1084:       assertEquals(39, Node.EMPTY_BLOCK);
1085:       assertEquals(40, Node.ORIGINALNAME_PROP);
1086:       assertEquals(47, Node.IS_DISPATCHER);
1087:       assertEquals(2, Node.POST_FLAG);
1088:       assertEquals(30, Node.VAR_ARGS_NAME);
1089:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1090:       assertEquals(54, Node.SLASH_V);
1091:       assertEquals(52, Node.LENGTH);
1092:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1093:       assertEquals(57, Node.LAST_PROP);
1094:       assertEquals(49, Node.DIRECT_EVAL);
1095:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1096:       assertEquals(46, Node.IS_NAMESPACE);
1097:       assertEquals(57, Node.REFLECTED_OBJECT);
1098:       assertEquals(50, Node.FREE_CALL);
1099:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1100:       assertEquals(48, Node.DIRECTIVES);
1101:       assertEquals(56, Node.CHANGE_TIME);
1102:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1103:       assertEquals(32, Node.INCRDECR_PROP);
1104:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1105:       assertEquals(37, Node.OPT_ARG_NAME);
1106:       assertEquals(1, Node.DECR_FLAG);
1107:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1108:       assertEquals(4095, Node.COLUMN_MASK);
1109:       assertEquals(12, Node.COLUMN_BITS);
1110:       assertEquals(37, Node.OPT_ARG_NAME);
1111:       assertEquals(2, Node.POST_FLAG);
1112:       assertEquals(32, Node.INCRDECR_PROP);
1113:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1114:       assertEquals(29, Node.JSDOC_INFO_PROP);
1115:       assertEquals(1, Node.DECR_FLAG);
1116:       assertEquals(30, Node.VAR_ARGS_NAME);
1117:       assertEquals(57, Node.LAST_PROP);
1118:       assertEquals(47, Node.IS_DISPATCHER);
1119:       assertEquals(12, Node.COLUMN_BITS);
1120:       assertEquals(40, Node.ORIGINALNAME_PROP);
1121:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1122:       assertEquals(50, Node.FREE_CALL);
1123:       assertEquals(43, Node.IS_CONSTANT_NAME);
1124:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1125:       assertEquals(46, Node.IS_NAMESPACE);
1126:       assertEquals(54, Node.SLASH_V);
1127:       assertEquals(48, Node.DIRECTIVES);
1128:       assertEquals(8, Node.FLAG_NO_THROWS);
1129:       assertEquals(4095, Node.COLUMN_MASK);
1130:       assertEquals(55, Node.INFERRED_FUNCTION);
1131:       assertEquals(39, Node.EMPTY_BLOCK);
1132:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1133:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1134:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1135:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1136:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1137:       assertEquals(52, Node.LENGTH);
1138:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1139:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1140:       assertEquals(53, Node.INPUT_ID);
1141:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1142:       assertEquals(49, Node.DIRECT_EVAL);
1143:       assertEquals(56, Node.CHANGE_TIME);
1144:       assertEquals(57, Node.REFLECTED_OBJECT);
1145:       assertEquals(36, Node.QUOTED_PROP);
1146:       assertEquals(8, Node.FLAG_NO_THROWS);
1147:       assertEquals(39, Node.EMPTY_BLOCK);
1148:       assertEquals(48, Node.DIRECTIVES);
1149:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1150:       assertEquals(50, Node.FREE_CALL);
1151:       assertEquals(40, Node.ORIGINALNAME_PROP);
1152:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1153:       assertEquals(4095, Node.COLUMN_MASK);
1154:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1155:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1156:       assertEquals(30, Node.VAR_ARGS_NAME);
1157:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1158:       assertEquals(46, Node.IS_NAMESPACE);
1159:       assertEquals(54, Node.SLASH_V);
1160:       assertEquals(43, Node.IS_CONSTANT_NAME);
1161:       assertEquals(2, Node.POST_FLAG);
1162:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1163:       assertEquals(47, Node.IS_DISPATCHER);
1164:       assertEquals(37, Node.OPT_ARG_NAME);
1165:       assertEquals(29, Node.JSDOC_INFO_PROP);
1166:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1167:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1168:       assertEquals(12, Node.COLUMN_BITS);
1169:       assertEquals(32, Node.INCRDECR_PROP);
1170:       assertEquals(1, Node.DECR_FLAG);
1171:       assertEquals(36, Node.QUOTED_PROP);
1172:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1173:       assertEquals(57, Node.LAST_PROP);
1174:       assertEquals(53, Node.INPUT_ID);
1175:       assertEquals(52, Node.LENGTH);
1176:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1177:       assertEquals(55, Node.INFERRED_FUNCTION);
1178:       assertEquals(57, Node.REFLECTED_OBJECT);
1179:       assertEquals(49, Node.DIRECT_EVAL);
1180:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1181:       assertEquals(56, Node.CHANGE_TIME);
1182:       assertEquals(48, Node.DIRECTIVES);
1183:       assertEquals(39, Node.EMPTY_BLOCK);
1184:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1185:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1186:       assertEquals(50, Node.FREE_CALL);
1187:       assertEquals(55, Node.INFERRED_FUNCTION);
1188:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1189:       assertEquals(52, Node.LENGTH);
1190:       assertEquals(8, Node.FLAG_NO_THROWS);
1191:       assertEquals(53, Node.INPUT_ID);
1192:       assertEquals(54, Node.SLASH_V);
1193:       assertEquals(57, Node.LAST_PROP);
1194:       assertEquals(43, Node.IS_CONSTANT_NAME);
1195:       assertEquals(40, Node.ORIGINALNAME_PROP);
1196:       assertEquals(30, Node.VAR_ARGS_NAME);
1197:       assertEquals(2, Node.POST_FLAG);
1198:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1199:       assertEquals(37, Node.OPT_ARG_NAME);
1200:       assertEquals(56, Node.CHANGE_TIME);
1201:       assertEquals(47, Node.IS_DISPATCHER);
1202:       assertEquals(12, Node.COLUMN_BITS);
1203:       assertEquals(32, Node.INCRDECR_PROP);
1204:       assertEquals(46, Node.IS_NAMESPACE);
1205:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1206:       assertEquals(1, Node.DECR_FLAG);
1207:       assertEquals(29, Node.JSDOC_INFO_PROP);
1208:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1209:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1210:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1211:       assertEquals(36, Node.QUOTED_PROP);
1212:       assertEquals(57, Node.REFLECTED_OBJECT);
1213:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1214:       assertEquals(49, Node.DIRECT_EVAL);
1215:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1216:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1217:       assertEquals(4095, Node.COLUMN_MASK);
1218:       assertNotNull(node3);
1219:       assertFalse(node0.equals((Object)node1));
1220:       assertFalse(node0.equals((Object)node2));
1221:       assertFalse(node1.equals((Object)node0));
1222:       assertFalse(node2.equals((Object)node0));
1223:       assertFalse(node3.equals((Object)node1));
1224:       assertFalse(node3.equals((Object)node0));
1225:       assertFalse(node3.equals((Object)node2));
1226:       assertFalse(node0.isDefaultCase());
1227:       assertFalse(node0.isRegExp());
1228:       assertFalse(node0.isVoid());
1229:       assertFalse(node0.isTry());
1230:       assertEquals(0, node0.getChildCount());
1231:       assertFalse(node0.isCatch());
1232:       assertEquals(40, node0.getType());
1233:       assertFalse(node0.isFunction());
1234:       assertFalse(node0.isDelProp());
1235:       assertFalse(node0.isIf());
1236:       assertFalse(node0.isNull());
1237:       assertFalse(node0.isNE());
1238:       assertFalse(node0.isEmpty());
1239:       assertFalse(node0.isCall());
1240:       assertFalse(node0.isName());
1241:       assertFalse(node0.isSetterDef());
1242:       assertFalse(node0.isIn());
1243:       assertFalse(node0.isAdd());
1244:       assertFalse(node0.isTrue());
1245:       assertFalse(node0.isSwitch());
1246:       assertTrue(node0.isString());
1247:       assertFalse(node0.isDo());
1248:       assertFalse(node0.isCase());
1249:       assertFalse(node0.isNew());
1250:       assertFalse(node0.isHook());
1251:       assertFalse(node0.isVar());
1252:       assertFalse(node0.isAssignAdd());
1253:       assertFalse(node0.hasMoreThanOneChild());
1254:       assertFalse(node0.isBlock());
1255:       assertFalse(node0.isLabel());
1256:       assertFalse(node0.isGetterDef());
1257:       assertFalse(node0.isNumber());
1258:       assertFalse(node0.isFor());
1259:       assertFalse(node0.isParamList());
1260:       assertFalse(node0.isStringKey());
1261:       assertFalse(node0.isLabelName());
1262:       assertFalse(node0.isArrayLit());
1263:       assertFalse(node0.hasOneChild());
1264:       assertEquals((-1), node0.getCharno());
1265:       assertFalse(node0.isScript());
1266:       assertFalse(node0.isWith());
1267:       assertFalse(node0.isAnd());
1268:       assertFalse(node0.isExprResult());
1269:       assertFalse(node0.isCast());
1270:       assertFalse(node0.isInstanceOf());
1271:       assertFalse(node0.isThis());
1272:       assertFalse(node0.isAssign());
1273:       assertFalse(node0.isComma());
1274:       assertFalse(node0.isBreak());
1275:       assertFalse(node0.isTypeOf());
1276:       assertFalse(node0.isGetElem());
1277:       assertEquals((-1), node0.getLineno());
1278:       assertFalse(node0.isOr());
1279:       assertFalse(node0.isWhile());
1280:       assertFalse(node0.isInc());
1281:       assertFalse(node0.isReturn());
1282:       assertFalse(node0.isThrow());
1283:       assertFalse(node0.isContinue());
1284:       assertFalse(node0.isFalse());
1285:       assertFalse(node0.isDec());
1286:       assertFalse(node0.hasChildren());
1287:       assertFalse(node0.isGetProp());
1288:       assertFalse(node0.isObjectLit());
1289:       assertFalse(node0.isNot());
1290:       assertEquals((-1), node0.getSourcePosition());
1291:       assertFalse(node0.isDebugger());
1292:       assertFalse(node1.isIf());
1293:       assertFalse(node1.isGetterDef());
1294:       assertFalse(node1.isDelProp());
1295:       assertTrue(node1.hasChildren());
1296:       assertFalse(node1.isEmpty());
1297:       assertFalse(node1.isIn());
1298:       assertFalse(node1.isArrayLit());
1299:       assertFalse(node1.isDebugger());
1300:       assertFalse(node1.isNE());
1301:       assertFalse(node1.isTrue());
1302:       assertFalse(node1.isDefaultCase());
1303:       assertFalse(node1.isSwitch());
1304:       assertFalse(node1.isFunction());
1305:       assertFalse(node1.isInc());
1306:       assertFalse(node1.isThrow());
1307:       assertFalse(node1.isBreak());
1308:       assertFalse(node1.isComma());
1309:       assertEquals(4, node1.getLineno());
1310:       assertFalse(node1.isName());
1311:       assertFalse(node1.isGetProp());
1312:       assertFalse(node1.isFalse());
1313:       assertFalse(node1.isCall());
1314:       assertFalse(node1.isObjectLit());
1315:       assertFalse(node1.isAnd());
1316:       assertFalse(node1.isNull());
1317:       assertFalse(node1.isString());
1318:       assertFalse(node1.isWhile());
1319:       assertFalse(node1.isNot());
1320:       assertFalse(node1.isVoid());
1321:       assertFalse(node1.isExprResult());
1322:       assertEquals(20479, node1.getSourcePosition());
1323:       assertFalse(node1.isReturn());
1324:       assertTrue(node1.hasOneChild());
1325:       assertFalse(node1.isNumber());
1326:       assertFalse(node1.isDec());
1327:       assertFalse(node1.isLabelName());
1328:       assertFalse(node1.isAssign());
1329:       assertFalse(node1.isTypeOf());
1330:       assertFalse(node1.isCast());
1331:       assertFalse(node1.isGetElem());
1332:       assertFalse(node1.isOr());
1333:       assertFalse(node1.isDo());
1334:       assertFalse(node1.isNew());
1335:       assertFalse(node1.isContinue());
1336:       assertFalse(node1.isAdd());
1337:       assertFalse(node1.isAssignAdd());
1338:       assertFalse(node1.isLabel());
1339:       assertFalse(node1.isVar());
1340:       assertFalse(node1.isSetterDef());
1341:       assertFalse(node1.isStringKey());
1342:       assertFalse(node1.isParamList());
1343:       assertFalse(node1.isWith());
1344:       assertFalse(node1.isRegExp());
1345:       assertEquals(4095, node1.getCharno());
1346:       assertFalse(node1.isCase());
1347:       assertFalse(node1.isCatch());
1348:       assertFalse(node1.isScript());
1349:       assertFalse(node1.isHook());
1350:       assertFalse(node1.isInstanceOf());
1351:       assertEquals(1, node1.getChildCount());
1352:       assertFalse(node1.isTry());
1353:       assertFalse(node1.hasMoreThanOneChild());
1354:       assertEquals((-1047), node1.getType());
1355:       assertFalse(node1.isThis());
1356:       assertFalse(node1.isFor());
1357:       assertFalse(node1.isBlock());
1358:       assertFalse(node2.isFalse());
1359:       assertFalse(node2.isBreak());
1360:       assertFalse(node2.isSwitch());
1361:       assertFalse(node2.isAnd());
1362:       assertFalse(node2.isInc());
1363:       assertFalse(node2.isIn());
1364:       assertFalse(node2.isThrow());
1365:       assertFalse(node2.isFor());
1366:       assertFalse(node2.isGetterDef());
1367:       assertFalse(node2.isLabelName());
1368:       assertFalse(node2.isArrayLit());
1369:       assertFalse(node2.isNumber());
1370:       assertFalse(node2.isIf());
1371:       assertFalse(node2.isNE());
1372:       assertFalse(node2.isCase());
1373:       assertFalse(node2.isWith());
1374:       assertFalse(node2.isRegExp());
1375:       assertFalse(node2.isScript());
1376:       assertEquals(4095, node2.getCharno());
1377:       assertFalse(node2.hasMoreThanOneChild());
1378:       assertTrue(node2.hasChildren());
1379:       assertFalse(node2.isInstanceOf());
1380:       assertFalse(node2.isCatch());
1381:       assertFalse(node2.isTry());
1382:       assertFalse(node2.isBlock());
1383:       assertEquals(1, node2.getChildCount());
1384:       assertFalse(node2.isHook());
1385:       assertFalse(node2.isThis());
1386:       assertEquals((-1047), node2.getType());
1387:       assertFalse(node2.isName());
1388:       assertEquals(4, node2.getLineno());
1389:       assertFalse(node2.isSetterDef());
1390:       assertFalse(node2.isCall());
1391:       assertFalse(node2.isNull());
1392:       assertFalse(node2.isParamList());
1393:       assertFalse(node2.isStringKey());
1394:       assertFalse(node2.isDo());
1395:       assertFalse(node2.isContinue());
1396:       assertFalse(node2.isNew());
1397:       assertFalse(node2.isLabel());
1398:       assertFalse(node2.isAdd());
1399:       assertFalse(node2.isAssignAdd());
1400:       assertFalse(node2.isFunction());
1401:       assertFalse(node2.isVar());
1402:       assertFalse(node2.isDefaultCase());
1403:       assertFalse(node2.isEmpty());
1404:       assertTrue(node2.hasOneChild());
1405:       assertFalse(node2.isGetElem());
1406:       assertFalse(node2.isDelProp());
1407:       assertFalse(node2.isDec());
1408:       assertFalse(node2.isAssign());
1409:       assertFalse(node2.isTypeOf());
1410:       assertFalse(node2.isCast());
1411:       assertFalse(node2.isVoid());
1412:       assertFalse(node2.isDebugger());
1413:       assertFalse(node2.isOr());
1414:       assertFalse(node2.isTrue());
1415:       assertFalse(node2.isObjectLit());
1416:       assertFalse(node2.isNot());
1417:       assertFalse(node2.isString());
1418:       assertFalse(node2.isExprResult());
1419:       assertFalse(node2.isReturn());
1420:       assertFalse(node2.isGetProp());
1421:       assertEquals(20479, node2.getSourcePosition());
1422:       assertFalse(node2.isComma());
1423:       assertFalse(node2.isWhile());
1424:       assertFalse(node3.isBreak());
1425:       assertFalse(node3.isComma());
1426:       assertFalse(node3.isThrow());
1427:       assertFalse(node3.isThis());
1428:       assertFalse(node3.isHook());
1429:       assertFalse(node3.isInstanceOf());
1430:       assertFalse(node3.isFalse());
1431:       assertFalse(node3.isWith());
1432:       assertFalse(node3.isIn());
1433:       assertFalse(node3.isInc());
1434:       assertFalse(node3.isIf());
1435:       assertFalse(node3.isNumber());
1436:       assertFalse(node3.isGetterDef());
1437:       assertFalse(node3.isLabelName());
1438:       assertFalse(node3.isFor());
1439:       assertFalse(node3.isNE());
1440:       assertFalse(node3.isAssignAdd());
1441:       assertFalse(node3.isLabel());
1442:       assertEquals((-1), node3.getLineno());
1443:       assertFalse(node3.isArrayLit());
1444:       assertEquals(1, node3.getChildCount());
1445:       assertTrue(node3.hasChildren());
1446:       assertFalse(node3.hasMoreThanOneChild());
1447:       assertFalse(node3.isRegExp());
1448:       assertFalse(node3.isScript());
1449:       assertFalse(node3.isCase());
1450:       assertEquals((-1), node3.getCharno());
1451:       assertFalse(node3.isBlock());
1452:       assertFalse(node3.isSwitch());
1453:       assertFalse(node3.isTry());
1454:       assertFalse(node3.isNull());
1455:       assertFalse(node3.isSetterDef());
1456:       assertFalse(node3.isStringKey());
1457:       assertFalse(node3.isName());
1458:       assertFalse(node3.isVar());
1459:       assertFalse(node3.isParamList());
1460:       assertEquals(31, node3.getType());
1461:       assertFalse(node3.isCall());
1462:       assertFalse(node3.isCatch());
1463:       assertFalse(node3.isDefaultCase());
1464:       assertFalse(node3.isDo());
1465:       assertFalse(node3.isVoid());
1466:       assertFalse(node3.isTrue());
1467:       assertFalse(node3.isOr());
1468:       assertTrue(node3.isDelProp());
1469:       assertFalse(node3.isNew());
1470:       assertFalse(node3.isAdd());
1471:       assertFalse(node3.isEmpty());
1472:       assertFalse(node3.isDec());
1473:       assertTrue(node3.hasOneChild());
1474:       assertFalse(node3.isTypeOf());
1475:       assertFalse(node3.isAssign());
1476:       assertEquals((-1), node3.getSourcePosition());
1477:       assertFalse(node3.isReturn());
1478:       assertFalse(node3.isExprResult());
1479:       assertFalse(node3.isGetElem());
1480:       assertFalse(node3.isFunction());
1481:       assertFalse(node3.isCast());
1482:       assertFalse(node3.isContinue());
1483:       assertFalse(node3.isNot());
1484:       assertFalse(node3.isDebugger());
1485:       assertFalse(node3.isWhile());
1486:       assertFalse(node3.isAnd());
1487:       assertFalse(node3.isGetProp());
1488:       assertFalse(node3.isObjectLit());
1489:       assertFalse(node3.isString());
1490:       
1491:       boolean boolean3 = node3.isSyntheticBlock();
1492:       assertFalse(boolean3);
1493:       assertSame(node1, node2);
1494:       assertNotSame(node1, node3);
1495:       assertNotSame(node2, node3);
1496:       assertSame(node2, node1);
1497:       assertNotSame(node3, node1);
1498:       assertNotSame(node3, node2);
1499:       assertEquals(53, Node.INPUT_ID);
1500:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1501:       assertEquals(43, Node.IS_CONSTANT_NAME);
1502:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1503:       assertEquals(55, Node.INFERRED_FUNCTION);
1504:       assertEquals(29, Node.JSDOC_INFO_PROP);
1505:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1506:       assertEquals(36, Node.QUOTED_PROP);
1507:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1508:       assertEquals(8, Node.FLAG_NO_THROWS);
1509:       assertEquals(39, Node.EMPTY_BLOCK);
1510:       assertEquals(40, Node.ORIGINALNAME_PROP);
1511:       assertEquals(47, Node.IS_DISPATCHER);
1512:       assertEquals(2, Node.POST_FLAG);
1513:       assertEquals(30, Node.VAR_ARGS_NAME);
1514:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1515:       assertEquals(54, Node.SLASH_V);
1516:       assertEquals(52, Node.LENGTH);
1517:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1518:       assertEquals(57, Node.LAST_PROP);
1519:       assertEquals(49, Node.DIRECT_EVAL);
1520:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1521:       assertEquals(46, Node.IS_NAMESPACE);
1522:       assertEquals(57, Node.REFLECTED_OBJECT);
1523:       assertEquals(50, Node.FREE_CALL);
1524:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1525:       assertEquals(48, Node.DIRECTIVES);
1526:       assertEquals(56, Node.CHANGE_TIME);
1527:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1528:       assertEquals(32, Node.INCRDECR_PROP);
1529:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1530:       assertEquals(37, Node.OPT_ARG_NAME);
1531:       assertEquals(1, Node.DECR_FLAG);
1532:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1533:       assertEquals(4095, Node.COLUMN_MASK);
1534:       assertEquals(12, Node.COLUMN_BITS);
1535:       assertEquals(37, Node.OPT_ARG_NAME);
1536:       assertEquals(2, Node.POST_FLAG);
1537:       assertEquals(32, Node.INCRDECR_PROP);
1538:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1539:       assertEquals(29, Node.JSDOC_INFO_PROP);
1540:       assertEquals(1, Node.DECR_FLAG);
1541:       assertEquals(30, Node.VAR_ARGS_NAME);
1542:       assertEquals(57, Node.LAST_PROP);
1543:       assertEquals(47, Node.IS_DISPATCHER);
1544:       assertEquals(12, Node.COLUMN_BITS);
1545:       assertEquals(40, Node.ORIGINALNAME_PROP);
1546:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1547:       assertEquals(50, Node.FREE_CALL);
1548:       assertEquals(43, Node.IS_CONSTANT_NAME);
1549:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1550:       assertEquals(46, Node.IS_NAMESPACE);
1551:       assertEquals(54, Node.SLASH_V);
1552:       assertEquals(48, Node.DIRECTIVES);
1553:       assertEquals(8, Node.FLAG_NO_THROWS);
1554:       assertEquals(4095, Node.COLUMN_MASK);
1555:       assertEquals(55, Node.INFERRED_FUNCTION);
1556:       assertEquals(39, Node.EMPTY_BLOCK);
1557:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1558:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1559:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1560:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1561:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1562:       assertEquals(52, Node.LENGTH);
1563:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1564:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1565:       assertEquals(53, Node.INPUT_ID);
1566:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1567:       assertEquals(49, Node.DIRECT_EVAL);
1568:       assertEquals(56, Node.CHANGE_TIME);
1569:       assertEquals(57, Node.REFLECTED_OBJECT);
1570:       assertEquals(36, Node.QUOTED_PROP);
1571:       assertEquals(8, Node.FLAG_NO_THROWS);
1572:       assertEquals(39, Node.EMPTY_BLOCK);
1573:       assertEquals(48, Node.DIRECTIVES);
1574:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1575:       assertEquals(50, Node.FREE_CALL);
1576:       assertEquals(40, Node.ORIGINALNAME_PROP);
1577:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1578:       assertEquals(4095, Node.COLUMN_MASK);
1579:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1580:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1581:       assertEquals(30, Node.VAR_ARGS_NAME);
1582:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1583:       assertEquals(46, Node.IS_NAMESPACE);
1584:       assertEquals(54, Node.SLASH_V);
1585:       assertEquals(43, Node.IS_CONSTANT_NAME);
1586:       assertEquals(2, Node.POST_FLAG);
1587:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1588:       assertEquals(47, Node.IS_DISPATCHER);
1589:       assertEquals(37, Node.OPT_ARG_NAME);
1590:       assertEquals(29, Node.JSDOC_INFO_PROP);
1591:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1592:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1593:       assertEquals(12, Node.COLUMN_BITS);
1594:       assertEquals(32, Node.INCRDECR_PROP);
1595:       assertEquals(1, Node.DECR_FLAG);
1596:       assertEquals(36, Node.QUOTED_PROP);
1597:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1598:       assertEquals(57, Node.LAST_PROP);
1599:       assertEquals(53, Node.INPUT_ID);
1600:       assertEquals(52, Node.LENGTH);
1601:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1602:       assertEquals(55, Node.INFERRED_FUNCTION);
1603:       assertEquals(57, Node.REFLECTED_OBJECT);
1604:       assertEquals(49, Node.DIRECT_EVAL);
1605:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1606:       assertEquals(56, Node.CHANGE_TIME);
1607:       assertEquals(48, Node.DIRECTIVES);
1608:       assertEquals(39, Node.EMPTY_BLOCK);
1609:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1610:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1611:       assertEquals(50, Node.FREE_CALL);
1612:       assertEquals(55, Node.INFERRED_FUNCTION);
1613:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1614:       assertEquals(52, Node.LENGTH);
1615:       assertEquals(8, Node.FLAG_NO_THROWS);
1616:       assertEquals(53, Node.INPUT_ID);
1617:       assertEquals(54, Node.SLASH_V);
1618:       assertEquals(57, Node.LAST_PROP);
1619:       assertEquals(43, Node.IS_CONSTANT_NAME);
1620:       assertEquals(40, Node.ORIGINALNAME_PROP);
1621:       assertEquals(30, Node.VAR_ARGS_NAME);
1622:       assertEquals(2, Node.POST_FLAG);
1623:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1624:       assertEquals(37, Node.OPT_ARG_NAME);
1625:       assertEquals(56, Node.CHANGE_TIME);
1626:       assertEquals(47, Node.IS_DISPATCHER);
1627:       assertEquals(12, Node.COLUMN_BITS);
1628:       assertEquals(32, Node.INCRDECR_PROP);
1629:       assertEquals(46, Node.IS_NAMESPACE);
1630:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1631:       assertEquals(1, Node.DECR_FLAG);
1632:       assertEquals(29, Node.JSDOC_INFO_PROP);
1633:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1634:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1635:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1636:       assertEquals(36, Node.QUOTED_PROP);
1637:       assertEquals(57, Node.REFLECTED_OBJECT);
1638:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1639:       assertEquals(49, Node.DIRECT_EVAL);
1640:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1641:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1642:       assertEquals(4095, Node.COLUMN_MASK);
1643:       assertFalse(node0.equals((Object)node1));
1644:       assertFalse(node0.equals((Object)node3));
1645:       assertFalse(node0.equals((Object)node2));
1646:       assertFalse(node1.equals((Object)node0));
1647:       assertFalse(node1.equals((Object)node3));
1648:       assertFalse(node2.equals((Object)node0));
1649:       assertFalse(node2.equals((Object)node3));
1650:       assertFalse(node3.equals((Object)node1));
1651:       assertFalse(node3.equals((Object)node0));
1652:       assertFalse(node3.equals((Object)node2));
1653:       assertTrue(boolean3 == boolean1);
1654:       assertTrue(boolean3 == boolean2);
1655:       assertTrue(boolean3 == boolean0);
1656:       assertFalse(node0.isDefaultCase());
1657:       assertFalse(node0.isRegExp());
1658:       assertFalse(node0.isVoid());
1659:       assertFalse(node0.isTry());
1660:       assertEquals(0, node0.getChildCount());
1661:       assertFalse(node0.isCatch());
1662:       assertEquals(40, node0.getType());
1663:       assertFalse(node0.isFunction());
1664:       assertFalse(node0.isDelProp());
1665:       assertFalse(node0.isIf());
1666:       assertFalse(node0.isNull());
1667:       assertFalse(node0.isNE());
1668:       assertFalse(node0.isEmpty());
1669:       assertFalse(node0.isCall());
1670:       assertFalse(node0.isName());
1671:       assertFalse(node0.isSetterDef());
1672:       assertFalse(node0.isIn());
1673:       assertFalse(node0.isAdd());
1674:       assertFalse(node0.isTrue());
1675:       assertFalse(node0.isSwitch());
1676:       assertTrue(node0.isString());
1677:       assertFalse(node0.isDo());
1678:       assertFalse(node0.isCase());
1679:       assertFalse(node0.isNew());
1680:       assertFalse(node0.isHook());
1681:       assertFalse(node0.isVar());
1682:       assertFalse(node0.isAssignAdd());
1683:       assertFalse(node0.hasMoreThanOneChild());
1684:       assertFalse(node0.isBlock());
1685:       assertFalse(node0.isLabel());
1686:       assertFalse(node0.isGetterDef());
1687:       assertFalse(node0.isNumber());
1688:       assertFalse(node0.isFor());
1689:       assertFalse(node0.isParamList());
1690:       assertFalse(node0.isStringKey());
1691:       assertFalse(node0.isLabelName());
1692:       assertFalse(node0.isArrayLit());
1693:       assertFalse(node0.hasOneChild());
1694:       assertEquals((-1), node0.getCharno());
1695:       assertFalse(node0.isScript());
1696:       assertFalse(node0.isWith());
1697:       assertFalse(node0.isAnd());
1698:       assertFalse(node0.isExprResult());
1699:       assertFalse(node0.isCast());
1700:       assertFalse(node0.isInstanceOf());
1701:       assertFalse(node0.isThis());
1702:       assertFalse(node0.isAssign());
1703:       assertFalse(node0.isComma());
1704:       assertFalse(node0.isBreak());
1705:       assertFalse(node0.isTypeOf());
1706:       assertFalse(node0.isGetElem());
1707:       assertEquals((-1), node0.getLineno());
1708:       assertFalse(node0.isOr());
1709:       assertFalse(node0.isWhile());
1710:       assertFalse(node0.isInc());
1711:       assertFalse(node0.isReturn());
1712:       assertFalse(node0.isThrow());
1713:       assertFalse(node0.isContinue());
1714:       assertFalse(node0.isFalse());
1715:       assertFalse(node0.isDec());
1716:       assertFalse(node0.hasChildren());
1717:       assertFalse(node0.isGetProp());
1718:       assertFalse(node0.isObjectLit());
1719:       assertFalse(node0.isNot());
1720:       assertEquals((-1), node0.getSourcePosition());
1721:       assertFalse(node0.isDebugger());
1722:       assertFalse(node1.isIf());
1723:       assertFalse(node1.isGetterDef());
1724:       assertFalse(node1.isDelProp());
1725:       assertTrue(node1.hasChildren());
1726:       assertFalse(node1.isEmpty());
1727:       assertFalse(node1.isIn());
1728:       assertFalse(node1.isArrayLit());
1729:       assertFalse(node1.isDebugger());
1730:       assertFalse(node1.isNE());
1731:       assertFalse(node1.isTrue());
1732:       assertFalse(node1.isDefaultCase());
1733:       assertFalse(node1.isSwitch());
1734:       assertFalse(node1.isFunction());
1735:       assertFalse(node1.isInc());
1736:       assertFalse(node1.isThrow());
1737:       assertFalse(node1.isBreak());
1738:       assertFalse(node1.isComma());
1739:       assertEquals(4, node1.getLineno());
1740:       assertFalse(node1.isName());
1741:       assertFalse(node1.isGetProp());
1742:       assertFalse(node1.isFalse());
1743:       assertFalse(node1.isCall());
1744:       assertFalse(node1.isObjectLit());
1745:       assertFalse(node1.isAnd());
1746:       assertFalse(node1.isNull());
1747:       assertFalse(node1.isString());
1748:       assertFalse(node1.isWhile());
1749:       assertFalse(node1.isNot());
1750:       assertFalse(node1.isVoid());
1751:       assertFalse(node1.isExprResult());
1752:       assertEquals(20479, node1.getSourcePosition());
1753:       assertFalse(node1.isReturn());
1754:       assertTrue(node1.hasOneChild());
1755:       assertFalse(node1.isNumber());
1756:       assertFalse(node1.isDec());
1757:       assertFalse(node1.isLabelName());
1758:       assertFalse(node1.isAssign());
1759:       assertFalse(node1.isTypeOf());
1760:       assertFalse(node1.isCast());
1761:       assertFalse(node1.isGetElem());
1762:       assertFalse(node1.isOr());
1763:       assertFalse(node1.isDo());
1764:       assertFalse(node1.isNew());
1765:       assertFalse(node1.isContinue());
1766:       assertFalse(node1.isAdd());
1767:       assertFalse(node1.isAssignAdd());
1768:       assertFalse(node1.isLabel());
1769:       assertFalse(node1.isVar());
1770:       assertFalse(node1.isSetterDef());
1771:       assertFalse(node1.isStringKey());
1772:       assertFalse(node1.isParamList());
1773:       assertFalse(node1.isWith());
1774:       assertFalse(node1.isRegExp());
1775:       assertEquals(4095, node1.getCharno());
1776:       assertFalse(node1.isCase());
1777:       assertFalse(node1.isCatch());
1778:       assertFalse(node1.isScript());
1779:       assertFalse(node1.isHook());
1780:       assertFalse(node1.isInstanceOf());
1781:       assertEquals(1, node1.getChildCount());
1782:       assertFalse(node1.isTry());
1783:       assertFalse(node1.hasMoreThanOneChild());
1784:       assertEquals((-1047), node1.getType());
1785:       assertFalse(node1.isThis());
1786:       assertFalse(node1.isFor());
1787:       assertFalse(node1.isBlock());
1788:       assertFalse(node2.isFalse());
1789:       assertFalse(node2.isBreak());
1790:       assertFalse(node2.isSwitch());
1791:       assertFalse(node2.isAnd());
1792:       assertFalse(node2.isInc());
1793:       assertFalse(node2.isIn());
1794:       assertFalse(node2.isThrow());
1795:       assertFalse(node2.isFor());
1796:       assertFalse(node2.isGetterDef());
1797:       assertFalse(node2.isLabelName());
1798:       assertFalse(node2.isArrayLit());
1799:       assertFalse(node2.isNumber());
1800:       assertFalse(node2.isIf());
1801:       assertFalse(node2.isNE());
1802:       assertFalse(node2.isCase());
1803:       assertFalse(node2.isWith());
1804:       assertFalse(node2.isRegExp());
1805:       assertFalse(node2.isScript());
1806:       assertEquals(4095, node2.getCharno());
1807:       assertFalse(node2.hasMoreThanOneChild());
1808:       assertTrue(node2.hasChildren());
1809:       assertFalse(node2.isInstanceOf());
1810:       assertFalse(node2.isCatch());
1811:       assertFalse(node2.isTry());
1812:       assertFalse(node2.isBlock());
1813:       assertEquals(1, node2.getChildCount());
1814:       assertFalse(node2.isHook());
1815:       assertFalse(node2.isThis());
1816:       assertEquals((-1047), node2.getType());
1817:       assertFalse(node2.isName());
1818:       assertEquals(4, node2.getLineno());
1819:       assertFalse(node2.isSetterDef());
1820:       assertFalse(node2.isCall());
1821:       assertFalse(node2.isNull());
1822:       assertFalse(node2.isParamList());
1823:       assertFalse(node2.isStringKey());
1824:       assertFalse(node2.isDo());
1825:       assertFalse(node2.isContinue());
1826:       assertFalse(node2.isNew());
1827:       assertFalse(node2.isLabel());
1828:       assertFalse(node2.isAdd());
1829:       assertFalse(node2.isAssignAdd());
1830:       assertFalse(node2.isFunction());
1831:       assertFalse(node2.isVar());
1832:       assertFalse(node2.isDefaultCase());
1833:       assertFalse(node2.isEmpty());
1834:       assertTrue(node2.hasOneChild());
1835:       assertFalse(node2.isGetElem());
1836:       assertFalse(node2.isDelProp());
1837:       assertFalse(node2.isDec());
1838:       assertFalse(node2.isAssign());
1839:       assertFalse(node2.isTypeOf());
1840:       assertFalse(node2.isCast());
1841:       assertFalse(node2.isVoid());
1842:       assertFalse(node2.isDebugger());
1843:       assertFalse(node2.isOr());
1844:       assertFalse(node2.isTrue());
1845:       assertFalse(node2.isObjectLit());
1846:       assertFalse(node2.isNot());
1847:       assertFalse(node2.isString());
1848:       assertFalse(node2.isExprResult());
1849:       assertFalse(node2.isReturn());
1850:       assertFalse(node2.isGetProp());
1851:       assertEquals(20479, node2.getSourcePosition());
1852:       assertFalse(node2.isComma());
1853:       assertFalse(node2.isWhile());
1854:       assertFalse(node3.isBreak());
1855:       assertFalse(node3.isComma());
1856:       assertFalse(node3.isThrow());
1857:       assertFalse(node3.isThis());
1858:       assertFalse(node3.isHook());
1859:       assertFalse(node3.isInstanceOf());
1860:       assertFalse(node3.isFalse());
1861:       assertFalse(node3.isWith());
1862:       assertFalse(node3.isIn());
1863:       assertFalse(node3.isInc());
1864:       assertFalse(node3.isIf());
1865:       assertFalse(node3.isNumber());
1866:       assertFalse(node3.isGetterDef());
1867:       assertFalse(node3.isLabelName());
1868:       assertFalse(node3.isFor());
1869:       assertFalse(node3.isNE());
1870:       assertFalse(node3.isAssignAdd());
1871:       assertFalse(node3.isLabel());
1872:       assertEquals((-1), node3.getLineno());
1873:       assertFalse(node3.isArrayLit());
1874:       assertEquals(1, node3.getChildCount());
1875:       assertTrue(node3.hasChildren());
1876:       assertFalse(node3.hasMoreThanOneChild());
1877:       assertFalse(node3.isRegExp());
1878:       assertFalse(node3.isScript());
1879:       assertFalse(node3.isCase());
1880:       assertEquals((-1), node3.getCharno());
1881:       assertFalse(node3.isBlock());
1882:       assertFalse(node3.isSwitch());
1883:       assertFalse(node3.isTry());
1884:       assertFalse(node3.isNull());
1885:       assertFalse(node3.isSetterDef());
1886:       assertFalse(node3.isStringKey());
1887:       assertFalse(node3.isName());
1888:       assertFalse(node3.isVar());
1889:       assertFalse(node3.isParamList());
1890:       assertEquals(31, node3.getType());
1891:       assertFalse(node3.isCall());
1892:       assertFalse(node3.isCatch());
1893:       assertFalse(node3.isDefaultCase());
1894:       assertFalse(node3.isDo());
1895:       assertFalse(node3.isVoid());
1896:       assertFalse(node3.isTrue());
1897:       assertFalse(node3.isOr());
1898:       assertTrue(node3.isDelProp());
1899:       assertFalse(node3.isNew());
1900:       assertFalse(node3.isAdd());
1901:       assertFalse(node3.isEmpty());
1902:       assertFalse(node3.isDec());
1903:       assertTrue(node3.hasOneChild());
1904:       assertFalse(node3.isTypeOf());
1905:       assertFalse(node3.isAssign());
1906:       assertEquals((-1), node3.getSourcePosition());
1907:       assertFalse(node3.isReturn());
1908:       assertFalse(node3.isExprResult());
1909:       assertFalse(node3.isGetElem());
1910:       assertFalse(node3.isFunction());
1911:       assertFalse(node3.isCast());
1912:       assertFalse(node3.isContinue());
1913:       assertFalse(node3.isNot());
1914:       assertFalse(node3.isDebugger());
1915:       assertFalse(node3.isWhile());
1916:       assertFalse(node3.isAnd());
1917:       assertFalse(node3.isGetProp());
1918:       assertFalse(node3.isObjectLit());
1919:       assertFalse(node3.isString());
1920:       
1921:       node3.setChangeTime(12);
1922:       assertSame(node1, node2);
1923:       assertNotSame(node1, node3);
1924:       assertNotSame(node2, node3);
1925:       assertSame(node2, node1);
1926:       assertNotSame(node3, node1);
1927:       assertNotSame(node3, node2);
1928:       assertEquals(53, Node.INPUT_ID);
1929:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1930:       assertEquals(43, Node.IS_CONSTANT_NAME);
1931:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1932:       assertEquals(55, Node.INFERRED_FUNCTION);
1933:       assertEquals(29, Node.JSDOC_INFO_PROP);
1934:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1935:       assertEquals(36, Node.QUOTED_PROP);
1936:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1937:       assertEquals(8, Node.FLAG_NO_THROWS);
1938:       assertEquals(39, Node.EMPTY_BLOCK);
1939:       assertEquals(40, Node.ORIGINALNAME_PROP);
1940:       assertEquals(47, Node.IS_DISPATCHER);
1941:       assertEquals(2, Node.POST_FLAG);
1942:       assertEquals(30, Node.VAR_ARGS_NAME);
1943:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1944:       assertEquals(54, Node.SLASH_V);
1945:       assertEquals(52, Node.LENGTH);
1946:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1947:       assertEquals(57, Node.LAST_PROP);
1948:       assertEquals(49, Node.DIRECT_EVAL);
1949:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1950:       assertEquals(46, Node.IS_NAMESPACE);
1951:       assertEquals(57, Node.REFLECTED_OBJECT);
1952:       assertEquals(50, Node.FREE_CALL);
1953:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1954:       assertEquals(48, Node.DIRECTIVES);
1955:       assertEquals(56, Node.CHANGE_TIME);
1956:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1957:       assertEquals(32, Node.INCRDECR_PROP);
1958:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1959:       assertEquals(37, Node.OPT_ARG_NAME);
1960:       assertEquals(1, Node.DECR_FLAG);
1961:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1962:       assertEquals(4095, Node.COLUMN_MASK);
1963:       assertEquals(12, Node.COLUMN_BITS);
1964:       assertEquals(37, Node.OPT_ARG_NAME);
1965:       assertEquals(2, Node.POST_FLAG);
1966:       assertEquals(32, Node.INCRDECR_PROP);
1967:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1968:       assertEquals(29, Node.JSDOC_INFO_PROP);
1969:       assertEquals(1, Node.DECR_FLAG);
1970:       assertEquals(30, Node.VAR_ARGS_NAME);
1971:       assertEquals(57, Node.LAST_PROP);
1972:       assertEquals(47, Node.IS_DISPATCHER);
1973:       assertEquals(12, Node.COLUMN_BITS);
1974:       assertEquals(40, Node.ORIGINALNAME_PROP);
1975:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1976:       assertEquals(50, Node.FREE_CALL);
1977:       assertEquals(43, Node.IS_CONSTANT_NAME);
1978:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1979:       assertEquals(46, Node.IS_NAMESPACE);
1980:       assertEquals(54, Node.SLASH_V);
1981:       assertEquals(48, Node.DIRECTIVES);
1982:       assertEquals(8, Node.FLAG_NO_THROWS);
1983:       assertEquals(4095, Node.COLUMN_MASK);
1984:       assertEquals(55, Node.INFERRED_FUNCTION);
1985:       assertEquals(39, Node.EMPTY_BLOCK);
1986:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1987:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1988:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1989:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1990:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1991:       assertEquals(52, Node.LENGTH);
1992:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1993:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1994:       assertEquals(53, Node.INPUT_ID);
1995:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1996:       assertEquals(49, Node.DIRECT_EVAL);
1997:       assertEquals(56, Node.CHANGE_TIME);
1998:       assertEquals(57, Node.REFLECTED_OBJECT);
1999:       assertEquals(36, Node.QUOTED_PROP);
2000:       assertEquals(8, Node.FLAG_NO_THROWS);
2001:       assertEquals(39, Node.EMPTY_BLOCK);
2002:       assertEquals(48, Node.DIRECTIVES);
2003:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2004:       assertEquals(50, Node.FREE_CALL);
2005:       assertEquals(40, Node.ORIGINALNAME_PROP);
2006:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2007:       assertEquals(4095, Node.COLUMN_MASK);
2008:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2009:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2010:       assertEquals(30, Node.VAR_ARGS_NAME);
2011:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2012:       assertEquals(46, Node.IS_NAMESPACE);
2013:       assertEquals(54, Node.SLASH_V);
2014:       assertEquals(43, Node.IS_CONSTANT_NAME);
2015:       assertEquals(2, Node.POST_FLAG);
2016:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2017:       assertEquals(47, Node.IS_DISPATCHER);
2018:       assertEquals(37, Node.OPT_ARG_NAME);
2019:       assertEquals(29, Node.JSDOC_INFO_PROP);
2020:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2021:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2022:       assertEquals(12, Node.COLUMN_BITS);
2023:       assertEquals(32, Node.INCRDECR_PROP);
2024:       assertEquals(1, Node.DECR_FLAG);
2025:       assertEquals(36, Node.QUOTED_PROP);
2026:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2027:       assertEquals(57, Node.LAST_PROP);
2028:       assertEquals(53, Node.INPUT_ID);
2029:       assertEquals(52, Node.LENGTH);
2030:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2031:       assertEquals(55, Node.INFERRED_FUNCTION);
2032:       assertEquals(57, Node.REFLECTED_OBJECT);
2033:       assertEquals(49, Node.DIRECT_EVAL);
2034:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2035:       assertEquals(56, Node.CHANGE_TIME);
2036:       assertEquals(48, Node.DIRECTIVES);
2037:       assertEquals(39, Node.EMPTY_BLOCK);
2038:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2039:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2040:       assertEquals(50, Node.FREE_CALL);
2041:       assertEquals(55, Node.INFERRED_FUNCTION);
2042:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2043:       assertEquals(52, Node.LENGTH);
2044:       assertEquals(8, Node.FLAG_NO_THROWS);
2045:       assertEquals(53, Node.INPUT_ID);
2046:       assertEquals(54, Node.SLASH_V);
2047:       assertEquals(57, Node.LAST_PROP);
2048:       assertEquals(43, Node.IS_CONSTANT_NAME);
2049:       assertEquals(40, Node.ORIGINALNAME_PROP);
2050:       assertEquals(30, Node.VAR_ARGS_NAME);
2051:       assertEquals(2, Node.POST_FLAG);
2052:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2053:       assertEquals(37, Node.OPT_ARG_NAME);
2054:       assertEquals(56, Node.CHANGE_TIME);
2055:       assertEquals(47, Node.IS_DISPATCHER);
2056:       assertEquals(12, Node.COLUMN_BITS);
2057:       assertEquals(32, Node.INCRDECR_PROP);
2058:       assertEquals(46, Node.IS_NAMESPACE);
2059:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2060:       assertEquals(1, Node.DECR_FLAG);
2061:       assertEquals(29, Node.JSDOC_INFO_PROP);
2062:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2063:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2064:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2065:       assertEquals(36, Node.QUOTED_PROP);
2066:       assertEquals(57, Node.REFLECTED_OBJECT);
2067:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2068:       assertEquals(49, Node.DIRECT_EVAL);
2069:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2070:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2071:       assertEquals(4095, Node.COLUMN_MASK);
2072:       assertFalse(node0.equals((Object)node1));
2073:       assertFalse(node0.equals((Object)node3));
2074:       assertFalse(node0.equals((Object)node2));
2075:       assertFalse(node1.equals((Object)node0));
2076:       assertFalse(node1.equals((Object)node3));
2077:       assertFalse(node2.equals((Object)node0));
2078:       assertFalse(node2.equals((Object)node3));
2079:       assertFalse(node3.equals((Object)node1));
2080:       assertFalse(node3.equals((Object)node0));
2081:       assertFalse(node3.equals((Object)node2));
2082:       assertFalse(node0.isDefaultCase());
2083:       assertFalse(node0.isRegExp());
2084:       assertFalse(node0.isVoid());
2085:       assertFalse(node0.isTry());
2086:       assertEquals(0, node0.getChildCount());
2087:       assertFalse(node0.isCatch());
2088:       assertEquals(40, node0.getType());
2089:       assertFalse(node0.isFunction());
2090:       assertFalse(node0.isDelProp());
2091:       assertFalse(node0.isIf());
2092:       assertFalse(node0.isNull());
2093:       assertFalse(node0.isNE());
2094:       assertFalse(node0.isEmpty());
2095:       assertFalse(node0.isCall());
2096:       assertFalse(node0.isName());
2097:       assertFalse(node0.isSetterDef());
2098:       assertFalse(node0.isIn());
2099:       assertFalse(node0.isAdd());
2100:       assertFalse(node0.isTrue());
2101:       assertFalse(node0.isSwitch());
2102:       assertTrue(node0.isString());
2103:       assertFalse(node0.isDo());
2104:       assertFalse(node0.isCase());
2105:       assertFalse(node0.isNew());
2106:       assertFalse(node0.isHook());
2107:       assertFalse(node0.isVar());
2108:       assertFalse(node0.isAssignAdd());
2109:       assertFalse(node0.hasMoreThanOneChild());
2110:       assertFalse(node0.isBlock());
2111:       assertFalse(node0.isLabel());
2112:       assertFalse(node0.isGetterDef());
2113:       assertFalse(node0.isNumber());
2114:       assertFalse(node0.isFor());
2115:       assertFalse(node0.isParamList());
2116:       assertFalse(node0.isStringKey());
2117:       assertFalse(node0.isLabelName());
2118:       assertFalse(node0.isArrayLit());
2119:       assertFalse(node0.hasOneChild());
2120:       assertEquals((-1), node0.getCharno());
2121:       assertFalse(node0.isScript());
2122:       assertFalse(node0.isWith());
2123:       assertFalse(node0.isAnd());
2124:       assertFalse(node0.isExprResult());
2125:       assertFalse(node0.isCast());
2126:       assertFalse(node0.isInstanceOf());
2127:       assertFalse(node0.isThis());
2128:       assertFalse(node0.isAssign());
2129:       assertFalse(node0.isComma());
2130:       assertFalse(node0.isBreak());
2131:       assertFalse(node0.isTypeOf());
2132:       assertFalse(node0.isGetElem());
2133:       assertEquals((-1), node0.getLineno());
2134:       assertFalse(node0.isOr());
2135:       assertFalse(node0.isWhile());
2136:       assertFalse(node0.isInc());
2137:       assertFalse(node0.isReturn());
2138:       assertFalse(node0.isThrow());
2139:       assertFalse(node0.isContinue());
2140:       assertFalse(node0.isFalse());
2141:       assertFalse(node0.isDec());
2142:       assertFalse(node0.hasChildren());
2143:       assertFalse(node0.isGetProp());
2144:       assertFalse(node0.isObjectLit());
2145:       assertFalse(node0.isNot());
2146:       assertEquals((-1), node0.getSourcePosition());
2147:       assertFalse(node0.isDebugger());
2148:       assertFalse(node1.isIf());
2149:       assertFalse(node1.isGetterDef());
2150:       assertFalse(node1.isDelProp());
2151:       assertTrue(node1.hasChildren());
2152:       assertFalse(node1.isEmpty());
2153:       assertFalse(node1.isIn());
2154:       assertFalse(node1.isArrayLit());
2155:       assertFalse(node1.isDebugger());
2156:       assertFalse(node1.isNE());
2157:       assertFalse(node1.isTrue());
2158:       assertFalse(node1.isDefaultCase());
2159:       assertFalse(node1.isSwitch());
2160:       assertFalse(node1.isFunction());
2161:       assertFalse(node1.isInc());
2162:       assertFalse(node1.isThrow());
2163:       assertFalse(node1.isBreak());
2164:       assertFalse(node1.isComma());
2165:       assertEquals(4, node1.getLineno());
2166:       assertFalse(node1.isName());
2167:       assertFalse(node1.isGetProp());
2168:       assertFalse(node1.isFalse());
2169:       assertFalse(node1.isCall());
2170:       assertFalse(node1.isObjectLit());
2171:       assertFalse(node1.isAnd());
2172:       assertFalse(node1.isNull());
2173:       assertFalse(node1.isString());
2174:       assertFalse(node1.isWhile());
2175:       assertFalse(node1.isNot());
2176:       assertFalse(node1.isVoid());
2177:       assertFalse(node1.isExprResult());
2178:       assertEquals(20479, node1.getSourcePosition());
2179:       assertFalse(node1.isReturn());
2180:       assertTrue(node1.hasOneChild());
2181:       assertFalse(node1.isNumber());
2182:       assertFalse(node1.isDec());
2183:       assertFalse(node1.isLabelName());
2184:       assertFalse(node1.isAssign());
2185:       assertFalse(node1.isTypeOf());
2186:       assertFalse(node1.isCast());
2187:       assertFalse(node1.isGetElem());
2188:       assertFalse(node1.isOr());
2189:       assertFalse(node1.isDo());
2190:       assertFalse(node1.isNew());
2191:       assertFalse(node1.isContinue());
2192:       assertFalse(node1.isAdd());
2193:       assertFalse(node1.isAssignAdd());
2194:       assertFalse(node1.isLabel());
2195:       assertFalse(node1.isVar());
2196:       assertFalse(node1.isSetterDef());
2197:       assertFalse(node1.isStringKey());
2198:       assertFalse(node1.isParamList());
2199:       assertFalse(node1.isWith());
2200:       assertFalse(node1.isRegExp());
2201:       assertEquals(4095, node1.getCharno());
2202:       assertFalse(node1.isCase());
2203:       assertFalse(node1.isCatch());
2204:       assertFalse(node1.isScript());
2205:       assertFalse(node1.isHook());
2206:       assertFalse(node1.isInstanceOf());
2207:       assertEquals(1, node1.getChildCount());
2208:       assertFalse(node1.isTry());
2209:       assertFalse(node1.hasMoreThanOneChild());
2210:       assertEquals((-1047), node1.getType());
2211:       assertFalse(node1.isThis());
2212:       assertFalse(node1.isFor());
2213:       assertFalse(node1.isBlock());
2214:       assertFalse(node2.isFalse());
2215:       assertFalse(node2.isBreak());
2216:       assertFalse(node2.isSwitch());
2217:       assertFalse(node2.isAnd());
2218:       assertFalse(node2.isInc());
2219:       assertFalse(node2.isIn());
2220:       assertFalse(node2.isThrow());
2221:       assertFalse(node2.isFor());
2222:       assertFalse(node2.isGetterDef());
2223:       assertFalse(node2.isLabelName());
2224:       assertFalse(node2.isArrayLit());
2225:       assertFalse(node2.isNumber());
2226:       assertFalse(node2.isIf());
2227:       assertFalse(node2.isNE());
2228:       assertFalse(node2.isCase());
2229:       assertFalse(node2.isWith());
2230:       assertFalse(node2.isRegExp());
2231:       assertFalse(node2.isScript());
2232:       assertEquals(4095, node2.getCharno());
2233:       assertFalse(node2.hasMoreThanOneChild());
2234:       assertTrue(node2.hasChildren());
2235:       assertFalse(node2.isInstanceOf());
2236:       assertFalse(node2.isCatch());
2237:       assertFalse(node2.isTry());
2238:       assertFalse(node2.isBlock());
2239:       assertEquals(1, node2.getChildCount());
2240:       assertFalse(node2.isHook());
2241:       assertFalse(node2.isThis());
2242:       assertEquals((-1047), node2.getType());
2243:       assertFalse(node2.isName());
2244:       assertEquals(4, node2.getLineno());
2245:       assertFalse(node2.isSetterDef());
2246:       assertFalse(node2.isCall());
2247:       assertFalse(node2.isNull());
2248:       assertFalse(node2.isParamList());
2249:       assertFalse(node2.isStringKey());
2250:       assertFalse(node2.isDo());
2251:       assertFalse(node2.isContinue());
2252:       assertFalse(node2.isNew());
2253:       assertFalse(node2.isLabel());
2254:       assertFalse(node2.isAdd());
2255:       assertFalse(node2.isAssignAdd());
2256:       assertFalse(node2.isFunction());
2257:       assertFalse(node2.isVar());
2258:       assertFalse(node2.isDefaultCase());
2259:       assertFalse(node2.isEmpty());
2260:       assertTrue(node2.hasOneChild());
2261:       assertFalse(node2.isGetElem());
2262:       assertFalse(node2.isDelProp());
2263:       assertFalse(node2.isDec());
2264:       assertFalse(node2.isAssign());
2265:       assertFalse(node2.isTypeOf());
2266:       assertFalse(node2.isCast());
2267:       assertFalse(node2.isVoid());
2268:       assertFalse(node2.isDebugger());
2269:       assertFalse(node2.isOr());
2270:       assertFalse(node2.isTrue());
2271:       assertFalse(node2.isObjectLit());
2272:       assertFalse(node2.isNot());
2273:       assertFalse(node2.isString());
2274:       assertFalse(node2.isExprResult());
2275:       assertFalse(node2.isReturn());
2276:       assertFalse(node2.isGetProp());
2277:       assertEquals(20479, node2.getSourcePosition());
2278:       assertFalse(node2.isComma());
2279:       assertFalse(node2.isWhile());
2280:       assertFalse(node3.isBreak());
2281:       assertFalse(node3.isComma());
2282:       assertFalse(node3.isThrow());
2283:       assertFalse(node3.isThis());
2284:       assertFalse(node3.isHook());
2285:       assertFalse(node3.isInstanceOf());
2286:       assertFalse(node3.isFalse());
2287:       assertFalse(node3.isWith());
2288:       assertFalse(node3.isIn());
2289:       assertFalse(node3.isInc());
2290:       assertFalse(node3.isIf());
2291:       assertFalse(node3.isNumber());
2292:       assertFalse(node3.isGetterDef());
2293:       assertFalse(node3.isLabelName());
2294:       assertFalse(node3.isFor());
2295:       assertFalse(node3.isNE());
2296:       assertFalse(node3.isAssignAdd());
2297:       assertFalse(node3.isLabel());
2298:       assertEquals((-1), node3.getLineno());
2299:       assertFalse(node3.isArrayLit());
2300:       assertEquals(1, node3.getChildCount());
2301:       assertTrue(node3.hasChildren());
2302:       assertFalse(node3.hasMoreThanOneChild());
2303:       assertFalse(node3.isRegExp());
2304:       assertFalse(node3.isScript());
2305:       assertFalse(node3.isCase());
2306:       assertEquals((-1), node3.getCharno());
2307:       assertFalse(node3.isBlock());
2308:       assertFalse(node3.isSwitch());
2309:       assertFalse(node3.isTry());
2310:       assertFalse(node3.isNull());
2311:       assertFalse(node3.isSetterDef());
2312:       assertFalse(node3.isStringKey());
2313:       assertFalse(node3.isName());
2314:       assertFalse(node3.isVar());
2315:       assertFalse(node3.isParamList());
2316:       assertEquals(31, node3.getType());
2317:       assertFalse(node3.isCall());
2318:       assertFalse(node3.isCatch());
2319:       assertFalse(node3.isDefaultCase());
2320:       assertFalse(node3.isDo());
2321:       assertFalse(node3.isVoid());
2322:       assertFalse(node3.isTrue());
2323:       assertFalse(node3.isOr());
2324:       assertTrue(node3.isDelProp());
2325:       assertFalse(node3.isNew());
2326:       assertFalse(node3.isAdd());
2327:       assertFalse(node3.isEmpty());
2328:       assertFalse(node3.isDec());
2329:       assertTrue(node3.hasOneChild());
2330:       assertFalse(node3.isTypeOf());
2331:       assertFalse(node3.isAssign());
2332:       assertEquals((-1), node3.getSourcePosition());
2333:       assertFalse(node3.isReturn());
2334:       assertFalse(node3.isExprResult());
2335:       assertFalse(node3.isGetElem());
2336:       assertFalse(node3.isFunction());
2337:       assertFalse(node3.isCast());
2338:       assertFalse(node3.isContinue());
2339:       assertFalse(node3.isNot());
2340:       assertFalse(node3.isDebugger());
2341:       assertFalse(node3.isWhile());
2342:       assertFalse(node3.isAnd());
2343:       assertFalse(node3.isGetProp());
2344:       assertFalse(node3.isObjectLit());
2345:       assertFalse(node3.isString());
2346:       
2347:       Node node4 = Node.newNumber((-1137.378), 28, 30);
2348:       assertEquals(53, Node.INPUT_ID);
2349:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2350:       assertEquals(43, Node.IS_CONSTANT_NAME);
2351:       assertEquals(47, Node.IS_DISPATCHER);
2352:       assertEquals(2, Node.POST_FLAG);
2353:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2354:       assertEquals(4095, Node.COLUMN_MASK);
2355:       assertEquals(46, Node.IS_NAMESPACE);
2356:       assertEquals(12, Node.COLUMN_BITS);
2357:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2358:       assertEquals(1, Node.DECR_FLAG);
2359:       assertEquals(32, Node.INCRDECR_PROP);
2360:       assertEquals(50, Node.FREE_CALL);
2361:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2362:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2363:       assertEquals(52, Node.LENGTH);
2364:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2365:       assertEquals(54, Node.SLASH_V);
2366:       assertEquals(57, Node.REFLECTED_OBJECT);
2367:       assertEquals(57, Node.LAST_PROP);
2368:       assertEquals(30, Node.VAR_ARGS_NAME);
2369:       assertEquals(49, Node.DIRECT_EVAL);
2370:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2371:       assertEquals(40, Node.ORIGINALNAME_PROP);
2372:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2373:       assertEquals(39, Node.EMPTY_BLOCK);
2374:       assertEquals(37, Node.OPT_ARG_NAME);
2375:       assertEquals(56, Node.CHANGE_TIME);
2376:       assertEquals(48, Node.DIRECTIVES);
2377:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2378:       assertEquals(29, Node.JSDOC_INFO_PROP);
2379:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2380:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2381:       assertEquals(55, Node.INFERRED_FUNCTION);
2382:       assertEquals(8, Node.FLAG_NO_THROWS);
2383:       assertEquals(36, Node.QUOTED_PROP);
2384:       assertNotNull(node4);
2385:       assertFalse(node4.equals((Object)node1));
2386:       assertFalse(node4.equals((Object)node0));
2387:       assertFalse(node4.equals((Object)node3));
2388:       assertFalse(node4.equals((Object)node2));
2389:       assertFalse(node4.isScript());
2390:       assertFalse(node4.isExprResult());
2391:       assertFalse(node4.isAnd());
2392:       assertFalse(node4.hasOneChild());
2393:       assertFalse(node4.isNot());
2394:       assertFalse(node4.isObjectLit());
2395:       assertFalse(node4.isLabelName());
2396:       assertFalse(node4.isAssignAdd());
2397:       assertFalse(node4.isCast());
2398:       assertEquals(114718, node4.getSourcePosition());
2399:       assertFalse(node4.isThrow());
2400:       
2401:       boolean boolean4 = node2.isFromExterns();
2402:       assertFalse(boolean4);
2403:       assertSame(node1, node2);
2404:       assertNotSame(node1, node3);
2405:       assertNotSame(node2, node3);
2406:       assertSame(node2, node1);
2407:       assertEquals(53, Node.INPUT_ID);
2408:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2409:       assertEquals(43, Node.IS_CONSTANT_NAME);
2410:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2411:       assertEquals(55, Node.INFERRED_FUNCTION);
2412:       assertEquals(29, Node.JSDOC_INFO_PROP);
2413:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2414:       assertEquals(36, Node.QUOTED_PROP);
2415:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2416:       assertEquals(8, Node.FLAG_NO_THROWS);
2417:       assertEquals(39, Node.EMPTY_BLOCK);
2418:       assertEquals(40, Node.ORIGINALNAME_PROP);
2419:       assertEquals(47, Node.IS_DISPATCHER);
2420:       assertEquals(2, Node.POST_FLAG);
2421:       assertEquals(30, Node.VAR_ARGS_NAME);
2422:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2423:       assertEquals(54, Node.SLASH_V);
2424:       assertEquals(52, Node.LENGTH);
2425:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2426:       assertEquals(57, Node.LAST_PROP);
2427:       assertEquals(49, Node.DIRECT_EVAL);
2428:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2429:       assertEquals(46, Node.IS_NAMESPACE);
2430:       assertEquals(57, Node.REFLECTED_OBJECT);
2431:       assertEquals(50, Node.FREE_CALL);
2432:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2433:       assertEquals(48, Node.DIRECTIVES);
2434:       assertEquals(56, Node.CHANGE_TIME);
2435:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2436:       assertEquals(32, Node.INCRDECR_PROP);
2437:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2438:       assertEquals(37, Node.OPT_ARG_NAME);
2439:       assertEquals(1, Node.DECR_FLAG);
2440:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2441:       assertEquals(4095, Node.COLUMN_MASK);
2442:       assertEquals(12, Node.COLUMN_BITS);
2443:       assertEquals(37, Node.OPT_ARG_NAME);
2444:       assertEquals(2, Node.POST_FLAG);
2445:       assertEquals(32, Node.INCRDECR_PROP);
2446:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2447:       assertEquals(29, Node.JSDOC_INFO_PROP);
2448:       assertEquals(1, Node.DECR_FLAG);
2449:       assertEquals(30, Node.VAR_ARGS_NAME);
2450:       assertEquals(57, Node.LAST_PROP);
2451:       assertEquals(47, Node.IS_DISPATCHER);
2452:       assertEquals(12, Node.COLUMN_BITS);
2453:       assertEquals(40, Node.ORIGINALNAME_PROP);
2454:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2455:       assertEquals(50, Node.FREE_CALL);
2456:       assertEquals(43, Node.IS_CONSTANT_NAME);
2457:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2458:       assertEquals(46, Node.IS_NAMESPACE);
2459:       assertEquals(54, Node.SLASH_V);
2460:       assertEquals(48, Node.DIRECTIVES);
2461:       assertEquals(8, Node.FLAG_NO_THROWS);
2462:       assertEquals(4095, Node.COLUMN_MASK);
2463:       assertEquals(55, Node.INFERRED_FUNCTION);
2464:       assertEquals(39, Node.EMPTY_BLOCK);
2465:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2466:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2467:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2468:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2469:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2470:       assertEquals(52, Node.LENGTH);
2471:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2472:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2473:       assertEquals(53, Node.INPUT_ID);
2474:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2475:       assertEquals(49, Node.DIRECT_EVAL);
2476:       assertEquals(56, Node.CHANGE_TIME);
2477:       assertEquals(57, Node.REFLECTED_OBJECT);
2478:       assertEquals(36, Node.QUOTED_PROP);
2479:       assertEquals(8, Node.FLAG_NO_THROWS);
2480:       assertEquals(39, Node.EMPTY_BLOCK);
2481:       assertEquals(48, Node.DIRECTIVES);
2482:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2483:       assertEquals(50, Node.FREE_CALL);
2484:       assertEquals(40, Node.ORIGINALNAME_PROP);
2485:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2486:       assertEquals(4095, Node.COLUMN_MASK);
2487:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2488:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2489:       assertEquals(30, Node.VAR_ARGS_NAME);
2490:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2491:       assertEquals(46, Node.IS_NAMESPACE);
2492:       assertEquals(54, Node.SLASH_V);
2493:       assertEquals(43, Node.IS_CONSTANT_NAME);
2494:       assertEquals(2, Node.POST_FLAG);
2495:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2496:       assertEquals(47, Node.IS_DISPATCHER);
2497:       assertEquals(37, Node.OPT_ARG_NAME);
2498:       assertEquals(29, Node.JSDOC_INFO_PROP);
2499:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2500:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2501:       assertEquals(12, Node.COLUMN_BITS);
2502:       assertEquals(32, Node.INCRDECR_PROP);
2503:       assertEquals(1, Node.DECR_FLAG);
2504:       assertEquals(36, Node.QUOTED_PROP);
2505:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2506:       assertEquals(57, Node.LAST_PROP);
2507:       assertEquals(53, Node.INPUT_ID);
2508:       assertEquals(52, Node.LENGTH);
2509:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2510:       assertEquals(55, Node.INFERRED_FUNCTION);
2511:       assertEquals(57, Node.REFLECTED_OBJECT);
2512:       assertEquals(49, Node.DIRECT_EVAL);
2513:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2514:       assertEquals(56, Node.CHANGE_TIME);
2515:       assertFalse(node0.equals((Object)node1));
2516:       assertFalse(node0.equals((Object)node3));
2517:       assertFalse(node0.equals((Object)node2));
2518:       assertFalse(node0.equals((Object)node4));
2519:       assertFalse(node1.equals((Object)node0));
2520:       assertFalse(node1.equals((Object)node3));
2521:       assertFalse(node1.equals((Object)node4));
2522:       assertFalse(node2.equals((Object)node0));
2523:       assertFalse(node2.equals((Object)node3));
2524:       assertFalse(node2.equals((Object)node4));
2525:       assertTrue(boolean4 == boolean3);
2526:       assertTrue(boolean4 == boolean0);
2527:       assertTrue(boolean4 == boolean1);
2528:       assertTrue(boolean4 == boolean2);
2529:       
2530:       // Undeclared exception!
2531:       try { 
2532:         node1.getDouble();
2533:         fail("Expecting exception: IllegalStateException");
2534:       
2535:       } catch(IllegalStateException e) {
2536:          //
2537:          // -1047
2538:          //
2539:          verifyException("com.google.javascript.rhino.Token", e);
2540:       }
2541:   }
2542: }
RegularFileObject[/tmp/EvoSuite_198_1628157543933/com/google/javascript/rhino/Node_198_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:04 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_198_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_198_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_198_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.JSTypeNative",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.JSType$TypePair",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.JSType$2",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
375:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
377:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
378:     );
379:   }
380: }

[MASTER] 09:59:04.534 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("8`QN");
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertNotNull(node0);
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertNotNull(iterable0);
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());

boolean boolean0 = node0.isWhile();
assertFalse(boolean0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());

boolean boolean1 = node0.isEmpty();
assertFalse(boolean1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());

Node node1 = new Node((-1047), node0, node0, node0, 4, 4096);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertTrue(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertEquals(4, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertEquals(20479, node1.getSourcePosition());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isScript());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1047), node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());

boolean boolean2 = node0.isGetterDef();
assertFalse(boolean2);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());

Node node2 = node1.clonePropsFrom(node0);
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertTrue(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertEquals(4, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertEquals(20479, node1.getSourcePosition());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isScript());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1047), node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertEquals(4095, node2.getCharno());
assertFalse(node2.hasMoreThanOneChild());
assertTrue(node2.hasChildren());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertEquals((-1047), node2.getType());
assertFalse(node2.isName());
assertEquals(4, node2.getLineno());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFunction());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertTrue(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isOr());
assertFalse(node2.isTrue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertEquals(20479, node2.getSourcePosition());
assertFalse(node2.isComma());
assertFalse(node2.isWhile());

Node node3 = new Node(31, node2);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(node3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertTrue(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertEquals(4, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertEquals(20479, node1.getSourcePosition());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isScript());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1047), node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertEquals(4095, node2.getCharno());
assertFalse(node2.hasMoreThanOneChild());
assertTrue(node2.hasChildren());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertEquals((-1047), node2.getType());
assertFalse(node2.isName());
assertEquals(4, node2.getLineno());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFunction());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertTrue(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isOr());
assertFalse(node2.isTrue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertEquals(20479, node2.getSourcePosition());
assertFalse(node2.isComma());
assertFalse(node2.isWhile());
assertFalse(node3.isBreak());
assertFalse(node3.isComma());
assertFalse(node3.isThrow());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isFalse());
assertFalse(node3.isWith());
assertFalse(node3.isIn());
assertFalse(node3.isInc());
assertFalse(node3.isIf());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isLabelName());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isArrayLit());
assertEquals(1, node3.getChildCount());
assertTrue(node3.hasChildren());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertFalse(node3.isScript());
assertFalse(node3.isCase());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isBlock());
assertFalse(node3.isSwitch());
assertFalse(node3.isTry());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertEquals(31, node3.getType());
assertFalse(node3.isCall());
assertFalse(node3.isCatch());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isOr());
assertTrue(node3.isDelProp());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isDec());
assertTrue(node3.hasOneChild());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isReturn());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertFalse(node3.isWhile());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertFalse(node3.isObjectLit());
assertFalse(node3.isString());

boolean boolean3 = node3.isSyntheticBlock();
assertFalse(boolean3);
assertSame(node1, node2);
assertNotSame(node1, node3);
assertNotSame(node2, node3);
assertSame(node2, node1);
assertNotSame(node3, node1);
assertNotSame(node3, node2);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertTrue(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertEquals(4, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertEquals(20479, node1.getSourcePosition());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isScript());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1047), node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertEquals(4095, node2.getCharno());
assertFalse(node2.hasMoreThanOneChild());
assertTrue(node2.hasChildren());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertEquals((-1047), node2.getType());
assertFalse(node2.isName());
assertEquals(4, node2.getLineno());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFunction());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertTrue(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isOr());
assertFalse(node2.isTrue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertEquals(20479, node2.getSourcePosition());
assertFalse(node2.isComma());
assertFalse(node2.isWhile());
assertFalse(node3.isBreak());
assertFalse(node3.isComma());
assertFalse(node3.isThrow());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isFalse());
assertFalse(node3.isWith());
assertFalse(node3.isIn());
assertFalse(node3.isInc());
assertFalse(node3.isIf());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isLabelName());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isArrayLit());
assertEquals(1, node3.getChildCount());
assertTrue(node3.hasChildren());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertFalse(node3.isScript());
assertFalse(node3.isCase());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isBlock());
assertFalse(node3.isSwitch());
assertFalse(node3.isTry());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertEquals(31, node3.getType());
assertFalse(node3.isCall());
assertFalse(node3.isCatch());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isOr());
assertTrue(node3.isDelProp());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isDec());
assertTrue(node3.hasOneChild());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isReturn());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertFalse(node3.isWhile());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertFalse(node3.isObjectLit());
assertFalse(node3.isString());

node3.setChangeTime(12);
assertSame(node1, node2);
assertNotSame(node1, node3);
assertNotSame(node2, node3);
assertSame(node2, node1);
assertNotSame(node3, node1);
assertNotSame(node3, node2);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertTrue(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertEquals(4, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertEquals(20479, node1.getSourcePosition());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isScript());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1047), node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertEquals(4095, node2.getCharno());
assertFalse(node2.hasMoreThanOneChild());
assertTrue(node2.hasChildren());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertEquals((-1047), node2.getType());
assertFalse(node2.isName());
assertEquals(4, node2.getLineno());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCall());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isLabel());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFunction());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertTrue(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isOr());
assertFalse(node2.isTrue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertEquals(20479, node2.getSourcePosition());
assertFalse(node2.isComma());
assertFalse(node2.isWhile());
assertFalse(node3.isBreak());
assertFalse(node3.isComma());
assertFalse(node3.isThrow());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isFalse());
assertFalse(node3.isWith());
assertFalse(node3.isIn());
assertFalse(node3.isInc());
assertFalse(node3.isIf());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isLabelName());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isArrayLit());
assertEquals(1, node3.getChildCount());
assertTrue(node3.hasChildren());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertFalse(node3.isScript());
assertFalse(node3.isCase());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isBlock());
assertFalse(node3.isSwitch());
assertFalse(node3.isTry());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertEquals(31, node3.getType());
assertFalse(node3.isCall());
assertFalse(node3.isCatch());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isOr());
assertTrue(node3.isDelProp());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isDec());
assertTrue(node3.hasOneChild());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isReturn());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertFalse(node3.isWhile());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertFalse(node3.isObjectLit());
assertFalse(node3.isString());

Node node4 = Node.newNumber((-1137.378), 28, 30);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertNotNull(node4);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.isScript());
assertFalse(node4.isExprResult());
assertFalse(node4.isAnd());
assertFalse(node4.hasOneChild());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isLabelName());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isCast());
assertEquals(114718, node4.getSourcePosition());
assertFalse(node4.isThrow());

boolean boolean4 = node2.isFromExterns();
assertFalse(boolean4);
assertSame(node1, node2);
assertNotSame(node1, node3);
assertNotSame(node2, node3);
assertSame(node2, node1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node4));
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);

node1.getDouble();

[MASTER] 09:59:05.153 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_201_1628157544923/com/google/javascript/rhino/Node_201_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_201_1628157544923/com/google/javascript/rhino/Node_201_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:05.153 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:05.153 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:05.153 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 365
[MASTER] 09:59:05.154 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_201_1628157544923/com/google/javascript/rhino/Node_201_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:04 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSType;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import java.util.ArrayList;
15: import java.util.List;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_201_tmp__ESTest extends Node_201_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
26:       assertNotNull(simpleErrorReporter0);
27:       
28:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
29:       assertNotNull(jSTypeRegistry0);
30:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
31:       
32:       ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
33:       assertNotNull(arrayList0);
34:       assertEquals(0, arrayList0.size());
35:       assertTrue(arrayList0.isEmpty());
36:       
37:       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
38:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
39:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
40:       assertEquals(29, Node.JSDOC_INFO_PROP);
41:       assertEquals(2, Node.POST_FLAG);
42:       assertEquals(37, Node.OPT_ARG_NAME);
43:       assertEquals(47, Node.IS_DISPATCHER);
44:       assertEquals(55, Node.INFERRED_FUNCTION);
45:       assertEquals(4095, Node.COLUMN_MASK);
46:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
47:       assertEquals(48, Node.DIRECTIVES);
48:       assertEquals(57, Node.LAST_PROP);
49:       assertEquals(49, Node.DIRECT_EVAL);
50:       assertEquals(8, Node.FLAG_NO_THROWS);
51:       assertEquals(39, Node.EMPTY_BLOCK);
52:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
53:       assertEquals(36, Node.QUOTED_PROP);
54:       assertEquals(56, Node.CHANGE_TIME);
55:       assertEquals(15, Node.NO_SIDE_EFFECTS);
56:       assertEquals(53, Node.INPUT_ID);
57:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
58:       assertEquals(52, Node.LENGTH);
59:       assertEquals(57, Node.REFLECTED_OBJECT);
60:       assertEquals(40, Node.ORIGINALNAME_PROP);
61:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
62:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
63:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
64:       assertEquals(30, Node.VAR_ARGS_NAME);
65:       assertEquals(51, Node.STATIC_SOURCE_FILE);
66:       assertEquals(12, Node.COLUMN_BITS);
67:       assertEquals(46, Node.IS_NAMESPACE);
68:       assertEquals(1, Node.DECR_FLAG);
69:       assertEquals(32, Node.INCRDECR_PROP);
70:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
71:       assertEquals(43, Node.IS_CONSTANT_NAME);
72:       assertEquals(54, Node.SLASH_V);
73:       assertEquals(50, Node.FREE_CALL);
74:       assertNotNull(node0);
75:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
76:       assertEquals(0, arrayList0.size());
77:       assertTrue(arrayList0.isEmpty());
78:       assertFalse(node0.isTry());
79:       assertFalse(node0.isTrue());
80:       assertFalse(node0.isArrayLit());
81:       assertFalse(node0.isVoid());
82:       assertFalse(node0.isDefaultCase());
83:       assertFalse(node0.isEmpty());
84:       assertFalse(node0.isDebugger());
85:       assertFalse(node0.isGetterDef());
86:       assertFalse(node0.isNE());
87:       assertFalse(node0.isIf());
88:       assertFalse(node0.isDelProp());
89:       assertFalse(node0.isFor());
90:       assertFalse(node0.isCall());
91:       assertFalse(node0.isCatch());
92:       assertFalse(node0.isRegExp());
93:       assertFalse(node0.isInc());
94:       assertFalse(node0.isString());
95:       assertFalse(node0.isIn());
96:       assertFalse(node0.isSetterDef());
97:       assertFalse(node0.isAnd());
98:       assertFalse(node0.isThrow());
99:       assertFalse(node0.isCast());
100:       assertFalse(node0.isContinue());
101:       assertFalse(node0.isFalse());
102:       assertFalse(node0.isFunction());
103:       assertFalse(node0.isExprResult());
104:       assertFalse(node0.hasOneChild());
105:       assertFalse(node0.isNot());
106:       assertFalse(node0.isScript());
107:       assertEquals((-1), node0.getSourcePosition());
108:       assertFalse(node0.isNumber());
109:       assertTrue(node0.isParamList());
110:       assertFalse(node0.isObjectLit());
111:       assertFalse(node0.isOr());
112:       assertEquals((-1), node0.getLineno());
113:       assertFalse(node0.isInstanceOf());
114:       assertFalse(node0.isGetProp());
115:       assertFalse(node0.isThis());
116:       assertFalse(node0.isReturn());
117:       assertFalse(node0.isAssign());
118:       assertFalse(node0.isWith());
119:       assertFalse(node0.isWhile());
120:       assertFalse(node0.isBreak());
121:       assertFalse(node0.hasChildren());
122:       assertFalse(node0.isGetElem());
123:       assertFalse(node0.isComma());
124:       assertFalse(node0.hasMoreThanOneChild());
125:       assertFalse(node0.isDec());
126:       assertFalse(node0.isTypeOf());
127:       assertFalse(node0.isNew());
128:       assertFalse(node0.isHook());
129:       assertFalse(node0.isAdd());
130:       assertFalse(node0.isBlock());
131:       assertFalse(node0.isVar());
132:       assertFalse(node0.isSwitch());
133:       assertFalse(node0.isName());
134:       assertFalse(node0.isDo());
135:       assertFalse(node0.isCase());
136:       assertFalse(node0.isStringKey());
137:       assertFalse(node0.isNull());
138:       assertEquals(83, node0.getType());
139:       assertEquals((-1), node0.getCharno());
140:       assertFalse(node0.isLabel());
141:       assertFalse(node0.isAssignAdd());
142:       assertFalse(node0.isLabelName());
143:       assertEquals(0, node0.getChildCount());
144:       
145:       boolean boolean0 = node0.isDefaultCase();
146:       assertFalse(boolean0);
147:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
148:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
149:       assertEquals(29, Node.JSDOC_INFO_PROP);
150:       assertEquals(2, Node.POST_FLAG);
151:       assertEquals(37, Node.OPT_ARG_NAME);
152:       assertEquals(47, Node.IS_DISPATCHER);
153:       assertEquals(55, Node.INFERRED_FUNCTION);
154:       assertEquals(4095, Node.COLUMN_MASK);
155:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
156:       assertEquals(48, Node.DIRECTIVES);
157:       assertEquals(57, Node.LAST_PROP);
158:       assertEquals(49, Node.DIRECT_EVAL);
159:       assertEquals(8, Node.FLAG_NO_THROWS);
160:       assertEquals(39, Node.EMPTY_BLOCK);
161:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
162:       assertEquals(36, Node.QUOTED_PROP);
163:       assertEquals(56, Node.CHANGE_TIME);
164:       assertEquals(15, Node.NO_SIDE_EFFECTS);
165:       assertEquals(53, Node.INPUT_ID);
166:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
167:       assertEquals(52, Node.LENGTH);
168:       assertEquals(57, Node.REFLECTED_OBJECT);
169:       assertEquals(40, Node.ORIGINALNAME_PROP);
170:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
171:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
172:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
173:       assertEquals(30, Node.VAR_ARGS_NAME);
174:       assertEquals(51, Node.STATIC_SOURCE_FILE);
175:       assertEquals(12, Node.COLUMN_BITS);
176:       assertEquals(46, Node.IS_NAMESPACE);
177:       assertEquals(1, Node.DECR_FLAG);
178:       assertEquals(32, Node.INCRDECR_PROP);
179:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
180:       assertEquals(43, Node.IS_CONSTANT_NAME);
181:       assertEquals(54, Node.SLASH_V);
182:       assertEquals(50, Node.FREE_CALL);
183:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
184:       assertEquals(0, arrayList0.size());
185:       assertTrue(arrayList0.isEmpty());
186:       assertFalse(node0.isTry());
187:       assertFalse(node0.isTrue());
188:       assertFalse(node0.isArrayLit());
189:       assertFalse(node0.isVoid());
190:       assertFalse(node0.isDefaultCase());
191:       assertFalse(node0.isEmpty());
192:       assertFalse(node0.isDebugger());
193:       assertFalse(node0.isGetterDef());
194:       assertFalse(node0.isNE());
195:       assertFalse(node0.isIf());
196:       assertFalse(node0.isDelProp());
197:       assertFalse(node0.isFor());
198:       assertFalse(node0.isCall());
199:       assertFalse(node0.isCatch());
200:       assertFalse(node0.isRegExp());
201:       assertFalse(node0.isInc());
202:       assertFalse(node0.isString());
203:       assertFalse(node0.isIn());
204:       assertFalse(node0.isSetterDef());
205:       assertFalse(node0.isAnd());
206:       assertFalse(node0.isThrow());
207:       assertFalse(node0.isCast());
208:       assertFalse(node0.isContinue());
209:       assertFalse(node0.isFalse());
210:       assertFalse(node0.isFunction());
211:       assertFalse(node0.isExprResult());
212:       assertFalse(node0.hasOneChild());
213:       assertFalse(node0.isNot());
214:       assertFalse(node0.isScript());
215:       assertEquals((-1), node0.getSourcePosition());
216:       assertFalse(node0.isNumber());
217:       assertTrue(node0.isParamList());
218:       assertFalse(node0.isObjectLit());
219:       assertFalse(node0.isOr());
220:       assertEquals((-1), node0.getLineno());
221:       assertFalse(node0.isInstanceOf());
222:       assertFalse(node0.isGetProp());
223:       assertFalse(node0.isThis());
224:       assertFalse(node0.isReturn());
225:       assertFalse(node0.isAssign());
226:       assertFalse(node0.isWith());
227:       assertFalse(node0.isWhile());
228:       assertFalse(node0.isBreak());
229:       assertFalse(node0.hasChildren());
230:       assertFalse(node0.isGetElem());
231:       assertFalse(node0.isComma());
232:       assertFalse(node0.hasMoreThanOneChild());
233:       assertFalse(node0.isDec());
234:       assertFalse(node0.isTypeOf());
235:       assertFalse(node0.isNew());
236:       assertFalse(node0.isHook());
237:       assertFalse(node0.isAdd());
238:       assertFalse(node0.isBlock());
239:       assertFalse(node0.isVar());
240:       assertFalse(node0.isSwitch());
241:       assertFalse(node0.isName());
242:       assertFalse(node0.isDo());
243:       assertFalse(node0.isCase());
244:       assertFalse(node0.isStringKey());
245:       assertFalse(node0.isNull());
246:       assertEquals(83, node0.getType());
247:       assertEquals((-1), node0.getCharno());
248:       assertFalse(node0.isLabel());
249:       assertFalse(node0.isAssignAdd());
250:       assertFalse(node0.isLabelName());
251:       assertEquals(0, node0.getChildCount());
252:       
253:       JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
254:       assertNotNull(jSTypeRegistry1);
255:       assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
256:       assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
257:       
258:       Node node1 = new Node(8);
259:       assertEquals(43, Node.IS_CONSTANT_NAME);
260:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
261:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
262:       assertEquals(53, Node.INPUT_ID);
263:       assertEquals(55, Node.INFERRED_FUNCTION);
264:       assertEquals(8, Node.FLAG_NO_THROWS);
265:       assertEquals(36, Node.QUOTED_PROP);
266:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
267:       assertEquals(56, Node.CHANGE_TIME);
268:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
269:       assertEquals(37, Node.OPT_ARG_NAME);
270:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
271:       assertEquals(48, Node.DIRECTIVES);
272:       assertEquals(32, Node.INCRDECR_PROP);
273:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
274:       assertEquals(12, Node.COLUMN_BITS);
275:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
276:       assertEquals(4095, Node.COLUMN_MASK);
277:       assertEquals(15, Node.NO_SIDE_EFFECTS);
278:       assertEquals(57, Node.LAST_PROP);
279:       assertEquals(49, Node.DIRECT_EVAL);
280:       assertEquals(1, Node.DECR_FLAG);
281:       assertEquals(52, Node.LENGTH);
282:       assertEquals(57, Node.REFLECTED_OBJECT);
283:       assertEquals(46, Node.IS_NAMESPACE);
284:       assertEquals(54, Node.SLASH_V);
285:       assertEquals(51, Node.STATIC_SOURCE_FILE);
286:       assertEquals(50, Node.FREE_CALL);
287:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
288:       assertEquals(47, Node.IS_DISPATCHER);
289:       assertEquals(29, Node.JSDOC_INFO_PROP);
290:       assertEquals(40, Node.ORIGINALNAME_PROP);
291:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
292:       assertEquals(39, Node.EMPTY_BLOCK);
293:       assertEquals(2, Node.POST_FLAG);
294:       assertEquals(30, Node.VAR_ARGS_NAME);
295:       assertNotNull(node1);
296:       assertFalse(node1.equals((Object)node0));
297:       assertFalse(node1.isCatch());
298:       assertFalse(node1.isDefaultCase());
299:       assertFalse(node1.isFunction());
300:       assertFalse(node1.isRegExp());
301:       assertEquals(0, node1.getChildCount());
302:       assertFalse(node1.isArrayLit());
303:       assertFalse(node1.isStringKey());
304:       assertFalse(node1.isFor());
305:       assertFalse(node1.isTry());
306:       assertFalse(node1.isParamList());
307:       assertFalse(node1.isDebugger());
308:       assertFalse(node1.isGetterDef());
309:       assertEquals(8, node1.getType());
310:       assertFalse(node1.isWhile());
311:       assertFalse(node1.isAssignAdd());
312:       assertFalse(node1.isDo());
313:       assertFalse(node1.isReturn());
314:       assertFalse(node1.isLabel());
315:       assertFalse(node1.hasChildren());
316:       assertFalse(node1.isTypeOf());
317:       assertFalse(node1.isDec());
318:       assertFalse(node1.isAssign());
319:       assertFalse(node1.isCall());
320:       assertFalse(node1.isGetElem());
321:       assertFalse(node1.isEmpty());
322:       assertFalse(node1.isVar());
323:       assertFalse(node1.isBreak());
324:       assertFalse(node1.isNew());
325:       assertFalse(node1.isName());
326:       assertFalse(node1.isVoid());
327:       assertFalse(node1.isDelProp());
328:       assertFalse(node1.isTrue());
329:       assertFalse(node1.isNull());
330:       assertFalse(node1.isAdd());
331:       assertFalse(node1.isOr());
332:       assertFalse(node1.isAnd());
333:       assertFalse(node1.isInstanceOf());
334:       assertFalse(node1.isComma());
335:       assertFalse(node1.isThis());
336:       assertFalse(node1.isExprResult());
337:       assertFalse(node1.isWith());
338:       assertFalse(node1.isFalse());
339:       assertFalse(node1.isHook());
340:       assertFalse(node1.isCast());
341:       assertFalse(node1.hasOneChild());
342:       assertFalse(node1.isLabelName());
343:       assertEquals((-1), node1.getCharno());
344:       assertFalse(node1.isSwitch());
345:       assertFalse(node1.isGetProp());
346:       assertFalse(node1.isScript());
347:       assertFalse(node1.isString());
348:       assertFalse(node1.isNumber());
349:       assertEquals((-1), node1.getSourcePosition());
350:       assertFalse(node1.isNot());
351:       assertFalse(node1.isObjectLit());
352:       assertFalse(node1.hasMoreThanOneChild());
353:       assertFalse(node1.isContinue());
354:       assertEquals((-1), node1.getLineno());
355:       assertFalse(node1.isCase());
356:       assertFalse(node1.isBlock());
357:       assertFalse(node1.isThrow());
358:       assertFalse(node1.isIf());
359:       assertFalse(node1.isInc());
360:       assertFalse(node1.isSetterDef());
361:       assertFalse(node1.isNE());
362:       assertFalse(node1.isIn());
363:       
364:       Iterable<Node> iterable0 = node0.children();
365:       assertFalse(iterable0.contains(node0));
366:       assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
367:       assertNotSame(node0, node1);
368:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
369:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
370:       assertEquals(29, Node.JSDOC_INFO_PROP);
371:       assertEquals(2, Node.POST_FLAG);
372:       assertEquals(37, Node.OPT_ARG_NAME);
373:       assertEquals(47, Node.IS_DISPATCHER);
374:       assertEquals(55, Node.INFERRED_FUNCTION);
375:       assertEquals(4095, Node.COLUMN_MASK);
376:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
377:       assertEquals(48, Node.DIRECTIVES);
378:       assertEquals(57, Node.LAST_PROP);
379:       assertEquals(49, Node.DIRECT_EVAL);
380:       assertEquals(8, Node.FLAG_NO_THROWS);
381:       assertEquals(39, Node.EMPTY_BLOCK);
382:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
383:       assertEquals(36, Node.QUOTED_PROP);
384:       assertEquals(56, Node.CHANGE_TIME);
385:       assertEquals(15, Node.NO_SIDE_EFFECTS);
386:       assertEquals(53, Node.INPUT_ID);
387:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
388:       assertEquals(52, Node.LENGTH);
389:       assertEquals(57, Node.REFLECTED_OBJECT);
390:       assertEquals(40, Node.ORIGINALNAME_PROP);
391:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
392:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
393:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
394:       assertEquals(30, Node.VAR_ARGS_NAME);
395:       assertEquals(51, Node.STATIC_SOURCE_FILE);
396:       assertEquals(12, Node.COLUMN_BITS);
397:       assertEquals(46, Node.IS_NAMESPACE);
398:       assertEquals(1, Node.DECR_FLAG);
399:       assertEquals(32, Node.INCRDECR_PROP);
400:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
401:       assertEquals(43, Node.IS_CONSTANT_NAME);
402:       assertEquals(54, Node.SLASH_V);
403:       assertEquals(50, Node.FREE_CALL);
404:       assertNotNull(iterable0);
405:       assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
406:       assertFalse(node0.equals((Object)node1));
407:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
408:       assertEquals(0, arrayList0.size());
409:       assertTrue(arrayList0.isEmpty());
410:       assertFalse(node0.isTry());
411:       assertFalse(node0.isTrue());
412:       assertFalse(node0.isArrayLit());
413:       assertFalse(node0.isVoid());
414:       assertFalse(node0.isDefaultCase());
415:       assertFalse(node0.isEmpty());
416:       assertFalse(node0.isDebugger());
417:       assertFalse(node0.isGetterDef());
418:       assertFalse(node0.isNE());
419:       assertFalse(node0.isIf());
420:       assertFalse(node0.isDelProp());
421:       assertFalse(node0.isFor());
422:       assertFalse(node0.isCall());
423:       assertFalse(node0.isCatch());
424:       assertFalse(node0.isRegExp());
425:       assertFalse(node0.isInc());
426:       assertFalse(node0.isString());
427:       assertFalse(node0.isIn());
428:       assertFalse(node0.isSetterDef());
429:       assertFalse(node0.isAnd());
430:       assertFalse(node0.isThrow());
431:       assertFalse(node0.isCast());
432:       assertFalse(node0.isContinue());
433:       assertFalse(node0.isFalse());
434:       assertFalse(node0.isFunction());
435:       assertFalse(node0.isExprResult());
436:       assertFalse(node0.hasOneChild());
437:       assertFalse(node0.isNot());
438:       assertFalse(node0.isScript());
439:       assertEquals((-1), node0.getSourcePosition());
440:       assertFalse(node0.isNumber());
441:       assertTrue(node0.isParamList());
442:       assertFalse(node0.isObjectLit());
443:       assertFalse(node0.isOr());
444:       assertEquals((-1), node0.getLineno());
445:       assertFalse(node0.isInstanceOf());
446:       assertFalse(node0.isGetProp());
447:       assertFalse(node0.isThis());
448:       assertFalse(node0.isReturn());
449:       assertFalse(node0.isAssign());
450:       assertFalse(node0.isWith());
451:       assertFalse(node0.isWhile());
452:       assertFalse(node0.isBreak());
453:       assertFalse(node0.hasChildren());
454:       assertFalse(node0.isGetElem());
455:       assertFalse(node0.isComma());
456:       assertFalse(node0.hasMoreThanOneChild());
457:       assertFalse(node0.isDec());
458:       assertFalse(node0.isTypeOf());
459:       assertFalse(node0.isNew());
460:       assertFalse(node0.isHook());
461:       assertFalse(node0.isAdd());
462:       assertFalse(node0.isBlock());
463:       assertFalse(node0.isVar());
464:       assertFalse(node0.isSwitch());
465:       assertFalse(node0.isName());
466:       assertFalse(node0.isDo());
467:       assertFalse(node0.isCase());
468:       assertFalse(node0.isStringKey());
469:       assertFalse(node0.isNull());
470:       assertEquals(83, node0.getType());
471:       assertEquals((-1), node0.getCharno());
472:       assertFalse(node0.isLabel());
473:       assertFalse(node0.isAssignAdd());
474:       assertFalse(node0.isLabelName());
475:       assertEquals(0, node0.getChildCount());
476:       
477:       boolean boolean1 = node0.isGetProp();
478:       assertFalse(boolean1);
479:       assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
480:       assertNotSame(node0, node1);
481:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
482:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
483:       assertEquals(29, Node.JSDOC_INFO_PROP);
484:       assertEquals(2, Node.POST_FLAG);
485:       assertEquals(37, Node.OPT_ARG_NAME);
486:       assertEquals(47, Node.IS_DISPATCHER);
487:       assertEquals(55, Node.INFERRED_FUNCTION);
488:       assertEquals(4095, Node.COLUMN_MASK);
489:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
490:       assertEquals(48, Node.DIRECTIVES);
491:       assertEquals(57, Node.LAST_PROP);
492:       assertEquals(49, Node.DIRECT_EVAL);
493:       assertEquals(8, Node.FLAG_NO_THROWS);
494:       assertEquals(39, Node.EMPTY_BLOCK);
495:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
496:       assertEquals(36, Node.QUOTED_PROP);
497:       assertEquals(56, Node.CHANGE_TIME);
498:       assertEquals(15, Node.NO_SIDE_EFFECTS);
499:       assertEquals(53, Node.INPUT_ID);
500:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
501:       assertEquals(52, Node.LENGTH);
502:       assertEquals(57, Node.REFLECTED_OBJECT);
503:       assertEquals(40, Node.ORIGINALNAME_PROP);
504:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
505:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
506:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
507:       assertEquals(30, Node.VAR_ARGS_NAME);
508:       assertEquals(51, Node.STATIC_SOURCE_FILE);
509:       assertEquals(12, Node.COLUMN_BITS);
510:       assertEquals(46, Node.IS_NAMESPACE);
511:       assertEquals(1, Node.DECR_FLAG);
512:       assertEquals(32, Node.INCRDECR_PROP);
513:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
514:       assertEquals(43, Node.IS_CONSTANT_NAME);
515:       assertEquals(54, Node.SLASH_V);
516:       assertEquals(50, Node.FREE_CALL);
517:       assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
518:       assertFalse(node0.equals((Object)node1));
519:       assertTrue(boolean1 == boolean0);
520:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
521:       assertEquals(0, arrayList0.size());
522:       assertTrue(arrayList0.isEmpty());
523:       assertFalse(node0.isTry());
524:       assertFalse(node0.isTrue());
525:       assertFalse(node0.isArrayLit());
526:       assertFalse(node0.isVoid());
527:       assertFalse(node0.isDefaultCase());
528:       assertFalse(node0.isEmpty());
529:       assertFalse(node0.isDebugger());
530:       assertFalse(node0.isGetterDef());
531:       assertFalse(node0.isNE());
532:       assertFalse(node0.isIf());
533:       assertFalse(node0.isDelProp());
534:       assertFalse(node0.isFor());
535:       assertFalse(node0.isCall());
536:       assertFalse(node0.isCatch());
537:       assertFalse(node0.isRegExp());
538:       assertFalse(node0.isInc());
539:       assertFalse(node0.isString());
540:       assertFalse(node0.isIn());
541:       assertFalse(node0.isSetterDef());
542:       assertFalse(node0.isAnd());
543:       assertFalse(node0.isThrow());
544:       assertFalse(node0.isCast());
545:       assertFalse(node0.isContinue());
546:       assertFalse(node0.isFalse());
547:       assertFalse(node0.isFunction());
548:       assertFalse(node0.isExprResult());
549:       assertFalse(node0.hasOneChild());
550:       assertFalse(node0.isNot());
551:       assertFalse(node0.isScript());
552:       assertEquals((-1), node0.getSourcePosition());
553:       assertFalse(node0.isNumber());
554:       assertTrue(node0.isParamList());
555:       assertFalse(node0.isObjectLit());
556:       assertFalse(node0.isOr());
557:       assertEquals((-1), node0.getLineno());
558:       assertFalse(node0.isInstanceOf());
559:       assertFalse(node0.isGetProp());
560:       assertFalse(node0.isThis());
561:       assertFalse(node0.isReturn());
562:       assertFalse(node0.isAssign());
563:       assertFalse(node0.isWith());
564:       assertFalse(node0.isWhile());
565:       assertFalse(node0.isBreak());
566:       assertFalse(node0.hasChildren());
567:       assertFalse(node0.isGetElem());
568:       assertFalse(node0.isComma());
569:       assertFalse(node0.hasMoreThanOneChild());
570:       assertFalse(node0.isDec());
571:       assertFalse(node0.isTypeOf());
572:       assertFalse(node0.isNew());
573:       assertFalse(node0.isHook());
574:       assertFalse(node0.isAdd());
575:       assertFalse(node0.isBlock());
576:       assertFalse(node0.isVar());
577:       assertFalse(node0.isSwitch());
578:       assertFalse(node0.isName());
579:       assertFalse(node0.isDo());
580:       assertFalse(node0.isCase());
581:       assertFalse(node0.isStringKey());
582:       assertFalse(node0.isNull());
583:       assertEquals(83, node0.getType());
584:       assertEquals((-1), node0.getCharno());
585:       assertFalse(node0.isLabel());
586:       assertFalse(node0.isAssignAdd());
587:       assertFalse(node0.isLabelName());
588:       assertEquals(0, node0.getChildCount());
589:       
590:       boolean boolean2 = node1.isParamList();
591:       assertFalse(boolean2);
592:       assertNotSame(node1, node0);
593:       assertEquals(43, Node.IS_CONSTANT_NAME);
594:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
595:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
596:       assertEquals(53, Node.INPUT_ID);
597:       assertEquals(55, Node.INFERRED_FUNCTION);
598:       assertEquals(8, Node.FLAG_NO_THROWS);
599:       assertEquals(36, Node.QUOTED_PROP);
600:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
601:       assertEquals(56, Node.CHANGE_TIME);
602:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
603:       assertEquals(37, Node.OPT_ARG_NAME);
604:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
605:       assertEquals(48, Node.DIRECTIVES);
606:       assertEquals(32, Node.INCRDECR_PROP);
607:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
608:       assertEquals(12, Node.COLUMN_BITS);
609:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
610:       assertEquals(4095, Node.COLUMN_MASK);
611:       assertEquals(15, Node.NO_SIDE_EFFECTS);
612:       assertEquals(57, Node.LAST_PROP);
613:       assertEquals(49, Node.DIRECT_EVAL);
614:       assertEquals(1, Node.DECR_FLAG);
615:       assertEquals(52, Node.LENGTH);
616:       assertEquals(57, Node.REFLECTED_OBJECT);
617:       assertEquals(46, Node.IS_NAMESPACE);
618:       assertEquals(54, Node.SLASH_V);
619:       assertEquals(51, Node.STATIC_SOURCE_FILE);
620:       assertEquals(50, Node.FREE_CALL);
621:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
622:       assertEquals(47, Node.IS_DISPATCHER);
623:       assertEquals(29, Node.JSDOC_INFO_PROP);
624:       assertEquals(40, Node.ORIGINALNAME_PROP);
625:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
626:       assertEquals(39, Node.EMPTY_BLOCK);
627:       assertEquals(2, Node.POST_FLAG);
628:       assertEquals(30, Node.VAR_ARGS_NAME);
629:       assertFalse(node1.equals((Object)node0));
630:       assertTrue(boolean2 == boolean0);
631:       assertTrue(boolean2 == boolean1);
632:       assertFalse(node1.isCatch());
633:       assertFalse(node1.isDefaultCase());
634:       assertFalse(node1.isFunction());
635:       assertFalse(node1.isRegExp());
636:       assertEquals(0, node1.getChildCount());
637:       assertFalse(node1.isArrayLit());
638:       assertFalse(node1.isStringKey());
639:       assertFalse(node1.isFor());
640:       assertFalse(node1.isTry());
641:       assertFalse(node1.isParamList());
642:       assertFalse(node1.isDebugger());
643:       assertFalse(node1.isGetterDef());
644:       assertEquals(8, node1.getType());
645:       assertFalse(node1.isWhile());
646:       assertFalse(node1.isAssignAdd());
647:       assertFalse(node1.isDo());
648:       assertFalse(node1.isReturn());
649:       assertFalse(node1.isLabel());
650:       assertFalse(node1.hasChildren());
651:       assertFalse(node1.isTypeOf());
652:       assertFalse(node1.isDec());
653:       assertFalse(node1.isAssign());
654:       assertFalse(node1.isCall());
655:       assertFalse(node1.isGetElem());
656:       assertFalse(node1.isEmpty());
657:       assertFalse(node1.isVar());
658:       assertFalse(node1.isBreak());
659:       assertFalse(node1.isNew());
660:       assertFalse(node1.isName());
661:       assertFalse(node1.isVoid());
662:       assertFalse(node1.isDelProp());
663:       assertFalse(node1.isTrue());
664:       assertFalse(node1.isNull());
665:       assertFalse(node1.isAdd());
666:       assertFalse(node1.isOr());
667:       assertFalse(node1.isAnd());
668:       assertFalse(node1.isInstanceOf());
669:       assertFalse(node1.isComma());
670:       assertFalse(node1.isThis());
671:       assertFalse(node1.isExprResult());
672:       assertFalse(node1.isWith());
673:       assertFalse(node1.isFalse());
674:       assertFalse(node1.isHook());
675:       assertFalse(node1.isCast());
676:       assertFalse(node1.hasOneChild());
677:       assertFalse(node1.isLabelName());
678:       assertEquals((-1), node1.getCharno());
679:       assertFalse(node1.isSwitch());
680:       assertFalse(node1.isGetProp());
681:       assertFalse(node1.isScript());
682:       assertFalse(node1.isString());
683:       assertFalse(node1.isNumber());
684:       assertEquals((-1), node1.getSourcePosition());
685:       assertFalse(node1.isNot());
686:       assertFalse(node1.isObjectLit());
687:       assertFalse(node1.hasMoreThanOneChild());
688:       assertFalse(node1.isContinue());
689:       assertEquals((-1), node1.getLineno());
690:       assertFalse(node1.isCase());
691:       assertFalse(node1.isBlock());
692:       assertFalse(node1.isThrow());
693:       assertFalse(node1.isIf());
694:       assertFalse(node1.isInc());
695:       assertFalse(node1.isSetterDef());
696:       assertFalse(node1.isNE());
697:       assertFalse(node1.isIn());
698:       
699:       boolean boolean3 = node0.isSetterDef();
700:       assertFalse(boolean3);
701:       assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
702:       assertNotSame(node0, node1);
703:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
704:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
705:       assertEquals(29, Node.JSDOC_INFO_PROP);
706:       assertEquals(2, Node.POST_FLAG);
707:       assertEquals(37, Node.OPT_ARG_NAME);
708:       assertEquals(47, Node.IS_DISPATCHER);
709:       assertEquals(55, Node.INFERRED_FUNCTION);
710:       assertEquals(4095, Node.COLUMN_MASK);
711:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
712:       assertEquals(48, Node.DIRECTIVES);
713:       assertEquals(57, Node.LAST_PROP);
714:       assertEquals(49, Node.DIRECT_EVAL);
715:       assertEquals(8, Node.FLAG_NO_THROWS);
716:       assertEquals(39, Node.EMPTY_BLOCK);
717:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
718:       assertEquals(36, Node.QUOTED_PROP);
719:       assertEquals(56, Node.CHANGE_TIME);
720:       assertEquals(15, Node.NO_SIDE_EFFECTS);
721:       assertEquals(53, Node.INPUT_ID);
722:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
723:       assertEquals(52, Node.LENGTH);
724:       assertEquals(57, Node.REFLECTED_OBJECT);
725:       assertEquals(40, Node.ORIGINALNAME_PROP);
726:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
727:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
728:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
729:       assertEquals(30, Node.VAR_ARGS_NAME);
730:       assertEquals(51, Node.STATIC_SOURCE_FILE);
731:       assertEquals(12, Node.COLUMN_BITS);
732:       assertEquals(46, Node.IS_NAMESPACE);
733:       assertEquals(1, Node.DECR_FLAG);
734:       assertEquals(32, Node.INCRDECR_PROP);
735:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
736:       assertEquals(43, Node.IS_CONSTANT_NAME);
737:       assertEquals(54, Node.SLASH_V);
738:       assertEquals(50, Node.FREE_CALL);
739:       assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
740:       assertFalse(node0.equals((Object)node1));
741:       assertTrue(boolean3 == boolean2);
742:       assertTrue(boolean3 == boolean0);
743:       assertTrue(boolean3 == boolean1);
744:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
745:       assertEquals(0, arrayList0.size());
746:       assertTrue(arrayList0.isEmpty());
747:       assertFalse(node0.isTry());
748:       assertFalse(node0.isTrue());
749:       assertFalse(node0.isArrayLit());
750:       assertFalse(node0.isVoid());
751:       assertFalse(node0.isDefaultCase());
752:       assertFalse(node0.isEmpty());
753:       assertFalse(node0.isDebugger());
754:       assertFalse(node0.isGetterDef());
755:       assertFalse(node0.isNE());
756:       assertFalse(node0.isIf());
757:       assertFalse(node0.isDelProp());
758:       assertFalse(node0.isFor());
759:       assertFalse(node0.isCall());
760:       assertFalse(node0.isCatch());
761:       assertFalse(node0.isRegExp());
762:       assertFalse(node0.isInc());
763:       assertFalse(node0.isString());
764:       assertFalse(node0.isIn());
765:       assertFalse(node0.isSetterDef());
766:       assertFalse(node0.isAnd());
767:       assertFalse(node0.isThrow());
768:       assertFalse(node0.isCast());
769:       assertFalse(node0.isContinue());
770:       assertFalse(node0.isFalse());
771:       assertFalse(node0.isFunction());
772:       assertFalse(node0.isExprResult());
773:       assertFalse(node0.hasOneChild());
774:       assertFalse(node0.isNot());
775:       assertFalse(node0.isScript());
776:       assertEquals((-1), node0.getSourcePosition());
777:       assertFalse(node0.isNumber());
778:       assertTrue(node0.isParamList());
779:       assertFalse(node0.isObjectLit());
780:       assertFalse(node0.isOr());
781:       assertEquals((-1), node0.getLineno());
782:       assertFalse(node0.isInstanceOf());
783:       assertFalse(node0.isGetProp());
784:       assertFalse(node0.isThis());
785:       assertFalse(node0.isReturn());
786:       assertFalse(node0.isAssign());
787:       assertFalse(node0.isWith());
788:       assertFalse(node0.isWhile());
789:       assertFalse(node0.isBreak());
790:       assertFalse(node0.hasChildren());
791:       assertFalse(node0.isGetElem());
792:       assertFalse(node0.isComma());
793:       assertFalse(node0.hasMoreThanOneChild());
794:       assertFalse(node0.isDec());
795:       assertFalse(node0.isTypeOf());
796:       assertFalse(node0.isNew());
797:       assertFalse(node0.isHook());
798:       assertFalse(node0.isAdd());
799:       assertFalse(node0.isBlock());
800:       assertFalse(node0.isVar());
801:       assertFalse(node0.isSwitch());
802:       assertFalse(node0.isName());
803:       assertFalse(node0.isDo());
804:       assertFalse(node0.isCase());
805:       assertFalse(node0.isStringKey());
806:       assertFalse(node0.isNull());
807:       assertEquals(83, node0.getType());
808:       assertEquals((-1), node0.getCharno());
809:       assertFalse(node0.isLabel());
810:       assertFalse(node0.isAssignAdd());
811:       assertFalse(node0.isLabelName());
812:       assertEquals(0, node0.getChildCount());
813:       
814:       Node node2 = Node.newString("");
815:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
816:       assertEquals(54, Node.SLASH_V);
817:       assertEquals(57, Node.LAST_PROP);
818:       assertEquals(15, Node.NO_SIDE_EFFECTS);
819:       assertEquals(49, Node.DIRECT_EVAL);
820:       assertEquals(1, Node.DECR_FLAG);
821:       assertEquals(40, Node.ORIGINALNAME_PROP);
822:       assertEquals(12, Node.COLUMN_BITS);
823:       assertEquals(30, Node.VAR_ARGS_NAME);
824:       assertEquals(48, Node.DIRECTIVES);
825:       assertEquals(8, Node.FLAG_NO_THROWS);
826:       assertEquals(39, Node.EMPTY_BLOCK);
827:       assertEquals(56, Node.CHANGE_TIME);
828:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
829:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
830:       assertEquals(37, Node.OPT_ARG_NAME);
831:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
832:       assertEquals(55, Node.INFERRED_FUNCTION);
833:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
834:       assertEquals(29, Node.JSDOC_INFO_PROP);
835:       assertEquals(52, Node.LENGTH);
836:       assertEquals(57, Node.REFLECTED_OBJECT);
837:       assertEquals(36, Node.QUOTED_PROP);
838:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
839:       assertEquals(53, Node.INPUT_ID);
840:       assertEquals(43, Node.IS_CONSTANT_NAME);
841:       assertEquals(4095, Node.COLUMN_MASK);
842:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
843:       assertEquals(47, Node.IS_DISPATCHER);
844:       assertEquals(2, Node.POST_FLAG);
845:       assertEquals(32, Node.INCRDECR_PROP);
846:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
847:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
848:       assertEquals(46, Node.IS_NAMESPACE);
849:       assertEquals(50, Node.FREE_CALL);
850:       assertEquals(51, Node.STATIC_SOURCE_FILE);
851:       assertNotNull(node2);
852:       assertFalse(node2.equals((Object)node0));
853:       assertFalse(node2.equals((Object)node1));
854:       assertFalse(node2.isInc());
855:       assertFalse(node2.isSwitch());
856:       assertFalse(node2.isCase());
857:       assertFalse(node2.isIn());
858:       assertEquals((-1), node2.getCharno());
859:       assertFalse(node2.isGetterDef());
860:       assertFalse(node2.isDelProp());
861:       assertFalse(node2.isIf());
862:       assertFalse(node2.isBreak());
863:       assertFalse(node2.isNE());
864:       assertFalse(node2.isFor());
865:       assertFalse(node2.isGetProp());
866:       assertFalse(node2.isHook());
867:       assertFalse(node2.isInstanceOf());
868:       assertFalse(node2.isThis());
869:       assertFalse(node2.isRegExp());
870:       assertFalse(node2.isComma());
871:       assertFalse(node2.isWith());
872:       assertFalse(node2.isAnd());
873:       assertFalse(node2.isDebugger());
874:       assertFalse(node2.isObjectLit());
875:       assertFalse(node2.isNot());
876:       assertFalse(node2.isSetterDef());
877:       assertFalse(node2.isCast());
878:       assertFalse(node2.isThrow());
879:       assertFalse(node2.isContinue());
880:       assertEquals(40, node2.getType());
881:       assertFalse(node2.isFalse());
882:       assertFalse(node2.isFunction());
883:       assertFalse(node2.isWhile());
884:       assertTrue(node2.isString());
885:       assertFalse(node2.isDo());
886:       assertFalse(node2.isNew());
887:       assertFalse(node2.isAdd());
888:       assertFalse(node2.isOr());
889:       assertEquals((-1), node2.getSourcePosition());
890:       assertFalse(node2.hasChildren());
891:       assertFalse(node2.isNumber());
892:       assertFalse(node2.isNull());
893:       assertFalse(node2.isCall());
894:       assertFalse(node2.isName());
895:       assertFalse(node2.isGetElem());
896:       assertEquals((-1), node2.getLineno());
897:       assertFalse(node2.hasOneChild());
898:       assertFalse(node2.isReturn());
899:       assertFalse(node2.isCatch());
900:       assertFalse(node2.isBlock());
901:       assertFalse(node2.hasMoreThanOneChild());
902:       assertFalse(node2.isTypeOf());
903:       assertFalse(node2.isAssign());
904:       assertFalse(node2.isDec());
905:       assertFalse(node2.isDefaultCase());
906:       assertFalse(node2.isScript());
907:       assertFalse(node2.isVoid());
908:       assertFalse(node2.isExprResult());
909:       assertFalse(node2.isTry());
910:       assertFalse(node2.isTrue());
911:       assertFalse(node2.isEmpty());
912:       assertFalse(node2.isParamList());
913:       assertFalse(node2.isStringKey());
914:       assertFalse(node2.isArrayLit());
915:       assertFalse(node2.isLabelName());
916:       assertEquals(0, node2.getChildCount());
917:       assertFalse(node2.isVar());
918:       assertFalse(node2.isAssignAdd());
919:       assertFalse(node2.isLabel());
920:       
921:       boolean boolean4 = node0.isUnscopedQualifiedName();
922:       assertFalse(boolean4);
923:       assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
924:       assertNotSame(node0, node1);
925:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
926:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
927:       assertEquals(29, Node.JSDOC_INFO_PROP);
928:       assertEquals(2, Node.POST_FLAG);
929:       assertEquals(37, Node.OPT_ARG_NAME);
930:       assertEquals(47, Node.IS_DISPATCHER);
931:       assertEquals(55, Node.INFERRED_FUNCTION);
932:       assertEquals(4095, Node.COLUMN_MASK);
933:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
934:       assertEquals(48, Node.DIRECTIVES);
935:       assertEquals(57, Node.LAST_PROP);
936:       assertEquals(49, Node.DIRECT_EVAL);
937:       assertEquals(8, Node.FLAG_NO_THROWS);
938:       assertEquals(39, Node.EMPTY_BLOCK);
939:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
940:       assertEquals(36, Node.QUOTED_PROP);
941:       assertEquals(56, Node.CHANGE_TIME);
942:       assertEquals(15, Node.NO_SIDE_EFFECTS);
943:       assertEquals(53, Node.INPUT_ID);
944:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
945:       assertEquals(52, Node.LENGTH);
946:       assertEquals(57, Node.REFLECTED_OBJECT);
947:       assertEquals(40, Node.ORIGINALNAME_PROP);
948:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
949:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
950:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
951:       assertEquals(30, Node.VAR_ARGS_NAME);
952:       assertEquals(51, Node.STATIC_SOURCE_FILE);
953:       assertEquals(12, Node.COLUMN_BITS);
954:       assertEquals(46, Node.IS_NAMESPACE);
955:       assertEquals(1, Node.DECR_FLAG);
956:       assertEquals(32, Node.INCRDECR_PROP);
957:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
958:       assertEquals(43, Node.IS_CONSTANT_NAME);
959:       assertEquals(54, Node.SLASH_V);
960:       assertEquals(50, Node.FREE_CALL);
961:       assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
962:       assertFalse(node0.equals((Object)node2));
963:       assertFalse(node0.equals((Object)node1));
964:       assertTrue(boolean4 == boolean3);
965:       assertTrue(boolean4 == boolean1);
966:       assertTrue(boolean4 == boolean2);
967:       assertTrue(boolean4 == boolean0);
968:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
969:       assertEquals(0, arrayList0.size());
970:       assertTrue(arrayList0.isEmpty());
971:       assertFalse(node0.isTry());
972:       assertFalse(node0.isTrue());
973:       assertFalse(node0.isArrayLit());
974:       assertFalse(node0.isVoid());
975:       assertFalse(node0.isDefaultCase());
976:       assertFalse(node0.isEmpty());
977:       assertFalse(node0.isDebugger());
978:       assertFalse(node0.isGetterDef());
979:       assertFalse(node0.isNE());
980:       assertFalse(node0.isIf());
981:       assertFalse(node0.isDelProp());
982:       assertFalse(node0.isFor());
983:       assertFalse(node0.isCall());
984:       assertFalse(node0.isCatch());
985:       assertFalse(node0.isRegExp());
986:       assertFalse(node0.isInc());
987:       assertFalse(node0.isString());
988:       assertFalse(node0.isIn());
989:       assertFalse(node0.isSetterDef());
990:       assertFalse(node0.isAnd());
991:       assertFalse(node0.isThrow());
992:       assertFalse(node0.isCast());
993:       assertFalse(node0.isContinue());
994:       assertFalse(node0.isFalse());
995:       assertFalse(node0.isFunction());
996:       assertFalse(node0.isExprResult());
997:       assertFalse(node0.hasOneChild());
998:       assertFalse(node0.isNot());
999:       assertFalse(node0.isScript());
1000:       assertEquals((-1), node0.getSourcePosition());
1001:       assertFalse(node0.isNumber());
1002:       assertTrue(node0.isParamList());
1003:       assertFalse(node0.isObjectLit());
1004:       assertFalse(node0.isOr());
1005:       assertEquals((-1), node0.getLineno());
1006:       assertFalse(node0.isInstanceOf());
1007:       assertFalse(node0.isGetProp());
1008:       assertFalse(node0.isThis());
1009:       assertFalse(node0.isReturn());
1010:       assertFalse(node0.isAssign());
1011:       assertFalse(node0.isWith());
1012:       assertFalse(node0.isWhile());
1013:       assertFalse(node0.isBreak());
1014:       assertFalse(node0.hasChildren());
1015:       assertFalse(node0.isGetElem());
1016:       assertFalse(node0.isComma());
1017:       assertFalse(node0.hasMoreThanOneChild());
1018:       assertFalse(node0.isDec());
1019:       assertFalse(node0.isTypeOf());
1020:       assertFalse(node0.isNew());
1021:       assertFalse(node0.isHook());
1022:       assertFalse(node0.isAdd());
1023:       assertFalse(node0.isBlock());
1024:       assertFalse(node0.isVar());
1025:       assertFalse(node0.isSwitch());
1026:       assertFalse(node0.isName());
1027:       assertFalse(node0.isDo());
1028:       assertFalse(node0.isCase());
1029:       assertFalse(node0.isStringKey());
1030:       assertFalse(node0.isNull());
1031:       assertEquals(83, node0.getType());
1032:       assertEquals((-1), node0.getCharno());
1033:       assertFalse(node0.isLabel());
1034:       assertFalse(node0.isAssignAdd());
1035:       assertFalse(node0.isLabelName());
1036:       assertEquals(0, node0.getChildCount());
1037:       
1038:       boolean boolean5 = node1.isWith();
1039:       assertFalse(boolean5);
1040:       assertNotSame(node1, node0);
1041:       assertEquals(43, Node.IS_CONSTANT_NAME);
1042:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1043:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1044:       assertEquals(53, Node.INPUT_ID);
1045:       assertEquals(55, Node.INFERRED_FUNCTION);
1046:       assertEquals(8, Node.FLAG_NO_THROWS);
1047:       assertEquals(36, Node.QUOTED_PROP);
1048:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1049:       assertEquals(56, Node.CHANGE_TIME);
1050:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1051:       assertEquals(37, Node.OPT_ARG_NAME);
1052:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1053:       assertEquals(48, Node.DIRECTIVES);
1054:       assertEquals(32, Node.INCRDECR_PROP);
1055:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1056:       assertEquals(12, Node.COLUMN_BITS);
1057:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1058:       assertEquals(4095, Node.COLUMN_MASK);
1059:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1060:       assertEquals(57, Node.LAST_PROP);
1061:       assertEquals(49, Node.DIRECT_EVAL);
1062:       assertEquals(1, Node.DECR_FLAG);
1063:       assertEquals(52, Node.LENGTH);
1064:       assertEquals(57, Node.REFLECTED_OBJECT);
1065:       assertEquals(46, Node.IS_NAMESPACE);
1066:       assertEquals(54, Node.SLASH_V);
1067:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1068:       assertEquals(50, Node.FREE_CALL);
1069:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1070:       assertEquals(47, Node.IS_DISPATCHER);
1071:       assertEquals(29, Node.JSDOC_INFO_PROP);
1072:       assertEquals(40, Node.ORIGINALNAME_PROP);
1073:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1074:       assertEquals(39, Node.EMPTY_BLOCK);
1075:       assertEquals(2, Node.POST_FLAG);
1076:       assertEquals(30, Node.VAR_ARGS_NAME);
1077:       assertFalse(node1.equals((Object)node0));
1078:       assertFalse(node1.equals((Object)node2));
1079:       assertTrue(boolean5 == boolean1);
1080:       assertTrue(boolean5 == boolean4);
1081:       assertTrue(boolean5 == boolean2);
1082:       assertTrue(boolean5 == boolean3);
1083:       assertTrue(boolean5 == boolean0);
1084:       assertFalse(node1.isCatch());
1085:       assertFalse(node1.isDefaultCase());
1086:       assertFalse(node1.isFunction());
1087:       assertFalse(node1.isRegExp());
1088:       assertEquals(0, node1.getChildCount());
1089:       assertFalse(node1.isArrayLit());
1090:       assertFalse(node1.isStringKey());
1091:       assertFalse(node1.isFor());
1092:       assertFalse(node1.isTry());
1093:       assertFalse(node1.isParamList());
1094:       assertFalse(node1.isDebugger());
1095:       assertFalse(node1.isGetterDef());
1096:       assertEquals(8, node1.getType());
1097:       assertFalse(node1.isWhile());
1098:       assertFalse(node1.isAssignAdd());
1099:       assertFalse(node1.isDo());
1100:       assertFalse(node1.isReturn());
1101:       assertFalse(node1.isLabel());
1102:       assertFalse(node1.hasChildren());
1103:       assertFalse(node1.isTypeOf());
1104:       assertFalse(node1.isDec());
1105:       assertFalse(node1.isAssign());
1106:       assertFalse(node1.isCall());
1107:       assertFalse(node1.isGetElem());
1108:       assertFalse(node1.isEmpty());
1109:       assertFalse(node1.isVar());
1110:       assertFalse(node1.isBreak());
1111:       assertFalse(node1.isNew());
1112:       assertFalse(node1.isName());
1113:       assertFalse(node1.isVoid());
1114:       assertFalse(node1.isDelProp());
1115:       assertFalse(node1.isTrue());
1116:       assertFalse(node1.isNull());
1117:       assertFalse(node1.isAdd());
1118:       assertFalse(node1.isOr());
1119:       assertFalse(node1.isAnd());
1120:       assertFalse(node1.isInstanceOf());
1121:       assertFalse(node1.isComma());
1122:       assertFalse(node1.isThis());
1123:       assertFalse(node1.isExprResult());
1124:       assertFalse(node1.isWith());
1125:       assertFalse(node1.isFalse());
1126:       assertFalse(node1.isHook());
1127:       assertFalse(node1.isCast());
1128:       assertFalse(node1.hasOneChild());
1129:       assertFalse(node1.isLabelName());
1130:       assertEquals((-1), node1.getCharno());
1131:       assertFalse(node1.isSwitch());
1132:       assertFalse(node1.isGetProp());
1133:       assertFalse(node1.isScript());
1134:       assertFalse(node1.isString());
1135:       assertFalse(node1.isNumber());
1136:       assertEquals((-1), node1.getSourcePosition());
1137:       assertFalse(node1.isNot());
1138:       assertFalse(node1.isObjectLit());
1139:       assertFalse(node1.hasMoreThanOneChild());
1140:       assertFalse(node1.isContinue());
1141:       assertEquals((-1), node1.getLineno());
1142:       assertFalse(node1.isCase());
1143:       assertFalse(node1.isBlock());
1144:       assertFalse(node1.isThrow());
1145:       assertFalse(node1.isIf());
1146:       assertFalse(node1.isInc());
1147:       assertFalse(node1.isSetterDef());
1148:       assertFalse(node1.isNE());
1149:       assertFalse(node1.isIn());
1150:       
1151:       node2.removeProp(37);
1152:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1153:       assertEquals(54, Node.SLASH_V);
1154:       assertEquals(57, Node.LAST_PROP);
1155:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1156:       assertEquals(49, Node.DIRECT_EVAL);
1157:       assertEquals(1, Node.DECR_FLAG);
1158:       assertEquals(40, Node.ORIGINALNAME_PROP);
1159:       assertEquals(12, Node.COLUMN_BITS);
1160:       assertEquals(30, Node.VAR_ARGS_NAME);
1161:       assertEquals(48, Node.DIRECTIVES);
1162:       assertEquals(8, Node.FLAG_NO_THROWS);
1163:       assertEquals(39, Node.EMPTY_BLOCK);
1164:       assertEquals(56, Node.CHANGE_TIME);
1165:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1166:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1167:       assertEquals(37, Node.OPT_ARG_NAME);
1168:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1169:       assertEquals(55, Node.INFERRED_FUNCTION);
1170:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1171:       assertEquals(29, Node.JSDOC_INFO_PROP);
1172:       assertEquals(52, Node.LENGTH);
1173:       assertEquals(57, Node.REFLECTED_OBJECT);
1174:       assertEquals(36, Node.QUOTED_PROP);
1175:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1176:       assertEquals(53, Node.INPUT_ID);
1177:       assertEquals(43, Node.IS_CONSTANT_NAME);
1178:       assertEquals(4095, Node.COLUMN_MASK);
1179:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1180:       assertEquals(47, Node.IS_DISPATCHER);
1181:       assertEquals(2, Node.POST_FLAG);
1182:       assertEquals(32, Node.INCRDECR_PROP);
1183:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1184:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1185:       assertEquals(46, Node.IS_NAMESPACE);
1186:       assertEquals(50, Node.FREE_CALL);
1187:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1188:       assertFalse(node2.equals((Object)node0));
1189:       assertFalse(node2.equals((Object)node1));
1190:       assertFalse(node2.isInc());
1191:       assertFalse(node2.isSwitch());
1192:       assertFalse(node2.isCase());
1193:       assertFalse(node2.isIn());
1194:       assertEquals((-1), node2.getCharno());
1195:       assertFalse(node2.isGetterDef());
1196:       assertFalse(node2.isDelProp());
1197:       assertFalse(node2.isIf());
1198:       assertFalse(node2.isBreak());
1199:       assertFalse(node2.isNE());
1200:       assertFalse(node2.isFor());
1201:       assertFalse(node2.isGetProp());
1202:       assertFalse(node2.isHook());
1203:       assertFalse(node2.isInstanceOf());
1204:       assertFalse(node2.isThis());
1205:       assertFalse(node2.isRegExp());
1206:       assertFalse(node2.isComma());
1207:       assertFalse(node2.isWith());
1208:       assertFalse(node2.isAnd());
1209:       assertFalse(node2.isDebugger());
1210:       assertFalse(node2.isObjectLit());
1211:       assertFalse(node2.isNot());
1212:       assertFalse(node2.isSetterDef());
1213:       assertFalse(node2.isCast());
1214:       assertFalse(node2.isThrow());
1215:       assertFalse(node2.isContinue());
1216:       assertEquals(40, node2.getType());
1217:       assertFalse(node2.isFalse());
1218:       assertFalse(node2.isFunction());
1219:       assertFalse(node2.isWhile());
1220:       assertTrue(node2.isString());
1221:       assertFalse(node2.isDo());
1222:       assertFalse(node2.isNew());
1223:       assertFalse(node2.isAdd());
1224:       assertFalse(node2.isOr());
1225:       assertEquals((-1), node2.getSourcePosition());
1226:       assertFalse(node2.hasChildren());
1227:       assertFalse(node2.isNumber());
1228:       assertFalse(node2.isNull());
1229:       assertFalse(node2.isCall());
1230:       assertFalse(node2.isName());
1231:       assertFalse(node2.isGetElem());
1232:       assertEquals((-1), node2.getLineno());
1233:       assertFalse(node2.hasOneChild());
1234:       assertFalse(node2.isReturn());
1235:       assertFalse(node2.isCatch());
1236:       assertFalse(node2.isBlock());
1237:       assertFalse(node2.hasMoreThanOneChild());
1238:       assertFalse(node2.isTypeOf());
1239:       assertFalse(node2.isAssign());
1240:       assertFalse(node2.isDec());
1241:       assertFalse(node2.isDefaultCase());
1242:       assertFalse(node2.isScript());
1243:       assertFalse(node2.isVoid());
1244:       assertFalse(node2.isExprResult());
1245:       assertFalse(node2.isTry());
1246:       assertFalse(node2.isTrue());
1247:       assertFalse(node2.isEmpty());
1248:       assertFalse(node2.isParamList());
1249:       assertFalse(node2.isStringKey());
1250:       assertFalse(node2.isArrayLit());
1251:       assertFalse(node2.isLabelName());
1252:       assertEquals(0, node2.getChildCount());
1253:       assertFalse(node2.isVar());
1254:       assertFalse(node2.isAssignAdd());
1255:       assertFalse(node2.isLabel());
1256:       
1257:       String string0 = node1.getSourceFileName();
1258:       assertNotSame(node1, node0);
1259:       assertEquals(43, Node.IS_CONSTANT_NAME);
1260:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1261:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1262:       assertEquals(53, Node.INPUT_ID);
1263:       assertEquals(55, Node.INFERRED_FUNCTION);
1264:       assertEquals(8, Node.FLAG_NO_THROWS);
1265:       assertEquals(36, Node.QUOTED_PROP);
1266:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1267:       assertEquals(56, Node.CHANGE_TIME);
1268:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1269:       assertEquals(37, Node.OPT_ARG_NAME);
1270:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1271:       assertEquals(48, Node.DIRECTIVES);
1272:       assertEquals(32, Node.INCRDECR_PROP);
1273:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1274:       assertEquals(12, Node.COLUMN_BITS);
1275:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1276:       assertEquals(4095, Node.COLUMN_MASK);
1277:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1278:       assertEquals(57, Node.LAST_PROP);
1279:       assertEquals(49, Node.DIRECT_EVAL);
1280:       assertEquals(1, Node.DECR_FLAG);
1281:       assertEquals(52, Node.LENGTH);
1282:       assertEquals(57, Node.REFLECTED_OBJECT);
1283:       assertEquals(46, Node.IS_NAMESPACE);
1284:       assertEquals(54, Node.SLASH_V);
1285:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1286:       assertEquals(50, Node.FREE_CALL);
1287:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1288:       assertEquals(47, Node.IS_DISPATCHER);
1289:       assertEquals(29, Node.JSDOC_INFO_PROP);
1290:       assertEquals(40, Node.ORIGINALNAME_PROP);
1291:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1292:       assertEquals(39, Node.EMPTY_BLOCK);
1293:       assertEquals(2, Node.POST_FLAG);
1294:       assertEquals(30, Node.VAR_ARGS_NAME);
1295:       assertNull(string0);
1296:       assertFalse(node1.equals((Object)node0));
1297:       assertFalse(node1.equals((Object)node2));
1298:       assertFalse(node1.isCatch());
1299:       assertFalse(node1.isDefaultCase());
1300:       assertFalse(node1.isFunction());
1301:       assertFalse(node1.isRegExp());
1302:       assertEquals(0, node1.getChildCount());
1303:       assertFalse(node1.isArrayLit());
1304:       assertFalse(node1.isStringKey());
1305:       assertFalse(node1.isFor());
1306:       assertFalse(node1.isTry());
1307:       assertFalse(node1.isParamList());
1308:       assertFalse(node1.isDebugger());
1309:       assertFalse(node1.isGetterDef());
1310:       assertEquals(8, node1.getType());
1311:       assertFalse(node1.isWhile());
1312:       assertFalse(node1.isAssignAdd());
1313:       assertFalse(node1.isDo());
1314:       assertFalse(node1.isReturn());
1315:       assertFalse(node1.isLabel());
1316:       assertFalse(node1.hasChildren());
1317:       assertFalse(node1.isTypeOf());
1318:       assertFalse(node1.isDec());
1319:       assertFalse(node1.isAssign());
1320:       assertFalse(node1.isCall());
1321:       assertFalse(node1.isGetElem());
1322:       assertFalse(node1.isEmpty());
1323:       assertFalse(node1.isVar());
1324:       assertFalse(node1.isBreak());
1325:       assertFalse(node1.isNew());
1326:       assertFalse(node1.isName());
1327:       assertFalse(node1.isVoid());
1328:       assertFalse(node1.isDelProp());
1329:       assertFalse(node1.isTrue());
1330:       assertFalse(node1.isNull());
1331:       assertFalse(node1.isAdd());
1332:       assertFalse(node1.isOr());
1333:       assertFalse(node1.isAnd());
1334:       assertFalse(node1.isInstanceOf());
1335:       assertFalse(node1.isComma());
1336:       assertFalse(node1.isThis());
1337:       assertFalse(node1.isExprResult());
1338:       assertFalse(node1.isWith());
1339:       assertFalse(node1.isFalse());
1340:       assertFalse(node1.isHook());
1341:       assertFalse(node1.isCast());
1342:       assertFalse(node1.hasOneChild());
1343:       assertFalse(node1.isLabelName());
1344:       assertEquals((-1), node1.getCharno());
1345:       assertFalse(node1.isSwitch());
1346:       assertFalse(node1.isGetProp());
1347:       assertFalse(node1.isScript());
1348:       assertFalse(node1.isString());
1349:       assertFalse(node1.isNumber());
1350:       assertEquals((-1), node1.getSourcePosition());
1351:       assertFalse(node1.isNot());
1352:       assertFalse(node1.isObjectLit());
1353:       assertFalse(node1.hasMoreThanOneChild());
1354:       assertFalse(node1.isContinue());
1355:       assertEquals((-1), node1.getLineno());
1356:       assertFalse(node1.isCase());
1357:       assertFalse(node1.isBlock());
1358:       assertFalse(node1.isThrow());
1359:       assertFalse(node1.isIf());
1360:       assertFalse(node1.isInc());
1361:       assertFalse(node1.isSetterDef());
1362:       assertFalse(node1.isNE());
1363:       assertFalse(node1.isIn());
1364:       
1365:       boolean boolean6 = node1.isFor();
1366:       assertFalse(boolean6);
1367:       assertNotSame(node1, node0);
1368:       assertEquals(43, Node.IS_CONSTANT_NAME);
1369:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1370:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1371:       assertEquals(53, Node.INPUT_ID);
1372:       assertEquals(55, Node.INFERRED_FUNCTION);
1373:       assertEquals(8, Node.FLAG_NO_THROWS);
1374:       assertEquals(36, Node.QUOTED_PROP);
1375:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1376:       assertEquals(56, Node.CHANGE_TIME);
1377:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1378:       assertEquals(37, Node.OPT_ARG_NAME);
1379:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1380:       assertEquals(48, Node.DIRECTIVES);
1381:       assertEquals(32, Node.INCRDECR_PROP);
1382:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1383:       assertEquals(12, Node.COLUMN_BITS);
1384:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1385:       assertEquals(4095, Node.COLUMN_MASK);
1386:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1387:       assertEquals(57, Node.LAST_PROP);
1388:       assertEquals(49, Node.DIRECT_EVAL);
1389:       assertEquals(1, Node.DECR_FLAG);
1390:       assertEquals(52, Node.LENGTH);
1391:       assertEquals(57, Node.REFLECTED_OBJECT);
1392:       assertEquals(46, Node.IS_NAMESPACE);
1393:       assertEquals(54, Node.SLASH_V);
1394:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1395:       assertEquals(50, Node.FREE_CALL);
1396:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1397:       assertEquals(47, Node.IS_DISPATCHER);
1398:       assertEquals(29, Node.JSDOC_INFO_PROP);
1399:       assertEquals(40, Node.ORIGINALNAME_PROP);
1400:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1401:       assertEquals(39, Node.EMPTY_BLOCK);
1402:       assertEquals(2, Node.POST_FLAG);
1403:       assertEquals(30, Node.VAR_ARGS_NAME);
1404:       assertTrue(boolean6 == boolean5);
1405:       assertTrue(boolean6 == boolean3);
1406:       assertTrue(boolean6 == boolean0);
1407:       assertTrue(boolean6 == boolean1);
1408:       assertTrue(boolean6 == boolean4);
1409:       assertTrue(boolean6 == boolean2);
1410:       assertFalse(node1.equals((Object)node0));
1411:       assertFalse(node1.equals((Object)node2));
1412:       assertFalse(node1.isCatch());
1413:       assertFalse(node1.isDefaultCase());
1414:       assertFalse(node1.isFunction());
1415:       assertFalse(node1.isRegExp());
1416:       assertEquals(0, node1.getChildCount());
1417:       assertFalse(node1.isArrayLit());
1418:       assertFalse(node1.isStringKey());
1419:       assertFalse(node1.isFor());
1420:       assertFalse(node1.isTry());
1421:       assertFalse(node1.isParamList());
1422:       assertFalse(node1.isDebugger());
1423:       assertFalse(node1.isGetterDef());
1424:       assertEquals(8, node1.getType());
1425:       assertFalse(node1.isWhile());
1426:       assertFalse(node1.isAssignAdd());
1427:       assertFalse(node1.isDo());
1428:       assertFalse(node1.isReturn());
1429:       assertFalse(node1.isLabel());
1430:       assertFalse(node1.hasChildren());
1431:       assertFalse(node1.isTypeOf());
1432:       assertFalse(node1.isDec());
1433:       assertFalse(node1.isAssign());
1434:       assertFalse(node1.isCall());
1435:       assertFalse(node1.isGetElem());
1436:       assertFalse(node1.isEmpty());
1437:       assertFalse(node1.isVar());
1438:       assertFalse(node1.isBreak());
1439:       assertFalse(node1.isNew());
1440:       assertFalse(node1.isName());
1441:       assertFalse(node1.isVoid());
1442:       assertFalse(node1.isDelProp());
1443:       assertFalse(node1.isTrue());
1444:       assertFalse(node1.isNull());
1445:       assertFalse(node1.isAdd());
1446:       assertFalse(node1.isOr());
1447:       assertFalse(node1.isAnd());
1448:       assertFalse(node1.isInstanceOf());
1449:       assertFalse(node1.isComma());
1450:       assertFalse(node1.isThis());
1451:       assertFalse(node1.isExprResult());
1452:       assertFalse(node1.isWith());
1453:       assertFalse(node1.isFalse());
1454:       assertFalse(node1.isHook());
1455:       assertFalse(node1.isCast());
1456:       assertFalse(node1.hasOneChild());
1457:       assertFalse(node1.isLabelName());
1458:       assertEquals((-1), node1.getCharno());
1459:       assertFalse(node1.isSwitch());
1460:       assertFalse(node1.isGetProp());
1461:       assertFalse(node1.isScript());
1462:       assertFalse(node1.isString());
1463:       assertFalse(node1.isNumber());
1464:       assertEquals((-1), node1.getSourcePosition());
1465:       assertFalse(node1.isNot());
1466:       assertFalse(node1.isObjectLit());
1467:       assertFalse(node1.hasMoreThanOneChild());
1468:       assertFalse(node1.isContinue());
1469:       assertEquals((-1), node1.getLineno());
1470:       assertFalse(node1.isCase());
1471:       assertFalse(node1.isBlock());
1472:       assertFalse(node1.isThrow());
1473:       assertFalse(node1.isIf());
1474:       assertFalse(node1.isInc());
1475:       assertFalse(node1.isSetterDef());
1476:       assertFalse(node1.isNE());
1477:       assertFalse(node1.isIn());
1478:       
1479:       String string1 = node0.getSourceFileName();
1480:       assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
1481:       assertNotSame(node0, node1);
1482:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1483:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1484:       assertEquals(29, Node.JSDOC_INFO_PROP);
1485:       assertEquals(2, Node.POST_FLAG);
1486:       assertEquals(37, Node.OPT_ARG_NAME);
1487:       assertEquals(47, Node.IS_DISPATCHER);
1488:       assertEquals(55, Node.INFERRED_FUNCTION);
1489:       assertEquals(4095, Node.COLUMN_MASK);
1490:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1491:       assertEquals(48, Node.DIRECTIVES);
1492:       assertEquals(57, Node.LAST_PROP);
1493:       assertEquals(49, Node.DIRECT_EVAL);
1494:       assertEquals(8, Node.FLAG_NO_THROWS);
1495:       assertEquals(39, Node.EMPTY_BLOCK);
1496:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1497:       assertEquals(36, Node.QUOTED_PROP);
1498:       assertEquals(56, Node.CHANGE_TIME);
1499:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1500:       assertEquals(53, Node.INPUT_ID);
1501:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1502:       assertEquals(52, Node.LENGTH);
1503:       assertEquals(57, Node.REFLECTED_OBJECT);
1504:       assertEquals(40, Node.ORIGINALNAME_PROP);
1505:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1506:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1507:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1508:       assertEquals(30, Node.VAR_ARGS_NAME);
1509:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1510:       assertEquals(12, Node.COLUMN_BITS);
1511:       assertEquals(46, Node.IS_NAMESPACE);
1512:       assertEquals(1, Node.DECR_FLAG);
1513:       assertEquals(32, Node.INCRDECR_PROP);
1514:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1515:       assertEquals(43, Node.IS_CONSTANT_NAME);
1516:       assertEquals(54, Node.SLASH_V);
1517:       assertEquals(50, Node.FREE_CALL);
1518:       assertNull(string1);
1519:       assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
1520:       assertFalse(node0.equals((Object)node2));
1521:       assertFalse(node0.equals((Object)node1));
1522:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1523:       assertEquals(0, arrayList0.size());
1524:       assertTrue(arrayList0.isEmpty());
1525:       assertFalse(node0.isTry());
1526:       assertFalse(node0.isTrue());
1527:       assertFalse(node0.isArrayLit());
1528:       assertFalse(node0.isVoid());
1529:       assertFalse(node0.isDefaultCase());
1530:       assertFalse(node0.isEmpty());
1531:       assertFalse(node0.isDebugger());
1532:       assertFalse(node0.isGetterDef());
1533:       assertFalse(node0.isNE());
1534:       assertFalse(node0.isIf());
1535:       assertFalse(node0.isDelProp());
1536:       assertFalse(node0.isFor());
1537:       assertFalse(node0.isCall());
1538:       assertFalse(node0.isCatch());
1539:       assertFalse(node0.isRegExp());
1540:       assertFalse(node0.isInc());
1541:       assertFalse(node0.isString());
1542:       assertFalse(node0.isIn());
1543:       assertFalse(node0.isSetterDef());
1544:       assertFalse(node0.isAnd());
1545:       assertFalse(node0.isThrow());
1546:       assertFalse(node0.isCast());
1547:       assertFalse(node0.isContinue());
1548:       assertFalse(node0.isFalse());
1549:       assertFalse(node0.isFunction());
1550:       assertFalse(node0.isExprResult());
1551:       assertFalse(node0.hasOneChild());
1552:       assertFalse(node0.isNot());
1553:       assertFalse(node0.isScript());
1554:       assertEquals((-1), node0.getSourcePosition());
1555:       assertFalse(node0.isNumber());
1556:       assertTrue(node0.isParamList());
1557:       assertFalse(node0.isObjectLit());
1558:       assertFalse(node0.isOr());
1559:       assertEquals((-1), node0.getLineno());
1560:       assertFalse(node0.isInstanceOf());
1561:       assertFalse(node0.isGetProp());
1562:       assertFalse(node0.isThis());
1563:       assertFalse(node0.isReturn());
1564:       assertFalse(node0.isAssign());
1565:       assertFalse(node0.isWith());
1566:       assertFalse(node0.isWhile());
1567:       assertFalse(node0.isBreak());
1568:       assertFalse(node0.hasChildren());
1569:       assertFalse(node0.isGetElem());
1570:       assertFalse(node0.isComma());
1571:       assertFalse(node0.hasMoreThanOneChild());
1572:       assertFalse(node0.isDec());
1573:       assertFalse(node0.isTypeOf());
1574:       assertFalse(node0.isNew());
1575:       assertFalse(node0.isHook());
1576:       assertFalse(node0.isAdd());
1577:       assertFalse(node0.isBlock());
1578:       assertFalse(node0.isVar());
1579:       assertFalse(node0.isSwitch());
1580:       assertFalse(node0.isName());
1581:       assertFalse(node0.isDo());
1582:       assertFalse(node0.isCase());
1583:       assertFalse(node0.isStringKey());
1584:       assertFalse(node0.isNull());
1585:       assertEquals(83, node0.getType());
1586:       assertEquals((-1), node0.getCharno());
1587:       assertFalse(node0.isLabel());
1588:       assertFalse(node0.isAssignAdd());
1589:       assertFalse(node0.isLabelName());
1590:       assertEquals(0, node0.getChildCount());
1591:       
1592:       boolean boolean7 = node1.isBreak();
1593:       assertFalse(boolean7);
1594:       assertNotSame(node1, node0);
1595:       assertEquals(43, Node.IS_CONSTANT_NAME);
1596:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1597:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1598:       assertEquals(53, Node.INPUT_ID);
1599:       assertEquals(55, Node.INFERRED_FUNCTION);
1600:       assertEquals(8, Node.FLAG_NO_THROWS);
1601:       assertEquals(36, Node.QUOTED_PROP);
1602:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1603:       assertEquals(56, Node.CHANGE_TIME);
1604:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1605:       assertEquals(37, Node.OPT_ARG_NAME);
1606:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1607:       assertEquals(48, Node.DIRECTIVES);
1608:       assertEquals(32, Node.INCRDECR_PROP);
1609:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1610:       assertEquals(12, Node.COLUMN_BITS);
1611:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1612:       assertEquals(4095, Node.COLUMN_MASK);
1613:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1614:       assertEquals(57, Node.LAST_PROP);
1615:       assertEquals(49, Node.DIRECT_EVAL);
1616:       assertEquals(1, Node.DECR_FLAG);
1617:       assertEquals(52, Node.LENGTH);
1618:       assertEquals(57, Node.REFLECTED_OBJECT);
1619:       assertEquals(46, Node.IS_NAMESPACE);
1620:       assertEquals(54, Node.SLASH_V);
1621:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1622:       assertEquals(50, Node.FREE_CALL);
1623:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1624:       assertEquals(47, Node.IS_DISPATCHER);
1625:       assertEquals(29, Node.JSDOC_INFO_PROP);
1626:       assertEquals(40, Node.ORIGINALNAME_PROP);
1627:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1628:       assertEquals(39, Node.EMPTY_BLOCK);
1629:       assertEquals(2, Node.POST_FLAG);
1630:       assertEquals(30, Node.VAR_ARGS_NAME);
1631:       assertTrue(boolean7 == boolean0);
1632:       assertTrue(boolean7 == boolean3);
1633:       assertTrue(boolean7 == boolean6);
1634:       assertTrue(boolean7 == boolean5);
1635:       assertTrue(boolean7 == boolean4);
1636:       assertTrue(boolean7 == boolean2);
1637:       assertTrue(boolean7 == boolean1);
1638:       assertFalse(node1.equals((Object)node0));
1639:       assertFalse(node1.equals((Object)node2));
1640:       assertFalse(node1.isCatch());
1641:       assertFalse(node1.isDefaultCase());
1642:       assertFalse(node1.isFunction());
1643:       assertFalse(node1.isRegExp());
1644:       assertEquals(0, node1.getChildCount());
1645:       assertFalse(node1.isArrayLit());
1646:       assertFalse(node1.isStringKey());
1647:       assertFalse(node1.isFor());
1648:       assertFalse(node1.isTry());
1649:       assertFalse(node1.isParamList());
1650:       assertFalse(node1.isDebugger());
1651:       assertFalse(node1.isGetterDef());
1652:       assertEquals(8, node1.getType());
1653:       assertFalse(node1.isWhile());
1654:       assertFalse(node1.isAssignAdd());
1655:       assertFalse(node1.isDo());
1656:       assertFalse(node1.isReturn());
1657:       assertFalse(node1.isLabel());
1658:       assertFalse(node1.hasChildren());
1659:       assertFalse(node1.isTypeOf());
1660:       assertFalse(node1.isDec());
1661:       assertFalse(node1.isAssign());
1662:       assertFalse(node1.isCall());
1663:       assertFalse(node1.isGetElem());
1664:       assertFalse(node1.isEmpty());
1665:       assertFalse(node1.isVar());
1666:       assertFalse(node1.isBreak());
1667:       assertFalse(node1.isNew());
1668:       assertFalse(node1.isName());
1669:       assertFalse(node1.isVoid());
1670:       assertFalse(node1.isDelProp());
1671:       assertFalse(node1.isTrue());
1672:       assertFalse(node1.isNull());
1673:       assertFalse(node1.isAdd());
1674:       assertFalse(node1.isOr());
1675:       assertFalse(node1.isAnd());
1676:       assertFalse(node1.isInstanceOf());
1677:       assertFalse(node1.isComma());
1678:       assertFalse(node1.isThis());
1679:       assertFalse(node1.isExprResult());
1680:       assertFalse(node1.isWith());
1681:       assertFalse(node1.isFalse());
1682:       assertFalse(node1.isHook());
1683:       assertFalse(node1.isCast());
1684:       assertFalse(node1.hasOneChild());
1685:       assertFalse(node1.isLabelName());
1686:       assertEquals((-1), node1.getCharno());
1687:       assertFalse(node1.isSwitch());
1688:       assertFalse(node1.isGetProp());
1689:       assertFalse(node1.isScript());
1690:       assertFalse(node1.isString());
1691:       assertFalse(node1.isNumber());
1692:       assertEquals((-1), node1.getSourcePosition());
1693:       assertFalse(node1.isNot());
1694:       assertFalse(node1.isObjectLit());
1695:       assertFalse(node1.hasMoreThanOneChild());
1696:       assertFalse(node1.isContinue());
1697:       assertEquals((-1), node1.getLineno());
1698:       assertFalse(node1.isCase());
1699:       assertFalse(node1.isBlock());
1700:       assertFalse(node1.isThrow());
1701:       assertFalse(node1.isIf());
1702:       assertFalse(node1.isInc());
1703:       assertFalse(node1.isSetterDef());
1704:       assertFalse(node1.isNE());
1705:       assertFalse(node1.isIn());
1706:   }
1707: }
RegularFileObject[/tmp/EvoSuite_201_1628157544923/com/google/javascript/rhino/Node_201_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:05 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_201_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_201_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_201_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.JSTypeNative",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.JSType$TypePair",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.JSType$2",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
375:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
377:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
378:     );
379:   }
380: }

[MASTER] 09:59:05.238 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
assertNotNull(jSTypeRegistry0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());

ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
assertNotNull(arrayList0);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());

Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertNotNull(node0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());

boolean boolean0 = node0.isDefaultCase();
assertFalse(boolean0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());

JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
assertNotNull(jSTypeRegistry1);
assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());

Node node1 = new Node(8);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertEquals(8, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIn());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
assertNotSame(node0, node1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertNotNull(iterable0);
assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
assertFalse(node0.equals((Object)node1));
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());

boolean boolean1 = node0.isGetProp();
assertFalse(boolean1);
assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
assertNotSame(node0, node1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());

boolean boolean2 = node1.isParamList();
assertFalse(boolean2);
assertNotSame(node1, node0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertEquals(8, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIn());

boolean boolean3 = node0.isSetterDef();
assertFalse(boolean3);
assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
assertNotSame(node0, node1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());

Node node2 = Node.newString("");
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isBreak());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isWhile());
assertTrue(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasOneChild());
assertFalse(node2.isReturn());
assertFalse(node2.isCatch());
assertFalse(node2.isBlock());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isEmpty());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());

boolean boolean4 = node0.isUnscopedQualifiedName();
assertFalse(boolean4);
assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
assertNotSame(node0, node1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());

boolean boolean5 = node1.isWith();
assertFalse(boolean5);
assertNotSame(node1, node0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean0);
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertEquals(8, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIn());

node2.removeProp(37);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isBreak());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isWhile());
assertTrue(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isNull());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasOneChild());
assertFalse(node2.isReturn());
assertFalse(node2.isCatch());
assertFalse(node2.isBlock());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isEmpty());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());

String string0 = node1.getSourceFileName();
assertNotSame(node1, node0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNull(string0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertEquals(8, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIn());

boolean boolean6 = node1.isFor();
assertFalse(boolean6);
assertNotSame(node1, node0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertEquals(8, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIn());

String string1 = node0.getSourceFileName();
assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
assertNotSame(node0, node1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertNull(string1);
assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());

boolean boolean7 = node1.isBreak();
assertFalse(boolean7);
assertNotSame(node1, node0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertEquals(8, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isExprResult());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIn());


[MASTER] 09:59:05.514 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_203_1628157545281/com/google/javascript/rhino/Node_203_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_203_1628157545281/com/google/javascript/rhino/Node_203_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:05.514 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:05.514 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:05.515 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 365
[MASTER] 09:59:05.516 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_203_1628157545281/com/google/javascript/rhino/Node_203_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:05 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSType;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import java.util.ArrayList;
15: import java.util.List;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_203_tmp__ESTest extends Node_203_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
26:       assertNotNull(simpleErrorReporter0);
27:       
28:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
29:       assertNotNull(jSTypeRegistry0);
30:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
31:       
32:       ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
33:       assertNotNull(arrayList0);
34:       assertEquals(0, arrayList0.size());
35:       assertTrue(arrayList0.isEmpty());
36:       
37:       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
38:       assertEquals(53, Node.INPUT_ID);
39:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
40:       assertEquals(36, Node.QUOTED_PROP);
41:       assertEquals(43, Node.IS_CONSTANT_NAME);
42:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
43:       assertEquals(4095, Node.COLUMN_MASK);
44:       assertEquals(37, Node.OPT_ARG_NAME);
45:       assertEquals(48, Node.DIRECTIVES);
46:       assertEquals(8, Node.FLAG_NO_THROWS);
47:       assertEquals(2, Node.POST_FLAG);
48:       assertEquals(56, Node.CHANGE_TIME);
49:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
50:       assertEquals(47, Node.IS_DISPATCHER);
51:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
52:       assertEquals(29, Node.JSDOC_INFO_PROP);
53:       assertEquals(57, Node.LAST_PROP);
54:       assertEquals(55, Node.INFERRED_FUNCTION);
55:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
56:       assertEquals(15, Node.NO_SIDE_EFFECTS);
57:       assertEquals(39, Node.EMPTY_BLOCK);
58:       assertEquals(52, Node.LENGTH);
59:       assertEquals(54, Node.SLASH_V);
60:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
61:       assertEquals(57, Node.REFLECTED_OBJECT);
62:       assertEquals(49, Node.DIRECT_EVAL);
63:       assertEquals(30, Node.VAR_ARGS_NAME);
64:       assertEquals(40, Node.ORIGINALNAME_PROP);
65:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
66:       assertEquals(32, Node.INCRDECR_PROP);
67:       assertEquals(12, Node.COLUMN_BITS);
68:       assertEquals(51, Node.STATIC_SOURCE_FILE);
69:       assertEquals(46, Node.IS_NAMESPACE);
70:       assertEquals(50, Node.FREE_CALL);
71:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
72:       assertEquals(1, Node.DECR_FLAG);
73:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
74:       assertNotNull(node0);
75:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
76:       assertEquals(0, arrayList0.size());
77:       assertTrue(arrayList0.isEmpty());
78:       assertFalse(node0.isScript());
79:       assertFalse(node0.isWith());
80:       assertFalse(node0.isNot());
81:       assertTrue(node0.isParamList());
82:       assertFalse(node0.hasOneChild());
83:       assertFalse(node0.isObjectLit());
84:       assertFalse(node0.isGetProp());
85:       assertFalse(node0.isTypeOf());
86:       assertFalse(node0.isComma());
87:       assertFalse(node0.isDec());
88:       assertEquals(83, node0.getType());
89:       assertFalse(node0.isOr());
90:       assertFalse(node0.isAssign());
91:       assertFalse(node0.isThis());
92:       assertFalse(node0.isReturn());
93:       assertFalse(node0.hasChildren());
94:       assertFalse(node0.isInstanceOf());
95:       assertFalse(node0.hasMoreThanOneChild());
96:       assertEquals((-1), node0.getLineno());
97:       assertFalse(node0.isBreak());
98:       assertFalse(node0.isExprResult());
99:       assertFalse(node0.isGetElem());
100:       assertFalse(node0.isString());
101:       assertFalse(node0.isWhile());
102:       assertFalse(node0.isIn());
103:       assertFalse(node0.isInc());
104:       assertEquals((-1), node0.getSourcePosition());
105:       assertFalse(node0.isThrow());
106:       assertFalse(node0.isCast());
107:       assertFalse(node0.isAnd());
108:       assertFalse(node0.isContinue());
109:       assertFalse(node0.isFalse());
110:       assertFalse(node0.isRegExp());
111:       assertFalse(node0.isVoid());
112:       assertFalse(node0.isFunction());
113:       assertFalse(node0.isDefaultCase());
114:       assertFalse(node0.isTrue());
115:       assertFalse(node0.isDebugger());
116:       assertFalse(node0.isEmpty());
117:       assertFalse(node0.isTry());
118:       assertFalse(node0.isSetterDef());
119:       assertFalse(node0.isNull());
120:       assertFalse(node0.isNE());
121:       assertFalse(node0.isDelProp());
122:       assertFalse(node0.isIf());
123:       assertFalse(node0.isFor());
124:       assertFalse(node0.isCatch());
125:       assertFalse(node0.isName());
126:       assertFalse(node0.isCall());
127:       assertFalse(node0.isSwitch());
128:       assertFalse(node0.isBlock());
129:       assertEquals((-1), node0.getCharno());
130:       assertFalse(node0.isHook());
131:       assertFalse(node0.isVar());
132:       assertFalse(node0.isAssignAdd());
133:       assertFalse(node0.isCase());
134:       assertFalse(node0.isNew());
135:       assertFalse(node0.isAdd());
136:       assertFalse(node0.isDo());
137:       assertFalse(node0.isGetterDef());
138:       assertFalse(node0.isNumber());
139:       assertFalse(node0.isLabel());
140:       assertFalse(node0.isStringKey());
141:       assertFalse(node0.isArrayLit());
142:       assertEquals(0, node0.getChildCount());
143:       assertFalse(node0.isLabelName());
144:       
145:       boolean boolean0 = node0.isDefaultCase();
146:       assertFalse(boolean0);
147:       assertEquals(53, Node.INPUT_ID);
148:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
149:       assertEquals(36, Node.QUOTED_PROP);
150:       assertEquals(43, Node.IS_CONSTANT_NAME);
151:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
152:       assertEquals(4095, Node.COLUMN_MASK);
153:       assertEquals(37, Node.OPT_ARG_NAME);
154:       assertEquals(48, Node.DIRECTIVES);
155:       assertEquals(8, Node.FLAG_NO_THROWS);
156:       assertEquals(2, Node.POST_FLAG);
157:       assertEquals(56, Node.CHANGE_TIME);
158:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
159:       assertEquals(47, Node.IS_DISPATCHER);
160:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
161:       assertEquals(29, Node.JSDOC_INFO_PROP);
162:       assertEquals(57, Node.LAST_PROP);
163:       assertEquals(55, Node.INFERRED_FUNCTION);
164:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
165:       assertEquals(15, Node.NO_SIDE_EFFECTS);
166:       assertEquals(39, Node.EMPTY_BLOCK);
167:       assertEquals(52, Node.LENGTH);
168:       assertEquals(54, Node.SLASH_V);
169:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
170:       assertEquals(57, Node.REFLECTED_OBJECT);
171:       assertEquals(49, Node.DIRECT_EVAL);
172:       assertEquals(30, Node.VAR_ARGS_NAME);
173:       assertEquals(40, Node.ORIGINALNAME_PROP);
174:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
175:       assertEquals(32, Node.INCRDECR_PROP);
176:       assertEquals(12, Node.COLUMN_BITS);
177:       assertEquals(51, Node.STATIC_SOURCE_FILE);
178:       assertEquals(46, Node.IS_NAMESPACE);
179:       assertEquals(50, Node.FREE_CALL);
180:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
181:       assertEquals(1, Node.DECR_FLAG);
182:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
183:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
184:       assertEquals(0, arrayList0.size());
185:       assertTrue(arrayList0.isEmpty());
186:       assertFalse(node0.isScript());
187:       assertFalse(node0.isWith());
188:       assertFalse(node0.isNot());
189:       assertTrue(node0.isParamList());
190:       assertFalse(node0.hasOneChild());
191:       assertFalse(node0.isObjectLit());
192:       assertFalse(node0.isGetProp());
193:       assertFalse(node0.isTypeOf());
194:       assertFalse(node0.isComma());
195:       assertFalse(node0.isDec());
196:       assertEquals(83, node0.getType());
197:       assertFalse(node0.isOr());
198:       assertFalse(node0.isAssign());
199:       assertFalse(node0.isThis());
200:       assertFalse(node0.isReturn());
201:       assertFalse(node0.hasChildren());
202:       assertFalse(node0.isInstanceOf());
203:       assertFalse(node0.hasMoreThanOneChild());
204:       assertEquals((-1), node0.getLineno());
205:       assertFalse(node0.isBreak());
206:       assertFalse(node0.isExprResult());
207:       assertFalse(node0.isGetElem());
208:       assertFalse(node0.isString());
209:       assertFalse(node0.isWhile());
210:       assertFalse(node0.isIn());
211:       assertFalse(node0.isInc());
212:       assertEquals((-1), node0.getSourcePosition());
213:       assertFalse(node0.isThrow());
214:       assertFalse(node0.isCast());
215:       assertFalse(node0.isAnd());
216:       assertFalse(node0.isContinue());
217:       assertFalse(node0.isFalse());
218:       assertFalse(node0.isRegExp());
219:       assertFalse(node0.isVoid());
220:       assertFalse(node0.isFunction());
221:       assertFalse(node0.isDefaultCase());
222:       assertFalse(node0.isTrue());
223:       assertFalse(node0.isDebugger());
224:       assertFalse(node0.isEmpty());
225:       assertFalse(node0.isTry());
226:       assertFalse(node0.isSetterDef());
227:       assertFalse(node0.isNull());
228:       assertFalse(node0.isNE());
229:       assertFalse(node0.isDelProp());
230:       assertFalse(node0.isIf());
231:       assertFalse(node0.isFor());
232:       assertFalse(node0.isCatch());
233:       assertFalse(node0.isName());
234:       assertFalse(node0.isCall());
235:       assertFalse(node0.isSwitch());
236:       assertFalse(node0.isBlock());
237:       assertEquals((-1), node0.getCharno());
238:       assertFalse(node0.isHook());
239:       assertFalse(node0.isVar());
240:       assertFalse(node0.isAssignAdd());
241:       assertFalse(node0.isCase());
242:       assertFalse(node0.isNew());
243:       assertFalse(node0.isAdd());
244:       assertFalse(node0.isDo());
245:       assertFalse(node0.isGetterDef());
246:       assertFalse(node0.isNumber());
247:       assertFalse(node0.isLabel());
248:       assertFalse(node0.isStringKey());
249:       assertFalse(node0.isArrayLit());
250:       assertEquals(0, node0.getChildCount());
251:       assertFalse(node0.isLabelName());
252:       
253:       JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
254:       assertNotNull(jSTypeRegistry1);
255:       assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
256:       assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
257:       
258:       Node node1 = new Node(8);
259:       assertEquals(55, Node.INFERRED_FUNCTION);
260:       assertEquals(4095, Node.COLUMN_MASK);
261:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
262:       assertEquals(48, Node.DIRECTIVES);
263:       assertEquals(8, Node.FLAG_NO_THROWS);
264:       assertEquals(39, Node.EMPTY_BLOCK);
265:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
266:       assertEquals(43, Node.IS_CONSTANT_NAME);
267:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
268:       assertEquals(50, Node.FREE_CALL);
269:       assertEquals(36, Node.QUOTED_PROP);
270:       assertEquals(57, Node.REFLECTED_OBJECT);
271:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
272:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
273:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
274:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
275:       assertEquals(12, Node.COLUMN_BITS);
276:       assertEquals(46, Node.IS_NAMESPACE);
277:       assertEquals(49, Node.DIRECT_EVAL);
278:       assertEquals(32, Node.INCRDECR_PROP);
279:       assertEquals(1, Node.DECR_FLAG);
280:       assertEquals(37, Node.OPT_ARG_NAME);
281:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
282:       assertEquals(15, Node.NO_SIDE_EFFECTS);
283:       assertEquals(54, Node.SLASH_V);
284:       assertEquals(56, Node.CHANGE_TIME);
285:       assertEquals(52, Node.LENGTH);
286:       assertEquals(51, Node.STATIC_SOURCE_FILE);
287:       assertEquals(40, Node.ORIGINALNAME_PROP);
288:       assertEquals(29, Node.JSDOC_INFO_PROP);
289:       assertEquals(53, Node.INPUT_ID);
290:       assertEquals(2, Node.POST_FLAG);
291:       assertEquals(57, Node.LAST_PROP);
292:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
293:       assertEquals(30, Node.VAR_ARGS_NAME);
294:       assertEquals(47, Node.IS_DISPATCHER);
295:       assertNotNull(node1);
296:       assertFalse(node1.equals((Object)node0));
297:       assertFalse(node1.isParamList());
298:       assertFalse(node1.isSetterDef());
299:       assertFalse(node1.isDefaultCase());
300:       assertFalse(node1.isCatch());
301:       assertFalse(node1.isRegExp());
302:       assertFalse(node1.isVar());
303:       assertFalse(node1.isFunction());
304:       assertEquals(0, node1.getChildCount());
305:       assertFalse(node1.isTry());
306:       assertFalse(node1.isBlock());
307:       assertFalse(node1.isArrayLit());
308:       assertFalse(node1.isStringKey());
309:       assertFalse(node1.isGetterDef());
310:       assertFalse(node1.isDebugger());
311:       assertFalse(node1.isLabel());
312:       assertFalse(node1.isAssignAdd());
313:       assertFalse(node1.isOr());
314:       assertFalse(node1.isReturn());
315:       assertFalse(node1.isDelProp());
316:       assertFalse(node1.isDo());
317:       assertFalse(node1.isAssign());
318:       assertFalse(node1.isGetElem());
319:       assertEquals(8, node1.getType());
320:       assertFalse(node1.isWhile());
321:       assertFalse(node1.isTypeOf());
322:       assertFalse(node1.hasChildren());
323:       assertFalse(node1.isDec());
324:       assertFalse(node1.isAdd());
325:       assertFalse(node1.isCall());
326:       assertFalse(node1.isExprResult());
327:       assertFalse(node1.isVoid());
328:       assertFalse(node1.isNew());
329:       assertFalse(node1.isEmpty());
330:       assertFalse(node1.isName());
331:       assertFalse(node1.isNull());
332:       assertFalse(node1.isTrue());
333:       assertFalse(node1.isInstanceOf());
334:       assertFalse(node1.isBreak());
335:       assertFalse(node1.isGetProp());
336:       assertFalse(node1.isWith());
337:       assertFalse(node1.isFalse());
338:       assertFalse(node1.isThrow());
339:       assertFalse(node1.isHook());
340:       assertFalse(node1.isThis());
341:       assertFalse(node1.isComma());
342:       assertFalse(node1.isScript());
343:       assertFalse(node1.isCast());
344:       assertFalse(node1.isSwitch());
345:       assertFalse(node1.hasOneChild());
346:       assertFalse(node1.isLabelName());
347:       assertFalse(node1.isNot());
348:       assertFalse(node1.isAnd());
349:       assertFalse(node1.isString());
350:       assertFalse(node1.isNumber());
351:       assertEquals((-1), node1.getCharno());
352:       assertFalse(node1.isObjectLit());
353:       assertEquals((-1), node1.getSourcePosition());
354:       assertFalse(node1.isIn());
355:       assertFalse(node1.isCase());
356:       assertEquals((-1), node1.getLineno());
357:       assertFalse(node1.isFor());
358:       assertFalse(node1.isContinue());
359:       assertFalse(node1.hasMoreThanOneChild());
360:       assertFalse(node1.isInc());
361:       assertFalse(node1.isIf());
362:       assertFalse(node1.isNE());
363:       
364:       Iterable<Node> iterable0 = node0.children();
365:       assertFalse(iterable0.contains(node1));
366:       assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
367:       assertNotSame(node0, node1);
368:       assertEquals(53, Node.INPUT_ID);
369:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
370:       assertEquals(36, Node.QUOTED_PROP);
371:       assertEquals(43, Node.IS_CONSTANT_NAME);
372:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
373:       assertEquals(4095, Node.COLUMN_MASK);
374:       assertEquals(37, Node.OPT_ARG_NAME);
375:       assertEquals(48, Node.DIRECTIVES);
376:       assertEquals(8, Node.FLAG_NO_THROWS);
377:       assertEquals(2, Node.POST_FLAG);
378:       assertEquals(56, Node.CHANGE_TIME);
379:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
380:       assertEquals(47, Node.IS_DISPATCHER);
381:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
382:       assertEquals(29, Node.JSDOC_INFO_PROP);
383:       assertEquals(57, Node.LAST_PROP);
384:       assertEquals(55, Node.INFERRED_FUNCTION);
385:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
386:       assertEquals(15, Node.NO_SIDE_EFFECTS);
387:       assertEquals(39, Node.EMPTY_BLOCK);
388:       assertEquals(52, Node.LENGTH);
389:       assertEquals(54, Node.SLASH_V);
390:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
391:       assertEquals(57, Node.REFLECTED_OBJECT);
392:       assertEquals(49, Node.DIRECT_EVAL);
393:       assertEquals(30, Node.VAR_ARGS_NAME);
394:       assertEquals(40, Node.ORIGINALNAME_PROP);
395:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
396:       assertEquals(32, Node.INCRDECR_PROP);
397:       assertEquals(12, Node.COLUMN_BITS);
398:       assertEquals(51, Node.STATIC_SOURCE_FILE);
399:       assertEquals(46, Node.IS_NAMESPACE);
400:       assertEquals(50, Node.FREE_CALL);
401:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
402:       assertEquals(1, Node.DECR_FLAG);
403:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
404:       assertNotNull(iterable0);
405:       assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
406:       assertFalse(node0.equals((Object)node1));
407:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
408:       assertEquals(0, arrayList0.size());
409:       assertTrue(arrayList0.isEmpty());
410:       assertFalse(node0.isScript());
411:       assertFalse(node0.isWith());
412:       assertFalse(node0.isNot());
413:       assertTrue(node0.isParamList());
414:       assertFalse(node0.hasOneChild());
415:       assertFalse(node0.isObjectLit());
416:       assertFalse(node0.isGetProp());
417:       assertFalse(node0.isTypeOf());
418:       assertFalse(node0.isComma());
419:       assertFalse(node0.isDec());
420:       assertEquals(83, node0.getType());
421:       assertFalse(node0.isOr());
422:       assertFalse(node0.isAssign());
423:       assertFalse(node0.isThis());
424:       assertFalse(node0.isReturn());
425:       assertFalse(node0.hasChildren());
426:       assertFalse(node0.isInstanceOf());
427:       assertFalse(node0.hasMoreThanOneChild());
428:       assertEquals((-1), node0.getLineno());
429:       assertFalse(node0.isBreak());
430:       assertFalse(node0.isExprResult());
431:       assertFalse(node0.isGetElem());
432:       assertFalse(node0.isString());
433:       assertFalse(node0.isWhile());
434:       assertFalse(node0.isIn());
435:       assertFalse(node0.isInc());
436:       assertEquals((-1), node0.getSourcePosition());
437:       assertFalse(node0.isThrow());
438:       assertFalse(node0.isCast());
439:       assertFalse(node0.isAnd());
440:       assertFalse(node0.isContinue());
441:       assertFalse(node0.isFalse());
442:       assertFalse(node0.isRegExp());
443:       assertFalse(node0.isVoid());
444:       assertFalse(node0.isFunction());
445:       assertFalse(node0.isDefaultCase());
446:       assertFalse(node0.isTrue());
447:       assertFalse(node0.isDebugger());
448:       assertFalse(node0.isEmpty());
449:       assertFalse(node0.isTry());
450:       assertFalse(node0.isSetterDef());
451:       assertFalse(node0.isNull());
452:       assertFalse(node0.isNE());
453:       assertFalse(node0.isDelProp());
454:       assertFalse(node0.isIf());
455:       assertFalse(node0.isFor());
456:       assertFalse(node0.isCatch());
457:       assertFalse(node0.isName());
458:       assertFalse(node0.isCall());
459:       assertFalse(node0.isSwitch());
460:       assertFalse(node0.isBlock());
461:       assertEquals((-1), node0.getCharno());
462:       assertFalse(node0.isHook());
463:       assertFalse(node0.isVar());
464:       assertFalse(node0.isAssignAdd());
465:       assertFalse(node0.isCase());
466:       assertFalse(node0.isNew());
467:       assertFalse(node0.isAdd());
468:       assertFalse(node0.isDo());
469:       assertFalse(node0.isGetterDef());
470:       assertFalse(node0.isNumber());
471:       assertFalse(node0.isLabel());
472:       assertFalse(node0.isStringKey());
473:       assertFalse(node0.isArrayLit());
474:       assertEquals(0, node0.getChildCount());
475:       assertFalse(node0.isLabelName());
476:       
477:       boolean boolean1 = node0.isGetProp();
478:       assertFalse(boolean1);
479:       assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
480:       assertNotSame(node0, node1);
481:       assertEquals(53, Node.INPUT_ID);
482:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
483:       assertEquals(36, Node.QUOTED_PROP);
484:       assertEquals(43, Node.IS_CONSTANT_NAME);
485:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
486:       assertEquals(4095, Node.COLUMN_MASK);
487:       assertEquals(37, Node.OPT_ARG_NAME);
488:       assertEquals(48, Node.DIRECTIVES);
489:       assertEquals(8, Node.FLAG_NO_THROWS);
490:       assertEquals(2, Node.POST_FLAG);
491:       assertEquals(56, Node.CHANGE_TIME);
492:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
493:       assertEquals(47, Node.IS_DISPATCHER);
494:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
495:       assertEquals(29, Node.JSDOC_INFO_PROP);
496:       assertEquals(57, Node.LAST_PROP);
497:       assertEquals(55, Node.INFERRED_FUNCTION);
498:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
499:       assertEquals(15, Node.NO_SIDE_EFFECTS);
500:       assertEquals(39, Node.EMPTY_BLOCK);
501:       assertEquals(52, Node.LENGTH);
502:       assertEquals(54, Node.SLASH_V);
503:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
504:       assertEquals(57, Node.REFLECTED_OBJECT);
505:       assertEquals(49, Node.DIRECT_EVAL);
506:       assertEquals(30, Node.VAR_ARGS_NAME);
507:       assertEquals(40, Node.ORIGINALNAME_PROP);
508:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
509:       assertEquals(32, Node.INCRDECR_PROP);
510:       assertEquals(12, Node.COLUMN_BITS);
511:       assertEquals(51, Node.STATIC_SOURCE_FILE);
512:       assertEquals(46, Node.IS_NAMESPACE);
513:       assertEquals(50, Node.FREE_CALL);
514:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
515:       assertEquals(1, Node.DECR_FLAG);
516:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
517:       assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
518:       assertFalse(node0.equals((Object)node1));
519:       assertTrue(boolean1 == boolean0);
520:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
521:       assertEquals(0, arrayList0.size());
522:       assertTrue(arrayList0.isEmpty());
523:       assertFalse(node0.isScript());
524:       assertFalse(node0.isWith());
525:       assertFalse(node0.isNot());
526:       assertTrue(node0.isParamList());
527:       assertFalse(node0.hasOneChild());
528:       assertFalse(node0.isObjectLit());
529:       assertFalse(node0.isGetProp());
530:       assertFalse(node0.isTypeOf());
531:       assertFalse(node0.isComma());
532:       assertFalse(node0.isDec());
533:       assertEquals(83, node0.getType());
534:       assertFalse(node0.isOr());
535:       assertFalse(node0.isAssign());
536:       assertFalse(node0.isThis());
537:       assertFalse(node0.isReturn());
538:       assertFalse(node0.hasChildren());
539:       assertFalse(node0.isInstanceOf());
540:       assertFalse(node0.hasMoreThanOneChild());
541:       assertEquals((-1), node0.getLineno());
542:       assertFalse(node0.isBreak());
543:       assertFalse(node0.isExprResult());
544:       assertFalse(node0.isGetElem());
545:       assertFalse(node0.isString());
546:       assertFalse(node0.isWhile());
547:       assertFalse(node0.isIn());
548:       assertFalse(node0.isInc());
549:       assertEquals((-1), node0.getSourcePosition());
550:       assertFalse(node0.isThrow());
551:       assertFalse(node0.isCast());
552:       assertFalse(node0.isAnd());
553:       assertFalse(node0.isContinue());
554:       assertFalse(node0.isFalse());
555:       assertFalse(node0.isRegExp());
556:       assertFalse(node0.isVoid());
557:       assertFalse(node0.isFunction());
558:       assertFalse(node0.isDefaultCase());
559:       assertFalse(node0.isTrue());
560:       assertFalse(node0.isDebugger());
561:       assertFalse(node0.isEmpty());
562:       assertFalse(node0.isTry());
563:       assertFalse(node0.isSetterDef());
564:       assertFalse(node0.isNull());
565:       assertFalse(node0.isNE());
566:       assertFalse(node0.isDelProp());
567:       assertFalse(node0.isIf());
568:       assertFalse(node0.isFor());
569:       assertFalse(node0.isCatch());
570:       assertFalse(node0.isName());
571:       assertFalse(node0.isCall());
572:       assertFalse(node0.isSwitch());
573:       assertFalse(node0.isBlock());
574:       assertEquals((-1), node0.getCharno());
575:       assertFalse(node0.isHook());
576:       assertFalse(node0.isVar());
577:       assertFalse(node0.isAssignAdd());
578:       assertFalse(node0.isCase());
579:       assertFalse(node0.isNew());
580:       assertFalse(node0.isAdd());
581:       assertFalse(node0.isDo());
582:       assertFalse(node0.isGetterDef());
583:       assertFalse(node0.isNumber());
584:       assertFalse(node0.isLabel());
585:       assertFalse(node0.isStringKey());
586:       assertFalse(node0.isArrayLit());
587:       assertEquals(0, node0.getChildCount());
588:       assertFalse(node0.isLabelName());
589:       
590:       boolean boolean2 = node1.isParamList();
591:       assertFalse(boolean2);
592:       assertNotSame(node1, node0);
593:       assertEquals(55, Node.INFERRED_FUNCTION);
594:       assertEquals(4095, Node.COLUMN_MASK);
595:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
596:       assertEquals(48, Node.DIRECTIVES);
597:       assertEquals(8, Node.FLAG_NO_THROWS);
598:       assertEquals(39, Node.EMPTY_BLOCK);
599:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
600:       assertEquals(43, Node.IS_CONSTANT_NAME);
601:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
602:       assertEquals(50, Node.FREE_CALL);
603:       assertEquals(36, Node.QUOTED_PROP);
604:       assertEquals(57, Node.REFLECTED_OBJECT);
605:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
606:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
607:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
608:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
609:       assertEquals(12, Node.COLUMN_BITS);
610:       assertEquals(46, Node.IS_NAMESPACE);
611:       assertEquals(49, Node.DIRECT_EVAL);
612:       assertEquals(32, Node.INCRDECR_PROP);
613:       assertEquals(1, Node.DECR_FLAG);
614:       assertEquals(37, Node.OPT_ARG_NAME);
615:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
616:       assertEquals(15, Node.NO_SIDE_EFFECTS);
617:       assertEquals(54, Node.SLASH_V);
618:       assertEquals(56, Node.CHANGE_TIME);
619:       assertEquals(52, Node.LENGTH);
620:       assertEquals(51, Node.STATIC_SOURCE_FILE);
621:       assertEquals(40, Node.ORIGINALNAME_PROP);
622:       assertEquals(29, Node.JSDOC_INFO_PROP);
623:       assertEquals(53, Node.INPUT_ID);
624:       assertEquals(2, Node.POST_FLAG);
625:       assertEquals(57, Node.LAST_PROP);
626:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
627:       assertEquals(30, Node.VAR_ARGS_NAME);
628:       assertEquals(47, Node.IS_DISPATCHER);
629:       assertFalse(node1.equals((Object)node0));
630:       assertTrue(boolean2 == boolean0);
631:       assertTrue(boolean2 == boolean1);
632:       assertFalse(node1.isParamList());
633:       assertFalse(node1.isSetterDef());
634:       assertFalse(node1.isDefaultCase());
635:       assertFalse(node1.isCatch());
636:       assertFalse(node1.isRegExp());
637:       assertFalse(node1.isVar());
638:       assertFalse(node1.isFunction());
639:       assertEquals(0, node1.getChildCount());
640:       assertFalse(node1.isTry());
641:       assertFalse(node1.isBlock());
642:       assertFalse(node1.isArrayLit());
643:       assertFalse(node1.isStringKey());
644:       assertFalse(node1.isGetterDef());
645:       assertFalse(node1.isDebugger());
646:       assertFalse(node1.isLabel());
647:       assertFalse(node1.isAssignAdd());
648:       assertFalse(node1.isOr());
649:       assertFalse(node1.isReturn());
650:       assertFalse(node1.isDelProp());
651:       assertFalse(node1.isDo());
652:       assertFalse(node1.isAssign());
653:       assertFalse(node1.isGetElem());
654:       assertEquals(8, node1.getType());
655:       assertFalse(node1.isWhile());
656:       assertFalse(node1.isTypeOf());
657:       assertFalse(node1.hasChildren());
658:       assertFalse(node1.isDec());
659:       assertFalse(node1.isAdd());
660:       assertFalse(node1.isCall());
661:       assertFalse(node1.isExprResult());
662:       assertFalse(node1.isVoid());
663:       assertFalse(node1.isNew());
664:       assertFalse(node1.isEmpty());
665:       assertFalse(node1.isName());
666:       assertFalse(node1.isNull());
667:       assertFalse(node1.isTrue());
668:       assertFalse(node1.isInstanceOf());
669:       assertFalse(node1.isBreak());
670:       assertFalse(node1.isGetProp());
671:       assertFalse(node1.isWith());
672:       assertFalse(node1.isFalse());
673:       assertFalse(node1.isThrow());
674:       assertFalse(node1.isHook());
675:       assertFalse(node1.isThis());
676:       assertFalse(node1.isComma());
677:       assertFalse(node1.isScript());
678:       assertFalse(node1.isCast());
679:       assertFalse(node1.isSwitch());
680:       assertFalse(node1.hasOneChild());
681:       assertFalse(node1.isLabelName());
682:       assertFalse(node1.isNot());
683:       assertFalse(node1.isAnd());
684:       assertFalse(node1.isString());
685:       assertFalse(node1.isNumber());
686:       assertEquals((-1), node1.getCharno());
687:       assertFalse(node1.isObjectLit());
688:       assertEquals((-1), node1.getSourcePosition());
689:       assertFalse(node1.isIn());
690:       assertFalse(node1.isCase());
691:       assertEquals((-1), node1.getLineno());
692:       assertFalse(node1.isFor());
693:       assertFalse(node1.isContinue());
694:       assertFalse(node1.hasMoreThanOneChild());
695:       assertFalse(node1.isInc());
696:       assertFalse(node1.isIf());
697:       assertFalse(node1.isNE());
698:       
699:       boolean boolean3 = node0.isSetterDef();
700:       assertFalse(boolean3);
701:       assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
702:       assertNotSame(node0, node1);
703:       assertEquals(53, Node.INPUT_ID);
704:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
705:       assertEquals(36, Node.QUOTED_PROP);
706:       assertEquals(43, Node.IS_CONSTANT_NAME);
707:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
708:       assertEquals(4095, Node.COLUMN_MASK);
709:       assertEquals(37, Node.OPT_ARG_NAME);
710:       assertEquals(48, Node.DIRECTIVES);
711:       assertEquals(8, Node.FLAG_NO_THROWS);
712:       assertEquals(2, Node.POST_FLAG);
713:       assertEquals(56, Node.CHANGE_TIME);
714:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
715:       assertEquals(47, Node.IS_DISPATCHER);
716:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
717:       assertEquals(29, Node.JSDOC_INFO_PROP);
718:       assertEquals(57, Node.LAST_PROP);
719:       assertEquals(55, Node.INFERRED_FUNCTION);
720:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
721:       assertEquals(15, Node.NO_SIDE_EFFECTS);
722:       assertEquals(39, Node.EMPTY_BLOCK);
723:       assertEquals(52, Node.LENGTH);
724:       assertEquals(54, Node.SLASH_V);
725:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
726:       assertEquals(57, Node.REFLECTED_OBJECT);
727:       assertEquals(49, Node.DIRECT_EVAL);
728:       assertEquals(30, Node.VAR_ARGS_NAME);
729:       assertEquals(40, Node.ORIGINALNAME_PROP);
730:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
731:       assertEquals(32, Node.INCRDECR_PROP);
732:       assertEquals(12, Node.COLUMN_BITS);
733:       assertEquals(51, Node.STATIC_SOURCE_FILE);
734:       assertEquals(46, Node.IS_NAMESPACE);
735:       assertEquals(50, Node.FREE_CALL);
736:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
737:       assertEquals(1, Node.DECR_FLAG);
738:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
739:       assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
740:       assertFalse(node0.equals((Object)node1));
741:       assertTrue(boolean3 == boolean2);
742:       assertTrue(boolean3 == boolean1);
743:       assertTrue(boolean3 == boolean0);
744:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
745:       assertEquals(0, arrayList0.size());
746:       assertTrue(arrayList0.isEmpty());
747:       assertFalse(node0.isScript());
748:       assertFalse(node0.isWith());
749:       assertFalse(node0.isNot());
750:       assertTrue(node0.isParamList());
751:       assertFalse(node0.hasOneChild());
752:       assertFalse(node0.isObjectLit());
753:       assertFalse(node0.isGetProp());
754:       assertFalse(node0.isTypeOf());
755:       assertFalse(node0.isComma());
756:       assertFalse(node0.isDec());
757:       assertEquals(83, node0.getType());
758:       assertFalse(node0.isOr());
759:       assertFalse(node0.isAssign());
760:       assertFalse(node0.isThis());
761:       assertFalse(node0.isReturn());
762:       assertFalse(node0.hasChildren());
763:       assertFalse(node0.isInstanceOf());
764:       assertFalse(node0.hasMoreThanOneChild());
765:       assertEquals((-1), node0.getLineno());
766:       assertFalse(node0.isBreak());
767:       assertFalse(node0.isExprResult());
768:       assertFalse(node0.isGetElem());
769:       assertFalse(node0.isString());
770:       assertFalse(node0.isWhile());
771:       assertFalse(node0.isIn());
772:       assertFalse(node0.isInc());
773:       assertEquals((-1), node0.getSourcePosition());
774:       assertFalse(node0.isThrow());
775:       assertFalse(node0.isCast());
776:       assertFalse(node0.isAnd());
777:       assertFalse(node0.isContinue());
778:       assertFalse(node0.isFalse());
779:       assertFalse(node0.isRegExp());
780:       assertFalse(node0.isVoid());
781:       assertFalse(node0.isFunction());
782:       assertFalse(node0.isDefaultCase());
783:       assertFalse(node0.isTrue());
784:       assertFalse(node0.isDebugger());
785:       assertFalse(node0.isEmpty());
786:       assertFalse(node0.isTry());
787:       assertFalse(node0.isSetterDef());
788:       assertFalse(node0.isNull());
789:       assertFalse(node0.isNE());
790:       assertFalse(node0.isDelProp());
791:       assertFalse(node0.isIf());
792:       assertFalse(node0.isFor());
793:       assertFalse(node0.isCatch());
794:       assertFalse(node0.isName());
795:       assertFalse(node0.isCall());
796:       assertFalse(node0.isSwitch());
797:       assertFalse(node0.isBlock());
798:       assertEquals((-1), node0.getCharno());
799:       assertFalse(node0.isHook());
800:       assertFalse(node0.isVar());
801:       assertFalse(node0.isAssignAdd());
802:       assertFalse(node0.isCase());
803:       assertFalse(node0.isNew());
804:       assertFalse(node0.isAdd());
805:       assertFalse(node0.isDo());
806:       assertFalse(node0.isGetterDef());
807:       assertFalse(node0.isNumber());
808:       assertFalse(node0.isLabel());
809:       assertFalse(node0.isStringKey());
810:       assertFalse(node0.isArrayLit());
811:       assertEquals(0, node0.getChildCount());
812:       assertFalse(node0.isLabelName());
813:       
814:       Node node2 = Node.newString("dq5c_Nx-9/^@ac2wG");
815:       assertEquals(55, Node.INFERRED_FUNCTION);
816:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
817:       assertEquals(36, Node.QUOTED_PROP);
818:       assertEquals(4095, Node.COLUMN_MASK);
819:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
820:       assertEquals(43, Node.IS_CONSTANT_NAME);
821:       assertEquals(48, Node.DIRECTIVES);
822:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
823:       assertEquals(40, Node.ORIGINALNAME_PROP);
824:       assertEquals(29, Node.JSDOC_INFO_PROP);
825:       assertEquals(57, Node.REFLECTED_OBJECT);
826:       assertEquals(47, Node.IS_DISPATCHER);
827:       assertEquals(8, Node.FLAG_NO_THROWS);
828:       assertEquals(2, Node.POST_FLAG);
829:       assertEquals(53, Node.INPUT_ID);
830:       assertEquals(52, Node.LENGTH);
831:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
832:       assertEquals(39, Node.EMPTY_BLOCK);
833:       assertEquals(15, Node.NO_SIDE_EFFECTS);
834:       assertEquals(57, Node.LAST_PROP);
835:       assertEquals(51, Node.STATIC_SOURCE_FILE);
836:       assertEquals(12, Node.COLUMN_BITS);
837:       assertEquals(30, Node.VAR_ARGS_NAME);
838:       assertEquals(46, Node.IS_NAMESPACE);
839:       assertEquals(54, Node.SLASH_V);
840:       assertEquals(56, Node.CHANGE_TIME);
841:       assertEquals(37, Node.OPT_ARG_NAME);
842:       assertEquals(49, Node.DIRECT_EVAL);
843:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
844:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
845:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
846:       assertEquals(50, Node.FREE_CALL);
847:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
848:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
849:       assertEquals(32, Node.INCRDECR_PROP);
850:       assertEquals(1, Node.DECR_FLAG);
851:       assertNotNull(node2);
852:       assertFalse(node2.equals((Object)node0));
853:       assertFalse(node2.equals((Object)node1));
854:       assertFalse(node2.isInstanceOf());
855:       assertFalse(node2.isComma());
856:       assertFalse(node2.isWith());
857:       assertFalse(node2.isNot());
858:       assertFalse(node2.isObjectLit());
859:       assertFalse(node2.isThis());
860:       assertFalse(node2.isScript());
861:       assertFalse(node2.isGetProp());
862:       assertFalse(node2.isHook());
863:       assertFalse(node2.isAssign());
864:       assertFalse(node2.isTypeOf());
865:       assertFalse(node2.isBreak());
866:       assertFalse(node2.isExprResult());
867:       assertFalse(node2.isGetElem());
868:       assertEquals((-1), node2.getLineno());
869:       assertFalse(node2.isIn());
870:       assertFalse(node2.isReturn());
871:       assertFalse(node2.isContinue());
872:       assertFalse(node2.isDec());
873:       assertFalse(node2.hasChildren());
874:       assertFalse(node2.isInc());
875:       assertFalse(node2.isWhile());
876:       assertFalse(node2.isCast());
877:       assertFalse(node2.isThrow());
878:       assertFalse(node2.isFalse());
879:       assertFalse(node2.isDebugger());
880:       assertFalse(node2.isFunction());
881:       assertEquals((-1), node2.getSourcePosition());
882:       assertFalse(node2.isAnd());
883:       assertFalse(node2.isCatch());
884:       assertEquals(40, node2.getType());
885:       assertEquals(0, node2.getChildCount());
886:       assertFalse(node2.isDefaultCase());
887:       assertFalse(node2.isSetterDef());
888:       assertFalse(node2.isTry());
889:       assertFalse(node2.isCall());
890:       assertFalse(node2.isAdd());
891:       assertFalse(node2.isBlock());
892:       assertFalse(node2.isRegExp());
893:       assertFalse(node2.isNull());
894:       assertFalse(node2.isIf());
895:       assertFalse(node2.isTrue());
896:       assertFalse(node2.isNE());
897:       assertFalse(node2.isName());
898:       assertFalse(node2.isVoid());
899:       assertFalse(node2.isDelProp());
900:       assertFalse(node2.isLabel());
901:       assertFalse(node2.hasMoreThanOneChild());
902:       assertFalse(node2.isOr());
903:       assertFalse(node2.isNumber());
904:       assertFalse(node2.isEmpty());
905:       assertFalse(node2.isFor());
906:       assertFalse(node2.isCase());
907:       assertTrue(node2.isString());
908:       assertFalse(node2.isNew());
909:       assertFalse(node2.isAssignAdd());
910:       assertFalse(node2.isDo());
911:       assertFalse(node2.hasOneChild());
912:       assertFalse(node2.isArrayLit());
913:       assertFalse(node2.isVar());
914:       assertEquals((-1), node2.getCharno());
915:       assertFalse(node2.isGetterDef());
916:       assertFalse(node2.isSwitch());
917:       assertFalse(node2.isParamList());
918:       assertFalse(node2.isStringKey());
919:       assertFalse(node2.isLabelName());
920:       
921:       boolean boolean4 = node0.isUnscopedQualifiedName();
922:       assertFalse(boolean4);
923:       assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
924:       assertNotSame(node0, node1);
925:       assertEquals(53, Node.INPUT_ID);
926:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
927:       assertEquals(36, Node.QUOTED_PROP);
928:       assertEquals(43, Node.IS_CONSTANT_NAME);
929:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
930:       assertEquals(4095, Node.COLUMN_MASK);
931:       assertEquals(37, Node.OPT_ARG_NAME);
932:       assertEquals(48, Node.DIRECTIVES);
933:       assertEquals(8, Node.FLAG_NO_THROWS);
934:       assertEquals(2, Node.POST_FLAG);
935:       assertEquals(56, Node.CHANGE_TIME);
936:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
937:       assertEquals(47, Node.IS_DISPATCHER);
938:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
939:       assertEquals(29, Node.JSDOC_INFO_PROP);
940:       assertEquals(57, Node.LAST_PROP);
941:       assertEquals(55, Node.INFERRED_FUNCTION);
942:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
943:       assertEquals(15, Node.NO_SIDE_EFFECTS);
944:       assertEquals(39, Node.EMPTY_BLOCK);
945:       assertEquals(52, Node.LENGTH);
946:       assertEquals(54, Node.SLASH_V);
947:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
948:       assertEquals(57, Node.REFLECTED_OBJECT);
949:       assertEquals(49, Node.DIRECT_EVAL);
950:       assertEquals(30, Node.VAR_ARGS_NAME);
951:       assertEquals(40, Node.ORIGINALNAME_PROP);
952:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
953:       assertEquals(32, Node.INCRDECR_PROP);
954:       assertEquals(12, Node.COLUMN_BITS);
955:       assertEquals(51, Node.STATIC_SOURCE_FILE);
956:       assertEquals(46, Node.IS_NAMESPACE);
957:       assertEquals(50, Node.FREE_CALL);
958:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
959:       assertEquals(1, Node.DECR_FLAG);
960:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
961:       assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
962:       assertFalse(node0.equals((Object)node1));
963:       assertFalse(node0.equals((Object)node2));
964:       assertTrue(boolean4 == boolean0);
965:       assertTrue(boolean4 == boolean3);
966:       assertTrue(boolean4 == boolean2);
967:       assertTrue(boolean4 == boolean1);
968:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
969:       assertEquals(0, arrayList0.size());
970:       assertTrue(arrayList0.isEmpty());
971:       assertFalse(node0.isScript());
972:       assertFalse(node0.isWith());
973:       assertFalse(node0.isNot());
974:       assertTrue(node0.isParamList());
975:       assertFalse(node0.hasOneChild());
976:       assertFalse(node0.isObjectLit());
977:       assertFalse(node0.isGetProp());
978:       assertFalse(node0.isTypeOf());
979:       assertFalse(node0.isComma());
980:       assertFalse(node0.isDec());
981:       assertEquals(83, node0.getType());
982:       assertFalse(node0.isOr());
983:       assertFalse(node0.isAssign());
984:       assertFalse(node0.isThis());
985:       assertFalse(node0.isReturn());
986:       assertFalse(node0.hasChildren());
987:       assertFalse(node0.isInstanceOf());
988:       assertFalse(node0.hasMoreThanOneChild());
989:       assertEquals((-1), node0.getLineno());
990:       assertFalse(node0.isBreak());
991:       assertFalse(node0.isExprResult());
992:       assertFalse(node0.isGetElem());
993:       assertFalse(node0.isString());
994:       assertFalse(node0.isWhile());
995:       assertFalse(node0.isIn());
996:       assertFalse(node0.isInc());
997:       assertEquals((-1), node0.getSourcePosition());
998:       assertFalse(node0.isThrow());
999:       assertFalse(node0.isCast());
1000:       assertFalse(node0.isAnd());
1001:       assertFalse(node0.isContinue());
1002:       assertFalse(node0.isFalse());
1003:       assertFalse(node0.isRegExp());
1004:       assertFalse(node0.isVoid());
1005:       assertFalse(node0.isFunction());
1006:       assertFalse(node0.isDefaultCase());
1007:       assertFalse(node0.isTrue());
1008:       assertFalse(node0.isDebugger());
1009:       assertFalse(node0.isEmpty());
1010:       assertFalse(node0.isTry());
1011:       assertFalse(node0.isSetterDef());
1012:       assertFalse(node0.isNull());
1013:       assertFalse(node0.isNE());
1014:       assertFalse(node0.isDelProp());
1015:       assertFalse(node0.isIf());
1016:       assertFalse(node0.isFor());
1017:       assertFalse(node0.isCatch());
1018:       assertFalse(node0.isName());
1019:       assertFalse(node0.isCall());
1020:       assertFalse(node0.isSwitch());
1021:       assertFalse(node0.isBlock());
1022:       assertEquals((-1), node0.getCharno());
1023:       assertFalse(node0.isHook());
1024:       assertFalse(node0.isVar());
1025:       assertFalse(node0.isAssignAdd());
1026:       assertFalse(node0.isCase());
1027:       assertFalse(node0.isNew());
1028:       assertFalse(node0.isAdd());
1029:       assertFalse(node0.isDo());
1030:       assertFalse(node0.isGetterDef());
1031:       assertFalse(node0.isNumber());
1032:       assertFalse(node0.isLabel());
1033:       assertFalse(node0.isStringKey());
1034:       assertFalse(node0.isArrayLit());
1035:       assertEquals(0, node0.getChildCount());
1036:       assertFalse(node0.isLabelName());
1037:       
1038:       boolean boolean5 = node1.isWith();
1039:       assertFalse(boolean5);
1040:       assertNotSame(node1, node0);
1041:       assertEquals(55, Node.INFERRED_FUNCTION);
1042:       assertEquals(4095, Node.COLUMN_MASK);
1043:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1044:       assertEquals(48, Node.DIRECTIVES);
1045:       assertEquals(8, Node.FLAG_NO_THROWS);
1046:       assertEquals(39, Node.EMPTY_BLOCK);
1047:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1048:       assertEquals(43, Node.IS_CONSTANT_NAME);
1049:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1050:       assertEquals(50, Node.FREE_CALL);
1051:       assertEquals(36, Node.QUOTED_PROP);
1052:       assertEquals(57, Node.REFLECTED_OBJECT);
1053:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1054:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1055:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1056:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1057:       assertEquals(12, Node.COLUMN_BITS);
1058:       assertEquals(46, Node.IS_NAMESPACE);
1059:       assertEquals(49, Node.DIRECT_EVAL);
1060:       assertEquals(32, Node.INCRDECR_PROP);
1061:       assertEquals(1, Node.DECR_FLAG);
1062:       assertEquals(37, Node.OPT_ARG_NAME);
1063:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1064:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1065:       assertEquals(54, Node.SLASH_V);
1066:       assertEquals(56, Node.CHANGE_TIME);
1067:       assertEquals(52, Node.LENGTH);
1068:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1069:       assertEquals(40, Node.ORIGINALNAME_PROP);
1070:       assertEquals(29, Node.JSDOC_INFO_PROP);
1071:       assertEquals(53, Node.INPUT_ID);
1072:       assertEquals(2, Node.POST_FLAG);
1073:       assertEquals(57, Node.LAST_PROP);
1074:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1075:       assertEquals(30, Node.VAR_ARGS_NAME);
1076:       assertEquals(47, Node.IS_DISPATCHER);
1077:       assertFalse(node1.equals((Object)node2));
1078:       assertFalse(node1.equals((Object)node0));
1079:       assertTrue(boolean5 == boolean3);
1080:       assertTrue(boolean5 == boolean2);
1081:       assertTrue(boolean5 == boolean4);
1082:       assertTrue(boolean5 == boolean1);
1083:       assertTrue(boolean5 == boolean0);
1084:       assertFalse(node1.isParamList());
1085:       assertFalse(node1.isSetterDef());
1086:       assertFalse(node1.isDefaultCase());
1087:       assertFalse(node1.isCatch());
1088:       assertFalse(node1.isRegExp());
1089:       assertFalse(node1.isVar());
1090:       assertFalse(node1.isFunction());
1091:       assertEquals(0, node1.getChildCount());
1092:       assertFalse(node1.isTry());
1093:       assertFalse(node1.isBlock());
1094:       assertFalse(node1.isArrayLit());
1095:       assertFalse(node1.isStringKey());
1096:       assertFalse(node1.isGetterDef());
1097:       assertFalse(node1.isDebugger());
1098:       assertFalse(node1.isLabel());
1099:       assertFalse(node1.isAssignAdd());
1100:       assertFalse(node1.isOr());
1101:       assertFalse(node1.isReturn());
1102:       assertFalse(node1.isDelProp());
1103:       assertFalse(node1.isDo());
1104:       assertFalse(node1.isAssign());
1105:       assertFalse(node1.isGetElem());
1106:       assertEquals(8, node1.getType());
1107:       assertFalse(node1.isWhile());
1108:       assertFalse(node1.isTypeOf());
1109:       assertFalse(node1.hasChildren());
1110:       assertFalse(node1.isDec());
1111:       assertFalse(node1.isAdd());
1112:       assertFalse(node1.isCall());
1113:       assertFalse(node1.isExprResult());
1114:       assertFalse(node1.isVoid());
1115:       assertFalse(node1.isNew());
1116:       assertFalse(node1.isEmpty());
1117:       assertFalse(node1.isName());
1118:       assertFalse(node1.isNull());
1119:       assertFalse(node1.isTrue());
1120:       assertFalse(node1.isInstanceOf());
1121:       assertFalse(node1.isBreak());
1122:       assertFalse(node1.isGetProp());
1123:       assertFalse(node1.isWith());
1124:       assertFalse(node1.isFalse());
1125:       assertFalse(node1.isThrow());
1126:       assertFalse(node1.isHook());
1127:       assertFalse(node1.isThis());
1128:       assertFalse(node1.isComma());
1129:       assertFalse(node1.isScript());
1130:       assertFalse(node1.isCast());
1131:       assertFalse(node1.isSwitch());
1132:       assertFalse(node1.hasOneChild());
1133:       assertFalse(node1.isLabelName());
1134:       assertFalse(node1.isNot());
1135:       assertFalse(node1.isAnd());
1136:       assertFalse(node1.isString());
1137:       assertFalse(node1.isNumber());
1138:       assertEquals((-1), node1.getCharno());
1139:       assertFalse(node1.isObjectLit());
1140:       assertEquals((-1), node1.getSourcePosition());
1141:       assertFalse(node1.isIn());
1142:       assertFalse(node1.isCase());
1143:       assertEquals((-1), node1.getLineno());
1144:       assertFalse(node1.isFor());
1145:       assertFalse(node1.isContinue());
1146:       assertFalse(node1.hasMoreThanOneChild());
1147:       assertFalse(node1.isInc());
1148:       assertFalse(node1.isIf());
1149:       assertFalse(node1.isNE());
1150:       
1151:       node2.removeProp(37);
1152:       assertEquals(55, Node.INFERRED_FUNCTION);
1153:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1154:       assertEquals(36, Node.QUOTED_PROP);
1155:       assertEquals(4095, Node.COLUMN_MASK);
1156:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1157:       assertEquals(43, Node.IS_CONSTANT_NAME);
1158:       assertEquals(48, Node.DIRECTIVES);
1159:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1160:       assertEquals(40, Node.ORIGINALNAME_PROP);
1161:       assertEquals(29, Node.JSDOC_INFO_PROP);
1162:       assertEquals(57, Node.REFLECTED_OBJECT);
1163:       assertEquals(47, Node.IS_DISPATCHER);
1164:       assertEquals(8, Node.FLAG_NO_THROWS);
1165:       assertEquals(2, Node.POST_FLAG);
1166:       assertEquals(53, Node.INPUT_ID);
1167:       assertEquals(52, Node.LENGTH);
1168:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1169:       assertEquals(39, Node.EMPTY_BLOCK);
1170:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1171:       assertEquals(57, Node.LAST_PROP);
1172:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1173:       assertEquals(12, Node.COLUMN_BITS);
1174:       assertEquals(30, Node.VAR_ARGS_NAME);
1175:       assertEquals(46, Node.IS_NAMESPACE);
1176:       assertEquals(54, Node.SLASH_V);
1177:       assertEquals(56, Node.CHANGE_TIME);
1178:       assertEquals(37, Node.OPT_ARG_NAME);
1179:       assertEquals(49, Node.DIRECT_EVAL);
1180:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1181:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1182:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1183:       assertEquals(50, Node.FREE_CALL);
1184:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1185:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1186:       assertEquals(32, Node.INCRDECR_PROP);
1187:       assertEquals(1, Node.DECR_FLAG);
1188:       assertFalse(node2.equals((Object)node0));
1189:       assertFalse(node2.equals((Object)node1));
1190:       assertFalse(node2.isInstanceOf());
1191:       assertFalse(node2.isComma());
1192:       assertFalse(node2.isWith());
1193:       assertFalse(node2.isNot());
1194:       assertFalse(node2.isObjectLit());
1195:       assertFalse(node2.isThis());
1196:       assertFalse(node2.isScript());
1197:       assertFalse(node2.isGetProp());
1198:       assertFalse(node2.isHook());
1199:       assertFalse(node2.isAssign());
1200:       assertFalse(node2.isTypeOf());
1201:       assertFalse(node2.isBreak());
1202:       assertFalse(node2.isExprResult());
1203:       assertFalse(node2.isGetElem());
1204:       assertEquals((-1), node2.getLineno());
1205:       assertFalse(node2.isIn());
1206:       assertFalse(node2.isReturn());
1207:       assertFalse(node2.isContinue());
1208:       assertFalse(node2.isDec());
1209:       assertFalse(node2.hasChildren());
1210:       assertFalse(node2.isInc());
1211:       assertFalse(node2.isWhile());
1212:       assertFalse(node2.isCast());
1213:       assertFalse(node2.isThrow());
1214:       assertFalse(node2.isFalse());
1215:       assertFalse(node2.isDebugger());
1216:       assertFalse(node2.isFunction());
1217:       assertEquals((-1), node2.getSourcePosition());
1218:       assertFalse(node2.isAnd());
1219:       assertFalse(node2.isCatch());
1220:       assertEquals(40, node2.getType());
1221:       assertEquals(0, node2.getChildCount());
1222:       assertFalse(node2.isDefaultCase());
1223:       assertFalse(node2.isSetterDef());
1224:       assertFalse(node2.isTry());
1225:       assertFalse(node2.isCall());
1226:       assertFalse(node2.isAdd());
1227:       assertFalse(node2.isBlock());
1228:       assertFalse(node2.isRegExp());
1229:       assertFalse(node2.isNull());
1230:       assertFalse(node2.isIf());
1231:       assertFalse(node2.isTrue());
1232:       assertFalse(node2.isNE());
1233:       assertFalse(node2.isName());
1234:       assertFalse(node2.isVoid());
1235:       assertFalse(node2.isDelProp());
1236:       assertFalse(node2.isLabel());
1237:       assertFalse(node2.hasMoreThanOneChild());
1238:       assertFalse(node2.isOr());
1239:       assertFalse(node2.isNumber());
1240:       assertFalse(node2.isEmpty());
1241:       assertFalse(node2.isFor());
1242:       assertFalse(node2.isCase());
1243:       assertTrue(node2.isString());
1244:       assertFalse(node2.isNew());
1245:       assertFalse(node2.isAssignAdd());
1246:       assertFalse(node2.isDo());
1247:       assertFalse(node2.hasOneChild());
1248:       assertFalse(node2.isArrayLit());
1249:       assertFalse(node2.isVar());
1250:       assertEquals((-1), node2.getCharno());
1251:       assertFalse(node2.isGetterDef());
1252:       assertFalse(node2.isSwitch());
1253:       assertFalse(node2.isParamList());
1254:       assertFalse(node2.isStringKey());
1255:       assertFalse(node2.isLabelName());
1256:       
1257:       String string0 = node1.getSourceFileName();
1258:       assertNotSame(node1, node0);
1259:       assertEquals(55, Node.INFERRED_FUNCTION);
1260:       assertEquals(4095, Node.COLUMN_MASK);
1261:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1262:       assertEquals(48, Node.DIRECTIVES);
1263:       assertEquals(8, Node.FLAG_NO_THROWS);
1264:       assertEquals(39, Node.EMPTY_BLOCK);
1265:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1266:       assertEquals(43, Node.IS_CONSTANT_NAME);
1267:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1268:       assertEquals(50, Node.FREE_CALL);
1269:       assertEquals(36, Node.QUOTED_PROP);
1270:       assertEquals(57, Node.REFLECTED_OBJECT);
1271:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1272:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1273:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1274:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1275:       assertEquals(12, Node.COLUMN_BITS);
1276:       assertEquals(46, Node.IS_NAMESPACE);
1277:       assertEquals(49, Node.DIRECT_EVAL);
1278:       assertEquals(32, Node.INCRDECR_PROP);
1279:       assertEquals(1, Node.DECR_FLAG);
1280:       assertEquals(37, Node.OPT_ARG_NAME);
1281:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1282:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1283:       assertEquals(54, Node.SLASH_V);
1284:       assertEquals(56, Node.CHANGE_TIME);
1285:       assertEquals(52, Node.LENGTH);
1286:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1287:       assertEquals(40, Node.ORIGINALNAME_PROP);
1288:       assertEquals(29, Node.JSDOC_INFO_PROP);
1289:       assertEquals(53, Node.INPUT_ID);
1290:       assertEquals(2, Node.POST_FLAG);
1291:       assertEquals(57, Node.LAST_PROP);
1292:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1293:       assertEquals(30, Node.VAR_ARGS_NAME);
1294:       assertEquals(47, Node.IS_DISPATCHER);
1295:       assertNull(string0);
1296:       assertFalse(node1.equals((Object)node2));
1297:       assertFalse(node1.equals((Object)node0));
1298:       assertFalse(node1.isParamList());
1299:       assertFalse(node1.isSetterDef());
1300:       assertFalse(node1.isDefaultCase());
1301:       assertFalse(node1.isCatch());
1302:       assertFalse(node1.isRegExp());
1303:       assertFalse(node1.isVar());
1304:       assertFalse(node1.isFunction());
1305:       assertEquals(0, node1.getChildCount());
1306:       assertFalse(node1.isTry());
1307:       assertFalse(node1.isBlock());
1308:       assertFalse(node1.isArrayLit());
1309:       assertFalse(node1.isStringKey());
1310:       assertFalse(node1.isGetterDef());
1311:       assertFalse(node1.isDebugger());
1312:       assertFalse(node1.isLabel());
1313:       assertFalse(node1.isAssignAdd());
1314:       assertFalse(node1.isOr());
1315:       assertFalse(node1.isReturn());
1316:       assertFalse(node1.isDelProp());
1317:       assertFalse(node1.isDo());
1318:       assertFalse(node1.isAssign());
1319:       assertFalse(node1.isGetElem());
1320:       assertEquals(8, node1.getType());
1321:       assertFalse(node1.isWhile());
1322:       assertFalse(node1.isTypeOf());
1323:       assertFalse(node1.hasChildren());
1324:       assertFalse(node1.isDec());
1325:       assertFalse(node1.isAdd());
1326:       assertFalse(node1.isCall());
1327:       assertFalse(node1.isExprResult());
1328:       assertFalse(node1.isVoid());
1329:       assertFalse(node1.isNew());
1330:       assertFalse(node1.isEmpty());
1331:       assertFalse(node1.isName());
1332:       assertFalse(node1.isNull());
1333:       assertFalse(node1.isTrue());
1334:       assertFalse(node1.isInstanceOf());
1335:       assertFalse(node1.isBreak());
1336:       assertFalse(node1.isGetProp());
1337:       assertFalse(node1.isWith());
1338:       assertFalse(node1.isFalse());
1339:       assertFalse(node1.isThrow());
1340:       assertFalse(node1.isHook());
1341:       assertFalse(node1.isThis());
1342:       assertFalse(node1.isComma());
1343:       assertFalse(node1.isScript());
1344:       assertFalse(node1.isCast());
1345:       assertFalse(node1.isSwitch());
1346:       assertFalse(node1.hasOneChild());
1347:       assertFalse(node1.isLabelName());
1348:       assertFalse(node1.isNot());
1349:       assertFalse(node1.isAnd());
1350:       assertFalse(node1.isString());
1351:       assertFalse(node1.isNumber());
1352:       assertEquals((-1), node1.getCharno());
1353:       assertFalse(node1.isObjectLit());
1354:       assertEquals((-1), node1.getSourcePosition());
1355:       assertFalse(node1.isIn());
1356:       assertFalse(node1.isCase());
1357:       assertEquals((-1), node1.getLineno());
1358:       assertFalse(node1.isFor());
1359:       assertFalse(node1.isContinue());
1360:       assertFalse(node1.hasMoreThanOneChild());
1361:       assertFalse(node1.isInc());
1362:       assertFalse(node1.isIf());
1363:       assertFalse(node1.isNE());
1364:       
1365:       boolean boolean6 = node1.isFor();
1366:       assertFalse(boolean6);
1367:       assertNotSame(node1, node0);
1368:       assertEquals(55, Node.INFERRED_FUNCTION);
1369:       assertEquals(4095, Node.COLUMN_MASK);
1370:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1371:       assertEquals(48, Node.DIRECTIVES);
1372:       assertEquals(8, Node.FLAG_NO_THROWS);
1373:       assertEquals(39, Node.EMPTY_BLOCK);
1374:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1375:       assertEquals(43, Node.IS_CONSTANT_NAME);
1376:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1377:       assertEquals(50, Node.FREE_CALL);
1378:       assertEquals(36, Node.QUOTED_PROP);
1379:       assertEquals(57, Node.REFLECTED_OBJECT);
1380:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1381:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1382:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1383:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1384:       assertEquals(12, Node.COLUMN_BITS);
1385:       assertEquals(46, Node.IS_NAMESPACE);
1386:       assertEquals(49, Node.DIRECT_EVAL);
1387:       assertEquals(32, Node.INCRDECR_PROP);
1388:       assertEquals(1, Node.DECR_FLAG);
1389:       assertEquals(37, Node.OPT_ARG_NAME);
1390:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1391:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1392:       assertEquals(54, Node.SLASH_V);
1393:       assertEquals(56, Node.CHANGE_TIME);
1394:       assertEquals(52, Node.LENGTH);
1395:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1396:       assertEquals(40, Node.ORIGINALNAME_PROP);
1397:       assertEquals(29, Node.JSDOC_INFO_PROP);
1398:       assertEquals(53, Node.INPUT_ID);
1399:       assertEquals(2, Node.POST_FLAG);
1400:       assertEquals(57, Node.LAST_PROP);
1401:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1402:       assertEquals(30, Node.VAR_ARGS_NAME);
1403:       assertEquals(47, Node.IS_DISPATCHER);
1404:       assertTrue(boolean6 == boolean5);
1405:       assertTrue(boolean6 == boolean4);
1406:       assertTrue(boolean6 == boolean0);
1407:       assertTrue(boolean6 == boolean1);
1408:       assertTrue(boolean6 == boolean3);
1409:       assertTrue(boolean6 == boolean2);
1410:       assertFalse(node1.equals((Object)node2));
1411:       assertFalse(node1.equals((Object)node0));
1412:       assertFalse(node1.isParamList());
1413:       assertFalse(node1.isSetterDef());
1414:       assertFalse(node1.isDefaultCase());
1415:       assertFalse(node1.isCatch());
1416:       assertFalse(node1.isRegExp());
1417:       assertFalse(node1.isVar());
1418:       assertFalse(node1.isFunction());
1419:       assertEquals(0, node1.getChildCount());
1420:       assertFalse(node1.isTry());
1421:       assertFalse(node1.isBlock());
1422:       assertFalse(node1.isArrayLit());
1423:       assertFalse(node1.isStringKey());
1424:       assertFalse(node1.isGetterDef());
1425:       assertFalse(node1.isDebugger());
1426:       assertFalse(node1.isLabel());
1427:       assertFalse(node1.isAssignAdd());
1428:       assertFalse(node1.isOr());
1429:       assertFalse(node1.isReturn());
1430:       assertFalse(node1.isDelProp());
1431:       assertFalse(node1.isDo());
1432:       assertFalse(node1.isAssign());
1433:       assertFalse(node1.isGetElem());
1434:       assertEquals(8, node1.getType());
1435:       assertFalse(node1.isWhile());
1436:       assertFalse(node1.isTypeOf());
1437:       assertFalse(node1.hasChildren());
1438:       assertFalse(node1.isDec());
1439:       assertFalse(node1.isAdd());
1440:       assertFalse(node1.isCall());
1441:       assertFalse(node1.isExprResult());
1442:       assertFalse(node1.isVoid());
1443:       assertFalse(node1.isNew());
1444:       assertFalse(node1.isEmpty());
1445:       assertFalse(node1.isName());
1446:       assertFalse(node1.isNull());
1447:       assertFalse(node1.isTrue());
1448:       assertFalse(node1.isInstanceOf());
1449:       assertFalse(node1.isBreak());
1450:       assertFalse(node1.isGetProp());
1451:       assertFalse(node1.isWith());
1452:       assertFalse(node1.isFalse());
1453:       assertFalse(node1.isThrow());
1454:       assertFalse(node1.isHook());
1455:       assertFalse(node1.isThis());
1456:       assertFalse(node1.isComma());
1457:       assertFalse(node1.isScript());
1458:       assertFalse(node1.isCast());
1459:       assertFalse(node1.isSwitch());
1460:       assertFalse(node1.hasOneChild());
1461:       assertFalse(node1.isLabelName());
1462:       assertFalse(node1.isNot());
1463:       assertFalse(node1.isAnd());
1464:       assertFalse(node1.isString());
1465:       assertFalse(node1.isNumber());
1466:       assertEquals((-1), node1.getCharno());
1467:       assertFalse(node1.isObjectLit());
1468:       assertEquals((-1), node1.getSourcePosition());
1469:       assertFalse(node1.isIn());
1470:       assertFalse(node1.isCase());
1471:       assertEquals((-1), node1.getLineno());
1472:       assertFalse(node1.isFor());
1473:       assertFalse(node1.isContinue());
1474:       assertFalse(node1.hasMoreThanOneChild());
1475:       assertFalse(node1.isInc());
1476:       assertFalse(node1.isIf());
1477:       assertFalse(node1.isNE());
1478:       
1479:       String string1 = node0.getSourceFileName();
1480:       assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
1481:       assertNotSame(node0, node1);
1482:       assertEquals(53, Node.INPUT_ID);
1483:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1484:       assertEquals(36, Node.QUOTED_PROP);
1485:       assertEquals(43, Node.IS_CONSTANT_NAME);
1486:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1487:       assertEquals(4095, Node.COLUMN_MASK);
1488:       assertEquals(37, Node.OPT_ARG_NAME);
1489:       assertEquals(48, Node.DIRECTIVES);
1490:       assertEquals(8, Node.FLAG_NO_THROWS);
1491:       assertEquals(2, Node.POST_FLAG);
1492:       assertEquals(56, Node.CHANGE_TIME);
1493:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1494:       assertEquals(47, Node.IS_DISPATCHER);
1495:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1496:       assertEquals(29, Node.JSDOC_INFO_PROP);
1497:       assertEquals(57, Node.LAST_PROP);
1498:       assertEquals(55, Node.INFERRED_FUNCTION);
1499:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1500:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1501:       assertEquals(39, Node.EMPTY_BLOCK);
1502:       assertEquals(52, Node.LENGTH);
1503:       assertEquals(54, Node.SLASH_V);
1504:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1505:       assertEquals(57, Node.REFLECTED_OBJECT);
1506:       assertEquals(49, Node.DIRECT_EVAL);
1507:       assertEquals(30, Node.VAR_ARGS_NAME);
1508:       assertEquals(40, Node.ORIGINALNAME_PROP);
1509:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1510:       assertEquals(32, Node.INCRDECR_PROP);
1511:       assertEquals(12, Node.COLUMN_BITS);
1512:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1513:       assertEquals(46, Node.IS_NAMESPACE);
1514:       assertEquals(50, Node.FREE_CALL);
1515:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1516:       assertEquals(1, Node.DECR_FLAG);
1517:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1518:       assertNull(string1);
1519:       assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
1520:       assertFalse(node0.equals((Object)node1));
1521:       assertFalse(node0.equals((Object)node2));
1522:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1523:       assertEquals(0, arrayList0.size());
1524:       assertTrue(arrayList0.isEmpty());
1525:       assertFalse(node0.isScript());
1526:       assertFalse(node0.isWith());
1527:       assertFalse(node0.isNot());
1528:       assertTrue(node0.isParamList());
1529:       assertFalse(node0.hasOneChild());
1530:       assertFalse(node0.isObjectLit());
1531:       assertFalse(node0.isGetProp());
1532:       assertFalse(node0.isTypeOf());
1533:       assertFalse(node0.isComma());
1534:       assertFalse(node0.isDec());
1535:       assertEquals(83, node0.getType());
1536:       assertFalse(node0.isOr());
1537:       assertFalse(node0.isAssign());
1538:       assertFalse(node0.isThis());
1539:       assertFalse(node0.isReturn());
1540:       assertFalse(node0.hasChildren());
1541:       assertFalse(node0.isInstanceOf());
1542:       assertFalse(node0.hasMoreThanOneChild());
1543:       assertEquals((-1), node0.getLineno());
1544:       assertFalse(node0.isBreak());
1545:       assertFalse(node0.isExprResult());
1546:       assertFalse(node0.isGetElem());
1547:       assertFalse(node0.isString());
1548:       assertFalse(node0.isWhile());
1549:       assertFalse(node0.isIn());
1550:       assertFalse(node0.isInc());
1551:       assertEquals((-1), node0.getSourcePosition());
1552:       assertFalse(node0.isThrow());
1553:       assertFalse(node0.isCast());
1554:       assertFalse(node0.isAnd());
1555:       assertFalse(node0.isContinue());
1556:       assertFalse(node0.isFalse());
1557:       assertFalse(node0.isRegExp());
1558:       assertFalse(node0.isVoid());
1559:       assertFalse(node0.isFunction());
1560:       assertFalse(node0.isDefaultCase());
1561:       assertFalse(node0.isTrue());
1562:       assertFalse(node0.isDebugger());
1563:       assertFalse(node0.isEmpty());
1564:       assertFalse(node0.isTry());
1565:       assertFalse(node0.isSetterDef());
1566:       assertFalse(node0.isNull());
1567:       assertFalse(node0.isNE());
1568:       assertFalse(node0.isDelProp());
1569:       assertFalse(node0.isIf());
1570:       assertFalse(node0.isFor());
1571:       assertFalse(node0.isCatch());
1572:       assertFalse(node0.isName());
1573:       assertFalse(node0.isCall());
1574:       assertFalse(node0.isSwitch());
1575:       assertFalse(node0.isBlock());
1576:       assertEquals((-1), node0.getCharno());
1577:       assertFalse(node0.isHook());
1578:       assertFalse(node0.isVar());
1579:       assertFalse(node0.isAssignAdd());
1580:       assertFalse(node0.isCase());
1581:       assertFalse(node0.isNew());
1582:       assertFalse(node0.isAdd());
1583:       assertFalse(node0.isDo());
1584:       assertFalse(node0.isGetterDef());
1585:       assertFalse(node0.isNumber());
1586:       assertFalse(node0.isLabel());
1587:       assertFalse(node0.isStringKey());
1588:       assertFalse(node0.isArrayLit());
1589:       assertEquals(0, node0.getChildCount());
1590:       assertFalse(node0.isLabelName());
1591:       
1592:       Node node3 = node2.useSourceInfoIfMissingFromForTree(node0);
1593:       assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
1594:       assertSame(node3, node2);
1595:       assertNotSame(node0, node1);
1596:       assertSame(node2, node3);
1597:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1598:       assertEquals(4095, Node.COLUMN_MASK);
1599:       assertEquals(55, Node.INFERRED_FUNCTION);
1600:       assertEquals(36, Node.QUOTED_PROP);
1601:       assertEquals(8, Node.FLAG_NO_THROWS);
1602:       assertEquals(39, Node.EMPTY_BLOCK);
1603:       assertEquals(53, Node.INPUT_ID);
1604:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1605:       assertEquals(40, Node.ORIGINALNAME_PROP);
1606:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1607:       assertEquals(47, Node.IS_DISPATCHER);
1608:       assertEquals(50, Node.FREE_CALL);
1609:       assertEquals(2, Node.POST_FLAG);
1610:       assertEquals(54, Node.SLASH_V);
1611:       assertEquals(43, Node.IS_CONSTANT_NAME);
1612:       assertEquals(12, Node.COLUMN_BITS);
1613:       assertEquals(46, Node.IS_NAMESPACE);
1614:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1615:       assertEquals(30, Node.VAR_ARGS_NAME);
1616:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1617:       assertEquals(32, Node.INCRDECR_PROP);
1618:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1619:       assertEquals(57, Node.LAST_PROP);
1620:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1621:       assertEquals(1, Node.DECR_FLAG);
1622:       assertEquals(29, Node.JSDOC_INFO_PROP);
1623:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1624:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1625:       assertEquals(52, Node.LENGTH);
1626:       assertEquals(57, Node.REFLECTED_OBJECT);
1627:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1628:       assertEquals(37, Node.OPT_ARG_NAME);
1629:       assertEquals(56, Node.CHANGE_TIME);
1630:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1631:       assertEquals(49, Node.DIRECT_EVAL);
1632:       assertEquals(48, Node.DIRECTIVES);
1633:       assertEquals(53, Node.INPUT_ID);
1634:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1635:       assertEquals(36, Node.QUOTED_PROP);
1636:       assertEquals(43, Node.IS_CONSTANT_NAME);
1637:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1638:       assertEquals(4095, Node.COLUMN_MASK);
1639:       assertEquals(37, Node.OPT_ARG_NAME);
1640:       assertEquals(48, Node.DIRECTIVES);
1641:       assertEquals(8, Node.FLAG_NO_THROWS);
1642:       assertEquals(2, Node.POST_FLAG);
1643:       assertEquals(56, Node.CHANGE_TIME);
1644:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1645:       assertEquals(47, Node.IS_DISPATCHER);
1646:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1647:       assertEquals(29, Node.JSDOC_INFO_PROP);
1648:       assertEquals(57, Node.LAST_PROP);
1649:       assertEquals(55, Node.INFERRED_FUNCTION);
1650:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1651:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1652:       assertEquals(39, Node.EMPTY_BLOCK);
1653:       assertEquals(52, Node.LENGTH);
1654:       assertEquals(54, Node.SLASH_V);
1655:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1656:       assertEquals(57, Node.REFLECTED_OBJECT);
1657:       assertEquals(49, Node.DIRECT_EVAL);
1658:       assertEquals(30, Node.VAR_ARGS_NAME);
1659:       assertEquals(40, Node.ORIGINALNAME_PROP);
1660:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1661:       assertEquals(32, Node.INCRDECR_PROP);
1662:       assertEquals(12, Node.COLUMN_BITS);
1663:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1664:       assertEquals(46, Node.IS_NAMESPACE);
1665:       assertEquals(50, Node.FREE_CALL);
1666:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1667:       assertEquals(1, Node.DECR_FLAG);
1668:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1669:       assertEquals(55, Node.INFERRED_FUNCTION);
1670:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1671:       assertEquals(36, Node.QUOTED_PROP);
1672:       assertEquals(4095, Node.COLUMN_MASK);
1673:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1674:       assertEquals(43, Node.IS_CONSTANT_NAME);
1675:       assertEquals(48, Node.DIRECTIVES);
1676:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1677:       assertEquals(40, Node.ORIGINALNAME_PROP);
1678:       assertEquals(29, Node.JSDOC_INFO_PROP);
1679:       assertEquals(57, Node.REFLECTED_OBJECT);
1680:       assertEquals(47, Node.IS_DISPATCHER);
1681:       assertEquals(8, Node.FLAG_NO_THROWS);
1682:       assertEquals(2, Node.POST_FLAG);
1683:       assertEquals(53, Node.INPUT_ID);
1684:       assertEquals(52, Node.LENGTH);
1685:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1686:       assertEquals(39, Node.EMPTY_BLOCK);
1687:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1688:       assertEquals(57, Node.LAST_PROP);
1689:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1690:       assertEquals(12, Node.COLUMN_BITS);
1691:       assertEquals(30, Node.VAR_ARGS_NAME);
1692:       assertEquals(46, Node.IS_NAMESPACE);
1693:       assertEquals(54, Node.SLASH_V);
1694:       assertEquals(56, Node.CHANGE_TIME);
1695:       assertEquals(37, Node.OPT_ARG_NAME);
1696:       assertEquals(49, Node.DIRECT_EVAL);
1697:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1698:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1699:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1700:       assertEquals(50, Node.FREE_CALL);
1701:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1702:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1703:       assertEquals(32, Node.INCRDECR_PROP);
1704:       assertEquals(1, Node.DECR_FLAG);
1705:       assertNotNull(node3);
1706:       assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
1707:       assertFalse(node3.equals((Object)node0));
1708:       assertFalse(node3.equals((Object)node1));
1709:       assertFalse(node0.equals((Object)node1));
1710:       assertFalse(node0.equals((Object)node2));
1711:       assertFalse(node2.equals((Object)node0));
1712:       assertFalse(node2.equals((Object)node1));
1713:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1714:       assertFalse(node3.isInstanceOf());
1715:       assertFalse(node3.isThis());
1716:       assertFalse(node3.isObjectLit());
1717:       assertFalse(node3.isComma());
1718:       assertFalse(node3.isNot());
1719:       assertFalse(node3.isBreak());
1720:       assertFalse(node3.isWith());
1721:       assertFalse(node3.isExprResult());
1722:       assertFalse(node3.isAnd());
1723:       assertFalse(node3.isCast());
1724:       assertFalse(node3.isFalse());
1725:       assertFalse(node3.isThrow());
1726:       assertFalse(node3.isInc());
1727:       assertEquals((-1), node3.getLineno());
1728:       assertFalse(node3.isIn());
1729:       assertFalse(node3.isLabel());
1730:       assertFalse(node3.isAssignAdd());
1731:       assertFalse(node3.hasMoreThanOneChild());
1732:       assertFalse(node3.isIf());
1733:       assertFalse(node3.isNE());
1734:       assertFalse(node3.isSwitch());
1735:       assertFalse(node3.isArrayLit());
1736:       assertFalse(node3.isLabelName());
1737:       assertFalse(node3.isHook());
1738:       assertFalse(node3.isBlock());
1739:       assertEquals((-1), node3.getCharno());
1740:       assertFalse(node3.isRegExp());
1741:       assertFalse(node3.isGetterDef());
1742:       assertFalse(node3.isNumber());
1743:       assertFalse(node3.isFor());
1744:       assertFalse(node3.isScript());
1745:       assertFalse(node3.isCase());
1746:       assertTrue(node3.isString());
1747:       assertFalse(node3.isTry());
1748:       assertFalse(node3.hasOneChild());
1749:       assertFalse(node3.isCatch());
1750:       assertEquals(0, node3.getChildCount());
1751:       assertFalse(node3.isNull());
1752:       assertFalse(node3.isStringKey());
1753:       assertFalse(node3.isParamList());
1754:       assertFalse(node3.isCall());
1755:       assertFalse(node3.isName());
1756:       assertFalse(node3.isVoid());
1757:       assertFalse(node3.isAdd());
1758:       assertFalse(node3.isVar());
1759:       assertFalse(node3.isTrue());
1760:       assertFalse(node3.isFunction());
1761:       assertFalse(node3.isDefaultCase());
1762:       assertEquals(40, node3.getType());
1763:       assertFalse(node3.isEmpty());
1764:       assertFalse(node3.isSetterDef());
1765:       assertFalse(node3.isNew());
1766:       assertFalse(node3.isDo());
1767:       assertFalse(node3.isReturn());
1768:       assertFalse(node3.isContinue());
1769:       assertFalse(node3.isTypeOf());
1770:       assertEquals((-1), node3.getSourcePosition());
1771:       assertFalse(node3.isOr());
1772:       assertFalse(node3.isDec());
1773:       assertFalse(node3.isDelProp());
1774:       assertFalse(node3.isGetElem());
1775:       assertFalse(node3.isDebugger());
1776:       assertFalse(node3.isAssign());
1777:       assertFalse(node3.isWhile());
1778:       assertFalse(node3.hasChildren());
1779:       assertFalse(node3.isGetProp());
1780:       assertEquals(0, arrayList0.size());
1781:       assertTrue(arrayList0.isEmpty());
1782:       assertFalse(node0.isScript());
1783:       assertFalse(node0.isWith());
1784:       assertFalse(node0.isNot());
1785:       assertTrue(node0.isParamList());
1786:       assertFalse(node0.hasOneChild());
1787:       assertFalse(node0.isObjectLit());
1788:       assertFalse(node0.isGetProp());
1789:       assertFalse(node0.isTypeOf());
1790:       assertFalse(node0.isComma());
1791:       assertFalse(node0.isDec());
1792:       assertEquals(83, node0.getType());
1793:       assertFalse(node0.isOr());
1794:       assertFalse(node0.isAssign());
1795:       assertFalse(node0.isThis());
1796:       assertFalse(node0.isReturn());
1797:       assertFalse(node0.hasChildren());
1798:       assertFalse(node0.isInstanceOf());
1799:       assertFalse(node0.hasMoreThanOneChild());
1800:       assertEquals((-1), node0.getLineno());
1801:       assertFalse(node0.isBreak());
1802:       assertFalse(node0.isExprResult());
1803:       assertFalse(node0.isGetElem());
1804:       assertFalse(node0.isString());
1805:       assertFalse(node0.isWhile());
1806:       assertFalse(node0.isIn());
1807:       assertFalse(node0.isInc());
1808:       assertEquals((-1), node0.getSourcePosition());
1809:       assertFalse(node0.isThrow());
1810:       assertFalse(node0.isCast());
1811:       assertFalse(node0.isAnd());
1812:       assertFalse(node0.isContinue());
1813:       assertFalse(node0.isFalse());
1814:       assertFalse(node0.isRegExp());
1815:       assertFalse(node0.isVoid());
1816:       assertFalse(node0.isFunction());
1817:       assertFalse(node0.isDefaultCase());
1818:       assertFalse(node0.isTrue());
1819:       assertFalse(node0.isDebugger());
1820:       assertFalse(node0.isEmpty());
1821:       assertFalse(node0.isTry());
1822:       assertFalse(node0.isSetterDef());
1823:       assertFalse(node0.isNull());
1824:       assertFalse(node0.isNE());
1825:       assertFalse(node0.isDelProp());
1826:       assertFalse(node0.isIf());
1827:       assertFalse(node0.isFor());
1828:       assertFalse(node0.isCatch());
1829:       assertFalse(node0.isName());
1830:       assertFalse(node0.isCall());
1831:       assertFalse(node0.isSwitch());
1832:       assertFalse(node0.isBlock());
1833:       assertEquals((-1), node0.getCharno());
1834:       assertFalse(node0.isHook());
1835:       assertFalse(node0.isVar());
1836:       assertFalse(node0.isAssignAdd());
1837:       assertFalse(node0.isCase());
1838:       assertFalse(node0.isNew());
1839:       assertFalse(node0.isAdd());
1840:       assertFalse(node0.isDo());
1841:       assertFalse(node0.isGetterDef());
1842:       assertFalse(node0.isNumber());
1843:       assertFalse(node0.isLabel());
1844:       assertFalse(node0.isStringKey());
1845:       assertFalse(node0.isArrayLit());
1846:       assertEquals(0, node0.getChildCount());
1847:       assertFalse(node0.isLabelName());
1848:       assertFalse(node2.isInstanceOf());
1849:       assertFalse(node2.isComma());
1850:       assertFalse(node2.isWith());
1851:       assertFalse(node2.isNot());
1852:       assertFalse(node2.isObjectLit());
1853:       assertFalse(node2.isThis());
1854:       assertFalse(node2.isScript());
1855:       assertFalse(node2.isGetProp());
1856:       assertFalse(node2.isHook());
1857:       assertFalse(node2.isAssign());
1858:       assertFalse(node2.isTypeOf());
1859:       assertFalse(node2.isBreak());
1860:       assertFalse(node2.isExprResult());
1861:       assertFalse(node2.isGetElem());
1862:       assertEquals((-1), node2.getLineno());
1863:       assertFalse(node2.isIn());
1864:       assertFalse(node2.isReturn());
1865:       assertFalse(node2.isContinue());
1866:       assertFalse(node2.isDec());
1867:       assertFalse(node2.hasChildren());
1868:       assertFalse(node2.isInc());
1869:       assertFalse(node2.isWhile());
1870:       assertFalse(node2.isCast());
1871:       assertFalse(node2.isThrow());
1872:       assertFalse(node2.isFalse());
1873:       assertFalse(node2.isDebugger());
1874:       assertFalse(node2.isFunction());
1875:       assertEquals((-1), node2.getSourcePosition());
1876:       assertFalse(node2.isAnd());
1877:       assertFalse(node2.isCatch());
1878:       assertEquals(40, node2.getType());
1879:       assertEquals(0, node2.getChildCount());
1880:       assertFalse(node2.isDefaultCase());
1881:       assertFalse(node2.isSetterDef());
1882:       assertFalse(node2.isTry());
1883:       assertFalse(node2.isCall());
1884:       assertFalse(node2.isAdd());
1885:       assertFalse(node2.isBlock());
1886:       assertFalse(node2.isRegExp());
1887:       assertFalse(node2.isNull());
1888:       assertFalse(node2.isIf());
1889:       assertFalse(node2.isTrue());
1890:       assertFalse(node2.isNE());
1891:       assertFalse(node2.isName());
1892:       assertFalse(node2.isVoid());
1893:       assertFalse(node2.isDelProp());
1894:       assertFalse(node2.isLabel());
1895:       assertFalse(node2.hasMoreThanOneChild());
1896:       assertFalse(node2.isOr());
1897:       assertFalse(node2.isNumber());
1898:       assertFalse(node2.isEmpty());
1899:       assertFalse(node2.isFor());
1900:       assertFalse(node2.isCase());
1901:       assertTrue(node2.isString());
1902:       assertFalse(node2.isNew());
1903:       assertFalse(node2.isAssignAdd());
1904:       assertFalse(node2.isDo());
1905:       assertFalse(node2.hasOneChild());
1906:       assertFalse(node2.isArrayLit());
1907:       assertFalse(node2.isVar());
1908:       assertEquals((-1), node2.getCharno());
1909:       assertFalse(node2.isGetterDef());
1910:       assertFalse(node2.isSwitch());
1911:       assertFalse(node2.isParamList());
1912:       assertFalse(node2.isStringKey());
1913:       assertFalse(node2.isLabelName());
1914:   }
1915: }
RegularFileObject[/tmp/EvoSuite_203_1628157545281/com/google/javascript/rhino/Node_203_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:05 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_203_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_203_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_203_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.JSTypeNative",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.JSType$TypePair",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.JSType$2",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
375:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
377:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
378:     );
379:   }
380: }

[MASTER] 09:59:05.609 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
assertNotNull(jSTypeRegistry0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());

ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
assertNotNull(arrayList0);
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());

Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(node0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());

boolean boolean0 = node0.isDefaultCase();
assertFalse(boolean0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());

JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
assertNotNull(jSTypeRegistry1);
assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());

Node node1 = new Node(8);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isDo());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertEquals(8, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isNE());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node1));
assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
assertNotSame(node0, node1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(iterable0);
assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
assertFalse(node0.equals((Object)node1));
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());

boolean boolean1 = node0.isGetProp();
assertFalse(boolean1);
assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
assertNotSame(node0, node1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());

boolean boolean2 = node1.isParamList();
assertFalse(boolean2);
assertNotSame(node1, node0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isDo());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertEquals(8, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isNE());

boolean boolean3 = node0.isSetterDef();
assertFalse(boolean3);
assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
assertNotSame(node0, node1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());

Node node2 = Node.newString("dq5c_Nx-9/^@ac2wG");
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isInc());
assertFalse(node2.isWhile());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isCall());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertFalse(node2.isIf());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertTrue(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());

boolean boolean4 = node0.isUnscopedQualifiedName();
assertFalse(boolean4);
assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
assertNotSame(node0, node1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());

boolean boolean5 = node1.isWith();
assertFalse(boolean5);
assertNotSame(node1, node0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean0);
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isDo());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertEquals(8, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isNE());

node2.removeProp(37);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isInc());
assertFalse(node2.isWhile());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isCall());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertFalse(node2.isIf());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertTrue(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());

String string0 = node1.getSourceFileName();
assertNotSame(node1, node0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertNull(string0);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isDo());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertEquals(8, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isNE());

boolean boolean6 = node1.isFor();
assertFalse(boolean6);
assertNotSame(node1, node0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean2);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isDo());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertEquals(8, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFor());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isNE());

String string1 = node0.getSourceFileName();
assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
assertNotSame(node0, node1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNull(string1);
assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());

Node node3 = node2.useSourceInfoIfMissingFromForTree(node0);
assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
assertSame(node3, node2);
assertNotSame(node0, node1);
assertSame(node2, node3);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node3);
assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isThis());
assertFalse(node3.isObjectLit());
assertFalse(node3.isComma());
assertFalse(node3.isNot());
assertFalse(node3.isBreak());
assertFalse(node3.isWith());
assertFalse(node3.isExprResult());
assertFalse(node3.isAnd());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isInc());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIn());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isSwitch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabelName());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isRegExp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isFor());
assertFalse(node3.isScript());
assertFalse(node3.isCase());
assertTrue(node3.isString());
assertFalse(node3.isTry());
assertFalse(node3.hasOneChild());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isNull());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isVoid());
assertFalse(node3.isAdd());
assertFalse(node3.isVar());
assertFalse(node3.isTrue());
assertFalse(node3.isFunction());
assertFalse(node3.isDefaultCase());
assertEquals(40, node3.getType());
assertFalse(node3.isEmpty());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertFalse(node3.isReturn());
assertFalse(node3.isContinue());
assertFalse(node3.isTypeOf());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isOr());
assertFalse(node3.isDec());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetElem());
assertFalse(node3.isDebugger());
assertFalse(node3.isAssign());
assertFalse(node3.isWhile());
assertFalse(node3.hasChildren());
assertFalse(node3.isGetProp());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isInc());
assertFalse(node2.isWhile());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isCall());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isNull());
assertFalse(node2.isIf());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertTrue(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());


[MASTER] 09:59:06.466 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_206_1628157546054/com/google/javascript/rhino/Node_206_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_206_1628157546054/com/google/javascript/rhino/Node_206_tmp__ESTest_scaffolding.java]]
[MASTER] 09:59:06.466 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:06.466 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:59:06.467 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 546
[MASTER] 09:59:06.468 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_206_1628157546054/com/google/javascript/rhino/Node_206_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:59:06 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_206_tmp__ESTest extends Node_206_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("xpBF>P}ZAl``iC)9");
21:       assertEquals(52, Node.LENGTH);
22:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
23:       assertEquals(15, Node.NO_SIDE_EFFECTS);
24:       assertEquals(40, Node.ORIGINALNAME_PROP);
25:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
26:       assertEquals(49, Node.DIRECT_EVAL);
27:       assertEquals(50, Node.FREE_CALL);
28:       assertEquals(51, Node.STATIC_SOURCE_FILE);
29:       assertEquals(57, Node.REFLECTED_OBJECT);
30:       assertEquals(46, Node.IS_NAMESPACE);
31:       assertEquals(54, Node.SLASH_V);
32:       assertEquals(2, Node.POST_FLAG);
33:       assertEquals(8, Node.FLAG_NO_THROWS);
34:       assertEquals(39, Node.EMPTY_BLOCK);
35:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
36:       assertEquals(55, Node.INFERRED_FUNCTION);
37:       assertEquals(29, Node.JSDOC_INFO_PROP);
38:       assertEquals(30, Node.VAR_ARGS_NAME);
39:       assertEquals(57, Node.LAST_PROP);
40:       assertEquals(47, Node.IS_DISPATCHER);
41:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
42:       assertEquals(53, Node.INPUT_ID);
43:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
44:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
45:       assertEquals(43, Node.IS_CONSTANT_NAME);
46:       assertEquals(56, Node.CHANGE_TIME);
47:       assertEquals(36, Node.QUOTED_PROP);
48:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
49:       assertEquals(37, Node.OPT_ARG_NAME);
50:       assertEquals(32, Node.INCRDECR_PROP);
51:       assertEquals(48, Node.DIRECTIVES);
52:       assertEquals(4095, Node.COLUMN_MASK);
53:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
54:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
55:       assertEquals(1, Node.DECR_FLAG);
56:       assertEquals(12, Node.COLUMN_BITS);
57:       assertNotNull(node0);
58:       assertFalse(node0.isSwitch());
59:       assertFalse(node0.isCase());
60:       assertFalse(node0.isInc());
61:       assertFalse(node0.isHook());
62:       assertFalse(node0.isThrow());
63:       assertFalse(node0.isIf());
64:       assertFalse(node0.isBreak());
65:       assertFalse(node0.isComma());
66:       assertFalse(node0.isDelProp());
67:       assertFalse(node0.isEmpty());
68:       assertFalse(node0.isIn());
69:       assertFalse(node0.isTrue());
70:       assertFalse(node0.isNE());
71:       assertFalse(node0.isRegExp());
72:       assertFalse(node0.isDefaultCase());
73:       assertFalse(node0.isWith());
74:       assertFalse(node0.isScript());
75:       assertFalse(node0.isCatch());
76:       assertFalse(node0.hasOneChild());
77:       assertFalse(node0.isInstanceOf());
78:       assertFalse(node0.isTry());
79:       assertEquals(0, node0.getChildCount());
80:       assertFalse(node0.isThis());
81:       assertFalse(node0.isFor());
82:       assertFalse(node0.isNumber());
83:       assertFalse(node0.isGetterDef());
84:       assertFalse(node0.isLabelName());
85:       assertFalse(node0.isArrayLit());
86:       assertFalse(node0.isStringKey());
87:       assertEquals((-1), node0.getCharno());
88:       assertFalse(node0.isParamList());
89:       assertFalse(node0.isDo());
90:       assertFalse(node0.isNew());
91:       assertFalse(node0.isContinue());
92:       assertFalse(node0.isAdd());
93:       assertFalse(node0.hasMoreThanOneChild());
94:       assertTrue(node0.isString());
95:       assertFalse(node0.isBlock());
96:       assertFalse(node0.isLabel());
97:       assertFalse(node0.isAssignAdd());
98:       assertFalse(node0.isReturn());
99:       assertFalse(node0.isWhile());
100:       assertFalse(node0.isVar());
101:       assertFalse(node0.isNull());
102:       assertFalse(node0.isTypeOf());
103:       assertFalse(node0.isDec());
104:       assertFalse(node0.hasChildren());
105:       assertFalse(node0.isAssign());
106:       assertFalse(node0.isGetElem());
107:       assertFalse(node0.isCall());
108:       assertFalse(node0.isSetterDef());
109:       assertEquals((-1), node0.getLineno());
110:       assertFalse(node0.isOr());
111:       assertFalse(node0.isName());
112:       assertFalse(node0.isDebugger());
113:       assertFalse(node0.isFunction());
114:       assertFalse(node0.isVoid());
115:       assertFalse(node0.isNot());
116:       assertFalse(node0.isExprResult());
117:       assertEquals(40, node0.getType());
118:       assertEquals((-1), node0.getSourcePosition());
119:       assertFalse(node0.isFalse());
120:       assertFalse(node0.isGetProp());
121:       assertFalse(node0.isCast());
122:       assertFalse(node0.isObjectLit());
123:       assertFalse(node0.isAnd());
124:       
125:       Node node1 = Node.newNumber(1620.69935, 2489, 30);
126:       assertEquals(46, Node.IS_NAMESPACE);
127:       assertEquals(51, Node.STATIC_SOURCE_FILE);
128:       assertEquals(32, Node.INCRDECR_PROP);
129:       assertEquals(1, Node.DECR_FLAG);
130:       assertEquals(37, Node.OPT_ARG_NAME);
131:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
132:       assertEquals(15, Node.NO_SIDE_EFFECTS);
133:       assertEquals(57, Node.LAST_PROP);
134:       assertEquals(47, Node.IS_DISPATCHER);
135:       assertEquals(2, Node.POST_FLAG);
136:       assertEquals(30, Node.VAR_ARGS_NAME);
137:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
138:       assertEquals(12, Node.COLUMN_BITS);
139:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
140:       assertEquals(40, Node.ORIGINALNAME_PROP);
141:       assertEquals(43, Node.IS_CONSTANT_NAME);
142:       assertEquals(50, Node.FREE_CALL);
143:       assertEquals(54, Node.SLASH_V);
144:       assertEquals(4095, Node.COLUMN_MASK);
145:       assertEquals(48, Node.DIRECTIVES);
146:       assertEquals(55, Node.INFERRED_FUNCTION);
147:       assertEquals(39, Node.EMPTY_BLOCK);
148:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
149:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
150:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
151:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
152:       assertEquals(52, Node.LENGTH);
153:       assertEquals(29, Node.JSDOC_INFO_PROP);
154:       assertEquals(53, Node.INPUT_ID);
155:       assertEquals(56, Node.CHANGE_TIME);
156:       assertEquals(36, Node.QUOTED_PROP);
157:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
158:       assertEquals(8, Node.FLAG_NO_THROWS);
159:       assertEquals(49, Node.DIRECT_EVAL);
160:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
161:       assertEquals(57, Node.REFLECTED_OBJECT);
162:       assertNotNull(node1);
163:       assertFalse(node1.equals((Object)node0));
164:       assertFalse(node1.isIn());
165:       assertTrue(node1.isNumber());
166:       assertFalse(node1.isEmpty());
167:       assertFalse(node1.isDelProp());
168:       assertFalse(node1.isGetterDef());
169:       assertFalse(node1.isIf());
170:       assertFalse(node1.isNE());
171:       assertFalse(node1.isSwitch());
172:       assertFalse(node1.isFunction());
173:       assertFalse(node1.isArrayLit());
174:       assertFalse(node1.isInc());
175:       assertFalse(node1.isThrow());
176:       assertFalse(node1.isFalse());
177:       assertFalse(node1.isDefaultCase());
178:       assertEquals(0, node1.getChildCount());
179:       assertFalse(node1.isGetProp());
180:       assertFalse(node1.isComma());
181:       assertFalse(node1.isBreak());
182:       assertFalse(node1.isAnd());
183:       assertEquals(10194974, node1.getSourcePosition());
184:       assertFalse(node1.isNot());
185:       assertFalse(node1.isName());
186:       assertFalse(node1.isObjectLit());
187:       assertFalse(node1.isNull());
188:       assertFalse(node1.isTrue());
189:       assertFalse(node1.isVoid());
190:       assertEquals(30, node1.getCharno());
191:       assertFalse(node1.isDebugger());
192:       assertFalse(node1.isString());
193:       assertFalse(node1.isCall());
194:       assertFalse(node1.isExprResult());
195:       assertFalse(node1.isAssign());
196:       assertFalse(node1.hasChildren());
197:       assertFalse(node1.isWhile());
198:       assertFalse(node1.isDec());
199:       assertFalse(node1.isReturn());
200:       assertFalse(node1.isAssignAdd());
201:       assertFalse(node1.isOr());
202:       assertFalse(node1.isTypeOf());
203:       assertFalse(node1.isGetElem());
204:       assertEquals(2489, node1.getLineno());
205:       assertFalse(node1.isLabelName());
206:       assertFalse(node1.isNew());
207:       assertFalse(node1.isCast());
208:       assertFalse(node1.isAdd());
209:       assertFalse(node1.isContinue());
210:       assertFalse(node1.isDo());
211:       assertFalse(node1.isVar());
212:       assertFalse(node1.isLabel());
213:       assertFalse(node1.isParamList());
214:       assertFalse(node1.isInstanceOf());
215:       assertFalse(node1.isCatch());
216:       assertFalse(node1.isSetterDef());
217:       assertFalse(node1.isStringKey());
218:       assertFalse(node1.isTry());
219:       assertFalse(node1.isRegExp());
220:       assertFalse(node1.hasOneChild());
221:       assertFalse(node1.isScript());
222:       assertFalse(node1.isCase());
223:       assertFalse(node1.hasMoreThanOneChild());
224:       assertFalse(node1.isWith());
225:       assertFalse(node1.isFor());
226:       assertEquals(39, node1.getType());
227:       assertFalse(node1.isHook());
228:       assertFalse(node1.isThis());
229:       assertFalse(node1.isBlock());
230:       
231:       Node node2 = node0.useSourceInfoIfMissingFrom(node1);
232:       assertSame(node0, node2);
233:       assertSame(node2, node0);
234:       assertEquals(52, Node.LENGTH);
235:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
236:       assertEquals(15, Node.NO_SIDE_EFFECTS);
237:       assertEquals(40, Node.ORIGINALNAME_PROP);
238:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
239:       assertEquals(49, Node.DIRECT_EVAL);
240:       assertEquals(50, Node.FREE_CALL);
241:       assertEquals(51, Node.STATIC_SOURCE_FILE);
242:       assertEquals(57, Node.REFLECTED_OBJECT);
243:       assertEquals(46, Node.IS_NAMESPACE);
244:       assertEquals(54, Node.SLASH_V);
245:       assertEquals(2, Node.POST_FLAG);
246:       assertEquals(8, Node.FLAG_NO_THROWS);
247:       assertEquals(39, Node.EMPTY_BLOCK);
248:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
249:       assertEquals(55, Node.INFERRED_FUNCTION);
250:       assertEquals(29, Node.JSDOC_INFO_PROP);
251:       assertEquals(30, Node.VAR_ARGS_NAME);
252:       assertEquals(57, Node.LAST_PROP);
253:       assertEquals(47, Node.IS_DISPATCHER);
254:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
255:       assertEquals(53, Node.INPUT_ID);
256:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
257:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
258:       assertEquals(43, Node.IS_CONSTANT_NAME);
259:       assertEquals(56, Node.CHANGE_TIME);
260:       assertEquals(36, Node.QUOTED_PROP);
261:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
262:       assertEquals(37, Node.OPT_ARG_NAME);
263:       assertEquals(32, Node.INCRDECR_PROP);
264:       assertEquals(48, Node.DIRECTIVES);
265:       assertEquals(4095, Node.COLUMN_MASK);
266:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
267:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
268:       assertEquals(1, Node.DECR_FLAG);
269:       assertEquals(12, Node.COLUMN_BITS);
270:       assertEquals(46, Node.IS_NAMESPACE);
271:       assertEquals(51, Node.STATIC_SOURCE_FILE);
272:       assertEquals(32, Node.INCRDECR_PROP);
273:       assertEquals(1, Node.DECR_FLAG);
274:       assertEquals(37, Node.OPT_ARG_NAME);
275:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
276:       assertEquals(15, Node.NO_SIDE_EFFECTS);
277:       assertEquals(57, Node.LAST_PROP);
278:       assertEquals(47, Node.IS_DISPATCHER);
279:       assertEquals(2, Node.POST_FLAG);
280:       assertEquals(30, Node.VAR_ARGS_NAME);
281:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
282:       assertEquals(12, Node.COLUMN_BITS);
283:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
284:       assertEquals(40, Node.ORIGINALNAME_PROP);
285:       assertEquals(43, Node.IS_CONSTANT_NAME);
286:       assertEquals(50, Node.FREE_CALL);
287:       assertEquals(54, Node.SLASH_V);
288:       assertEquals(4095, Node.COLUMN_MASK);
289:       assertEquals(48, Node.DIRECTIVES);
290:       assertEquals(55, Node.INFERRED_FUNCTION);
291:       assertEquals(39, Node.EMPTY_BLOCK);
292:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
293:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
294:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
295:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
296:       assertEquals(52, Node.LENGTH);
297:       assertEquals(29, Node.JSDOC_INFO_PROP);
298:       assertEquals(53, Node.INPUT_ID);
299:       assertEquals(56, Node.CHANGE_TIME);
300:       assertEquals(36, Node.QUOTED_PROP);
301:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
302:       assertEquals(8, Node.FLAG_NO_THROWS);
303:       assertEquals(49, Node.DIRECT_EVAL);
304:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
305:       assertEquals(57, Node.REFLECTED_OBJECT);
306:       assertEquals(57, Node.REFLECTED_OBJECT);
307:       assertEquals(52, Node.LENGTH);
308:       assertEquals(40, Node.ORIGINALNAME_PROP);
309:       assertEquals(15, Node.NO_SIDE_EFFECTS);
310:       assertEquals(8, Node.FLAG_NO_THROWS);
311:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
312:       assertEquals(50, Node.FREE_CALL);
313:       assertEquals(54, Node.SLASH_V);
314:       assertEquals(51, Node.STATIC_SOURCE_FILE);
315:       assertEquals(12, Node.COLUMN_BITS);
316:       assertEquals(32, Node.INCRDECR_PROP);
317:       assertEquals(4095, Node.COLUMN_MASK);
318:       assertEquals(1, Node.DECR_FLAG);
319:       assertEquals(48, Node.DIRECTIVES);
320:       assertEquals(49, Node.DIRECT_EVAL);
321:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
322:       assertEquals(37, Node.OPT_ARG_NAME);
323:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
324:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
325:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
326:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
327:       assertEquals(53, Node.INPUT_ID);
328:       assertEquals(29, Node.JSDOC_INFO_PROP);
329:       assertEquals(43, Node.IS_CONSTANT_NAME);
330:       assertEquals(56, Node.CHANGE_TIME);
331:       assertEquals(36, Node.QUOTED_PROP);
332:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
333:       assertEquals(46, Node.IS_NAMESPACE);
334:       assertEquals(55, Node.INFERRED_FUNCTION);
335:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
336:       assertEquals(39, Node.EMPTY_BLOCK);
337:       assertEquals(47, Node.IS_DISPATCHER);
338:       assertEquals(2, Node.POST_FLAG);
339:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
340:       assertEquals(57, Node.LAST_PROP);
341:       assertEquals(30, Node.VAR_ARGS_NAME);
342:       assertNotNull(node2);
343:       assertFalse(node0.equals((Object)node1));
344:       assertFalse(node1.equals((Object)node0));
345:       assertFalse(node2.equals((Object)node1));
346:       assertFalse(node0.isSwitch());
347:       assertFalse(node0.isCase());
348:       assertFalse(node0.isInc());
349:       assertFalse(node0.isHook());
350:       assertFalse(node0.isThrow());
351:       assertFalse(node0.isIf());
352:       assertFalse(node0.isBreak());
353:       assertFalse(node0.isComma());
354:       assertFalse(node0.isDelProp());
355:       assertFalse(node0.isEmpty());
356:       assertFalse(node0.isIn());
357:       assertFalse(node0.isTrue());
358:       assertFalse(node0.isNE());
359:       assertFalse(node0.isRegExp());
360:       assertFalse(node0.isDefaultCase());
361:       assertFalse(node0.isWith());
362:       assertFalse(node0.isScript());
363:       assertFalse(node0.isCatch());
364:       assertFalse(node0.hasOneChild());
365:       assertFalse(node0.isInstanceOf());
366:       assertFalse(node0.isTry());
367:       assertEquals(0, node0.getChildCount());
368:       assertFalse(node0.isThis());
369:       assertFalse(node0.isFor());
370:       assertFalse(node0.isNumber());
371:       assertFalse(node0.isGetterDef());
372:       assertFalse(node0.isLabelName());
373:       assertFalse(node0.isArrayLit());
374:       assertFalse(node0.isStringKey());
375:       assertFalse(node0.isParamList());
376:       assertFalse(node0.isDo());
377:       assertFalse(node0.isNew());
378:       assertFalse(node0.isContinue());
379:       assertFalse(node0.isAdd());
380:       assertFalse(node0.hasMoreThanOneChild());
381:       assertTrue(node0.isString());
382:       assertFalse(node0.isBlock());
383:       assertFalse(node0.isLabel());
384:       assertFalse(node0.isAssignAdd());
385:       assertFalse(node0.isReturn());
386:       assertFalse(node0.isWhile());
387:       assertFalse(node0.isVar());
388:       assertFalse(node0.isNull());
389:       assertFalse(node0.isTypeOf());
390:       assertFalse(node0.isDec());
391:       assertFalse(node0.hasChildren());
392:       assertFalse(node0.isAssign());
393:       assertFalse(node0.isGetElem());
394:       assertFalse(node0.isCall());
395:       assertFalse(node0.isSetterDef());
396:       assertFalse(node0.isOr());
397:       assertFalse(node0.isName());
398:       assertEquals(2489, node0.getLineno());
399:       assertFalse(node0.isDebugger());
400:       assertFalse(node0.isFunction());
401:       assertFalse(node0.isVoid());
402:       assertFalse(node0.isNot());
403:       assertEquals(10194974, node0.getSourcePosition());
404:       assertFalse(node0.isExprResult());
405:       assertEquals(40, node0.getType());
406:       assertFalse(node0.isFalse());
407:       assertFalse(node0.isGetProp());
408:       assertFalse(node0.isCast());
409:       assertFalse(node0.isObjectLit());
410:       assertEquals(30, node0.getCharno());
411:       assertFalse(node0.isAnd());
412:       assertFalse(node1.isIn());
413:       assertTrue(node1.isNumber());
414:       assertFalse(node1.isEmpty());
415:       assertFalse(node1.isDelProp());
416:       assertFalse(node1.isGetterDef());
417:       assertFalse(node1.isIf());
418:       assertFalse(node1.isNE());
419:       assertFalse(node1.isSwitch());
420:       assertFalse(node1.isFunction());
421:       assertFalse(node1.isArrayLit());
422:       assertFalse(node1.isInc());
423:       assertFalse(node1.isThrow());
424:       assertFalse(node1.isFalse());
425:       assertFalse(node1.isDefaultCase());
426:       assertEquals(0, node1.getChildCount());
427:       assertFalse(node1.isGetProp());
428:       assertFalse(node1.isComma());
429:       assertFalse(node1.isBreak());
430:       assertFalse(node1.isAnd());
431:       assertEquals(10194974, node1.getSourcePosition());
432:       assertFalse(node1.isNot());
433:       assertFalse(node1.isName());
434:       assertFalse(node1.isObjectLit());
435:       assertFalse(node1.isNull());
436:       assertFalse(node1.isTrue());
437:       assertFalse(node1.isVoid());
438:       assertEquals(30, node1.getCharno());
439:       assertFalse(node1.isDebugger());
440:       assertFalse(node1.isString());
441:       assertFalse(node1.isCall());
442:       assertFalse(node1.isExprResult());
443:       assertFalse(node1.isAssign());
444:       assertFalse(node1.hasChildren());
445:       assertFalse(node1.isWhile());
446:       assertFalse(node1.isDec());
447:       assertFalse(node1.isReturn());
448:       assertFalse(node1.isAssignAdd());
449:       assertFalse(node1.isOr());
450:       assertFalse(node1.isTypeOf());
451:       assertFalse(node1.isGetElem());
452:       assertEquals(2489, node1.getLineno());
453:       assertFalse(node1.isLabelName());
454:       assertFalse(node1.isNew());
455:       assertFalse(node1.isCast());
456:       assertFalse(node1.isAdd());
457:       assertFalse(node1.isContinue());
458:       assertFalse(node1.isDo());
459:       assertFalse(node1.isVar());
460:       assertFalse(node1.isLabel());
461:       assertFalse(node1.isParamList());
462:       assertFalse(node1.isInstanceOf());
463:       assertFalse(node1.isCatch());
464:       assertFalse(node1.isSetterDef());
465:       assertFalse(node1.isStringKey());
466:       assertFalse(node1.isTry());
467:       assertFalse(node1.isRegExp());
468:       assertFalse(node1.hasOneChild());
469:       assertFalse(node1.isScript());
470:       assertFalse(node1.isCase());
471:       assertFalse(node1.hasMoreThanOneChild());
472:       assertFalse(node1.isWith());
473:       assertFalse(node1.isFor());
474:       assertEquals(39, node1.getType());
475:       assertFalse(node1.isHook());
476:       assertFalse(node1.isThis());
477:       assertFalse(node1.isBlock());
478:       assertEquals(30, node2.getCharno());
479:       assertFalse(node2.isNew());
480:       assertFalse(node2.isBlock());
481:       assertTrue(node2.isString());
482:       assertFalse(node2.isAdd());
483:       assertFalse(node2.isDo());
484:       assertFalse(node2.isCall());
485:       assertFalse(node2.hasMoreThanOneChild());
486:       assertFalse(node2.isWhile());
487:       assertFalse(node2.isContinue());
488:       assertFalse(node2.isVar());
489:       assertFalse(node2.isReturn());
490:       assertFalse(node2.isLabel());
491:       assertFalse(node2.isParamList());
492:       assertFalse(node2.isStringKey());
493:       assertFalse(node2.isLabelName());
494:       assertFalse(node2.isNumber());
495:       assertFalse(node2.isDebugger());
496:       assertFalse(node2.isVoid());
497:       assertFalse(node2.isTrue());
498:       assertFalse(node2.isExprResult());
499:       assertFalse(node2.isDefaultCase());
500:       assertFalse(node2.isArrayLit());
501:       assertFalse(node2.isGetElem());
502:       assertFalse(node2.isAssign());
503:       assertFalse(node2.isDec());
504:       assertEquals(0, node2.getChildCount());
505:       assertFalse(node2.isTypeOf());
506:       assertFalse(node2.hasChildren());
507:       assertFalse(node2.isOr());
508:       assertFalse(node2.isAssignAdd());
509:       assertFalse(node2.isDelProp());
510:       assertFalse(node2.isBreak());
511:       assertEquals(10194974, node2.getSourcePosition());
512:       assertFalse(node2.isEmpty());
513:       assertFalse(node2.isName());
514:       assertFalse(node2.isNull());
515:       assertFalse(node2.isSwitch());
516:       assertFalse(node2.isInc());
517:       assertFalse(node2.isCase());
518:       assertFalse(node2.isThrow());
519:       assertFalse(node2.isFalse());
520:       assertFalse(node2.isHook());
521:       assertFalse(node2.isComma());
522:       assertFalse(node2.isThis());
523:       assertFalse(node2.isGetProp());
524:       assertFalse(node2.isNot());
525:       assertFalse(node2.isObjectLit());
526:       assertFalse(node2.isAnd());
527:       assertFalse(node2.isGetterDef());
528:       assertFalse(node2.isTry());
529:       assertFalse(node2.isFunction());
530:       assertFalse(node2.hasOneChild());
531:       assertFalse(node2.isScript());
532:       assertFalse(node2.isFor());
533:       assertEquals(40, node2.getType());
534:       assertFalse(node2.isWith());
535:       assertFalse(node2.isCatch());
536:       assertFalse(node2.isCast());
537:       assertFalse(node2.isRegExp());
538:       assertFalse(node2.isNE());
539:       assertFalse(node2.isIn());
540:       assertFalse(node2.isInstanceOf());
541:       assertFalse(node2.isSetterDef());
542:       assertFalse(node2.isIf());
543:       assertEquals(2489, node2.getLineno());
544:       
545:       Iterable<Node> iterable0 = node0.children();
546:       assertFalse(iterable0.contains(node2));
547:       assertSame(node0, node2);
548:       assertEquals(52, Node.LENGTH);
549:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
550:       assertEquals(15, Node.NO_SIDE_EFFECTS);
551:       assertEquals(40, Node.ORIGINALNAME_PROP);
552:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
553:       assertEquals(49, Node.DIRECT_EVAL);
554:       assertEquals(50, Node.FREE_CALL);
555:       assertEquals(51, Node.STATIC_SOURCE_FILE);
556:       assertEquals(57, Node.REFLECTED_OBJECT);
557:       assertEquals(46, Node.IS_NAMESPACE);
558:       assertEquals(54, Node.SLASH_V);
559:       assertEquals(2, Node.POST_FLAG);
560:       assertEquals(8, Node.FLAG_NO_THROWS);
561:       assertEquals(39, Node.EMPTY_BLOCK);
562:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
563:       assertEquals(55, Node.INFERRED_FUNCTION);
564:       assertEquals(29, Node.JSDOC_INFO_PROP);
565:       assertEquals(30, Node.VAR_ARGS_NAME);
566:       assertEquals(57, Node.LAST_PROP);
567:       assertEquals(47, Node.IS_DISPATCHER);
568:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
569:       assertEquals(53, Node.INPUT_ID);
570:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
571:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
572:       assertEquals(43, Node.IS_CONSTANT_NAME);
573:       assertEquals(56, Node.CHANGE_TIME);
574:       assertEquals(36, Node.QUOTED_PROP);
575:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
576:       assertEquals(37, Node.OPT_ARG_NAME);
577:       assertEquals(32, Node.INCRDECR_PROP);
578:       assertEquals(48, Node.DIRECTIVES);
579:       assertEquals(4095, Node.COLUMN_MASK);
580:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
581:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
582:       assertEquals(1, Node.DECR_FLAG);
583:       assertEquals(12, Node.COLUMN_BITS);
584:       assertNotNull(iterable0);
585:       assertFalse(node0.equals((Object)node1));
586:       assertFalse(node0.isSwitch());
587:       assertFalse(node0.isCase());
588:       assertFalse(node0.isInc());
589:       assertFalse(node0.isHook());
590:       assertFalse(node0.isThrow());
591:       assertFalse(node0.isIf());
592:       assertFalse(node0.isBreak());
593:       assertFalse(node0.isComma());
594:       assertFalse(node0.isDelProp());
595:       assertFalse(node0.isEmpty());
596:       assertFalse(node0.isIn());
597:       assertFalse(node0.isTrue());
598:       assertFalse(node0.isNE());
599:       assertFalse(node0.isRegExp());
600:       assertFalse(node0.isDefaultCase());
601:       assertFalse(node0.isWith());
602:       assertFalse(node0.isScript());
603:       assertFalse(node0.isCatch());
604:       assertFalse(node0.hasOneChild());
605:       assertFalse(node0.isInstanceOf());
606:       assertFalse(node0.isTry());
607:       assertEquals(0, node0.getChildCount());
608:       assertFalse(node0.isThis());
609:       assertFalse(node0.isFor());
610:       assertFalse(node0.isNumber());
611:       assertFalse(node0.isGetterDef());
612:       assertFalse(node0.isLabelName());
613:       assertFalse(node0.isArrayLit());
614:       assertFalse(node0.isStringKey());
615:       assertFalse(node0.isParamList());
616:       assertFalse(node0.isDo());
617:       assertFalse(node0.isNew());
618:       assertFalse(node0.isContinue());
619:       assertFalse(node0.isAdd());
620:       assertFalse(node0.hasMoreThanOneChild());
621:       assertTrue(node0.isString());
622:       assertFalse(node0.isBlock());
623:       assertFalse(node0.isLabel());
624:       assertFalse(node0.isAssignAdd());
625:       assertFalse(node0.isReturn());
626:       assertFalse(node0.isWhile());
627:       assertFalse(node0.isVar());
628:       assertFalse(node0.isNull());
629:       assertFalse(node0.isTypeOf());
630:       assertFalse(node0.isDec());
631:       assertFalse(node0.hasChildren());
632:       assertFalse(node0.isAssign());
633:       assertFalse(node0.isGetElem());
634:       assertFalse(node0.isCall());
635:       assertFalse(node0.isSetterDef());
636:       assertFalse(node0.isOr());
637:       assertFalse(node0.isName());
638:       assertEquals(2489, node0.getLineno());
639:       assertFalse(node0.isDebugger());
640:       assertFalse(node0.isFunction());
641:       assertFalse(node0.isVoid());
642:       assertFalse(node0.isNot());
643:       assertEquals(10194974, node0.getSourcePosition());
644:       assertFalse(node0.isExprResult());
645:       assertEquals(40, node0.getType());
646:       assertFalse(node0.isFalse());
647:       assertFalse(node0.isGetProp());
648:       assertFalse(node0.isCast());
649:       assertFalse(node0.isObjectLit());
650:       assertEquals(30, node0.getCharno());
651:       assertFalse(node0.isAnd());
652:       
653:       boolean boolean0 = node1.isGetProp();
654:       assertFalse(boolean0);
655:       assertEquals(46, Node.IS_NAMESPACE);
656:       assertEquals(51, Node.STATIC_SOURCE_FILE);
657:       assertEquals(32, Node.INCRDECR_PROP);
658:       assertEquals(1, Node.DECR_FLAG);
659:       assertEquals(37, Node.OPT_ARG_NAME);
660:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
661:       assertEquals(15, Node.NO_SIDE_EFFECTS);
662:       assertEquals(57, Node.LAST_PROP);
663:       assertEquals(47, Node.IS_DISPATCHER);
664:       assertEquals(2, Node.POST_FLAG);
665:       assertEquals(30, Node.VAR_ARGS_NAME);
666:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
667:       assertEquals(12, Node.COLUMN_BITS);
668:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
669:       assertEquals(40, Node.ORIGINALNAME_PROP);
670:       assertEquals(43, Node.IS_CONSTANT_NAME);
671:       assertEquals(50, Node.FREE_CALL);
672:       assertEquals(54, Node.SLASH_V);
673:       assertEquals(4095, Node.COLUMN_MASK);
674:       assertEquals(48, Node.DIRECTIVES);
675:       assertEquals(55, Node.INFERRED_FUNCTION);
676:       assertEquals(39, Node.EMPTY_BLOCK);
677:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
678:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
679:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
680:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
681:       assertEquals(52, Node.LENGTH);
682:       assertEquals(29, Node.JSDOC_INFO_PROP);
683:       assertEquals(53, Node.INPUT_ID);
684:       assertEquals(56, Node.CHANGE_TIME);
685:       assertEquals(36, Node.QUOTED_PROP);
686:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
687:       assertEquals(8, Node.FLAG_NO_THROWS);
688:       assertEquals(49, Node.DIRECT_EVAL);
689:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
690:       assertEquals(57, Node.REFLECTED_OBJECT);
691:       assertFalse(node1.equals((Object)node2));
692:       assertFalse(node1.equals((Object)node0));
693:       assertFalse(node1.isIn());
694:       assertTrue(node1.isNumber());
695:       assertFalse(node1.isEmpty());
696:       assertFalse(node1.isDelProp());
697:       assertFalse(node1.isGetterDef());
698:       assertFalse(node1.isIf());
699:       assertFalse(node1.isNE());
700:       assertFalse(node1.isSwitch());
701:       assertFalse(node1.isFunction());
702:       assertFalse(node1.isArrayLit());
703:       assertFalse(node1.isInc());
704:       assertFalse(node1.isThrow());
705:       assertFalse(node1.isFalse());
706:       assertFalse(node1.isDefaultCase());
707:       assertEquals(0, node1.getChildCount());
708:       assertFalse(node1.isGetProp());
709:       assertFalse(node1.isComma());
710:       assertFalse(node1.isBreak());
711:       assertFalse(node1.isAnd());
712:       assertEquals(10194974, node1.getSourcePosition());
713:       assertFalse(node1.isNot());
714:       assertFalse(node1.isName());
715:       assertFalse(node1.isObjectLit());
716:       assertFalse(node1.isNull());
717:       assertFalse(node1.isTrue());
718:       assertFalse(node1.isVoid());
719:       assertEquals(30, node1.getCharno());
720:       assertFalse(node1.isDebugger());
721:       assertFalse(node1.isString());
722:       assertFalse(node1.isCall());
723:       assertFalse(node1.isExprResult());
724:       assertFalse(node1.isAssign());
725:       assertFalse(node1.hasChildren());
726:       assertFalse(node1.isWhile());
727:       assertFalse(node1.isDec());
728:       assertFalse(node1.isReturn());
729:       assertFalse(node1.isAssignAdd());
730:       assertFalse(node1.isOr());
731:       assertFalse(node1.isTypeOf());
732:       assertFalse(node1.isGetElem());
733:       assertEquals(2489, node1.getLineno());
734:       assertFalse(node1.isLabelName());
735:       assertFalse(node1.isNew());
736:       assertFalse(node1.isCast());
737:       assertFalse(node1.isAdd());
738:       assertFalse(node1.isContinue());
739:       assertFalse(node1.isDo());
740:       assertFalse(node1.isVar());
741:       assertFalse(node1.isLabel());
742:       assertFalse(node1.isParamList());
743:       assertFalse(node1.isInstanceOf());
744:       assertFalse(node1.isCatch());
745:       assertFalse(node1.isSetterDef());
746:       assertFalse(node1.isStringKey());
747:       assertFalse(node1.isTry());
748:       assertFalse(node1.isRegExp());
749:       assertFalse(node1.hasOneChild());
750:       assertFalse(node1.isScript());
751:       assertFalse(node1.isCase());
752:       assertFalse(node1.hasMoreThanOneChild());
753:       assertFalse(node1.isWith());
754:       assertFalse(node1.isFor());
755:       assertEquals(39, node1.getType());
756:       assertFalse(node1.isHook());
757:       assertFalse(node1.isThis());
758:       assertFalse(node1.isBlock());
759:       
760:       boolean boolean1 = node1.hasChildren();
761:       assertFalse(boolean1);
762:       assertEquals(46, Node.IS_NAMESPACE);
763:       assertEquals(51, Node.STATIC_SOURCE_FILE);
764:       assertEquals(32, Node.INCRDECR_PROP);
765:       assertEquals(1, Node.DECR_FLAG);
766:       assertEquals(37, Node.OPT_ARG_NAME);
767:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
768:       assertEquals(15, Node.NO_SIDE_EFFECTS);
769:       assertEquals(57, Node.LAST_PROP);
770:       assertEquals(47, Node.IS_DISPATCHER);
771:       assertEquals(2, Node.POST_FLAG);
772:       assertEquals(30, Node.VAR_ARGS_NAME);
773:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
774:       assertEquals(12, Node.COLUMN_BITS);
775:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
776:       assertEquals(40, Node.ORIGINALNAME_PROP);
777:       assertEquals(43, Node.IS_CONSTANT_NAME);
778:       assertEquals(50, Node.FREE_CALL);
779:       assertEquals(54, Node.SLASH_V);
780:       assertEquals(4095, Node.COLUMN_MASK);
781:       assertEquals(48, Node.DIRECTIVES);
782:       assertEquals(55, Node.INFERRED_FUNCTION);
783:       assertEquals(39, Node.EMPTY_BLOCK);
784:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
785:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
786:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
787:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
788:       assertEquals(52, Node.LENGTH);
789:       assertEquals(29, Node.JSDOC_INFO_PROP);
790:       assertEquals(53, Node.INPUT_ID);
791:       assertEquals(56, Node.CHANGE_TIME);
792:       assertEquals(36, Node.QUOTED_PROP);
793:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
794:       assertEquals(8, Node.FLAG_NO_THROWS);
795:       assertEquals(49, Node.DIRECT_EVAL);
796:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
797:       assertEquals(57, Node.REFLECTED_OBJECT);
798:       assertFalse(node1.equals((Object)node2));
799:       assertFalse(node1.equals((Object)node0));
800:       assertTrue(boolean1 == boolean0);
801:       assertFalse(node1.isIn());
802:       assertTrue(node1.isNumber());
803:       assertFalse(node1.isEmpty());
804:       assertFalse(node1.isDelProp());
805:       assertFalse(node1.isGetterDef());
806:       assertFalse(node1.isIf());
807:       assertFalse(node1.isNE());
808:       assertFalse(node1.isSwitch());
809:       assertFalse(node1.isFunction());
810:       assertFalse(node1.isArrayLit());
811:       assertFalse(node1.isInc());
812:       assertFalse(node1.isThrow());
813:       assertFalse(node1.isFalse());
814:       assertFalse(node1.isDefaultCase());
815:       assertEquals(0, node1.getChildCount());
816:       assertFalse(node1.isGetProp());
817:       assertFalse(node1.isComma());
818:       assertFalse(node1.isBreak());
819:       assertFalse(node1.isAnd());
820:       assertEquals(10194974, node1.getSourcePosition());
821:       assertFalse(node1.isNot());
822:       assertFalse(node1.isName());
823:       assertFalse(node1.isObjectLit());
824:       assertFalse(node1.isNull());
825:       assertFalse(node1.isTrue());
826:       assertFalse(node1.isVoid());
827:       assertEquals(30, node1.getCharno());
828:       assertFalse(node1.isDebugger());
829:       assertFalse(node1.isString());
830:       assertFalse(node1.isCall());
831:       assertFalse(node1.isExprResult());
832:       assertFalse(node1.isAssign());
833:       assertFalse(node1.hasChildren());
834:       assertFalse(node1.isWhile());
835:       assertFalse(node1.isDec());
836:       assertFalse(node1.isReturn());
837:       assertFalse(node1.isAssignAdd());
838:       assertFalse(node1.isOr());
839:       assertFalse(node1.isTypeOf());
840:       assertFalse(node1.isGetElem());
841:       assertEquals(2489, node1.getLineno());
842:       assertFalse(node1.isLabelName());
843:       assertFalse(node1.isNew());
844:       assertFalse(node1.isCast());
845:       assertFalse(node1.isAdd());
846:       assertFalse(node1.isContinue());
847:       assertFalse(node1.isDo());
848:       assertFalse(node1.isVar());
849:       assertFalse(node1.isLabel());
850:       assertFalse(node1.isParamList());
851:       assertFalse(node1.isInstanceOf());
852:       assertFalse(node1.isCatch());
853:       assertFalse(node1.isSetterDef());
854:       assertFalse(node1.isStringKey());
855:       assertFalse(node1.isTry());
856:       assertFalse(node1.isRegExp());
857:       assertFalse(node1.hasOneChild());
858:       assertFalse(node1.isScript());
859:       assertFalse(node1.isCase());
860:       assertFalse(node1.hasMoreThanOneChild());
861:       assertFalse(node1.isWith());
862:       assertFalse(node1.isFor());
863:       assertEquals(39, node1.getType());
864:       assertFalse(node1.isHook());
865:       assertFalse(node1.isThis());
866:       assertFalse(node1.isBlock());
867:       
868:       Node node3 = Node.newNumber((double) 1, 112, 31);
869:       assertNotSame(node3, node1);
870:       assertEquals(54, Node.SLASH_V);
871:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
872:       assertEquals(57, Node.REFLECTED_OBJECT);
873:       assertEquals(52, Node.LENGTH);
874:       assertEquals(49, Node.DIRECT_EVAL);
875:       assertEquals(50, Node.FREE_CALL);
876:       assertEquals(40, Node.ORIGINALNAME_PROP);
877:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
878:       assertEquals(39, Node.EMPTY_BLOCK);
879:       assertEquals(55, Node.INFERRED_FUNCTION);
880:       assertEquals(2, Node.POST_FLAG);
881:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
882:       assertEquals(8, Node.FLAG_NO_THROWS);
883:       assertEquals(29, Node.JSDOC_INFO_PROP);
884:       assertEquals(30, Node.VAR_ARGS_NAME);
885:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
886:       assertEquals(15, Node.NO_SIDE_EFFECTS);
887:       assertEquals(47, Node.IS_DISPATCHER);
888:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
889:       assertEquals(57, Node.LAST_PROP);
890:       assertEquals(53, Node.INPUT_ID);
891:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
892:       assertEquals(36, Node.QUOTED_PROP);
893:       assertEquals(43, Node.IS_CONSTANT_NAME);
894:       assertEquals(56, Node.CHANGE_TIME);
895:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
896:       assertEquals(48, Node.DIRECTIVES);
897:       assertEquals(37, Node.OPT_ARG_NAME);
898:       assertEquals(46, Node.IS_NAMESPACE);
899:       assertEquals(51, Node.STATIC_SOURCE_FILE);
900:       assertEquals(4095, Node.COLUMN_MASK);
901:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
902:       assertEquals(1, Node.DECR_FLAG);
903:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
904:       assertEquals(12, Node.COLUMN_BITS);
905:       assertEquals(32, Node.INCRDECR_PROP);
906:       assertNotNull(node3);
907:       assertFalse(node3.equals((Object)node2));
908:       assertFalse(node3.equals((Object)node1));
909:       assertFalse(node3.equals((Object)node0));
910:       assertFalse(node3.isInc());
911:       assertFalse(node3.isString());
912:       assertFalse(node3.isHook());
913:       assertFalse(node3.isCase());
914:       assertTrue(node3.isNumber());
915:       assertFalse(node3.isThrow());
916:       assertFalse(node3.isNE());
917:       assertFalse(node3.isComma());
918:       assertFalse(node3.isThis());
919:       assertFalse(node3.isBreak());
920:       assertFalse(node3.isEmpty());
921:       assertFalse(node3.isIn());
922:       assertFalse(node3.isInstanceOf());
923:       assertFalse(node3.isVoid());
924:       assertFalse(node3.isDelProp());
925:       assertFalse(node3.isIf());
926:       assertFalse(node3.isExprResult());
927:       assertFalse(node3.isDebugger());
928:       assertFalse(node3.isNot());
929:       assertFalse(node3.isObjectLit());
930:       assertFalse(node3.isFunction());
931:       assertEquals(112, node3.getLineno());
932:       assertFalse(node3.isGetProp());
933:       assertFalse(node3.isFalse());
934:       assertFalse(node3.isCast());
935:       assertFalse(node3.isAnd());
936:       assertEquals(39, node3.getType());
937:       assertFalse(node3.isAdd());
938:       assertFalse(node3.isContinue());
939:       assertFalse(node3.hasMoreThanOneChild());
940:       assertFalse(node3.isVar());
941:       assertFalse(node3.isReturn());
942:       assertFalse(node3.isLabel());
943:       assertFalse(node3.isNew());
944:       assertFalse(node3.isBlock());
945:       assertFalse(node3.isDo());
946:       assertFalse(node3.isWhile());
947:       assertFalse(node3.isAssignAdd());
948:       assertFalse(node3.isNull());
949:       assertFalse(node3.isTypeOf());
950:       assertFalse(node3.isDec());
951:       assertFalse(node3.hasChildren());
952:       assertFalse(node3.isSetterDef());
953:       assertFalse(node3.isGetElem());
954:       assertFalse(node3.isOr());
955:       assertFalse(node3.isAssign());
956:       assertFalse(node3.isCatch());
957:       assertFalse(node3.isCall());
958:       assertFalse(node3.isName());
959:       assertFalse(node3.isRegExp());
960:       assertFalse(node3.isScript());
961:       assertFalse(node3.isTrue());
962:       assertEquals(31, node3.getCharno());
963:       assertFalse(node3.isWith());
964:       assertFalse(node3.hasOneChild());
965:       assertEquals(0, node3.getChildCount());
966:       assertFalse(node3.isFor());
967:       assertFalse(node3.isTry());
968:       assertFalse(node3.isDefaultCase());
969:       assertFalse(node3.isGetterDef());
970:       assertFalse(node3.isArrayLit());
971:       assertEquals(458783, node3.getSourcePosition());
972:       assertFalse(node3.isStringKey());
973:       assertFalse(node3.isLabelName());
974:       assertFalse(node3.isParamList());
975:       assertFalse(node3.isSwitch());
976:       
977:       boolean boolean2 = node3.isSwitch();
978:       assertFalse(boolean2);
979:       assertNotSame(node3, node1);
980:       assertEquals(54, Node.SLASH_V);
981:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
982:       assertEquals(57, Node.REFLECTED_OBJECT);
983:       assertEquals(52, Node.LENGTH);
984:       assertEquals(49, Node.DIRECT_EVAL);
985:       assertEquals(50, Node.FREE_CALL);
986:       assertEquals(40, Node.ORIGINALNAME_PROP);
987:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
988:       assertEquals(39, Node.EMPTY_BLOCK);
989:       assertEquals(55, Node.INFERRED_FUNCTION);
990:       assertEquals(2, Node.POST_FLAG);
991:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
992:       assertEquals(8, Node.FLAG_NO_THROWS);
993:       assertEquals(29, Node.JSDOC_INFO_PROP);
994:       assertEquals(30, Node.VAR_ARGS_NAME);
995:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
996:       assertEquals(15, Node.NO_SIDE_EFFECTS);
997:       assertEquals(47, Node.IS_DISPATCHER);
998:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
999:       assertEquals(57, Node.LAST_PROP);
1000:       assertEquals(53, Node.INPUT_ID);
1001:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1002:       assertEquals(36, Node.QUOTED_PROP);
1003:       assertEquals(43, Node.IS_CONSTANT_NAME);
1004:       assertEquals(56, Node.CHANGE_TIME);
1005:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1006:       assertEquals(48, Node.DIRECTIVES);
1007:       assertEquals(37, Node.OPT_ARG_NAME);
1008:       assertEquals(46, Node.IS_NAMESPACE);
1009:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1010:       assertEquals(4095, Node.COLUMN_MASK);
1011:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1012:       assertEquals(1, Node.DECR_FLAG);
1013:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1014:       assertEquals(12, Node.COLUMN_BITS);
1015:       assertEquals(32, Node.INCRDECR_PROP);
1016:       assertFalse(node3.equals((Object)node2));
1017:       assertFalse(node3.equals((Object)node1));
1018:       assertFalse(node3.equals((Object)node0));
1019:       assertTrue(boolean2 == boolean1);
1020:       assertTrue(boolean2 == boolean0);
1021:       assertFalse(node3.isInc());
1022:       assertFalse(node3.isString());
1023:       assertFalse(node3.isHook());
1024:       assertFalse(node3.isCase());
1025:       assertTrue(node3.isNumber());
1026:       assertFalse(node3.isThrow());
1027:       assertFalse(node3.isNE());
1028:       assertFalse(node3.isComma());
1029:       assertFalse(node3.isThis());
1030:       assertFalse(node3.isBreak());
1031:       assertFalse(node3.isEmpty());
1032:       assertFalse(node3.isIn());
1033:       assertFalse(node3.isInstanceOf());
1034:       assertFalse(node3.isVoid());
1035:       assertFalse(node3.isDelProp());
1036:       assertFalse(node3.isIf());
1037:       assertFalse(node3.isExprResult());
1038:       assertFalse(node3.isDebugger());
1039:       assertFalse(node3.isNot());
1040:       assertFalse(node3.isObjectLit());
1041:       assertFalse(node3.isFunction());
1042:       assertEquals(112, node3.getLineno());
1043:       assertFalse(node3.isGetProp());
1044:       assertFalse(node3.isFalse());
1045:       assertFalse(node3.isCast());
1046:       assertFalse(node3.isAnd());
1047:       assertEquals(39, node3.getType());
1048:       assertFalse(node3.isAdd());
1049:       assertFalse(node3.isContinue());
1050:       assertFalse(node3.hasMoreThanOneChild());
1051:       assertFalse(node3.isVar());
1052:       assertFalse(node3.isReturn());
1053:       assertFalse(node3.isLabel());
1054:       assertFalse(node3.isNew());
1055:       assertFalse(node3.isBlock());
1056:       assertFalse(node3.isDo());
1057:       assertFalse(node3.isWhile());
1058:       assertFalse(node3.isAssignAdd());
1059:       assertFalse(node3.isNull());
1060:       assertFalse(node3.isTypeOf());
1061:       assertFalse(node3.isDec());
1062:       assertFalse(node3.hasChildren());
1063:       assertFalse(node3.isSetterDef());
1064:       assertFalse(node3.isGetElem());
1065:       assertFalse(node3.isOr());
1066:       assertFalse(node3.isAssign());
1067:       assertFalse(node3.isCatch());
1068:       assertFalse(node3.isCall());
1069:       assertFalse(node3.isName());
1070:       assertFalse(node3.isRegExp());
1071:       assertFalse(node3.isScript());
1072:       assertFalse(node3.isTrue());
1073:       assertEquals(31, node3.getCharno());
1074:       assertFalse(node3.isWith());
1075:       assertFalse(node3.hasOneChild());
1076:       assertEquals(0, node3.getChildCount());
1077:       assertFalse(node3.isFor());
1078:       assertFalse(node3.isTry());
1079:       assertFalse(node3.isDefaultCase());
1080:       assertFalse(node3.isGetterDef());
1081:       assertFalse(node3.isArrayLit());
1082:       assertEquals(458783, node3.getSourcePosition());
1083:       assertFalse(node3.isStringKey());
1084:       assertFalse(node3.isLabelName());
1085:       assertFalse(node3.isParamList());
1086:       assertFalse(node3.isSwitch());
1087:       
1088:       Node node4 = node0.cloneNode();
1089:       assertSame(node0, node2);
1090:       assertNotSame(node0, node4);
1091:       assertNotSame(node4, node2);
1092:       assertNotSame(node4, node0);
1093:       assertEquals(52, Node.LENGTH);
1094:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1095:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1096:       assertEquals(40, Node.ORIGINALNAME_PROP);
1097:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1098:       assertEquals(49, Node.DIRECT_EVAL);
1099:       assertEquals(50, Node.FREE_CALL);
1100:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1101:       assertEquals(57, Node.REFLECTED_OBJECT);
1102:       assertEquals(46, Node.IS_NAMESPACE);
1103:       assertEquals(54, Node.SLASH_V);
1104:       assertEquals(2, Node.POST_FLAG);
1105:       assertEquals(8, Node.FLAG_NO_THROWS);
1106:       assertEquals(39, Node.EMPTY_BLOCK);
1107:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1108:       assertEquals(55, Node.INFERRED_FUNCTION);
1109:       assertEquals(29, Node.JSDOC_INFO_PROP);
1110:       assertEquals(30, Node.VAR_ARGS_NAME);
1111:       assertEquals(57, Node.LAST_PROP);
1112:       assertEquals(47, Node.IS_DISPATCHER);
1113:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1114:       assertEquals(53, Node.INPUT_ID);
1115:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1116:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1117:       assertEquals(43, Node.IS_CONSTANT_NAME);
1118:       assertEquals(56, Node.CHANGE_TIME);
1119:       assertEquals(36, Node.QUOTED_PROP);
1120:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1121:       assertEquals(37, Node.OPT_ARG_NAME);
1122:       assertEquals(32, Node.INCRDECR_PROP);
1123:       assertEquals(48, Node.DIRECTIVES);
1124:       assertEquals(4095, Node.COLUMN_MASK);
1125:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1126:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1127:       assertEquals(1, Node.DECR_FLAG);
1128:       assertEquals(12, Node.COLUMN_BITS);
1129:       assertEquals(29, Node.JSDOC_INFO_PROP);
1130:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1131:       assertEquals(56, Node.CHANGE_TIME);
1132:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1133:       assertEquals(47, Node.IS_DISPATCHER);
1134:       assertEquals(2, Node.POST_FLAG);
1135:       assertEquals(53, Node.INPUT_ID);
1136:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1137:       assertEquals(32, Node.INCRDECR_PROP);
1138:       assertEquals(1, Node.DECR_FLAG);
1139:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1140:       assertEquals(30, Node.VAR_ARGS_NAME);
1141:       assertEquals(46, Node.IS_NAMESPACE);
1142:       assertEquals(54, Node.SLASH_V);
1143:       assertEquals(43, Node.IS_CONSTANT_NAME);
1144:       assertEquals(50, Node.FREE_CALL);
1145:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1146:       assertEquals(40, Node.ORIGINALNAME_PROP);
1147:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1148:       assertEquals(8, Node.FLAG_NO_THROWS);
1149:       assertEquals(57, Node.REFLECTED_OBJECT);
1150:       assertEquals(52, Node.LENGTH);
1151:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1152:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1153:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1154:       assertEquals(39, Node.EMPTY_BLOCK);
1155:       assertEquals(57, Node.LAST_PROP);
1156:       assertEquals(49, Node.DIRECT_EVAL);
1157:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1158:       assertEquals(55, Node.INFERRED_FUNCTION);
1159:       assertEquals(12, Node.COLUMN_BITS);
1160:       assertEquals(36, Node.QUOTED_PROP);
1161:       assertEquals(4095, Node.COLUMN_MASK);
1162:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1163:       assertEquals(37, Node.OPT_ARG_NAME);
1164:       assertEquals(48, Node.DIRECTIVES);
1165:       assertNotNull(node4);
1166:       assertFalse(node0.equals((Object)node3));
1167:       assertFalse(node0.equals((Object)node1));
1168:       assertFalse(node4.equals((Object)node2));
1169:       assertFalse(node4.equals((Object)node1));
1170:       assertFalse(node4.equals((Object)node3));
1171:       assertFalse(node4.equals((Object)node0));
1172:       assertFalse(node0.isSwitch());
1173:       assertFalse(node0.isCase());
1174:       assertFalse(node0.isInc());
1175:       assertFalse(node0.isHook());
1176:       assertFalse(node0.isThrow());
1177:       assertFalse(node0.isIf());
1178:       assertFalse(node0.isBreak());
1179:       assertFalse(node0.isComma());
1180:       assertFalse(node0.isDelProp());
1181:       assertFalse(node0.isEmpty());
1182:       assertFalse(node0.isIn());
1183:       assertFalse(node0.isTrue());
1184:       assertFalse(node0.isNE());
1185:       assertFalse(node0.isRegExp());
1186:       assertFalse(node0.isDefaultCase());
1187:       assertFalse(node0.isWith());
1188:       assertFalse(node0.isScript());
1189:       assertFalse(node0.isCatch());
1190:       assertFalse(node0.hasOneChild());
1191:       assertFalse(node0.isInstanceOf());
1192:       assertFalse(node0.isTry());
1193:       assertEquals(0, node0.getChildCount());
1194:       assertFalse(node0.isThis());
1195:       assertFalse(node0.isFor());
1196:       assertFalse(node0.isNumber());
1197:       assertFalse(node0.isGetterDef());
1198:       assertFalse(node0.isLabelName());
1199:       assertFalse(node0.isArrayLit());
1200:       assertFalse(node0.isStringKey());
1201:       assertFalse(node0.isParamList());
1202:       assertFalse(node0.isDo());
1203:       assertFalse(node0.isNew());
1204:       assertFalse(node0.isContinue());
1205:       assertFalse(node0.isAdd());
1206:       assertFalse(node0.hasMoreThanOneChild());
1207:       assertTrue(node0.isString());
1208:       assertFalse(node0.isBlock());
1209:       assertFalse(node0.isLabel());
1210:       assertFalse(node0.isAssignAdd());
1211:       assertFalse(node0.isReturn());
1212:       assertFalse(node0.isWhile());
1213:       assertFalse(node0.isVar());
1214:       assertFalse(node0.isNull());
1215:       assertFalse(node0.isTypeOf());
1216:       assertFalse(node0.isDec());
1217:       assertFalse(node0.hasChildren());
1218:       assertFalse(node0.isAssign());
1219:       assertFalse(node0.isGetElem());
1220:       assertFalse(node0.isCall());
1221:       assertFalse(node0.isSetterDef());
1222:       assertFalse(node0.isOr());
1223:       assertFalse(node0.isName());
1224:       assertEquals(2489, node0.getLineno());
1225:       assertFalse(node0.isDebugger());
1226:       assertFalse(node0.isFunction());
1227:       assertFalse(node0.isVoid());
1228:       assertFalse(node0.isNot());
1229:       assertEquals(10194974, node0.getSourcePosition());
1230:       assertFalse(node0.isExprResult());
1231:       assertEquals(40, node0.getType());
1232:       assertFalse(node0.isFalse());
1233:       assertFalse(node0.isGetProp());
1234:       assertFalse(node0.isCast());
1235:       assertFalse(node0.isObjectLit());
1236:       assertEquals(30, node0.getCharno());
1237:       assertFalse(node0.isAnd());
1238:       assertFalse(node4.isArrayLit());
1239:       assertFalse(node4.isFor());
1240:       assertFalse(node4.isGetterDef());
1241:       assertFalse(node4.isDebugger());
1242:       assertFalse(node4.isFunction());
1243:       assertFalse(node4.isRegExp());
1244:       assertFalse(node4.isIf());
1245:       assertFalse(node4.isTrue());
1246:       assertFalse(node4.isNE());
1247:       assertFalse(node4.isDelProp());
1248:       assertFalse(node4.isVoid());
1249:       assertFalse(node4.isIn());
1250:       assertEquals(40, node4.getType());
1251:       assertEquals(0, node4.getChildCount());
1252:       assertFalse(node4.isDefaultCase());
1253:       assertFalse(node4.isSetterDef());
1254:       assertFalse(node4.isInc());
1255:       assertFalse(node4.isEmpty());
1256:       assertFalse(node4.isCall());
1257:       assertFalse(node4.isThrow());
1258:       assertFalse(node4.isFalse());
1259:       assertEquals(30, node4.getCharno());
1260:       assertFalse(node4.isNull());
1261:       assertFalse(node4.isBreak());
1262:       assertFalse(node4.isName());
1263:       assertFalse(node4.isReturn());
1264:       assertFalse(node4.isAnd());
1265:       assertFalse(node4.isObjectLit());
1266:       assertFalse(node4.isComma());
1267:       assertFalse(node4.isNot());
1268:       assertFalse(node4.hasChildren());
1269:       assertFalse(node4.isWhile());
1270:       assertFalse(node4.isGetProp());
1271:       assertFalse(node4.isCast());
1272:       assertFalse(node4.isDec());
1273:       assertFalse(node4.isAssign());
1274:       assertFalse(node4.isTypeOf());
1275:       assertFalse(node4.isExprResult());
1276:       assertFalse(node4.isGetElem());
1277:       assertEquals(10194974, node4.getSourcePosition());
1278:       assertFalse(node4.isLabelName());
1279:       assertFalse(node4.isContinue());
1280:       assertFalse(node4.isLabel());
1281:       assertEquals(2489, node4.getLineno());
1282:       assertFalse(node4.isOr());
1283:       assertFalse(node4.isNew());
1284:       assertFalse(node4.isAdd());
1285:       assertFalse(node4.isAssignAdd());
1286:       assertFalse(node4.isDo());
1287:       assertFalse(node4.isHook());
1288:       assertFalse(node4.isVar());
1289:       assertFalse(node4.isStringKey());
1290:       assertFalse(node4.isBlock());
1291:       assertFalse(node4.isSwitch());
1292:       assertFalse(node4.isParamList());
1293:       assertFalse(node4.hasMoreThanOneChild());
1294:       assertFalse(node4.isInstanceOf());
1295:       assertFalse(node4.isCatch());
1296:       assertFalse(node4.isWith());
1297:       assertFalse(node4.isScript());
1298:       assertFalse(node4.isThis());
1299:       assertFalse(node4.isNumber());
1300:       assertFalse(node4.isCase());
1301:       assertTrue(node4.isString());
1302:       assertFalse(node4.isTry());
1303:       assertFalse(node4.hasOneChild());
1304:       
1305:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1502));
1306:       assertNotNull(node_SideEffectFlags0);
1307:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1308:       assertEquals((-1502), node_SideEffectFlags0.valueOf());
1309:       
1310:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
1311:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1312:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1313:       assertNotNull(node_SideEffectFlags1);
1314:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1315:       assertEquals((-1502), node_SideEffectFlags0.valueOf());
1316:       assertEquals((-1502), node_SideEffectFlags1.valueOf());
1317:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1318:       
1319:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
1320:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1321:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1322:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1323:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1324:       assertNotNull(node_SideEffectFlags2);
1325:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1326:       assertEquals((-1504), node_SideEffectFlags0.valueOf());
1327:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1328:       assertEquals((-1504), node_SideEffectFlags2.valueOf());
1329:       
1330:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
1331:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1332:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1333:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1334:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1335:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1336:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1337:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1338:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1339:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1340:       assertNotNull(node_SideEffectFlags3);
1341:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1342:       assertEquals(31, node_SideEffectFlags0.valueOf());
1343:       assertEquals(31, node_SideEffectFlags1.valueOf());
1344:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1345:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
1346:       assertEquals(31, node_SideEffectFlags3.valueOf());
1347:       
1348:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
1349:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1350:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1351:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1352:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1353:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1354:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1355:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1356:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1357:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1358:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1359:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1360:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1361:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1362:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1363:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1364:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1365:       assertNotNull(node_SideEffectFlags4);
1366:       assertEquals(0, node_SideEffectFlags0.valueOf());
1367:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1368:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1369:       assertEquals(0, node_SideEffectFlags1.valueOf());
1370:       assertEquals(0, node_SideEffectFlags3.valueOf());
1371:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1372:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
1373:       assertEquals(0, node_SideEffectFlags4.valueOf());
1374:       
1375:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
1376:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1377:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1378:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1379:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1380:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1381:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1382:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1383:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1384:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1385:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1386:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1387:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1388:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1389:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1390:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1391:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1392:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1393:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1394:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
1395:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1396:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
1397:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
1398:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
1399:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
1400:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
1401:       assertNotNull(node_SideEffectFlags5);
1402:       assertEquals(0, node_SideEffectFlags0.valueOf());
1403:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1404:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1405:       assertEquals(0, node_SideEffectFlags1.valueOf());
1406:       assertEquals(0, node_SideEffectFlags3.valueOf());
1407:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1408:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
1409:       assertEquals(0, node_SideEffectFlags4.valueOf());
1410:       assertEquals(0, node_SideEffectFlags5.valueOf());
1411:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
1412:       
1413:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags1.setMutatesGlobalState();
1414:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1415:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1416:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1417:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1418:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1419:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1420:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1421:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1422:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1423:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1424:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1425:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1426:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
1427:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
1428:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
1429:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
1430:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
1431:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
1432:       assertNotNull(node_SideEffectFlags6);
1433:       assertEquals(0, node_SideEffectFlags0.valueOf());
1434:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1435:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1436:       assertEquals(0, node_SideEffectFlags1.valueOf());
1437:       assertEquals(0, node_SideEffectFlags6.valueOf());
1438:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
1439:       
1440:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags3.setReturnsTainted();
1441:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
1442:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
1443:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
1444:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
1445:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
1446:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
1447:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
1448:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1449:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1450:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1451:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1452:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1453:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1454:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1455:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1456:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1457:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1458:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1459:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1460:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1461:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
1462:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
1463:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1464:       assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
1465:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1466:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1467:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1468:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1469:       assertNotNull(node_SideEffectFlags7);
1470:       assertTrue(node_SideEffectFlags7.areAllFlagsSet());
1471:       assertEquals(0, node_SideEffectFlags7.valueOf());
1472:       assertEquals(0, node_SideEffectFlags0.valueOf());
1473:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1474:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1475:       assertEquals(0, node_SideEffectFlags1.valueOf());
1476:       assertEquals(0, node_SideEffectFlags3.valueOf());
1477:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1478:       
1479:       Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags3.setMutatesArguments();
1480:       assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
1481:       assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
1482:       assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
1483:       assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
1484:       assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
1485:       assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
1486:       assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
1487:       assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
1488:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1489:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1490:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1491:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1492:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1493:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1494:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1495:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1496:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1497:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1498:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1499:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1500:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1501:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1502:       assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
1503:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
1504:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
1505:       assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
1506:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1507:       assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
1508:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1509:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1510:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1511:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1512:       assertNotNull(node_SideEffectFlags8);
1513:       assertTrue(node_SideEffectFlags8.areAllFlagsSet());
1514:       assertEquals(0, node_SideEffectFlags8.valueOf());
1515:       assertEquals(0, node_SideEffectFlags0.valueOf());
1516:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1517:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1518:       assertEquals(0, node_SideEffectFlags1.valueOf());
1519:       assertEquals(0, node_SideEffectFlags3.valueOf());
1520:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1521:       
1522:       Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags6.clearAllFlags();
1523:       assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
1524:       assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
1525:       assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
1526:       assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
1527:       assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
1528:       assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
1529:       assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
1530:       assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
1531:       assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
1532:       assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
1533:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1534:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1535:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1536:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1537:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1538:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1539:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1540:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1541:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1542:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1543:       assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
1544:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1545:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1546:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1547:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1548:       assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
1549:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
1550:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
1551:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
1552:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
1553:       assertSame(node_SideEffectFlags6, node_SideEffectFlags8);
1554:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
1555:       assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
1556:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
1557:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
1558:       assertSame(node_SideEffectFlags6, node_SideEffectFlags9);
1559:       assertNotNull(node_SideEffectFlags9);
1560:       assertEquals(31, node_SideEffectFlags9.valueOf());
1561:       assertFalse(node_SideEffectFlags9.areAllFlagsSet());
1562:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1563:       assertEquals(31, node_SideEffectFlags0.valueOf());
1564:       assertEquals(31, node_SideEffectFlags1.valueOf());
1565:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1566:       assertFalse(node_SideEffectFlags6.areAllFlagsSet());
1567:       assertEquals(31, node_SideEffectFlags6.valueOf());
1568:       
1569:       Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags9.setMutatesGlobalState();
1570:       assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
1571:       assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
1572:       assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
1573:       assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
1574:       assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
1575:       assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
1576:       assertSame(node_SideEffectFlags9, node_SideEffectFlags10);
1577:       assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
1578:       assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
1579:       assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
1580:       assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
1581:       assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
1582:       assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
1583:       assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
1584:       assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
1585:       assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
1586:       assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
1587:       assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
1588:       assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
1589:       assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
1590:       assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
1591:       assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
1592:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1593:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1594:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1595:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1596:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1597:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1598:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1599:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1600:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1601:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1602:       assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
1603:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1604:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1605:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1606:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1607:       assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
1608:       assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
1609:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
1610:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
1611:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
1612:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
1613:       assertSame(node_SideEffectFlags6, node_SideEffectFlags8);
1614:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
1615:       assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
1616:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
1617:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
1618:       assertSame(node_SideEffectFlags6, node_SideEffectFlags10);
1619:       assertSame(node_SideEffectFlags6, node_SideEffectFlags9);
1620:       assertNotNull(node_SideEffectFlags10);
1621:       assertEquals(24, node_SideEffectFlags9.valueOf());
1622:       assertFalse(node_SideEffectFlags9.areAllFlagsSet());
1623:       assertEquals(24, node_SideEffectFlags10.valueOf());
1624:       assertFalse(node_SideEffectFlags10.areAllFlagsSet());
1625:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1626:       assertEquals(24, node_SideEffectFlags0.valueOf());
1627:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1628:       assertEquals(24, node_SideEffectFlags1.valueOf());
1629:       assertEquals(24, node_SideEffectFlags6.valueOf());
1630:       assertFalse(node_SideEffectFlags6.areAllFlagsSet());
1631:       
1632:       Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags4.setMutatesArguments();
1633:       assertSame(node_SideEffectFlags11, node_SideEffectFlags2);
1634:       assertSame(node_SideEffectFlags11, node_SideEffectFlags7);
1635:       assertSame(node_SideEffectFlags11, node_SideEffectFlags4);
1636:       assertSame(node_SideEffectFlags11, node_SideEffectFlags8);
1637:       assertSame(node_SideEffectFlags11, node_SideEffectFlags0);
1638:       assertSame(node_SideEffectFlags11, node_SideEffectFlags1);
1639:       assertSame(node_SideEffectFlags11, node_SideEffectFlags9);
1640:       assertSame(node_SideEffectFlags11, node_SideEffectFlags5);
1641:       assertSame(node_SideEffectFlags11, node_SideEffectFlags10);
1642:       assertSame(node_SideEffectFlags11, node_SideEffectFlags6);
1643:       assertSame(node_SideEffectFlags11, node_SideEffectFlags3);
1644:       assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
1645:       assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
1646:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1647:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1648:       assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
1649:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1650:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1651:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1652:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1653:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1654:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1655:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1656:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1657:       assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
1658:       assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
1659:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1660:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1661:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1662:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1663:       assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
1664:       assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
1665:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
1666:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
1667:       assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
1668:       assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
1669:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1670:       assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
1671:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1672:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1673:       assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
1674:       assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
1675:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1676:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1677:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
1678:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1679:       assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
1680:       assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
1681:       assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
1682:       assertSame(node_SideEffectFlags4, node_SideEffectFlags11);
1683:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1684:       assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
1685:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1686:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
1687:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1688:       assertNotNull(node_SideEffectFlags11);
1689:       assertFalse(node_SideEffectFlags11.areAllFlagsSet());
1690:       assertEquals(24, node_SideEffectFlags11.valueOf());
1691:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1692:       assertEquals(24, node_SideEffectFlags0.valueOf());
1693:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1694:       assertEquals(24, node_SideEffectFlags1.valueOf());
1695:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
1696:       assertEquals(24, node_SideEffectFlags3.valueOf());
1697:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
1698:       assertEquals(24, node_SideEffectFlags4.valueOf());
1699:       
1700:       Node.SideEffectFlags node_SideEffectFlags12 = node_SideEffectFlags11.setMutatesGlobalState();
1701:       assertSame(node_SideEffectFlags11, node_SideEffectFlags7);
1702:       assertSame(node_SideEffectFlags11, node_SideEffectFlags2);
1703:       assertSame(node_SideEffectFlags11, node_SideEffectFlags4);
1704:       assertSame(node_SideEffectFlags11, node_SideEffectFlags8);
1705:       assertSame(node_SideEffectFlags11, node_SideEffectFlags1);
1706:       assertSame(node_SideEffectFlags11, node_SideEffectFlags9);
1707:       assertSame(node_SideEffectFlags11, node_SideEffectFlags0);
1708:       assertSame(node_SideEffectFlags11, node_SideEffectFlags5);
1709:       assertSame(node_SideEffectFlags11, node_SideEffectFlags10);
1710:       assertSame(node_SideEffectFlags11, node_SideEffectFlags6);
1711:       assertSame(node_SideEffectFlags11, node_SideEffectFlags12);
1712:       assertSame(node_SideEffectFlags11, node_SideEffectFlags3);
1713:       assertSame(node_SideEffectFlags12, node_SideEffectFlags11);
1714:       assertSame(node_SideEffectFlags12, node_SideEffectFlags1);
1715:       assertSame(node_SideEffectFlags12, node_SideEffectFlags10);
1716:       assertSame(node_SideEffectFlags12, node_SideEffectFlags4);
1717:       assertSame(node_SideEffectFlags12, node_SideEffectFlags5);
1718:       assertSame(node_SideEffectFlags12, node_SideEffectFlags7);
1719:       assertSame(node_SideEffectFlags12, node_SideEffectFlags8);
1720:       assertSame(node_SideEffectFlags12, node_SideEffectFlags6);
1721:       assertSame(node_SideEffectFlags12, node_SideEffectFlags2);
1722:       assertSame(node_SideEffectFlags12, node_SideEffectFlags0);
1723:       assertSame(node_SideEffectFlags12, node_SideEffectFlags9);
1724:       assertSame(node_SideEffectFlags12, node_SideEffectFlags3);
1725:       assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
1726:       assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
1727:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1728:       assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
1729:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1730:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1731:       assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
1732:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1733:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1734:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1735:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1736:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1737:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1738:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1739:       assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
1740:       assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
1741:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1742:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1743:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1744:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1745:       assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
1746:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
1747:       assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
1748:       assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
1749:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
1750:       assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
1751:       assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
1752:       assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
1753:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1754:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1755:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1756:       assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
1757:       assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
1758:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1759:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1760:       assertSame(node_SideEffectFlags3, node_SideEffectFlags12);
1761:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
1762:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1763:       assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
1764:       assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
1765:       assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
1766:       assertSame(node_SideEffectFlags4, node_SideEffectFlags11);
1767:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1768:       assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
1769:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1770:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
1771:       assertSame(node_SideEffectFlags4, node_SideEffectFlags12);
1772:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1773:       assertNotNull(node_SideEffectFlags12);
1774:       assertFalse(node_SideEffectFlags11.areAllFlagsSet());
1775:       assertEquals(24, node_SideEffectFlags11.valueOf());
1776:       assertEquals(24, node_SideEffectFlags12.valueOf());
1777:       assertFalse(node_SideEffectFlags12.areAllFlagsSet());
1778:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1779:       assertEquals(24, node_SideEffectFlags0.valueOf());
1780:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1781:       assertEquals(24, node_SideEffectFlags1.valueOf());
1782:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
1783:       assertEquals(24, node_SideEffectFlags3.valueOf());
1784:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
1785:       assertEquals(24, node_SideEffectFlags4.valueOf());
1786:       
1787:       Node node5 = new Node(52, node3, node3);
1788:       assertEquals(48, Node.DIRECTIVES);
1789:       assertEquals(8, Node.FLAG_NO_THROWS);
1790:       assertEquals(4095, Node.COLUMN_MASK);
1791:       assertEquals(55, Node.INFERRED_FUNCTION);
1792:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1793:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1794:       assertEquals(39, Node.EMPTY_BLOCK);
1795:       assertEquals(50, Node.FREE_CALL);
1796:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1797:       assertEquals(43, Node.IS_CONSTANT_NAME);
1798:       assertEquals(36, Node.QUOTED_PROP);
1799:       assertEquals(57, Node.REFLECTED_OBJECT);
1800:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1801:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1802:       assertEquals(1, Node.DECR_FLAG);
1803:       assertEquals(12, Node.COLUMN_BITS);
1804:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1805:       assertEquals(32, Node.INCRDECR_PROP);
1806:       assertEquals(37, Node.OPT_ARG_NAME);
1807:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1808:       assertEquals(29, Node.JSDOC_INFO_PROP);
1809:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1810:       assertEquals(49, Node.DIRECT_EVAL);
1811:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1812:       assertEquals(56, Node.CHANGE_TIME);
1813:       assertEquals(46, Node.IS_NAMESPACE);
1814:       assertEquals(54, Node.SLASH_V);
1815:       assertEquals(53, Node.INPUT_ID);
1816:       assertEquals(52, Node.LENGTH);
1817:       assertEquals(40, Node.ORIGINALNAME_PROP);
1818:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1819:       assertEquals(30, Node.VAR_ARGS_NAME);
1820:       assertEquals(57, Node.LAST_PROP);
1821:       assertEquals(2, Node.POST_FLAG);
1822:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1823:       assertEquals(47, Node.IS_DISPATCHER);
1824:       assertEquals(54, Node.SLASH_V);
1825:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1826:       assertEquals(57, Node.REFLECTED_OBJECT);
1827:       assertEquals(52, Node.LENGTH);
1828:       assertEquals(49, Node.DIRECT_EVAL);
1829:       assertEquals(50, Node.FREE_CALL);
1830:       assertEquals(40, Node.ORIGINALNAME_PROP);
1831:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1832:       assertEquals(39, Node.EMPTY_BLOCK);
1833:       assertEquals(55, Node.INFERRED_FUNCTION);
1834:       assertEquals(2, Node.POST_FLAG);
1835:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1836:       assertEquals(8, Node.FLAG_NO_THROWS);
1837:       assertEquals(29, Node.JSDOC_INFO_PROP);
1838:       assertEquals(30, Node.VAR_ARGS_NAME);
1839:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1840:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1841:       assertEquals(47, Node.IS_DISPATCHER);
1842:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1843:       assertEquals(57, Node.LAST_PROP);
1844:       assertEquals(53, Node.INPUT_ID);
1845:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1846:       assertEquals(36, Node.QUOTED_PROP);
1847:       assertEquals(43, Node.IS_CONSTANT_NAME);
1848:       assertEquals(56, Node.CHANGE_TIME);
1849:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1850:       assertEquals(48, Node.DIRECTIVES);
1851:       assertEquals(37, Node.OPT_ARG_NAME);
1852:       assertEquals(46, Node.IS_NAMESPACE);
1853:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1854:       assertEquals(4095, Node.COLUMN_MASK);
1855:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1856:       assertEquals(1, Node.DECR_FLAG);
1857:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1858:       assertEquals(12, Node.COLUMN_BITS);
1859:       assertEquals(32, Node.INCRDECR_PROP);
1860:       assertNotNull(node5);
1861:       assertFalse(node5.equals((Object)node3));
1862:       assertFalse(node5.equals((Object)node2));
1863:       assertFalse(node5.equals((Object)node0));
1864:       assertFalse(node5.equals((Object)node1));
1865:       assertFalse(node5.equals((Object)node4));
1866:       assertFalse(node3.equals((Object)node2));
1867:       assertFalse(node3.equals((Object)node1));
1868:       assertFalse(node3.equals((Object)node4));
1869:       assertFalse(node3.equals((Object)node0));
1870:       assertFalse(node5.isBreak());
1871:       assertFalse(node5.isGetProp());
1872:       assertFalse(node5.isHook());
1873:       assertFalse(node5.isFalse());
1874:       assertFalse(node5.isThrow());
1875:       assertFalse(node5.isComma());
1876:       assertFalse(node5.isThis());
1877:       assertFalse(node5.isScript());
1878:       assertFalse(node5.isString());
1879:       assertFalse(node5.isSwitch());
1880:       assertFalse(node5.isCase());
1881:       assertFalse(node5.isAnd());
1882:       assertFalse(node5.isObjectLit());
1883:       assertFalse(node5.isNot());
1884:       assertEquals((-1), node5.getCharno());
1885:       assertFalse(node5.isNumber());
1886:       assertFalse(node5.isNE());
1887:       assertFalse(node5.isGetterDef());
1888:       assertFalse(node5.isIf());
1889:       assertTrue(node5.hasChildren());
1890:       assertEquals((-1), node5.getLineno());
1891:       assertFalse(node5.isCast());
1892:       assertFalse(node5.hasMoreThanOneChild());
1893:       assertFalse(node5.isContinue());
1894:       assertFalse(node5.isFor());
1895:       assertEquals(1, node5.getChildCount());
1896:       assertFalse(node5.isRegExp());
1897:       assertFalse(node5.isWith());
1898:       assertFalse(node5.isInc());
1899:       assertFalse(node5.isIn());
1900:       assertFalse(node5.isNull());
1901:       assertEquals(52, node5.getType());
1902:       assertFalse(node5.isParamList());
1903:       assertFalse(node5.isName());
1904:       assertFalse(node5.isCall());
1905:       assertFalse(node5.isSetterDef());
1906:       assertFalse(node5.isVar());
1907:       assertFalse(node5.isCatch());
1908:       assertFalse(node5.isBlock());
1909:       assertFalse(node5.isWhile());
1910:       assertFalse(node5.isFunction());
1911:       assertFalse(node5.isTry());
1912:       assertFalse(node5.isArrayLit());
1913:       assertFalse(node5.isStringKey());
1914:       assertFalse(node5.isDebugger());
1915:       assertFalse(node5.isTypeOf());
1916:       assertEquals((-1), node5.getSourcePosition());
1917:       assertFalse(node5.isDec());
1918:       assertFalse(node5.isDelProp());
1919:       assertFalse(node5.isGetElem());
1920:       assertFalse(node5.isEmpty());
1921:       assertFalse(node5.isLabelName());
1922:       assertFalse(node5.isAssignAdd());
1923:       assertFalse(node5.isAssign());
1924:       assertFalse(node5.isReturn());
1925:       assertTrue(node5.hasOneChild());
1926:       assertFalse(node5.isLabel());
1927:       assertTrue(node5.isInstanceOf());
1928:       assertFalse(node5.isDefaultCase());
1929:       assertFalse(node5.isNew());
1930:       assertFalse(node5.isAdd());
1931:       assertFalse(node5.isVoid());
1932:       assertFalse(node5.isDo());
1933:       assertFalse(node5.isExprResult());
1934:       assertFalse(node5.isOr());
1935:       assertFalse(node5.isTrue());
1936:       assertFalse(node3.isInc());
1937:       assertFalse(node3.isString());
1938:       assertFalse(node3.isHook());
1939:       assertFalse(node3.isCase());
1940:       assertTrue(node3.isNumber());
1941:       assertFalse(node3.isThrow());
1942:       assertFalse(node3.isNE());
1943:       assertFalse(node3.isComma());
1944:       assertFalse(node3.isThis());
1945:       assertFalse(node3.isBreak());
1946:       assertFalse(node3.isEmpty());
1947:       assertFalse(node3.isIn());
1948:       assertFalse(node3.isInstanceOf());
1949:       assertFalse(node3.isVoid());
1950:       assertFalse(node3.isDelProp());
1951:       assertFalse(node3.isIf());
1952:       assertFalse(node3.isExprResult());
1953:       assertFalse(node3.isDebugger());
1954:       assertFalse(node3.isNot());
1955:       assertFalse(node3.isObjectLit());
1956:       assertFalse(node3.isFunction());
1957:       assertEquals(112, node3.getLineno());
1958:       assertFalse(node3.isGetProp());
1959:       assertFalse(node3.isFalse());
1960:       assertFalse(node3.isCast());
1961:       assertFalse(node3.isAnd());
1962:       assertEquals(39, node3.getType());
1963:       assertFalse(node3.isAdd());
1964:       assertFalse(node3.isContinue());
1965:       assertFalse(node3.hasMoreThanOneChild());
1966:       assertFalse(node3.isVar());
1967:       assertFalse(node3.isReturn());
1968:       assertFalse(node3.isLabel());
1969:       assertFalse(node3.isNew());
1970:       assertFalse(node3.isBlock());
1971:       assertFalse(node3.isDo());
1972:       assertFalse(node3.isWhile());
1973:       assertFalse(node3.isAssignAdd());
1974:       assertFalse(node3.isNull());
1975:       assertFalse(node3.isTypeOf());
1976:       assertFalse(node3.isDec());
1977:       assertFalse(node3.hasChildren());
1978:       assertFalse(node3.isSetterDef());
1979:       assertFalse(node3.isGetElem());
1980:       assertFalse(node3.isOr());
1981:       assertFalse(node3.isAssign());
1982:       assertFalse(node3.isCatch());
1983:       assertFalse(node3.isCall());
1984:       assertFalse(node3.isName());
1985:       assertFalse(node3.isRegExp());
1986:       assertFalse(node3.isScript());
1987:       assertFalse(node3.isTrue());
1988:       assertEquals(31, node3.getCharno());
1989:       
1990:       boolean boolean3 = node2.hasOneChild();
1991:       assertFalse(boolean3);
1992:       assertSame(node0, node2);
1993:       assertNotSame(node0, node4);
1994:       assertNotSame(node1, node3);
1995:       assertNotSame(node2, node4);
1996:       assertSame(node2, node0);
1997:       assertEquals(52, Node.LENGTH);
1998:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1999:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2000:       assertEquals(40, Node.ORIGINALNAME_PROP);
2001:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2002:       assertEquals(49, Node.DIRECT_EVAL);
2003:       assertEquals(50, Node.FREE_CALL);
2004:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2005:       assertEquals(57, Node.REFLECTED_OBJECT);
2006:       assertEquals(46, Node.IS_NAMESPACE);
2007:       assertEquals(54, Node.SLASH_V);
2008:       assertEquals(2, Node.POST_FLAG);
2009:       assertEquals(8, Node.FLAG_NO_THROWS);
2010:       assertEquals(39, Node.EMPTY_BLOCK);
2011:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2012:       assertEquals(55, Node.INFERRED_FUNCTION);
2013:       assertEquals(29, Node.JSDOC_INFO_PROP);
2014:       assertEquals(30, Node.VAR_ARGS_NAME);
2015:       assertEquals(57, Node.LAST_PROP);
2016:       assertEquals(47, Node.IS_DISPATCHER);
2017:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2018:       assertEquals(53, Node.INPUT_ID);
2019:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2020:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2021:       assertEquals(43, Node.IS_CONSTANT_NAME);
2022:       assertEquals(56, Node.CHANGE_TIME);
2023:       assertEquals(36, Node.QUOTED_PROP);
2024:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2025:       assertEquals(37, Node.OPT_ARG_NAME);
2026:       assertEquals(32, Node.INCRDECR_PROP);
2027:       assertEquals(48, Node.DIRECTIVES);
2028:       assertEquals(4095, Node.COLUMN_MASK);
2029:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2030:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2031:       assertEquals(1, Node.DECR_FLAG);
2032:       assertEquals(12, Node.COLUMN_BITS);
2033:       assertEquals(46, Node.IS_NAMESPACE);
2034:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2035:       assertEquals(32, Node.INCRDECR_PROP);
2036:       assertEquals(1, Node.DECR_FLAG);
2037:       assertEquals(37, Node.OPT_ARG_NAME);
2038:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2039:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2040:       assertEquals(57, Node.LAST_PROP);
2041:       assertEquals(47, Node.IS_DISPATCHER);
2042:       assertEquals(2, Node.POST_FLAG);
2043:       assertEquals(30, Node.VAR_ARGS_NAME);
2044:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2045:       assertEquals(12, Node.COLUMN_BITS);
2046:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2047:       assertEquals(40, Node.ORIGINALNAME_PROP);
2048:       assertEquals(43, Node.IS_CONSTANT_NAME);
2049:       assertEquals(50, Node.FREE_CALL);
2050:       assertEquals(54, Node.SLASH_V);
2051:       assertEquals(4095, Node.COLUMN_MASK);
2052:       assertEquals(48, Node.DIRECTIVES);
2053:       assertEquals(55, Node.INFERRED_FUNCTION);
2054:       assertEquals(39, Node.EMPTY_BLOCK);
2055:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2056:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2057:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2058:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2059:       assertEquals(52, Node.LENGTH);
2060:       assertEquals(29, Node.JSDOC_INFO_PROP);
2061:       assertEquals(53, Node.INPUT_ID);
2062:       assertEquals(56, Node.CHANGE_TIME);
2063:       assertEquals(36, Node.QUOTED_PROP);
2064:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2065:       assertEquals(8, Node.FLAG_NO_THROWS);
2066:       assertEquals(49, Node.DIRECT_EVAL);
2067:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2068:       assertEquals(57, Node.REFLECTED_OBJECT);
2069:       assertEquals(57, Node.REFLECTED_OBJECT);
2070:       assertEquals(52, Node.LENGTH);
2071:       assertEquals(40, Node.ORIGINALNAME_PROP);
2072:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2073:       assertEquals(8, Node.FLAG_NO_THROWS);
2074:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2075:       assertEquals(50, Node.FREE_CALL);
2076:       assertEquals(54, Node.SLASH_V);
2077:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2078:       assertEquals(12, Node.COLUMN_BITS);
2079:       assertEquals(32, Node.INCRDECR_PROP);
2080:       assertEquals(4095, Node.COLUMN_MASK);
2081:       assertEquals(1, Node.DECR_FLAG);
2082:       assertEquals(48, Node.DIRECTIVES);
2083:       assertEquals(49, Node.DIRECT_EVAL);
2084:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2085:       assertEquals(37, Node.OPT_ARG_NAME);
2086:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2087:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2088:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2089:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2090:       assertEquals(53, Node.INPUT_ID);
2091:       assertEquals(29, Node.JSDOC_INFO_PROP);
2092:       assertEquals(43, Node.IS_CONSTANT_NAME);
2093:       assertEquals(56, Node.CHANGE_TIME);
2094:       assertEquals(36, Node.QUOTED_PROP);
2095:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2096:       assertEquals(46, Node.IS_NAMESPACE);
2097:       assertEquals(55, Node.INFERRED_FUNCTION);
2098:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2099:       assertEquals(39, Node.EMPTY_BLOCK);
2100:       assertEquals(47, Node.IS_DISPATCHER);
2101:       assertEquals(2, Node.POST_FLAG);
2102:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2103:       assertEquals(57, Node.LAST_PROP);
2104:       assertEquals(30, Node.VAR_ARGS_NAME);
2105:       assertFalse(node0.equals((Object)node3));
2106:       assertFalse(node0.equals((Object)node5));
2107:       assertFalse(node0.equals((Object)node1));
2108:       assertFalse(node0.equals((Object)node4));
2109:       assertFalse(node1.equals((Object)node5));
2110:       assertFalse(node1.equals((Object)node2));
2111:       assertFalse(node1.equals((Object)node4));
2112:       assertFalse(node1.equals((Object)node0));
2113:       assertFalse(node1.equals((Object)node3));
2114:       assertFalse(node2.equals((Object)node5));
2115:       assertFalse(node2.equals((Object)node4));
2116:       assertFalse(node2.equals((Object)node1));
2117:       assertFalse(node2.equals((Object)node3));
2118:       assertTrue(boolean3 == boolean1);
2119:       assertTrue(boolean3 == boolean0);
2120:       assertTrue(boolean3 == boolean2);
2121:       
2122:       boolean boolean4 = node4.isEquivalentToShallow(node0);
2123:       assertTrue(boolean4);
2124:       assertSame(node0, node2);
2125:       assertNotSame(node0, node4);
2126:       assertNotSame(node4, node2);
2127:       assertNotSame(node4, node0);
2128:       assertEquals(52, Node.LENGTH);
2129:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2130:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2131:       assertEquals(40, Node.ORIGINALNAME_PROP);
2132:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2133:       assertEquals(49, Node.DIRECT_EVAL);
2134:       assertEquals(50, Node.FREE_CALL);
2135:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2136:       assertEquals(57, Node.REFLECTED_OBJECT);
2137:       assertEquals(46, Node.IS_NAMESPACE);
2138:       assertEquals(54, Node.SLASH_V);
2139:       assertEquals(2, Node.POST_FLAG);
2140:       assertEquals(8, Node.FLAG_NO_THROWS);
2141:       assertEquals(39, Node.EMPTY_BLOCK);
2142:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2143:       assertEquals(55, Node.INFERRED_FUNCTION);
2144:       assertEquals(29, Node.JSDOC_INFO_PROP);
2145:       assertEquals(30, Node.VAR_ARGS_NAME);
2146:       assertEquals(57, Node.LAST_PROP);
2147:       assertEquals(47, Node.IS_DISPATCHER);
2148:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2149:       assertEquals(53, Node.INPUT_ID);
2150:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2151:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2152:       assertEquals(43, Node.IS_CONSTANT_NAME);
2153:       assertEquals(56, Node.CHANGE_TIME);
2154:       assertEquals(36, Node.QUOTED_PROP);
2155:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2156:       assertEquals(37, Node.OPT_ARG_NAME);
2157:       assertEquals(32, Node.INCRDECR_PROP);
2158:       assertEquals(48, Node.DIRECTIVES);
2159:       assertEquals(4095, Node.COLUMN_MASK);
2160:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2161:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2162:       assertEquals(1, Node.DECR_FLAG);
2163:       assertEquals(12, Node.COLUMN_BITS);
2164:       assertEquals(29, Node.JSDOC_INFO_PROP);
2165:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2166:       assertEquals(56, Node.CHANGE_TIME);
2167:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2168:       assertEquals(47, Node.IS_DISPATCHER);
2169:       assertEquals(2, Node.POST_FLAG);
2170:       assertEquals(53, Node.INPUT_ID);
2171:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2172:       assertEquals(32, Node.INCRDECR_PROP);
2173:       assertEquals(1, Node.DECR_FLAG);
2174:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2175:       assertEquals(30, Node.VAR_ARGS_NAME);
2176:       assertEquals(46, Node.IS_NAMESPACE);
2177:       assertEquals(54, Node.SLASH_V);
2178:       assertEquals(43, Node.IS_CONSTANT_NAME);
2179:       assertEquals(50, Node.FREE_CALL);
2180:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2181:       assertEquals(40, Node.ORIGINALNAME_PROP);
2182:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2183:       assertEquals(8, Node.FLAG_NO_THROWS);
2184:       assertEquals(57, Node.REFLECTED_OBJECT);
2185:       assertEquals(52, Node.LENGTH);
2186:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2187:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2188:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2189:       assertEquals(39, Node.EMPTY_BLOCK);
2190:       assertEquals(57, Node.LAST_PROP);
2191:       assertEquals(49, Node.DIRECT_EVAL);
2192:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2193:       assertEquals(55, Node.INFERRED_FUNCTION);
2194:       assertEquals(12, Node.COLUMN_BITS);
2195:       assertEquals(36, Node.QUOTED_PROP);
2196:       assertEquals(4095, Node.COLUMN_MASK);
2197:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2198:       assertEquals(37, Node.OPT_ARG_NAME);
2199:       assertEquals(48, Node.DIRECTIVES);
2200:       assertFalse(node0.equals((Object)node3));
2201:       assertFalse(node0.equals((Object)node5));
2202:       assertFalse(node0.equals((Object)node1));
2203:       assertFalse(node0.equals((Object)node4));
2204:       assertFalse(boolean4 == boolean1);
2205:       assertFalse(boolean4 == boolean3);
2206:       assertFalse(boolean4 == boolean2);
2207:       assertFalse(boolean4 == boolean0);
2208:       assertFalse(node4.equals((Object)node2));
2209:       assertFalse(node4.equals((Object)node5));
2210:       assertFalse(node4.equals((Object)node1));
2211:       assertFalse(node4.equals((Object)node3));
2212:       assertFalse(node4.equals((Object)node0));
2213:       
2214:       boolean boolean5 = node4.isName();
2215:       assertFalse(boolean5);
2216:       assertSame(node0, node2);
2217:       assertNotSame(node0, node4);
2218:       assertNotSame(node4, node2);
2219:       assertNotSame(node4, node0);
2220:       assertEquals(52, Node.LENGTH);
2221:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2222:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2223:       assertEquals(40, Node.ORIGINALNAME_PROP);
2224:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2225:       assertEquals(49, Node.DIRECT_EVAL);
2226:       assertEquals(50, Node.FREE_CALL);
2227:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2228:       assertEquals(57, Node.REFLECTED_OBJECT);
2229:       assertEquals(46, Node.IS_NAMESPACE);
2230:       assertEquals(54, Node.SLASH_V);
2231:       assertEquals(2, Node.POST_FLAG);
2232:       assertEquals(8, Node.FLAG_NO_THROWS);
2233:       assertEquals(39, Node.EMPTY_BLOCK);
2234:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2235:       assertEquals(55, Node.INFERRED_FUNCTION);
2236:       assertEquals(29, Node.JSDOC_INFO_PROP);
2237:       assertEquals(30, Node.VAR_ARGS_NAME);
2238:       assertEquals(57, Node.LAST_PROP);
2239:       assertEquals(47, Node.IS_DISPATCHER);
2240:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2241:       assertEquals(53, Node.INPUT_ID);
2242:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2243:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2244:       assertEquals(43, Node.IS_CONSTANT_NAME);
2245:       assertEquals(56, Node.CHANGE_TIME);
2246:       assertEquals(36, Node.QUOTED_PROP);
2247:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2248:       assertEquals(37, Node.OPT_ARG_NAME);
2249:       assertEquals(32, Node.INCRDECR_PROP);
2250:       assertEquals(48, Node.DIRECTIVES);
2251:       assertEquals(4095, Node.COLUMN_MASK);
2252:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2253:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2254:       assertEquals(1, Node.DECR_FLAG);
2255:       assertEquals(12, Node.COLUMN_BITS);
2256:       assertEquals(29, Node.JSDOC_INFO_PROP);
2257:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2258:       assertEquals(56, Node.CHANGE_TIME);
2259:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2260:       assertEquals(47, Node.IS_DISPATCHER);
2261:       assertEquals(2, Node.POST_FLAG);
2262:       assertEquals(53, Node.INPUT_ID);
2263:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2264:       assertEquals(32, Node.INCRDECR_PROP);
2265:       assertEquals(1, Node.DECR_FLAG);
2266:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2267:       assertEquals(30, Node.VAR_ARGS_NAME);
2268:       assertEquals(46, Node.IS_NAMESPACE);
2269:       assertEquals(54, Node.SLASH_V);
2270:       assertEquals(43, Node.IS_CONSTANT_NAME);
2271:       assertEquals(50, Node.FREE_CALL);
2272:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2273:       assertEquals(40, Node.ORIGINALNAME_PROP);
2274:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2275:       assertEquals(8, Node.FLAG_NO_THROWS);
2276:       assertEquals(57, Node.REFLECTED_OBJECT);
2277:       assertEquals(52, Node.LENGTH);
2278:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2279:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2280:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2281:       assertEquals(39, Node.EMPTY_BLOCK);
2282:       assertEquals(57, Node.LAST_PROP);
2283:       assertEquals(49, Node.DIRECT_EVAL);
2284:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2285:       assertEquals(55, Node.INFERRED_FUNCTION);
2286:       assertEquals(12, Node.COLUMN_BITS);
2287:       assertEquals(36, Node.QUOTED_PROP);
2288:       assertEquals(4095, Node.COLUMN_MASK);
2289:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2290:       assertEquals(37, Node.OPT_ARG_NAME);
2291:       assertEquals(48, Node.DIRECTIVES);
2292:       assertFalse(node0.equals((Object)node3));
2293:       assertFalse(node0.equals((Object)node5));
2294:       assertFalse(node0.equals((Object)node1));
2295:       assertFalse(node0.equals((Object)node4));
2296:       assertFalse(node4.equals((Object)node2));
2297:       assertFalse(node4.equals((Object)node5));
2298:       assertFalse(node4.equals((Object)node1));
2299:       assertFalse(node4.equals((Object)node3));
2300:       assertFalse(node4.equals((Object)node0));
2301:       assertTrue(boolean5 == boolean3);
2302:       assertTrue(boolean5 == boolean1);
2303:       assertTrue(boolean5 == boolean0);
2304:       assertFalse(boolean5 == boolean4);
2305:       assertTrue(boolean5 == boolean2);
2306:       
2307:       boolean boolean6 = node4.isDelProp();
2308:       assertFalse(boolean6);
2309:       assertSame(node0, node2);
2310:       assertNotSame(node0, node4);
2311:       assertNotSame(node4, node2);
2312:       assertNotSame(node4, node0);
2313:       assertEquals(52, Node.LENGTH);
2314:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2315:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2316:       assertEquals(40, Node.ORIGINALNAME_PROP);
2317:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2318:       assertEquals(49, Node.DIRECT_EVAL);
2319:       assertEquals(50, Node.FREE_CALL);
2320:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2321:       assertEquals(57, Node.REFLECTED_OBJECT);
2322:       assertEquals(46, Node.IS_NAMESPACE);
2323:       assertEquals(54, Node.SLASH_V);
2324:       assertEquals(2, Node.POST_FLAG);
2325:       assertEquals(8, Node.FLAG_NO_THROWS);
2326:       assertEquals(39, Node.EMPTY_BLOCK);
2327:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2328:       assertEquals(55, Node.INFERRED_FUNCTION);
2329:       assertEquals(29, Node.JSDOC_INFO_PROP);
2330:       assertEquals(30, Node.VAR_ARGS_NAME);
2331:       assertEquals(57, Node.LAST_PROP);
2332:       assertEquals(47, Node.IS_DISPATCHER);
2333:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2334:       assertEquals(53, Node.INPUT_ID);
2335:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2336:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2337:       assertEquals(43, Node.IS_CONSTANT_NAME);
2338:       assertEquals(56, Node.CHANGE_TIME);
2339:       assertEquals(36, Node.QUOTED_PROP);
2340:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2341:       assertEquals(37, Node.OPT_ARG_NAME);
2342:       assertEquals(32, Node.INCRDECR_PROP);
2343:       assertEquals(48, Node.DIRECTIVES);
2344:       assertEquals(4095, Node.COLUMN_MASK);
2345:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2346:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2347:       assertEquals(1, Node.DECR_FLAG);
2348:       assertEquals(12, Node.COLUMN_BITS);
2349:       assertEquals(29, Node.JSDOC_INFO_PROP);
2350:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2351:       assertEquals(56, Node.CHANGE_TIME);
2352:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2353:       assertEquals(47, Node.IS_DISPATCHER);
2354:       assertEquals(2, Node.POST_FLAG);
2355:       assertEquals(53, Node.INPUT_ID);
2356:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2357:       assertEquals(32, Node.INCRDECR_PROP);
2358:       assertEquals(1, Node.DECR_FLAG);
2359:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2360:       assertEquals(30, Node.VAR_ARGS_NAME);
2361:       assertEquals(46, Node.IS_NAMESPACE);
2362:       assertEquals(54, Node.SLASH_V);
2363:       assertEquals(43, Node.IS_CONSTANT_NAME);
2364:       assertEquals(50, Node.FREE_CALL);
2365:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2366:       assertEquals(40, Node.ORIGINALNAME_PROP);
2367:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2368:       assertEquals(8, Node.FLAG_NO_THROWS);
2369:       assertEquals(57, Node.REFLECTED_OBJECT);
2370:       assertEquals(52, Node.LENGTH);
2371:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2372:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2373:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2374:       assertEquals(39, Node.EMPTY_BLOCK);
2375:       assertEquals(57, Node.LAST_PROP);
2376:       assertEquals(49, Node.DIRECT_EVAL);
2377:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2378:       assertEquals(55, Node.INFERRED_FUNCTION);
2379:       assertEquals(12, Node.COLUMN_BITS);
2380:       assertEquals(36, Node.QUOTED_PROP);
2381:       assertEquals(4095, Node.COLUMN_MASK);
2382:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2383:       assertEquals(37, Node.OPT_ARG_NAME);
2384:       assertEquals(48, Node.DIRECTIVES);
2385:       assertFalse(node0.equals((Object)node3));
2386:       assertFalse(node0.equals((Object)node5));
2387:       assertFalse(node0.equals((Object)node1));
2388:       assertFalse(node0.equals((Object)node4));
2389:       assertFalse(node4.equals((Object)node2));
2390:       assertFalse(node4.equals((Object)node5));
2391:       assertFalse(node4.equals((Object)node1));
2392:       assertFalse(node4.equals((Object)node3));
2393:       assertFalse(node4.equals((Object)node0));
2394:       assertTrue(boolean6 == boolean5);
2395:       assertTrue(boolean6 == boolean3);
2396:       assertTrue(boolean6 == boolean0);
2397:       assertTrue(boolean6 == boolean2);
2398:       assertFalse(boolean6 == boolean4);
2399:       assertTrue(boolean6 == boolean1);
2400:       
2401:       node1.putIntProp(56, 3034);
2402:       assertNotSame(node1, node3);
2403:       assertEquals(46, Node.IS_NAMESPACE);
2404:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2405:       assertEquals(32, Node.INCRDECR_PROP);
2406:       assertEquals(1, Node.DECR_FLAG);
2407:       assertEquals(37, Node.OPT_ARG_NAME);
2408:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2409:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2410:       assertEquals(57, Node.LAST_PROP);
2411:       assertEquals(47, Node.IS_DISPATCHER);
2412:       assertEquals(2, Node.POST_FLAG);
2413:       assertEquals(30, Node.VAR_ARGS_NAME);
2414:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2415:       assertEquals(12, Node.COLUMN_BITS);
2416:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2417:       assertEquals(40, Node.ORIGINALNAME_PROP);
2418:       assertEquals(43, Node.IS_CONSTANT_NAME);
2419:       assertEquals(50, Node.FREE_CALL);
2420:       assertEquals(54, Node.SLASH_V);
2421:       assertEquals(4095, Node.COLUMN_MASK);
2422:       assertEquals(48, Node.DIRECTIVES);
2423:       assertEquals(55, Node.INFERRED_FUNCTION);
2424:       assertEquals(39, Node.EMPTY_BLOCK);
2425:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2426:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2427:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2428:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2429:       assertEquals(52, Node.LENGTH);
2430:       assertEquals(29, Node.JSDOC_INFO_PROP);
2431:       assertEquals(53, Node.INPUT_ID);
2432:       assertEquals(56, Node.CHANGE_TIME);
2433:       assertEquals(36, Node.QUOTED_PROP);
2434:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2435:       assertEquals(8, Node.FLAG_NO_THROWS);
2436:       assertEquals(49, Node.DIRECT_EVAL);
2437:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2438:       assertEquals(57, Node.REFLECTED_OBJECT);
2439:       assertFalse(node1.equals((Object)node5));
2440:       assertFalse(node1.equals((Object)node2));
2441:       assertFalse(node1.equals((Object)node4));
2442:       assertFalse(node1.equals((Object)node0));
2443:       assertFalse(node1.equals((Object)node3));
2444:       
2445:       boolean boolean7 = node1.isOr();
2446:       assertFalse(boolean7);
2447:       assertNotSame(node1, node3);
2448:       assertEquals(46, Node.IS_NAMESPACE);
2449:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2450:       assertEquals(32, Node.INCRDECR_PROP);
2451:       assertEquals(1, Node.DECR_FLAG);
2452:       assertEquals(37, Node.OPT_ARG_NAME);
2453:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2454:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2455:       assertEquals(57, Node.LAST_PROP);
2456:       assertEquals(47, Node.IS_DISPATCHER);
2457:       assertEquals(2, Node.POST_FLAG);
2458:       assertEquals(30, Node.VAR_ARGS_NAME);
2459:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2460:       assertEquals(12, Node.COLUMN_BITS);
2461:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2462:       assertEquals(40, Node.ORIGINALNAME_PROP);
2463:       assertEquals(43, Node.IS_CONSTANT_NAME);
2464:       assertEquals(50, Node.FREE_CALL);
2465:       assertEquals(54, Node.SLASH_V);
2466:       assertEquals(4095, Node.COLUMN_MASK);
2467:       assertEquals(48, Node.DIRECTIVES);
2468:       assertEquals(55, Node.INFERRED_FUNCTION);
2469:       assertEquals(39, Node.EMPTY_BLOCK);
2470:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2471:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2472:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2473:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2474:       assertEquals(52, Node.LENGTH);
2475:       assertEquals(29, Node.JSDOC_INFO_PROP);
2476:       assertEquals(53, Node.INPUT_ID);
2477:       assertEquals(56, Node.CHANGE_TIME);
2478:       assertEquals(36, Node.QUOTED_PROP);
2479:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2480:       assertEquals(8, Node.FLAG_NO_THROWS);
2481:       assertEquals(49, Node.DIRECT_EVAL);
2482:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2483:       assertEquals(57, Node.REFLECTED_OBJECT);
2484:       assertFalse(node1.equals((Object)node5));
2485:       assertFalse(node1.equals((Object)node2));
2486:       assertFalse(node1.equals((Object)node4));
2487:       assertFalse(node1.equals((Object)node0));
2488:       assertFalse(node1.equals((Object)node3));
2489:       assertTrue(boolean7 == boolean1);
2490:       assertTrue(boolean7 == boolean0);
2491:       assertTrue(boolean7 == boolean3);
2492:       assertTrue(boolean7 == boolean5);
2493:       assertTrue(boolean7 == boolean6);
2494:       assertFalse(boolean7 == boolean4);
2495:       assertTrue(boolean7 == boolean2);
2496:       
2497:       boolean boolean8 = node3.isThis();
2498:       assertFalse(boolean8);
2499:       assertNotSame(node3, node1);
2500:       assertEquals(54, Node.SLASH_V);
2501:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2502:       assertEquals(57, Node.REFLECTED_OBJECT);
2503:       assertEquals(52, Node.LENGTH);
2504:       assertEquals(49, Node.DIRECT_EVAL);
2505:       assertEquals(50, Node.FREE_CALL);
2506:       assertEquals(40, Node.ORIGINALNAME_PROP);
2507:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2508:       assertEquals(39, Node.EMPTY_BLOCK);
2509:       assertEquals(55, Node.INFERRED_FUNCTION);
2510:       assertEquals(2, Node.POST_FLAG);
2511:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2512:       assertEquals(8, Node.FLAG_NO_THROWS);
2513:       assertEquals(29, Node.JSDOC_INFO_PROP);
2514:       assertEquals(30, Node.VAR_ARGS_NAME);
2515:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2516:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2517:       assertEquals(47, Node.IS_DISPATCHER);
2518:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2519:       assertEquals(57, Node.LAST_PROP);
2520:       assertEquals(53, Node.INPUT_ID);
2521:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2522:       assertEquals(36, Node.QUOTED_PROP);
2523:       assertEquals(43, Node.IS_CONSTANT_NAME);
2524:       assertEquals(56, Node.CHANGE_TIME);
2525:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2526:       assertEquals(48, Node.DIRECTIVES);
2527:       assertEquals(37, Node.OPT_ARG_NAME);
2528:       assertEquals(46, Node.IS_NAMESPACE);
2529:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2530:       assertEquals(4095, Node.COLUMN_MASK);
2531:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2532:       assertEquals(1, Node.DECR_FLAG);
2533:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2534:       assertEquals(12, Node.COLUMN_BITS);
2535:       assertEquals(32, Node.INCRDECR_PROP);
2536:       assertFalse(node3.equals((Object)node5));
2537:       assertFalse(node3.equals((Object)node2));
2538:       assertFalse(node3.equals((Object)node1));
2539:       assertFalse(node3.equals((Object)node4));
2540:       assertFalse(node3.equals((Object)node0));
2541:       assertFalse(boolean8 == boolean4);
2542:       assertTrue(boolean8 == boolean0);
2543:       assertTrue(boolean8 == boolean7);
2544:       assertTrue(boolean8 == boolean5);
2545:       assertTrue(boolean8 == boolean3);
2546:       assertTrue(boolean8 == boolean1);
2547:       assertTrue(boolean8 == boolean2);
2548:       assertTrue(boolean8 == boolean6);
2549:   }
2550: }
RegularFileObject[/tmp/EvoSuite_206_1628157546054/com/google/javascript/rhino/Node_206_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:59:06 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_206_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_206_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_206_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Preconditions",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.JSTypeNative",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.common.base.Objects",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.javascript.rhino.Node$AncestorIterable$1",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.common.collect.Sets",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableSet",
355:       "com.google.common.collect.EmptyImmutableSet",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.jstype.TemplatizedType",
359:       "com.google.common.collect.Sets$ImprovedAbstractSet",
360:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
361:       "com.google.common.collect.Hashing",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.JSType$TypePair",
371:       "com.google.javascript.rhino.jstype.TernaryValue",
372:       "com.google.javascript.rhino.jstype.JSType$2",
373:       "com.google.common.collect.Iterators$12",
374:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
375:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
377:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
378:     );
379:   }
380: }

[MASTER] 09:59:06.668 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("xpBF>P}ZAl``iC)9");
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertNotNull(node0);
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertEquals(40, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());

Node node1 = Node.newNumber(1620.69935, 2489, 30);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isAnd());
assertEquals(10194974, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isName());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertEquals(30, node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertEquals(2489, node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isCast());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());

Node node2 = node0.useSourceInfoIfMissingFrom(node1);
assertSame(node0, node2);
assertSame(node2, node0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertEquals(2489, node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertEquals(10194974, node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertEquals(30, node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isAnd());
assertEquals(10194974, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isName());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertEquals(30, node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertEquals(2489, node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isCast());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertEquals(30, node2.getCharno());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertFalse(node2.isVar());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertEquals(10194974, node2.getSourcePosition());
assertFalse(node2.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isFunction());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isFor());
assertEquals(40, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isCast());
assertFalse(node2.isRegExp());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIf());
assertEquals(2489, node2.getLineno());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node2));
assertSame(node0, node2);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertEquals(2489, node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertEquals(10194974, node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertEquals(30, node0.getCharno());
assertFalse(node0.isAnd());

boolean boolean0 = node1.isGetProp();
assertFalse(boolean0);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isAnd());
assertEquals(10194974, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isName());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertEquals(30, node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertEquals(2489, node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isCast());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());

boolean boolean1 = node1.hasChildren();
assertFalse(boolean1);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isAnd());
assertEquals(10194974, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isName());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertEquals(30, node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertEquals(2489, node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isCast());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());

Node node3 = Node.newNumber((double) 1, 112, 31);
assertNotSame(node3, node1);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(node3);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.isInc());
assertFalse(node3.isString());
assertFalse(node3.isHook());
assertFalse(node3.isCase());
assertTrue(node3.isNumber());
assertFalse(node3.isThrow());
assertFalse(node3.isNE());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isBreak());
assertFalse(node3.isEmpty());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isVoid());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isExprResult());
assertFalse(node3.isDebugger());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isFunction());
assertEquals(112, node3.getLineno());
assertFalse(node3.isGetProp());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertEquals(39, node3.getType());
assertFalse(node3.isAdd());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isVar());
assertFalse(node3.isReturn());
assertFalse(node3.isLabel());
assertFalse(node3.isNew());
assertFalse(node3.isBlock());
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNull());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetElem());
assertFalse(node3.isOr());
assertFalse(node3.isAssign());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isRegExp());
assertFalse(node3.isScript());
assertFalse(node3.isTrue());
assertEquals(31, node3.getCharno());
assertFalse(node3.isWith());
assertFalse(node3.hasOneChild());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isFor());
assertFalse(node3.isTry());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isGetterDef());
assertFalse(node3.isArrayLit());
assertEquals(458783, node3.getSourcePosition());
assertFalse(node3.isStringKey());
assertFalse(node3.isLabelName());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());

boolean boolean2 = node3.isSwitch();
assertFalse(boolean2);
assertNotSame(node3, node1);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node3.isInc());
assertFalse(node3.isString());
assertFalse(node3.isHook());
assertFalse(node3.isCase());
assertTrue(node3.isNumber());
assertFalse(node3.isThrow());
assertFalse(node3.isNE());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isBreak());
assertFalse(node3.isEmpty());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isVoid());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isExprResult());
assertFalse(node3.isDebugger());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isFunction());
assertEquals(112, node3.getLineno());
assertFalse(node3.isGetProp());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertEquals(39, node3.getType());
assertFalse(node3.isAdd());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isVar());
assertFalse(node3.isReturn());
assertFalse(node3.isLabel());
assertFalse(node3.isNew());
assertFalse(node3.isBlock());
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNull());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetElem());
assertFalse(node3.isOr());
assertFalse(node3.isAssign());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isRegExp());
assertFalse(node3.isScript());
assertFalse(node3.isTrue());
assertEquals(31, node3.getCharno());
assertFalse(node3.isWith());
assertFalse(node3.hasOneChild());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isFor());
assertFalse(node3.isTry());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isGetterDef());
assertFalse(node3.isArrayLit());
assertEquals(458783, node3.getSourcePosition());
assertFalse(node3.isStringKey());
assertFalse(node3.isLabelName());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());

Node node4 = node0.cloneNode();
assertSame(node0, node2);
assertNotSame(node0, node4);
assertNotSame(node4, node2);
assertNotSame(node4, node0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertNotNull(node4);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertEquals(2489, node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertEquals(10194974, node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertEquals(40, node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertEquals(30, node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node4.isArrayLit());
assertFalse(node4.isFor());
assertFalse(node4.isGetterDef());
assertFalse(node4.isDebugger());
assertFalse(node4.isFunction());
assertFalse(node4.isRegExp());
assertFalse(node4.isIf());
assertFalse(node4.isTrue());
assertFalse(node4.isNE());
assertFalse(node4.isDelProp());
assertFalse(node4.isVoid());
assertFalse(node4.isIn());
assertEquals(40, node4.getType());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isSetterDef());
assertFalse(node4.isInc());
assertFalse(node4.isEmpty());
assertFalse(node4.isCall());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertEquals(30, node4.getCharno());
assertFalse(node4.isNull());
assertFalse(node4.isBreak());
assertFalse(node4.isName());
assertFalse(node4.isReturn());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isComma());
assertFalse(node4.isNot());
assertFalse(node4.hasChildren());
assertFalse(node4.isWhile());
assertFalse(node4.isGetProp());
assertFalse(node4.isCast());
assertFalse(node4.isDec());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isExprResult());
assertFalse(node4.isGetElem());
assertEquals(10194974, node4.getSourcePosition());
assertFalse(node4.isLabelName());
assertFalse(node4.isContinue());
assertFalse(node4.isLabel());
assertEquals(2489, node4.getLineno());
assertFalse(node4.isOr());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDo());
assertFalse(node4.isHook());
assertFalse(node4.isVar());
assertFalse(node4.isStringKey());
assertFalse(node4.isBlock());
assertFalse(node4.isSwitch());
assertFalse(node4.isParamList());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isCatch());
assertFalse(node4.isWith());
assertFalse(node4.isScript());
assertFalse(node4.isThis());
assertFalse(node4.isNumber());
assertFalse(node4.isCase());
assertTrue(node4.isString());
assertFalse(node4.isTry());
assertFalse(node4.hasOneChild());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1502));
assertNotNull(node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals((-1502), node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals((-1502), node_SideEffectFlags0.valueOf());
assertEquals((-1502), node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags2);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals((-1504), node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals((-1504), node_SideEffectFlags2.valueOf());

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags3);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags3.valueOf());

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertNotNull(node_SideEffectFlags4);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertNotNull(node_SideEffectFlags5);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags1.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertNotNull(node_SideEffectFlags6);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags6.valueOf());
assertTrue(node_SideEffectFlags6.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags3.setReturnsTainted();
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertNotNull(node_SideEffectFlags7);
assertTrue(node_SideEffectFlags7.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags7.valueOf());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags3.setMutatesArguments();
assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertNotNull(node_SideEffectFlags8);
assertTrue(node_SideEffectFlags8.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags8.valueOf());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags6.clearAllFlags();
assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags8);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags9);
assertNotNull(node_SideEffectFlags9);
assertEquals(31, node_SideEffectFlags9.valueOf());
assertFalse(node_SideEffectFlags9.areAllFlagsSet());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertFalse(node_SideEffectFlags6.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags6.valueOf());

Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags9.setMutatesGlobalState();
assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
assertSame(node_SideEffectFlags9, node_SideEffectFlags10);
assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
assertSame(node_SideEffectFlags10, node_SideEffectFlags3);
assertSame(node_SideEffectFlags10, node_SideEffectFlags2);
assertSame(node_SideEffectFlags10, node_SideEffectFlags8);
assertSame(node_SideEffectFlags10, node_SideEffectFlags7);
assertSame(node_SideEffectFlags10, node_SideEffectFlags4);
assertSame(node_SideEffectFlags10, node_SideEffectFlags5);
assertSame(node_SideEffectFlags10, node_SideEffectFlags0);
assertSame(node_SideEffectFlags10, node_SideEffectFlags1);
assertSame(node_SideEffectFlags10, node_SideEffectFlags9);
assertSame(node_SideEffectFlags10, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags8);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags10);
assertSame(node_SideEffectFlags6, node_SideEffectFlags9);
assertNotNull(node_SideEffectFlags10);
assertEquals(24, node_SideEffectFlags9.valueOf());
assertFalse(node_SideEffectFlags9.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags10.valueOf());
assertFalse(node_SideEffectFlags10.areAllFlagsSet());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags1.valueOf());
assertEquals(24, node_SideEffectFlags6.valueOf());
assertFalse(node_SideEffectFlags6.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags4.setMutatesArguments();
assertSame(node_SideEffectFlags11, node_SideEffectFlags2);
assertSame(node_SideEffectFlags11, node_SideEffectFlags7);
assertSame(node_SideEffectFlags11, node_SideEffectFlags4);
assertSame(node_SideEffectFlags11, node_SideEffectFlags8);
assertSame(node_SideEffectFlags11, node_SideEffectFlags0);
assertSame(node_SideEffectFlags11, node_SideEffectFlags1);
assertSame(node_SideEffectFlags11, node_SideEffectFlags9);
assertSame(node_SideEffectFlags11, node_SideEffectFlags5);
assertSame(node_SideEffectFlags11, node_SideEffectFlags10);
assertSame(node_SideEffectFlags11, node_SideEffectFlags6);
assertSame(node_SideEffectFlags11, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
assertSame(node_SideEffectFlags4, node_SideEffectFlags11);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertNotNull(node_SideEffectFlags11);
assertFalse(node_SideEffectFlags11.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags11.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags4.valueOf());

Node.SideEffectFlags node_SideEffectFlags12 = node_SideEffectFlags11.setMutatesGlobalState();
assertSame(node_SideEffectFlags11, node_SideEffectFlags7);
assertSame(node_SideEffectFlags11, node_SideEffectFlags2);
assertSame(node_SideEffectFlags11, node_SideEffectFlags4);
assertSame(node_SideEffectFlags11, node_SideEffectFlags8);
assertSame(node_SideEffectFlags11, node_SideEffectFlags1);
assertSame(node_SideEffectFlags11, node_SideEffectFlags9);
assertSame(node_SideEffectFlags11, node_SideEffectFlags0);
assertSame(node_SideEffectFlags11, node_SideEffectFlags5);
assertSame(node_SideEffectFlags11, node_SideEffectFlags10);
assertSame(node_SideEffectFlags11, node_SideEffectFlags6);
assertSame(node_SideEffectFlags11, node_SideEffectFlags12);
assertSame(node_SideEffectFlags11, node_SideEffectFlags3);
assertSame(node_SideEffectFlags12, node_SideEffectFlags11);
assertSame(node_SideEffectFlags12, node_SideEffectFlags1);
assertSame(node_SideEffectFlags12, node_SideEffectFlags10);
assertSame(node_SideEffectFlags12, node_SideEffectFlags4);
assertSame(node_SideEffectFlags12, node_SideEffectFlags5);
assertSame(node_SideEffectFlags12, node_SideEffectFlags7);
assertSame(node_SideEffectFlags12, node_SideEffectFlags8);
assertSame(node_SideEffectFlags12, node_SideEffectFlags6);
assertSame(node_SideEffectFlags12, node_SideEffectFlags2);
assertSame(node_SideEffectFlags12, node_SideEffectFlags0);
assertSame(node_SideEffectFlags12, node_SideEffectFlags9);
assertSame(node_SideEffectFlags12, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags10);
assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags11);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags12);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags11);
assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags10);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags12);
assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags10);
assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags11);
assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags12);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags10);
assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
assertSame(node_SideEffectFlags4, node_SideEffectFlags11);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags12);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertNotNull(node_SideEffectFlags12);
assertFalse(node_SideEffectFlags11.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags11.valueOf());
assertEquals(24, node_SideEffectFlags12.valueOf());
assertFalse(node_SideEffectFlags12.areAllFlagsSet());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags4.valueOf());

Node node5 = new Node(52, node3, node3);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(node5);
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(node5.isBreak());
assertFalse(node5.isGetProp());
assertFalse(node5.isHook());
assertFalse(node5.isFalse());
assertFalse(node5.isThrow());
assertFalse(node5.isComma());
assertFalse(node5.isThis());
assertFalse(node5.isScript());
assertFalse(node5.isString());
assertFalse(node5.isSwitch());
assertFalse(node5.isCase());
assertFalse(node5.isAnd());
assertFalse(node5.isObjectLit());
assertFalse(node5.isNot());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isNumber());
assertFalse(node5.isNE());
assertFalse(node5.isGetterDef());
assertFalse(node5.isIf());
assertTrue(node5.hasChildren());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isCast());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isContinue());
assertFalse(node5.isFor());
assertEquals(1, node5.getChildCount());
assertFalse(node5.isRegExp());
assertFalse(node5.isWith());
assertFalse(node5.isInc());
assertFalse(node5.isIn());
assertFalse(node5.isNull());
assertEquals(52, node5.getType());
assertFalse(node5.isParamList());
assertFalse(node5.isName());
assertFalse(node5.isCall());
assertFalse(node5.isSetterDef());
assertFalse(node5.isVar());
assertFalse(node5.isCatch());
assertFalse(node5.isBlock());
assertFalse(node5.isWhile());
assertFalse(node5.isFunction());
assertFalse(node5.isTry());
assertFalse(node5.isArrayLit());
assertFalse(node5.isStringKey());
assertFalse(node5.isDebugger());
assertFalse(node5.isTypeOf());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isDec());
assertFalse(node5.isDelProp());
assertFalse(node5.isGetElem());
assertFalse(node5.isEmpty());
assertFalse(node5.isLabelName());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isAssign());
assertFalse(node5.isReturn());
assertTrue(node5.hasOneChild());
assertFalse(node5.isLabel());
assertTrue(node5.isInstanceOf());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isNew());
assertFalse(node5.isAdd());
assertFalse(node5.isVoid());
assertFalse(node5.isDo());
assertFalse(node5.isExprResult());
assertFalse(node5.isOr());
assertFalse(node5.isTrue());
assertFalse(node3.isInc());
assertFalse(node3.isString());
assertFalse(node3.isHook());
assertFalse(node3.isCase());
assertTrue(node3.isNumber());
assertFalse(node3.isThrow());
assertFalse(node3.isNE());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isBreak());
assertFalse(node3.isEmpty());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isVoid());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isExprResult());
assertFalse(node3.isDebugger());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isFunction());
assertEquals(112, node3.getLineno());
assertFalse(node3.isGetProp());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertEquals(39, node3.getType());
assertFalse(node3.isAdd());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isVar());
assertFalse(node3.isReturn());
assertFalse(node3.isLabel());
assertFalse(node3.isNew());
assertFalse(node3.isBlock());
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNull());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetElem());
assertFalse(node3.isOr());
assertFalse(node3.isAssign());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isRegExp());
assertFalse(node3.isScript());
assertFalse(node3.isTrue());
assertEquals(31, node3.getCharno());

boolean boolean3 = node2.hasOneChild();
assertFalse(boolean3);
assertSame(node0, node2);
assertNotSame(node0, node4);
assertNotSame(node1, node3);
assertNotSame(node2, node4);
assertSame(node2, node0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);

boolean boolean4 = node4.isEquivalentToShallow(node0);
assertTrue(boolean4);
assertSame(node0, node2);
assertNotSame(node0, node4);
assertNotSame(node4, node2);
assertNotSame(node4, node0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(boolean4 == boolean1);
assertFalse(boolean4 == boolean3);
assertFalse(boolean4 == boolean2);
assertFalse(boolean4 == boolean0);
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node5));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));

boolean boolean5 = node4.isName();
assertFalse(boolean5);
assertSame(node0, node2);
assertNotSame(node0, node4);
assertNotSame(node4, node2);
assertNotSame(node4, node0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node5));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean0);
assertFalse(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);

boolean boolean6 = node4.isDelProp();
assertFalse(boolean6);
assertSame(node0, node2);
assertNotSame(node0, node4);
assertNotSame(node4, node2);
assertNotSame(node4, node0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node5));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean2);
assertFalse(boolean6 == boolean4);
assertTrue(boolean6 == boolean1);

node1.putIntProp(56, 3034);
assertNotSame(node1, node3);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));

boolean boolean7 = node1.isOr();
assertFalse(boolean7);
assertNotSame(node1, node3);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean6);
assertFalse(boolean7 == boolean4);
assertTrue(boolean7 == boolean2);

boolean boolean8 = node3.isThis();
assertFalse(boolean8);
assertNotSame(node3, node1);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(boolean8 == boolean4);
assertTrue(boolean8 == boolean0);
assertTrue(boolean8 == boolean7);
assertTrue(boolean8 == boolean5);
assertTrue(boolean8 == boolean3);
assertTrue(boolean8 == boolean1);
assertTrue(boolean8 == boolean2);
assertTrue(boolean8 == boolean6);


* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/4
* Done!

* Computation finished
