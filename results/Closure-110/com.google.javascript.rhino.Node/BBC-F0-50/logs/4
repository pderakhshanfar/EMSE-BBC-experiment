* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 13293
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 1175742828
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:40:58.272 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:41:02.746 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;
[MASTER] 17:41:13.841 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
* Search finished after 606s and 259 generations, 145988 statements, best individual has fitness: 3176.0
* Minimizing test suite
[MASTER] 17:52:35.085 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 92%
* Total number of goals: 853
* Number of covered goals: 782
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 82%
* Total number of goals: 714
* Number of covered goals: 588
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 99
* Number of covered goals: 99
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 85%
* Total number of goals: 530
* Number of covered goals: 452
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 44%
* Total number of goals: 4536
* Number of covered goals: 1977
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 211
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 76%
* Total number of goals: 714
* Number of covered goals: 545
* Generated 616 tests with total length 9873
* Resulting test suite's coverage: 75% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:53:49.341 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6698166666666666% of time used, but only 36/616 tests minimized), falling back to using all assertions
[MASTER] 17:54:09.191 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 10%
* Compiling and checking tests
[MASTER] 17:54:20.750 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 11 seconds more than allowed.
[MASTER] 17:54:32.607 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_82_1629222872418/com/google/javascript/rhino/Node_82_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_82_1629222872418/com/google/javascript/rhino/Node_82_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:32.607 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:32.607 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:32.612 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 834
[MASTER] 17:54:32.614 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_82_1629222872418/com/google/javascript/rhino/Node_82_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:32 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_82_tmp__ESTest extends Node_82_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = new Node(29, 48, 2810);
24:       assertFalse(node0.isTrue());
25:       assertEquals(2810, node0.getCharno());
26:       assertFalse(node0.isArrayLit());
27:       assertFalse(node0.isDefaultCase());
28:       assertFalse(node0.isTry());
29:       assertFalse(node0.isVoid());
30:       assertFalse(node0.isFor());
31:       assertFalse(node0.isCatch());
32:       assertEquals(0, node0.getChildCount());
33:       assertFalse(node0.isFunction());
34:       assertFalse(node0.isRegExp());
35:       assertFalse(node0.isParamList());
36:       assertFalse(node0.isCase());
37:       assertFalse(node0.isString());
38:       assertFalse(node0.isStringKey());
39:       assertFalse(node0.isDebugger());
40:       assertFalse(node0.isGetterDef());
41:       assertFalse(node0.isHook());
42:       assertFalse(node0.isBlock());
43:       assertFalse(node0.isInc());
44:       assertFalse(node0.isThrow());
45:       assertFalse(node0.hasMoreThanOneChild());
46:       assertFalse(node0.isThis());
47:       assertFalse(node0.isContinue());
48:       assertFalse(node0.isFalse());
49:       assertFalse(node0.isInstanceOf());
50:       assertFalse(node0.isSetterDef());
51:       assertFalse(node0.isNE());
52:       assertFalse(node0.isIf());
53:       assertFalse(node0.isIn());
54:       assertEquals(48, node0.getLineno());
55:       assertFalse(node0.isExprResult());
56:       assertFalse(node0.hasOneChild());
57:       assertFalse(node0.isAssign());
58:       assertFalse(node0.isWith());
59:       assertFalse(node0.isLabelName());
60:       assertFalse(node0.isGetElem());
61:       assertFalse(node0.hasChildren());
62:       assertFalse(node0.isCast());
63:       assertFalse(node0.isDec());
64:       assertFalse(node0.isTypeOf());
65:       assertFalse(node0.isReturn());
66:       assertEquals(199418, node0.getSourcePosition());
67:       assertFalse(node0.isGetProp());
68:       assertFalse(node0.isAnd());
69:       assertFalse(node0.isNot());
70:       assertFalse(node0.isScript());
71:       assertFalse(node0.isNumber());
72:       assertFalse(node0.isObjectLit());
73:       assertFalse(node0.isNew());
74:       assertFalse(node0.isAdd());
75:       assertFalse(node0.isVar());
76:       assertFalse(node0.isSwitch());
77:       assertEquals(29, node0.getType());
78:       assertFalse(node0.isName());
79:       assertFalse(node0.isWhile());
80:       assertFalse(node0.isBreak());
81:       assertFalse(node0.isCall());
82:       assertFalse(node0.isComma());
83:       assertFalse(node0.isOr());
84:       assertFalse(node0.isAssignAdd());
85:       assertFalse(node0.isLabel());
86:       assertFalse(node0.isDelProp());
87:       assertFalse(node0.isDo());
88:       assertFalse(node0.isNull());
89:       assertFalse(node0.isEmpty());
90:       assertNotNull(node0);
91:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
92:       assertEquals(36, Node.QUOTED_PROP);
93:       assertEquals(47, Node.IS_DISPATCHER);
94:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
95:       assertEquals(29, Node.JSDOC_INFO_PROP);
96:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
97:       assertEquals(53, Node.INPUT_ID);
98:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
99:       assertEquals(12, Node.COLUMN_BITS);
100:       assertEquals(32, Node.INCRDECR_PROP);
101:       assertEquals(55, Node.INFERRED_FUNCTION);
102:       assertEquals(4095, Node.COLUMN_MASK);
103:       assertEquals(56, Node.CHANGE_TIME);
104:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
105:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
106:       assertEquals(48, Node.DIRECTIVES);
107:       assertEquals(49, Node.DIRECT_EVAL);
108:       assertEquals(37, Node.OPT_ARG_NAME);
109:       assertEquals(57, Node.REFLECTED_OBJECT);
110:       assertEquals(52, Node.LENGTH);
111:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
112:       assertEquals(50, Node.FREE_CALL);
113:       assertEquals(54, Node.SLASH_V);
114:       assertEquals(15, Node.NO_SIDE_EFFECTS);
115:       assertEquals(57, Node.LAST_PROP);
116:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
117:       assertEquals(8, Node.FLAG_NO_THROWS);
118:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
119:       assertEquals(1, Node.DECR_FLAG);
120:       assertEquals(39, Node.EMPTY_BLOCK);
121:       assertEquals(46, Node.IS_NAMESPACE);
122:       assertEquals(30, Node.VAR_ARGS_NAME);
123:       assertEquals(51, Node.STATIC_SOURCE_FILE);
124:       assertEquals(43, Node.IS_CONSTANT_NAME);
125:       assertEquals(2, Node.POST_FLAG);
126:       assertEquals(40, Node.ORIGINALNAME_PROP);
127:       
128:       boolean boolean0 = node0.isNE();
129:       assertFalse(node0.isTrue());
130:       assertEquals(2810, node0.getCharno());
131:       assertFalse(node0.isArrayLit());
132:       assertFalse(node0.isDefaultCase());
133:       assertFalse(node0.isTry());
134:       assertFalse(node0.isVoid());
135:       assertFalse(node0.isFor());
136:       assertFalse(node0.isCatch());
137:       assertEquals(0, node0.getChildCount());
138:       assertFalse(node0.isFunction());
139:       assertFalse(node0.isRegExp());
140:       assertFalse(node0.isParamList());
141:       assertFalse(node0.isCase());
142:       assertFalse(node0.isString());
143:       assertFalse(node0.isStringKey());
144:       assertFalse(node0.isDebugger());
145:       assertFalse(node0.isGetterDef());
146:       assertFalse(node0.isHook());
147:       assertFalse(node0.isBlock());
148:       assertFalse(node0.isInc());
149:       assertFalse(node0.isThrow());
150:       assertFalse(node0.hasMoreThanOneChild());
151:       assertFalse(node0.isThis());
152:       assertFalse(node0.isContinue());
153:       assertFalse(node0.isFalse());
154:       assertFalse(node0.isInstanceOf());
155:       assertFalse(node0.isSetterDef());
156:       assertFalse(node0.isNE());
157:       assertFalse(node0.isIf());
158:       assertFalse(node0.isIn());
159:       assertEquals(48, node0.getLineno());
160:       assertFalse(node0.isExprResult());
161:       assertFalse(node0.hasOneChild());
162:       assertFalse(node0.isAssign());
163:       assertFalse(node0.isWith());
164:       assertFalse(node0.isLabelName());
165:       assertFalse(node0.isGetElem());
166:       assertFalse(node0.hasChildren());
167:       assertFalse(node0.isCast());
168:       assertFalse(node0.isDec());
169:       assertFalse(node0.isTypeOf());
170:       assertFalse(node0.isReturn());
171:       assertEquals(199418, node0.getSourcePosition());
172:       assertFalse(node0.isGetProp());
173:       assertFalse(node0.isAnd());
174:       assertFalse(node0.isNot());
175:       assertFalse(node0.isScript());
176:       assertFalse(node0.isNumber());
177:       assertFalse(node0.isObjectLit());
178:       assertFalse(node0.isNew());
179:       assertFalse(node0.isAdd());
180:       assertFalse(node0.isVar());
181:       assertFalse(node0.isSwitch());
182:       assertEquals(29, node0.getType());
183:       assertFalse(node0.isName());
184:       assertFalse(node0.isWhile());
185:       assertFalse(node0.isBreak());
186:       assertFalse(node0.isCall());
187:       assertFalse(node0.isComma());
188:       assertFalse(node0.isOr());
189:       assertFalse(node0.isAssignAdd());
190:       assertFalse(node0.isLabel());
191:       assertFalse(node0.isDelProp());
192:       assertFalse(node0.isDo());
193:       assertFalse(node0.isNull());
194:       assertFalse(node0.isEmpty());
195:       assertFalse(boolean0);
196:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
197:       assertEquals(36, Node.QUOTED_PROP);
198:       assertEquals(47, Node.IS_DISPATCHER);
199:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
200:       assertEquals(29, Node.JSDOC_INFO_PROP);
201:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
202:       assertEquals(53, Node.INPUT_ID);
203:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
204:       assertEquals(12, Node.COLUMN_BITS);
205:       assertEquals(32, Node.INCRDECR_PROP);
206:       assertEquals(55, Node.INFERRED_FUNCTION);
207:       assertEquals(4095, Node.COLUMN_MASK);
208:       assertEquals(56, Node.CHANGE_TIME);
209:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
210:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
211:       assertEquals(48, Node.DIRECTIVES);
212:       assertEquals(49, Node.DIRECT_EVAL);
213:       assertEquals(37, Node.OPT_ARG_NAME);
214:       assertEquals(57, Node.REFLECTED_OBJECT);
215:       assertEquals(52, Node.LENGTH);
216:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
217:       assertEquals(50, Node.FREE_CALL);
218:       assertEquals(54, Node.SLASH_V);
219:       assertEquals(15, Node.NO_SIDE_EFFECTS);
220:       assertEquals(57, Node.LAST_PROP);
221:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
222:       assertEquals(8, Node.FLAG_NO_THROWS);
223:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
224:       assertEquals(1, Node.DECR_FLAG);
225:       assertEquals(39, Node.EMPTY_BLOCK);
226:       assertEquals(46, Node.IS_NAMESPACE);
227:       assertEquals(30, Node.VAR_ARGS_NAME);
228:       assertEquals(51, Node.STATIC_SOURCE_FILE);
229:       assertEquals(43, Node.IS_CONSTANT_NAME);
230:       assertEquals(2, Node.POST_FLAG);
231:       assertEquals(40, Node.ORIGINALNAME_PROP);
232:       
233:       boolean boolean1 = node0.isFromExterns();
234:       assertFalse(node0.isTrue());
235:       assertEquals(2810, node0.getCharno());
236:       assertFalse(node0.isArrayLit());
237:       assertFalse(node0.isDefaultCase());
238:       assertFalse(node0.isTry());
239:       assertFalse(node0.isVoid());
240:       assertFalse(node0.isFor());
241:       assertFalse(node0.isCatch());
242:       assertEquals(0, node0.getChildCount());
243:       assertFalse(node0.isFunction());
244:       assertFalse(node0.isRegExp());
245:       assertFalse(node0.isParamList());
246:       assertFalse(node0.isCase());
247:       assertFalse(node0.isString());
248:       assertFalse(node0.isStringKey());
249:       assertFalse(node0.isDebugger());
250:       assertFalse(node0.isGetterDef());
251:       assertFalse(node0.isHook());
252:       assertFalse(node0.isBlock());
253:       assertFalse(node0.isInc());
254:       assertFalse(node0.isThrow());
255:       assertFalse(node0.hasMoreThanOneChild());
256:       assertFalse(node0.isThis());
257:       assertFalse(node0.isContinue());
258:       assertFalse(node0.isFalse());
259:       assertFalse(node0.isInstanceOf());
260:       assertFalse(node0.isSetterDef());
261:       assertFalse(node0.isNE());
262:       assertFalse(node0.isIf());
263:       assertFalse(node0.isIn());
264:       assertEquals(48, node0.getLineno());
265:       assertFalse(node0.isExprResult());
266:       assertFalse(node0.hasOneChild());
267:       assertFalse(node0.isAssign());
268:       assertFalse(node0.isWith());
269:       assertFalse(node0.isLabelName());
270:       assertFalse(node0.isGetElem());
271:       assertFalse(node0.hasChildren());
272:       assertFalse(node0.isCast());
273:       assertFalse(node0.isDec());
274:       assertFalse(node0.isTypeOf());
275:       assertFalse(node0.isReturn());
276:       assertEquals(199418, node0.getSourcePosition());
277:       assertFalse(node0.isGetProp());
278:       assertFalse(node0.isAnd());
279:       assertFalse(node0.isNot());
280:       assertFalse(node0.isScript());
281:       assertFalse(node0.isNumber());
282:       assertFalse(node0.isObjectLit());
283:       assertFalse(node0.isNew());
284:       assertFalse(node0.isAdd());
285:       assertFalse(node0.isVar());
286:       assertFalse(node0.isSwitch());
287:       assertEquals(29, node0.getType());
288:       assertFalse(node0.isName());
289:       assertFalse(node0.isWhile());
290:       assertFalse(node0.isBreak());
291:       assertFalse(node0.isCall());
292:       assertFalse(node0.isComma());
293:       assertFalse(node0.isOr());
294:       assertFalse(node0.isAssignAdd());
295:       assertFalse(node0.isLabel());
296:       assertFalse(node0.isDelProp());
297:       assertFalse(node0.isDo());
298:       assertFalse(node0.isNull());
299:       assertFalse(node0.isEmpty());
300:       assertFalse(boolean1);
301:       assertTrue(boolean1 == boolean0);
302:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
303:       assertEquals(36, Node.QUOTED_PROP);
304:       assertEquals(47, Node.IS_DISPATCHER);
305:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
306:       assertEquals(29, Node.JSDOC_INFO_PROP);
307:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
308:       assertEquals(53, Node.INPUT_ID);
309:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
310:       assertEquals(12, Node.COLUMN_BITS);
311:       assertEquals(32, Node.INCRDECR_PROP);
312:       assertEquals(55, Node.INFERRED_FUNCTION);
313:       assertEquals(4095, Node.COLUMN_MASK);
314:       assertEquals(56, Node.CHANGE_TIME);
315:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
316:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
317:       assertEquals(48, Node.DIRECTIVES);
318:       assertEquals(49, Node.DIRECT_EVAL);
319:       assertEquals(37, Node.OPT_ARG_NAME);
320:       assertEquals(57, Node.REFLECTED_OBJECT);
321:       assertEquals(52, Node.LENGTH);
322:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
323:       assertEquals(50, Node.FREE_CALL);
324:       assertEquals(54, Node.SLASH_V);
325:       assertEquals(15, Node.NO_SIDE_EFFECTS);
326:       assertEquals(57, Node.LAST_PROP);
327:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
328:       assertEquals(8, Node.FLAG_NO_THROWS);
329:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
330:       assertEquals(1, Node.DECR_FLAG);
331:       assertEquals(39, Node.EMPTY_BLOCK);
332:       assertEquals(46, Node.IS_NAMESPACE);
333:       assertEquals(30, Node.VAR_ARGS_NAME);
334:       assertEquals(51, Node.STATIC_SOURCE_FILE);
335:       assertEquals(43, Node.IS_CONSTANT_NAME);
336:       assertEquals(2, Node.POST_FLAG);
337:       assertEquals(40, Node.ORIGINALNAME_PROP);
338:       
339:       node0.putBooleanProp((-410), true);
340:       assertFalse(node0.isTrue());
341:       assertEquals(2810, node0.getCharno());
342:       assertFalse(node0.isArrayLit());
343:       assertFalse(node0.isDefaultCase());
344:       assertFalse(node0.isTry());
345:       assertFalse(node0.isVoid());
346:       assertFalse(node0.isFor());
347:       assertFalse(node0.isCatch());
348:       assertEquals(0, node0.getChildCount());
349:       assertFalse(node0.isFunction());
350:       assertFalse(node0.isRegExp());
351:       assertFalse(node0.isParamList());
352:       assertFalse(node0.isCase());
353:       assertFalse(node0.isString());
354:       assertFalse(node0.isStringKey());
355:       assertFalse(node0.isDebugger());
356:       assertFalse(node0.isGetterDef());
357:       assertFalse(node0.isHook());
358:       assertFalse(node0.isBlock());
359:       assertFalse(node0.isInc());
360:       assertFalse(node0.isThrow());
361:       assertFalse(node0.hasMoreThanOneChild());
362:       assertFalse(node0.isThis());
363:       assertFalse(node0.isContinue());
364:       assertFalse(node0.isFalse());
365:       assertFalse(node0.isInstanceOf());
366:       assertFalse(node0.isSetterDef());
367:       assertFalse(node0.isNE());
368:       assertFalse(node0.isIf());
369:       assertFalse(node0.isIn());
370:       assertEquals(48, node0.getLineno());
371:       assertFalse(node0.isExprResult());
372:       assertFalse(node0.hasOneChild());
373:       assertFalse(node0.isAssign());
374:       assertFalse(node0.isWith());
375:       assertFalse(node0.isLabelName());
376:       assertFalse(node0.isGetElem());
377:       assertFalse(node0.hasChildren());
378:       assertFalse(node0.isCast());
379:       assertFalse(node0.isDec());
380:       assertFalse(node0.isTypeOf());
381:       assertFalse(node0.isReturn());
382:       assertEquals(199418, node0.getSourcePosition());
383:       assertFalse(node0.isGetProp());
384:       assertFalse(node0.isAnd());
385:       assertFalse(node0.isNot());
386:       assertFalse(node0.isScript());
387:       assertFalse(node0.isNumber());
388:       assertFalse(node0.isObjectLit());
389:       assertFalse(node0.isNew());
390:       assertFalse(node0.isAdd());
391:       assertFalse(node0.isVar());
392:       assertFalse(node0.isSwitch());
393:       assertEquals(29, node0.getType());
394:       assertFalse(node0.isName());
395:       assertFalse(node0.isWhile());
396:       assertFalse(node0.isBreak());
397:       assertFalse(node0.isCall());
398:       assertFalse(node0.isComma());
399:       assertFalse(node0.isOr());
400:       assertFalse(node0.isAssignAdd());
401:       assertFalse(node0.isLabel());
402:       assertFalse(node0.isDelProp());
403:       assertFalse(node0.isDo());
404:       assertFalse(node0.isNull());
405:       assertFalse(node0.isEmpty());
406:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
407:       assertEquals(36, Node.QUOTED_PROP);
408:       assertEquals(47, Node.IS_DISPATCHER);
409:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
410:       assertEquals(29, Node.JSDOC_INFO_PROP);
411:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
412:       assertEquals(53, Node.INPUT_ID);
413:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
414:       assertEquals(12, Node.COLUMN_BITS);
415:       assertEquals(32, Node.INCRDECR_PROP);
416:       assertEquals(55, Node.INFERRED_FUNCTION);
417:       assertEquals(4095, Node.COLUMN_MASK);
418:       assertEquals(56, Node.CHANGE_TIME);
419:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
420:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
421:       assertEquals(48, Node.DIRECTIVES);
422:       assertEquals(49, Node.DIRECT_EVAL);
423:       assertEquals(37, Node.OPT_ARG_NAME);
424:       assertEquals(57, Node.REFLECTED_OBJECT);
425:       assertEquals(52, Node.LENGTH);
426:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
427:       assertEquals(50, Node.FREE_CALL);
428:       assertEquals(54, Node.SLASH_V);
429:       assertEquals(15, Node.NO_SIDE_EFFECTS);
430:       assertEquals(57, Node.LAST_PROP);
431:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
432:       assertEquals(8, Node.FLAG_NO_THROWS);
433:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
434:       assertEquals(1, Node.DECR_FLAG);
435:       assertEquals(39, Node.EMPTY_BLOCK);
436:       assertEquals(46, Node.IS_NAMESPACE);
437:       assertEquals(30, Node.VAR_ARGS_NAME);
438:       assertEquals(51, Node.STATIC_SOURCE_FILE);
439:       assertEquals(43, Node.IS_CONSTANT_NAME);
440:       assertEquals(2, Node.POST_FLAG);
441:       assertEquals(40, Node.ORIGINALNAME_PROP);
442:       
443:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
444:       assertNotNull(simpleErrorReporter0);
445:       
446:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
447:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
448:       assertNotNull(jSTypeRegistry0);
449:       
450:       Node node1 = new Node(38);
451:       assertFalse(node1.isNumber());
452:       assertFalse(node1.isTypeOf());
453:       assertFalse(node1.hasChildren());
454:       assertFalse(node1.isDec());
455:       assertEquals((-1), node1.getSourcePosition());
456:       assertFalse(node1.isLabelName());
457:       assertFalse(node1.isLabel());
458:       assertFalse(node1.isAssignAdd());
459:       assertFalse(node1.isReturn());
460:       assertFalse(node1.hasOneChild());
461:       assertFalse(node1.isOr());
462:       assertEquals(38, node1.getType());
463:       assertFalse(node1.isNew());
464:       assertFalse(node1.isDo());
465:       assertFalse(node1.isAnd());
466:       assertFalse(node1.isCast());
467:       assertFalse(node1.isVar());
468:       assertFalse(node1.isContinue());
469:       assertFalse(node1.isSetterDef());
470:       assertFalse(node1.isThis());
471:       assertTrue(node1.isName());
472:       assertFalse(node1.isThrow());
473:       assertFalse(node1.isParamList());
474:       assertFalse(node1.isStringKey());
475:       assertFalse(node1.isRegExp());
476:       assertFalse(node1.isScript());
477:       assertFalse(node1.isTry());
478:       assertFalse(node1.isBlock());
479:       assertFalse(node1.hasMoreThanOneChild());
480:       assertFalse(node1.isHook());
481:       assertEquals((-1), node1.getLineno());
482:       assertFalse(node1.isWith());
483:       assertFalse(node1.isCatch());
484:       assertFalse(node1.isInstanceOf());
485:       assertFalse(node1.isNE());
486:       assertFalse(node1.isDelProp());
487:       assertFalse(node1.isGetterDef());
488:       assertFalse(node1.isFor());
489:       assertFalse(node1.isIf());
490:       assertFalse(node1.isCase());
491:       assertFalse(node1.isEmpty());
492:       assertFalse(node1.isIn());
493:       assertFalse(node1.isString());
494:       assertFalse(node1.isSwitch());
495:       assertFalse(node1.isFunction());
496:       assertFalse(node1.isInc());
497:       assertFalse(node1.isDebugger());
498:       assertEquals((-1), node1.getCharno());
499:       assertFalse(node1.isDefaultCase());
500:       assertFalse(node1.isArrayLit());
501:       assertEquals(0, node1.getChildCount());
502:       assertFalse(node1.isFalse());
503:       assertFalse(node1.isNull());
504:       assertFalse(node1.isBreak());
505:       assertFalse(node1.isGetProp());
506:       assertFalse(node1.isComma());
507:       assertFalse(node1.isObjectLit());
508:       assertFalse(node1.isNot());
509:       assertFalse(node1.isAdd());
510:       assertFalse(node1.isExprResult());
511:       assertFalse(node1.isTrue());
512:       assertFalse(node1.isVoid());
513:       assertFalse(node1.isWhile());
514:       assertFalse(node1.isCall());
515:       assertFalse(node1.isAssign());
516:       assertFalse(node1.isGetElem());
517:       assertNotNull(node1);
518:       assertFalse(node1.equals((Object)node0));
519:       assertEquals(37, Node.OPT_ARG_NAME);
520:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
521:       assertEquals(47, Node.IS_DISPATCHER);
522:       assertEquals(51, Node.STATIC_SOURCE_FILE);
523:       assertEquals(2, Node.POST_FLAG);
524:       assertEquals(46, Node.IS_NAMESPACE);
525:       assertEquals(56, Node.CHANGE_TIME);
526:       assertEquals(49, Node.DIRECT_EVAL);
527:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
528:       assertEquals(54, Node.SLASH_V);
529:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
530:       assertEquals(1, Node.DECR_FLAG);
531:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
532:       assertEquals(12, Node.COLUMN_BITS);
533:       assertEquals(32, Node.INCRDECR_PROP);
534:       assertEquals(48, Node.DIRECTIVES);
535:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
536:       assertEquals(39, Node.EMPTY_BLOCK);
537:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
538:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
539:       assertEquals(50, Node.FREE_CALL);
540:       assertEquals(4095, Node.COLUMN_MASK);
541:       assertEquals(8, Node.FLAG_NO_THROWS);
542:       assertEquals(40, Node.ORIGINALNAME_PROP);
543:       assertEquals(57, Node.REFLECTED_OBJECT);
544:       assertEquals(43, Node.IS_CONSTANT_NAME);
545:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
546:       assertEquals(15, Node.NO_SIDE_EFFECTS);
547:       assertEquals(53, Node.INPUT_ID);
548:       assertEquals(36, Node.QUOTED_PROP);
549:       assertEquals(30, Node.VAR_ARGS_NAME);
550:       assertEquals(52, Node.LENGTH);
551:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
552:       assertEquals(55, Node.INFERRED_FUNCTION);
553:       assertEquals(29, Node.JSDOC_INFO_PROP);
554:       assertEquals(57, Node.LAST_PROP);
555:       
556:       Node node2 = new Node(42, node1);
557:       assertFalse(node1.isNumber());
558:       assertFalse(node1.isTypeOf());
559:       assertFalse(node1.hasChildren());
560:       assertFalse(node1.isDec());
561:       assertEquals((-1), node1.getSourcePosition());
562:       assertFalse(node1.isLabelName());
563:       assertFalse(node1.isLabel());
564:       assertFalse(node1.isAssignAdd());
565:       assertFalse(node1.isReturn());
566:       assertFalse(node1.hasOneChild());
567:       assertFalse(node1.isOr());
568:       assertEquals(38, node1.getType());
569:       assertFalse(node1.isNew());
570:       assertFalse(node1.isDo());
571:       assertFalse(node1.isAnd());
572:       assertFalse(node1.isCast());
573:       assertFalse(node1.isVar());
574:       assertFalse(node1.isContinue());
575:       assertFalse(node1.isSetterDef());
576:       assertFalse(node1.isThis());
577:       assertTrue(node1.isName());
578:       assertFalse(node1.isThrow());
579:       assertFalse(node1.isParamList());
580:       assertFalse(node1.isStringKey());
581:       assertFalse(node1.isRegExp());
582:       assertFalse(node1.isScript());
583:       assertFalse(node1.isTry());
584:       assertFalse(node1.isBlock());
585:       assertFalse(node1.hasMoreThanOneChild());
586:       assertFalse(node1.isHook());
587:       assertEquals((-1), node1.getLineno());
588:       assertFalse(node1.isWith());
589:       assertFalse(node1.isCatch());
590:       assertFalse(node1.isInstanceOf());
591:       assertFalse(node1.isNE());
592:       assertFalse(node1.isDelProp());
593:       assertFalse(node1.isGetterDef());
594:       assertFalse(node1.isFor());
595:       assertFalse(node1.isIf());
596:       assertFalse(node1.isCase());
597:       assertFalse(node1.isEmpty());
598:       assertFalse(node1.isIn());
599:       assertFalse(node1.isString());
600:       assertFalse(node1.isSwitch());
601:       assertFalse(node1.isFunction());
602:       assertFalse(node1.isInc());
603:       assertFalse(node1.isDebugger());
604:       assertEquals((-1), node1.getCharno());
605:       assertFalse(node1.isDefaultCase());
606:       assertFalse(node1.isArrayLit());
607:       assertEquals(0, node1.getChildCount());
608:       assertFalse(node1.isFalse());
609:       assertFalse(node1.isNull());
610:       assertFalse(node1.isBreak());
611:       assertFalse(node1.isGetProp());
612:       assertFalse(node1.isComma());
613:       assertFalse(node1.isObjectLit());
614:       assertFalse(node1.isNot());
615:       assertFalse(node1.isAdd());
616:       assertFalse(node1.isExprResult());
617:       assertFalse(node1.isTrue());
618:       assertFalse(node1.isVoid());
619:       assertFalse(node1.isWhile());
620:       assertFalse(node1.isCall());
621:       assertFalse(node1.isAssign());
622:       assertFalse(node1.isGetElem());
623:       assertFalse(node2.isFor());
624:       assertFalse(node2.isEmpty());
625:       assertTrue(node2.hasOneChild());
626:       assertFalse(node2.isDelProp());
627:       assertFalse(node2.isIf());
628:       assertFalse(node2.isArrayLit());
629:       assertFalse(node2.isTry());
630:       assertFalse(node2.isDebugger());
631:       assertFalse(node2.isNE());
632:       assertFalse(node2.isTrue());
633:       assertFalse(node2.isIn());
634:       assertFalse(node2.isGetterDef());
635:       assertFalse(node2.isDefaultCase());
636:       assertFalse(node2.isSwitch());
637:       assertFalse(node2.isFunction());
638:       assertFalse(node2.isThrow());
639:       assertFalse(node2.isStringKey());
640:       assertFalse(node2.isHook());
641:       assertEquals((-1), node2.getCharno());
642:       assertFalse(node2.isParamList());
643:       assertFalse(node2.isInc());
644:       assertFalse(node2.isSetterDef());
645:       assertFalse(node2.isCase());
646:       assertFalse(node2.isCatch());
647:       assertEquals((-1), node2.getLineno());
648:       assertTrue(node2.hasChildren());
649:       assertFalse(node2.isBlock());
650:       assertFalse(node2.isInstanceOf());
651:       assertEquals(1, node2.getChildCount());
652:       assertFalse(node2.hasMoreThanOneChild());
653:       assertFalse(node2.isWith());
654:       assertFalse(node2.isRegExp());
655:       assertFalse(node2.isCast());
656:       assertFalse(node2.isGetElem());
657:       assertFalse(node2.isLabelName());
658:       assertFalse(node2.isScript());
659:       assertEquals((-1), node2.getSourcePosition());
660:       assertFalse(node2.isOr());
661:       assertFalse(node2.isNot());
662:       assertFalse(node2.isNumber());
663:       assertFalse(node2.isContinue());
664:       assertFalse(node2.isAnd());
665:       assertEquals(42, node2.getType());
666:       assertFalse(node2.isDo());
667:       assertFalse(node2.isAssignAdd());
668:       assertFalse(node2.isLabel());
669:       assertFalse(node2.isFalse());
670:       assertFalse(node2.isVar());
671:       assertFalse(node2.isCall());
672:       assertFalse(node2.isBreak());
673:       assertFalse(node2.isName());
674:       assertFalse(node2.isGetProp());
675:       assertFalse(node2.isNew());
676:       assertFalse(node2.isAdd());
677:       assertFalse(node2.isNull());
678:       assertFalse(node2.isString());
679:       assertFalse(node2.isObjectLit());
680:       assertFalse(node2.isWhile());
681:       assertFalse(node2.isVoid());
682:       assertFalse(node2.isComma());
683:       assertFalse(node2.isReturn());
684:       assertFalse(node2.isExprResult());
685:       assertFalse(node2.isDec());
686:       assertTrue(node2.isThis());
687:       assertFalse(node2.isAssign());
688:       assertFalse(node2.isTypeOf());
689:       assertNotNull(node2);
690:       assertFalse(node1.equals((Object)node0));
691:       assertFalse(node2.equals((Object)node0));
692:       assertFalse(node2.equals((Object)node1));
693:       assertEquals(37, Node.OPT_ARG_NAME);
694:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
695:       assertEquals(47, Node.IS_DISPATCHER);
696:       assertEquals(51, Node.STATIC_SOURCE_FILE);
697:       assertEquals(2, Node.POST_FLAG);
698:       assertEquals(46, Node.IS_NAMESPACE);
699:       assertEquals(56, Node.CHANGE_TIME);
700:       assertEquals(49, Node.DIRECT_EVAL);
701:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
702:       assertEquals(54, Node.SLASH_V);
703:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
704:       assertEquals(1, Node.DECR_FLAG);
705:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
706:       assertEquals(12, Node.COLUMN_BITS);
707:       assertEquals(32, Node.INCRDECR_PROP);
708:       assertEquals(48, Node.DIRECTIVES);
709:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
710:       assertEquals(39, Node.EMPTY_BLOCK);
711:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
712:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
713:       assertEquals(50, Node.FREE_CALL);
714:       assertEquals(4095, Node.COLUMN_MASK);
715:       assertEquals(8, Node.FLAG_NO_THROWS);
716:       assertEquals(40, Node.ORIGINALNAME_PROP);
717:       assertEquals(57, Node.REFLECTED_OBJECT);
718:       assertEquals(43, Node.IS_CONSTANT_NAME);
719:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
720:       assertEquals(15, Node.NO_SIDE_EFFECTS);
721:       assertEquals(53, Node.INPUT_ID);
722:       assertEquals(36, Node.QUOTED_PROP);
723:       assertEquals(30, Node.VAR_ARGS_NAME);
724:       assertEquals(52, Node.LENGTH);
725:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
726:       assertEquals(55, Node.INFERRED_FUNCTION);
727:       assertEquals(29, Node.JSDOC_INFO_PROP);
728:       assertEquals(57, Node.LAST_PROP);
729:       assertEquals(29, Node.JSDOC_INFO_PROP);
730:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
731:       assertEquals(56, Node.CHANGE_TIME);
732:       assertEquals(2, Node.POST_FLAG);
733:       assertEquals(47, Node.IS_DISPATCHER);
734:       assertEquals(46, Node.IS_NAMESPACE);
735:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
736:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
737:       assertEquals(37, Node.OPT_ARG_NAME);
738:       assertEquals(43, Node.IS_CONSTANT_NAME);
739:       assertEquals(4095, Node.COLUMN_MASK);
740:       assertEquals(12, Node.COLUMN_BITS);
741:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
742:       assertEquals(51, Node.STATIC_SOURCE_FILE);
743:       assertEquals(32, Node.INCRDECR_PROP);
744:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
745:       assertEquals(1, Node.DECR_FLAG);
746:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
747:       assertEquals(50, Node.FREE_CALL);
748:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
749:       assertEquals(8, Node.FLAG_NO_THROWS);
750:       assertEquals(57, Node.REFLECTED_OBJECT);
751:       assertEquals(54, Node.SLASH_V);
752:       assertEquals(40, Node.ORIGINALNAME_PROP);
753:       assertEquals(48, Node.DIRECTIVES);
754:       assertEquals(30, Node.VAR_ARGS_NAME);
755:       assertEquals(49, Node.DIRECT_EVAL);
756:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
757:       assertEquals(57, Node.LAST_PROP);
758:       assertEquals(36, Node.QUOTED_PROP);
759:       assertEquals(52, Node.LENGTH);
760:       assertEquals(53, Node.INPUT_ID);
761:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
762:       assertEquals(55, Node.INFERRED_FUNCTION);
763:       assertEquals(39, Node.EMPTY_BLOCK);
764:       assertEquals(15, Node.NO_SIDE_EFFECTS);
765:       
766:       Iterable<Node> iterable0 = node1.children();
767:       assertFalse(node1.isNumber());
768:       assertFalse(node1.isTypeOf());
769:       assertFalse(node1.hasChildren());
770:       assertFalse(node1.isDec());
771:       assertEquals((-1), node1.getSourcePosition());
772:       assertFalse(node1.isLabelName());
773:       assertFalse(node1.isLabel());
774:       assertFalse(node1.isAssignAdd());
775:       assertFalse(node1.isReturn());
776:       assertFalse(node1.hasOneChild());
777:       assertFalse(node1.isOr());
778:       assertEquals(38, node1.getType());
779:       assertFalse(node1.isNew());
780:       assertFalse(node1.isDo());
781:       assertFalse(node1.isAnd());
782:       assertFalse(node1.isCast());
783:       assertFalse(node1.isVar());
784:       assertFalse(node1.isContinue());
785:       assertFalse(node1.isSetterDef());
786:       assertFalse(node1.isThis());
787:       assertTrue(node1.isName());
788:       assertFalse(node1.isThrow());
789:       assertFalse(node1.isParamList());
790:       assertFalse(node1.isStringKey());
791:       assertFalse(node1.isRegExp());
792:       assertFalse(node1.isScript());
793:       assertFalse(node1.isTry());
794:       assertFalse(node1.isBlock());
795:       assertFalse(node1.hasMoreThanOneChild());
796:       assertFalse(node1.isHook());
797:       assertEquals((-1), node1.getLineno());
798:       assertFalse(node1.isWith());
799:       assertFalse(node1.isCatch());
800:       assertFalse(node1.isInstanceOf());
801:       assertFalse(node1.isNE());
802:       assertFalse(node1.isDelProp());
803:       assertFalse(node1.isGetterDef());
804:       assertFalse(node1.isFor());
805:       assertFalse(node1.isIf());
806:       assertFalse(node1.isCase());
807:       assertFalse(node1.isEmpty());
808:       assertFalse(node1.isIn());
809:       assertFalse(node1.isString());
810:       assertFalse(node1.isSwitch());
811:       assertFalse(node1.isFunction());
812:       assertFalse(node1.isInc());
813:       assertFalse(node1.isDebugger());
814:       assertEquals((-1), node1.getCharno());
815:       assertFalse(node1.isDefaultCase());
816:       assertFalse(node1.isArrayLit());
817:       assertEquals(0, node1.getChildCount());
818:       assertFalse(node1.isFalse());
819:       assertFalse(node1.isNull());
820:       assertFalse(node1.isBreak());
821:       assertFalse(node1.isGetProp());
822:       assertFalse(node1.isComma());
823:       assertFalse(node1.isObjectLit());
824:       assertFalse(node1.isNot());
825:       assertFalse(node1.isAdd());
826:       assertFalse(node1.isExprResult());
827:       assertFalse(node1.isTrue());
828:       assertFalse(node1.isVoid());
829:       assertFalse(node1.isWhile());
830:       assertFalse(node1.isCall());
831:       assertFalse(node1.isAssign());
832:       assertFalse(node1.isGetElem());
833:       assertNotNull(iterable0);
834:       assertFalse(iterable0.contains(node1));
835:       assertFalse(node1.equals((Object)node2));
836:       assertFalse(node1.equals((Object)node0));
837:       assertEquals(37, Node.OPT_ARG_NAME);
838:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
839:       assertEquals(47, Node.IS_DISPATCHER);
840:       assertEquals(51, Node.STATIC_SOURCE_FILE);
841:       assertEquals(2, Node.POST_FLAG);
842:       assertEquals(46, Node.IS_NAMESPACE);
843:       assertEquals(56, Node.CHANGE_TIME);
844:       assertEquals(49, Node.DIRECT_EVAL);
845:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
846:       assertEquals(54, Node.SLASH_V);
847:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
848:       assertEquals(1, Node.DECR_FLAG);
849:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
850:       assertEquals(12, Node.COLUMN_BITS);
851:       assertEquals(32, Node.INCRDECR_PROP);
852:       assertEquals(48, Node.DIRECTIVES);
853:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
854:       assertEquals(39, Node.EMPTY_BLOCK);
855:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
856:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
857:       assertEquals(50, Node.FREE_CALL);
858:       assertEquals(4095, Node.COLUMN_MASK);
859:       assertEquals(8, Node.FLAG_NO_THROWS);
860:       assertEquals(40, Node.ORIGINALNAME_PROP);
861:       assertEquals(57, Node.REFLECTED_OBJECT);
862:       assertEquals(43, Node.IS_CONSTANT_NAME);
863:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
864:       assertEquals(15, Node.NO_SIDE_EFFECTS);
865:       assertEquals(53, Node.INPUT_ID);
866:       assertEquals(36, Node.QUOTED_PROP);
867:       assertEquals(30, Node.VAR_ARGS_NAME);
868:       assertEquals(52, Node.LENGTH);
869:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
870:       assertEquals(55, Node.INFERRED_FUNCTION);
871:       assertEquals(29, Node.JSDOC_INFO_PROP);
872:       assertEquals(57, Node.LAST_PROP);
873:       assertNotSame(node1, node2);
874:       assertNotSame(node1, node0);
875:       
876:       boolean boolean2 = node1.isGetProp();
877:       assertFalse(node1.isNumber());
878:       assertFalse(node1.isTypeOf());
879:       assertFalse(node1.hasChildren());
880:       assertFalse(node1.isDec());
881:       assertEquals((-1), node1.getSourcePosition());
882:       assertFalse(node1.isLabelName());
883:       assertFalse(node1.isLabel());
884:       assertFalse(node1.isAssignAdd());
885:       assertFalse(node1.isReturn());
886:       assertFalse(node1.hasOneChild());
887:       assertFalse(node1.isOr());
888:       assertEquals(38, node1.getType());
889:       assertFalse(node1.isNew());
890:       assertFalse(node1.isDo());
891:       assertFalse(node1.isAnd());
892:       assertFalse(node1.isCast());
893:       assertFalse(node1.isVar());
894:       assertFalse(node1.isContinue());
895:       assertFalse(node1.isSetterDef());
896:       assertFalse(node1.isThis());
897:       assertTrue(node1.isName());
898:       assertFalse(node1.isThrow());
899:       assertFalse(node1.isParamList());
900:       assertFalse(node1.isStringKey());
901:       assertFalse(node1.isRegExp());
902:       assertFalse(node1.isScript());
903:       assertFalse(node1.isTry());
904:       assertFalse(node1.isBlock());
905:       assertFalse(node1.hasMoreThanOneChild());
906:       assertFalse(node1.isHook());
907:       assertEquals((-1), node1.getLineno());
908:       assertFalse(node1.isWith());
909:       assertFalse(node1.isCatch());
910:       assertFalse(node1.isInstanceOf());
911:       assertFalse(node1.isNE());
912:       assertFalse(node1.isDelProp());
913:       assertFalse(node1.isGetterDef());
914:       assertFalse(node1.isFor());
915:       assertFalse(node1.isIf());
916:       assertFalse(node1.isCase());
917:       assertFalse(node1.isEmpty());
918:       assertFalse(node1.isIn());
919:       assertFalse(node1.isString());
920:       assertFalse(node1.isSwitch());
921:       assertFalse(node1.isFunction());
922:       assertFalse(node1.isInc());
923:       assertFalse(node1.isDebugger());
924:       assertEquals((-1), node1.getCharno());
925:       assertFalse(node1.isDefaultCase());
926:       assertFalse(node1.isArrayLit());
927:       assertEquals(0, node1.getChildCount());
928:       assertFalse(node1.isFalse());
929:       assertFalse(node1.isNull());
930:       assertFalse(node1.isBreak());
931:       assertFalse(node1.isGetProp());
932:       assertFalse(node1.isComma());
933:       assertFalse(node1.isObjectLit());
934:       assertFalse(node1.isNot());
935:       assertFalse(node1.isAdd());
936:       assertFalse(node1.isExprResult());
937:       assertFalse(node1.isTrue());
938:       assertFalse(node1.isVoid());
939:       assertFalse(node1.isWhile());
940:       assertFalse(node1.isCall());
941:       assertFalse(node1.isAssign());
942:       assertFalse(node1.isGetElem());
943:       assertFalse(boolean2);
944:       assertFalse(node1.equals((Object)node2));
945:       assertFalse(node1.equals((Object)node0));
946:       assertTrue(boolean2 == boolean0);
947:       assertTrue(boolean2 == boolean1);
948:       assertEquals(37, Node.OPT_ARG_NAME);
949:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
950:       assertEquals(47, Node.IS_DISPATCHER);
951:       assertEquals(51, Node.STATIC_SOURCE_FILE);
952:       assertEquals(2, Node.POST_FLAG);
953:       assertEquals(46, Node.IS_NAMESPACE);
954:       assertEquals(56, Node.CHANGE_TIME);
955:       assertEquals(49, Node.DIRECT_EVAL);
956:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
957:       assertEquals(54, Node.SLASH_V);
958:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
959:       assertEquals(1, Node.DECR_FLAG);
960:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
961:       assertEquals(12, Node.COLUMN_BITS);
962:       assertEquals(32, Node.INCRDECR_PROP);
963:       assertEquals(48, Node.DIRECTIVES);
964:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
965:       assertEquals(39, Node.EMPTY_BLOCK);
966:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
967:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
968:       assertEquals(50, Node.FREE_CALL);
969:       assertEquals(4095, Node.COLUMN_MASK);
970:       assertEquals(8, Node.FLAG_NO_THROWS);
971:       assertEquals(40, Node.ORIGINALNAME_PROP);
972:       assertEquals(57, Node.REFLECTED_OBJECT);
973:       assertEquals(43, Node.IS_CONSTANT_NAME);
974:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
975:       assertEquals(15, Node.NO_SIDE_EFFECTS);
976:       assertEquals(53, Node.INPUT_ID);
977:       assertEquals(36, Node.QUOTED_PROP);
978:       assertEquals(30, Node.VAR_ARGS_NAME);
979:       assertEquals(52, Node.LENGTH);
980:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
981:       assertEquals(55, Node.INFERRED_FUNCTION);
982:       assertEquals(29, Node.JSDOC_INFO_PROP);
983:       assertEquals(57, Node.LAST_PROP);
984:       assertNotSame(node1, node2);
985:       assertNotSame(node1, node0);
986:       
987:       boolean boolean3 = node1.isParamList();
988:       assertFalse(node1.isNumber());
989:       assertFalse(node1.isTypeOf());
990:       assertFalse(node1.hasChildren());
991:       assertFalse(node1.isDec());
992:       assertEquals((-1), node1.getSourcePosition());
993:       assertFalse(node1.isLabelName());
994:       assertFalse(node1.isLabel());
995:       assertFalse(node1.isAssignAdd());
996:       assertFalse(node1.isReturn());
997:       assertFalse(node1.hasOneChild());
998:       assertFalse(node1.isOr());
999:       assertEquals(38, node1.getType());
1000:       assertFalse(node1.isNew());
1001:       assertFalse(node1.isDo());
1002:       assertFalse(node1.isAnd());
1003:       assertFalse(node1.isCast());
1004:       assertFalse(node1.isVar());
1005:       assertFalse(node1.isContinue());
1006:       assertFalse(node1.isSetterDef());
1007:       assertFalse(node1.isThis());
1008:       assertTrue(node1.isName());
1009:       assertFalse(node1.isThrow());
1010:       assertFalse(node1.isParamList());
1011:       assertFalse(node1.isStringKey());
1012:       assertFalse(node1.isRegExp());
1013:       assertFalse(node1.isScript());
1014:       assertFalse(node1.isTry());
1015:       assertFalse(node1.isBlock());
1016:       assertFalse(node1.hasMoreThanOneChild());
1017:       assertFalse(node1.isHook());
1018:       assertEquals((-1), node1.getLineno());
1019:       assertFalse(node1.isWith());
1020:       assertFalse(node1.isCatch());
1021:       assertFalse(node1.isInstanceOf());
1022:       assertFalse(node1.isNE());
1023:       assertFalse(node1.isDelProp());
1024:       assertFalse(node1.isGetterDef());
1025:       assertFalse(node1.isFor());
1026:       assertFalse(node1.isIf());
1027:       assertFalse(node1.isCase());
1028:       assertFalse(node1.isEmpty());
1029:       assertFalse(node1.isIn());
1030:       assertFalse(node1.isString());
1031:       assertFalse(node1.isSwitch());
1032:       assertFalse(node1.isFunction());
1033:       assertFalse(node1.isInc());
1034:       assertFalse(node1.isDebugger());
1035:       assertEquals((-1), node1.getCharno());
1036:       assertFalse(node1.isDefaultCase());
1037:       assertFalse(node1.isArrayLit());
1038:       assertEquals(0, node1.getChildCount());
1039:       assertFalse(node1.isFalse());
1040:       assertFalse(node1.isNull());
1041:       assertFalse(node1.isBreak());
1042:       assertFalse(node1.isGetProp());
1043:       assertFalse(node1.isComma());
1044:       assertFalse(node1.isObjectLit());
1045:       assertFalse(node1.isNot());
1046:       assertFalse(node1.isAdd());
1047:       assertFalse(node1.isExprResult());
1048:       assertFalse(node1.isTrue());
1049:       assertFalse(node1.isVoid());
1050:       assertFalse(node1.isWhile());
1051:       assertFalse(node1.isCall());
1052:       assertFalse(node1.isAssign());
1053:       assertFalse(node1.isGetElem());
1054:       assertFalse(boolean3);
1055:       assertFalse(node1.equals((Object)node2));
1056:       assertFalse(node1.equals((Object)node0));
1057:       assertTrue(boolean3 == boolean0);
1058:       assertTrue(boolean3 == boolean1);
1059:       assertTrue(boolean3 == boolean2);
1060:       assertEquals(37, Node.OPT_ARG_NAME);
1061:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1062:       assertEquals(47, Node.IS_DISPATCHER);
1063:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1064:       assertEquals(2, Node.POST_FLAG);
1065:       assertEquals(46, Node.IS_NAMESPACE);
1066:       assertEquals(56, Node.CHANGE_TIME);
1067:       assertEquals(49, Node.DIRECT_EVAL);
1068:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1069:       assertEquals(54, Node.SLASH_V);
1070:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1071:       assertEquals(1, Node.DECR_FLAG);
1072:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1073:       assertEquals(12, Node.COLUMN_BITS);
1074:       assertEquals(32, Node.INCRDECR_PROP);
1075:       assertEquals(48, Node.DIRECTIVES);
1076:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1077:       assertEquals(39, Node.EMPTY_BLOCK);
1078:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1079:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1080:       assertEquals(50, Node.FREE_CALL);
1081:       assertEquals(4095, Node.COLUMN_MASK);
1082:       assertEquals(8, Node.FLAG_NO_THROWS);
1083:       assertEquals(40, Node.ORIGINALNAME_PROP);
1084:       assertEquals(57, Node.REFLECTED_OBJECT);
1085:       assertEquals(43, Node.IS_CONSTANT_NAME);
1086:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1087:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1088:       assertEquals(53, Node.INPUT_ID);
1089:       assertEquals(36, Node.QUOTED_PROP);
1090:       assertEquals(30, Node.VAR_ARGS_NAME);
1091:       assertEquals(52, Node.LENGTH);
1092:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1093:       assertEquals(55, Node.INFERRED_FUNCTION);
1094:       assertEquals(29, Node.JSDOC_INFO_PROP);
1095:       assertEquals(57, Node.LAST_PROP);
1096:       assertNotSame(node1, node2);
1097:       assertNotSame(node1, node0);
1098:       
1099:       boolean boolean4 = node0.isSetterDef();
1100:       assertFalse(node0.isTrue());
1101:       assertEquals(2810, node0.getCharno());
1102:       assertFalse(node0.isArrayLit());
1103:       assertFalse(node0.isDefaultCase());
1104:       assertFalse(node0.isTry());
1105:       assertFalse(node0.isVoid());
1106:       assertFalse(node0.isFor());
1107:       assertFalse(node0.isCatch());
1108:       assertEquals(0, node0.getChildCount());
1109:       assertFalse(node0.isFunction());
1110:       assertFalse(node0.isRegExp());
1111:       assertFalse(node0.isParamList());
1112:       assertFalse(node0.isCase());
1113:       assertFalse(node0.isString());
1114:       assertFalse(node0.isStringKey());
1115:       assertFalse(node0.isDebugger());
1116:       assertFalse(node0.isGetterDef());
1117:       assertFalse(node0.isHook());
1118:       assertFalse(node0.isBlock());
1119:       assertFalse(node0.isInc());
1120:       assertFalse(node0.isThrow());
1121:       assertFalse(node0.hasMoreThanOneChild());
1122:       assertFalse(node0.isThis());
1123:       assertFalse(node0.isContinue());
1124:       assertFalse(node0.isFalse());
1125:       assertFalse(node0.isInstanceOf());
1126:       assertFalse(node0.isSetterDef());
1127:       assertFalse(node0.isNE());
1128:       assertFalse(node0.isIf());
1129:       assertFalse(node0.isIn());
1130:       assertEquals(48, node0.getLineno());
1131:       assertFalse(node0.isExprResult());
1132:       assertFalse(node0.hasOneChild());
1133:       assertFalse(node0.isAssign());
1134:       assertFalse(node0.isWith());
1135:       assertFalse(node0.isLabelName());
1136:       assertFalse(node0.isGetElem());
1137:       assertFalse(node0.hasChildren());
1138:       assertFalse(node0.isCast());
1139:       assertFalse(node0.isDec());
1140:       assertFalse(node0.isTypeOf());
1141:       assertFalse(node0.isReturn());
1142:       assertEquals(199418, node0.getSourcePosition());
1143:       assertFalse(node0.isGetProp());
1144:       assertFalse(node0.isAnd());
1145:       assertFalse(node0.isNot());
1146:       assertFalse(node0.isScript());
1147:       assertFalse(node0.isNumber());
1148:       assertFalse(node0.isObjectLit());
1149:       assertFalse(node0.isNew());
1150:       assertFalse(node0.isAdd());
1151:       assertFalse(node0.isVar());
1152:       assertFalse(node0.isSwitch());
1153:       assertEquals(29, node0.getType());
1154:       assertFalse(node0.isName());
1155:       assertFalse(node0.isWhile());
1156:       assertFalse(node0.isBreak());
1157:       assertFalse(node0.isCall());
1158:       assertFalse(node0.isComma());
1159:       assertFalse(node0.isOr());
1160:       assertFalse(node0.isAssignAdd());
1161:       assertFalse(node0.isLabel());
1162:       assertFalse(node0.isDelProp());
1163:       assertFalse(node0.isDo());
1164:       assertFalse(node0.isNull());
1165:       assertFalse(node0.isEmpty());
1166:       assertFalse(boolean4);
1167:       assertFalse(node0.equals((Object)node1));
1168:       assertFalse(node0.equals((Object)node2));
1169:       assertTrue(boolean4 == boolean2);
1170:       assertTrue(boolean4 == boolean3);
1171:       assertTrue(boolean4 == boolean0);
1172:       assertTrue(boolean4 == boolean1);
1173:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1174:       assertEquals(36, Node.QUOTED_PROP);
1175:       assertEquals(47, Node.IS_DISPATCHER);
1176:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1177:       assertEquals(29, Node.JSDOC_INFO_PROP);
1178:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1179:       assertEquals(53, Node.INPUT_ID);
1180:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1181:       assertEquals(12, Node.COLUMN_BITS);
1182:       assertEquals(32, Node.INCRDECR_PROP);
1183:       assertEquals(55, Node.INFERRED_FUNCTION);
1184:       assertEquals(4095, Node.COLUMN_MASK);
1185:       assertEquals(56, Node.CHANGE_TIME);
1186:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1187:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1188:       assertEquals(48, Node.DIRECTIVES);
1189:       assertEquals(49, Node.DIRECT_EVAL);
1190:       assertEquals(37, Node.OPT_ARG_NAME);
1191:       assertEquals(57, Node.REFLECTED_OBJECT);
1192:       assertEquals(52, Node.LENGTH);
1193:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1194:       assertEquals(50, Node.FREE_CALL);
1195:       assertEquals(54, Node.SLASH_V);
1196:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1197:       assertEquals(57, Node.LAST_PROP);
1198:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1199:       assertEquals(8, Node.FLAG_NO_THROWS);
1200:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1201:       assertEquals(1, Node.DECR_FLAG);
1202:       assertEquals(39, Node.EMPTY_BLOCK);
1203:       assertEquals(46, Node.IS_NAMESPACE);
1204:       assertEquals(30, Node.VAR_ARGS_NAME);
1205:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1206:       assertEquals(43, Node.IS_CONSTANT_NAME);
1207:       assertEquals(2, Node.POST_FLAG);
1208:       assertEquals(40, Node.ORIGINALNAME_PROP);
1209:       assertNotSame(node0, node1);
1210:       assertNotSame(node0, node2);
1211:       
1212:       boolean boolean5 = node0.isNoSideEffectsCall();
1213:       assertFalse(node0.isTrue());
1214:       assertEquals(2810, node0.getCharno());
1215:       assertFalse(node0.isArrayLit());
1216:       assertFalse(node0.isDefaultCase());
1217:       assertFalse(node0.isTry());
1218:       assertFalse(node0.isVoid());
1219:       assertFalse(node0.isFor());
1220:       assertFalse(node0.isCatch());
1221:       assertEquals(0, node0.getChildCount());
1222:       assertFalse(node0.isFunction());
1223:       assertFalse(node0.isRegExp());
1224:       assertFalse(node0.isParamList());
1225:       assertFalse(node0.isCase());
1226:       assertFalse(node0.isString());
1227:       assertFalse(node0.isStringKey());
1228:       assertFalse(node0.isDebugger());
1229:       assertFalse(node0.isGetterDef());
1230:       assertFalse(node0.isHook());
1231:       assertFalse(node0.isBlock());
1232:       assertFalse(node0.isInc());
1233:       assertFalse(node0.isThrow());
1234:       assertFalse(node0.hasMoreThanOneChild());
1235:       assertFalse(node0.isThis());
1236:       assertFalse(node0.isContinue());
1237:       assertFalse(node0.isFalse());
1238:       assertFalse(node0.isInstanceOf());
1239:       assertFalse(node0.isSetterDef());
1240:       assertFalse(node0.isNE());
1241:       assertFalse(node0.isIf());
1242:       assertFalse(node0.isIn());
1243:       assertEquals(48, node0.getLineno());
1244:       assertFalse(node0.isExprResult());
1245:       assertFalse(node0.hasOneChild());
1246:       assertFalse(node0.isAssign());
1247:       assertFalse(node0.isWith());
1248:       assertFalse(node0.isLabelName());
1249:       assertFalse(node0.isGetElem());
1250:       assertFalse(node0.hasChildren());
1251:       assertFalse(node0.isCast());
1252:       assertFalse(node0.isDec());
1253:       assertFalse(node0.isTypeOf());
1254:       assertFalse(node0.isReturn());
1255:       assertEquals(199418, node0.getSourcePosition());
1256:       assertFalse(node0.isGetProp());
1257:       assertFalse(node0.isAnd());
1258:       assertFalse(node0.isNot());
1259:       assertFalse(node0.isScript());
1260:       assertFalse(node0.isNumber());
1261:       assertFalse(node0.isObjectLit());
1262:       assertFalse(node0.isNew());
1263:       assertFalse(node0.isAdd());
1264:       assertFalse(node0.isVar());
1265:       assertFalse(node0.isSwitch());
1266:       assertEquals(29, node0.getType());
1267:       assertFalse(node0.isName());
1268:       assertFalse(node0.isWhile());
1269:       assertFalse(node0.isBreak());
1270:       assertFalse(node0.isCall());
1271:       assertFalse(node0.isComma());
1272:       assertFalse(node0.isOr());
1273:       assertFalse(node0.isAssignAdd());
1274:       assertFalse(node0.isLabel());
1275:       assertFalse(node0.isDelProp());
1276:       assertFalse(node0.isDo());
1277:       assertFalse(node0.isNull());
1278:       assertFalse(node0.isEmpty());
1279:       assertFalse(boolean5);
1280:       assertFalse(node0.equals((Object)node1));
1281:       assertFalse(node0.equals((Object)node2));
1282:       assertTrue(boolean5 == boolean4);
1283:       assertTrue(boolean5 == boolean3);
1284:       assertTrue(boolean5 == boolean1);
1285:       assertTrue(boolean5 == boolean2);
1286:       assertTrue(boolean5 == boolean0);
1287:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1288:       assertEquals(36, Node.QUOTED_PROP);
1289:       assertEquals(47, Node.IS_DISPATCHER);
1290:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1291:       assertEquals(29, Node.JSDOC_INFO_PROP);
1292:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1293:       assertEquals(53, Node.INPUT_ID);
1294:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1295:       assertEquals(12, Node.COLUMN_BITS);
1296:       assertEquals(32, Node.INCRDECR_PROP);
1297:       assertEquals(55, Node.INFERRED_FUNCTION);
1298:       assertEquals(4095, Node.COLUMN_MASK);
1299:       assertEquals(56, Node.CHANGE_TIME);
1300:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1301:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1302:       assertEquals(48, Node.DIRECTIVES);
1303:       assertEquals(49, Node.DIRECT_EVAL);
1304:       assertEquals(37, Node.OPT_ARG_NAME);
1305:       assertEquals(57, Node.REFLECTED_OBJECT);
1306:       assertEquals(52, Node.LENGTH);
1307:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1308:       assertEquals(50, Node.FREE_CALL);
1309:       assertEquals(54, Node.SLASH_V);
1310:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1311:       assertEquals(57, Node.LAST_PROP);
1312:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1313:       assertEquals(8, Node.FLAG_NO_THROWS);
1314:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1315:       assertEquals(1, Node.DECR_FLAG);
1316:       assertEquals(39, Node.EMPTY_BLOCK);
1317:       assertEquals(46, Node.IS_NAMESPACE);
1318:       assertEquals(30, Node.VAR_ARGS_NAME);
1319:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1320:       assertEquals(43, Node.IS_CONSTANT_NAME);
1321:       assertEquals(2, Node.POST_FLAG);
1322:       assertEquals(40, Node.ORIGINALNAME_PROP);
1323:       assertNotSame(node0, node1);
1324:       assertNotSame(node0, node2);
1325:       
1326:       // Undeclared exception!
1327:       try { 
1328:         node1.replaceChildAfter(node2, node0);
1329:         fail("Expecting exception: IllegalArgumentException");
1330:       
1331:       } catch(IllegalArgumentException e) {
1332:          //
1333:          // prev is not a child of this node.
1334:          //
1335:          verifyException("com.google.common.base.Preconditions", e);
1336:       }
1337:   }
1338: }
RegularFileObject[/tmp/EvoSuite_82_1629222872418/com/google/javascript/rhino/Node_82_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:32 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_82_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_82_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_82_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.JSTypeNative",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.common.collect.AbstractIndexedListIterator",
340:       "com.google.common.collect.Iterators$11",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.TemplatizedType",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.javascript.rhino.JSTypeExpression",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.common.collect.Iterators$12",
366:       "com.google.javascript.rhino.jstype.NamedType"
367:     );
368:   }
369: }

[MASTER] 17:54:32.680 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(29, 48, 2810);
assertFalse(node0.isTrue());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertEquals(48, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertEquals(29, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertNotNull(node0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean0 = node0.isNE();
assertFalse(node0.isTrue());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertEquals(48, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertEquals(29, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(boolean0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean1 = node0.isFromExterns();
assertFalse(node0.isTrue());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertEquals(48, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertEquals(29, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

node0.putBooleanProp((-410), true);
assertFalse(node0.isTrue());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertEquals(48, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertEquals(29, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

Node node1 = new Node(38);
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertEquals(38, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertTrue(node1.isName());
assertFalse(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFalse());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAdd());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);

Node node2 = new Node(42, node1);
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertEquals(38, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertTrue(node1.isName());
assertFalse(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFalse());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAdd());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isStringKey());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertEquals((-1), node2.getLineno());
assertTrue(node2.hasChildren());
assertFalse(node2.isBlock());
assertFalse(node2.isInstanceOf());
assertEquals(1, node2.getChildCount());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isScript());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertEquals(42, node2.getType());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isFalse());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isNull());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isVoid());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isExprResult());
assertFalse(node2.isDec());
assertTrue(node2.isThis());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertNotNull(node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertEquals(38, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertTrue(node1.isName());
assertFalse(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFalse());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAdd());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertNotSame(node1, node2);
assertNotSame(node1, node0);

boolean boolean2 = node1.isGetProp();
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertEquals(38, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertTrue(node1.isName());
assertFalse(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFalse());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAdd());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(boolean2);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertNotSame(node1, node2);
assertNotSame(node1, node0);

boolean boolean3 = node1.isParamList();
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertEquals(38, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertTrue(node1.isName());
assertFalse(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFalse());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAdd());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(boolean3);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertNotSame(node1, node2);
assertNotSame(node1, node0);

boolean boolean4 = node0.isSetterDef();
assertFalse(node0.isTrue());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertEquals(48, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertEquals(29, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(boolean4);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotSame(node0, node1);
assertNotSame(node0, node2);

boolean boolean5 = node0.isNoSideEffectsCall();
assertFalse(node0.isTrue());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertEquals(48, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertEquals(29, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(boolean5);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotSame(node0, node1);
assertNotSame(node0, node2);

node1.replaceChildAfter(node2, node0);

[MASTER] 17:54:34.700 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_88_1629222874124/com/google/javascript/rhino/Node_88_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_88_1629222874124/com/google/javascript/rhino/Node_88_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:34.700 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:34.700 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:34.701 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 859
[MASTER] 17:54:34.705 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_88_1629222874124/com/google/javascript/rhino/Node_88_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:34 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_88_tmp__ESTest extends Node_88_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node[] nodeArray0 = new Node[0];
22:       Node node0 = new Node(330, nodeArray0);
23:       assertFalse(node0.isCatch());
24:       assertFalse(node0.isDefaultCase());
25:       assertFalse(node0.isDebugger());
26:       assertFalse(node0.isParamList());
27:       assertFalse(node0.isTrue());
28:       assertFalse(node0.isNull());
29:       assertEquals(0, node0.getSourcePosition());
30:       assertFalse(node0.isSetterDef());
31:       assertFalse(node0.isStringKey());
32:       assertFalse(node0.isVar());
33:       assertFalse(node0.isArrayLit());
34:       assertFalse(node0.isFunction());
35:       assertEquals(0, node0.getLineno());
36:       assertEquals(0, node0.getChildCount());
37:       assertFalse(node0.isContinue());
38:       assertEquals(330, node0.getType());
39:       assertFalse(node0.isReturn());
40:       assertFalse(node0.isWhile());
41:       assertFalse(node0.isDo());
42:       assertFalse(node0.isAssignAdd());
43:       assertFalse(node0.isAdd());
44:       assertFalse(node0.isNew());
45:       assertFalse(node0.isString());
46:       assertFalse(node0.isOr());
47:       assertFalse(node0.isEmpty());
48:       assertFalse(node0.isCall());
49:       assertFalse(node0.isGetElem());
50:       assertFalse(node0.isDelProp());
51:       assertFalse(node0.isName());
52:       assertFalse(node0.isExprResult());
53:       assertFalse(node0.isComma());
54:       assertFalse(node0.isVoid());
55:       assertFalse(node0.hasChildren());
56:       assertFalse(node0.isBreak());
57:       assertFalse(node0.isAssign());
58:       assertFalse(node0.isDec());
59:       assertFalse(node0.isTypeOf());
60:       assertFalse(node0.isAnd());
61:       assertFalse(node0.isObjectLit());
62:       assertFalse(node0.isScript());
63:       assertFalse(node0.isGetProp());
64:       assertEquals(0, node0.getCharno());
65:       assertFalse(node0.isNot());
66:       assertFalse(node0.isCast());
67:       assertFalse(node0.isThrow());
68:       assertFalse(node0.isLabelName());
69:       assertFalse(node0.isLabel());
70:       assertFalse(node0.isFalse());
71:       assertFalse(node0.isCase());
72:       assertFalse(node0.isSwitch());
73:       assertFalse(node0.isInc());
74:       assertFalse(node0.isNE());
75:       assertFalse(node0.isGetterDef());
76:       assertFalse(node0.isNumber());
77:       assertFalse(node0.isIn());
78:       assertFalse(node0.isFor());
79:       assertFalse(node0.isHook());
80:       assertFalse(node0.hasOneChild());
81:       assertFalse(node0.isTry());
82:       assertFalse(node0.isIf());
83:       assertFalse(node0.isThis());
84:       assertFalse(node0.isBlock());
85:       assertFalse(node0.isInstanceOf());
86:       assertFalse(node0.isRegExp());
87:       assertFalse(node0.hasMoreThanOneChild());
88:       assertFalse(node0.isWith());
89:       assertEquals(0, nodeArray0.length);
90:       assertNotNull(node0);
91:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
92:       assertEquals(55, Node.INFERRED_FUNCTION);
93:       assertEquals(36, Node.QUOTED_PROP);
94:       assertEquals(4095, Node.COLUMN_MASK);
95:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
96:       assertEquals(43, Node.IS_CONSTANT_NAME);
97:       assertEquals(48, Node.DIRECTIVES);
98:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
99:       assertEquals(50, Node.FREE_CALL);
100:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
101:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
102:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
103:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
104:       assertEquals(32, Node.INCRDECR_PROP);
105:       assertEquals(1, Node.DECR_FLAG);
106:       assertEquals(51, Node.STATIC_SOURCE_FILE);
107:       assertEquals(12, Node.COLUMN_BITS);
108:       assertEquals(30, Node.VAR_ARGS_NAME);
109:       assertEquals(46, Node.IS_NAMESPACE);
110:       assertEquals(54, Node.SLASH_V);
111:       assertEquals(37, Node.OPT_ARG_NAME);
112:       assertEquals(49, Node.DIRECT_EVAL);
113:       assertEquals(29, Node.JSDOC_INFO_PROP);
114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
115:       assertEquals(40, Node.ORIGINALNAME_PROP);
116:       assertEquals(56, Node.CHANGE_TIME);
117:       assertEquals(57, Node.REFLECTED_OBJECT);
118:       assertEquals(8, Node.FLAG_NO_THROWS);
119:       assertEquals(47, Node.IS_DISPATCHER);
120:       assertEquals(2, Node.POST_FLAG);
121:       assertEquals(53, Node.INPUT_ID);
122:       assertEquals(52, Node.LENGTH);
123:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
124:       assertEquals(15, Node.NO_SIDE_EFFECTS);
125:       assertEquals(39, Node.EMPTY_BLOCK);
126:       assertEquals(57, Node.LAST_PROP);
127:       
128:       Node node1 = new Node(49);
129:       assertFalse(node1.isAnd());
130:       assertFalse(node1.isWith());
131:       assertFalse(node1.isObjectLit());
132:       assertFalse(node1.isNot());
133:       assertFalse(node1.isComma());
134:       assertFalse(node1.isInstanceOf());
135:       assertFalse(node1.isBreak());
136:       assertFalse(node1.isExprResult());
137:       assertFalse(node1.isCast());
138:       assertFalse(node1.isAssign());
139:       assertFalse(node1.isLabelName());
140:       assertFalse(node1.isDec());
141:       assertEquals((-1), node1.getSourcePosition());
142:       assertFalse(node1.isHook());
143:       assertFalse(node1.hasChildren());
144:       assertFalse(node1.isThis());
145:       assertFalse(node1.isGetProp());
146:       assertEquals((-1), node1.getCharno());
147:       assertFalse(node1.hasOneChild());
148:       assertFalse(node1.isNumber());
149:       assertFalse(node1.isString());
150:       assertFalse(node1.isScript());
151:       assertFalse(node1.isCase());
152:       assertFalse(node1.isContinue());
153:       assertFalse(node1.isBlock());
154:       assertEquals((-1), node1.getLineno());
155:       assertFalse(node1.hasMoreThanOneChild());
156:       assertFalse(node1.isFalse());
157:       assertFalse(node1.isIf());
158:       assertFalse(node1.isNE());
159:       assertFalse(node1.isIn());
160:       assertFalse(node1.isInc());
161:       assertFalse(node1.isSetterDef());
162:       assertFalse(node1.isDefaultCase());
163:       assertFalse(node1.isTrue());
164:       assertFalse(node1.isFunction());
165:       assertEquals(0, node1.getChildCount());
166:       assertFalse(node1.isVoid());
167:       assertFalse(node1.isRegExp());
168:       assertFalse(node1.isArrayLit());
169:       assertTrue(node1.isThrow());
170:       assertFalse(node1.isCatch());
171:       assertFalse(node1.isStringKey());
172:       assertFalse(node1.isGetterDef());
173:       assertFalse(node1.isParamList());
174:       assertFalse(node1.isFor());
175:       assertFalse(node1.isDebugger());
176:       assertFalse(node1.isTry());
177:       assertEquals(49, node1.getType());
178:       assertFalse(node1.isDo());
179:       assertFalse(node1.isSwitch());
180:       assertFalse(node1.isReturn());
181:       assertFalse(node1.isWhile());
182:       assertFalse(node1.isLabel());
183:       assertFalse(node1.isTypeOf());
184:       assertFalse(node1.isCall());
185:       assertFalse(node1.isName());
186:       assertFalse(node1.isGetElem());
187:       assertFalse(node1.isDelProp());
188:       assertFalse(node1.isNull());
189:       assertFalse(node1.isVar());
190:       assertFalse(node1.isNew());
191:       assertFalse(node1.isAssignAdd());
192:       assertFalse(node1.isOr());
193:       assertFalse(node1.isAdd());
194:       assertFalse(node1.isEmpty());
195:       assertNotNull(node1);
196:       assertFalse(node1.equals((Object)node0));
197:       assertEquals(36, Node.QUOTED_PROP);
198:       assertEquals(55, Node.INFERRED_FUNCTION);
199:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
200:       assertEquals(4095, Node.COLUMN_MASK);
201:       assertEquals(53, Node.INPUT_ID);
202:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
203:       assertEquals(29, Node.JSDOC_INFO_PROP);
204:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
205:       assertEquals(8, Node.FLAG_NO_THROWS);
206:       assertEquals(39, Node.EMPTY_BLOCK);
207:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
208:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
209:       assertEquals(57, Node.REFLECTED_OBJECT);
210:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
211:       assertEquals(37, Node.OPT_ARG_NAME);
212:       assertEquals(48, Node.DIRECTIVES);
213:       assertEquals(56, Node.CHANGE_TIME);
214:       assertEquals(30, Node.VAR_ARGS_NAME);
215:       assertEquals(49, Node.DIRECT_EVAL);
216:       assertEquals(15, Node.NO_SIDE_EFFECTS);
217:       assertEquals(52, Node.LENGTH);
218:       assertEquals(32, Node.INCRDECR_PROP);
219:       assertEquals(12, Node.COLUMN_BITS);
220:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
221:       assertEquals(1, Node.DECR_FLAG);
222:       assertEquals(57, Node.LAST_PROP);
223:       assertEquals(50, Node.FREE_CALL);
224:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
225:       assertEquals(47, Node.IS_DISPATCHER);
226:       assertEquals(40, Node.ORIGINALNAME_PROP);
227:       assertEquals(2, Node.POST_FLAG);
228:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
229:       assertEquals(46, Node.IS_NAMESPACE);
230:       assertEquals(51, Node.STATIC_SOURCE_FILE);
231:       assertEquals(54, Node.SLASH_V);
232:       assertEquals(43, Node.IS_CONSTANT_NAME);
233:       
234:       Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
235:       assertFalse(node2.isName());
236:       assertFalse(node2.isStringKey());
237:       assertFalse(node2.isParamList());
238:       assertFalse(node2.isVar());
239:       assertFalse(node2.isNull());
240:       assertTrue(node2.isString());
241:       assertFalse(node2.isNew());
242:       assertFalse(node2.isSetterDef());
243:       assertFalse(node2.isAdd());
244:       assertFalse(node2.isDefaultCase());
245:       assertFalse(node2.isDo());
246:       assertFalse(node2.isFunction());
247:       assertFalse(node2.isDebugger());
248:       assertEquals(40, node2.getType());
249:       assertEquals(0, node2.getChildCount());
250:       assertFalse(node2.isArrayLit());
251:       assertFalse(node2.isContinue());
252:       assertFalse(node2.isNumber());
253:       assertFalse(node2.isIf());
254:       assertFalse(node2.isLabelName());
255:       assertFalse(node2.isGetterDef());
256:       assertFalse(node2.isNE());
257:       assertFalse(node2.isFor());
258:       assertFalse(node2.hasOneChild());
259:       assertFalse(node2.isIn());
260:       assertFalse(node2.isTry());
261:       assertFalse(node2.isCase());
262:       assertFalse(node2.isScript());
263:       assertFalse(node2.isWith());
264:       assertFalse(node2.isRegExp());
265:       assertFalse(node2.isBlock());
266:       assertFalse(node2.isInstanceOf());
267:       assertFalse(node2.isHook());
268:       assertEquals((-1), node2.getLineno());
269:       assertFalse(node2.hasMoreThanOneChild());
270:       assertFalse(node2.isCatch());
271:       assertFalse(node2.isBreak());
272:       assertFalse(node2.isComma());
273:       assertFalse(node2.isThrow());
274:       assertFalse(node2.isThis());
275:       assertFalse(node2.isObjectLit());
276:       assertFalse(node2.isGetProp());
277:       assertFalse(node2.isInc());
278:       assertFalse(node2.isNot());
279:       assertFalse(node2.isSwitch());
280:       assertFalse(node2.isAnd());
281:       assertEquals((-1), node2.getCharno());
282:       assertFalse(node2.isFalse());
283:       assertFalse(node2.isCast());
284:       assertFalse(node2.isDec());
285:       assertFalse(node2.hasChildren());
286:       assertEquals((-1), node2.getSourcePosition());
287:       assertFalse(node2.isAssign());
288:       assertFalse(node2.isTypeOf());
289:       assertFalse(node2.isDelProp());
290:       assertFalse(node2.isLabel());
291:       assertFalse(node2.isReturn());
292:       assertFalse(node2.isOr());
293:       assertFalse(node2.isAssignAdd());
294:       assertFalse(node2.isEmpty());
295:       assertFalse(node2.isWhile());
296:       assertFalse(node2.isTrue());
297:       assertFalse(node2.isVoid());
298:       assertFalse(node2.isCall());
299:       assertFalse(node2.isGetElem());
300:       assertFalse(node2.isExprResult());
301:       assertNotNull(node2);
302:       assertFalse(node2.equals((Object)node1));
303:       assertFalse(node2.equals((Object)node0));
304:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
305:       assertEquals(8, Node.FLAG_NO_THROWS);
306:       assertEquals(39, Node.EMPTY_BLOCK);
307:       assertEquals(48, Node.DIRECTIVES);
308:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
309:       assertEquals(50, Node.FREE_CALL);
310:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
311:       assertEquals(4095, Node.COLUMN_MASK);
312:       assertEquals(40, Node.ORIGINALNAME_PROP);
313:       assertEquals(57, Node.REFLECTED_OBJECT);
314:       assertEquals(43, Node.IS_CONSTANT_NAME);
315:       assertEquals(54, Node.SLASH_V);
316:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
317:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
318:       assertEquals(12, Node.COLUMN_BITS);
319:       assertEquals(1, Node.DECR_FLAG);
320:       assertEquals(32, Node.INCRDECR_PROP);
321:       assertEquals(2, Node.POST_FLAG);
322:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
323:       assertEquals(47, Node.IS_DISPATCHER);
324:       assertEquals(37, Node.OPT_ARG_NAME);
325:       assertEquals(29, Node.JSDOC_INFO_PROP);
326:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
327:       assertEquals(51, Node.STATIC_SOURCE_FILE);
328:       assertEquals(49, Node.DIRECT_EVAL);
329:       assertEquals(46, Node.IS_NAMESPACE);
330:       assertEquals(56, Node.CHANGE_TIME);
331:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
332:       assertEquals(15, Node.NO_SIDE_EFFECTS);
333:       assertEquals(36, Node.QUOTED_PROP);
334:       assertEquals(30, Node.VAR_ARGS_NAME);
335:       assertEquals(52, Node.LENGTH);
336:       assertEquals(53, Node.INPUT_ID);
337:       assertEquals(55, Node.INFERRED_FUNCTION);
338:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
339:       assertEquals(57, Node.LAST_PROP);
340:       
341:       Node node3 = node2.useSourceInfoIfMissingFrom(node1);
342:       assertFalse(node1.isAnd());
343:       assertFalse(node1.isWith());
344:       assertFalse(node1.isObjectLit());
345:       assertFalse(node1.isNot());
346:       assertFalse(node1.isComma());
347:       assertFalse(node1.isInstanceOf());
348:       assertFalse(node1.isBreak());
349:       assertFalse(node1.isExprResult());
350:       assertFalse(node1.isCast());
351:       assertFalse(node1.isAssign());
352:       assertFalse(node1.isLabelName());
353:       assertFalse(node1.isDec());
354:       assertEquals((-1), node1.getSourcePosition());
355:       assertFalse(node1.isHook());
356:       assertFalse(node1.hasChildren());
357:       assertFalse(node1.isThis());
358:       assertFalse(node1.isGetProp());
359:       assertEquals((-1), node1.getCharno());
360:       assertFalse(node1.hasOneChild());
361:       assertFalse(node1.isNumber());
362:       assertFalse(node1.isString());
363:       assertFalse(node1.isScript());
364:       assertFalse(node1.isCase());
365:       assertFalse(node1.isContinue());
366:       assertFalse(node1.isBlock());
367:       assertEquals((-1), node1.getLineno());
368:       assertFalse(node1.hasMoreThanOneChild());
369:       assertFalse(node1.isFalse());
370:       assertFalse(node1.isIf());
371:       assertFalse(node1.isNE());
372:       assertFalse(node1.isIn());
373:       assertFalse(node1.isInc());
374:       assertFalse(node1.isSetterDef());
375:       assertFalse(node1.isDefaultCase());
376:       assertFalse(node1.isTrue());
377:       assertFalse(node1.isFunction());
378:       assertEquals(0, node1.getChildCount());
379:       assertFalse(node1.isVoid());
380:       assertFalse(node1.isRegExp());
381:       assertFalse(node1.isArrayLit());
382:       assertTrue(node1.isThrow());
383:       assertFalse(node1.isCatch());
384:       assertFalse(node1.isStringKey());
385:       assertFalse(node1.isGetterDef());
386:       assertFalse(node1.isParamList());
387:       assertFalse(node1.isFor());
388:       assertFalse(node1.isDebugger());
389:       assertFalse(node1.isTry());
390:       assertEquals(49, node1.getType());
391:       assertFalse(node1.isDo());
392:       assertFalse(node1.isSwitch());
393:       assertFalse(node1.isReturn());
394:       assertFalse(node1.isWhile());
395:       assertFalse(node1.isLabel());
396:       assertFalse(node1.isTypeOf());
397:       assertFalse(node1.isCall());
398:       assertFalse(node1.isName());
399:       assertFalse(node1.isGetElem());
400:       assertFalse(node1.isDelProp());
401:       assertFalse(node1.isNull());
402:       assertFalse(node1.isVar());
403:       assertFalse(node1.isNew());
404:       assertFalse(node1.isAssignAdd());
405:       assertFalse(node1.isOr());
406:       assertFalse(node1.isAdd());
407:       assertFalse(node1.isEmpty());
408:       assertFalse(node2.isName());
409:       assertFalse(node2.isStringKey());
410:       assertFalse(node2.isParamList());
411:       assertFalse(node2.isVar());
412:       assertFalse(node2.isNull());
413:       assertTrue(node2.isString());
414:       assertFalse(node2.isNew());
415:       assertFalse(node2.isSetterDef());
416:       assertFalse(node2.isAdd());
417:       assertFalse(node2.isDefaultCase());
418:       assertFalse(node2.isDo());
419:       assertFalse(node2.isFunction());
420:       assertFalse(node2.isDebugger());
421:       assertEquals(40, node2.getType());
422:       assertEquals(0, node2.getChildCount());
423:       assertFalse(node2.isArrayLit());
424:       assertFalse(node2.isContinue());
425:       assertFalse(node2.isNumber());
426:       assertFalse(node2.isIf());
427:       assertFalse(node2.isLabelName());
428:       assertFalse(node2.isGetterDef());
429:       assertFalse(node2.isNE());
430:       assertFalse(node2.isFor());
431:       assertFalse(node2.hasOneChild());
432:       assertFalse(node2.isIn());
433:       assertFalse(node2.isTry());
434:       assertFalse(node2.isCase());
435:       assertFalse(node2.isScript());
436:       assertFalse(node2.isWith());
437:       assertFalse(node2.isRegExp());
438:       assertFalse(node2.isBlock());
439:       assertFalse(node2.isInstanceOf());
440:       assertFalse(node2.isHook());
441:       assertEquals((-1), node2.getLineno());
442:       assertFalse(node2.hasMoreThanOneChild());
443:       assertFalse(node2.isCatch());
444:       assertFalse(node2.isBreak());
445:       assertFalse(node2.isComma());
446:       assertFalse(node2.isThrow());
447:       assertFalse(node2.isThis());
448:       assertFalse(node2.isObjectLit());
449:       assertFalse(node2.isGetProp());
450:       assertFalse(node2.isInc());
451:       assertFalse(node2.isNot());
452:       assertFalse(node2.isSwitch());
453:       assertFalse(node2.isAnd());
454:       assertEquals((-1), node2.getCharno());
455:       assertFalse(node2.isFalse());
456:       assertFalse(node2.isCast());
457:       assertFalse(node2.isDec());
458:       assertFalse(node2.hasChildren());
459:       assertEquals((-1), node2.getSourcePosition());
460:       assertFalse(node2.isAssign());
461:       assertFalse(node2.isTypeOf());
462:       assertFalse(node2.isDelProp());
463:       assertFalse(node2.isLabel());
464:       assertFalse(node2.isReturn());
465:       assertFalse(node2.isOr());
466:       assertFalse(node2.isAssignAdd());
467:       assertFalse(node2.isEmpty());
468:       assertFalse(node2.isWhile());
469:       assertFalse(node2.isTrue());
470:       assertFalse(node2.isVoid());
471:       assertFalse(node2.isCall());
472:       assertFalse(node2.isGetElem());
473:       assertFalse(node2.isExprResult());
474:       assertFalse(node3.isHook());
475:       assertFalse(node3.isInc());
476:       assertFalse(node3.isSwitch());
477:       assertFalse(node3.isBreak());
478:       assertFalse(node3.isThrow());
479:       assertFalse(node3.isThis());
480:       assertFalse(node3.isComma());
481:       assertFalse(node3.isFalse());
482:       assertFalse(node3.isIn());
483:       assertFalse(node3.isInstanceOf());
484:       assertFalse(node3.isDelProp());
485:       assertFalse(node3.isIf());
486:       assertFalse(node3.isNE());
487:       assertFalse(node3.isEmpty());
488:       assertFalse(node3.isCast());
489:       assertFalse(node3.isExprResult());
490:       assertFalse(node3.isVoid());
491:       assertFalse(node3.hasChildren());
492:       assertFalse(node3.isGetElem());
493:       assertEquals(40, node3.getType());
494:       assertFalse(node3.isFunction());
495:       assertFalse(node3.isTypeOf());
496:       assertFalse(node3.isAssign());
497:       assertFalse(node3.isDec());
498:       assertFalse(node3.isReturn());
499:       assertFalse(node3.isAnd());
500:       assertFalse(node3.isGetProp());
501:       assertFalse(node3.isObjectLit());
502:       assertFalse(node3.isDebugger());
503:       assertEquals((-1), node3.getSourcePosition());
504:       assertFalse(node3.isNot());
505:       assertFalse(node3.isBlock());
506:       assertFalse(node3.isAdd());
507:       assertFalse(node3.isVar());
508:       assertFalse(node3.isCall());
509:       assertFalse(node3.isName());
510:       assertTrue(node3.isString());
511:       assertFalse(node3.isNew());
512:       assertFalse(node3.isWhile());
513:       assertFalse(node3.isContinue());
514:       assertFalse(node3.hasMoreThanOneChild());
515:       assertEquals((-1), node3.getLineno());
516:       assertFalse(node3.isLabel());
517:       assertFalse(node3.isAssignAdd());
518:       assertFalse(node3.isCatch());
519:       assertFalse(node3.isSetterDef());
520:       assertFalse(node3.isDo());
521:       assertFalse(node3.isNull());
522:       assertFalse(node3.isTrue());
523:       assertFalse(node3.isOr());
524:       assertFalse(node3.hasOneChild());
525:       assertFalse(node3.isArrayLit());
526:       assertFalse(node3.isTry());
527:       assertFalse(node3.isLabelName());
528:       assertFalse(node3.isWith());
529:       assertFalse(node3.isDefaultCase());
530:       assertFalse(node3.isFor());
531:       assertFalse(node3.isRegExp());
532:       assertEquals(0, node3.getChildCount());
533:       assertFalse(node3.isParamList());
534:       assertFalse(node3.isCase());
535:       assertFalse(node3.isStringKey());
536:       assertFalse(node3.isScript());
537:       assertEquals((-1), node3.getCharno());
538:       assertFalse(node3.isNumber());
539:       assertFalse(node3.isGetterDef());
540:       assertNotNull(node3);
541:       assertFalse(node1.equals((Object)node2));
542:       assertFalse(node1.equals((Object)node0));
543:       assertFalse(node2.equals((Object)node1));
544:       assertFalse(node2.equals((Object)node0));
545:       assertFalse(node3.equals((Object)node0));
546:       assertFalse(node3.equals((Object)node1));
547:       assertEquals(36, Node.QUOTED_PROP);
548:       assertEquals(55, Node.INFERRED_FUNCTION);
549:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
550:       assertEquals(4095, Node.COLUMN_MASK);
551:       assertEquals(53, Node.INPUT_ID);
552:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
553:       assertEquals(29, Node.JSDOC_INFO_PROP);
554:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
555:       assertEquals(8, Node.FLAG_NO_THROWS);
556:       assertEquals(39, Node.EMPTY_BLOCK);
557:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
558:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
559:       assertEquals(57, Node.REFLECTED_OBJECT);
560:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
561:       assertEquals(37, Node.OPT_ARG_NAME);
562:       assertEquals(48, Node.DIRECTIVES);
563:       assertEquals(56, Node.CHANGE_TIME);
564:       assertEquals(30, Node.VAR_ARGS_NAME);
565:       assertEquals(49, Node.DIRECT_EVAL);
566:       assertEquals(15, Node.NO_SIDE_EFFECTS);
567:       assertEquals(52, Node.LENGTH);
568:       assertEquals(32, Node.INCRDECR_PROP);
569:       assertEquals(12, Node.COLUMN_BITS);
570:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
571:       assertEquals(1, Node.DECR_FLAG);
572:       assertEquals(57, Node.LAST_PROP);
573:       assertEquals(50, Node.FREE_CALL);
574:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
575:       assertEquals(47, Node.IS_DISPATCHER);
576:       assertEquals(40, Node.ORIGINALNAME_PROP);
577:       assertEquals(2, Node.POST_FLAG);
578:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
579:       assertEquals(46, Node.IS_NAMESPACE);
580:       assertEquals(51, Node.STATIC_SOURCE_FILE);
581:       assertEquals(54, Node.SLASH_V);
582:       assertEquals(43, Node.IS_CONSTANT_NAME);
583:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
584:       assertEquals(8, Node.FLAG_NO_THROWS);
585:       assertEquals(39, Node.EMPTY_BLOCK);
586:       assertEquals(48, Node.DIRECTIVES);
587:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
588:       assertEquals(50, Node.FREE_CALL);
589:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
590:       assertEquals(4095, Node.COLUMN_MASK);
591:       assertEquals(40, Node.ORIGINALNAME_PROP);
592:       assertEquals(57, Node.REFLECTED_OBJECT);
593:       assertEquals(43, Node.IS_CONSTANT_NAME);
594:       assertEquals(54, Node.SLASH_V);
595:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
596:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
597:       assertEquals(12, Node.COLUMN_BITS);
598:       assertEquals(1, Node.DECR_FLAG);
599:       assertEquals(32, Node.INCRDECR_PROP);
600:       assertEquals(2, Node.POST_FLAG);
601:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
602:       assertEquals(47, Node.IS_DISPATCHER);
603:       assertEquals(37, Node.OPT_ARG_NAME);
604:       assertEquals(29, Node.JSDOC_INFO_PROP);
605:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
606:       assertEquals(51, Node.STATIC_SOURCE_FILE);
607:       assertEquals(49, Node.DIRECT_EVAL);
608:       assertEquals(46, Node.IS_NAMESPACE);
609:       assertEquals(56, Node.CHANGE_TIME);
610:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
611:       assertEquals(15, Node.NO_SIDE_EFFECTS);
612:       assertEquals(36, Node.QUOTED_PROP);
613:       assertEquals(30, Node.VAR_ARGS_NAME);
614:       assertEquals(52, Node.LENGTH);
615:       assertEquals(53, Node.INPUT_ID);
616:       assertEquals(55, Node.INFERRED_FUNCTION);
617:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
618:       assertEquals(57, Node.LAST_PROP);
619:       assertEquals(57, Node.REFLECTED_OBJECT);
620:       assertEquals(52, Node.LENGTH);
621:       assertEquals(50, Node.FREE_CALL);
622:       assertEquals(54, Node.SLASH_V);
623:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
624:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
625:       assertEquals(8, Node.FLAG_NO_THROWS);
626:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
627:       assertEquals(57, Node.LAST_PROP);
628:       assertEquals(1, Node.DECR_FLAG);
629:       assertEquals(15, Node.NO_SIDE_EFFECTS);
630:       assertEquals(39, Node.EMPTY_BLOCK);
631:       assertEquals(51, Node.STATIC_SOURCE_FILE);
632:       assertEquals(46, Node.IS_NAMESPACE);
633:       assertEquals(30, Node.VAR_ARGS_NAME);
634:       assertEquals(43, Node.IS_CONSTANT_NAME);
635:       assertEquals(2, Node.POST_FLAG);
636:       assertEquals(40, Node.ORIGINALNAME_PROP);
637:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
638:       assertEquals(47, Node.IS_DISPATCHER);
639:       assertEquals(36, Node.QUOTED_PROP);
640:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
641:       assertEquals(53, Node.INPUT_ID);
642:       assertEquals(29, Node.JSDOC_INFO_PROP);
643:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
644:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
645:       assertEquals(12, Node.COLUMN_BITS);
646:       assertEquals(55, Node.INFERRED_FUNCTION);
647:       assertEquals(32, Node.INCRDECR_PROP);
648:       assertEquals(4095, Node.COLUMN_MASK);
649:       assertEquals(56, Node.CHANGE_TIME);
650:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
651:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
652:       assertEquals(48, Node.DIRECTIVES);
653:       assertEquals(49, Node.DIRECT_EVAL);
654:       assertEquals(37, Node.OPT_ARG_NAME);
655:       assertNotSame(node1, node0);
656:       assertSame(node2, node3);
657:       assertSame(node3, node2);
658:       
659:       Iterable<Node> iterable0 = node3.children();
660:       assertFalse(node1.isAnd());
661:       assertFalse(node1.isWith());
662:       assertFalse(node1.isObjectLit());
663:       assertFalse(node1.isNot());
664:       assertFalse(node1.isComma());
665:       assertFalse(node1.isInstanceOf());
666:       assertFalse(node1.isBreak());
667:       assertFalse(node1.isExprResult());
668:       assertFalse(node1.isCast());
669:       assertFalse(node1.isAssign());
670:       assertFalse(node1.isLabelName());
671:       assertFalse(node1.isDec());
672:       assertEquals((-1), node1.getSourcePosition());
673:       assertFalse(node1.isHook());
674:       assertFalse(node1.hasChildren());
675:       assertFalse(node1.isThis());
676:       assertFalse(node1.isGetProp());
677:       assertEquals((-1), node1.getCharno());
678:       assertFalse(node1.hasOneChild());
679:       assertFalse(node1.isNumber());
680:       assertFalse(node1.isString());
681:       assertFalse(node1.isScript());
682:       assertFalse(node1.isCase());
683:       assertFalse(node1.isContinue());
684:       assertFalse(node1.isBlock());
685:       assertEquals((-1), node1.getLineno());
686:       assertFalse(node1.hasMoreThanOneChild());
687:       assertFalse(node1.isFalse());
688:       assertFalse(node1.isIf());
689:       assertFalse(node1.isNE());
690:       assertFalse(node1.isIn());
691:       assertFalse(node1.isInc());
692:       assertFalse(node1.isSetterDef());
693:       assertFalse(node1.isDefaultCase());
694:       assertFalse(node1.isTrue());
695:       assertFalse(node1.isFunction());
696:       assertEquals(0, node1.getChildCount());
697:       assertFalse(node1.isVoid());
698:       assertFalse(node1.isRegExp());
699:       assertFalse(node1.isArrayLit());
700:       assertTrue(node1.isThrow());
701:       assertFalse(node1.isCatch());
702:       assertFalse(node1.isStringKey());
703:       assertFalse(node1.isGetterDef());
704:       assertFalse(node1.isParamList());
705:       assertFalse(node1.isFor());
706:       assertFalse(node1.isDebugger());
707:       assertFalse(node1.isTry());
708:       assertEquals(49, node1.getType());
709:       assertFalse(node1.isDo());
710:       assertFalse(node1.isSwitch());
711:       assertFalse(node1.isReturn());
712:       assertFalse(node1.isWhile());
713:       assertFalse(node1.isLabel());
714:       assertFalse(node1.isTypeOf());
715:       assertFalse(node1.isCall());
716:       assertFalse(node1.isName());
717:       assertFalse(node1.isGetElem());
718:       assertFalse(node1.isDelProp());
719:       assertFalse(node1.isNull());
720:       assertFalse(node1.isVar());
721:       assertFalse(node1.isNew());
722:       assertFalse(node1.isAssignAdd());
723:       assertFalse(node1.isOr());
724:       assertFalse(node1.isAdd());
725:       assertFalse(node1.isEmpty());
726:       assertFalse(node2.isName());
727:       assertFalse(node2.isStringKey());
728:       assertFalse(node2.isParamList());
729:       assertFalse(node2.isVar());
730:       assertFalse(node2.isNull());
731:       assertTrue(node2.isString());
732:       assertFalse(node2.isNew());
733:       assertFalse(node2.isSetterDef());
734:       assertFalse(node2.isAdd());
735:       assertFalse(node2.isDefaultCase());
736:       assertFalse(node2.isDo());
737:       assertFalse(node2.isFunction());
738:       assertFalse(node2.isDebugger());
739:       assertEquals(40, node2.getType());
740:       assertEquals(0, node2.getChildCount());
741:       assertFalse(node2.isArrayLit());
742:       assertFalse(node2.isContinue());
743:       assertFalse(node2.isNumber());
744:       assertFalse(node2.isIf());
745:       assertFalse(node2.isLabelName());
746:       assertFalse(node2.isGetterDef());
747:       assertFalse(node2.isNE());
748:       assertFalse(node2.isFor());
749:       assertFalse(node2.hasOneChild());
750:       assertFalse(node2.isIn());
751:       assertFalse(node2.isTry());
752:       assertFalse(node2.isCase());
753:       assertFalse(node2.isScript());
754:       assertFalse(node2.isWith());
755:       assertFalse(node2.isRegExp());
756:       assertFalse(node2.isBlock());
757:       assertFalse(node2.isInstanceOf());
758:       assertFalse(node2.isHook());
759:       assertEquals((-1), node2.getLineno());
760:       assertFalse(node2.hasMoreThanOneChild());
761:       assertFalse(node2.isCatch());
762:       assertFalse(node2.isBreak());
763:       assertFalse(node2.isComma());
764:       assertFalse(node2.isThrow());
765:       assertFalse(node2.isThis());
766:       assertFalse(node2.isObjectLit());
767:       assertFalse(node2.isGetProp());
768:       assertFalse(node2.isInc());
769:       assertFalse(node2.isNot());
770:       assertFalse(node2.isSwitch());
771:       assertFalse(node2.isAnd());
772:       assertEquals((-1), node2.getCharno());
773:       assertFalse(node2.isFalse());
774:       assertFalse(node2.isCast());
775:       assertFalse(node2.isDec());
776:       assertFalse(node2.hasChildren());
777:       assertEquals((-1), node2.getSourcePosition());
778:       assertFalse(node2.isAssign());
779:       assertFalse(node2.isTypeOf());
780:       assertFalse(node2.isDelProp());
781:       assertFalse(node2.isLabel());
782:       assertFalse(node2.isReturn());
783:       assertFalse(node2.isOr());
784:       assertFalse(node2.isAssignAdd());
785:       assertFalse(node2.isEmpty());
786:       assertFalse(node2.isWhile());
787:       assertFalse(node2.isTrue());
788:       assertFalse(node2.isVoid());
789:       assertFalse(node2.isCall());
790:       assertFalse(node2.isGetElem());
791:       assertFalse(node2.isExprResult());
792:       assertFalse(node3.isHook());
793:       assertFalse(node3.isInc());
794:       assertFalse(node3.isSwitch());
795:       assertFalse(node3.isBreak());
796:       assertFalse(node3.isThrow());
797:       assertFalse(node3.isThis());
798:       assertFalse(node3.isComma());
799:       assertFalse(node3.isFalse());
800:       assertFalse(node3.isIn());
801:       assertFalse(node3.isInstanceOf());
802:       assertFalse(node3.isDelProp());
803:       assertFalse(node3.isIf());
804:       assertFalse(node3.isNE());
805:       assertFalse(node3.isEmpty());
806:       assertFalse(node3.isCast());
807:       assertFalse(node3.isExprResult());
808:       assertFalse(node3.isVoid());
809:       assertFalse(node3.hasChildren());
810:       assertFalse(node3.isGetElem());
811:       assertEquals(40, node3.getType());
812:       assertFalse(node3.isFunction());
813:       assertFalse(node3.isTypeOf());
814:       assertFalse(node3.isAssign());
815:       assertFalse(node3.isDec());
816:       assertFalse(node3.isReturn());
817:       assertFalse(node3.isAnd());
818:       assertFalse(node3.isGetProp());
819:       assertFalse(node3.isObjectLit());
820:       assertFalse(node3.isDebugger());
821:       assertEquals((-1), node3.getSourcePosition());
822:       assertFalse(node3.isNot());
823:       assertFalse(node3.isBlock());
824:       assertFalse(node3.isAdd());
825:       assertFalse(node3.isVar());
826:       assertFalse(node3.isCall());
827:       assertFalse(node3.isName());
828:       assertTrue(node3.isString());
829:       assertFalse(node3.isNew());
830:       assertFalse(node3.isWhile());
831:       assertFalse(node3.isContinue());
832:       assertFalse(node3.hasMoreThanOneChild());
833:       assertEquals((-1), node3.getLineno());
834:       assertFalse(node3.isLabel());
835:       assertFalse(node3.isAssignAdd());
836:       assertFalse(node3.isCatch());
837:       assertFalse(node3.isSetterDef());
838:       assertFalse(node3.isDo());
839:       assertFalse(node3.isNull());
840:       assertFalse(node3.isTrue());
841:       assertFalse(node3.isOr());
842:       assertFalse(node3.hasOneChild());
843:       assertFalse(node3.isArrayLit());
844:       assertFalse(node3.isTry());
845:       assertFalse(node3.isLabelName());
846:       assertFalse(node3.isWith());
847:       assertFalse(node3.isDefaultCase());
848:       assertFalse(node3.isFor());
849:       assertFalse(node3.isRegExp());
850:       assertEquals(0, node3.getChildCount());
851:       assertFalse(node3.isParamList());
852:       assertFalse(node3.isCase());
853:       assertFalse(node3.isStringKey());
854:       assertFalse(node3.isScript());
855:       assertEquals((-1), node3.getCharno());
856:       assertFalse(node3.isNumber());
857:       assertFalse(node3.isGetterDef());
858:       assertNotNull(iterable0);
859:       assertFalse(iterable0.contains(node1));
860:       assertFalse(node1.equals((Object)node2));
861:       assertFalse(node1.equals((Object)node3));
862:       assertFalse(node1.equals((Object)node0));
863:       assertFalse(node2.equals((Object)node1));
864:       assertFalse(node2.equals((Object)node0));
865:       assertFalse(node3.equals((Object)node0));
866:       assertFalse(node3.equals((Object)node1));
867:       assertEquals(36, Node.QUOTED_PROP);
868:       assertEquals(55, Node.INFERRED_FUNCTION);
869:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
870:       assertEquals(4095, Node.COLUMN_MASK);
871:       assertEquals(53, Node.INPUT_ID);
872:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
873:       assertEquals(29, Node.JSDOC_INFO_PROP);
874:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
875:       assertEquals(8, Node.FLAG_NO_THROWS);
876:       assertEquals(39, Node.EMPTY_BLOCK);
877:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
878:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
879:       assertEquals(57, Node.REFLECTED_OBJECT);
880:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
881:       assertEquals(37, Node.OPT_ARG_NAME);
882:       assertEquals(48, Node.DIRECTIVES);
883:       assertEquals(56, Node.CHANGE_TIME);
884:       assertEquals(30, Node.VAR_ARGS_NAME);
885:       assertEquals(49, Node.DIRECT_EVAL);
886:       assertEquals(15, Node.NO_SIDE_EFFECTS);
887:       assertEquals(52, Node.LENGTH);
888:       assertEquals(32, Node.INCRDECR_PROP);
889:       assertEquals(12, Node.COLUMN_BITS);
890:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
891:       assertEquals(1, Node.DECR_FLAG);
892:       assertEquals(57, Node.LAST_PROP);
893:       assertEquals(50, Node.FREE_CALL);
894:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
895:       assertEquals(47, Node.IS_DISPATCHER);
896:       assertEquals(40, Node.ORIGINALNAME_PROP);
897:       assertEquals(2, Node.POST_FLAG);
898:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
899:       assertEquals(46, Node.IS_NAMESPACE);
900:       assertEquals(51, Node.STATIC_SOURCE_FILE);
901:       assertEquals(54, Node.SLASH_V);
902:       assertEquals(43, Node.IS_CONSTANT_NAME);
903:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
904:       assertEquals(8, Node.FLAG_NO_THROWS);
905:       assertEquals(39, Node.EMPTY_BLOCK);
906:       assertEquals(48, Node.DIRECTIVES);
907:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
908:       assertEquals(50, Node.FREE_CALL);
909:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
910:       assertEquals(4095, Node.COLUMN_MASK);
911:       assertEquals(40, Node.ORIGINALNAME_PROP);
912:       assertEquals(57, Node.REFLECTED_OBJECT);
913:       assertEquals(43, Node.IS_CONSTANT_NAME);
914:       assertEquals(54, Node.SLASH_V);
915:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
916:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
917:       assertEquals(12, Node.COLUMN_BITS);
918:       assertEquals(1, Node.DECR_FLAG);
919:       assertEquals(32, Node.INCRDECR_PROP);
920:       assertEquals(2, Node.POST_FLAG);
921:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
922:       assertEquals(47, Node.IS_DISPATCHER);
923:       assertEquals(37, Node.OPT_ARG_NAME);
924:       assertEquals(29, Node.JSDOC_INFO_PROP);
925:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
926:       assertEquals(51, Node.STATIC_SOURCE_FILE);
927:       assertEquals(49, Node.DIRECT_EVAL);
928:       assertEquals(46, Node.IS_NAMESPACE);
929:       assertEquals(56, Node.CHANGE_TIME);
930:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
931:       assertEquals(15, Node.NO_SIDE_EFFECTS);
932:       assertEquals(36, Node.QUOTED_PROP);
933:       assertEquals(30, Node.VAR_ARGS_NAME);
934:       assertEquals(52, Node.LENGTH);
935:       assertEquals(53, Node.INPUT_ID);
936:       assertEquals(55, Node.INFERRED_FUNCTION);
937:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
938:       assertEquals(57, Node.LAST_PROP);
939:       assertEquals(57, Node.REFLECTED_OBJECT);
940:       assertEquals(52, Node.LENGTH);
941:       assertEquals(50, Node.FREE_CALL);
942:       assertEquals(54, Node.SLASH_V);
943:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
944:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
945:       assertEquals(8, Node.FLAG_NO_THROWS);
946:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
947:       assertEquals(57, Node.LAST_PROP);
948:       assertEquals(1, Node.DECR_FLAG);
949:       assertEquals(15, Node.NO_SIDE_EFFECTS);
950:       assertEquals(39, Node.EMPTY_BLOCK);
951:       assertEquals(51, Node.STATIC_SOURCE_FILE);
952:       assertEquals(46, Node.IS_NAMESPACE);
953:       assertEquals(30, Node.VAR_ARGS_NAME);
954:       assertEquals(43, Node.IS_CONSTANT_NAME);
955:       assertEquals(2, Node.POST_FLAG);
956:       assertEquals(40, Node.ORIGINALNAME_PROP);
957:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
958:       assertEquals(47, Node.IS_DISPATCHER);
959:       assertEquals(36, Node.QUOTED_PROP);
960:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
961:       assertEquals(53, Node.INPUT_ID);
962:       assertEquals(29, Node.JSDOC_INFO_PROP);
963:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
964:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
965:       assertEquals(12, Node.COLUMN_BITS);
966:       assertEquals(55, Node.INFERRED_FUNCTION);
967:       assertEquals(32, Node.INCRDECR_PROP);
968:       assertEquals(4095, Node.COLUMN_MASK);
969:       assertEquals(56, Node.CHANGE_TIME);
970:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
971:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
972:       assertEquals(48, Node.DIRECTIVES);
973:       assertEquals(49, Node.DIRECT_EVAL);
974:       assertEquals(37, Node.OPT_ARG_NAME);
975:       assertNotSame(node1, node0);
976:       assertSame(node2, node3);
977:       assertSame(node3, node2);
978:       
979:       boolean boolean0 = node1.isGetProp();
980:       assertFalse(node1.isAnd());
981:       assertFalse(node1.isWith());
982:       assertFalse(node1.isObjectLit());
983:       assertFalse(node1.isNot());
984:       assertFalse(node1.isComma());
985:       assertFalse(node1.isInstanceOf());
986:       assertFalse(node1.isBreak());
987:       assertFalse(node1.isExprResult());
988:       assertFalse(node1.isCast());
989:       assertFalse(node1.isAssign());
990:       assertFalse(node1.isLabelName());
991:       assertFalse(node1.isDec());
992:       assertEquals((-1), node1.getSourcePosition());
993:       assertFalse(node1.isHook());
994:       assertFalse(node1.hasChildren());
995:       assertFalse(node1.isThis());
996:       assertFalse(node1.isGetProp());
997:       assertEquals((-1), node1.getCharno());
998:       assertFalse(node1.hasOneChild());
999:       assertFalse(node1.isNumber());
1000:       assertFalse(node1.isString());
1001:       assertFalse(node1.isScript());
1002:       assertFalse(node1.isCase());
1003:       assertFalse(node1.isContinue());
1004:       assertFalse(node1.isBlock());
1005:       assertEquals((-1), node1.getLineno());
1006:       assertFalse(node1.hasMoreThanOneChild());
1007:       assertFalse(node1.isFalse());
1008:       assertFalse(node1.isIf());
1009:       assertFalse(node1.isNE());
1010:       assertFalse(node1.isIn());
1011:       assertFalse(node1.isInc());
1012:       assertFalse(node1.isSetterDef());
1013:       assertFalse(node1.isDefaultCase());
1014:       assertFalse(node1.isTrue());
1015:       assertFalse(node1.isFunction());
1016:       assertEquals(0, node1.getChildCount());
1017:       assertFalse(node1.isVoid());
1018:       assertFalse(node1.isRegExp());
1019:       assertFalse(node1.isArrayLit());
1020:       assertTrue(node1.isThrow());
1021:       assertFalse(node1.isCatch());
1022:       assertFalse(node1.isStringKey());
1023:       assertFalse(node1.isGetterDef());
1024:       assertFalse(node1.isParamList());
1025:       assertFalse(node1.isFor());
1026:       assertFalse(node1.isDebugger());
1027:       assertFalse(node1.isTry());
1028:       assertEquals(49, node1.getType());
1029:       assertFalse(node1.isDo());
1030:       assertFalse(node1.isSwitch());
1031:       assertFalse(node1.isReturn());
1032:       assertFalse(node1.isWhile());
1033:       assertFalse(node1.isLabel());
1034:       assertFalse(node1.isTypeOf());
1035:       assertFalse(node1.isCall());
1036:       assertFalse(node1.isName());
1037:       assertFalse(node1.isGetElem());
1038:       assertFalse(node1.isDelProp());
1039:       assertFalse(node1.isNull());
1040:       assertFalse(node1.isVar());
1041:       assertFalse(node1.isNew());
1042:       assertFalse(node1.isAssignAdd());
1043:       assertFalse(node1.isOr());
1044:       assertFalse(node1.isAdd());
1045:       assertFalse(node1.isEmpty());
1046:       assertFalse(boolean0);
1047:       assertFalse(node1.equals((Object)node2));
1048:       assertFalse(node1.equals((Object)node3));
1049:       assertFalse(node1.equals((Object)node0));
1050:       assertEquals(36, Node.QUOTED_PROP);
1051:       assertEquals(55, Node.INFERRED_FUNCTION);
1052:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1053:       assertEquals(4095, Node.COLUMN_MASK);
1054:       assertEquals(53, Node.INPUT_ID);
1055:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1056:       assertEquals(29, Node.JSDOC_INFO_PROP);
1057:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1058:       assertEquals(8, Node.FLAG_NO_THROWS);
1059:       assertEquals(39, Node.EMPTY_BLOCK);
1060:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1061:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1062:       assertEquals(57, Node.REFLECTED_OBJECT);
1063:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1064:       assertEquals(37, Node.OPT_ARG_NAME);
1065:       assertEquals(48, Node.DIRECTIVES);
1066:       assertEquals(56, Node.CHANGE_TIME);
1067:       assertEquals(30, Node.VAR_ARGS_NAME);
1068:       assertEquals(49, Node.DIRECT_EVAL);
1069:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1070:       assertEquals(52, Node.LENGTH);
1071:       assertEquals(32, Node.INCRDECR_PROP);
1072:       assertEquals(12, Node.COLUMN_BITS);
1073:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1074:       assertEquals(1, Node.DECR_FLAG);
1075:       assertEquals(57, Node.LAST_PROP);
1076:       assertEquals(50, Node.FREE_CALL);
1077:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1078:       assertEquals(47, Node.IS_DISPATCHER);
1079:       assertEquals(40, Node.ORIGINALNAME_PROP);
1080:       assertEquals(2, Node.POST_FLAG);
1081:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1082:       assertEquals(46, Node.IS_NAMESPACE);
1083:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1084:       assertEquals(54, Node.SLASH_V);
1085:       assertEquals(43, Node.IS_CONSTANT_NAME);
1086:       assertNotSame(node1, node0);
1087:       
1088:       boolean boolean1 = node3.hasChildren();
1089:       assertFalse(node1.isAnd());
1090:       assertFalse(node1.isWith());
1091:       assertFalse(node1.isObjectLit());
1092:       assertFalse(node1.isNot());
1093:       assertFalse(node1.isComma());
1094:       assertFalse(node1.isInstanceOf());
1095:       assertFalse(node1.isBreak());
1096:       assertFalse(node1.isExprResult());
1097:       assertFalse(node1.isCast());
1098:       assertFalse(node1.isAssign());
1099:       assertFalse(node1.isLabelName());
1100:       assertFalse(node1.isDec());
1101:       assertEquals((-1), node1.getSourcePosition());
1102:       assertFalse(node1.isHook());
1103:       assertFalse(node1.hasChildren());
1104:       assertFalse(node1.isThis());
1105:       assertFalse(node1.isGetProp());
1106:       assertEquals((-1), node1.getCharno());
1107:       assertFalse(node1.hasOneChild());
1108:       assertFalse(node1.isNumber());
1109:       assertFalse(node1.isString());
1110:       assertFalse(node1.isScript());
1111:       assertFalse(node1.isCase());
1112:       assertFalse(node1.isContinue());
1113:       assertFalse(node1.isBlock());
1114:       assertEquals((-1), node1.getLineno());
1115:       assertFalse(node1.hasMoreThanOneChild());
1116:       assertFalse(node1.isFalse());
1117:       assertFalse(node1.isIf());
1118:       assertFalse(node1.isNE());
1119:       assertFalse(node1.isIn());
1120:       assertFalse(node1.isInc());
1121:       assertFalse(node1.isSetterDef());
1122:       assertFalse(node1.isDefaultCase());
1123:       assertFalse(node1.isTrue());
1124:       assertFalse(node1.isFunction());
1125:       assertEquals(0, node1.getChildCount());
1126:       assertFalse(node1.isVoid());
1127:       assertFalse(node1.isRegExp());
1128:       assertFalse(node1.isArrayLit());
1129:       assertTrue(node1.isThrow());
1130:       assertFalse(node1.isCatch());
1131:       assertFalse(node1.isStringKey());
1132:       assertFalse(node1.isGetterDef());
1133:       assertFalse(node1.isParamList());
1134:       assertFalse(node1.isFor());
1135:       assertFalse(node1.isDebugger());
1136:       assertFalse(node1.isTry());
1137:       assertEquals(49, node1.getType());
1138:       assertFalse(node1.isDo());
1139:       assertFalse(node1.isSwitch());
1140:       assertFalse(node1.isReturn());
1141:       assertFalse(node1.isWhile());
1142:       assertFalse(node1.isLabel());
1143:       assertFalse(node1.isTypeOf());
1144:       assertFalse(node1.isCall());
1145:       assertFalse(node1.isName());
1146:       assertFalse(node1.isGetElem());
1147:       assertFalse(node1.isDelProp());
1148:       assertFalse(node1.isNull());
1149:       assertFalse(node1.isVar());
1150:       assertFalse(node1.isNew());
1151:       assertFalse(node1.isAssignAdd());
1152:       assertFalse(node1.isOr());
1153:       assertFalse(node1.isAdd());
1154:       assertFalse(node1.isEmpty());
1155:       assertFalse(node2.isName());
1156:       assertFalse(node2.isStringKey());
1157:       assertFalse(node2.isParamList());
1158:       assertFalse(node2.isVar());
1159:       assertFalse(node2.isNull());
1160:       assertTrue(node2.isString());
1161:       assertFalse(node2.isNew());
1162:       assertFalse(node2.isSetterDef());
1163:       assertFalse(node2.isAdd());
1164:       assertFalse(node2.isDefaultCase());
1165:       assertFalse(node2.isDo());
1166:       assertFalse(node2.isFunction());
1167:       assertFalse(node2.isDebugger());
1168:       assertEquals(40, node2.getType());
1169:       assertEquals(0, node2.getChildCount());
1170:       assertFalse(node2.isArrayLit());
1171:       assertFalse(node2.isContinue());
1172:       assertFalse(node2.isNumber());
1173:       assertFalse(node2.isIf());
1174:       assertFalse(node2.isLabelName());
1175:       assertFalse(node2.isGetterDef());
1176:       assertFalse(node2.isNE());
1177:       assertFalse(node2.isFor());
1178:       assertFalse(node2.hasOneChild());
1179:       assertFalse(node2.isIn());
1180:       assertFalse(node2.isTry());
1181:       assertFalse(node2.isCase());
1182:       assertFalse(node2.isScript());
1183:       assertFalse(node2.isWith());
1184:       assertFalse(node2.isRegExp());
1185:       assertFalse(node2.isBlock());
1186:       assertFalse(node2.isInstanceOf());
1187:       assertFalse(node2.isHook());
1188:       assertEquals((-1), node2.getLineno());
1189:       assertFalse(node2.hasMoreThanOneChild());
1190:       assertFalse(node2.isCatch());
1191:       assertFalse(node2.isBreak());
1192:       assertFalse(node2.isComma());
1193:       assertFalse(node2.isThrow());
1194:       assertFalse(node2.isThis());
1195:       assertFalse(node2.isObjectLit());
1196:       assertFalse(node2.isGetProp());
1197:       assertFalse(node2.isInc());
1198:       assertFalse(node2.isNot());
1199:       assertFalse(node2.isSwitch());
1200:       assertFalse(node2.isAnd());
1201:       assertEquals((-1), node2.getCharno());
1202:       assertFalse(node2.isFalse());
1203:       assertFalse(node2.isCast());
1204:       assertFalse(node2.isDec());
1205:       assertFalse(node2.hasChildren());
1206:       assertEquals((-1), node2.getSourcePosition());
1207:       assertFalse(node2.isAssign());
1208:       assertFalse(node2.isTypeOf());
1209:       assertFalse(node2.isDelProp());
1210:       assertFalse(node2.isLabel());
1211:       assertFalse(node2.isReturn());
1212:       assertFalse(node2.isOr());
1213:       assertFalse(node2.isAssignAdd());
1214:       assertFalse(node2.isEmpty());
1215:       assertFalse(node2.isWhile());
1216:       assertFalse(node2.isTrue());
1217:       assertFalse(node2.isVoid());
1218:       assertFalse(node2.isCall());
1219:       assertFalse(node2.isGetElem());
1220:       assertFalse(node2.isExprResult());
1221:       assertFalse(node3.isHook());
1222:       assertFalse(node3.isInc());
1223:       assertFalse(node3.isSwitch());
1224:       assertFalse(node3.isBreak());
1225:       assertFalse(node3.isThrow());
1226:       assertFalse(node3.isThis());
1227:       assertFalse(node3.isComma());
1228:       assertFalse(node3.isFalse());
1229:       assertFalse(node3.isIn());
1230:       assertFalse(node3.isInstanceOf());
1231:       assertFalse(node3.isDelProp());
1232:       assertFalse(node3.isIf());
1233:       assertFalse(node3.isNE());
1234:       assertFalse(node3.isEmpty());
1235:       assertFalse(node3.isCast());
1236:       assertFalse(node3.isExprResult());
1237:       assertFalse(node3.isVoid());
1238:       assertFalse(node3.hasChildren());
1239:       assertFalse(node3.isGetElem());
1240:       assertEquals(40, node3.getType());
1241:       assertFalse(node3.isFunction());
1242:       assertFalse(node3.isTypeOf());
1243:       assertFalse(node3.isAssign());
1244:       assertFalse(node3.isDec());
1245:       assertFalse(node3.isReturn());
1246:       assertFalse(node3.isAnd());
1247:       assertFalse(node3.isGetProp());
1248:       assertFalse(node3.isObjectLit());
1249:       assertFalse(node3.isDebugger());
1250:       assertEquals((-1), node3.getSourcePosition());
1251:       assertFalse(node3.isNot());
1252:       assertFalse(node3.isBlock());
1253:       assertFalse(node3.isAdd());
1254:       assertFalse(node3.isVar());
1255:       assertFalse(node3.isCall());
1256:       assertFalse(node3.isName());
1257:       assertTrue(node3.isString());
1258:       assertFalse(node3.isNew());
1259:       assertFalse(node3.isWhile());
1260:       assertFalse(node3.isContinue());
1261:       assertFalse(node3.hasMoreThanOneChild());
1262:       assertEquals((-1), node3.getLineno());
1263:       assertFalse(node3.isLabel());
1264:       assertFalse(node3.isAssignAdd());
1265:       assertFalse(node3.isCatch());
1266:       assertFalse(node3.isSetterDef());
1267:       assertFalse(node3.isDo());
1268:       assertFalse(node3.isNull());
1269:       assertFalse(node3.isTrue());
1270:       assertFalse(node3.isOr());
1271:       assertFalse(node3.hasOneChild());
1272:       assertFalse(node3.isArrayLit());
1273:       assertFalse(node3.isTry());
1274:       assertFalse(node3.isLabelName());
1275:       assertFalse(node3.isWith());
1276:       assertFalse(node3.isDefaultCase());
1277:       assertFalse(node3.isFor());
1278:       assertFalse(node3.isRegExp());
1279:       assertEquals(0, node3.getChildCount());
1280:       assertFalse(node3.isParamList());
1281:       assertFalse(node3.isCase());
1282:       assertFalse(node3.isStringKey());
1283:       assertFalse(node3.isScript());
1284:       assertEquals((-1), node3.getCharno());
1285:       assertFalse(node3.isNumber());
1286:       assertFalse(node3.isGetterDef());
1287:       assertFalse(boolean1);
1288:       assertFalse(node1.equals((Object)node2));
1289:       assertFalse(node1.equals((Object)node3));
1290:       assertFalse(node1.equals((Object)node0));
1291:       assertFalse(node2.equals((Object)node1));
1292:       assertFalse(node2.equals((Object)node0));
1293:       assertFalse(node3.equals((Object)node0));
1294:       assertFalse(node3.equals((Object)node1));
1295:       assertTrue(boolean1 == boolean0);
1296:       assertEquals(36, Node.QUOTED_PROP);
1297:       assertEquals(55, Node.INFERRED_FUNCTION);
1298:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1299:       assertEquals(4095, Node.COLUMN_MASK);
1300:       assertEquals(53, Node.INPUT_ID);
1301:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1302:       assertEquals(29, Node.JSDOC_INFO_PROP);
1303:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1304:       assertEquals(8, Node.FLAG_NO_THROWS);
1305:       assertEquals(39, Node.EMPTY_BLOCK);
1306:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1307:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1308:       assertEquals(57, Node.REFLECTED_OBJECT);
1309:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1310:       assertEquals(37, Node.OPT_ARG_NAME);
1311:       assertEquals(48, Node.DIRECTIVES);
1312:       assertEquals(56, Node.CHANGE_TIME);
1313:       assertEquals(30, Node.VAR_ARGS_NAME);
1314:       assertEquals(49, Node.DIRECT_EVAL);
1315:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1316:       assertEquals(52, Node.LENGTH);
1317:       assertEquals(32, Node.INCRDECR_PROP);
1318:       assertEquals(12, Node.COLUMN_BITS);
1319:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1320:       assertEquals(1, Node.DECR_FLAG);
1321:       assertEquals(57, Node.LAST_PROP);
1322:       assertEquals(50, Node.FREE_CALL);
1323:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1324:       assertEquals(47, Node.IS_DISPATCHER);
1325:       assertEquals(40, Node.ORIGINALNAME_PROP);
1326:       assertEquals(2, Node.POST_FLAG);
1327:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1328:       assertEquals(46, Node.IS_NAMESPACE);
1329:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1330:       assertEquals(54, Node.SLASH_V);
1331:       assertEquals(43, Node.IS_CONSTANT_NAME);
1332:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1333:       assertEquals(8, Node.FLAG_NO_THROWS);
1334:       assertEquals(39, Node.EMPTY_BLOCK);
1335:       assertEquals(48, Node.DIRECTIVES);
1336:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1337:       assertEquals(50, Node.FREE_CALL);
1338:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1339:       assertEquals(4095, Node.COLUMN_MASK);
1340:       assertEquals(40, Node.ORIGINALNAME_PROP);
1341:       assertEquals(57, Node.REFLECTED_OBJECT);
1342:       assertEquals(43, Node.IS_CONSTANT_NAME);
1343:       assertEquals(54, Node.SLASH_V);
1344:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1345:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1346:       assertEquals(12, Node.COLUMN_BITS);
1347:       assertEquals(1, Node.DECR_FLAG);
1348:       assertEquals(32, Node.INCRDECR_PROP);
1349:       assertEquals(2, Node.POST_FLAG);
1350:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1351:       assertEquals(47, Node.IS_DISPATCHER);
1352:       assertEquals(37, Node.OPT_ARG_NAME);
1353:       assertEquals(29, Node.JSDOC_INFO_PROP);
1354:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1355:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1356:       assertEquals(49, Node.DIRECT_EVAL);
1357:       assertEquals(46, Node.IS_NAMESPACE);
1358:       assertEquals(56, Node.CHANGE_TIME);
1359:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1360:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1361:       assertEquals(36, Node.QUOTED_PROP);
1362:       assertEquals(30, Node.VAR_ARGS_NAME);
1363:       assertEquals(52, Node.LENGTH);
1364:       assertEquals(53, Node.INPUT_ID);
1365:       assertEquals(55, Node.INFERRED_FUNCTION);
1366:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1367:       assertEquals(57, Node.LAST_PROP);
1368:       assertEquals(57, Node.REFLECTED_OBJECT);
1369:       assertEquals(52, Node.LENGTH);
1370:       assertEquals(50, Node.FREE_CALL);
1371:       assertEquals(54, Node.SLASH_V);
1372:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1373:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1374:       assertEquals(8, Node.FLAG_NO_THROWS);
1375:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1376:       assertEquals(57, Node.LAST_PROP);
1377:       assertEquals(1, Node.DECR_FLAG);
1378:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1379:       assertEquals(39, Node.EMPTY_BLOCK);
1380:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1381:       assertEquals(46, Node.IS_NAMESPACE);
1382:       assertEquals(30, Node.VAR_ARGS_NAME);
1383:       assertEquals(43, Node.IS_CONSTANT_NAME);
1384:       assertEquals(2, Node.POST_FLAG);
1385:       assertEquals(40, Node.ORIGINALNAME_PROP);
1386:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1387:       assertEquals(47, Node.IS_DISPATCHER);
1388:       assertEquals(36, Node.QUOTED_PROP);
1389:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1390:       assertEquals(53, Node.INPUT_ID);
1391:       assertEquals(29, Node.JSDOC_INFO_PROP);
1392:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1393:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1394:       assertEquals(12, Node.COLUMN_BITS);
1395:       assertEquals(55, Node.INFERRED_FUNCTION);
1396:       assertEquals(32, Node.INCRDECR_PROP);
1397:       assertEquals(4095, Node.COLUMN_MASK);
1398:       assertEquals(56, Node.CHANGE_TIME);
1399:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1400:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1401:       assertEquals(48, Node.DIRECTIVES);
1402:       assertEquals(49, Node.DIRECT_EVAL);
1403:       assertEquals(37, Node.OPT_ARG_NAME);
1404:       assertNotSame(node1, node0);
1405:       assertSame(node2, node3);
1406:       assertSame(node3, node2);
1407:       
1408:       boolean boolean2 = node2.isSwitch();
1409:       assertFalse(node2.isName());
1410:       assertFalse(node2.isStringKey());
1411:       assertFalse(node2.isParamList());
1412:       assertFalse(node2.isVar());
1413:       assertFalse(node2.isNull());
1414:       assertTrue(node2.isString());
1415:       assertFalse(node2.isNew());
1416:       assertFalse(node2.isSetterDef());
1417:       assertFalse(node2.isAdd());
1418:       assertFalse(node2.isDefaultCase());
1419:       assertFalse(node2.isDo());
1420:       assertFalse(node2.isFunction());
1421:       assertFalse(node2.isDebugger());
1422:       assertEquals(40, node2.getType());
1423:       assertEquals(0, node2.getChildCount());
1424:       assertFalse(node2.isArrayLit());
1425:       assertFalse(node2.isContinue());
1426:       assertFalse(node2.isNumber());
1427:       assertFalse(node2.isIf());
1428:       assertFalse(node2.isLabelName());
1429:       assertFalse(node2.isGetterDef());
1430:       assertFalse(node2.isNE());
1431:       assertFalse(node2.isFor());
1432:       assertFalse(node2.hasOneChild());
1433:       assertFalse(node2.isIn());
1434:       assertFalse(node2.isTry());
1435:       assertFalse(node2.isCase());
1436:       assertFalse(node2.isScript());
1437:       assertFalse(node2.isWith());
1438:       assertFalse(node2.isRegExp());
1439:       assertFalse(node2.isBlock());
1440:       assertFalse(node2.isInstanceOf());
1441:       assertFalse(node2.isHook());
1442:       assertEquals((-1), node2.getLineno());
1443:       assertFalse(node2.hasMoreThanOneChild());
1444:       assertFalse(node2.isCatch());
1445:       assertFalse(node2.isBreak());
1446:       assertFalse(node2.isComma());
1447:       assertFalse(node2.isThrow());
1448:       assertFalse(node2.isThis());
1449:       assertFalse(node2.isObjectLit());
1450:       assertFalse(node2.isGetProp());
1451:       assertFalse(node2.isInc());
1452:       assertFalse(node2.isNot());
1453:       assertFalse(node2.isSwitch());
1454:       assertFalse(node2.isAnd());
1455:       assertEquals((-1), node2.getCharno());
1456:       assertFalse(node2.isFalse());
1457:       assertFalse(node2.isCast());
1458:       assertFalse(node2.isDec());
1459:       assertFalse(node2.hasChildren());
1460:       assertEquals((-1), node2.getSourcePosition());
1461:       assertFalse(node2.isAssign());
1462:       assertFalse(node2.isTypeOf());
1463:       assertFalse(node2.isDelProp());
1464:       assertFalse(node2.isLabel());
1465:       assertFalse(node2.isReturn());
1466:       assertFalse(node2.isOr());
1467:       assertFalse(node2.isAssignAdd());
1468:       assertFalse(node2.isEmpty());
1469:       assertFalse(node2.isWhile());
1470:       assertFalse(node2.isTrue());
1471:       assertFalse(node2.isVoid());
1472:       assertFalse(node2.isCall());
1473:       assertFalse(node2.isGetElem());
1474:       assertFalse(node2.isExprResult());
1475:       assertFalse(boolean2);
1476:       assertFalse(node2.equals((Object)node1));
1477:       assertFalse(node2.equals((Object)node0));
1478:       assertTrue(boolean2 == boolean1);
1479:       assertTrue(boolean2 == boolean0);
1480:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1481:       assertEquals(8, Node.FLAG_NO_THROWS);
1482:       assertEquals(39, Node.EMPTY_BLOCK);
1483:       assertEquals(48, Node.DIRECTIVES);
1484:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1485:       assertEquals(50, Node.FREE_CALL);
1486:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1487:       assertEquals(4095, Node.COLUMN_MASK);
1488:       assertEquals(40, Node.ORIGINALNAME_PROP);
1489:       assertEquals(57, Node.REFLECTED_OBJECT);
1490:       assertEquals(43, Node.IS_CONSTANT_NAME);
1491:       assertEquals(54, Node.SLASH_V);
1492:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1493:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1494:       assertEquals(12, Node.COLUMN_BITS);
1495:       assertEquals(1, Node.DECR_FLAG);
1496:       assertEquals(32, Node.INCRDECR_PROP);
1497:       assertEquals(2, Node.POST_FLAG);
1498:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1499:       assertEquals(47, Node.IS_DISPATCHER);
1500:       assertEquals(37, Node.OPT_ARG_NAME);
1501:       assertEquals(29, Node.JSDOC_INFO_PROP);
1502:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1503:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1504:       assertEquals(49, Node.DIRECT_EVAL);
1505:       assertEquals(46, Node.IS_NAMESPACE);
1506:       assertEquals(56, Node.CHANGE_TIME);
1507:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1508:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1509:       assertEquals(36, Node.QUOTED_PROP);
1510:       assertEquals(30, Node.VAR_ARGS_NAME);
1511:       assertEquals(52, Node.LENGTH);
1512:       assertEquals(53, Node.INPUT_ID);
1513:       assertEquals(55, Node.INFERRED_FUNCTION);
1514:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1515:       assertEquals(57, Node.LAST_PROP);
1516:       assertSame(node2, node3);
1517:       
1518:       Node node4 = node0.cloneNode();
1519:       assertFalse(node0.isCatch());
1520:       assertFalse(node0.isDefaultCase());
1521:       assertFalse(node0.isDebugger());
1522:       assertFalse(node0.isParamList());
1523:       assertFalse(node0.isTrue());
1524:       assertFalse(node0.isNull());
1525:       assertEquals(0, node0.getSourcePosition());
1526:       assertFalse(node0.isSetterDef());
1527:       assertFalse(node0.isStringKey());
1528:       assertFalse(node0.isVar());
1529:       assertFalse(node0.isArrayLit());
1530:       assertFalse(node0.isFunction());
1531:       assertEquals(0, node0.getLineno());
1532:       assertEquals(0, node0.getChildCount());
1533:       assertFalse(node0.isContinue());
1534:       assertEquals(330, node0.getType());
1535:       assertFalse(node0.isReturn());
1536:       assertFalse(node0.isWhile());
1537:       assertFalse(node0.isDo());
1538:       assertFalse(node0.isAssignAdd());
1539:       assertFalse(node0.isAdd());
1540:       assertFalse(node0.isNew());
1541:       assertFalse(node0.isString());
1542:       assertFalse(node0.isOr());
1543:       assertFalse(node0.isEmpty());
1544:       assertFalse(node0.isCall());
1545:       assertFalse(node0.isGetElem());
1546:       assertFalse(node0.isDelProp());
1547:       assertFalse(node0.isName());
1548:       assertFalse(node0.isExprResult());
1549:       assertFalse(node0.isComma());
1550:       assertFalse(node0.isVoid());
1551:       assertFalse(node0.hasChildren());
1552:       assertFalse(node0.isBreak());
1553:       assertFalse(node0.isAssign());
1554:       assertFalse(node0.isDec());
1555:       assertFalse(node0.isTypeOf());
1556:       assertFalse(node0.isAnd());
1557:       assertFalse(node0.isObjectLit());
1558:       assertFalse(node0.isScript());
1559:       assertFalse(node0.isGetProp());
1560:       assertEquals(0, node0.getCharno());
1561:       assertFalse(node0.isNot());
1562:       assertFalse(node0.isCast());
1563:       assertFalse(node0.isThrow());
1564:       assertFalse(node0.isLabelName());
1565:       assertFalse(node0.isLabel());
1566:       assertFalse(node0.isFalse());
1567:       assertFalse(node0.isCase());
1568:       assertFalse(node0.isSwitch());
1569:       assertFalse(node0.isInc());
1570:       assertFalse(node0.isNE());
1571:       assertFalse(node0.isGetterDef());
1572:       assertFalse(node0.isNumber());
1573:       assertFalse(node0.isIn());
1574:       assertFalse(node0.isFor());
1575:       assertFalse(node0.isHook());
1576:       assertFalse(node0.hasOneChild());
1577:       assertFalse(node0.isTry());
1578:       assertFalse(node0.isIf());
1579:       assertFalse(node0.isThis());
1580:       assertFalse(node0.isBlock());
1581:       assertFalse(node0.isInstanceOf());
1582:       assertFalse(node0.isRegExp());
1583:       assertFalse(node0.hasMoreThanOneChild());
1584:       assertFalse(node0.isWith());
1585:       assertFalse(node4.hasOneChild());
1586:       assertEquals(0, node4.getCharno());
1587:       assertFalse(node4.isNot());
1588:       assertFalse(node4.isObjectLit());
1589:       assertFalse(node4.isScript());
1590:       assertFalse(node4.isNumber());
1591:       assertFalse(node4.isReturn());
1592:       assertFalse(node4.isOr());
1593:       assertFalse(node4.isGetProp());
1594:       assertFalse(node4.isThis());
1595:       assertFalse(node4.isWhile());
1596:       assertFalse(node4.isWith());
1597:       assertFalse(node4.isAssign());
1598:       assertFalse(node4.isGetElem());
1599:       assertFalse(node4.isDec());
1600:       assertFalse(node4.hasChildren());
1601:       assertFalse(node4.isBreak());
1602:       assertFalse(node4.hasMoreThanOneChild());
1603:       assertFalse(node4.isComma());
1604:       assertFalse(node4.isTypeOf());
1605:       assertFalse(node4.isExprResult());
1606:       assertFalse(node4.isInstanceOf());
1607:       assertFalse(node4.isThrow());
1608:       assertFalse(node4.isInc());
1609:       assertFalse(node4.isSetterDef());
1610:       assertFalse(node4.isString());
1611:       assertFalse(node4.isIn());
1612:       assertEquals(0, node4.getLineno());
1613:       assertFalse(node4.isAnd());
1614:       assertFalse(node4.isCast());
1615:       assertFalse(node4.isFunction());
1616:       assertFalse(node4.isFalse());
1617:       assertFalse(node4.isContinue());
1618:       assertFalse(node4.isTry());
1619:       assertFalse(node4.isDebugger());
1620:       assertFalse(node4.isArrayLit());
1621:       assertFalse(node4.isTrue());
1622:       assertFalse(node4.isVoid());
1623:       assertFalse(node4.isDefaultCase());
1624:       assertFalse(node4.isGetterDef());
1625:       assertFalse(node4.isEmpty());
1626:       assertEquals(330, node4.getType());
1627:       assertFalse(node4.isNE());
1628:       assertFalse(node4.isNull());
1629:       assertFalse(node4.isIf());
1630:       assertFalse(node4.isName());
1631:       assertFalse(node4.isDelProp());
1632:       assertFalse(node4.isFor());
1633:       assertFalse(node4.isCatch());
1634:       assertFalse(node4.isCall());
1635:       assertFalse(node4.isRegExp());
1636:       assertFalse(node4.isAdd());
1637:       assertFalse(node4.isBlock());
1638:       assertFalse(node4.isHook());
1639:       assertFalse(node4.isNew());
1640:       assertFalse(node4.isSwitch());
1641:       assertFalse(node4.isVar());
1642:       assertFalse(node4.isStringKey());
1643:       assertFalse(node4.isDo());
1644:       assertEquals(0, node4.getSourcePosition());
1645:       assertFalse(node4.isCase());
1646:       assertEquals(0, node4.getChildCount());
1647:       assertFalse(node4.isLabel());
1648:       assertFalse(node4.isParamList());
1649:       assertFalse(node4.isAssignAdd());
1650:       assertFalse(node4.isLabelName());
1651:       assertEquals(0, nodeArray0.length);
1652:       assertNotNull(node4);
1653:       assertFalse(node0.equals((Object)node1));
1654:       assertFalse(node0.equals((Object)node3));
1655:       assertFalse(node0.equals((Object)node2));
1656:       assertFalse(node4.equals((Object)node3));
1657:       assertFalse(node4.equals((Object)node0));
1658:       assertFalse(node4.equals((Object)node2));
1659:       assertFalse(node4.equals((Object)node1));
1660:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1661:       assertEquals(55, Node.INFERRED_FUNCTION);
1662:       assertEquals(36, Node.QUOTED_PROP);
1663:       assertEquals(4095, Node.COLUMN_MASK);
1664:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1665:       assertEquals(43, Node.IS_CONSTANT_NAME);
1666:       assertEquals(48, Node.DIRECTIVES);
1667:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1668:       assertEquals(50, Node.FREE_CALL);
1669:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1670:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1671:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1672:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1673:       assertEquals(32, Node.INCRDECR_PROP);
1674:       assertEquals(1, Node.DECR_FLAG);
1675:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1676:       assertEquals(12, Node.COLUMN_BITS);
1677:       assertEquals(30, Node.VAR_ARGS_NAME);
1678:       assertEquals(46, Node.IS_NAMESPACE);
1679:       assertEquals(54, Node.SLASH_V);
1680:       assertEquals(37, Node.OPT_ARG_NAME);
1681:       assertEquals(49, Node.DIRECT_EVAL);
1682:       assertEquals(29, Node.JSDOC_INFO_PROP);
1683:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1684:       assertEquals(40, Node.ORIGINALNAME_PROP);
1685:       assertEquals(56, Node.CHANGE_TIME);
1686:       assertEquals(57, Node.REFLECTED_OBJECT);
1687:       assertEquals(8, Node.FLAG_NO_THROWS);
1688:       assertEquals(47, Node.IS_DISPATCHER);
1689:       assertEquals(2, Node.POST_FLAG);
1690:       assertEquals(53, Node.INPUT_ID);
1691:       assertEquals(52, Node.LENGTH);
1692:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1693:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1694:       assertEquals(39, Node.EMPTY_BLOCK);
1695:       assertEquals(57, Node.LAST_PROP);
1696:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1697:       assertEquals(53, Node.INPUT_ID);
1698:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1699:       assertEquals(43, Node.IS_CONSTANT_NAME);
1700:       assertEquals(56, Node.CHANGE_TIME);
1701:       assertEquals(36, Node.QUOTED_PROP);
1702:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1703:       assertEquals(37, Node.OPT_ARG_NAME);
1704:       assertEquals(55, Node.INFERRED_FUNCTION);
1705:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1706:       assertEquals(30, Node.VAR_ARGS_NAME);
1707:       assertEquals(8, Node.FLAG_NO_THROWS);
1708:       assertEquals(2, Node.POST_FLAG);
1709:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1710:       assertEquals(47, Node.IS_DISPATCHER);
1711:       assertEquals(57, Node.LAST_PROP);
1712:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1713:       assertEquals(39, Node.EMPTY_BLOCK);
1714:       assertEquals(29, Node.JSDOC_INFO_PROP);
1715:       assertEquals(57, Node.REFLECTED_OBJECT);
1716:       assertEquals(40, Node.ORIGINALNAME_PROP);
1717:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1718:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1719:       assertEquals(52, Node.LENGTH);
1720:       assertEquals(50, Node.FREE_CALL);
1721:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1722:       assertEquals(54, Node.SLASH_V);
1723:       assertEquals(48, Node.DIRECTIVES);
1724:       assertEquals(49, Node.DIRECT_EVAL);
1725:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1726:       assertEquals(4095, Node.COLUMN_MASK);
1727:       assertEquals(12, Node.COLUMN_BITS);
1728:       assertEquals(46, Node.IS_NAMESPACE);
1729:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1730:       assertEquals(1, Node.DECR_FLAG);
1731:       assertEquals(32, Node.INCRDECR_PROP);
1732:       assertNotSame(node0, node1);
1733:       assertNotSame(node0, node4);
1734:       assertNotSame(node4, node0);
1735:       assertNotSame(node4, node1);
1736:       
1737:       boolean boolean3 = node1.isNull();
1738:       assertFalse(node1.isAnd());
1739:       assertFalse(node1.isWith());
1740:       assertFalse(node1.isObjectLit());
1741:       assertFalse(node1.isNot());
1742:       assertFalse(node1.isComma());
1743:       assertFalse(node1.isInstanceOf());
1744:       assertFalse(node1.isBreak());
1745:       assertFalse(node1.isExprResult());
1746:       assertFalse(node1.isCast());
1747:       assertFalse(node1.isAssign());
1748:       assertFalse(node1.isLabelName());
1749:       assertFalse(node1.isDec());
1750:       assertEquals((-1), node1.getSourcePosition());
1751:       assertFalse(node1.isHook());
1752:       assertFalse(node1.hasChildren());
1753:       assertFalse(node1.isThis());
1754:       assertFalse(node1.isGetProp());
1755:       assertEquals((-1), node1.getCharno());
1756:       assertFalse(node1.hasOneChild());
1757:       assertFalse(node1.isNumber());
1758:       assertFalse(node1.isString());
1759:       assertFalse(node1.isScript());
1760:       assertFalse(node1.isCase());
1761:       assertFalse(node1.isContinue());
1762:       assertFalse(node1.isBlock());
1763:       assertEquals((-1), node1.getLineno());
1764:       assertFalse(node1.hasMoreThanOneChild());
1765:       assertFalse(node1.isFalse());
1766:       assertFalse(node1.isIf());
1767:       assertFalse(node1.isNE());
1768:       assertFalse(node1.isIn());
1769:       assertFalse(node1.isInc());
1770:       assertFalse(node1.isSetterDef());
1771:       assertFalse(node1.isDefaultCase());
1772:       assertFalse(node1.isTrue());
1773:       assertFalse(node1.isFunction());
1774:       assertEquals(0, node1.getChildCount());
1775:       assertFalse(node1.isVoid());
1776:       assertFalse(node1.isRegExp());
1777:       assertFalse(node1.isArrayLit());
1778:       assertTrue(node1.isThrow());
1779:       assertFalse(node1.isCatch());
1780:       assertFalse(node1.isStringKey());
1781:       assertFalse(node1.isGetterDef());
1782:       assertFalse(node1.isParamList());
1783:       assertFalse(node1.isFor());
1784:       assertFalse(node1.isDebugger());
1785:       assertFalse(node1.isTry());
1786:       assertEquals(49, node1.getType());
1787:       assertFalse(node1.isDo());
1788:       assertFalse(node1.isSwitch());
1789:       assertFalse(node1.isReturn());
1790:       assertFalse(node1.isWhile());
1791:       assertFalse(node1.isLabel());
1792:       assertFalse(node1.isTypeOf());
1793:       assertFalse(node1.isCall());
1794:       assertFalse(node1.isName());
1795:       assertFalse(node1.isGetElem());
1796:       assertFalse(node1.isDelProp());
1797:       assertFalse(node1.isNull());
1798:       assertFalse(node1.isVar());
1799:       assertFalse(node1.isNew());
1800:       assertFalse(node1.isAssignAdd());
1801:       assertFalse(node1.isOr());
1802:       assertFalse(node1.isAdd());
1803:       assertFalse(node1.isEmpty());
1804:       assertFalse(boolean3);
1805:       assertFalse(node1.equals((Object)node2));
1806:       assertFalse(node1.equals((Object)node3));
1807:       assertFalse(node1.equals((Object)node0));
1808:       assertFalse(node1.equals((Object)node4));
1809:       assertTrue(boolean3 == boolean0);
1810:       assertTrue(boolean3 == boolean1);
1811:       assertTrue(boolean3 == boolean2);
1812:       assertEquals(36, Node.QUOTED_PROP);
1813:       assertEquals(55, Node.INFERRED_FUNCTION);
1814:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1815:       assertEquals(4095, Node.COLUMN_MASK);
1816:       assertEquals(53, Node.INPUT_ID);
1817:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1818:       assertEquals(29, Node.JSDOC_INFO_PROP);
1819:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1820:       assertEquals(8, Node.FLAG_NO_THROWS);
1821:       assertEquals(39, Node.EMPTY_BLOCK);
1822:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1823:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1824:       assertEquals(57, Node.REFLECTED_OBJECT);
1825:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1826:       assertEquals(37, Node.OPT_ARG_NAME);
1827:       assertEquals(48, Node.DIRECTIVES);
1828:       assertEquals(56, Node.CHANGE_TIME);
1829:       assertEquals(30, Node.VAR_ARGS_NAME);
1830:       assertEquals(49, Node.DIRECT_EVAL);
1831:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1832:       assertEquals(52, Node.LENGTH);
1833:       assertEquals(32, Node.INCRDECR_PROP);
1834:       assertEquals(12, Node.COLUMN_BITS);
1835:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1836:       assertEquals(1, Node.DECR_FLAG);
1837:       assertEquals(57, Node.LAST_PROP);
1838:       assertEquals(50, Node.FREE_CALL);
1839:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1840:       assertEquals(47, Node.IS_DISPATCHER);
1841:       assertEquals(40, Node.ORIGINALNAME_PROP);
1842:       assertEquals(2, Node.POST_FLAG);
1843:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1844:       assertEquals(46, Node.IS_NAMESPACE);
1845:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1846:       assertEquals(54, Node.SLASH_V);
1847:       assertEquals(43, Node.IS_CONSTANT_NAME);
1848:       assertNotSame(node1, node0);
1849:       assertNotSame(node1, node4);
1850:       
1851:       Node node5 = Node.newString("xpBF>P}ZAl``iC)9", 49, 1);
1852:       assertFalse(node5.isIf());
1853:       assertFalse(node5.isGetterDef());
1854:       assertFalse(node5.isDelProp());
1855:       assertFalse(node5.isNE());
1856:       assertFalse(node5.isFor());
1857:       assertFalse(node5.isEmpty());
1858:       assertFalse(node5.isVoid());
1859:       assertFalse(node5.isArrayLit());
1860:       assertFalse(node5.isRegExp());
1861:       assertFalse(node5.isSwitch());
1862:       assertFalse(node5.isDebugger());
1863:       assertFalse(node5.isHook());
1864:       assertFalse(node5.isTry());
1865:       assertFalse(node5.isCase());
1866:       assertEquals(200705, node5.getSourcePosition());
1867:       assertFalse(node5.isBreak());
1868:       assertFalse(node5.isNull());
1869:       assertFalse(node5.isParamList());
1870:       assertFalse(node5.isStringKey());
1871:       assertFalse(node5.isComma());
1872:       assertEquals(0, node5.getChildCount());
1873:       assertFalse(node5.isCall());
1874:       assertFalse(node5.isName());
1875:       assertFalse(node5.isDefaultCase());
1876:       assertFalse(node5.isTrue());
1877:       assertFalse(node5.isAssignAdd());
1878:       assertFalse(node5.isVar());
1879:       assertFalse(node5.isAdd());
1880:       assertFalse(node5.isDo());
1881:       assertFalse(node5.isNew());
1882:       assertFalse(node5.hasChildren());
1883:       assertFalse(node5.isNumber());
1884:       assertFalse(node5.isTypeOf());
1885:       assertFalse(node5.isOr());
1886:       assertFalse(node5.isAssign());
1887:       assertFalse(node5.isLabel());
1888:       assertFalse(node5.isDec());
1889:       assertFalse(node5.hasMoreThanOneChild());
1890:       assertFalse(node5.isCast());
1891:       assertFalse(node5.isGetElem());
1892:       assertFalse(node5.isExprResult());
1893:       assertFalse(node5.isLabelName());
1894:       assertFalse(node5.isWith());
1895:       assertFalse(node5.isScript());
1896:       assertEquals(1, node5.getCharno());
1897:       assertFalse(node5.isWhile());
1898:       assertFalse(node5.isBlock());
1899:       assertFalse(node5.isObjectLit());
1900:       assertFalse(node5.isNot());
1901:       assertFalse(node5.isReturn());
1902:       assertFalse(node5.isGetProp());
1903:       assertTrue(node5.isString());
1904:       assertFalse(node5.hasOneChild());
1905:       assertFalse(node5.isThrow());
1906:       assertFalse(node5.isFalse());
1907:       assertFalse(node5.isThis());
1908:       assertFalse(node5.isCatch());
1909:       assertFalse(node5.isInstanceOf());
1910:       assertFalse(node5.isAnd());
1911:       assertFalse(node5.isContinue());
1912:       assertEquals(40, node5.getType());
1913:       assertFalse(node5.isFunction());
1914:       assertFalse(node5.isIn());
1915:       assertFalse(node5.isInc());
1916:       assertFalse(node5.isSetterDef());
1917:       assertEquals(49, node5.getLineno());
1918:       assertNotNull(node5);
1919:       assertFalse(node5.equals((Object)node0));
1920:       assertFalse(node5.equals((Object)node4));
1921:       assertFalse(node5.equals((Object)node1));
1922:       assertFalse(node5.equals((Object)node3));
1923:       assertFalse(node5.equals((Object)node2));
1924:       assertEquals(2, Node.POST_FLAG);
1925:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1926:       assertEquals(37, Node.OPT_ARG_NAME);
1927:       assertEquals(56, Node.CHANGE_TIME);
1928:       assertEquals(29, Node.JSDOC_INFO_PROP);
1929:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1930:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1931:       assertEquals(1, Node.DECR_FLAG);
1932:       assertEquals(32, Node.INCRDECR_PROP);
1933:       assertEquals(30, Node.VAR_ARGS_NAME);
1934:       assertEquals(47, Node.IS_DISPATCHER);
1935:       assertEquals(12, Node.COLUMN_BITS);
1936:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1937:       assertEquals(36, Node.QUOTED_PROP);
1938:       assertEquals(57, Node.LAST_PROP);
1939:       assertEquals(52, Node.LENGTH);
1940:       assertEquals(49, Node.DIRECT_EVAL);
1941:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1942:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1943:       assertEquals(53, Node.INPUT_ID);
1944:       assertEquals(55, Node.INFERRED_FUNCTION);
1945:       assertEquals(57, Node.REFLECTED_OBJECT);
1946:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1947:       assertEquals(48, Node.DIRECTIVES);
1948:       assertEquals(8, Node.FLAG_NO_THROWS);
1949:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1950:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1951:       assertEquals(40, Node.ORIGINALNAME_PROP);
1952:       assertEquals(39, Node.EMPTY_BLOCK);
1953:       assertEquals(4095, Node.COLUMN_MASK);
1954:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1955:       assertEquals(43, Node.IS_CONSTANT_NAME);
1956:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1957:       assertEquals(50, Node.FREE_CALL);
1958:       assertEquals(46, Node.IS_NAMESPACE);
1959:       assertEquals(54, Node.SLASH_V);
1960:       assertNotSame(node5, node3);
1961:       assertNotSame(node5, node2);
1962:       
1963:       Node node6 = new Node(1, node3, node3, node5, 1051, 31);
1964:       assertFalse(node1.isAnd());
1965:       assertFalse(node1.isWith());
1966:       assertFalse(node1.isObjectLit());
1967:       assertFalse(node1.isNot());
1968:       assertFalse(node1.isComma());
1969:       assertFalse(node1.isInstanceOf());
1970:       assertFalse(node1.isBreak());
1971:       assertFalse(node1.isExprResult());
1972:       assertFalse(node1.isCast());
1973:       assertFalse(node1.isAssign());
1974:       assertFalse(node1.isLabelName());
1975:       assertFalse(node1.isDec());
1976:       assertEquals((-1), node1.getSourcePosition());
1977:       assertFalse(node1.isHook());
1978:       assertFalse(node1.hasChildren());
1979:       assertFalse(node1.isThis());
1980:       assertFalse(node1.isGetProp());
1981:       assertEquals((-1), node1.getCharno());
1982:       assertFalse(node1.hasOneChild());
1983:       assertFalse(node1.isNumber());
1984:       assertFalse(node1.isString());
1985:       assertFalse(node1.isScript());
1986:       assertFalse(node1.isCase());
1987:       assertFalse(node1.isContinue());
1988:       assertFalse(node1.isBlock());
1989:       assertEquals((-1), node1.getLineno());
1990:       assertFalse(node1.hasMoreThanOneChild());
1991:       assertFalse(node1.isFalse());
1992:       assertFalse(node1.isIf());
1993:       assertFalse(node1.isNE());
1994:       assertFalse(node1.isIn());
1995:       assertFalse(node1.isInc());
1996:       assertFalse(node1.isSetterDef());
1997:       assertFalse(node1.isDefaultCase());
1998:       assertFalse(node1.isTrue());
1999:       assertFalse(node1.isFunction());
2000:       assertEquals(0, node1.getChildCount());
2001:       assertFalse(node1.isVoid());
2002:       assertFalse(node1.isRegExp());
2003:       assertFalse(node1.isArrayLit());
2004:       assertTrue(node1.isThrow());
2005:       assertFalse(node1.isCatch());
2006:       assertFalse(node1.isStringKey());
2007:       assertFalse(node1.isGetterDef());
2008:       assertFalse(node1.isParamList());
2009:       assertFalse(node1.isFor());
2010:       assertFalse(node1.isDebugger());
2011:       assertFalse(node1.isTry());
2012:       assertEquals(49, node1.getType());
2013:       assertFalse(node1.isDo());
2014:       assertFalse(node1.isSwitch());
2015:       assertFalse(node1.isReturn());
2016:       assertFalse(node1.isWhile());
2017:       assertFalse(node1.isLabel());
2018:       assertFalse(node1.isTypeOf());
2019:       assertFalse(node1.isCall());
2020:       assertFalse(node1.isName());
2021:       assertFalse(node1.isGetElem());
2022:       assertFalse(node1.isDelProp());
2023:       assertFalse(node1.isNull());
2024:       assertFalse(node1.isVar());
2025:       assertFalse(node1.isNew());
2026:       assertFalse(node1.isAssignAdd());
2027:       assertFalse(node1.isOr());
2028:       assertFalse(node1.isAdd());
2029:       assertFalse(node1.isEmpty());
2030:       assertFalse(node2.isName());
2031:       assertFalse(node2.isStringKey());
2032:       assertFalse(node2.isParamList());
2033:       assertFalse(node2.isVar());
2034:       assertFalse(node2.isNull());
2035:       assertTrue(node2.isString());
2036:       assertFalse(node2.isNew());
2037:       assertFalse(node2.isSetterDef());
2038:       assertFalse(node2.isAdd());
2039:       assertFalse(node2.isDefaultCase());
2040:       assertFalse(node2.isDo());
2041:       assertFalse(node2.isFunction());
2042:       assertFalse(node2.isDebugger());
2043:       assertEquals(40, node2.getType());
2044:       assertEquals(0, node2.getChildCount());
2045:       assertFalse(node2.isArrayLit());
2046:       assertFalse(node2.isContinue());
2047:       assertFalse(node2.isNumber());
2048:       assertFalse(node2.isIf());
2049:       assertFalse(node2.isLabelName());
2050:       assertFalse(node2.isGetterDef());
2051:       assertFalse(node2.isNE());
2052:       assertFalse(node2.isFor());
2053:       assertFalse(node2.hasOneChild());
2054:       assertFalse(node2.isIn());
2055:       assertFalse(node2.isTry());
2056:       assertFalse(node2.isCase());
2057:       assertFalse(node2.isScript());
2058:       assertFalse(node2.isWith());
2059:       assertFalse(node2.isRegExp());
2060:       assertFalse(node2.isBlock());
2061:       assertFalse(node2.isInstanceOf());
2062:       assertFalse(node2.isHook());
2063:       assertEquals((-1), node2.getLineno());
2064:       assertFalse(node2.hasMoreThanOneChild());
2065:       assertFalse(node2.isCatch());
2066:       assertFalse(node2.isBreak());
2067:       assertFalse(node2.isComma());
2068:       assertFalse(node2.isThrow());
2069:       assertFalse(node2.isThis());
2070:       assertFalse(node2.isObjectLit());
2071:       assertFalse(node2.isGetProp());
2072:       assertFalse(node2.isInc());
2073:       assertFalse(node2.isNot());
2074:       assertFalse(node2.isSwitch());
2075:       assertFalse(node2.isAnd());
2076:       assertEquals((-1), node2.getCharno());
2077:       assertFalse(node2.isFalse());
2078:       assertFalse(node2.isCast());
2079:       assertFalse(node2.isDec());
2080:       assertFalse(node2.hasChildren());
2081:       assertEquals((-1), node2.getSourcePosition());
2082:       assertFalse(node2.isAssign());
2083:       assertFalse(node2.isTypeOf());
2084:       assertFalse(node2.isDelProp());
2085:       assertFalse(node2.isLabel());
2086:       assertFalse(node2.isReturn());
2087:       assertFalse(node2.isOr());
2088:       assertFalse(node2.isAssignAdd());
2089:       assertFalse(node2.isEmpty());
2090:       assertFalse(node2.isWhile());
2091:       assertFalse(node2.isTrue());
2092:       assertFalse(node2.isVoid());
2093:       assertFalse(node2.isCall());
2094:       assertFalse(node2.isGetElem());
2095:       assertFalse(node2.isExprResult());
2096:       assertFalse(node3.isHook());
2097:       assertFalse(node3.isInc());
2098:       assertFalse(node3.isSwitch());
2099:       assertFalse(node3.isBreak());
2100:       assertFalse(node3.isThrow());
2101:       assertFalse(node3.isThis());
2102:       assertFalse(node3.isComma());
2103:       assertFalse(node3.isFalse());
2104:       assertFalse(node3.isIn());
2105:       assertFalse(node3.isInstanceOf());
2106:       assertFalse(node3.isDelProp());
2107:       assertFalse(node3.isIf());
2108:       assertFalse(node3.isNE());
2109:       assertFalse(node3.isEmpty());
2110:       assertFalse(node3.isCast());
2111:       assertFalse(node3.isExprResult());
2112:       assertFalse(node3.isVoid());
2113:       assertFalse(node3.hasChildren());
2114:       assertFalse(node3.isGetElem());
2115:       assertEquals(40, node3.getType());
2116:       assertFalse(node3.isFunction());
2117:       assertFalse(node3.isTypeOf());
2118:       assertFalse(node3.isAssign());
2119:       assertFalse(node3.isDec());
2120:       assertFalse(node3.isReturn());
2121:       assertFalse(node3.isAnd());
2122:       assertFalse(node3.isGetProp());
2123:       assertFalse(node3.isObjectLit());
2124:       assertFalse(node3.isDebugger());
2125:       assertEquals((-1), node3.getSourcePosition());
2126:       assertFalse(node3.isNot());
2127:       assertFalse(node3.isBlock());
2128:       assertFalse(node3.isAdd());
2129:       assertFalse(node3.isVar());
2130:       assertFalse(node3.isCall());
2131:       assertFalse(node3.isName());
2132:       assertTrue(node3.isString());
2133:       assertFalse(node3.isNew());
2134:       assertFalse(node3.isWhile());
2135:       assertFalse(node3.isContinue());
2136:       assertFalse(node3.hasMoreThanOneChild());
2137:       assertEquals((-1), node3.getLineno());
2138:       assertFalse(node3.isLabel());
2139:       assertFalse(node3.isAssignAdd());
2140:       assertFalse(node3.isCatch());
2141:       assertFalse(node3.isSetterDef());
2142:       assertFalse(node3.isDo());
2143:       assertFalse(node3.isNull());
2144:       assertFalse(node3.isTrue());
2145:       assertFalse(node3.isOr());
2146:       assertFalse(node3.hasOneChild());
2147:       assertFalse(node3.isArrayLit());
2148:       assertFalse(node3.isTry());
2149:       assertFalse(node3.isLabelName());
2150:       assertFalse(node3.isWith());
2151:       assertFalse(node3.isDefaultCase());
2152:       assertFalse(node3.isFor());
2153:       assertFalse(node3.isRegExp());
2154:       assertEquals(0, node3.getChildCount());
2155:       assertFalse(node3.isParamList());
2156:       assertFalse(node3.isCase());
2157:       assertFalse(node3.isStringKey());
2158:       assertFalse(node3.isScript());
2159:       assertEquals((-1), node3.getCharno());
2160:       assertFalse(node3.isNumber());
2161:       assertFalse(node3.isGetterDef());
2162:       assertFalse(node5.isIf());
2163:       assertFalse(node5.isGetterDef());
2164:       assertFalse(node5.isDelProp());
2165:       assertFalse(node5.isNE());
2166:       assertFalse(node5.isFor());
2167:       assertFalse(node5.isEmpty());
2168:       assertFalse(node5.isVoid());
2169:       assertFalse(node5.isArrayLit());
2170:       assertFalse(node5.isRegExp());
2171:       assertFalse(node5.isSwitch());
2172:       assertFalse(node5.isDebugger());
2173:       assertFalse(node5.isHook());
2174:       assertFalse(node5.isTry());
2175:       assertFalse(node5.isCase());
2176:       assertEquals(200705, node5.getSourcePosition());
2177:       assertFalse(node5.isBreak());
2178:       assertFalse(node5.isNull());
2179:       assertFalse(node5.isParamList());
2180:       assertFalse(node5.isStringKey());
2181:       assertFalse(node5.isComma());
2182:       assertEquals(0, node5.getChildCount());
2183:       assertFalse(node5.isCall());
2184:       assertFalse(node5.isName());
2185:       assertFalse(node5.isDefaultCase());
2186:       assertFalse(node5.isTrue());
2187:       assertFalse(node5.isAssignAdd());
2188:       assertFalse(node5.isVar());
2189:       assertFalse(node5.isAdd());
2190:       assertFalse(node5.isDo());
2191:       assertFalse(node5.isNew());
2192:       assertFalse(node5.hasChildren());
2193:       assertFalse(node5.isNumber());
2194:       assertFalse(node5.isTypeOf());
2195:       assertFalse(node5.isOr());
2196:       assertFalse(node5.isAssign());
2197:       assertFalse(node5.isLabel());
2198:       assertFalse(node5.isDec());
2199:       assertFalse(node5.hasMoreThanOneChild());
2200:       assertFalse(node5.isCast());
2201:       assertFalse(node5.isGetElem());
2202:       assertFalse(node5.isExprResult());
2203:       assertFalse(node5.isLabelName());
2204:       assertFalse(node5.isWith());
2205:       assertFalse(node5.isScript());
2206:       assertEquals(1, node5.getCharno());
2207:       assertFalse(node5.isWhile());
2208:       assertFalse(node5.isBlock());
2209:       assertFalse(node5.isObjectLit());
2210:       assertFalse(node5.isNot());
2211:       assertFalse(node5.isReturn());
2212:       assertFalse(node5.isGetProp());
2213:       assertTrue(node5.isString());
2214:       assertFalse(node5.hasOneChild());
2215:       assertFalse(node5.isThrow());
2216:       assertFalse(node5.isFalse());
2217:       assertFalse(node5.isThis());
2218:       assertFalse(node5.isCatch());
2219:       assertFalse(node5.isInstanceOf());
2220:       assertFalse(node5.isAnd());
2221:       assertFalse(node5.isContinue());
2222:       assertEquals(40, node5.getType());
2223:       assertFalse(node5.isFunction());
2224:       assertFalse(node5.isIn());
2225:       assertFalse(node5.isInc());
2226:       assertFalse(node5.isSetterDef());
2227:       assertEquals(49, node5.getLineno());
2228:       assertTrue(node6.hasChildren());
2229:       assertFalse(node6.isIn());
2230:       assertFalse(node6.isNE());
2231:       assertFalse(node6.isCase());
2232:       assertFalse(node6.isString());
2233:       assertFalse(node6.isGetterDef());
2234:       assertFalse(node6.isInc());
2235:       assertFalse(node6.isEmpty());
2236:       assertFalse(node6.isFunction());
2237:       assertFalse(node6.isSwitch());
2238:       assertFalse(node6.isDebugger());
2239:       assertFalse(node6.isThrow());
2240:       assertFalse(node6.isFalse());
2241:       assertFalse(node6.isArrayLit());
2242:       assertFalse(node6.isComma());
2243:       assertFalse(node6.isAnd());
2244:       assertFalse(node6.isNull());
2245:       assertFalse(node6.isNot());
2246:       assertFalse(node6.isDefaultCase());
2247:       assertFalse(node6.isObjectLit());
2248:       assertFalse(node6.isGetProp());
2249:       assertFalse(node6.isVoid());
2250:       assertEquals(31, node6.getCharno());
2251:       assertFalse(node6.isTrue());
2252:       assertFalse(node6.isAssign());
2253:       assertFalse(node6.isBreak());
2254:       assertTrue(node6.hasMoreThanOneChild());
2255:       assertFalse(node6.isDec());
2256:       assertFalse(node6.isName());
2257:       assertFalse(node6.isTypeOf());
2258:       assertFalse(node6.isDelProp());
2259:       assertFalse(node6.isGetElem());
2260:       assertFalse(node6.isCall());
2261:       assertFalse(node6.isExprResult());
2262:       assertFalse(node6.isOr());
2263:       assertFalse(node6.isReturn());
2264:       assertFalse(node6.isAssignAdd());
2265:       assertFalse(node6.isLabel());
2266:       assertFalse(node6.isDo());
2267:       assertFalse(node6.isWhile());
2268:       assertFalse(node6.isNumber());
2269:       assertFalse(node6.isAdd());
2270:       assertFalse(node6.isNew());
2271:       assertFalse(node6.isStringKey());
2272:       assertFalse(node6.isVar());
2273:       assertFalse(node6.isLabelName());
2274:       assertFalse(node6.isCast());
2275:       assertFalse(node6.isContinue());
2276:       assertEquals(1, node6.getType());
2277:       assertEquals(2, node6.getChildCount());
2278:       assertFalse(node6.isThis());
2279:       assertEquals(1051, node6.getLineno());
2280:       assertFalse(node6.isParamList());
2281:       assertFalse(node6.isSetterDef());
2282:       assertFalse(node6.isScript());
2283:       assertFalse(node6.hasOneChild());
2284:       assertFalse(node6.isTry());
2285:       assertFalse(node6.isHook());
2286:       assertFalse(node6.isBlock());
2287:       assertFalse(node6.isFor());
2288:       assertFalse(node6.isWith());
2289:       assertFalse(node6.isIf());
2290:       assertFalse(node6.isRegExp());
2291:       assertFalse(node6.isCatch());
2292:       assertEquals(4304927, node6.getSourcePosition());
2293:       assertFalse(node6.isInstanceOf());
2294:       assertNotNull(node6);
2295:       assertFalse(node1.equals((Object)node2));
2296:       assertFalse(node1.equals((Object)node3));
2297:       assertFalse(node1.equals((Object)node0));
2298:       assertFalse(node1.equals((Object)node4));
2299:       assertFalse(node1.equals((Object)node5));
2300:       assertFalse(node2.equals((Object)node5));
2301:       assertFalse(node2.equals((Object)node1));
2302:       assertFalse(node2.equals((Object)node0));
2303:       assertFalse(node2.equals((Object)node4));
2304:       assertFalse(node3.equals((Object)node0));
2305:       assertFalse(node3.equals((Object)node5));
2306:       assertFalse(node3.equals((Object)node1));
2307:       assertFalse(node3.equals((Object)node4));
2308:       assertFalse(node5.equals((Object)node0));
2309:       assertFalse(node5.equals((Object)node4));
2310:       assertFalse(node5.equals((Object)node1));
2311:       assertFalse(node5.equals((Object)node3));
2312:       assertFalse(node5.equals((Object)node2));
2313:       assertFalse(node6.equals((Object)node1));
2314:       assertFalse(node6.equals((Object)node2));
2315:       assertFalse(node6.equals((Object)node0));
2316:       assertFalse(node6.equals((Object)node4));
2317:       assertFalse(node6.equals((Object)node3));
2318:       assertFalse(node6.equals((Object)node5));
2319:       assertEquals(36, Node.QUOTED_PROP);
2320:       assertEquals(55, Node.INFERRED_FUNCTION);
2321:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2322:       assertEquals(4095, Node.COLUMN_MASK);
2323:       assertEquals(53, Node.INPUT_ID);
2324:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2325:       assertEquals(29, Node.JSDOC_INFO_PROP);
2326:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2327:       assertEquals(8, Node.FLAG_NO_THROWS);
2328:       assertEquals(39, Node.EMPTY_BLOCK);
2329:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2330:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2331:       assertEquals(57, Node.REFLECTED_OBJECT);
2332:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2333:       assertEquals(37, Node.OPT_ARG_NAME);
2334:       assertEquals(48, Node.DIRECTIVES);
2335:       assertEquals(56, Node.CHANGE_TIME);
2336:       assertEquals(30, Node.VAR_ARGS_NAME);
2337:       assertEquals(49, Node.DIRECT_EVAL);
2338:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2339:       assertEquals(52, Node.LENGTH);
2340:       assertEquals(32, Node.INCRDECR_PROP);
2341:       assertEquals(12, Node.COLUMN_BITS);
2342:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2343:       assertEquals(1, Node.DECR_FLAG);
2344:       assertEquals(57, Node.LAST_PROP);
2345:       assertEquals(50, Node.FREE_CALL);
2346:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2347:       assertEquals(47, Node.IS_DISPATCHER);
2348:       assertEquals(40, Node.ORIGINALNAME_PROP);
2349:       assertEquals(2, Node.POST_FLAG);
2350:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2351:       assertEquals(46, Node.IS_NAMESPACE);
2352:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2353:       assertEquals(54, Node.SLASH_V);
2354:       assertEquals(43, Node.IS_CONSTANT_NAME);
2355:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2356:       assertEquals(8, Node.FLAG_NO_THROWS);
2357:       assertEquals(39, Node.EMPTY_BLOCK);
2358:       assertEquals(48, Node.DIRECTIVES);
2359:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2360:       assertEquals(50, Node.FREE_CALL);
2361:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2362:       assertEquals(4095, Node.COLUMN_MASK);
2363:       assertEquals(40, Node.ORIGINALNAME_PROP);
2364:       assertEquals(57, Node.REFLECTED_OBJECT);
2365:       assertEquals(43, Node.IS_CONSTANT_NAME);
2366:       assertEquals(54, Node.SLASH_V);
2367:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2368:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2369:       assertEquals(12, Node.COLUMN_BITS);
2370:       assertEquals(1, Node.DECR_FLAG);
2371:       assertEquals(32, Node.INCRDECR_PROP);
2372:       assertEquals(2, Node.POST_FLAG);
2373:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2374:       assertEquals(47, Node.IS_DISPATCHER);
2375:       assertEquals(37, Node.OPT_ARG_NAME);
2376:       assertEquals(29, Node.JSDOC_INFO_PROP);
2377:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2378:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2379:       assertEquals(49, Node.DIRECT_EVAL);
2380:       assertEquals(46, Node.IS_NAMESPACE);
2381:       assertEquals(56, Node.CHANGE_TIME);
2382:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2383:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2384:       assertEquals(36, Node.QUOTED_PROP);
2385:       assertEquals(30, Node.VAR_ARGS_NAME);
2386:       assertEquals(52, Node.LENGTH);
2387:       assertEquals(53, Node.INPUT_ID);
2388:       assertEquals(55, Node.INFERRED_FUNCTION);
2389:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2390:       assertEquals(57, Node.LAST_PROP);
2391:       assertEquals(57, Node.REFLECTED_OBJECT);
2392:       assertEquals(52, Node.LENGTH);
2393:       assertEquals(50, Node.FREE_CALL);
2394:       assertEquals(54, Node.SLASH_V);
2395:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2396:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2397:       assertEquals(8, Node.FLAG_NO_THROWS);
2398:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2399:       assertEquals(57, Node.LAST_PROP);
2400:       assertEquals(1, Node.DECR_FLAG);
2401:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2402:       assertEquals(39, Node.EMPTY_BLOCK);
2403:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2404:       assertEquals(46, Node.IS_NAMESPACE);
2405:       assertEquals(30, Node.VAR_ARGS_NAME);
2406:       assertEquals(43, Node.IS_CONSTANT_NAME);
2407:       assertEquals(2, Node.POST_FLAG);
2408:       assertEquals(40, Node.ORIGINALNAME_PROP);
2409:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2410:       assertEquals(47, Node.IS_DISPATCHER);
2411:       assertEquals(36, Node.QUOTED_PROP);
2412:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2413:       assertEquals(53, Node.INPUT_ID);
2414:       assertEquals(29, Node.JSDOC_INFO_PROP);
2415:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2416:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2417:       assertEquals(12, Node.COLUMN_BITS);
2418:       assertEquals(55, Node.INFERRED_FUNCTION);
2419:       assertEquals(32, Node.INCRDECR_PROP);
2420:       assertEquals(4095, Node.COLUMN_MASK);
2421:       assertEquals(56, Node.CHANGE_TIME);
2422:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2423:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2424:       assertEquals(48, Node.DIRECTIVES);
2425:       assertEquals(49, Node.DIRECT_EVAL);
2426:       assertEquals(37, Node.OPT_ARG_NAME);
2427:       assertEquals(2, Node.POST_FLAG);
2428:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2429:       assertEquals(37, Node.OPT_ARG_NAME);
2430:       assertEquals(56, Node.CHANGE_TIME);
2431:       assertEquals(29, Node.JSDOC_INFO_PROP);
2432:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2433:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2434:       assertEquals(1, Node.DECR_FLAG);
2435:       assertEquals(32, Node.INCRDECR_PROP);
2436:       assertEquals(30, Node.VAR_ARGS_NAME);
2437:       assertEquals(47, Node.IS_DISPATCHER);
2438:       assertEquals(12, Node.COLUMN_BITS);
2439:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2440:       assertEquals(36, Node.QUOTED_PROP);
2441:       assertEquals(57, Node.LAST_PROP);
2442:       assertEquals(52, Node.LENGTH);
2443:       assertEquals(49, Node.DIRECT_EVAL);
2444:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2445:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2446:       assertEquals(53, Node.INPUT_ID);
2447:       assertEquals(55, Node.INFERRED_FUNCTION);
2448:       assertEquals(57, Node.REFLECTED_OBJECT);
2449:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2450:       assertEquals(48, Node.DIRECTIVES);
2451:       assertEquals(8, Node.FLAG_NO_THROWS);
2452:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2453:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2454:       assertEquals(40, Node.ORIGINALNAME_PROP);
2455:       assertEquals(39, Node.EMPTY_BLOCK);
2456:       assertEquals(4095, Node.COLUMN_MASK);
2457:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2458:       assertEquals(43, Node.IS_CONSTANT_NAME);
2459:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2460:       assertEquals(50, Node.FREE_CALL);
2461:       assertEquals(46, Node.IS_NAMESPACE);
2462:       assertEquals(54, Node.SLASH_V);
2463:       assertEquals(12, Node.COLUMN_BITS);
2464:       assertEquals(32, Node.INCRDECR_PROP);
2465:       assertEquals(46, Node.IS_NAMESPACE);
2466:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2467:       assertEquals(56, Node.CHANGE_TIME);
2468:       assertEquals(37, Node.OPT_ARG_NAME);
2469:       assertEquals(49, Node.DIRECT_EVAL);
2470:       assertEquals(54, Node.SLASH_V);
2471:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2472:       assertEquals(50, Node.FREE_CALL);
2473:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2474:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2475:       assertEquals(1, Node.DECR_FLAG);
2476:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2477:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2478:       assertEquals(55, Node.INFERRED_FUNCTION);
2479:       assertEquals(8, Node.FLAG_NO_THROWS);
2480:       assertEquals(4095, Node.COLUMN_MASK);
2481:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2482:       assertEquals(36, Node.QUOTED_PROP);
2483:       assertEquals(48, Node.DIRECTIVES);
2484:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2485:       assertEquals(43, Node.IS_CONSTANT_NAME);
2486:       assertEquals(57, Node.REFLECTED_OBJECT);
2487:       assertEquals(40, Node.ORIGINALNAME_PROP);
2488:       assertEquals(29, Node.JSDOC_INFO_PROP);
2489:       assertEquals(53, Node.INPUT_ID);
2490:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2491:       assertEquals(52, Node.LENGTH);
2492:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2493:       assertEquals(57, Node.LAST_PROP);
2494:       assertEquals(47, Node.IS_DISPATCHER);
2495:       assertEquals(2, Node.POST_FLAG);
2496:       assertEquals(30, Node.VAR_ARGS_NAME);
2497:       assertEquals(39, Node.EMPTY_BLOCK);
2498:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2499:       
2500:       Node node7 = null;
2501:       try {
2502:         node7 = new Node(48, node5, node3, node6, node2);
2503:         fail("Expecting exception: IllegalArgumentException");
2504:       
2505:       } catch(IllegalArgumentException e) {
2506:          //
2507:          // no message in exception (getMessage() returned null)
2508:          //
2509:          verifyException("com.google.common.base.Preconditions", e);
2510:       }
2511:   }
2512: }
RegularFileObject[/tmp/EvoSuite_88_1629222874124/com/google/javascript/rhino/Node_88_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:34 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_88_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_88_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_88_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.JSTypeNative",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.common.collect.AbstractIndexedListIterator",
340:       "com.google.common.collect.Iterators$11",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.TemplatizedType",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.javascript.rhino.JSTypeExpression",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.common.collect.Iterators$12",
366:       "com.google.javascript.rhino.jstype.NamedType"
367:     );
368:   }
369: }

[MASTER] 17:54:34.968 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node[] nodeArray0 = new Node[0];
Node node0 = new Node(330, nodeArray0);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertEquals(0, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertEquals(330, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isVoid());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(0, nodeArray0.length);
assertNotNull(node0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);

Node node1 = new Node(49);
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertTrue(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertEquals(49, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertTrue(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isContinue());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isNot());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertNotNull(node2);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);

Node node3 = node2.useSourceInfoIfMissingFrom(node1);
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertTrue(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertEquals(49, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertTrue(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isContinue());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isNot());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node3.isHook());
assertFalse(node3.isInc());
assertFalse(node3.isSwitch());
assertFalse(node3.isBreak());
assertFalse(node3.isThrow());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isFalse());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isEmpty());
assertFalse(node3.isCast());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.hasChildren());
assertFalse(node3.isGetElem());
assertEquals(40, node3.getType());
assertFalse(node3.isFunction());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isReturn());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isBlock());
assertFalse(node3.isAdd());
assertFalse(node3.isVar());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertTrue(node3.isString());
assertFalse(node3.isNew());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isCatch());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDo());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isOr());
assertFalse(node3.hasOneChild());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isLabelName());
assertFalse(node3.isWith());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFor());
assertFalse(node3.isRegExp());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isParamList());
assertFalse(node3.isCase());
assertFalse(node3.isStringKey());
assertFalse(node3.isScript());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertNotNull(node3);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);

Iterable<Node> iterable0 = node3.children();
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertTrue(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertEquals(49, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertTrue(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isContinue());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isNot());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node3.isHook());
assertFalse(node3.isInc());
assertFalse(node3.isSwitch());
assertFalse(node3.isBreak());
assertFalse(node3.isThrow());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isFalse());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isEmpty());
assertFalse(node3.isCast());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.hasChildren());
assertFalse(node3.isGetElem());
assertEquals(40, node3.getType());
assertFalse(node3.isFunction());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isReturn());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isBlock());
assertFalse(node3.isAdd());
assertFalse(node3.isVar());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertTrue(node3.isString());
assertFalse(node3.isNew());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isCatch());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDo());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isOr());
assertFalse(node3.hasOneChild());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isLabelName());
assertFalse(node3.isWith());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFor());
assertFalse(node3.isRegExp());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isParamList());
assertFalse(node3.isCase());
assertFalse(node3.isStringKey());
assertFalse(node3.isScript());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);

boolean boolean0 = node1.isGetProp();
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertTrue(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertEquals(49, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(boolean0);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotSame(node1, node0);

boolean boolean1 = node3.hasChildren();
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertTrue(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertEquals(49, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertTrue(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isContinue());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isNot());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node3.isHook());
assertFalse(node3.isInc());
assertFalse(node3.isSwitch());
assertFalse(node3.isBreak());
assertFalse(node3.isThrow());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isFalse());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isEmpty());
assertFalse(node3.isCast());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.hasChildren());
assertFalse(node3.isGetElem());
assertEquals(40, node3.getType());
assertFalse(node3.isFunction());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isReturn());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isBlock());
assertFalse(node3.isAdd());
assertFalse(node3.isVar());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertTrue(node3.isString());
assertFalse(node3.isNew());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isCatch());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDo());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isOr());
assertFalse(node3.hasOneChild());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isLabelName());
assertFalse(node3.isWith());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFor());
assertFalse(node3.isRegExp());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isParamList());
assertFalse(node3.isCase());
assertFalse(node3.isStringKey());
assertFalse(node3.isScript());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(boolean1);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);

boolean boolean2 = node2.isSwitch();
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertTrue(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isContinue());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isNot());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(boolean2);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertSame(node2, node3);

Node node4 = node0.cloneNode();
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertEquals(0, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertEquals(330, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isVoid());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node4.hasOneChild());
assertEquals(0, node4.getCharno());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isScript());
assertFalse(node4.isNumber());
assertFalse(node4.isReturn());
assertFalse(node4.isOr());
assertFalse(node4.isGetProp());
assertFalse(node4.isThis());
assertFalse(node4.isWhile());
assertFalse(node4.isWith());
assertFalse(node4.isAssign());
assertFalse(node4.isGetElem());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isBreak());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isComma());
assertFalse(node4.isTypeOf());
assertFalse(node4.isExprResult());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isThrow());
assertFalse(node4.isInc());
assertFalse(node4.isSetterDef());
assertFalse(node4.isString());
assertFalse(node4.isIn());
assertEquals(0, node4.getLineno());
assertFalse(node4.isAnd());
assertFalse(node4.isCast());
assertFalse(node4.isFunction());
assertFalse(node4.isFalse());
assertFalse(node4.isContinue());
assertFalse(node4.isTry());
assertFalse(node4.isDebugger());
assertFalse(node4.isArrayLit());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isGetterDef());
assertFalse(node4.isEmpty());
assertEquals(330, node4.getType());
assertFalse(node4.isNE());
assertFalse(node4.isNull());
assertFalse(node4.isIf());
assertFalse(node4.isName());
assertFalse(node4.isDelProp());
assertFalse(node4.isFor());
assertFalse(node4.isCatch());
assertFalse(node4.isCall());
assertFalse(node4.isRegExp());
assertFalse(node4.isAdd());
assertFalse(node4.isBlock());
assertFalse(node4.isHook());
assertFalse(node4.isNew());
assertFalse(node4.isSwitch());
assertFalse(node4.isVar());
assertFalse(node4.isStringKey());
assertFalse(node4.isDo());
assertEquals(0, node4.getSourcePosition());
assertFalse(node4.isCase());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isLabel());
assertFalse(node4.isParamList());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isLabelName());
assertEquals(0, nodeArray0.length);
assertNotNull(node4);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertNotSame(node0, node1);
assertNotSame(node0, node4);
assertNotSame(node4, node0);
assertNotSame(node4, node1);

boolean boolean3 = node1.isNull();
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertTrue(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertEquals(49, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(boolean3);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotSame(node1, node0);
assertNotSame(node1, node4);

Node node5 = Node.newString("xpBF>P}ZAl``iC)9", 49, 1);
assertFalse(node5.isIf());
assertFalse(node5.isGetterDef());
assertFalse(node5.isDelProp());
assertFalse(node5.isNE());
assertFalse(node5.isFor());
assertFalse(node5.isEmpty());
assertFalse(node5.isVoid());
assertFalse(node5.isArrayLit());
assertFalse(node5.isRegExp());
assertFalse(node5.isSwitch());
assertFalse(node5.isDebugger());
assertFalse(node5.isHook());
assertFalse(node5.isTry());
assertFalse(node5.isCase());
assertEquals(200705, node5.getSourcePosition());
assertFalse(node5.isBreak());
assertFalse(node5.isNull());
assertFalse(node5.isParamList());
assertFalse(node5.isStringKey());
assertFalse(node5.isComma());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isCall());
assertFalse(node5.isName());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isTrue());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isVar());
assertFalse(node5.isAdd());
assertFalse(node5.isDo());
assertFalse(node5.isNew());
assertFalse(node5.hasChildren());
assertFalse(node5.isNumber());
assertFalse(node5.isTypeOf());
assertFalse(node5.isOr());
assertFalse(node5.isAssign());
assertFalse(node5.isLabel());
assertFalse(node5.isDec());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isCast());
assertFalse(node5.isGetElem());
assertFalse(node5.isExprResult());
assertFalse(node5.isLabelName());
assertFalse(node5.isWith());
assertFalse(node5.isScript());
assertEquals(1, node5.getCharno());
assertFalse(node5.isWhile());
assertFalse(node5.isBlock());
assertFalse(node5.isObjectLit());
assertFalse(node5.isNot());
assertFalse(node5.isReturn());
assertFalse(node5.isGetProp());
assertTrue(node5.isString());
assertFalse(node5.hasOneChild());
assertFalse(node5.isThrow());
assertFalse(node5.isFalse());
assertFalse(node5.isThis());
assertFalse(node5.isCatch());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isAnd());
assertFalse(node5.isContinue());
assertEquals(40, node5.getType());
assertFalse(node5.isFunction());
assertFalse(node5.isIn());
assertFalse(node5.isInc());
assertFalse(node5.isSetterDef());
assertEquals(49, node5.getLineno());
assertNotNull(node5);
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node2));
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotSame(node5, node3);
assertNotSame(node5, node2);

Node node6 = new Node(1, node3, node3, node5, 1051, 31);
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isArrayLit());
assertTrue(node1.isThrow());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertEquals(49, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertTrue(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isArrayLit());
assertFalse(node2.isContinue());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.hasOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isNot());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node3.isHook());
assertFalse(node3.isInc());
assertFalse(node3.isSwitch());
assertFalse(node3.isBreak());
assertFalse(node3.isThrow());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isFalse());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isEmpty());
assertFalse(node3.isCast());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.hasChildren());
assertFalse(node3.isGetElem());
assertEquals(40, node3.getType());
assertFalse(node3.isFunction());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isReturn());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isBlock());
assertFalse(node3.isAdd());
assertFalse(node3.isVar());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertTrue(node3.isString());
assertFalse(node3.isNew());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isCatch());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDo());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isOr());
assertFalse(node3.hasOneChild());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertFalse(node3.isLabelName());
assertFalse(node3.isWith());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFor());
assertFalse(node3.isRegExp());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isParamList());
assertFalse(node3.isCase());
assertFalse(node3.isStringKey());
assertFalse(node3.isScript());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node5.isIf());
assertFalse(node5.isGetterDef());
assertFalse(node5.isDelProp());
assertFalse(node5.isNE());
assertFalse(node5.isFor());
assertFalse(node5.isEmpty());
assertFalse(node5.isVoid());
assertFalse(node5.isArrayLit());
assertFalse(node5.isRegExp());
assertFalse(node5.isSwitch());
assertFalse(node5.isDebugger());
assertFalse(node5.isHook());
assertFalse(node5.isTry());
assertFalse(node5.isCase());
assertEquals(200705, node5.getSourcePosition());
assertFalse(node5.isBreak());
assertFalse(node5.isNull());
assertFalse(node5.isParamList());
assertFalse(node5.isStringKey());
assertFalse(node5.isComma());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isCall());
assertFalse(node5.isName());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isTrue());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isVar());
assertFalse(node5.isAdd());
assertFalse(node5.isDo());
assertFalse(node5.isNew());
assertFalse(node5.hasChildren());
assertFalse(node5.isNumber());
assertFalse(node5.isTypeOf());
assertFalse(node5.isOr());
assertFalse(node5.isAssign());
assertFalse(node5.isLabel());
assertFalse(node5.isDec());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isCast());
assertFalse(node5.isGetElem());
assertFalse(node5.isExprResult());
assertFalse(node5.isLabelName());
assertFalse(node5.isWith());
assertFalse(node5.isScript());
assertEquals(1, node5.getCharno());
assertFalse(node5.isWhile());
assertFalse(node5.isBlock());
assertFalse(node5.isObjectLit());
assertFalse(node5.isNot());
assertFalse(node5.isReturn());
assertFalse(node5.isGetProp());
assertTrue(node5.isString());
assertFalse(node5.hasOneChild());
assertFalse(node5.isThrow());
assertFalse(node5.isFalse());
assertFalse(node5.isThis());
assertFalse(node5.isCatch());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isAnd());
assertFalse(node5.isContinue());
assertEquals(40, node5.getType());
assertFalse(node5.isFunction());
assertFalse(node5.isIn());
assertFalse(node5.isInc());
assertFalse(node5.isSetterDef());
assertEquals(49, node5.getLineno());
assertTrue(node6.hasChildren());
assertFalse(node6.isIn());
assertFalse(node6.isNE());
assertFalse(node6.isCase());
assertFalse(node6.isString());
assertFalse(node6.isGetterDef());
assertFalse(node6.isInc());
assertFalse(node6.isEmpty());
assertFalse(node6.isFunction());
assertFalse(node6.isSwitch());
assertFalse(node6.isDebugger());
assertFalse(node6.isThrow());
assertFalse(node6.isFalse());
assertFalse(node6.isArrayLit());
assertFalse(node6.isComma());
assertFalse(node6.isAnd());
assertFalse(node6.isNull());
assertFalse(node6.isNot());
assertFalse(node6.isDefaultCase());
assertFalse(node6.isObjectLit());
assertFalse(node6.isGetProp());
assertFalse(node6.isVoid());
assertEquals(31, node6.getCharno());
assertFalse(node6.isTrue());
assertFalse(node6.isAssign());
assertFalse(node6.isBreak());
assertTrue(node6.hasMoreThanOneChild());
assertFalse(node6.isDec());
assertFalse(node6.isName());
assertFalse(node6.isTypeOf());
assertFalse(node6.isDelProp());
assertFalse(node6.isGetElem());
assertFalse(node6.isCall());
assertFalse(node6.isExprResult());
assertFalse(node6.isOr());
assertFalse(node6.isReturn());
assertFalse(node6.isAssignAdd());
assertFalse(node6.isLabel());
assertFalse(node6.isDo());
assertFalse(node6.isWhile());
assertFalse(node6.isNumber());
assertFalse(node6.isAdd());
assertFalse(node6.isNew());
assertFalse(node6.isStringKey());
assertFalse(node6.isVar());
assertFalse(node6.isLabelName());
assertFalse(node6.isCast());
assertFalse(node6.isContinue());
assertEquals(1, node6.getType());
assertEquals(2, node6.getChildCount());
assertFalse(node6.isThis());
assertEquals(1051, node6.getLineno());
assertFalse(node6.isParamList());
assertFalse(node6.isSetterDef());
assertFalse(node6.isScript());
assertFalse(node6.hasOneChild());
assertFalse(node6.isTry());
assertFalse(node6.isHook());
assertFalse(node6.isBlock());
assertFalse(node6.isFor());
assertFalse(node6.isWith());
assertFalse(node6.isIf());
assertFalse(node6.isRegExp());
assertFalse(node6.isCatch());
assertEquals(4304927, node6.getSourcePosition());
assertFalse(node6.isInstanceOf());
assertNotNull(node6);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node5));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node4));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node2));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node5));
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Node node7 = new Node(48, node5, node3, node6, node2);

[MASTER] 17:54:36.766 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_96_1629222876429/com/google/javascript/rhino/Node_96_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_96_1629222876429/com/google/javascript/rhino/Node_96_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:36.766 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:36.767 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:36.773 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 834
[MASTER] 17:54:36.775 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_96_1629222876429/com/google/javascript/rhino/Node_96_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:36 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_96_tmp__ESTest extends Node_96_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = new Node(23, 48, 2810);
24:       assertFalse(node0.isSetterDef());
25:       assertFalse(node0.isParamList());
26:       assertFalse(node0.isNull());
27:       assertEquals(23, node0.getType());
28:       assertEquals(0, node0.getChildCount());
29:       assertFalse(node0.isCall());
30:       assertFalse(node0.isCatch());
31:       assertFalse(node0.isName());
32:       assertFalse(node0.isStringKey());
33:       assertFalse(node0.isWhile());
34:       assertFalse(node0.isBlock());
35:       assertFalse(node0.isDebugger());
36:       assertFalse(node0.hasMoreThanOneChild());
37:       assertFalse(node0.isRegExp());
38:       assertEquals(199418, node0.getSourcePosition());
39:       assertFalse(node0.isReturn());
40:       assertFalse(node0.isTry());
41:       assertFalse(node0.isNumber());
42:       assertFalse(node0.isDec());
43:       assertFalse(node0.hasChildren());
44:       assertFalse(node0.isEmpty());
45:       assertFalse(node0.isLabel());
46:       assertFalse(node0.isOr());
47:       assertFalse(node0.isAssign());
48:       assertFalse(node0.isTypeOf());
49:       assertFalse(node0.isGetterDef());
50:       assertFalse(node0.isArrayLit());
51:       assertFalse(node0.isGetElem());
52:       assertFalse(node0.isDelProp());
53:       assertFalse(node0.isVoid());
54:       assertFalse(node0.isLabelName());
55:       assertFalse(node0.isDefaultCase());
56:       assertFalse(node0.isTrue());
57:       assertEquals(2810, node0.getCharno());
58:       assertFalse(node0.isAdd());
59:       assertFalse(node0.isVar());
60:       assertFalse(node0.isNew());
61:       assertFalse(node0.isAssignAdd());
62:       assertFalse(node0.isDo());
63:       assertFalse(node0.isBreak());
64:       assertFalse(node0.isThis());
65:       assertFalse(node0.isFalse());
66:       assertFalse(node0.isComma());
67:       assertFalse(node0.isInstanceOf());
68:       assertFalse(node0.isAnd());
69:       assertFalse(node0.isSwitch());
70:       assertFalse(node0.isString());
71:       assertFalse(node0.isExprResult());
72:       assertFalse(node0.isScript());
73:       assertFalse(node0.isWith());
74:       assertFalse(node0.isObjectLit());
75:       assertFalse(node0.isNot());
76:       assertFalse(node0.hasOneChild());
77:       assertFalse(node0.isHook());
78:       assertFalse(node0.isCase());
79:       assertFalse(node0.isGetProp());
80:       assertEquals(48, node0.getLineno());
81:       assertFalse(node0.isIf());
82:       assertFalse(node0.isNE());
83:       assertFalse(node0.isFor());
84:       assertFalse(node0.isCast());
85:       assertFalse(node0.isInc());
86:       assertFalse(node0.isContinue());
87:       assertFalse(node0.isFunction());
88:       assertFalse(node0.isIn());
89:       assertFalse(node0.isThrow());
90:       assertNotNull(node0);
91:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
92:       assertEquals(8, Node.FLAG_NO_THROWS);
93:       assertEquals(39, Node.EMPTY_BLOCK);
94:       assertEquals(48, Node.DIRECTIVES);
95:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
96:       assertEquals(40, Node.ORIGINALNAME_PROP);
97:       assertEquals(4095, Node.COLUMN_MASK);
98:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
99:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
100:       assertEquals(57, Node.LAST_PROP);
101:       assertEquals(49, Node.DIRECT_EVAL);
102:       assertEquals(15, Node.NO_SIDE_EFFECTS);
103:       assertEquals(53, Node.INPUT_ID);
104:       assertEquals(55, Node.INFERRED_FUNCTION);
105:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
106:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
107:       assertEquals(52, Node.LENGTH);
108:       assertEquals(36, Node.QUOTED_PROP);
109:       assertEquals(57, Node.REFLECTED_OBJECT);
110:       assertEquals(2, Node.POST_FLAG);
111:       assertEquals(56, Node.CHANGE_TIME);
112:       assertEquals(29, Node.JSDOC_INFO_PROP);
113:       assertEquals(32, Node.INCRDECR_PROP);
114:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
115:       assertEquals(37, Node.OPT_ARG_NAME);
116:       assertEquals(12, Node.COLUMN_BITS);
117:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
118:       assertEquals(30, Node.VAR_ARGS_NAME);
119:       assertEquals(47, Node.IS_DISPATCHER);
120:       assertEquals(54, Node.SLASH_V);
121:       assertEquals(43, Node.IS_CONSTANT_NAME);
122:       assertEquals(1, Node.DECR_FLAG);
123:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
124:       assertEquals(46, Node.IS_NAMESPACE);
125:       assertEquals(50, Node.FREE_CALL);
126:       assertEquals(51, Node.STATIC_SOURCE_FILE);
127:       
128:       boolean boolean0 = node0.isNE();
129:       assertFalse(node0.isSetterDef());
130:       assertFalse(node0.isParamList());
131:       assertFalse(node0.isNull());
132:       assertEquals(23, node0.getType());
133:       assertEquals(0, node0.getChildCount());
134:       assertFalse(node0.isCall());
135:       assertFalse(node0.isCatch());
136:       assertFalse(node0.isName());
137:       assertFalse(node0.isStringKey());
138:       assertFalse(node0.isWhile());
139:       assertFalse(node0.isBlock());
140:       assertFalse(node0.isDebugger());
141:       assertFalse(node0.hasMoreThanOneChild());
142:       assertFalse(node0.isRegExp());
143:       assertEquals(199418, node0.getSourcePosition());
144:       assertFalse(node0.isReturn());
145:       assertFalse(node0.isTry());
146:       assertFalse(node0.isNumber());
147:       assertFalse(node0.isDec());
148:       assertFalse(node0.hasChildren());
149:       assertFalse(node0.isEmpty());
150:       assertFalse(node0.isLabel());
151:       assertFalse(node0.isOr());
152:       assertFalse(node0.isAssign());
153:       assertFalse(node0.isTypeOf());
154:       assertFalse(node0.isGetterDef());
155:       assertFalse(node0.isArrayLit());
156:       assertFalse(node0.isGetElem());
157:       assertFalse(node0.isDelProp());
158:       assertFalse(node0.isVoid());
159:       assertFalse(node0.isLabelName());
160:       assertFalse(node0.isDefaultCase());
161:       assertFalse(node0.isTrue());
162:       assertEquals(2810, node0.getCharno());
163:       assertFalse(node0.isAdd());
164:       assertFalse(node0.isVar());
165:       assertFalse(node0.isNew());
166:       assertFalse(node0.isAssignAdd());
167:       assertFalse(node0.isDo());
168:       assertFalse(node0.isBreak());
169:       assertFalse(node0.isThis());
170:       assertFalse(node0.isFalse());
171:       assertFalse(node0.isComma());
172:       assertFalse(node0.isInstanceOf());
173:       assertFalse(node0.isAnd());
174:       assertFalse(node0.isSwitch());
175:       assertFalse(node0.isString());
176:       assertFalse(node0.isExprResult());
177:       assertFalse(node0.isScript());
178:       assertFalse(node0.isWith());
179:       assertFalse(node0.isObjectLit());
180:       assertFalse(node0.isNot());
181:       assertFalse(node0.hasOneChild());
182:       assertFalse(node0.isHook());
183:       assertFalse(node0.isCase());
184:       assertFalse(node0.isGetProp());
185:       assertEquals(48, node0.getLineno());
186:       assertFalse(node0.isIf());
187:       assertFalse(node0.isNE());
188:       assertFalse(node0.isFor());
189:       assertFalse(node0.isCast());
190:       assertFalse(node0.isInc());
191:       assertFalse(node0.isContinue());
192:       assertFalse(node0.isFunction());
193:       assertFalse(node0.isIn());
194:       assertFalse(node0.isThrow());
195:       assertFalse(boolean0);
196:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
197:       assertEquals(8, Node.FLAG_NO_THROWS);
198:       assertEquals(39, Node.EMPTY_BLOCK);
199:       assertEquals(48, Node.DIRECTIVES);
200:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
201:       assertEquals(40, Node.ORIGINALNAME_PROP);
202:       assertEquals(4095, Node.COLUMN_MASK);
203:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
204:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
205:       assertEquals(57, Node.LAST_PROP);
206:       assertEquals(49, Node.DIRECT_EVAL);
207:       assertEquals(15, Node.NO_SIDE_EFFECTS);
208:       assertEquals(53, Node.INPUT_ID);
209:       assertEquals(55, Node.INFERRED_FUNCTION);
210:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
211:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
212:       assertEquals(52, Node.LENGTH);
213:       assertEquals(36, Node.QUOTED_PROP);
214:       assertEquals(57, Node.REFLECTED_OBJECT);
215:       assertEquals(2, Node.POST_FLAG);
216:       assertEquals(56, Node.CHANGE_TIME);
217:       assertEquals(29, Node.JSDOC_INFO_PROP);
218:       assertEquals(32, Node.INCRDECR_PROP);
219:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
220:       assertEquals(37, Node.OPT_ARG_NAME);
221:       assertEquals(12, Node.COLUMN_BITS);
222:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
223:       assertEquals(30, Node.VAR_ARGS_NAME);
224:       assertEquals(47, Node.IS_DISPATCHER);
225:       assertEquals(54, Node.SLASH_V);
226:       assertEquals(43, Node.IS_CONSTANT_NAME);
227:       assertEquals(1, Node.DECR_FLAG);
228:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
229:       assertEquals(46, Node.IS_NAMESPACE);
230:       assertEquals(50, Node.FREE_CALL);
231:       assertEquals(51, Node.STATIC_SOURCE_FILE);
232:       
233:       boolean boolean1 = node0.isFromExterns();
234:       assertFalse(node0.isSetterDef());
235:       assertFalse(node0.isParamList());
236:       assertFalse(node0.isNull());
237:       assertEquals(23, node0.getType());
238:       assertEquals(0, node0.getChildCount());
239:       assertFalse(node0.isCall());
240:       assertFalse(node0.isCatch());
241:       assertFalse(node0.isName());
242:       assertFalse(node0.isStringKey());
243:       assertFalse(node0.isWhile());
244:       assertFalse(node0.isBlock());
245:       assertFalse(node0.isDebugger());
246:       assertFalse(node0.hasMoreThanOneChild());
247:       assertFalse(node0.isRegExp());
248:       assertEquals(199418, node0.getSourcePosition());
249:       assertFalse(node0.isReturn());
250:       assertFalse(node0.isTry());
251:       assertFalse(node0.isNumber());
252:       assertFalse(node0.isDec());
253:       assertFalse(node0.hasChildren());
254:       assertFalse(node0.isEmpty());
255:       assertFalse(node0.isLabel());
256:       assertFalse(node0.isOr());
257:       assertFalse(node0.isAssign());
258:       assertFalse(node0.isTypeOf());
259:       assertFalse(node0.isGetterDef());
260:       assertFalse(node0.isArrayLit());
261:       assertFalse(node0.isGetElem());
262:       assertFalse(node0.isDelProp());
263:       assertFalse(node0.isVoid());
264:       assertFalse(node0.isLabelName());
265:       assertFalse(node0.isDefaultCase());
266:       assertFalse(node0.isTrue());
267:       assertEquals(2810, node0.getCharno());
268:       assertFalse(node0.isAdd());
269:       assertFalse(node0.isVar());
270:       assertFalse(node0.isNew());
271:       assertFalse(node0.isAssignAdd());
272:       assertFalse(node0.isDo());
273:       assertFalse(node0.isBreak());
274:       assertFalse(node0.isThis());
275:       assertFalse(node0.isFalse());
276:       assertFalse(node0.isComma());
277:       assertFalse(node0.isInstanceOf());
278:       assertFalse(node0.isAnd());
279:       assertFalse(node0.isSwitch());
280:       assertFalse(node0.isString());
281:       assertFalse(node0.isExprResult());
282:       assertFalse(node0.isScript());
283:       assertFalse(node0.isWith());
284:       assertFalse(node0.isObjectLit());
285:       assertFalse(node0.isNot());
286:       assertFalse(node0.hasOneChild());
287:       assertFalse(node0.isHook());
288:       assertFalse(node0.isCase());
289:       assertFalse(node0.isGetProp());
290:       assertEquals(48, node0.getLineno());
291:       assertFalse(node0.isIf());
292:       assertFalse(node0.isNE());
293:       assertFalse(node0.isFor());
294:       assertFalse(node0.isCast());
295:       assertFalse(node0.isInc());
296:       assertFalse(node0.isContinue());
297:       assertFalse(node0.isFunction());
298:       assertFalse(node0.isIn());
299:       assertFalse(node0.isThrow());
300:       assertFalse(boolean1);
301:       assertTrue(boolean1 == boolean0);
302:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
303:       assertEquals(8, Node.FLAG_NO_THROWS);
304:       assertEquals(39, Node.EMPTY_BLOCK);
305:       assertEquals(48, Node.DIRECTIVES);
306:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
307:       assertEquals(40, Node.ORIGINALNAME_PROP);
308:       assertEquals(4095, Node.COLUMN_MASK);
309:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
310:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
311:       assertEquals(57, Node.LAST_PROP);
312:       assertEquals(49, Node.DIRECT_EVAL);
313:       assertEquals(15, Node.NO_SIDE_EFFECTS);
314:       assertEquals(53, Node.INPUT_ID);
315:       assertEquals(55, Node.INFERRED_FUNCTION);
316:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
317:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
318:       assertEquals(52, Node.LENGTH);
319:       assertEquals(36, Node.QUOTED_PROP);
320:       assertEquals(57, Node.REFLECTED_OBJECT);
321:       assertEquals(2, Node.POST_FLAG);
322:       assertEquals(56, Node.CHANGE_TIME);
323:       assertEquals(29, Node.JSDOC_INFO_PROP);
324:       assertEquals(32, Node.INCRDECR_PROP);
325:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
326:       assertEquals(37, Node.OPT_ARG_NAME);
327:       assertEquals(12, Node.COLUMN_BITS);
328:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
329:       assertEquals(30, Node.VAR_ARGS_NAME);
330:       assertEquals(47, Node.IS_DISPATCHER);
331:       assertEquals(54, Node.SLASH_V);
332:       assertEquals(43, Node.IS_CONSTANT_NAME);
333:       assertEquals(1, Node.DECR_FLAG);
334:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
335:       assertEquals(46, Node.IS_NAMESPACE);
336:       assertEquals(50, Node.FREE_CALL);
337:       assertEquals(51, Node.STATIC_SOURCE_FILE);
338:       
339:       node0.putBooleanProp((-410), true);
340:       assertFalse(node0.isSetterDef());
341:       assertFalse(node0.isParamList());
342:       assertFalse(node0.isNull());
343:       assertEquals(23, node0.getType());
344:       assertEquals(0, node0.getChildCount());
345:       assertFalse(node0.isCall());
346:       assertFalse(node0.isCatch());
347:       assertFalse(node0.isName());
348:       assertFalse(node0.isStringKey());
349:       assertFalse(node0.isWhile());
350:       assertFalse(node0.isBlock());
351:       assertFalse(node0.isDebugger());
352:       assertFalse(node0.hasMoreThanOneChild());
353:       assertFalse(node0.isRegExp());
354:       assertEquals(199418, node0.getSourcePosition());
355:       assertFalse(node0.isReturn());
356:       assertFalse(node0.isTry());
357:       assertFalse(node0.isNumber());
358:       assertFalse(node0.isDec());
359:       assertFalse(node0.hasChildren());
360:       assertFalse(node0.isEmpty());
361:       assertFalse(node0.isLabel());
362:       assertFalse(node0.isOr());
363:       assertFalse(node0.isAssign());
364:       assertFalse(node0.isTypeOf());
365:       assertFalse(node0.isGetterDef());
366:       assertFalse(node0.isArrayLit());
367:       assertFalse(node0.isGetElem());
368:       assertFalse(node0.isDelProp());
369:       assertFalse(node0.isVoid());
370:       assertFalse(node0.isLabelName());
371:       assertFalse(node0.isDefaultCase());
372:       assertFalse(node0.isTrue());
373:       assertEquals(2810, node0.getCharno());
374:       assertFalse(node0.isAdd());
375:       assertFalse(node0.isVar());
376:       assertFalse(node0.isNew());
377:       assertFalse(node0.isAssignAdd());
378:       assertFalse(node0.isDo());
379:       assertFalse(node0.isBreak());
380:       assertFalse(node0.isThis());
381:       assertFalse(node0.isFalse());
382:       assertFalse(node0.isComma());
383:       assertFalse(node0.isInstanceOf());
384:       assertFalse(node0.isAnd());
385:       assertFalse(node0.isSwitch());
386:       assertFalse(node0.isString());
387:       assertFalse(node0.isExprResult());
388:       assertFalse(node0.isScript());
389:       assertFalse(node0.isWith());
390:       assertFalse(node0.isObjectLit());
391:       assertFalse(node0.isNot());
392:       assertFalse(node0.hasOneChild());
393:       assertFalse(node0.isHook());
394:       assertFalse(node0.isCase());
395:       assertFalse(node0.isGetProp());
396:       assertEquals(48, node0.getLineno());
397:       assertFalse(node0.isIf());
398:       assertFalse(node0.isNE());
399:       assertFalse(node0.isFor());
400:       assertFalse(node0.isCast());
401:       assertFalse(node0.isInc());
402:       assertFalse(node0.isContinue());
403:       assertFalse(node0.isFunction());
404:       assertFalse(node0.isIn());
405:       assertFalse(node0.isThrow());
406:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
407:       assertEquals(8, Node.FLAG_NO_THROWS);
408:       assertEquals(39, Node.EMPTY_BLOCK);
409:       assertEquals(48, Node.DIRECTIVES);
410:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
411:       assertEquals(40, Node.ORIGINALNAME_PROP);
412:       assertEquals(4095, Node.COLUMN_MASK);
413:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
414:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
415:       assertEquals(57, Node.LAST_PROP);
416:       assertEquals(49, Node.DIRECT_EVAL);
417:       assertEquals(15, Node.NO_SIDE_EFFECTS);
418:       assertEquals(53, Node.INPUT_ID);
419:       assertEquals(55, Node.INFERRED_FUNCTION);
420:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
421:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
422:       assertEquals(52, Node.LENGTH);
423:       assertEquals(36, Node.QUOTED_PROP);
424:       assertEquals(57, Node.REFLECTED_OBJECT);
425:       assertEquals(2, Node.POST_FLAG);
426:       assertEquals(56, Node.CHANGE_TIME);
427:       assertEquals(29, Node.JSDOC_INFO_PROP);
428:       assertEquals(32, Node.INCRDECR_PROP);
429:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
430:       assertEquals(37, Node.OPT_ARG_NAME);
431:       assertEquals(12, Node.COLUMN_BITS);
432:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
433:       assertEquals(30, Node.VAR_ARGS_NAME);
434:       assertEquals(47, Node.IS_DISPATCHER);
435:       assertEquals(54, Node.SLASH_V);
436:       assertEquals(43, Node.IS_CONSTANT_NAME);
437:       assertEquals(1, Node.DECR_FLAG);
438:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
439:       assertEquals(46, Node.IS_NAMESPACE);
440:       assertEquals(50, Node.FREE_CALL);
441:       assertEquals(51, Node.STATIC_SOURCE_FILE);
442:       
443:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
444:       assertNotNull(simpleErrorReporter0);
445:       
446:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
447:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
448:       assertNotNull(jSTypeRegistry0);
449:       
450:       Node node1 = new Node(38);
451:       assertFalse(node1.isSwitch());
452:       assertFalse(node1.isInc());
453:       assertFalse(node1.isString());
454:       assertFalse(node1.isCase());
455:       assertFalse(node1.isFalse());
456:       assertFalse(node1.isThrow());
457:       assertFalse(node1.isHook());
458:       assertFalse(node1.isThis());
459:       assertFalse(node1.isGetProp());
460:       assertFalse(node1.isObjectLit());
461:       assertFalse(node1.isAnd());
462:       assertFalse(node1.isNot());
463:       assertFalse(node1.isGetterDef());
464:       assertFalse(node1.isDebugger());
465:       assertEquals((-1), node1.getCharno());
466:       assertFalse(node1.isExprResult());
467:       assertFalse(node1.isTrue());
468:       assertFalse(node1.isDefaultCase());
469:       assertFalse(node1.isVoid());
470:       assertFalse(node1.isArrayLit());
471:       assertFalse(node1.isAssign());
472:       assertFalse(node1.isDec());
473:       assertFalse(node1.hasChildren());
474:       assertEquals(0, node1.getChildCount());
475:       assertEquals(38, node1.getType());
476:       assertFalse(node1.isComma());
477:       assertFalse(node1.isTypeOf());
478:       assertFalse(node1.isNull());
479:       assertFalse(node1.isEmpty());
480:       assertFalse(node1.isAssignAdd());
481:       assertFalse(node1.isGetElem());
482:       assertFalse(node1.isDelProp());
483:       assertFalse(node1.isBreak());
484:       assertFalse(node1.isOr());
485:       assertFalse(node1.isWhile());
486:       assertFalse(node1.isDo());
487:       assertFalse(node1.isAdd());
488:       assertFalse(node1.isNew());
489:       assertFalse(node1.hasMoreThanOneChild());
490:       assertFalse(node1.isVar());
491:       assertFalse(node1.isCall());
492:       assertFalse(node1.isContinue());
493:       assertFalse(node1.isLabel());
494:       assertFalse(node1.isReturn());
495:       assertFalse(node1.isBlock());
496:       assertFalse(node1.isNumber());
497:       assertFalse(node1.isParamList());
498:       assertFalse(node1.isLabelName());
499:       assertFalse(node1.isStringKey());
500:       assertEquals((-1), node1.getSourcePosition());
501:       assertFalse(node1.isFunction());
502:       assertFalse(node1.isRegExp());
503:       assertFalse(node1.isScript());
504:       assertFalse(node1.isTry());
505:       assertFalse(node1.hasOneChild());
506:       assertFalse(node1.isCatch());
507:       assertFalse(node1.isCast());
508:       assertFalse(node1.isInstanceOf());
509:       assertFalse(node1.isWith());
510:       assertFalse(node1.isFor());
511:       assertFalse(node1.isSetterDef());
512:       assertFalse(node1.isNE());
513:       assertFalse(node1.isIf());
514:       assertEquals((-1), node1.getLineno());
515:       assertFalse(node1.isIn());
516:       assertTrue(node1.isName());
517:       assertNotNull(node1);
518:       assertFalse(node1.equals((Object)node0));
519:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
520:       assertEquals(52, Node.LENGTH);
521:       assertEquals(57, Node.LAST_PROP);
522:       assertEquals(54, Node.SLASH_V);
523:       assertEquals(57, Node.REFLECTED_OBJECT);
524:       assertEquals(1, Node.DECR_FLAG);
525:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
526:       assertEquals(50, Node.FREE_CALL);
527:       assertEquals(15, Node.NO_SIDE_EFFECTS);
528:       assertEquals(39, Node.EMPTY_BLOCK);
529:       assertEquals(48, Node.DIRECTIVES);
530:       assertEquals(37, Node.OPT_ARG_NAME);
531:       assertEquals(8, Node.FLAG_NO_THROWS);
532:       assertEquals(32, Node.INCRDECR_PROP);
533:       assertEquals(56, Node.CHANGE_TIME);
534:       assertEquals(12, Node.COLUMN_BITS);
535:       assertEquals(49, Node.DIRECT_EVAL);
536:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
537:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
538:       assertEquals(4095, Node.COLUMN_MASK);
539:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
540:       assertEquals(43, Node.IS_CONSTANT_NAME);
541:       assertEquals(36, Node.QUOTED_PROP);
542:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
543:       assertEquals(55, Node.INFERRED_FUNCTION);
544:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
545:       assertEquals(29, Node.JSDOC_INFO_PROP);
546:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
547:       assertEquals(53, Node.INPUT_ID);
548:       assertEquals(2, Node.POST_FLAG);
549:       assertEquals(47, Node.IS_DISPATCHER);
550:       assertEquals(51, Node.STATIC_SOURCE_FILE);
551:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
552:       assertEquals(46, Node.IS_NAMESPACE);
553:       assertEquals(30, Node.VAR_ARGS_NAME);
554:       assertEquals(40, Node.ORIGINALNAME_PROP);
555:       
556:       Node node2 = new Node(42, node1);
557:       assertFalse(node1.isSwitch());
558:       assertFalse(node1.isInc());
559:       assertFalse(node1.isString());
560:       assertFalse(node1.isCase());
561:       assertFalse(node1.isFalse());
562:       assertFalse(node1.isThrow());
563:       assertFalse(node1.isHook());
564:       assertFalse(node1.isThis());
565:       assertFalse(node1.isGetProp());
566:       assertFalse(node1.isObjectLit());
567:       assertFalse(node1.isAnd());
568:       assertFalse(node1.isNot());
569:       assertFalse(node1.isGetterDef());
570:       assertFalse(node1.isDebugger());
571:       assertEquals((-1), node1.getCharno());
572:       assertFalse(node1.isExprResult());
573:       assertFalse(node1.isTrue());
574:       assertFalse(node1.isDefaultCase());
575:       assertFalse(node1.isVoid());
576:       assertFalse(node1.isArrayLit());
577:       assertFalse(node1.isAssign());
578:       assertFalse(node1.isDec());
579:       assertFalse(node1.hasChildren());
580:       assertEquals(0, node1.getChildCount());
581:       assertEquals(38, node1.getType());
582:       assertFalse(node1.isComma());
583:       assertFalse(node1.isTypeOf());
584:       assertFalse(node1.isNull());
585:       assertFalse(node1.isEmpty());
586:       assertFalse(node1.isAssignAdd());
587:       assertFalse(node1.isGetElem());
588:       assertFalse(node1.isDelProp());
589:       assertFalse(node1.isBreak());
590:       assertFalse(node1.isOr());
591:       assertFalse(node1.isWhile());
592:       assertFalse(node1.isDo());
593:       assertFalse(node1.isAdd());
594:       assertFalse(node1.isNew());
595:       assertFalse(node1.hasMoreThanOneChild());
596:       assertFalse(node1.isVar());
597:       assertFalse(node1.isCall());
598:       assertFalse(node1.isContinue());
599:       assertFalse(node1.isLabel());
600:       assertFalse(node1.isReturn());
601:       assertFalse(node1.isBlock());
602:       assertFalse(node1.isNumber());
603:       assertFalse(node1.isParamList());
604:       assertFalse(node1.isLabelName());
605:       assertFalse(node1.isStringKey());
606:       assertEquals((-1), node1.getSourcePosition());
607:       assertFalse(node1.isFunction());
608:       assertFalse(node1.isRegExp());
609:       assertFalse(node1.isScript());
610:       assertFalse(node1.isTry());
611:       assertFalse(node1.hasOneChild());
612:       assertFalse(node1.isCatch());
613:       assertFalse(node1.isCast());
614:       assertFalse(node1.isInstanceOf());
615:       assertFalse(node1.isWith());
616:       assertFalse(node1.isFor());
617:       assertFalse(node1.isSetterDef());
618:       assertFalse(node1.isNE());
619:       assertFalse(node1.isIf());
620:       assertEquals((-1), node1.getLineno());
621:       assertFalse(node1.isIn());
622:       assertTrue(node1.isName());
623:       assertFalse(node2.isRegExp());
624:       assertFalse(node2.isVoid());
625:       assertFalse(node2.isDefaultCase());
626:       assertFalse(node2.isFunction());
627:       assertFalse(node2.isTry());
628:       assertFalse(node2.isArrayLit());
629:       assertFalse(node2.isDebugger());
630:       assertFalse(node2.isTrue());
631:       assertFalse(node2.isParamList());
632:       assertFalse(node2.isEmpty());
633:       assertFalse(node2.isSetterDef());
634:       assertFalse(node2.isVar());
635:       assertFalse(node2.isSwitch());
636:       assertFalse(node2.isCase());
637:       assertFalse(node2.isInc());
638:       assertFalse(node2.isIn());
639:       assertFalse(node2.isStringKey());
640:       assertEquals((-1), node2.getCharno());
641:       assertFalse(node2.isNE());
642:       assertFalse(node2.isIf());
643:       assertFalse(node2.isGetterDef());
644:       assertFalse(node2.isNumber());
645:       assertTrue(node2.hasChildren());
646:       assertEquals((-1), node2.getLineno());
647:       assertFalse(node2.isCatch());
648:       assertFalse(node2.isInstanceOf());
649:       assertFalse(node2.hasMoreThanOneChild());
650:       assertFalse(node2.isFor());
651:       assertEquals(1, node2.getChildCount());
652:       assertFalse(node2.isBlock());
653:       assertFalse(node2.isHook());
654:       assertFalse(node2.isScript());
655:       assertFalse(node2.isWith());
656:       assertFalse(node2.isExprResult());
657:       assertFalse(node2.isAnd());
658:       assertFalse(node2.isObjectLit());
659:       assertFalse(node2.isNot());
660:       assertFalse(node2.isLabelName());
661:       assertFalse(node2.isCast());
662:       assertEquals(42, node2.getType());
663:       assertFalse(node2.isContinue());
664:       assertFalse(node2.isFalse());
665:       assertFalse(node2.isLabel());
666:       assertFalse(node2.isAssignAdd());
667:       assertFalse(node2.isThrow());
668:       assertFalse(node2.isDo());
669:       assertFalse(node2.isAdd());
670:       assertFalse(node2.isString());
671:       assertFalse(node2.isNew());
672:       assertFalse(node2.isName());
673:       assertFalse(node2.isOr());
674:       assertFalse(node2.isNull());
675:       assertFalse(node2.isTypeOf());
676:       assertFalse(node2.isDec());
677:       assertEquals((-1), node2.getSourcePosition());
678:       assertFalse(node2.isComma());
679:       assertFalse(node2.isDelProp());
680:       assertFalse(node2.isBreak());
681:       assertFalse(node2.isGetProp());
682:       assertFalse(node2.isCall());
683:       assertFalse(node2.isGetElem());
684:       assertTrue(node2.isThis());
685:       assertFalse(node2.isAssign());
686:       assertFalse(node2.isWhile());
687:       assertTrue(node2.hasOneChild());
688:       assertFalse(node2.isReturn());
689:       assertNotNull(node2);
690:       assertFalse(node1.equals((Object)node0));
691:       assertFalse(node2.equals((Object)node0));
692:       assertFalse(node2.equals((Object)node1));
693:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
694:       assertEquals(52, Node.LENGTH);
695:       assertEquals(57, Node.LAST_PROP);
696:       assertEquals(54, Node.SLASH_V);
697:       assertEquals(57, Node.REFLECTED_OBJECT);
698:       assertEquals(1, Node.DECR_FLAG);
699:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
700:       assertEquals(50, Node.FREE_CALL);
701:       assertEquals(15, Node.NO_SIDE_EFFECTS);
702:       assertEquals(39, Node.EMPTY_BLOCK);
703:       assertEquals(48, Node.DIRECTIVES);
704:       assertEquals(37, Node.OPT_ARG_NAME);
705:       assertEquals(8, Node.FLAG_NO_THROWS);
706:       assertEquals(32, Node.INCRDECR_PROP);
707:       assertEquals(56, Node.CHANGE_TIME);
708:       assertEquals(12, Node.COLUMN_BITS);
709:       assertEquals(49, Node.DIRECT_EVAL);
710:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
711:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
712:       assertEquals(4095, Node.COLUMN_MASK);
713:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
714:       assertEquals(43, Node.IS_CONSTANT_NAME);
715:       assertEquals(36, Node.QUOTED_PROP);
716:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
717:       assertEquals(55, Node.INFERRED_FUNCTION);
718:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
719:       assertEquals(29, Node.JSDOC_INFO_PROP);
720:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
721:       assertEquals(53, Node.INPUT_ID);
722:       assertEquals(2, Node.POST_FLAG);
723:       assertEquals(47, Node.IS_DISPATCHER);
724:       assertEquals(51, Node.STATIC_SOURCE_FILE);
725:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
726:       assertEquals(46, Node.IS_NAMESPACE);
727:       assertEquals(30, Node.VAR_ARGS_NAME);
728:       assertEquals(40, Node.ORIGINALNAME_PROP);
729:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
730:       assertEquals(53, Node.INPUT_ID);
731:       assertEquals(36, Node.QUOTED_PROP);
732:       assertEquals(43, Node.IS_CONSTANT_NAME);
733:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
734:       assertEquals(4095, Node.COLUMN_MASK);
735:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
736:       assertEquals(32, Node.INCRDECR_PROP);
737:       assertEquals(46, Node.IS_NAMESPACE);
738:       assertEquals(12, Node.COLUMN_BITS);
739:       assertEquals(50, Node.FREE_CALL);
740:       assertEquals(51, Node.STATIC_SOURCE_FILE);
741:       assertEquals(1, Node.DECR_FLAG);
742:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
743:       assertEquals(54, Node.SLASH_V);
744:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
745:       assertEquals(57, Node.LAST_PROP);
746:       assertEquals(57, Node.REFLECTED_OBJECT);
747:       assertEquals(40, Node.ORIGINALNAME_PROP);
748:       assertEquals(30, Node.VAR_ARGS_NAME);
749:       assertEquals(49, Node.DIRECT_EVAL);
750:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
751:       assertEquals(48, Node.DIRECTIVES);
752:       assertEquals(8, Node.FLAG_NO_THROWS);
753:       assertEquals(39, Node.EMPTY_BLOCK);
754:       assertEquals(2, Node.POST_FLAG);
755:       assertEquals(37, Node.OPT_ARG_NAME);
756:       assertEquals(47, Node.IS_DISPATCHER);
757:       assertEquals(56, Node.CHANGE_TIME);
758:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
759:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
760:       assertEquals(52, Node.LENGTH);
761:       assertEquals(15, Node.NO_SIDE_EFFECTS);
762:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
763:       assertEquals(29, Node.JSDOC_INFO_PROP);
764:       assertEquals(55, Node.INFERRED_FUNCTION);
765:       
766:       Iterable<Node> iterable0 = node1.children();
767:       assertFalse(node1.isSwitch());
768:       assertFalse(node1.isInc());
769:       assertFalse(node1.isString());
770:       assertFalse(node1.isCase());
771:       assertFalse(node1.isFalse());
772:       assertFalse(node1.isThrow());
773:       assertFalse(node1.isHook());
774:       assertFalse(node1.isThis());
775:       assertFalse(node1.isGetProp());
776:       assertFalse(node1.isObjectLit());
777:       assertFalse(node1.isAnd());
778:       assertFalse(node1.isNot());
779:       assertFalse(node1.isGetterDef());
780:       assertFalse(node1.isDebugger());
781:       assertEquals((-1), node1.getCharno());
782:       assertFalse(node1.isExprResult());
783:       assertFalse(node1.isTrue());
784:       assertFalse(node1.isDefaultCase());
785:       assertFalse(node1.isVoid());
786:       assertFalse(node1.isArrayLit());
787:       assertFalse(node1.isAssign());
788:       assertFalse(node1.isDec());
789:       assertFalse(node1.hasChildren());
790:       assertEquals(0, node1.getChildCount());
791:       assertEquals(38, node1.getType());
792:       assertFalse(node1.isComma());
793:       assertFalse(node1.isTypeOf());
794:       assertFalse(node1.isNull());
795:       assertFalse(node1.isEmpty());
796:       assertFalse(node1.isAssignAdd());
797:       assertFalse(node1.isGetElem());
798:       assertFalse(node1.isDelProp());
799:       assertFalse(node1.isBreak());
800:       assertFalse(node1.isOr());
801:       assertFalse(node1.isWhile());
802:       assertFalse(node1.isDo());
803:       assertFalse(node1.isAdd());
804:       assertFalse(node1.isNew());
805:       assertFalse(node1.hasMoreThanOneChild());
806:       assertFalse(node1.isVar());
807:       assertFalse(node1.isCall());
808:       assertFalse(node1.isContinue());
809:       assertFalse(node1.isLabel());
810:       assertFalse(node1.isReturn());
811:       assertFalse(node1.isBlock());
812:       assertFalse(node1.isNumber());
813:       assertFalse(node1.isParamList());
814:       assertFalse(node1.isLabelName());
815:       assertFalse(node1.isStringKey());
816:       assertEquals((-1), node1.getSourcePosition());
817:       assertFalse(node1.isFunction());
818:       assertFalse(node1.isRegExp());
819:       assertFalse(node1.isScript());
820:       assertFalse(node1.isTry());
821:       assertFalse(node1.hasOneChild());
822:       assertFalse(node1.isCatch());
823:       assertFalse(node1.isCast());
824:       assertFalse(node1.isInstanceOf());
825:       assertFalse(node1.isWith());
826:       assertFalse(node1.isFor());
827:       assertFalse(node1.isSetterDef());
828:       assertFalse(node1.isNE());
829:       assertFalse(node1.isIf());
830:       assertEquals((-1), node1.getLineno());
831:       assertFalse(node1.isIn());
832:       assertTrue(node1.isName());
833:       assertNotNull(iterable0);
834:       assertFalse(iterable0.contains(node1));
835:       assertFalse(node1.equals((Object)node0));
836:       assertFalse(node1.equals((Object)node2));
837:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
838:       assertEquals(52, Node.LENGTH);
839:       assertEquals(57, Node.LAST_PROP);
840:       assertEquals(54, Node.SLASH_V);
841:       assertEquals(57, Node.REFLECTED_OBJECT);
842:       assertEquals(1, Node.DECR_FLAG);
843:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
844:       assertEquals(50, Node.FREE_CALL);
845:       assertEquals(15, Node.NO_SIDE_EFFECTS);
846:       assertEquals(39, Node.EMPTY_BLOCK);
847:       assertEquals(48, Node.DIRECTIVES);
848:       assertEquals(37, Node.OPT_ARG_NAME);
849:       assertEquals(8, Node.FLAG_NO_THROWS);
850:       assertEquals(32, Node.INCRDECR_PROP);
851:       assertEquals(56, Node.CHANGE_TIME);
852:       assertEquals(12, Node.COLUMN_BITS);
853:       assertEquals(49, Node.DIRECT_EVAL);
854:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
855:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
856:       assertEquals(4095, Node.COLUMN_MASK);
857:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
858:       assertEquals(43, Node.IS_CONSTANT_NAME);
859:       assertEquals(36, Node.QUOTED_PROP);
860:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
861:       assertEquals(55, Node.INFERRED_FUNCTION);
862:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
863:       assertEquals(29, Node.JSDOC_INFO_PROP);
864:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
865:       assertEquals(53, Node.INPUT_ID);
866:       assertEquals(2, Node.POST_FLAG);
867:       assertEquals(47, Node.IS_DISPATCHER);
868:       assertEquals(51, Node.STATIC_SOURCE_FILE);
869:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
870:       assertEquals(46, Node.IS_NAMESPACE);
871:       assertEquals(30, Node.VAR_ARGS_NAME);
872:       assertEquals(40, Node.ORIGINALNAME_PROP);
873:       assertNotSame(node1, node0);
874:       assertNotSame(node1, node2);
875:       
876:       boolean boolean2 = node1.isGetProp();
877:       assertFalse(node1.isSwitch());
878:       assertFalse(node1.isInc());
879:       assertFalse(node1.isString());
880:       assertFalse(node1.isCase());
881:       assertFalse(node1.isFalse());
882:       assertFalse(node1.isThrow());
883:       assertFalse(node1.isHook());
884:       assertFalse(node1.isThis());
885:       assertFalse(node1.isGetProp());
886:       assertFalse(node1.isObjectLit());
887:       assertFalse(node1.isAnd());
888:       assertFalse(node1.isNot());
889:       assertFalse(node1.isGetterDef());
890:       assertFalse(node1.isDebugger());
891:       assertEquals((-1), node1.getCharno());
892:       assertFalse(node1.isExprResult());
893:       assertFalse(node1.isTrue());
894:       assertFalse(node1.isDefaultCase());
895:       assertFalse(node1.isVoid());
896:       assertFalse(node1.isArrayLit());
897:       assertFalse(node1.isAssign());
898:       assertFalse(node1.isDec());
899:       assertFalse(node1.hasChildren());
900:       assertEquals(0, node1.getChildCount());
901:       assertEquals(38, node1.getType());
902:       assertFalse(node1.isComma());
903:       assertFalse(node1.isTypeOf());
904:       assertFalse(node1.isNull());
905:       assertFalse(node1.isEmpty());
906:       assertFalse(node1.isAssignAdd());
907:       assertFalse(node1.isGetElem());
908:       assertFalse(node1.isDelProp());
909:       assertFalse(node1.isBreak());
910:       assertFalse(node1.isOr());
911:       assertFalse(node1.isWhile());
912:       assertFalse(node1.isDo());
913:       assertFalse(node1.isAdd());
914:       assertFalse(node1.isNew());
915:       assertFalse(node1.hasMoreThanOneChild());
916:       assertFalse(node1.isVar());
917:       assertFalse(node1.isCall());
918:       assertFalse(node1.isContinue());
919:       assertFalse(node1.isLabel());
920:       assertFalse(node1.isReturn());
921:       assertFalse(node1.isBlock());
922:       assertFalse(node1.isNumber());
923:       assertFalse(node1.isParamList());
924:       assertFalse(node1.isLabelName());
925:       assertFalse(node1.isStringKey());
926:       assertEquals((-1), node1.getSourcePosition());
927:       assertFalse(node1.isFunction());
928:       assertFalse(node1.isRegExp());
929:       assertFalse(node1.isScript());
930:       assertFalse(node1.isTry());
931:       assertFalse(node1.hasOneChild());
932:       assertFalse(node1.isCatch());
933:       assertFalse(node1.isCast());
934:       assertFalse(node1.isInstanceOf());
935:       assertFalse(node1.isWith());
936:       assertFalse(node1.isFor());
937:       assertFalse(node1.isSetterDef());
938:       assertFalse(node1.isNE());
939:       assertFalse(node1.isIf());
940:       assertEquals((-1), node1.getLineno());
941:       assertFalse(node1.isIn());
942:       assertTrue(node1.isName());
943:       assertFalse(boolean2);
944:       assertFalse(node1.equals((Object)node0));
945:       assertFalse(node1.equals((Object)node2));
946:       assertTrue(boolean2 == boolean1);
947:       assertTrue(boolean2 == boolean0);
948:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
949:       assertEquals(52, Node.LENGTH);
950:       assertEquals(57, Node.LAST_PROP);
951:       assertEquals(54, Node.SLASH_V);
952:       assertEquals(57, Node.REFLECTED_OBJECT);
953:       assertEquals(1, Node.DECR_FLAG);
954:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
955:       assertEquals(50, Node.FREE_CALL);
956:       assertEquals(15, Node.NO_SIDE_EFFECTS);
957:       assertEquals(39, Node.EMPTY_BLOCK);
958:       assertEquals(48, Node.DIRECTIVES);
959:       assertEquals(37, Node.OPT_ARG_NAME);
960:       assertEquals(8, Node.FLAG_NO_THROWS);
961:       assertEquals(32, Node.INCRDECR_PROP);
962:       assertEquals(56, Node.CHANGE_TIME);
963:       assertEquals(12, Node.COLUMN_BITS);
964:       assertEquals(49, Node.DIRECT_EVAL);
965:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
966:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
967:       assertEquals(4095, Node.COLUMN_MASK);
968:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
969:       assertEquals(43, Node.IS_CONSTANT_NAME);
970:       assertEquals(36, Node.QUOTED_PROP);
971:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
972:       assertEquals(55, Node.INFERRED_FUNCTION);
973:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
974:       assertEquals(29, Node.JSDOC_INFO_PROP);
975:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
976:       assertEquals(53, Node.INPUT_ID);
977:       assertEquals(2, Node.POST_FLAG);
978:       assertEquals(47, Node.IS_DISPATCHER);
979:       assertEquals(51, Node.STATIC_SOURCE_FILE);
980:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
981:       assertEquals(46, Node.IS_NAMESPACE);
982:       assertEquals(30, Node.VAR_ARGS_NAME);
983:       assertEquals(40, Node.ORIGINALNAME_PROP);
984:       assertNotSame(node1, node0);
985:       assertNotSame(node1, node2);
986:       
987:       boolean boolean3 = node1.isParamList();
988:       assertFalse(node1.isSwitch());
989:       assertFalse(node1.isInc());
990:       assertFalse(node1.isString());
991:       assertFalse(node1.isCase());
992:       assertFalse(node1.isFalse());
993:       assertFalse(node1.isThrow());
994:       assertFalse(node1.isHook());
995:       assertFalse(node1.isThis());
996:       assertFalse(node1.isGetProp());
997:       assertFalse(node1.isObjectLit());
998:       assertFalse(node1.isAnd());
999:       assertFalse(node1.isNot());
1000:       assertFalse(node1.isGetterDef());
1001:       assertFalse(node1.isDebugger());
1002:       assertEquals((-1), node1.getCharno());
1003:       assertFalse(node1.isExprResult());
1004:       assertFalse(node1.isTrue());
1005:       assertFalse(node1.isDefaultCase());
1006:       assertFalse(node1.isVoid());
1007:       assertFalse(node1.isArrayLit());
1008:       assertFalse(node1.isAssign());
1009:       assertFalse(node1.isDec());
1010:       assertFalse(node1.hasChildren());
1011:       assertEquals(0, node1.getChildCount());
1012:       assertEquals(38, node1.getType());
1013:       assertFalse(node1.isComma());
1014:       assertFalse(node1.isTypeOf());
1015:       assertFalse(node1.isNull());
1016:       assertFalse(node1.isEmpty());
1017:       assertFalse(node1.isAssignAdd());
1018:       assertFalse(node1.isGetElem());
1019:       assertFalse(node1.isDelProp());
1020:       assertFalse(node1.isBreak());
1021:       assertFalse(node1.isOr());
1022:       assertFalse(node1.isWhile());
1023:       assertFalse(node1.isDo());
1024:       assertFalse(node1.isAdd());
1025:       assertFalse(node1.isNew());
1026:       assertFalse(node1.hasMoreThanOneChild());
1027:       assertFalse(node1.isVar());
1028:       assertFalse(node1.isCall());
1029:       assertFalse(node1.isContinue());
1030:       assertFalse(node1.isLabel());
1031:       assertFalse(node1.isReturn());
1032:       assertFalse(node1.isBlock());
1033:       assertFalse(node1.isNumber());
1034:       assertFalse(node1.isParamList());
1035:       assertFalse(node1.isLabelName());
1036:       assertFalse(node1.isStringKey());
1037:       assertEquals((-1), node1.getSourcePosition());
1038:       assertFalse(node1.isFunction());
1039:       assertFalse(node1.isRegExp());
1040:       assertFalse(node1.isScript());
1041:       assertFalse(node1.isTry());
1042:       assertFalse(node1.hasOneChild());
1043:       assertFalse(node1.isCatch());
1044:       assertFalse(node1.isCast());
1045:       assertFalse(node1.isInstanceOf());
1046:       assertFalse(node1.isWith());
1047:       assertFalse(node1.isFor());
1048:       assertFalse(node1.isSetterDef());
1049:       assertFalse(node1.isNE());
1050:       assertFalse(node1.isIf());
1051:       assertEquals((-1), node1.getLineno());
1052:       assertFalse(node1.isIn());
1053:       assertTrue(node1.isName());
1054:       assertFalse(boolean3);
1055:       assertFalse(node1.equals((Object)node0));
1056:       assertFalse(node1.equals((Object)node2));
1057:       assertTrue(boolean3 == boolean0);
1058:       assertTrue(boolean3 == boolean1);
1059:       assertTrue(boolean3 == boolean2);
1060:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1061:       assertEquals(52, Node.LENGTH);
1062:       assertEquals(57, Node.LAST_PROP);
1063:       assertEquals(54, Node.SLASH_V);
1064:       assertEquals(57, Node.REFLECTED_OBJECT);
1065:       assertEquals(1, Node.DECR_FLAG);
1066:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1067:       assertEquals(50, Node.FREE_CALL);
1068:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1069:       assertEquals(39, Node.EMPTY_BLOCK);
1070:       assertEquals(48, Node.DIRECTIVES);
1071:       assertEquals(37, Node.OPT_ARG_NAME);
1072:       assertEquals(8, Node.FLAG_NO_THROWS);
1073:       assertEquals(32, Node.INCRDECR_PROP);
1074:       assertEquals(56, Node.CHANGE_TIME);
1075:       assertEquals(12, Node.COLUMN_BITS);
1076:       assertEquals(49, Node.DIRECT_EVAL);
1077:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1078:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1079:       assertEquals(4095, Node.COLUMN_MASK);
1080:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1081:       assertEquals(43, Node.IS_CONSTANT_NAME);
1082:       assertEquals(36, Node.QUOTED_PROP);
1083:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1084:       assertEquals(55, Node.INFERRED_FUNCTION);
1085:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1086:       assertEquals(29, Node.JSDOC_INFO_PROP);
1087:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1088:       assertEquals(53, Node.INPUT_ID);
1089:       assertEquals(2, Node.POST_FLAG);
1090:       assertEquals(47, Node.IS_DISPATCHER);
1091:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1092:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1093:       assertEquals(46, Node.IS_NAMESPACE);
1094:       assertEquals(30, Node.VAR_ARGS_NAME);
1095:       assertEquals(40, Node.ORIGINALNAME_PROP);
1096:       assertNotSame(node1, node0);
1097:       assertNotSame(node1, node2);
1098:       
1099:       boolean boolean4 = node2.isSetterDef();
1100:       assertFalse(node1.isSwitch());
1101:       assertFalse(node1.isInc());
1102:       assertFalse(node1.isString());
1103:       assertFalse(node1.isCase());
1104:       assertFalse(node1.isFalse());
1105:       assertFalse(node1.isThrow());
1106:       assertFalse(node1.isHook());
1107:       assertFalse(node1.isThis());
1108:       assertFalse(node1.isGetProp());
1109:       assertFalse(node1.isObjectLit());
1110:       assertFalse(node1.isAnd());
1111:       assertFalse(node1.isNot());
1112:       assertFalse(node1.isGetterDef());
1113:       assertFalse(node1.isDebugger());
1114:       assertEquals((-1), node1.getCharno());
1115:       assertFalse(node1.isExprResult());
1116:       assertFalse(node1.isTrue());
1117:       assertFalse(node1.isDefaultCase());
1118:       assertFalse(node1.isVoid());
1119:       assertFalse(node1.isArrayLit());
1120:       assertFalse(node1.isAssign());
1121:       assertFalse(node1.isDec());
1122:       assertFalse(node1.hasChildren());
1123:       assertEquals(0, node1.getChildCount());
1124:       assertEquals(38, node1.getType());
1125:       assertFalse(node1.isComma());
1126:       assertFalse(node1.isTypeOf());
1127:       assertFalse(node1.isNull());
1128:       assertFalse(node1.isEmpty());
1129:       assertFalse(node1.isAssignAdd());
1130:       assertFalse(node1.isGetElem());
1131:       assertFalse(node1.isDelProp());
1132:       assertFalse(node1.isBreak());
1133:       assertFalse(node1.isOr());
1134:       assertFalse(node1.isWhile());
1135:       assertFalse(node1.isDo());
1136:       assertFalse(node1.isAdd());
1137:       assertFalse(node1.isNew());
1138:       assertFalse(node1.hasMoreThanOneChild());
1139:       assertFalse(node1.isVar());
1140:       assertFalse(node1.isCall());
1141:       assertFalse(node1.isContinue());
1142:       assertFalse(node1.isLabel());
1143:       assertFalse(node1.isReturn());
1144:       assertFalse(node1.isBlock());
1145:       assertFalse(node1.isNumber());
1146:       assertFalse(node1.isParamList());
1147:       assertFalse(node1.isLabelName());
1148:       assertFalse(node1.isStringKey());
1149:       assertEquals((-1), node1.getSourcePosition());
1150:       assertFalse(node1.isFunction());
1151:       assertFalse(node1.isRegExp());
1152:       assertFalse(node1.isScript());
1153:       assertFalse(node1.isTry());
1154:       assertFalse(node1.hasOneChild());
1155:       assertFalse(node1.isCatch());
1156:       assertFalse(node1.isCast());
1157:       assertFalse(node1.isInstanceOf());
1158:       assertFalse(node1.isWith());
1159:       assertFalse(node1.isFor());
1160:       assertFalse(node1.isSetterDef());
1161:       assertFalse(node1.isNE());
1162:       assertFalse(node1.isIf());
1163:       assertEquals((-1), node1.getLineno());
1164:       assertFalse(node1.isIn());
1165:       assertTrue(node1.isName());
1166:       assertFalse(node2.isRegExp());
1167:       assertFalse(node2.isVoid());
1168:       assertFalse(node2.isDefaultCase());
1169:       assertFalse(node2.isFunction());
1170:       assertFalse(node2.isTry());
1171:       assertFalse(node2.isArrayLit());
1172:       assertFalse(node2.isDebugger());
1173:       assertFalse(node2.isTrue());
1174:       assertFalse(node2.isParamList());
1175:       assertFalse(node2.isEmpty());
1176:       assertFalse(node2.isSetterDef());
1177:       assertFalse(node2.isVar());
1178:       assertFalse(node2.isSwitch());
1179:       assertFalse(node2.isCase());
1180:       assertFalse(node2.isInc());
1181:       assertFalse(node2.isIn());
1182:       assertFalse(node2.isStringKey());
1183:       assertEquals((-1), node2.getCharno());
1184:       assertFalse(node2.isNE());
1185:       assertFalse(node2.isIf());
1186:       assertFalse(node2.isGetterDef());
1187:       assertFalse(node2.isNumber());
1188:       assertTrue(node2.hasChildren());
1189:       assertEquals((-1), node2.getLineno());
1190:       assertFalse(node2.isCatch());
1191:       assertFalse(node2.isInstanceOf());
1192:       assertFalse(node2.hasMoreThanOneChild());
1193:       assertFalse(node2.isFor());
1194:       assertEquals(1, node2.getChildCount());
1195:       assertFalse(node2.isBlock());
1196:       assertFalse(node2.isHook());
1197:       assertFalse(node2.isScript());
1198:       assertFalse(node2.isWith());
1199:       assertFalse(node2.isExprResult());
1200:       assertFalse(node2.isAnd());
1201:       assertFalse(node2.isObjectLit());
1202:       assertFalse(node2.isNot());
1203:       assertFalse(node2.isLabelName());
1204:       assertFalse(node2.isCast());
1205:       assertEquals(42, node2.getType());
1206:       assertFalse(node2.isContinue());
1207:       assertFalse(node2.isFalse());
1208:       assertFalse(node2.isLabel());
1209:       assertFalse(node2.isAssignAdd());
1210:       assertFalse(node2.isThrow());
1211:       assertFalse(node2.isDo());
1212:       assertFalse(node2.isAdd());
1213:       assertFalse(node2.isString());
1214:       assertFalse(node2.isNew());
1215:       assertFalse(node2.isName());
1216:       assertFalse(node2.isOr());
1217:       assertFalse(node2.isNull());
1218:       assertFalse(node2.isTypeOf());
1219:       assertFalse(node2.isDec());
1220:       assertEquals((-1), node2.getSourcePosition());
1221:       assertFalse(node2.isComma());
1222:       assertFalse(node2.isDelProp());
1223:       assertFalse(node2.isBreak());
1224:       assertFalse(node2.isGetProp());
1225:       assertFalse(node2.isCall());
1226:       assertFalse(node2.isGetElem());
1227:       assertTrue(node2.isThis());
1228:       assertFalse(node2.isAssign());
1229:       assertFalse(node2.isWhile());
1230:       assertTrue(node2.hasOneChild());
1231:       assertFalse(node2.isReturn());
1232:       assertFalse(boolean4);
1233:       assertFalse(node1.equals((Object)node0));
1234:       assertFalse(node1.equals((Object)node2));
1235:       assertFalse(node2.equals((Object)node0));
1236:       assertFalse(node2.equals((Object)node1));
1237:       assertTrue(boolean4 == boolean2);
1238:       assertTrue(boolean4 == boolean3);
1239:       assertTrue(boolean4 == boolean0);
1240:       assertTrue(boolean4 == boolean1);
1241:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1242:       assertEquals(52, Node.LENGTH);
1243:       assertEquals(57, Node.LAST_PROP);
1244:       assertEquals(54, Node.SLASH_V);
1245:       assertEquals(57, Node.REFLECTED_OBJECT);
1246:       assertEquals(1, Node.DECR_FLAG);
1247:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1248:       assertEquals(50, Node.FREE_CALL);
1249:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1250:       assertEquals(39, Node.EMPTY_BLOCK);
1251:       assertEquals(48, Node.DIRECTIVES);
1252:       assertEquals(37, Node.OPT_ARG_NAME);
1253:       assertEquals(8, Node.FLAG_NO_THROWS);
1254:       assertEquals(32, Node.INCRDECR_PROP);
1255:       assertEquals(56, Node.CHANGE_TIME);
1256:       assertEquals(12, Node.COLUMN_BITS);
1257:       assertEquals(49, Node.DIRECT_EVAL);
1258:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1259:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1260:       assertEquals(4095, Node.COLUMN_MASK);
1261:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1262:       assertEquals(43, Node.IS_CONSTANT_NAME);
1263:       assertEquals(36, Node.QUOTED_PROP);
1264:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1265:       assertEquals(55, Node.INFERRED_FUNCTION);
1266:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1267:       assertEquals(29, Node.JSDOC_INFO_PROP);
1268:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1269:       assertEquals(53, Node.INPUT_ID);
1270:       assertEquals(2, Node.POST_FLAG);
1271:       assertEquals(47, Node.IS_DISPATCHER);
1272:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1273:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1274:       assertEquals(46, Node.IS_NAMESPACE);
1275:       assertEquals(30, Node.VAR_ARGS_NAME);
1276:       assertEquals(40, Node.ORIGINALNAME_PROP);
1277:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1278:       assertEquals(53, Node.INPUT_ID);
1279:       assertEquals(36, Node.QUOTED_PROP);
1280:       assertEquals(43, Node.IS_CONSTANT_NAME);
1281:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1282:       assertEquals(4095, Node.COLUMN_MASK);
1283:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1284:       assertEquals(32, Node.INCRDECR_PROP);
1285:       assertEquals(46, Node.IS_NAMESPACE);
1286:       assertEquals(12, Node.COLUMN_BITS);
1287:       assertEquals(50, Node.FREE_CALL);
1288:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1289:       assertEquals(1, Node.DECR_FLAG);
1290:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1291:       assertEquals(54, Node.SLASH_V);
1292:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1293:       assertEquals(57, Node.LAST_PROP);
1294:       assertEquals(57, Node.REFLECTED_OBJECT);
1295:       assertEquals(40, Node.ORIGINALNAME_PROP);
1296:       assertEquals(30, Node.VAR_ARGS_NAME);
1297:       assertEquals(49, Node.DIRECT_EVAL);
1298:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1299:       assertEquals(48, Node.DIRECTIVES);
1300:       assertEquals(8, Node.FLAG_NO_THROWS);
1301:       assertEquals(39, Node.EMPTY_BLOCK);
1302:       assertEquals(2, Node.POST_FLAG);
1303:       assertEquals(37, Node.OPT_ARG_NAME);
1304:       assertEquals(47, Node.IS_DISPATCHER);
1305:       assertEquals(56, Node.CHANGE_TIME);
1306:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1307:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1308:       assertEquals(52, Node.LENGTH);
1309:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1310:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1311:       assertEquals(29, Node.JSDOC_INFO_PROP);
1312:       assertEquals(55, Node.INFERRED_FUNCTION);
1313:       assertNotSame(node1, node0);
1314:       assertNotSame(node1, node2);
1315:       assertNotSame(node2, node0);
1316:       assertNotSame(node2, node1);
1317:       
1318:       Node node3 = Node.newString("Object#Key");
1319:       assertFalse(node3.isDec());
1320:       assertEquals((-1), node3.getSourcePosition());
1321:       assertFalse(node3.hasChildren());
1322:       assertFalse(node3.isLabelName());
1323:       assertFalse(node3.isAssignAdd());
1324:       assertEquals((-1), node3.getLineno());
1325:       assertFalse(node3.hasMoreThanOneChild());
1326:       assertFalse(node3.isCast());
1327:       assertFalse(node3.isGetElem());
1328:       assertFalse(node3.isReturn());
1329:       assertFalse(node3.isAssign());
1330:       assertFalse(node3.isLabel());
1331:       assertFalse(node3.isContinue());
1332:       assertFalse(node3.isTypeOf());
1333:       assertFalse(node3.isExprResult());
1334:       assertFalse(node3.isDo());
1335:       assertFalse(node3.isNew());
1336:       assertFalse(node3.isOr());
1337:       assertFalse(node3.isAdd());
1338:       assertFalse(node3.isParamList());
1339:       assertFalse(node3.isThis());
1340:       assertFalse(node3.isStringKey());
1341:       assertFalse(node3.isVar());
1342:       assertFalse(node3.isCatch());
1343:       assertFalse(node3.isInstanceOf());
1344:       assertFalse(node3.isHook());
1345:       assertEquals(0, node3.getChildCount());
1346:       assertFalse(node3.isWith());
1347:       assertFalse(node3.isSwitch());
1348:       assertFalse(node3.isRegExp());
1349:       assertFalse(node3.isScript());
1350:       assertEquals((-1), node3.getCharno());
1351:       assertFalse(node3.isBlock());
1352:       assertFalse(node3.isTry());
1353:       assertFalse(node3.isCase());
1354:       assertTrue(node3.isString());
1355:       assertFalse(node3.hasOneChild());
1356:       assertFalse(node3.isGetterDef());
1357:       assertFalse(node3.isNumber());
1358:       assertFalse(node3.isNE());
1359:       assertFalse(node3.isFor());
1360:       assertFalse(node3.isDelProp());
1361:       assertFalse(node3.isIf());
1362:       assertFalse(node3.isArrayLit());
1363:       assertFalse(node3.isFunction());
1364:       assertFalse(node3.isInc());
1365:       assertFalse(node3.isTrue());
1366:       assertFalse(node3.isVoid());
1367:       assertFalse(node3.isDefaultCase());
1368:       assertFalse(node3.isEmpty());
1369:       assertFalse(node3.isIn());
1370:       assertFalse(node3.isComma());
1371:       assertFalse(node3.isBreak());
1372:       assertFalse(node3.isGetProp());
1373:       assertFalse(node3.isSetterDef());
1374:       assertFalse(node3.isNull());
1375:       assertFalse(node3.isName());
1376:       assertFalse(node3.isThrow());
1377:       assertFalse(node3.isCall());
1378:       assertEquals(40, node3.getType());
1379:       assertFalse(node3.isFalse());
1380:       assertFalse(node3.isDebugger());
1381:       assertFalse(node3.isWhile());
1382:       assertFalse(node3.isAnd());
1383:       assertFalse(node3.isNot());
1384:       assertFalse(node3.isObjectLit());
1385:       assertNotNull(node3);
1386:       assertFalse(node3.equals((Object)node1));
1387:       assertFalse(node3.equals((Object)node2));
1388:       assertFalse(node3.equals((Object)node0));
1389:       assertEquals(56, Node.CHANGE_TIME);
1390:       assertEquals(46, Node.IS_NAMESPACE);
1391:       assertEquals(47, Node.IS_DISPATCHER);
1392:       assertEquals(2, Node.POST_FLAG);
1393:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1394:       assertEquals(1, Node.DECR_FLAG);
1395:       assertEquals(29, Node.JSDOC_INFO_PROP);
1396:       assertEquals(12, Node.COLUMN_BITS);
1397:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1398:       assertEquals(57, Node.LAST_PROP);
1399:       assertEquals(32, Node.INCRDECR_PROP);
1400:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1401:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1402:       assertEquals(54, Node.SLASH_V);
1403:       assertEquals(43, Node.IS_CONSTANT_NAME);
1404:       assertEquals(30, Node.VAR_ARGS_NAME);
1405:       assertEquals(40, Node.ORIGINALNAME_PROP);
1406:       assertEquals(48, Node.DIRECTIVES);
1407:       assertEquals(8, Node.FLAG_NO_THROWS);
1408:       assertEquals(39, Node.EMPTY_BLOCK);
1409:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1410:       assertEquals(50, Node.FREE_CALL);
1411:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1412:       assertEquals(55, Node.INFERRED_FUNCTION);
1413:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1414:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1415:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1416:       assertEquals(53, Node.INPUT_ID);
1417:       assertEquals(52, Node.LENGTH);
1418:       assertEquals(57, Node.REFLECTED_OBJECT);
1419:       assertEquals(36, Node.QUOTED_PROP);
1420:       assertEquals(4095, Node.COLUMN_MASK);
1421:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1422:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1423:       assertEquals(49, Node.DIRECT_EVAL);
1424:       assertEquals(37, Node.OPT_ARG_NAME);
1425:       
1426:       // Undeclared exception!
1427:       try { 
1428:         node0.getString();
1429:         fail("Expecting exception: IllegalStateException");
1430:       
1431:       } catch(IllegalStateException e) {
1432:          //
1433:          // unexpected prop id -410
1434:          //
1435:          verifyException("com.google.javascript.rhino.Node", e);
1436:       }
1437:   }
1438: }
RegularFileObject[/tmp/EvoSuite_96_1629222876429/com/google/javascript/rhino/Node_96_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:36 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_96_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_96_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_96_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.JSTypeNative",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.common.collect.AbstractIndexedListIterator",
340:       "com.google.common.collect.Iterators$11",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.TemplatizedType",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.javascript.rhino.JSTypeExpression",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.common.collect.Iterators$12",
366:       "com.google.javascript.rhino.jstype.NamedType"
367:     );
368:   }
369: }

[MASTER] 17:54:36.821 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(23, 48, 2810);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(23, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.isTry());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertEquals(48, node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertNotNull(node0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

boolean boolean0 = node0.isNE();
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(23, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.isTry());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertEquals(48, node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(boolean0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

boolean boolean1 = node0.isFromExterns();
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(23, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.isTry());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertEquals(48, node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

node0.putBooleanProp((-410), true);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(23, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isReturn());
assertFalse(node0.isTry());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertEquals(48, node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

Node node1 = new Node(38);
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(0, node1.getChildCount());
assertEquals(38, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertTrue(node1.isName());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node2 = new Node(42, node1);
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(0, node1.getChildCount());
assertEquals(38, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertTrue(node1.isName());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isParamList());
assertFalse(node2.isEmpty());
assertFalse(node2.isSetterDef());
assertFalse(node2.isVar());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isFor());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertEquals(42, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isThrow());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isName());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isComma());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertTrue(node2.isThis());
assertFalse(node2.isAssign());
assertFalse(node2.isWhile());
assertTrue(node2.hasOneChild());
assertFalse(node2.isReturn());
assertNotNull(node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(0, node1.getChildCount());
assertEquals(38, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertTrue(node1.isName());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotSame(node1, node0);
assertNotSame(node1, node2);

boolean boolean2 = node1.isGetProp();
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(0, node1.getChildCount());
assertEquals(38, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertTrue(node1.isName());
assertFalse(boolean2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotSame(node1, node0);
assertNotSame(node1, node2);

boolean boolean3 = node1.isParamList();
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(0, node1.getChildCount());
assertEquals(38, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertTrue(node1.isName());
assertFalse(boolean3);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotSame(node1, node0);
assertNotSame(node1, node2);

boolean boolean4 = node2.isSetterDef();
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(0, node1.getChildCount());
assertEquals(38, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertTrue(node1.isName());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isParamList());
assertFalse(node2.isEmpty());
assertFalse(node2.isSetterDef());
assertFalse(node2.isVar());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isFor());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertEquals(42, node2.getType());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isThrow());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isNew());
assertFalse(node2.isName());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isComma());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertTrue(node2.isThis());
assertFalse(node2.isAssign());
assertFalse(node2.isWhile());
assertTrue(node2.hasOneChild());
assertFalse(node2.isReturn());
assertFalse(boolean4);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNotSame(node2, node0);
assertNotSame(node2, node1);

Node node3 = Node.newString("Object#Key");
assertFalse(node3.isDec());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.hasChildren());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssignAdd());
assertEquals((-1), node3.getLineno());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCast());
assertFalse(node3.isGetElem());
assertFalse(node3.isReturn());
assertFalse(node3.isAssign());
assertFalse(node3.isLabel());
assertFalse(node3.isContinue());
assertFalse(node3.isTypeOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isParamList());
assertFalse(node3.isThis());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isHook());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isWith());
assertFalse(node3.isSwitch());
assertFalse(node3.isRegExp());
assertFalse(node3.isScript());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isBlock());
assertFalse(node3.isTry());
assertFalse(node3.isCase());
assertTrue(node3.isString());
assertFalse(node3.hasOneChild());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.isDelProp());
assertFalse(node3.isIf());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFunction());
assertFalse(node3.isInc());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isEmpty());
assertFalse(node3.isIn());
assertFalse(node3.isComma());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNull());
assertFalse(node3.isName());
assertFalse(node3.isThrow());
assertFalse(node3.isCall());
assertEquals(40, node3.getType());
assertFalse(node3.isFalse());
assertFalse(node3.isDebugger());
assertFalse(node3.isWhile());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertNotNull(node3);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);

node0.getString();

[MASTER] 17:54:40.511 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_115_1629222880011/com/google/javascript/rhino/Node_115_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_115_1629222880011/com/google/javascript/rhino/Node_115_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:40.511 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:40.511 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:40.513 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1351
[MASTER] 17:54:40.515 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_115_1629222880011/com/google/javascript/rhino/Node_115_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:40 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSType;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import com.google.javascript.rhino.jstype.SimpleSourceFile;
15: import java.util.ArrayDeque;
16: import java.util.Set;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class Node_115_tmp__ESTest extends Node_115_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Node node0 = Node.newString("8`QN");
27:       assertFalse(node0.isArrayLit());
28:       assertFalse(node0.isFor());
29:       assertFalse(node0.isEmpty());
30:       assertFalse(node0.isGetterDef());
31:       assertFalse(node0.isFunction());
32:       assertFalse(node0.isTry());
33:       assertFalse(node0.isDefaultCase());
34:       assertFalse(node0.isCatch());
35:       assertFalse(node0.isIn());
36:       assertFalse(node0.isRegExp());
37:       assertFalse(node0.isNE());
38:       assertFalse(node0.isTrue());
39:       assertFalse(node0.isNull());
40:       assertFalse(node0.isIf());
41:       assertFalse(node0.isVoid());
42:       assertFalse(node0.isName());
43:       assertFalse(node0.isDelProp());
44:       assertFalse(node0.isVar());
45:       assertFalse(node0.isHook());
46:       assertFalse(node0.isBlock());
47:       assertFalse(node0.isThis());
48:       assertFalse(node0.isAdd());
49:       assertFalse(node0.isDo());
50:       assertFalse(node0.isCase());
51:       assertFalse(node0.isNew());
52:       assertTrue(node0.isString());
53:       assertFalse(node0.isLabel());
54:       assertEquals(0, node0.getChildCount());
55:       assertFalse(node0.isSwitch());
56:       assertFalse(node0.isParamList());
57:       assertEquals((-1), node0.getCharno());
58:       assertFalse(node0.isLabelName());
59:       assertFalse(node0.isStringKey());
60:       assertFalse(node0.isCast());
61:       assertFalse(node0.hasOneChild());
62:       assertFalse(node0.isGetElem());
63:       assertFalse(node0.isAssign());
64:       assertFalse(node0.isDec());
65:       assertFalse(node0.isNumber());
66:       assertFalse(node0.isTypeOf());
67:       assertFalse(node0.isScript());
68:       assertFalse(node0.hasChildren());
69:       assertFalse(node0.isAssignAdd());
70:       assertFalse(node0.hasMoreThanOneChild());
71:       assertFalse(node0.isInstanceOf());
72:       assertFalse(node0.isReturn());
73:       assertFalse(node0.isOr());
74:       assertFalse(node0.isWith());
75:       assertFalse(node0.isBreak());
76:       assertFalse(node0.isExprResult());
77:       assertEquals((-1), node0.getLineno());
78:       assertFalse(node0.isThrow());
79:       assertFalse(node0.isCall());
80:       assertFalse(node0.isFalse());
81:       assertFalse(node0.isSetterDef());
82:       assertFalse(node0.isComma());
83:       assertFalse(node0.isGetProp());
84:       assertFalse(node0.isInc());
85:       assertFalse(node0.isWhile());
86:       assertFalse(node0.isAnd());
87:       assertEquals(40, node0.getType());
88:       assertFalse(node0.isNot());
89:       assertFalse(node0.isContinue());
90:       assertFalse(node0.isObjectLit());
91:       assertEquals((-1), node0.getSourcePosition());
92:       assertFalse(node0.isDebugger());
93:       assertNotNull(node0);
94:       assertEquals(29, Node.JSDOC_INFO_PROP);
95:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
96:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
97:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
98:       assertEquals(37, Node.OPT_ARG_NAME);
99:       assertEquals(53, Node.INPUT_ID);
100:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
101:       assertEquals(43, Node.IS_CONSTANT_NAME);
102:       assertEquals(56, Node.CHANGE_TIME);
103:       assertEquals(46, Node.IS_NAMESPACE);
104:       assertEquals(51, Node.STATIC_SOURCE_FILE);
105:       assertEquals(36, Node.QUOTED_PROP);
106:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
107:       assertEquals(55, Node.INFERRED_FUNCTION);
108:       assertEquals(15, Node.NO_SIDE_EFFECTS);
109:       assertEquals(57, Node.LAST_PROP);
110:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
111:       assertEquals(47, Node.IS_DISPATCHER);
112:       assertEquals(2, Node.POST_FLAG);
113:       assertEquals(30, Node.VAR_ARGS_NAME);
114:       assertEquals(40, Node.ORIGINALNAME_PROP);
115:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
116:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
117:       assertEquals(39, Node.EMPTY_BLOCK);
118:       assertEquals(48, Node.DIRECTIVES);
119:       assertEquals(54, Node.SLASH_V);
120:       assertEquals(8, Node.FLAG_NO_THROWS);
121:       assertEquals(52, Node.LENGTH);
122:       assertEquals(57, Node.REFLECTED_OBJECT);
123:       assertEquals(50, Node.FREE_CALL);
124:       assertEquals(1, Node.DECR_FLAG);
125:       assertEquals(4095, Node.COLUMN_MASK);
126:       assertEquals(32, Node.INCRDECR_PROP);
127:       assertEquals(49, Node.DIRECT_EVAL);
128:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
129:       assertEquals(12, Node.COLUMN_BITS);
130:       
131:       boolean boolean0 = node0.isEmpty();
132:       assertFalse(node0.isArrayLit());
133:       assertFalse(node0.isFor());
134:       assertFalse(node0.isEmpty());
135:       assertFalse(node0.isGetterDef());
136:       assertFalse(node0.isFunction());
137:       assertFalse(node0.isTry());
138:       assertFalse(node0.isDefaultCase());
139:       assertFalse(node0.isCatch());
140:       assertFalse(node0.isIn());
141:       assertFalse(node0.isRegExp());
142:       assertFalse(node0.isNE());
143:       assertFalse(node0.isTrue());
144:       assertFalse(node0.isNull());
145:       assertFalse(node0.isIf());
146:       assertFalse(node0.isVoid());
147:       assertFalse(node0.isName());
148:       assertFalse(node0.isDelProp());
149:       assertFalse(node0.isVar());
150:       assertFalse(node0.isHook());
151:       assertFalse(node0.isBlock());
152:       assertFalse(node0.isThis());
153:       assertFalse(node0.isAdd());
154:       assertFalse(node0.isDo());
155:       assertFalse(node0.isCase());
156:       assertFalse(node0.isNew());
157:       assertTrue(node0.isString());
158:       assertFalse(node0.isLabel());
159:       assertEquals(0, node0.getChildCount());
160:       assertFalse(node0.isSwitch());
161:       assertFalse(node0.isParamList());
162:       assertEquals((-1), node0.getCharno());
163:       assertFalse(node0.isLabelName());
164:       assertFalse(node0.isStringKey());
165:       assertFalse(node0.isCast());
166:       assertFalse(node0.hasOneChild());
167:       assertFalse(node0.isGetElem());
168:       assertFalse(node0.isAssign());
169:       assertFalse(node0.isDec());
170:       assertFalse(node0.isNumber());
171:       assertFalse(node0.isTypeOf());
172:       assertFalse(node0.isScript());
173:       assertFalse(node0.hasChildren());
174:       assertFalse(node0.isAssignAdd());
175:       assertFalse(node0.hasMoreThanOneChild());
176:       assertFalse(node0.isInstanceOf());
177:       assertFalse(node0.isReturn());
178:       assertFalse(node0.isOr());
179:       assertFalse(node0.isWith());
180:       assertFalse(node0.isBreak());
181:       assertFalse(node0.isExprResult());
182:       assertEquals((-1), node0.getLineno());
183:       assertFalse(node0.isThrow());
184:       assertFalse(node0.isCall());
185:       assertFalse(node0.isFalse());
186:       assertFalse(node0.isSetterDef());
187:       assertFalse(node0.isComma());
188:       assertFalse(node0.isGetProp());
189:       assertFalse(node0.isInc());
190:       assertFalse(node0.isWhile());
191:       assertFalse(node0.isAnd());
192:       assertEquals(40, node0.getType());
193:       assertFalse(node0.isNot());
194:       assertFalse(node0.isContinue());
195:       assertFalse(node0.isObjectLit());
196:       assertEquals((-1), node0.getSourcePosition());
197:       assertFalse(node0.isDebugger());
198:       assertFalse(boolean0);
199:       assertEquals(29, Node.JSDOC_INFO_PROP);
200:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
201:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
202:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
203:       assertEquals(37, Node.OPT_ARG_NAME);
204:       assertEquals(53, Node.INPUT_ID);
205:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
206:       assertEquals(43, Node.IS_CONSTANT_NAME);
207:       assertEquals(56, Node.CHANGE_TIME);
208:       assertEquals(46, Node.IS_NAMESPACE);
209:       assertEquals(51, Node.STATIC_SOURCE_FILE);
210:       assertEquals(36, Node.QUOTED_PROP);
211:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
212:       assertEquals(55, Node.INFERRED_FUNCTION);
213:       assertEquals(15, Node.NO_SIDE_EFFECTS);
214:       assertEquals(57, Node.LAST_PROP);
215:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
216:       assertEquals(47, Node.IS_DISPATCHER);
217:       assertEquals(2, Node.POST_FLAG);
218:       assertEquals(30, Node.VAR_ARGS_NAME);
219:       assertEquals(40, Node.ORIGINALNAME_PROP);
220:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
221:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
222:       assertEquals(39, Node.EMPTY_BLOCK);
223:       assertEquals(48, Node.DIRECTIVES);
224:       assertEquals(54, Node.SLASH_V);
225:       assertEquals(8, Node.FLAG_NO_THROWS);
226:       assertEquals(52, Node.LENGTH);
227:       assertEquals(57, Node.REFLECTED_OBJECT);
228:       assertEquals(50, Node.FREE_CALL);
229:       assertEquals(1, Node.DECR_FLAG);
230:       assertEquals(4095, Node.COLUMN_MASK);
231:       assertEquals(32, Node.INCRDECR_PROP);
232:       assertEquals(49, Node.DIRECT_EVAL);
233:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
234:       assertEquals(12, Node.COLUMN_BITS);
235:       
236:       boolean boolean1 = node0.isLocalResultCall();
237:       assertFalse(node0.isArrayLit());
238:       assertFalse(node0.isFor());
239:       assertFalse(node0.isEmpty());
240:       assertFalse(node0.isGetterDef());
241:       assertFalse(node0.isFunction());
242:       assertFalse(node0.isTry());
243:       assertFalse(node0.isDefaultCase());
244:       assertFalse(node0.isCatch());
245:       assertFalse(node0.isIn());
246:       assertFalse(node0.isRegExp());
247:       assertFalse(node0.isNE());
248:       assertFalse(node0.isTrue());
249:       assertFalse(node0.isNull());
250:       assertFalse(node0.isIf());
251:       assertFalse(node0.isVoid());
252:       assertFalse(node0.isName());
253:       assertFalse(node0.isDelProp());
254:       assertFalse(node0.isVar());
255:       assertFalse(node0.isHook());
256:       assertFalse(node0.isBlock());
257:       assertFalse(node0.isThis());
258:       assertFalse(node0.isAdd());
259:       assertFalse(node0.isDo());
260:       assertFalse(node0.isCase());
261:       assertFalse(node0.isNew());
262:       assertTrue(node0.isString());
263:       assertFalse(node0.isLabel());
264:       assertEquals(0, node0.getChildCount());
265:       assertFalse(node0.isSwitch());
266:       assertFalse(node0.isParamList());
267:       assertEquals((-1), node0.getCharno());
268:       assertFalse(node0.isLabelName());
269:       assertFalse(node0.isStringKey());
270:       assertFalse(node0.isCast());
271:       assertFalse(node0.hasOneChild());
272:       assertFalse(node0.isGetElem());
273:       assertFalse(node0.isAssign());
274:       assertFalse(node0.isDec());
275:       assertFalse(node0.isNumber());
276:       assertFalse(node0.isTypeOf());
277:       assertFalse(node0.isScript());
278:       assertFalse(node0.hasChildren());
279:       assertFalse(node0.isAssignAdd());
280:       assertFalse(node0.hasMoreThanOneChild());
281:       assertFalse(node0.isInstanceOf());
282:       assertFalse(node0.isReturn());
283:       assertFalse(node0.isOr());
284:       assertFalse(node0.isWith());
285:       assertFalse(node0.isBreak());
286:       assertFalse(node0.isExprResult());
287:       assertEquals((-1), node0.getLineno());
288:       assertFalse(node0.isThrow());
289:       assertFalse(node0.isCall());
290:       assertFalse(node0.isFalse());
291:       assertFalse(node0.isSetterDef());
292:       assertFalse(node0.isComma());
293:       assertFalse(node0.isGetProp());
294:       assertFalse(node0.isInc());
295:       assertFalse(node0.isWhile());
296:       assertFalse(node0.isAnd());
297:       assertEquals(40, node0.getType());
298:       assertFalse(node0.isNot());
299:       assertFalse(node0.isContinue());
300:       assertFalse(node0.isObjectLit());
301:       assertEquals((-1), node0.getSourcePosition());
302:       assertFalse(node0.isDebugger());
303:       assertFalse(boolean1);
304:       assertTrue(boolean1 == boolean0);
305:       assertEquals(29, Node.JSDOC_INFO_PROP);
306:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
307:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
308:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
309:       assertEquals(37, Node.OPT_ARG_NAME);
310:       assertEquals(53, Node.INPUT_ID);
311:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
312:       assertEquals(43, Node.IS_CONSTANT_NAME);
313:       assertEquals(56, Node.CHANGE_TIME);
314:       assertEquals(46, Node.IS_NAMESPACE);
315:       assertEquals(51, Node.STATIC_SOURCE_FILE);
316:       assertEquals(36, Node.QUOTED_PROP);
317:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
318:       assertEquals(55, Node.INFERRED_FUNCTION);
319:       assertEquals(15, Node.NO_SIDE_EFFECTS);
320:       assertEquals(57, Node.LAST_PROP);
321:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
322:       assertEquals(47, Node.IS_DISPATCHER);
323:       assertEquals(2, Node.POST_FLAG);
324:       assertEquals(30, Node.VAR_ARGS_NAME);
325:       assertEquals(40, Node.ORIGINALNAME_PROP);
326:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
327:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
328:       assertEquals(39, Node.EMPTY_BLOCK);
329:       assertEquals(48, Node.DIRECTIVES);
330:       assertEquals(54, Node.SLASH_V);
331:       assertEquals(8, Node.FLAG_NO_THROWS);
332:       assertEquals(52, Node.LENGTH);
333:       assertEquals(57, Node.REFLECTED_OBJECT);
334:       assertEquals(50, Node.FREE_CALL);
335:       assertEquals(1, Node.DECR_FLAG);
336:       assertEquals(4095, Node.COLUMN_MASK);
337:       assertEquals(32, Node.INCRDECR_PROP);
338:       assertEquals(49, Node.DIRECT_EVAL);
339:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
340:       assertEquals(12, Node.COLUMN_BITS);
341:       
342:       node0.detachChildren();
343:       assertFalse(node0.isArrayLit());
344:       assertFalse(node0.isFor());
345:       assertFalse(node0.isEmpty());
346:       assertFalse(node0.isGetterDef());
347:       assertFalse(node0.isFunction());
348:       assertFalse(node0.isTry());
349:       assertFalse(node0.isDefaultCase());
350:       assertFalse(node0.isCatch());
351:       assertFalse(node0.isIn());
352:       assertFalse(node0.isRegExp());
353:       assertFalse(node0.isNE());
354:       assertFalse(node0.isTrue());
355:       assertFalse(node0.isNull());
356:       assertFalse(node0.isIf());
357:       assertFalse(node0.isVoid());
358:       assertFalse(node0.isName());
359:       assertFalse(node0.isDelProp());
360:       assertFalse(node0.isVar());
361:       assertFalse(node0.isHook());
362:       assertFalse(node0.isBlock());
363:       assertFalse(node0.isThis());
364:       assertFalse(node0.isAdd());
365:       assertFalse(node0.isDo());
366:       assertFalse(node0.isCase());
367:       assertFalse(node0.isNew());
368:       assertTrue(node0.isString());
369:       assertFalse(node0.isLabel());
370:       assertEquals(0, node0.getChildCount());
371:       assertFalse(node0.isSwitch());
372:       assertFalse(node0.isParamList());
373:       assertEquals((-1), node0.getCharno());
374:       assertFalse(node0.isLabelName());
375:       assertFalse(node0.isStringKey());
376:       assertFalse(node0.isCast());
377:       assertFalse(node0.hasOneChild());
378:       assertFalse(node0.isGetElem());
379:       assertFalse(node0.isAssign());
380:       assertFalse(node0.isDec());
381:       assertFalse(node0.isNumber());
382:       assertFalse(node0.isTypeOf());
383:       assertFalse(node0.isScript());
384:       assertFalse(node0.hasChildren());
385:       assertFalse(node0.isAssignAdd());
386:       assertFalse(node0.hasMoreThanOneChild());
387:       assertFalse(node0.isInstanceOf());
388:       assertFalse(node0.isReturn());
389:       assertFalse(node0.isOr());
390:       assertFalse(node0.isWith());
391:       assertFalse(node0.isBreak());
392:       assertFalse(node0.isExprResult());
393:       assertEquals((-1), node0.getLineno());
394:       assertFalse(node0.isThrow());
395:       assertFalse(node0.isCall());
396:       assertFalse(node0.isFalse());
397:       assertFalse(node0.isSetterDef());
398:       assertFalse(node0.isComma());
399:       assertFalse(node0.isGetProp());
400:       assertFalse(node0.isInc());
401:       assertFalse(node0.isWhile());
402:       assertFalse(node0.isAnd());
403:       assertEquals(40, node0.getType());
404:       assertFalse(node0.isNot());
405:       assertFalse(node0.isContinue());
406:       assertFalse(node0.isObjectLit());
407:       assertEquals((-1), node0.getSourcePosition());
408:       assertFalse(node0.isDebugger());
409:       assertEquals(29, Node.JSDOC_INFO_PROP);
410:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
411:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
412:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
413:       assertEquals(37, Node.OPT_ARG_NAME);
414:       assertEquals(53, Node.INPUT_ID);
415:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
416:       assertEquals(43, Node.IS_CONSTANT_NAME);
417:       assertEquals(56, Node.CHANGE_TIME);
418:       assertEquals(46, Node.IS_NAMESPACE);
419:       assertEquals(51, Node.STATIC_SOURCE_FILE);
420:       assertEquals(36, Node.QUOTED_PROP);
421:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
422:       assertEquals(55, Node.INFERRED_FUNCTION);
423:       assertEquals(15, Node.NO_SIDE_EFFECTS);
424:       assertEquals(57, Node.LAST_PROP);
425:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
426:       assertEquals(47, Node.IS_DISPATCHER);
427:       assertEquals(2, Node.POST_FLAG);
428:       assertEquals(30, Node.VAR_ARGS_NAME);
429:       assertEquals(40, Node.ORIGINALNAME_PROP);
430:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
431:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
432:       assertEquals(39, Node.EMPTY_BLOCK);
433:       assertEquals(48, Node.DIRECTIVES);
434:       assertEquals(54, Node.SLASH_V);
435:       assertEquals(8, Node.FLAG_NO_THROWS);
436:       assertEquals(52, Node.LENGTH);
437:       assertEquals(57, Node.REFLECTED_OBJECT);
438:       assertEquals(50, Node.FREE_CALL);
439:       assertEquals(1, Node.DECR_FLAG);
440:       assertEquals(4095, Node.COLUMN_MASK);
441:       assertEquals(32, Node.INCRDECR_PROP);
442:       assertEquals(49, Node.DIRECT_EVAL);
443:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
444:       assertEquals(12, Node.COLUMN_BITS);
445:       
446:       Node node1 = new Node(39, 3053, 4095);
447:       assertFalse(node1.isRegExp());
448:       assertFalse(node1.isDefaultCase());
449:       assertFalse(node1.isTrue());
450:       assertFalse(node1.isTry());
451:       assertFalse(node1.isVoid());
452:       assertFalse(node1.isDebugger());
453:       assertFalse(node1.isGetterDef());
454:       assertFalse(node1.isNull());
455:       assertFalse(node1.isIf());
456:       assertFalse(node1.isNE());
457:       assertFalse(node1.isFor());
458:       assertFalse(node1.isName());
459:       assertTrue(node1.isNumber());
460:       assertFalse(node1.isDelProp());
461:       assertFalse(node1.isCall());
462:       assertFalse(node1.isCatch());
463:       assertFalse(node1.isBlock());
464:       assertFalse(node1.isWhile());
465:       assertFalse(node1.isInc());
466:       assertFalse(node1.isString());
467:       assertFalse(node1.isIn());
468:       assertFalse(node1.isSetterDef());
469:       assertFalse(node1.isCast());
470:       assertFalse(node1.isThrow());
471:       assertFalse(node1.isFalse());
472:       assertFalse(node1.isContinue());
473:       assertFalse(node1.isFunction());
474:       assertFalse(node1.isExprResult());
475:       assertFalse(node1.isScript());
476:       assertFalse(node1.isAnd());
477:       assertFalse(node1.hasOneChild());
478:       assertFalse(node1.isObjectLit());
479:       assertFalse(node1.isNot());
480:       assertFalse(node1.isTypeOf());
481:       assertFalse(node1.isDec());
482:       assertFalse(node1.hasChildren());
483:       assertFalse(node1.isBreak());
484:       assertFalse(node1.isThis());
485:       assertEquals(12509183, node1.getSourcePosition());
486:       assertFalse(node1.isGetElem());
487:       assertFalse(node1.isGetProp());
488:       assertFalse(node1.isInstanceOf());
489:       assertFalse(node1.isHook());
490:       assertFalse(node1.hasMoreThanOneChild());
491:       assertFalse(node1.isReturn());
492:       assertFalse(node1.isWith());
493:       assertEquals(39, node1.getType());
494:       assertFalse(node1.isComma());
495:       assertFalse(node1.isAssign());
496:       assertFalse(node1.isSwitch());
497:       assertFalse(node1.isCase());
498:       assertFalse(node1.isNew());
499:       assertFalse(node1.isDo());
500:       assertFalse(node1.isAdd());
501:       assertFalse(node1.isOr());
502:       assertEquals(4095, node1.getCharno());
503:       assertFalse(node1.isParamList());
504:       assertFalse(node1.isEmpty());
505:       assertFalse(node1.isStringKey());
506:       assertFalse(node1.isAssignAdd());
507:       assertFalse(node1.isLabelName());
508:       assertEquals(3053, node1.getLineno());
509:       assertFalse(node1.isArrayLit());
510:       assertFalse(node1.isVar());
511:       assertFalse(node1.isLabel());
512:       assertEquals(0, node1.getChildCount());
513:       assertNotNull(node1);
514:       assertFalse(node1.equals((Object)node0));
515:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
516:       assertEquals(43, Node.IS_CONSTANT_NAME);
517:       assertEquals(36, Node.QUOTED_PROP);
518:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
519:       assertEquals(4095, Node.COLUMN_MASK);
520:       assertEquals(37, Node.OPT_ARG_NAME);
521:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
522:       assertEquals(8, Node.FLAG_NO_THROWS);
523:       assertEquals(39, Node.EMPTY_BLOCK);
524:       assertEquals(2, Node.POST_FLAG);
525:       assertEquals(48, Node.DIRECTIVES);
526:       assertEquals(56, Node.CHANGE_TIME);
527:       assertEquals(47, Node.IS_DISPATCHER);
528:       assertEquals(55, Node.INFERRED_FUNCTION);
529:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
530:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
531:       assertEquals(29, Node.JSDOC_INFO_PROP);
532:       assertEquals(53, Node.INPUT_ID);
533:       assertEquals(15, Node.NO_SIDE_EFFECTS);
534:       assertEquals(54, Node.SLASH_V);
535:       assertEquals(52, Node.LENGTH);
536:       assertEquals(57, Node.LAST_PROP);
537:       assertEquals(30, Node.VAR_ARGS_NAME);
538:       assertEquals(57, Node.REFLECTED_OBJECT);
539:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
540:       assertEquals(40, Node.ORIGINALNAME_PROP);
541:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
542:       assertEquals(49, Node.DIRECT_EVAL);
543:       assertEquals(46, Node.IS_NAMESPACE);
544:       assertEquals(50, Node.FREE_CALL);
545:       assertEquals(51, Node.STATIC_SOURCE_FILE);
546:       assertEquals(12, Node.COLUMN_BITS);
547:       assertEquals(1, Node.DECR_FLAG);
548:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
549:       assertEquals(32, Node.INCRDECR_PROP);
550:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
551:       
552:       boolean boolean2 = node1.wasEmptyNode();
553:       assertFalse(node1.isRegExp());
554:       assertFalse(node1.isDefaultCase());
555:       assertFalse(node1.isTrue());
556:       assertFalse(node1.isTry());
557:       assertFalse(node1.isVoid());
558:       assertFalse(node1.isDebugger());
559:       assertFalse(node1.isGetterDef());
560:       assertFalse(node1.isNull());
561:       assertFalse(node1.isIf());
562:       assertFalse(node1.isNE());
563:       assertFalse(node1.isFor());
564:       assertFalse(node1.isName());
565:       assertTrue(node1.isNumber());
566:       assertFalse(node1.isDelProp());
567:       assertFalse(node1.isCall());
568:       assertFalse(node1.isCatch());
569:       assertFalse(node1.isBlock());
570:       assertFalse(node1.isWhile());
571:       assertFalse(node1.isInc());
572:       assertFalse(node1.isString());
573:       assertFalse(node1.isIn());
574:       assertFalse(node1.isSetterDef());
575:       assertFalse(node1.isCast());
576:       assertFalse(node1.isThrow());
577:       assertFalse(node1.isFalse());
578:       assertFalse(node1.isContinue());
579:       assertFalse(node1.isFunction());
580:       assertFalse(node1.isExprResult());
581:       assertFalse(node1.isScript());
582:       assertFalse(node1.isAnd());
583:       assertFalse(node1.hasOneChild());
584:       assertFalse(node1.isObjectLit());
585:       assertFalse(node1.isNot());
586:       assertFalse(node1.isTypeOf());
587:       assertFalse(node1.isDec());
588:       assertFalse(node1.hasChildren());
589:       assertFalse(node1.isBreak());
590:       assertFalse(node1.isThis());
591:       assertEquals(12509183, node1.getSourcePosition());
592:       assertFalse(node1.isGetElem());
593:       assertFalse(node1.isGetProp());
594:       assertFalse(node1.isInstanceOf());
595:       assertFalse(node1.isHook());
596:       assertFalse(node1.hasMoreThanOneChild());
597:       assertFalse(node1.isReturn());
598:       assertFalse(node1.isWith());
599:       assertEquals(39, node1.getType());
600:       assertFalse(node1.isComma());
601:       assertFalse(node1.isAssign());
602:       assertFalse(node1.isSwitch());
603:       assertFalse(node1.isCase());
604:       assertFalse(node1.isNew());
605:       assertFalse(node1.isDo());
606:       assertFalse(node1.isAdd());
607:       assertFalse(node1.isOr());
608:       assertEquals(4095, node1.getCharno());
609:       assertFalse(node1.isParamList());
610:       assertFalse(node1.isEmpty());
611:       assertFalse(node1.isStringKey());
612:       assertFalse(node1.isAssignAdd());
613:       assertFalse(node1.isLabelName());
614:       assertEquals(3053, node1.getLineno());
615:       assertFalse(node1.isArrayLit());
616:       assertFalse(node1.isVar());
617:       assertFalse(node1.isLabel());
618:       assertEquals(0, node1.getChildCount());
619:       assertFalse(boolean2);
620:       assertFalse(node1.equals((Object)node0));
621:       assertTrue(boolean2 == boolean0);
622:       assertTrue(boolean2 == boolean1);
623:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
624:       assertEquals(43, Node.IS_CONSTANT_NAME);
625:       assertEquals(36, Node.QUOTED_PROP);
626:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
627:       assertEquals(4095, Node.COLUMN_MASK);
628:       assertEquals(37, Node.OPT_ARG_NAME);
629:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
630:       assertEquals(8, Node.FLAG_NO_THROWS);
631:       assertEquals(39, Node.EMPTY_BLOCK);
632:       assertEquals(2, Node.POST_FLAG);
633:       assertEquals(48, Node.DIRECTIVES);
634:       assertEquals(56, Node.CHANGE_TIME);
635:       assertEquals(47, Node.IS_DISPATCHER);
636:       assertEquals(55, Node.INFERRED_FUNCTION);
637:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
638:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
639:       assertEquals(29, Node.JSDOC_INFO_PROP);
640:       assertEquals(53, Node.INPUT_ID);
641:       assertEquals(15, Node.NO_SIDE_EFFECTS);
642:       assertEquals(54, Node.SLASH_V);
643:       assertEquals(52, Node.LENGTH);
644:       assertEquals(57, Node.LAST_PROP);
645:       assertEquals(30, Node.VAR_ARGS_NAME);
646:       assertEquals(57, Node.REFLECTED_OBJECT);
647:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
648:       assertEquals(40, Node.ORIGINALNAME_PROP);
649:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
650:       assertEquals(49, Node.DIRECT_EVAL);
651:       assertEquals(46, Node.IS_NAMESPACE);
652:       assertEquals(50, Node.FREE_CALL);
653:       assertEquals(51, Node.STATIC_SOURCE_FILE);
654:       assertEquals(12, Node.COLUMN_BITS);
655:       assertEquals(1, Node.DECR_FLAG);
656:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
657:       assertEquals(32, Node.INCRDECR_PROP);
658:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
659:       
660:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
661:       assertNotNull(simpleErrorReporter0);
662:       
663:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
664:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
665:       assertNotNull(jSTypeRegistry0);
666:       
667:       JSType[] jSTypeArray0 = new JSType[0];
668:       Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
669:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
670:       assertFalse(node2.isNumber());
671:       assertFalse(node2.isDec());
672:       assertFalse(node2.hasChildren());
673:       assertEquals((-1), node2.getSourcePosition());
674:       assertFalse(node2.isAssign());
675:       assertFalse(node2.isLabelName());
676:       assertFalse(node2.isTypeOf());
677:       assertFalse(node2.isCast());
678:       assertFalse(node2.isGetElem());
679:       assertEquals((-1), node2.getLineno());
680:       assertFalse(node2.isOr());
681:       assertFalse(node2.isDo());
682:       assertFalse(node2.isContinue());
683:       assertFalse(node2.isNew());
684:       assertFalse(node2.isAdd());
685:       assertFalse(node2.isAssignAdd());
686:       assertFalse(node2.isLabel());
687:       assertFalse(node2.isVar());
688:       assertFalse(node2.isBreak());
689:       assertEquals(83, node2.getType());
690:       assertFalse(node2.isComma());
691:       assertFalse(node2.isName());
692:       assertFalse(node2.isFalse());
693:       assertFalse(node2.isGetProp());
694:       assertFalse(node2.isCall());
695:       assertFalse(node2.isObjectLit());
696:       assertTrue(node2.isParamList());
697:       assertFalse(node2.isAnd());
698:       assertFalse(node2.isNull());
699:       assertFalse(node2.isWhile());
700:       assertFalse(node2.isString());
701:       assertFalse(node2.isNot());
702:       assertFalse(node2.isVoid());
703:       assertFalse(node2.isExprResult());
704:       assertFalse(node2.isReturn());
705:       assertFalse(node2.isIf());
706:       assertFalse(node2.isDelProp());
707:       assertFalse(node2.isGetterDef());
708:       assertFalse(node2.isEmpty());
709:       assertFalse(node2.isIn());
710:       assertFalse(node2.isArrayLit());
711:       assertFalse(node2.isDebugger());
712:       assertFalse(node2.isNE());
713:       assertFalse(node2.isTrue());
714:       assertFalse(node2.isDefaultCase());
715:       assertFalse(node2.isSwitch());
716:       assertFalse(node2.isFunction());
717:       assertFalse(node2.isInc());
718:       assertEquals(0, node2.getChildCount());
719:       assertFalse(node2.isThrow());
720:       assertFalse(node2.isSetterDef());
721:       assertFalse(node2.isStringKey());
722:       assertEquals((-1), node2.getCharno());
723:       assertFalse(node2.isWith());
724:       assertFalse(node2.isRegExp());
725:       assertFalse(node2.isCase());
726:       assertFalse(node2.isCatch());
727:       assertFalse(node2.isScript());
728:       assertFalse(node2.hasOneChild());
729:       assertFalse(node2.isInstanceOf());
730:       assertFalse(node2.isHook());
731:       assertFalse(node2.hasMoreThanOneChild());
732:       assertFalse(node2.isTry());
733:       assertFalse(node2.isBlock());
734:       assertFalse(node2.isThis());
735:       assertFalse(node2.isFor());
736:       assertEquals(0, jSTypeArray0.length);
737:       assertNotNull(node2);
738:       assertFalse(node2.equals((Object)node0));
739:       assertFalse(node2.equals((Object)node1));
740:       assertEquals(2, Node.POST_FLAG);
741:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
742:       assertEquals(47, Node.IS_DISPATCHER);
743:       assertEquals(37, Node.OPT_ARG_NAME);
744:       assertEquals(32, Node.INCRDECR_PROP);
745:       assertEquals(46, Node.IS_NAMESPACE);
746:       assertEquals(56, Node.CHANGE_TIME);
747:       assertEquals(12, Node.COLUMN_BITS);
748:       assertEquals(30, Node.VAR_ARGS_NAME);
749:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
750:       assertEquals(54, Node.SLASH_V);
751:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
752:       assertEquals(43, Node.IS_CONSTANT_NAME);
753:       assertEquals(1, Node.DECR_FLAG);
754:       assertEquals(51, Node.STATIC_SOURCE_FILE);
755:       assertEquals(50, Node.FREE_CALL);
756:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
757:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
758:       assertEquals(8, Node.FLAG_NO_THROWS);
759:       assertEquals(39, Node.EMPTY_BLOCK);
760:       assertEquals(48, Node.DIRECTIVES);
761:       assertEquals(40, Node.ORIGINALNAME_PROP);
762:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
763:       assertEquals(4095, Node.COLUMN_MASK);
764:       assertEquals(15, Node.NO_SIDE_EFFECTS);
765:       assertEquals(36, Node.QUOTED_PROP);
766:       assertEquals(49, Node.DIRECT_EVAL);
767:       assertEquals(57, Node.LAST_PROP);
768:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
769:       assertEquals(55, Node.INFERRED_FUNCTION);
770:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
771:       assertEquals(57, Node.REFLECTED_OBJECT);
772:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
773:       assertEquals(52, Node.LENGTH);
774:       assertEquals(29, Node.JSDOC_INFO_PROP);
775:       assertEquals(53, Node.INPUT_ID);
776:       
777:       boolean boolean3 = node2.isNoSideEffectsCall();
778:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
779:       assertFalse(node2.isNumber());
780:       assertFalse(node2.isDec());
781:       assertFalse(node2.hasChildren());
782:       assertEquals((-1), node2.getSourcePosition());
783:       assertFalse(node2.isAssign());
784:       assertFalse(node2.isLabelName());
785:       assertFalse(node2.isTypeOf());
786:       assertFalse(node2.isCast());
787:       assertFalse(node2.isGetElem());
788:       assertEquals((-1), node2.getLineno());
789:       assertFalse(node2.isOr());
790:       assertFalse(node2.isDo());
791:       assertFalse(node2.isContinue());
792:       assertFalse(node2.isNew());
793:       assertFalse(node2.isAdd());
794:       assertFalse(node2.isAssignAdd());
795:       assertFalse(node2.isLabel());
796:       assertFalse(node2.isVar());
797:       assertFalse(node2.isBreak());
798:       assertEquals(83, node2.getType());
799:       assertFalse(node2.isComma());
800:       assertFalse(node2.isName());
801:       assertFalse(node2.isFalse());
802:       assertFalse(node2.isGetProp());
803:       assertFalse(node2.isCall());
804:       assertFalse(node2.isObjectLit());
805:       assertTrue(node2.isParamList());
806:       assertFalse(node2.isAnd());
807:       assertFalse(node2.isNull());
808:       assertFalse(node2.isWhile());
809:       assertFalse(node2.isString());
810:       assertFalse(node2.isNot());
811:       assertFalse(node2.isVoid());
812:       assertFalse(node2.isExprResult());
813:       assertFalse(node2.isReturn());
814:       assertFalse(node2.isIf());
815:       assertFalse(node2.isDelProp());
816:       assertFalse(node2.isGetterDef());
817:       assertFalse(node2.isEmpty());
818:       assertFalse(node2.isIn());
819:       assertFalse(node2.isArrayLit());
820:       assertFalse(node2.isDebugger());
821:       assertFalse(node2.isNE());
822:       assertFalse(node2.isTrue());
823:       assertFalse(node2.isDefaultCase());
824:       assertFalse(node2.isSwitch());
825:       assertFalse(node2.isFunction());
826:       assertFalse(node2.isInc());
827:       assertEquals(0, node2.getChildCount());
828:       assertFalse(node2.isThrow());
829:       assertFalse(node2.isSetterDef());
830:       assertFalse(node2.isStringKey());
831:       assertEquals((-1), node2.getCharno());
832:       assertFalse(node2.isWith());
833:       assertFalse(node2.isRegExp());
834:       assertFalse(node2.isCase());
835:       assertFalse(node2.isCatch());
836:       assertFalse(node2.isScript());
837:       assertFalse(node2.hasOneChild());
838:       assertFalse(node2.isInstanceOf());
839:       assertFalse(node2.isHook());
840:       assertFalse(node2.hasMoreThanOneChild());
841:       assertFalse(node2.isTry());
842:       assertFalse(node2.isBlock());
843:       assertFalse(node2.isThis());
844:       assertFalse(node2.isFor());
845:       assertFalse(boolean3);
846:       assertEquals(0, jSTypeArray0.length);
847:       assertFalse(node2.equals((Object)node0));
848:       assertFalse(node2.equals((Object)node1));
849:       assertTrue(boolean3 == boolean2);
850:       assertTrue(boolean3 == boolean0);
851:       assertTrue(boolean3 == boolean1);
852:       assertEquals(2, Node.POST_FLAG);
853:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
854:       assertEquals(47, Node.IS_DISPATCHER);
855:       assertEquals(37, Node.OPT_ARG_NAME);
856:       assertEquals(32, Node.INCRDECR_PROP);
857:       assertEquals(46, Node.IS_NAMESPACE);
858:       assertEquals(56, Node.CHANGE_TIME);
859:       assertEquals(12, Node.COLUMN_BITS);
860:       assertEquals(30, Node.VAR_ARGS_NAME);
861:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
862:       assertEquals(54, Node.SLASH_V);
863:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
864:       assertEquals(43, Node.IS_CONSTANT_NAME);
865:       assertEquals(1, Node.DECR_FLAG);
866:       assertEquals(51, Node.STATIC_SOURCE_FILE);
867:       assertEquals(50, Node.FREE_CALL);
868:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
869:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
870:       assertEquals(8, Node.FLAG_NO_THROWS);
871:       assertEquals(39, Node.EMPTY_BLOCK);
872:       assertEquals(48, Node.DIRECTIVES);
873:       assertEquals(40, Node.ORIGINALNAME_PROP);
874:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
875:       assertEquals(4095, Node.COLUMN_MASK);
876:       assertEquals(15, Node.NO_SIDE_EFFECTS);
877:       assertEquals(36, Node.QUOTED_PROP);
878:       assertEquals(49, Node.DIRECT_EVAL);
879:       assertEquals(57, Node.LAST_PROP);
880:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
881:       assertEquals(55, Node.INFERRED_FUNCTION);
882:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
883:       assertEquals(57, Node.REFLECTED_OBJECT);
884:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
885:       assertEquals(52, Node.LENGTH);
886:       assertEquals(29, Node.JSDOC_INFO_PROP);
887:       assertEquals(53, Node.INPUT_ID);
888:       
889:       Node node3 = node1.useSourceInfoFromForTree(node2);
890:       assertFalse(node1.isRegExp());
891:       assertFalse(node1.isDefaultCase());
892:       assertFalse(node1.isTrue());
893:       assertFalse(node1.isTry());
894:       assertFalse(node1.isVoid());
895:       assertFalse(node1.isDebugger());
896:       assertFalse(node1.isGetterDef());
897:       assertFalse(node1.isNull());
898:       assertFalse(node1.isIf());
899:       assertFalse(node1.isNE());
900:       assertFalse(node1.isFor());
901:       assertFalse(node1.isName());
902:       assertTrue(node1.isNumber());
903:       assertFalse(node1.isDelProp());
904:       assertFalse(node1.isCall());
905:       assertFalse(node1.isCatch());
906:       assertFalse(node1.isBlock());
907:       assertFalse(node1.isWhile());
908:       assertFalse(node1.isInc());
909:       assertFalse(node1.isString());
910:       assertFalse(node1.isIn());
911:       assertEquals((-1), node1.getSourcePosition());
912:       assertFalse(node1.isSetterDef());
913:       assertFalse(node1.isCast());
914:       assertFalse(node1.isThrow());
915:       assertFalse(node1.isFalse());
916:       assertFalse(node1.isContinue());
917:       assertFalse(node1.isFunction());
918:       assertFalse(node1.isExprResult());
919:       assertFalse(node1.isScript());
920:       assertFalse(node1.isAnd());
921:       assertFalse(node1.hasOneChild());
922:       assertFalse(node1.isObjectLit());
923:       assertFalse(node1.isNot());
924:       assertFalse(node1.isTypeOf());
925:       assertFalse(node1.isDec());
926:       assertFalse(node1.hasChildren());
927:       assertFalse(node1.isBreak());
928:       assertFalse(node1.isThis());
929:       assertFalse(node1.isGetElem());
930:       assertFalse(node1.isGetProp());
931:       assertEquals((-1), node1.getLineno());
932:       assertFalse(node1.isInstanceOf());
933:       assertFalse(node1.isHook());
934:       assertFalse(node1.hasMoreThanOneChild());
935:       assertFalse(node1.isReturn());
936:       assertFalse(node1.isWith());
937:       assertEquals(39, node1.getType());
938:       assertFalse(node1.isComma());
939:       assertFalse(node1.isAssign());
940:       assertFalse(node1.isSwitch());
941:       assertFalse(node1.isCase());
942:       assertFalse(node1.isNew());
943:       assertFalse(node1.isDo());
944:       assertFalse(node1.isAdd());
945:       assertEquals((-1), node1.getCharno());
946:       assertFalse(node1.isOr());
947:       assertFalse(node1.isParamList());
948:       assertFalse(node1.isEmpty());
949:       assertFalse(node1.isStringKey());
950:       assertFalse(node1.isAssignAdd());
951:       assertFalse(node1.isLabelName());
952:       assertFalse(node1.isArrayLit());
953:       assertFalse(node1.isVar());
954:       assertFalse(node1.isLabel());
955:       assertEquals(0, node1.getChildCount());
956:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
957:       assertFalse(node2.isNumber());
958:       assertFalse(node2.isDec());
959:       assertFalse(node2.hasChildren());
960:       assertEquals((-1), node2.getSourcePosition());
961:       assertFalse(node2.isAssign());
962:       assertFalse(node2.isLabelName());
963:       assertFalse(node2.isTypeOf());
964:       assertFalse(node2.isCast());
965:       assertFalse(node2.isGetElem());
966:       assertEquals((-1), node2.getLineno());
967:       assertFalse(node2.isOr());
968:       assertFalse(node2.isDo());
969:       assertFalse(node2.isContinue());
970:       assertFalse(node2.isNew());
971:       assertFalse(node2.isAdd());
972:       assertFalse(node2.isAssignAdd());
973:       assertFalse(node2.isLabel());
974:       assertFalse(node2.isVar());
975:       assertFalse(node2.isBreak());
976:       assertEquals(83, node2.getType());
977:       assertFalse(node2.isComma());
978:       assertFalse(node2.isName());
979:       assertFalse(node2.isFalse());
980:       assertFalse(node2.isGetProp());
981:       assertFalse(node2.isCall());
982:       assertFalse(node2.isObjectLit());
983:       assertTrue(node2.isParamList());
984:       assertFalse(node2.isAnd());
985:       assertFalse(node2.isNull());
986:       assertFalse(node2.isWhile());
987:       assertFalse(node2.isString());
988:       assertFalse(node2.isNot());
989:       assertFalse(node2.isVoid());
990:       assertFalse(node2.isExprResult());
991:       assertFalse(node2.isReturn());
992:       assertFalse(node2.isIf());
993:       assertFalse(node2.isDelProp());
994:       assertFalse(node2.isGetterDef());
995:       assertFalse(node2.isEmpty());
996:       assertFalse(node2.isIn());
997:       assertFalse(node2.isArrayLit());
998:       assertFalse(node2.isDebugger());
999:       assertFalse(node2.isNE());
1000:       assertFalse(node2.isTrue());
1001:       assertFalse(node2.isDefaultCase());
1002:       assertFalse(node2.isSwitch());
1003:       assertFalse(node2.isFunction());
1004:       assertFalse(node2.isInc());
1005:       assertEquals(0, node2.getChildCount());
1006:       assertFalse(node2.isThrow());
1007:       assertFalse(node2.isSetterDef());
1008:       assertFalse(node2.isStringKey());
1009:       assertEquals((-1), node2.getCharno());
1010:       assertFalse(node2.isWith());
1011:       assertFalse(node2.isRegExp());
1012:       assertFalse(node2.isCase());
1013:       assertFalse(node2.isCatch());
1014:       assertFalse(node2.isScript());
1015:       assertFalse(node2.hasOneChild());
1016:       assertFalse(node2.isInstanceOf());
1017:       assertFalse(node2.isHook());
1018:       assertFalse(node2.hasMoreThanOneChild());
1019:       assertFalse(node2.isTry());
1020:       assertFalse(node2.isBlock());
1021:       assertFalse(node2.isThis());
1022:       assertFalse(node2.isFor());
1023:       assertFalse(node3.isDelProp());
1024:       assertFalse(node3.isGetterDef());
1025:       assertFalse(node3.isFor());
1026:       assertFalse(node3.isEmpty());
1027:       assertFalse(node3.isIf());
1028:       assertFalse(node3.isNE());
1029:       assertFalse(node3.isVoid());
1030:       assertFalse(node3.isArrayLit());
1031:       assertFalse(node3.isDefaultCase());
1032:       assertFalse(node3.isFunction());
1033:       assertFalse(node3.isTrue());
1034:       assertEquals(0, node3.getChildCount());
1035:       assertFalse(node3.isIn());
1036:       assertFalse(node3.isInc());
1037:       assertFalse(node3.isSetterDef());
1038:       assertFalse(node3.isName());
1039:       assertFalse(node3.isFalse());
1040:       assertFalse(node3.isThrow());
1041:       assertFalse(node3.isComma());
1042:       assertFalse(node3.isNull());
1043:       assertFalse(node3.isCall());
1044:       assertFalse(node3.isBreak());
1045:       assertFalse(node3.isNot());
1046:       assertFalse(node3.isWhile());
1047:       assertFalse(node3.isAnd());
1048:       assertFalse(node3.isString());
1049:       assertFalse(node3.isObjectLit());
1050:       assertFalse(node3.isDebugger());
1051:       assertTrue(node3.isNumber());
1052:       assertFalse(node3.isReturn());
1053:       assertFalse(node3.isGetProp());
1054:       assertFalse(node3.isAssign());
1055:       assertFalse(node3.isLabelName());
1056:       assertFalse(node3.isTypeOf());
1057:       assertFalse(node3.isDec());
1058:       assertFalse(node3.hasChildren());
1059:       assertEquals((-1), node3.getSourcePosition());
1060:       assertFalse(node3.isLabel());
1061:       assertEquals((-1), node3.getLineno());
1062:       assertFalse(node3.isCast());
1063:       assertFalse(node3.isExprResult());
1064:       assertFalse(node3.isGetElem());
1065:       assertFalse(node3.isDo());
1066:       assertFalse(node3.isContinue());
1067:       assertFalse(node3.isOr());
1068:       assertFalse(node3.isAssignAdd());
1069:       assertFalse(node3.isAdd());
1070:       assertFalse(node3.isNew());
1071:       assertFalse(node3.isStringKey());
1072:       assertFalse(node3.isThis());
1073:       assertFalse(node3.isVar());
1074:       assertFalse(node3.isHook());
1075:       assertFalse(node3.isInstanceOf());
1076:       assertFalse(node3.isParamList());
1077:       assertFalse(node3.isCatch());
1078:       assertFalse(node3.isSwitch());
1079:       assertFalse(node3.isWith());
1080:       assertEquals(39, node3.getType());
1081:       assertFalse(node3.hasMoreThanOneChild());
1082:       assertFalse(node3.isRegExp());
1083:       assertEquals((-1), node3.getCharno());
1084:       assertFalse(node3.isBlock());
1085:       assertFalse(node3.isTry());
1086:       assertFalse(node3.isScript());
1087:       assertFalse(node3.hasOneChild());
1088:       assertFalse(node3.isCase());
1089:       assertEquals(0, jSTypeArray0.length);
1090:       assertNotNull(node3);
1091:       assertFalse(node1.equals((Object)node0));
1092:       assertFalse(node1.equals((Object)node2));
1093:       assertFalse(node2.equals((Object)node0));
1094:       assertFalse(node2.equals((Object)node1));
1095:       assertFalse(node3.equals((Object)node0));
1096:       assertFalse(node3.equals((Object)node2));
1097:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1098:       assertEquals(43, Node.IS_CONSTANT_NAME);
1099:       assertEquals(36, Node.QUOTED_PROP);
1100:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1101:       assertEquals(4095, Node.COLUMN_MASK);
1102:       assertEquals(37, Node.OPT_ARG_NAME);
1103:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1104:       assertEquals(8, Node.FLAG_NO_THROWS);
1105:       assertEquals(39, Node.EMPTY_BLOCK);
1106:       assertEquals(2, Node.POST_FLAG);
1107:       assertEquals(48, Node.DIRECTIVES);
1108:       assertEquals(56, Node.CHANGE_TIME);
1109:       assertEquals(47, Node.IS_DISPATCHER);
1110:       assertEquals(55, Node.INFERRED_FUNCTION);
1111:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1112:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1113:       assertEquals(29, Node.JSDOC_INFO_PROP);
1114:       assertEquals(53, Node.INPUT_ID);
1115:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1116:       assertEquals(54, Node.SLASH_V);
1117:       assertEquals(52, Node.LENGTH);
1118:       assertEquals(57, Node.LAST_PROP);
1119:       assertEquals(30, Node.VAR_ARGS_NAME);
1120:       assertEquals(57, Node.REFLECTED_OBJECT);
1121:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1122:       assertEquals(40, Node.ORIGINALNAME_PROP);
1123:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1124:       assertEquals(49, Node.DIRECT_EVAL);
1125:       assertEquals(46, Node.IS_NAMESPACE);
1126:       assertEquals(50, Node.FREE_CALL);
1127:       
1128:       boolean boolean4 = node0.isEquivalentTo(node2);
1129:       assertFalse(node0.isArrayLit());
1130:       assertFalse(node0.isFor());
1131:       assertFalse(node0.isEmpty());
1132:       assertFalse(node0.isGetterDef());
1133:       assertFalse(node0.isFunction());
1134:       assertFalse(node0.isTry());
1135:       assertFalse(node0.isDefaultCase());
1136:       assertFalse(node0.isCatch());
1137:       assertFalse(node0.isIn());
1138:       assertFalse(node0.isRegExp());
1139:       assertFalse(node0.isNE());
1140:       assertFalse(node0.isTrue());
1141:       assertFalse(node0.isNull());
1142:       assertFalse(node0.isIf());
1143:       assertFalse(node0.isVoid());
1144:       assertFalse(node0.isName());
1145:       assertFalse(node0.isDelProp());
1146:       assertFalse(node0.isVar());
1147:       assertFalse(node0.isHook());
1148:       assertFalse(node0.isBlock());
1149:       assertFalse(node0.isThis());
1150:       assertFalse(node0.isAdd());
1151:       assertFalse(node0.isDo());
1152:       assertFalse(node0.isCase());
1153:       assertFalse(node0.isNew());
1154:       assertTrue(node0.isString());
1155:       assertFalse(node0.isLabel());
1156:       assertEquals(0, node0.getChildCount());
1157:       assertFalse(node0.isSwitch());
1158:       assertFalse(node0.isParamList());
1159:       assertEquals((-1), node0.getCharno());
1160:       assertFalse(node0.isLabelName());
1161:       assertFalse(node0.isStringKey());
1162:       assertFalse(node0.isCast());
1163:       assertFalse(node0.hasOneChild());
1164:       assertFalse(node0.isGetElem());
1165:       assertFalse(node0.isAssign());
1166:       assertFalse(node0.isDec());
1167:       assertFalse(node0.isNumber());
1168:       assertFalse(node0.isTypeOf());
1169:       assertFalse(node0.isScript());
1170:       assertFalse(node0.hasChildren());
1171:       assertFalse(node0.isAssignAdd());
1172:       assertFalse(node0.hasMoreThanOneChild());
1173:       assertFalse(node0.isInstanceOf());
1174:       assertFalse(node0.isReturn());
1175:       assertFalse(node0.isOr());
1176:       assertFalse(node0.isWith());
1177:       assertFalse(node0.isBreak());
1178:       assertFalse(node0.isExprResult());
1179:       assertEquals((-1), node0.getLineno());
1180:       assertFalse(node0.isThrow());
1181:       assertFalse(node0.isCall());
1182:       assertFalse(node0.isFalse());
1183:       assertFalse(node0.isSetterDef());
1184:       assertFalse(node0.isComma());
1185:       assertFalse(node0.isGetProp());
1186:       assertFalse(node0.isInc());
1187:       assertFalse(node0.isWhile());
1188:       assertFalse(node0.isAnd());
1189:       assertEquals(40, node0.getType());
1190:       assertFalse(node0.isNot());
1191:       assertFalse(node0.isContinue());
1192:       assertFalse(node0.isObjectLit());
1193:       assertEquals((-1), node0.getSourcePosition());
1194:       assertFalse(node0.isDebugger());
1195:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1196:       assertFalse(node2.isNumber());
1197:       assertFalse(node2.isDec());
1198:       assertFalse(node2.hasChildren());
1199:       assertEquals((-1), node2.getSourcePosition());
1200:       assertFalse(node2.isAssign());
1201:       assertFalse(node2.isLabelName());
1202:       assertFalse(node2.isTypeOf());
1203:       assertFalse(node2.isCast());
1204:       assertFalse(node2.isGetElem());
1205:       assertEquals((-1), node2.getLineno());
1206:       assertFalse(node2.isOr());
1207:       assertFalse(node2.isDo());
1208:       assertFalse(node2.isContinue());
1209:       assertFalse(node2.isNew());
1210:       assertFalse(node2.isAdd());
1211:       assertFalse(node2.isAssignAdd());
1212:       assertFalse(node2.isLabel());
1213:       assertFalse(node2.isVar());
1214:       assertFalse(node2.isBreak());
1215:       assertEquals(83, node2.getType());
1216:       assertFalse(node2.isComma());
1217:       assertFalse(node2.isName());
1218:       assertFalse(node2.isFalse());
1219:       assertFalse(node2.isGetProp());
1220:       assertFalse(node2.isCall());
1221:       assertFalse(node2.isObjectLit());
1222:       assertTrue(node2.isParamList());
1223:       assertFalse(node2.isAnd());
1224:       assertFalse(node2.isNull());
1225:       assertFalse(node2.isWhile());
1226:       assertFalse(node2.isString());
1227:       assertFalse(node2.isNot());
1228:       assertFalse(node2.isVoid());
1229:       assertFalse(node2.isExprResult());
1230:       assertFalse(node2.isReturn());
1231:       assertFalse(node2.isIf());
1232:       assertFalse(node2.isDelProp());
1233:       assertFalse(node2.isGetterDef());
1234:       assertFalse(node2.isEmpty());
1235:       assertFalse(node2.isIn());
1236:       assertFalse(node2.isArrayLit());
1237:       assertFalse(node2.isDebugger());
1238:       assertFalse(node2.isNE());
1239:       assertFalse(node2.isTrue());
1240:       assertFalse(node2.isDefaultCase());
1241:       assertFalse(node2.isSwitch());
1242:       assertFalse(node2.isFunction());
1243:       assertFalse(node2.isInc());
1244:       assertEquals(0, node2.getChildCount());
1245:       assertFalse(node2.isThrow());
1246:       assertFalse(node2.isSetterDef());
1247:       assertFalse(node2.isStringKey());
1248:       assertEquals((-1), node2.getCharno());
1249:       assertFalse(node2.isWith());
1250:       assertFalse(node2.isRegExp());
1251:       assertFalse(node2.isCase());
1252:       assertFalse(node2.isCatch());
1253:       assertFalse(node2.isScript());
1254:       assertFalse(node2.hasOneChild());
1255:       assertFalse(node2.isInstanceOf());
1256:       assertFalse(node2.isHook());
1257:       assertFalse(node2.hasMoreThanOneChild());
1258:       assertFalse(node2.isTry());
1259:       assertFalse(node2.isBlock());
1260:       assertFalse(node2.isThis());
1261:       assertFalse(node2.isFor());
1262:       assertFalse(boolean4);
1263:       assertEquals(0, jSTypeArray0.length);
1264:       assertFalse(node0.equals((Object)node2));
1265:       assertFalse(node0.equals((Object)node3));
1266:       assertFalse(node0.equals((Object)node1));
1267:       assertFalse(node2.equals((Object)node0));
1268:       assertFalse(node2.equals((Object)node1));
1269:       assertFalse(node2.equals((Object)node3));
1270:       assertTrue(boolean4 == boolean0);
1271:       assertTrue(boolean4 == boolean1);
1272:       assertTrue(boolean4 == boolean3);
1273:       assertTrue(boolean4 == boolean2);
1274:       
1275:       Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
1276:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1277:       assertFalse(node2.isNumber());
1278:       assertFalse(node2.isDec());
1279:       assertFalse(node2.hasChildren());
1280:       assertEquals((-1), node2.getSourcePosition());
1281:       assertFalse(node2.isAssign());
1282:       assertFalse(node2.isLabelName());
1283:       assertFalse(node2.isTypeOf());
1284:       assertFalse(node2.isCast());
1285:       assertFalse(node2.isGetElem());
1286:       assertEquals((-1), node2.getLineno());
1287:       assertFalse(node2.isOr());
1288:       assertFalse(node2.isDo());
1289:       assertFalse(node2.isContinue());
1290:       assertFalse(node2.isNew());
1291:       assertFalse(node2.isAdd());
1292:       assertFalse(node2.isAssignAdd());
1293:       assertFalse(node2.isLabel());
1294:       assertFalse(node2.isVar());
1295:       assertFalse(node2.isBreak());
1296:       assertEquals(83, node2.getType());
1297:       assertFalse(node2.isComma());
1298:       assertFalse(node2.isName());
1299:       assertFalse(node2.isFalse());
1300:       assertFalse(node2.isGetProp());
1301:       assertFalse(node2.isCall());
1302:       assertFalse(node2.isObjectLit());
1303:       assertTrue(node2.isParamList());
1304:       assertFalse(node2.isAnd());
1305:       assertFalse(node2.isNull());
1306:       assertFalse(node2.isWhile());
1307:       assertFalse(node2.isString());
1308:       assertFalse(node2.isNot());
1309:       assertFalse(node2.isVoid());
1310:       assertFalse(node2.isExprResult());
1311:       assertFalse(node2.isReturn());
1312:       assertFalse(node2.isIf());
1313:       assertFalse(node2.isDelProp());
1314:       assertFalse(node2.isGetterDef());
1315:       assertFalse(node2.isEmpty());
1316:       assertFalse(node2.isIn());
1317:       assertFalse(node2.isArrayLit());
1318:       assertFalse(node2.isDebugger());
1319:       assertFalse(node2.isNE());
1320:       assertFalse(node2.isTrue());
1321:       assertFalse(node2.isDefaultCase());
1322:       assertFalse(node2.isSwitch());
1323:       assertFalse(node2.isFunction());
1324:       assertFalse(node2.isInc());
1325:       assertEquals(0, node2.getChildCount());
1326:       assertFalse(node2.isThrow());
1327:       assertFalse(node2.isSetterDef());
1328:       assertFalse(node2.isStringKey());
1329:       assertEquals((-1), node2.getCharno());
1330:       assertFalse(node2.isWith());
1331:       assertFalse(node2.isRegExp());
1332:       assertFalse(node2.isCase());
1333:       assertFalse(node2.isCatch());
1334:       assertFalse(node2.isScript());
1335:       assertFalse(node2.hasOneChild());
1336:       assertFalse(node2.isInstanceOf());
1337:       assertFalse(node2.isHook());
1338:       assertFalse(node2.hasMoreThanOneChild());
1339:       assertFalse(node2.isTry());
1340:       assertFalse(node2.isBlock());
1341:       assertFalse(node2.isThis());
1342:       assertFalse(node2.isFor());
1343:       assertEquals(0, jSTypeArray0.length);
1344:       assertNotNull(node_AncestorIterable0);
1345:       assertFalse(node2.equals((Object)node0));
1346:       assertFalse(node2.equals((Object)node1));
1347:       assertFalse(node2.equals((Object)node3));
1348:       
1349:       Iterable<Node> iterable0 = new ArrayDeque<Node>(30);
1350:       assertNotNull(iterable0);
1351:       assertFalse(iterable0.contains(node0));
1352:       
1353:       SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("8`QN", true);
1354:       assertTrue(simpleSourceFile0.isExtern());
1355:       assertEquals("8`QN", simpleSourceFile0.getName());
1356:       assertEquals("8`QN", simpleSourceFile0.toString());
1357:       assertNotNull(simpleSourceFile0);
1358:       
1359:       int int0 = simpleSourceFile0.getLineOffset(2);
1360:       assertTrue(simpleSourceFile0.isExtern());
1361:       assertEquals("8`QN", simpleSourceFile0.getName());
1362:       assertEquals("8`QN", simpleSourceFile0.toString());
1363:       assertEquals(Integer.MIN_VALUE, int0);
1364:       
1365:       node2.setStaticSourceFile(simpleSourceFile0);
1366:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1367:       assertFalse(node2.isNumber());
1368:       assertFalse(node2.isDec());
1369:       assertFalse(node2.hasChildren());
1370:       assertEquals((-1), node2.getSourcePosition());
1371:       assertFalse(node2.isAssign());
1372:       assertFalse(node2.isLabelName());
1373:       assertFalse(node2.isTypeOf());
1374:       assertFalse(node2.isCast());
1375:       assertFalse(node2.isGetElem());
1376:       assertEquals((-1), node2.getLineno());
1377:       assertFalse(node2.isOr());
1378:       assertFalse(node2.isDo());
1379:       assertFalse(node2.isContinue());
1380:       assertFalse(node2.isNew());
1381:       assertFalse(node2.isAdd());
1382:       assertFalse(node2.isAssignAdd());
1383:       assertFalse(node2.isLabel());
1384:       assertFalse(node2.isVar());
1385:       assertFalse(node2.isBreak());
1386:       assertEquals(83, node2.getType());
1387:       assertFalse(node2.isComma());
1388:       assertFalse(node2.isName());
1389:       assertFalse(node2.isFalse());
1390:       assertFalse(node2.isGetProp());
1391:       assertFalse(node2.isCall());
1392:       assertFalse(node2.isObjectLit());
1393:       assertTrue(node2.isParamList());
1394:       assertFalse(node2.isAnd());
1395:       assertFalse(node2.isNull());
1396:       assertFalse(node2.isWhile());
1397:       assertFalse(node2.isString());
1398:       assertFalse(node2.isNot());
1399:       assertFalse(node2.isVoid());
1400:       assertFalse(node2.isExprResult());
1401:       assertFalse(node2.isReturn());
1402:       assertFalse(node2.isIf());
1403:       assertFalse(node2.isDelProp());
1404:       assertFalse(node2.isGetterDef());
1405:       assertFalse(node2.isEmpty());
1406:       assertFalse(node2.isIn());
1407:       assertFalse(node2.isArrayLit());
1408:       assertFalse(node2.isDebugger());
1409:       assertFalse(node2.isNE());
1410:       assertFalse(node2.isTrue());
1411:       assertFalse(node2.isDefaultCase());
1412:       assertFalse(node2.isSwitch());
1413:       assertFalse(node2.isFunction());
1414:       assertFalse(node2.isInc());
1415:       assertEquals(0, node2.getChildCount());
1416:       assertFalse(node2.isThrow());
1417:       assertFalse(node2.isSetterDef());
1418:       assertFalse(node2.isStringKey());
1419:       assertEquals((-1), node2.getCharno());
1420:       assertFalse(node2.isWith());
1421:       assertFalse(node2.isRegExp());
1422:       assertFalse(node2.isCase());
1423:       assertFalse(node2.isCatch());
1424:       assertFalse(node2.isScript());
1425:       assertFalse(node2.hasOneChild());
1426:       assertFalse(node2.isInstanceOf());
1427:       assertFalse(node2.isHook());
1428:       assertFalse(node2.hasMoreThanOneChild());
1429:       assertFalse(node2.isTry());
1430:       assertFalse(node2.isBlock());
1431:       assertFalse(node2.isThis());
1432:       assertFalse(node2.isFor());
1433:       assertTrue(simpleSourceFile0.isExtern());
1434:       assertEquals("8`QN", simpleSourceFile0.getName());
1435:       assertEquals("8`QN", simpleSourceFile0.toString());
1436:       assertEquals(0, jSTypeArray0.length);
1437:       assertFalse(node2.equals((Object)node0));
1438:       assertFalse(node2.equals((Object)node1));
1439:       assertFalse(node2.equals((Object)node3));
1440:       
1441:       boolean boolean5 = node2.isOnlyModifiesArgumentsCall();
1442:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1443:       assertFalse(node2.isNumber());
1444:       assertFalse(node2.isDec());
1445:       assertFalse(node2.hasChildren());
1446:       assertEquals((-1), node2.getSourcePosition());
1447:       assertFalse(node2.isAssign());
1448:       assertFalse(node2.isLabelName());
1449:       assertFalse(node2.isTypeOf());
1450:       assertFalse(node2.isCast());
1451:       assertFalse(node2.isGetElem());
1452:       assertEquals((-1), node2.getLineno());
1453:       assertFalse(node2.isOr());
1454:       assertFalse(node2.isDo());
1455:       assertFalse(node2.isContinue());
1456:       assertFalse(node2.isNew());
1457:       assertFalse(node2.isAdd());
1458:       assertFalse(node2.isAssignAdd());
1459:       assertFalse(node2.isLabel());
1460:       assertFalse(node2.isVar());
1461:       assertFalse(node2.isBreak());
1462:       assertEquals(83, node2.getType());
1463:       assertFalse(node2.isComma());
1464:       assertFalse(node2.isName());
1465:       assertFalse(node2.isFalse());
1466:       assertFalse(node2.isGetProp());
1467:       assertFalse(node2.isCall());
1468:       assertFalse(node2.isObjectLit());
1469:       assertTrue(node2.isParamList());
1470:       assertFalse(node2.isAnd());
1471:       assertFalse(node2.isNull());
1472:       assertFalse(node2.isWhile());
1473:       assertFalse(node2.isString());
1474:       assertFalse(node2.isNot());
1475:       assertFalse(node2.isVoid());
1476:       assertFalse(node2.isExprResult());
1477:       assertFalse(node2.isReturn());
1478:       assertFalse(node2.isIf());
1479:       assertFalse(node2.isDelProp());
1480:       assertFalse(node2.isGetterDef());
1481:       assertFalse(node2.isEmpty());
1482:       assertFalse(node2.isIn());
1483:       assertFalse(node2.isArrayLit());
1484:       assertFalse(node2.isDebugger());
1485:       assertFalse(node2.isNE());
1486:       assertFalse(node2.isTrue());
1487:       assertFalse(node2.isDefaultCase());
1488:       assertFalse(node2.isSwitch());
1489:       assertFalse(node2.isFunction());
1490:       assertFalse(node2.isInc());
1491:       assertEquals(0, node2.getChildCount());
1492:       assertFalse(node2.isThrow());
1493:       assertFalse(node2.isSetterDef());
1494:       assertFalse(node2.isStringKey());
1495:       assertEquals((-1), node2.getCharno());
1496:       assertFalse(node2.isWith());
1497:       assertFalse(node2.isRegExp());
1498:       assertFalse(node2.isCase());
1499:       assertFalse(node2.isCatch());
1500:       assertFalse(node2.isScript());
1501:       assertFalse(node2.hasOneChild());
1502:       assertFalse(node2.isInstanceOf());
1503:       assertFalse(node2.isHook());
1504:       assertFalse(node2.hasMoreThanOneChild());
1505:       assertFalse(node2.isTry());
1506:       assertFalse(node2.isBlock());
1507:       assertFalse(node2.isThis());
1508:       assertFalse(node2.isFor());
1509:       assertFalse(boolean5);
1510:       assertEquals(0, jSTypeArray0.length);
1511:       assertTrue(boolean5 == boolean2);
1512:       assertTrue(boolean5 == boolean3);
1513:       assertTrue(boolean5 == boolean0);
1514:       assertTrue(boolean5 == boolean1);
1515:       assertTrue(boolean5 == boolean4);
1516:       assertFalse(node2.equals((Object)node0));
1517:       assertFalse(node2.equals((Object)node1));
1518:       assertFalse(node2.equals((Object)node3));
1519:       
1520:       boolean boolean6 = node1.isObjectLit();
1521:       assertFalse(node1.isRegExp());
1522:       assertFalse(node1.isDefaultCase());
1523:       assertFalse(node1.isTrue());
1524:       assertFalse(node1.isTry());
1525:       assertFalse(node1.isVoid());
1526:       assertFalse(node1.isDebugger());
1527:       assertFalse(node1.isGetterDef());
1528:       assertFalse(node1.isNull());
1529:       assertFalse(node1.isIf());
1530:       assertFalse(node1.isNE());
1531:       assertFalse(node1.isFor());
1532:       assertFalse(node1.isName());
1533:       assertTrue(node1.isNumber());
1534:       assertFalse(node1.isDelProp());
1535:       assertFalse(node1.isCall());
1536:       assertFalse(node1.isCatch());
1537:       assertFalse(node1.isBlock());
1538:       assertFalse(node1.isWhile());
1539:       assertFalse(node1.isInc());
1540:       assertFalse(node1.isString());
1541:       assertFalse(node1.isIn());
1542:       assertEquals((-1), node1.getSourcePosition());
1543:       assertFalse(node1.isSetterDef());
1544:       assertFalse(node1.isCast());
1545:       assertFalse(node1.isThrow());
1546:       assertFalse(node1.isFalse());
1547:       assertFalse(node1.isContinue());
1548:       assertFalse(node1.isFunction());
1549:       assertFalse(node1.isExprResult());
1550:       assertFalse(node1.isScript());
1551:       assertFalse(node1.isAnd());
1552:       assertFalse(node1.hasOneChild());
1553:       assertFalse(node1.isObjectLit());
1554:       assertFalse(node1.isNot());
1555:       assertFalse(node1.isTypeOf());
1556:       assertFalse(node1.isDec());
1557:       assertFalse(node1.hasChildren());
1558:       assertFalse(node1.isBreak());
1559:       assertFalse(node1.isThis());
1560:       assertFalse(node1.isGetElem());
1561:       assertFalse(node1.isGetProp());
1562:       assertEquals((-1), node1.getLineno());
1563:       assertFalse(node1.isInstanceOf());
1564:       assertFalse(node1.isHook());
1565:       assertFalse(node1.hasMoreThanOneChild());
1566:       assertFalse(node1.isReturn());
1567:       assertFalse(node1.isWith());
1568:       assertEquals(39, node1.getType());
1569:       assertFalse(node1.isComma());
1570:       assertFalse(node1.isAssign());
1571:       assertFalse(node1.isSwitch());
1572:       assertFalse(node1.isCase());
1573:       assertFalse(node1.isNew());
1574:       assertFalse(node1.isDo());
1575:       assertFalse(node1.isAdd());
1576:       assertEquals((-1), node1.getCharno());
1577:       assertFalse(node1.isOr());
1578:       assertFalse(node1.isParamList());
1579:       assertFalse(node1.isEmpty());
1580:       assertFalse(node1.isStringKey());
1581:       assertFalse(node1.isAssignAdd());
1582:       assertFalse(node1.isLabelName());
1583:       assertFalse(node1.isArrayLit());
1584:       assertFalse(node1.isVar());
1585:       assertFalse(node1.isLabel());
1586:       assertEquals(0, node1.getChildCount());
1587:       assertFalse(boolean6);
1588:       assertTrue(boolean6 == boolean2);
1589:       assertTrue(boolean6 == boolean0);
1590:       assertTrue(boolean6 == boolean3);
1591:       assertTrue(boolean6 == boolean1);
1592:       assertTrue(boolean6 == boolean4);
1593:       assertTrue(boolean6 == boolean5);
1594:       assertFalse(node1.equals((Object)node0));
1595:       assertFalse(node1.equals((Object)node2));
1596:       
1597:       boolean boolean7 = node2.isVar();
1598:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1599:       assertFalse(node2.isNumber());
1600:       assertFalse(node2.isDec());
1601:       assertFalse(node2.hasChildren());
1602:       assertEquals((-1), node2.getSourcePosition());
1603:       assertFalse(node2.isAssign());
1604:       assertFalse(node2.isLabelName());
1605:       assertFalse(node2.isTypeOf());
1606:       assertFalse(node2.isCast());
1607:       assertFalse(node2.isGetElem());
1608:       assertEquals((-1), node2.getLineno());
1609:       assertFalse(node2.isOr());
1610:       assertFalse(node2.isDo());
1611:       assertFalse(node2.isContinue());
1612:       assertFalse(node2.isNew());
1613:       assertFalse(node2.isAdd());
1614:       assertFalse(node2.isAssignAdd());
1615:       assertFalse(node2.isLabel());
1616:       assertFalse(node2.isVar());
1617:       assertFalse(node2.isBreak());
1618:       assertEquals(83, node2.getType());
1619:       assertFalse(node2.isComma());
1620:       assertFalse(node2.isName());
1621:       assertFalse(node2.isFalse());
1622:       assertFalse(node2.isGetProp());
1623:       assertFalse(node2.isCall());
1624:       assertFalse(node2.isObjectLit());
1625:       assertTrue(node2.isParamList());
1626:       assertFalse(node2.isAnd());
1627:       assertFalse(node2.isNull());
1628:       assertFalse(node2.isWhile());
1629:       assertFalse(node2.isString());
1630:       assertFalse(node2.isNot());
1631:       assertFalse(node2.isVoid());
1632:       assertFalse(node2.isExprResult());
1633:       assertFalse(node2.isReturn());
1634:       assertFalse(node2.isIf());
1635:       assertFalse(node2.isDelProp());
1636:       assertFalse(node2.isGetterDef());
1637:       assertFalse(node2.isEmpty());
1638:       assertFalse(node2.isIn());
1639:       assertFalse(node2.isArrayLit());
1640:       assertFalse(node2.isDebugger());
1641:       assertFalse(node2.isNE());
1642:       assertFalse(node2.isTrue());
1643:       assertFalse(node2.isDefaultCase());
1644:       assertFalse(node2.isSwitch());
1645:       assertFalse(node2.isFunction());
1646:       assertFalse(node2.isInc());
1647:       assertEquals(0, node2.getChildCount());
1648:       assertFalse(node2.isThrow());
1649:       assertFalse(node2.isSetterDef());
1650:       assertFalse(node2.isStringKey());
1651:       assertEquals((-1), node2.getCharno());
1652:       assertFalse(node2.isWith());
1653:       assertFalse(node2.isRegExp());
1654:       assertFalse(node2.isCase());
1655:       assertFalse(node2.isCatch());
1656:       assertFalse(node2.isScript());
1657:       assertFalse(node2.hasOneChild());
1658:       assertFalse(node2.isInstanceOf());
1659:       assertFalse(node2.isHook());
1660:       assertFalse(node2.hasMoreThanOneChild());
1661:       assertFalse(node2.isTry());
1662:       assertFalse(node2.isBlock());
1663:       assertFalse(node2.isThis());
1664:       assertFalse(node2.isFor());
1665:       assertFalse(boolean7);
1666:       assertEquals(0, jSTypeArray0.length);
1667:       assertTrue(boolean7 == boolean3);
1668:       assertTrue(boolean7 == boolean5);
1669:       assertTrue(boolean7 == boolean6);
1670:       assertTrue(boolean7 == boolean0);
1671:       assertTrue(boolean7 == boolean4);
1672:       assertTrue(boolean7 == boolean1);
1673:       assertTrue(boolean7 == boolean2);
1674:       assertFalse(node2.equals((Object)node0));
1675:       assertFalse(node2.equals((Object)node1));
1676:       assertFalse(node2.equals((Object)node3));
1677:       
1678:       node2.setIsSyntheticBlock(false);
1679:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1680:       assertFalse(node2.isNumber());
1681:       assertFalse(node2.isDec());
1682:       assertFalse(node2.hasChildren());
1683:       assertEquals((-1), node2.getSourcePosition());
1684:       assertFalse(node2.isAssign());
1685:       assertFalse(node2.isLabelName());
1686:       assertFalse(node2.isTypeOf());
1687:       assertFalse(node2.isCast());
1688:       assertFalse(node2.isGetElem());
1689:       assertEquals((-1), node2.getLineno());
1690:       assertFalse(node2.isOr());
1691:       assertFalse(node2.isDo());
1692:       assertFalse(node2.isContinue());
1693:       assertFalse(node2.isNew());
1694:       assertFalse(node2.isAdd());
1695:       assertFalse(node2.isAssignAdd());
1696:       assertFalse(node2.isLabel());
1697:       assertFalse(node2.isVar());
1698:       assertFalse(node2.isBreak());
1699:       assertEquals(83, node2.getType());
1700:       assertFalse(node2.isComma());
1701:       assertFalse(node2.isName());
1702:       assertFalse(node2.isFalse());
1703:       assertFalse(node2.isGetProp());
1704:       assertFalse(node2.isCall());
1705:       assertFalse(node2.isObjectLit());
1706:       assertTrue(node2.isParamList());
1707:       assertFalse(node2.isAnd());
1708:       assertFalse(node2.isNull());
1709:       assertFalse(node2.isWhile());
1710:       assertFalse(node2.isString());
1711:       assertFalse(node2.isNot());
1712:       assertFalse(node2.isVoid());
1713:       assertFalse(node2.isExprResult());
1714:       assertFalse(node2.isReturn());
1715:       assertFalse(node2.isIf());
1716:       assertFalse(node2.isDelProp());
1717:       assertFalse(node2.isGetterDef());
1718:       assertFalse(node2.isEmpty());
1719:       assertFalse(node2.isIn());
1720:       assertFalse(node2.isArrayLit());
1721:       assertFalse(node2.isDebugger());
1722:       assertFalse(node2.isNE());
1723:       assertFalse(node2.isTrue());
1724:       assertFalse(node2.isDefaultCase());
1725:       assertFalse(node2.isSwitch());
1726:       assertFalse(node2.isFunction());
1727:       assertFalse(node2.isInc());
1728:       assertEquals(0, node2.getChildCount());
1729:       assertFalse(node2.isThrow());
1730:       assertFalse(node2.isSetterDef());
1731:       assertFalse(node2.isStringKey());
1732:       assertEquals((-1), node2.getCharno());
1733:       assertFalse(node2.isWith());
1734:       assertFalse(node2.isRegExp());
1735:       assertFalse(node2.isCase());
1736:       assertFalse(node2.isCatch());
1737:       assertFalse(node2.isScript());
1738:       assertFalse(node2.hasOneChild());
1739:       assertFalse(node2.isInstanceOf());
1740:       assertFalse(node2.isHook());
1741:       assertFalse(node2.hasMoreThanOneChild());
1742:       assertFalse(node2.isTry());
1743:       assertFalse(node2.isBlock());
1744:       assertFalse(node2.isThis());
1745:       assertFalse(node2.isFor());
1746:       assertEquals(0, jSTypeArray0.length);
1747:       assertFalse(node2.equals((Object)node0));
1748:       assertFalse(node2.equals((Object)node1));
1749:       assertFalse(node2.equals((Object)node3));
1750:       
1751:       boolean boolean8 = node0.isVarArgs();
1752:       assertFalse(node0.isArrayLit());
1753:       assertFalse(node0.isFor());
1754:       assertFalse(node0.isEmpty());
1755:       assertFalse(node0.isGetterDef());
1756:       assertFalse(node0.isFunction());
1757:       assertFalse(node0.isTry());
1758:       assertFalse(node0.isDefaultCase());
1759:       assertFalse(node0.isCatch());
1760:       assertFalse(node0.isIn());
1761:       assertFalse(node0.isRegExp());
1762:       assertFalse(node0.isNE());
1763:       assertFalse(node0.isTrue());
1764:       assertFalse(node0.isNull());
1765:       assertFalse(node0.isIf());
1766:       assertFalse(node0.isVoid());
1767:       assertFalse(node0.isName());
1768:       assertFalse(node0.isDelProp());
1769:       assertFalse(node0.isVar());
1770:       assertFalse(node0.isHook());
1771:       assertFalse(node0.isBlock());
1772:       assertFalse(node0.isThis());
1773:       assertFalse(node0.isAdd());
1774:       assertFalse(node0.isDo());
1775:       assertFalse(node0.isCase());
1776:       assertFalse(node0.isNew());
1777:       assertTrue(node0.isString());
1778:       assertFalse(node0.isLabel());
1779:       assertEquals(0, node0.getChildCount());
1780:       assertFalse(node0.isSwitch());
1781:       assertFalse(node0.isParamList());
1782:       assertEquals((-1), node0.getCharno());
1783:       assertFalse(node0.isLabelName());
1784:       assertFalse(node0.isStringKey());
1785:       assertFalse(node0.isCast());
1786:       assertFalse(node0.hasOneChild());
1787:       assertFalse(node0.isGetElem());
1788:       assertFalse(node0.isAssign());
1789:       assertFalse(node0.isDec());
1790:       assertFalse(node0.isNumber());
1791:       assertFalse(node0.isTypeOf());
1792:       assertFalse(node0.isScript());
1793:       assertFalse(node0.hasChildren());
1794:       assertFalse(node0.isAssignAdd());
1795:       assertFalse(node0.hasMoreThanOneChild());
1796:       assertFalse(node0.isInstanceOf());
1797:       assertFalse(node0.isReturn());
1798:       assertFalse(node0.isOr());
1799:       assertFalse(node0.isWith());
1800:       assertFalse(node0.isBreak());
1801:       assertFalse(node0.isExprResult());
1802:       assertEquals((-1), node0.getLineno());
1803:       assertFalse(node0.isThrow());
1804:       assertFalse(node0.isCall());
1805:       assertFalse(node0.isFalse());
1806:       assertFalse(node0.isSetterDef());
1807:       assertFalse(node0.isComma());
1808:       assertFalse(node0.isGetProp());
1809:       assertFalse(node0.isInc());
1810:       assertFalse(node0.isWhile());
1811:       assertFalse(node0.isAnd());
1812:       assertEquals(40, node0.getType());
1813:       assertFalse(node0.isNot());
1814:       assertFalse(node0.isContinue());
1815:       assertFalse(node0.isObjectLit());
1816:       assertEquals((-1), node0.getSourcePosition());
1817:       assertFalse(node0.isDebugger());
1818:       assertFalse(boolean8);
1819:       assertFalse(node0.equals((Object)node2));
1820:       assertFalse(node0.equals((Object)node3));
1821:       assertFalse(node0.equals((Object)node1));
1822:       assertTrue(boolean8 == boolean7);
1823:       assertTrue(boolean8 == boolean1);
1824:       assertTrue(boolean8 == boolean2);
1825:       assertTrue(boolean8 == boolean6);
1826:       assertTrue(boolean8 == boolean3);
1827:       assertTrue(boolean8 == boolean0);
1828:       assertTrue(boolean8 == boolean4);
1829:       assertTrue(boolean8 == boolean5);
1830:       
1831:       boolean boolean9 = node2.isNoSideEffectsCall();
1832:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1833:       assertFalse(node2.isNumber());
1834:       assertFalse(node2.isDec());
1835:       assertFalse(node2.hasChildren());
1836:       assertEquals((-1), node2.getSourcePosition());
1837:       assertFalse(node2.isAssign());
1838:       assertFalse(node2.isLabelName());
1839:       assertFalse(node2.isTypeOf());
1840:       assertFalse(node2.isCast());
1841:       assertFalse(node2.isGetElem());
1842:       assertEquals((-1), node2.getLineno());
1843:       assertFalse(node2.isOr());
1844:       assertFalse(node2.isDo());
1845:       assertFalse(node2.isContinue());
1846:       assertFalse(node2.isNew());
1847:       assertFalse(node2.isAdd());
1848:       assertFalse(node2.isAssignAdd());
1849:       assertFalse(node2.isLabel());
1850:       assertFalse(node2.isVar());
1851:       assertFalse(node2.isBreak());
1852:       assertEquals(83, node2.getType());
1853:       assertFalse(node2.isComma());
1854:       assertFalse(node2.isName());
1855:       assertFalse(node2.isFalse());
1856:       assertFalse(node2.isGetProp());
1857:       assertFalse(node2.isCall());
1858:       assertFalse(node2.isObjectLit());
1859:       assertTrue(node2.isParamList());
1860:       assertFalse(node2.isAnd());
1861:       assertFalse(node2.isNull());
1862:       assertFalse(node2.isWhile());
1863:       assertFalse(node2.isString());
1864:       assertFalse(node2.isNot());
1865:       assertFalse(node2.isVoid());
1866:       assertFalse(node2.isExprResult());
1867:       assertFalse(node2.isReturn());
1868:       assertFalse(node2.isIf());
1869:       assertFalse(node2.isDelProp());
1870:       assertFalse(node2.isGetterDef());
1871:       assertFalse(node2.isEmpty());
1872:       assertFalse(node2.isIn());
1873:       assertFalse(node2.isArrayLit());
1874:       assertFalse(node2.isDebugger());
1875:       assertFalse(node2.isNE());
1876:       assertFalse(node2.isTrue());
1877:       assertFalse(node2.isDefaultCase());
1878:       assertFalse(node2.isSwitch());
1879:       assertFalse(node2.isFunction());
1880:       assertFalse(node2.isInc());
1881:       assertEquals(0, node2.getChildCount());
1882:       assertFalse(node2.isThrow());
1883:       assertFalse(node2.isSetterDef());
1884:       assertFalse(node2.isStringKey());
1885:       assertEquals((-1), node2.getCharno());
1886:       assertFalse(node2.isWith());
1887:       assertFalse(node2.isRegExp());
1888:       assertFalse(node2.isCase());
1889:       assertFalse(node2.isCatch());
1890:       assertFalse(node2.isScript());
1891:       assertFalse(node2.hasOneChild());
1892:       assertFalse(node2.isInstanceOf());
1893:       assertFalse(node2.isHook());
1894:       assertFalse(node2.hasMoreThanOneChild());
1895:       assertFalse(node2.isTry());
1896:       assertFalse(node2.isBlock());
1897:       assertFalse(node2.isThis());
1898:       assertFalse(node2.isFor());
1899:       assertFalse(boolean9);
1900:       assertEquals(0, jSTypeArray0.length);
1901:       assertTrue(boolean9 == boolean3);
1902:       assertTrue(boolean9 == boolean8);
1903:       assertTrue(boolean9 == boolean4);
1904:       assertTrue(boolean9 == boolean1);
1905:       assertTrue(boolean9 == boolean2);
1906:       assertTrue(boolean9 == boolean0);
1907:       assertTrue(boolean9 == boolean6);
1908:       assertTrue(boolean9 == boolean7);
1909:       assertTrue(boolean9 == boolean5);
1910:       assertFalse(node2.equals((Object)node0));
1911:       assertFalse(node2.equals((Object)node1));
1912:       assertFalse(node2.equals((Object)node3));
1913:       
1914:       Node node4 = new Node(16);
1915:       assertFalse(node4.isArrayLit());
1916:       assertFalse(node4.isDelProp());
1917:       assertFalse(node4.isIf());
1918:       assertFalse(node4.isFor());
1919:       assertFalse(node4.isNE());
1920:       assertFalse(node4.isFunction());
1921:       assertFalse(node4.isRegExp());
1922:       assertFalse(node4.isVoid());
1923:       assertEquals(0, node4.getChildCount());
1924:       assertFalse(node4.isDefaultCase());
1925:       assertFalse(node4.isInc());
1926:       assertFalse(node4.isTrue());
1927:       assertFalse(node4.isSetterDef());
1928:       assertFalse(node4.isIn());
1929:       assertFalse(node4.isEmpty());
1930:       assertFalse(node4.isCall());
1931:       assertFalse(node4.isFalse());
1932:       assertFalse(node4.isName());
1933:       assertFalse(node4.isNull());
1934:       assertFalse(node4.isThrow());
1935:       assertFalse(node4.isComma());
1936:       assertFalse(node4.isBreak());
1937:       assertFalse(node4.isAnd());
1938:       assertFalse(node4.isObjectLit());
1939:       assertFalse(node4.isNot());
1940:       assertFalse(node4.isReturn());
1941:       assertFalse(node4.isWhile());
1942:       assertFalse(node4.isDebugger());
1943:       assertFalse(node4.isGetProp());
1944:       assertEquals((-1), node4.getSourcePosition());
1945:       assertFalse(node4.isString());
1946:       assertEquals(16, node4.getType());
1947:       assertFalse(node4.hasOneChild());
1948:       assertFalse(node4.isAssign());
1949:       assertFalse(node4.isLabelName());
1950:       assertFalse(node4.hasChildren());
1951:       assertFalse(node4.isExprResult());
1952:       assertFalse(node4.isTypeOf());
1953:       assertFalse(node4.isDec());
1954:       assertEquals((-1), node4.getLineno());
1955:       assertFalse(node4.isWith());
1956:       assertFalse(node4.isGetElem());
1957:       assertFalse(node4.isCast());
1958:       assertFalse(node4.isContinue());
1959:       assertFalse(node4.isDo());
1960:       assertFalse(node4.isLabel());
1961:       assertFalse(node4.isAssignAdd());
1962:       assertFalse(node4.isNew());
1963:       assertFalse(node4.isOr());
1964:       assertFalse(node4.isAdd());
1965:       assertFalse(node4.isHook());
1966:       assertFalse(node4.isBlock());
1967:       assertFalse(node4.isStringKey());
1968:       assertFalse(node4.isVar());
1969:       assertFalse(node4.isThis());
1970:       assertFalse(node4.isParamList());
1971:       assertFalse(node4.isSwitch());
1972:       assertFalse(node4.isCatch());
1973:       assertFalse(node4.isInstanceOf());
1974:       assertFalse(node4.hasMoreThanOneChild());
1975:       assertFalse(node4.isCase());
1976:       assertEquals((-1), node4.getCharno());
1977:       assertFalse(node4.isTry());
1978:       assertFalse(node4.isGetterDef());
1979:       assertFalse(node4.isNumber());
1980:       assertFalse(node4.isScript());
1981:       assertNotNull(node4);
1982:       assertFalse(node4.equals((Object)node1));
1983:       assertFalse(node4.equals((Object)node0));
1984:       assertFalse(node4.equals((Object)node2));
1985:       assertFalse(node4.equals((Object)node3));
1986:       
1987:       boolean boolean10 = node4.mayMutateGlobalStateOrThrow();
1988:       assertFalse(node4.isArrayLit());
1989:       assertFalse(node4.isDelProp());
1990:       assertFalse(node4.isIf());
1991:       assertFalse(node4.isFor());
1992:       assertFalse(node4.isNE());
1993:       assertFalse(node4.isFunction());
1994:       assertFalse(node4.isRegExp());
1995:       assertFalse(node4.isVoid());
1996:       assertEquals(0, node4.getChildCount());
1997:       assertFalse(node4.isDefaultCase());
1998:       assertFalse(node4.isInc());
1999:       assertFalse(node4.isTrue());
2000:       assertFalse(node4.isSetterDef());
2001:       assertFalse(node4.isIn());
2002:       assertFalse(node4.isEmpty());
2003:       assertFalse(node4.isCall());
2004:       assertFalse(node4.isFalse());
2005:       assertFalse(node4.isName());
2006:       assertFalse(node4.isNull());
2007:       assertFalse(node4.isThrow());
2008:       assertFalse(node4.isComma());
2009:       assertFalse(node4.isBreak());
2010:       assertFalse(node4.isAnd());
2011:       assertFalse(node4.isObjectLit());
2012:       assertFalse(node4.isNot());
2013:       assertFalse(node4.isReturn());
2014:       assertFalse(node4.isWhile());
2015:       assertFalse(node4.isDebugger());
2016:       assertFalse(node4.isGetProp());
2017:       assertEquals((-1), node4.getSourcePosition());
2018:       assertFalse(node4.isString());
2019:       assertEquals(16, node4.getType());
2020:       assertFalse(node4.hasOneChild());
2021:       assertFalse(node4.isAssign());
2022:       assertFalse(node4.isLabelName());
2023:       assertFalse(node4.hasChildren());
2024:       assertFalse(node4.isExprResult());
2025:       assertFalse(node4.isTypeOf());
2026:       assertFalse(node4.isDec());
2027:       assertEquals((-1), node4.getLineno());
2028:       assertFalse(node4.isWith());
2029:       assertFalse(node4.isGetElem());
2030:       assertFalse(node4.isCast());
2031:       assertFalse(node4.isContinue());
2032:       assertFalse(node4.isDo());
2033:       assertFalse(node4.isLabel());
2034:       assertFalse(node4.isAssignAdd());
2035:       assertFalse(node4.isNew());
2036:       assertFalse(node4.isOr());
2037:       assertFalse(node4.isAdd());
2038:       assertFalse(node4.isHook());
2039:       assertFalse(node4.isBlock());
2040:       assertFalse(node4.isStringKey());
2041:       assertFalse(node4.isVar());
2042:       assertFalse(node4.isThis());
2043:       assertFalse(node4.isParamList());
2044:       assertFalse(node4.isSwitch());
2045:       assertFalse(node4.isCatch());
2046:       assertFalse(node4.isInstanceOf());
2047:       assertFalse(node4.hasMoreThanOneChild());
2048:       assertFalse(node4.isCase());
2049:       assertEquals((-1), node4.getCharno());
2050:       assertFalse(node4.isTry());
2051:       assertFalse(node4.isGetterDef());
2052:       assertFalse(node4.isNumber());
2053:       assertFalse(node4.isScript());
2054:       assertTrue(boolean10);
2055:       assertFalse(node4.equals((Object)node1));
2056:       assertFalse(node4.equals((Object)node0));
2057:       assertFalse(node4.equals((Object)node2));
2058:       assertFalse(node4.equals((Object)node3));
2059:       assertFalse(boolean10 == boolean7);
2060:       assertFalse(boolean10 == boolean2);
2061:       assertFalse(boolean10 == boolean5);
2062:       assertFalse(boolean10 == boolean0);
2063:       assertFalse(boolean10 == boolean9);
2064:       assertFalse(boolean10 == boolean6);
2065:       assertFalse(boolean10 == boolean1);
2066:       assertFalse(boolean10 == boolean3);
2067:       assertFalse(boolean10 == boolean4);
2068:       assertFalse(boolean10 == boolean8);
2069:       
2070:       node1.setChangeTime(16);
2071:       assertFalse(node1.isRegExp());
2072:       assertFalse(node1.isDefaultCase());
2073:       assertFalse(node1.isTrue());
2074:       assertFalse(node1.isTry());
2075:       assertFalse(node1.isVoid());
2076:       assertFalse(node1.isDebugger());
2077:       assertFalse(node1.isGetterDef());
2078:       assertFalse(node1.isNull());
2079:       assertFalse(node1.isIf());
2080:       assertFalse(node1.isNE());
2081:       assertFalse(node1.isFor());
2082:       assertFalse(node1.isName());
2083:       assertTrue(node1.isNumber());
2084:       assertFalse(node1.isDelProp());
2085:       assertFalse(node1.isCall());
2086:       assertFalse(node1.isCatch());
2087:       assertFalse(node1.isBlock());
2088:       assertFalse(node1.isWhile());
2089:       assertFalse(node1.isInc());
2090:       assertFalse(node1.isString());
2091:       assertFalse(node1.isIn());
2092:       assertEquals((-1), node1.getSourcePosition());
2093:       assertFalse(node1.isSetterDef());
2094:       assertFalse(node1.isCast());
2095:       assertFalse(node1.isThrow());
2096:       assertFalse(node1.isFalse());
2097:       assertFalse(node1.isContinue());
2098:       assertFalse(node1.isFunction());
2099:       assertFalse(node1.isExprResult());
2100:       assertFalse(node1.isScript());
2101:       assertFalse(node1.isAnd());
2102:       assertFalse(node1.hasOneChild());
2103:       assertFalse(node1.isObjectLit());
2104:       assertFalse(node1.isNot());
2105:       assertFalse(node1.isTypeOf());
2106:       assertFalse(node1.isDec());
2107:       assertFalse(node1.hasChildren());
2108:       assertFalse(node1.isBreak());
2109:       assertFalse(node1.isThis());
2110:       assertFalse(node1.isGetElem());
2111:       assertFalse(node1.isGetProp());
2112:       assertEquals((-1), node1.getLineno());
2113:       assertFalse(node1.isInstanceOf());
2114:       assertFalse(node1.isHook());
2115:       assertFalse(node1.hasMoreThanOneChild());
2116:       assertFalse(node1.isReturn());
2117:       assertFalse(node1.isWith());
2118:       assertEquals(39, node1.getType());
2119:       assertFalse(node1.isComma());
2120:       assertFalse(node1.isAssign());
2121:       assertFalse(node1.isSwitch());
2122:       assertFalse(node1.isCase());
2123:       assertFalse(node1.isNew());
2124:       assertFalse(node1.isDo());
2125:       assertFalse(node1.isAdd());
2126:       assertEquals((-1), node1.getCharno());
2127:       assertFalse(node1.isOr());
2128:       assertFalse(node1.isParamList());
2129:       assertFalse(node1.isEmpty());
2130:       assertFalse(node1.isStringKey());
2131:       assertFalse(node1.isAssignAdd());
2132:       assertFalse(node1.isLabelName());
2133:       assertFalse(node1.isArrayLit());
2134:       assertFalse(node1.isVar());
2135:       assertFalse(node1.isLabel());
2136:       assertEquals(0, node1.getChildCount());
2137:       assertFalse(node1.equals((Object)node0));
2138:       assertFalse(node1.equals((Object)node2));
2139:       assertFalse(node1.equals((Object)node4));
2140:       
2141:       boolean boolean11 = node1.isNull();
2142:       assertFalse(node1.isRegExp());
2143:       assertFalse(node1.isDefaultCase());
2144:       assertFalse(node1.isTrue());
2145:       assertFalse(node1.isTry());
2146:       assertFalse(node1.isVoid());
2147:       assertFalse(node1.isDebugger());
2148:       assertFalse(node1.isGetterDef());
2149:       assertFalse(node1.isNull());
2150:       assertFalse(node1.isIf());
2151:       assertFalse(node1.isNE());
2152:       assertFalse(node1.isFor());
2153:       assertFalse(node1.isName());
2154:       assertTrue(node1.isNumber());
2155:       assertFalse(node1.isDelProp());
2156:       assertFalse(node1.isCall());
2157:       assertFalse(node1.isCatch());
2158:       assertFalse(node1.isBlock());
2159:       assertFalse(node1.isWhile());
2160:       assertFalse(node1.isInc());
2161:       assertFalse(node1.isString());
2162:       assertFalse(node1.isIn());
2163:       assertEquals((-1), node1.getSourcePosition());
2164:       assertFalse(node1.isSetterDef());
2165:       assertFalse(node1.isCast());
2166:       assertFalse(node1.isThrow());
2167:       assertFalse(node1.isFalse());
2168:       assertFalse(node1.isContinue());
2169:       assertFalse(node1.isFunction());
2170:       assertFalse(node1.isExprResult());
2171:       assertFalse(node1.isScript());
2172:       assertFalse(node1.isAnd());
2173:       assertFalse(node1.hasOneChild());
2174:       assertFalse(node1.isObjectLit());
2175:       assertFalse(node1.isNot());
2176:       assertFalse(node1.isTypeOf());
2177:       assertFalse(node1.isDec());
2178:       assertFalse(node1.hasChildren());
2179:       assertFalse(node1.isBreak());
2180:       assertFalse(node1.isThis());
2181:       assertFalse(node1.isGetElem());
2182:       assertFalse(node1.isGetProp());
2183:       assertEquals((-1), node1.getLineno());
2184:       assertFalse(node1.isInstanceOf());
2185:       assertFalse(node1.isHook());
2186:       assertFalse(node1.hasMoreThanOneChild());
2187:       assertFalse(node1.isReturn());
2188:       assertFalse(node1.isWith());
2189:       assertEquals(39, node1.getType());
2190:       assertFalse(node1.isComma());
2191:       assertFalse(node1.isAssign());
2192:       assertFalse(node1.isSwitch());
2193:       assertFalse(node1.isCase());
2194:       assertFalse(node1.isNew());
2195:       assertFalse(node1.isDo());
2196:       assertFalse(node1.isAdd());
2197:       assertEquals((-1), node1.getCharno());
2198:       assertFalse(node1.isOr());
2199:       assertFalse(node1.isParamList());
2200:       assertFalse(node1.isEmpty());
2201:       assertFalse(node1.isStringKey());
2202:       assertFalse(node1.isAssignAdd());
2203:       assertFalse(node1.isLabelName());
2204:       assertFalse(node1.isArrayLit());
2205:       assertFalse(node1.isVar());
2206:       assertFalse(node1.isLabel());
2207:       assertEquals(0, node1.getChildCount());
2208:       assertFalse(boolean11);
2209:       assertFalse(node1.equals((Object)node0));
2210:       assertFalse(node1.equals((Object)node2));
2211:       assertFalse(node1.equals((Object)node4));
2212:       assertTrue(boolean11 == boolean1);
2213:       assertTrue(boolean11 == boolean3);
2214:       assertTrue(boolean11 == boolean9);
2215:       assertTrue(boolean11 == boolean0);
2216:       assertFalse(boolean11 == boolean10);
2217:       assertTrue(boolean11 == boolean7);
2218:       assertTrue(boolean11 == boolean2);
2219:       assertTrue(boolean11 == boolean5);
2220:       assertTrue(boolean11 == boolean6);
2221:       assertTrue(boolean11 == boolean8);
2222:       assertTrue(boolean11 == boolean4);
2223:       
2224:       boolean boolean12 = node2.isNot();
2225:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
2226:       assertFalse(node2.isNumber());
2227:       assertFalse(node2.isDec());
2228:       assertFalse(node2.hasChildren());
2229:       assertEquals((-1), node2.getSourcePosition());
2230:       assertFalse(node2.isAssign());
2231:       assertFalse(node2.isLabelName());
2232:       assertFalse(node2.isTypeOf());
2233:       assertFalse(node2.isCast());
2234:       assertFalse(node2.isGetElem());
2235:       assertEquals((-1), node2.getLineno());
2236:       assertFalse(node2.isOr());
2237:       assertFalse(node2.isDo());
2238:       assertFalse(node2.isContinue());
2239:       assertFalse(node2.isNew());
2240:       assertFalse(node2.isAdd());
2241:       assertFalse(node2.isAssignAdd());
2242:       assertFalse(node2.isLabel());
2243:       assertFalse(node2.isVar());
2244:       assertFalse(node2.isBreak());
2245:       assertEquals(83, node2.getType());
2246:       assertFalse(node2.isComma());
2247:       assertFalse(node2.isName());
2248:       assertFalse(node2.isFalse());
2249:       assertFalse(node2.isGetProp());
2250:       assertFalse(node2.isCall());
2251:       assertFalse(node2.isObjectLit());
2252:       assertTrue(node2.isParamList());
2253:       assertFalse(node2.isAnd());
2254:       assertFalse(node2.isNull());
2255:       assertFalse(node2.isWhile());
2256:       assertFalse(node2.isString());
2257:       assertFalse(node2.isNot());
2258:       assertFalse(node2.isVoid());
2259:       assertFalse(node2.isExprResult());
2260:       assertFalse(node2.isReturn());
2261:       assertFalse(node2.isIf());
2262:       assertFalse(node2.isDelProp());
2263:       assertFalse(node2.isGetterDef());
2264:       assertFalse(node2.isEmpty());
2265:       assertFalse(node2.isIn());
2266:       assertFalse(node2.isArrayLit());
2267:       assertFalse(node2.isDebugger());
2268:       assertFalse(node2.isNE());
2269:       assertFalse(node2.isTrue());
2270:       assertFalse(node2.isDefaultCase());
2271:       assertFalse(node2.isSwitch());
2272:       assertFalse(node2.isFunction());
2273:       assertFalse(node2.isInc());
2274:       assertEquals(0, node2.getChildCount());
2275:       assertFalse(node2.isThrow());
2276:       assertFalse(node2.isSetterDef());
2277:       assertFalse(node2.isStringKey());
2278:       assertEquals((-1), node2.getCharno());
2279:       assertFalse(node2.isWith());
2280:       assertFalse(node2.isRegExp());
2281:       assertFalse(node2.isCase());
2282:       assertFalse(node2.isCatch());
2283:       assertFalse(node2.isScript());
2284:       assertFalse(node2.hasOneChild());
2285:       assertFalse(node2.isInstanceOf());
2286:       assertFalse(node2.isHook());
2287:       assertFalse(node2.hasMoreThanOneChild());
2288:       assertFalse(node2.isTry());
2289:       assertFalse(node2.isBlock());
2290:       assertFalse(node2.isThis());
2291:       assertFalse(node2.isFor());
2292:       assertFalse(boolean12);
2293:       assertEquals(0, jSTypeArray0.length);
2294:       assertFalse(node2.equals((Object)node0));
2295:       assertFalse(node2.equals((Object)node1));
2296:       assertFalse(node2.equals((Object)node3));
2297:       assertFalse(node2.equals((Object)node4));
2298:       assertTrue(boolean12 == boolean8);
2299:       assertFalse(boolean12 == boolean10);
2300:       assertTrue(boolean12 == boolean7);
2301:       assertTrue(boolean12 == boolean1);
2302:       assertTrue(boolean12 == boolean2);
2303:       assertTrue(boolean12 == boolean6);
2304:       assertTrue(boolean12 == boolean3);
2305:       assertTrue(boolean12 == boolean9);
2306:       assertTrue(boolean12 == boolean0);
2307:       assertTrue(boolean12 == boolean11);
2308:       assertTrue(boolean12 == boolean4);
2309:       assertTrue(boolean12 == boolean5);
2310:       
2311:       Set<String> set0 = node4.getDirectives();
2312:       assertFalse(node4.isArrayLit());
2313:       assertFalse(node4.isDelProp());
2314:       assertFalse(node4.isIf());
2315:       assertFalse(node4.isFor());
2316:       assertFalse(node4.isNE());
2317:       assertFalse(node4.isFunction());
2318:       assertFalse(node4.isRegExp());
2319:       assertFalse(node4.isVoid());
2320:       assertEquals(0, node4.getChildCount());
2321:       assertFalse(node4.isDefaultCase());
2322:       assertFalse(node4.isInc());
2323:       assertFalse(node4.isTrue());
2324:       assertFalse(node4.isSetterDef());
2325:       assertFalse(node4.isIn());
2326:       assertFalse(node4.isEmpty());
2327:       assertFalse(node4.isCall());
2328:       assertFalse(node4.isFalse());
2329:       assertFalse(node4.isName());
2330:       assertFalse(node4.isNull());
2331:       assertFalse(node4.isThrow());
2332:       assertFalse(node4.isComma());
2333:       assertFalse(node4.isBreak());
2334:       assertFalse(node4.isAnd());
2335:       assertFalse(node4.isObjectLit());
2336:       assertFalse(node4.isNot());
2337:       assertFalse(node4.isReturn());
2338:       assertFalse(node4.isWhile());
2339:       assertFalse(node4.isDebugger());
2340:       assertFalse(node4.isGetProp());
2341:       assertEquals((-1), node4.getSourcePosition());
2342:       assertFalse(node4.isString());
2343:       assertEquals(16, node4.getType());
2344:       assertFalse(node4.hasOneChild());
2345:       assertFalse(node4.isAssign());
2346:       assertFalse(node4.isLabelName());
2347:       assertFalse(node4.hasChildren());
2348:       assertFalse(node4.isExprResult());
2349:       assertFalse(node4.isTypeOf());
2350:       assertFalse(node4.isDec());
2351:       assertEquals((-1), node4.getLineno());
2352:       assertFalse(node4.isWith());
2353:       assertFalse(node4.isGetElem());
2354:       assertFalse(node4.isCast());
2355:       assertFalse(node4.isContinue());
2356:       assertFalse(node4.isDo());
2357:       assertFalse(node4.isLabel());
2358:       assertFalse(node4.isAssignAdd());
2359:       assertFalse(node4.isNew());
2360:       assertFalse(node4.isOr());
2361:       assertFalse(node4.isAdd());
2362:       assertFalse(node4.isHook());
2363:       assertFalse(node4.isBlock());
2364:       assertFalse(node4.isStringKey());
2365:       assertFalse(node4.isVar());
2366:       assertFalse(node4.isThis());
2367:       assertFalse(node4.isParamList());
2368:       assertFalse(node4.isSwitch());
2369:       assertFalse(node4.isCatch());
2370:       assertFalse(node4.isInstanceOf());
2371:       assertFalse(node4.hasMoreThanOneChild());
2372:       assertFalse(node4.isCase());
2373:       assertEquals((-1), node4.getCharno());
2374:       assertFalse(node4.isTry());
2375:       assertFalse(node4.isGetterDef());
2376:       assertFalse(node4.isNumber());
2377:       assertFalse(node4.isScript());
2378:       assertNull(set0);
2379:       assertFalse(node4.equals((Object)node1));
2380:       assertFalse(node4.equals((Object)node0));
2381:       assertFalse(node4.equals((Object)node2));
2382:       assertFalse(node4.equals((Object)node3));
2383:       
2384:       boolean boolean13 = node0.isTypeOf();
2385:       assertFalse(node0.isArrayLit());
2386:       assertFalse(node0.isFor());
2387:       assertFalse(node0.isEmpty());
2388:       assertFalse(node0.isGetterDef());
2389:       assertFalse(node0.isFunction());
2390:       assertFalse(node0.isTry());
2391:       assertFalse(node0.isDefaultCase());
2392:       assertFalse(node0.isCatch());
2393:       assertFalse(node0.isIn());
2394:       assertFalse(node0.isRegExp());
2395:       assertFalse(node0.isNE());
2396:       assertFalse(node0.isTrue());
2397:       assertFalse(node0.isNull());
2398:       assertFalse(node0.isIf());
2399:       assertFalse(node0.isVoid());
2400:       assertFalse(node0.isName());
2401:       assertFalse(node0.isDelProp());
2402:       assertFalse(node0.isVar());
2403:       assertFalse(node0.isHook());
2404:       assertFalse(node0.isBlock());
2405:       assertFalse(node0.isThis());
2406:       assertFalse(node0.isAdd());
2407:       assertFalse(node0.isDo());
2408:       assertFalse(node0.isCase());
2409:       assertFalse(node0.isNew());
2410:       assertTrue(node0.isString());
2411:       assertFalse(node0.isLabel());
2412:       assertEquals(0, node0.getChildCount());
2413:       assertFalse(node0.isSwitch());
2414:       assertFalse(node0.isParamList());
2415:       assertEquals((-1), node0.getCharno());
2416:       assertFalse(node0.isLabelName());
2417:       assertFalse(node0.isStringKey());
2418:       assertFalse(node0.isCast());
2419:       assertFalse(node0.hasOneChild());
2420:       assertFalse(node0.isGetElem());
2421:       assertFalse(node0.isAssign());
2422:       assertFalse(node0.isDec());
2423:       assertFalse(node0.isNumber());
2424:       assertFalse(node0.isTypeOf());
2425:       assertFalse(node0.isScript());
2426:       assertFalse(node0.hasChildren());
2427:       assertFalse(node0.isAssignAdd());
2428:       assertFalse(node0.hasMoreThanOneChild());
2429:       assertFalse(node0.isInstanceOf());
2430:       assertFalse(node0.isReturn());
2431:       assertFalse(node0.isOr());
2432:       assertFalse(node0.isWith());
2433:       assertFalse(node0.isBreak());
2434:       assertFalse(node0.isExprResult());
2435:       assertEquals((-1), node0.getLineno());
2436:       assertFalse(node0.isThrow());
2437:       assertFalse(node0.isCall());
2438:       assertFalse(node0.isFalse());
2439:       assertFalse(node0.isSetterDef());
2440:       assertFalse(node0.isComma());
2441:       assertFalse(node0.isGetProp());
2442:       assertFalse(node0.isInc());
2443:       assertFalse(node0.isWhile());
2444:       assertFalse(node0.isAnd());
2445:       assertEquals(40, node0.getType());
2446:       assertFalse(node0.isNot());
2447:       assertFalse(node0.isContinue());
2448:       assertFalse(node0.isObjectLit());
2449:       assertEquals((-1), node0.getSourcePosition());
2450:       assertFalse(node0.isDebugger());
2451:       assertFalse(boolean13);
2452:       assertFalse(node0.equals((Object)node2));
2453:       assertFalse(node0.equals((Object)node4));
2454:       assertFalse(node0.equals((Object)node3));
2455:       assertFalse(node0.equals((Object)node1));
2456:       assertTrue(boolean13 == boolean2);
2457:       assertTrue(boolean13 == boolean8);
2458:       assertTrue(boolean13 == boolean9);
2459:       assertTrue(boolean13 == boolean3);
2460:       assertTrue(boolean13 == boolean1);
2461:       assertTrue(boolean13 == boolean7);
2462:       assertTrue(boolean13 == boolean11);
2463:       assertTrue(boolean13 == boolean5);
2464:       assertTrue(boolean13 == boolean4);
2465:       assertTrue(boolean13 == boolean12);
2466:       assertFalse(boolean13 == boolean10);
2467:       assertTrue(boolean13 == boolean6);
2468:       assertTrue(boolean13 == boolean0);
2469:       
2470:       boolean boolean14 = node4.isNE();
2471:       assertFalse(node4.isArrayLit());
2472:       assertFalse(node4.isDelProp());
2473:       assertFalse(node4.isIf());
2474:       assertFalse(node4.isFor());
2475:       assertFalse(node4.isNE());
2476:       assertFalse(node4.isFunction());
2477:       assertFalse(node4.isRegExp());
2478:       assertFalse(node4.isVoid());
2479:       assertEquals(0, node4.getChildCount());
2480:       assertFalse(node4.isDefaultCase());
2481:       assertFalse(node4.isInc());
2482:       assertFalse(node4.isTrue());
2483:       assertFalse(node4.isSetterDef());
2484:       assertFalse(node4.isIn());
2485:       assertFalse(node4.isEmpty());
2486:       assertFalse(node4.isCall());
2487:       assertFalse(node4.isFalse());
2488:       assertFalse(node4.isName());
2489:       assertFalse(node4.isNull());
2490:       assertFalse(node4.isThrow());
2491:       assertFalse(node4.isComma());
2492:       assertFalse(node4.isBreak());
2493:       assertFalse(node4.isAnd());
2494:       assertFalse(node4.isObjectLit());
2495:       assertFalse(node4.isNot());
2496:       assertFalse(node4.isReturn());
2497:       assertFalse(node4.isWhile());
2498:       assertFalse(node4.isDebugger());
2499:       assertFalse(node4.isGetProp());
2500:       assertEquals((-1), node4.getSourcePosition());
2501:       assertFalse(node4.isString());
2502:       assertEquals(16, node4.getType());
2503:       assertFalse(node4.hasOneChild());
2504:       assertFalse(node4.isAssign());
2505:       assertFalse(node4.isLabelName());
2506:       assertFalse(node4.hasChildren());
2507:       assertFalse(node4.isExprResult());
2508:       assertFalse(node4.isTypeOf());
2509:       assertFalse(node4.isDec());
2510:       assertEquals((-1), node4.getLineno());
2511:       assertFalse(node4.isWith());
2512:       assertFalse(node4.isGetElem());
2513:       assertFalse(node4.isCast());
2514:       assertFalse(node4.isContinue());
2515:       assertFalse(node4.isDo());
2516:       assertFalse(node4.isLabel());
2517:       assertFalse(node4.isAssignAdd());
2518:       assertFalse(node4.isNew());
2519:       assertFalse(node4.isOr());
2520:       assertFalse(node4.isAdd());
2521:       assertFalse(node4.isHook());
2522:       assertFalse(node4.isBlock());
2523:       assertFalse(node4.isStringKey());
2524:       assertFalse(node4.isVar());
2525:       assertFalse(node4.isThis());
2526:       assertFalse(node4.isParamList());
2527:       assertFalse(node4.isSwitch());
2528:       assertFalse(node4.isCatch());
2529:       assertFalse(node4.isInstanceOf());
2530:       assertFalse(node4.hasMoreThanOneChild());
2531:       assertFalse(node4.isCase());
2532:       assertEquals((-1), node4.getCharno());
2533:       assertFalse(node4.isTry());
2534:       assertFalse(node4.isGetterDef());
2535:       assertFalse(node4.isNumber());
2536:       assertFalse(node4.isScript());
2537:       assertFalse(boolean14);
2538:       assertFalse(node4.equals((Object)node1));
2539:       assertFalse(node4.equals((Object)node0));
2540:       assertFalse(node4.equals((Object)node2));
2541:       assertFalse(node4.equals((Object)node3));
2542:       assertTrue(boolean14 == boolean5);
2543:       assertTrue(boolean14 == boolean11);
2544:       assertTrue(boolean14 == boolean1);
2545:       assertTrue(boolean14 == boolean9);
2546:       assertTrue(boolean14 == boolean3);
2547:       assertTrue(boolean14 == boolean12);
2548:       assertTrue(boolean14 == boolean2);
2549:       assertTrue(boolean14 == boolean7);
2550:       assertFalse(boolean14 == boolean10);
2551:       assertTrue(boolean14 == boolean6);
2552:       assertTrue(boolean14 == boolean8);
2553:       assertTrue(boolean14 == boolean13);
2554:       assertTrue(boolean14 == boolean4);
2555:       assertTrue(boolean14 == boolean0);
2556:   }
2557: }
RegularFileObject[/tmp/EvoSuite_115_1629222880011/com/google/javascript/rhino/Node_115_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:40 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_115_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_115_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_115_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.JSTypeNative",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.common.collect.AbstractIndexedListIterator",
340:       "com.google.common.collect.Iterators$11",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.TemplatizedType",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.javascript.rhino.JSTypeExpression",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.common.collect.Iterators$12",
366:       "com.google.javascript.rhino.jstype.NamedType"
367:     );
368:   }
369: }

[MASTER] 17:54:40.724 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("8`QN");
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertNotNull(node0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean0 = node0.isEmpty();
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(boolean0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean1 = node0.isLocalResultCall();
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

node0.detachChildren();
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

Node node1 = new Node(39, 3053, 4095);
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isName());
assertTrue(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertEquals(12509183, node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isEmpty());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals(3053, node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean2 = node1.wasEmptyNode();
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isName());
assertTrue(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertEquals(12509183, node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isEmpty());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals(3053, node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(boolean2);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

JSType[] jSTypeArray0 = new JSType[0];
Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isBreak());
assertEquals(83, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isCall());
assertFalse(node2.isObjectLit());
assertTrue(node2.isParamList());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertEquals(0, jSTypeArray0.length);
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);

boolean boolean3 = node2.isNoSideEffectsCall();
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isBreak());
assertEquals(83, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isCall());
assertFalse(node2.isObjectLit());
assertTrue(node2.isParamList());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(boolean3);
assertEquals(0, jSTypeArray0.length);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);

Node node3 = node1.useSourceInfoFromForTree(node2);
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isName());
assertTrue(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isGetElem());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertFalse(node1.isEmpty());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isBreak());
assertEquals(83, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isCall());
assertFalse(node2.isObjectLit());
assertTrue(node2.isParamList());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isVoid());
assertFalse(node3.isArrayLit());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFunction());
assertFalse(node3.isTrue());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isIn());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isComma());
assertFalse(node3.isNull());
assertFalse(node3.isCall());
assertFalse(node3.isBreak());
assertFalse(node3.isNot());
assertFalse(node3.isWhile());
assertFalse(node3.isAnd());
assertFalse(node3.isString());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertTrue(node3.isNumber());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertFalse(node3.isAssign());
assertFalse(node3.isLabelName());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isLabel());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isCast());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.isDo());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isStringKey());
assertFalse(node3.isThis());
assertFalse(node3.isVar());
assertFalse(node3.isHook());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isParamList());
assertFalse(node3.isCatch());
assertFalse(node3.isSwitch());
assertFalse(node3.isWith());
assertEquals(39, node3.getType());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isBlock());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isCase());
assertEquals(0, jSTypeArray0.length);
assertNotNull(node3);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);

boolean boolean4 = node0.isEquivalentTo(node2);
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isBreak());
assertEquals(83, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isCall());
assertFalse(node2.isObjectLit());
assertTrue(node2.isParamList());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(boolean4);
assertEquals(0, jSTypeArray0.length);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);

Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isBreak());
assertEquals(83, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isCall());
assertFalse(node2.isObjectLit());
assertTrue(node2.isParamList());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertEquals(0, jSTypeArray0.length);
assertNotNull(node_AncestorIterable0);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));

Iterable<Node> iterable0 = new ArrayDeque<Node>(30);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));

SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("8`QN", true);
assertTrue(simpleSourceFile0.isExtern());
assertEquals("8`QN", simpleSourceFile0.getName());
assertEquals("8`QN", simpleSourceFile0.toString());
assertNotNull(simpleSourceFile0);

int int0 = simpleSourceFile0.getLineOffset(2);
assertTrue(simpleSourceFile0.isExtern());
assertEquals("8`QN", simpleSourceFile0.getName());
assertEquals("8`QN", simpleSourceFile0.toString());
assertEquals(Integer.MIN_VALUE, int0);

node2.setStaticSourceFile(simpleSourceFile0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isBreak());
assertEquals(83, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isCall());
assertFalse(node2.isObjectLit());
assertTrue(node2.isParamList());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertTrue(simpleSourceFile0.isExtern());
assertEquals("8`QN", simpleSourceFile0.getName());
assertEquals("8`QN", simpleSourceFile0.toString());
assertEquals(0, jSTypeArray0.length);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));

boolean boolean5 = node2.isOnlyModifiesArgumentsCall();
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isBreak());
assertEquals(83, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isCall());
assertFalse(node2.isObjectLit());
assertTrue(node2.isParamList());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(boolean5);
assertEquals(0, jSTypeArray0.length);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));

boolean boolean6 = node1.isObjectLit();
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isName());
assertTrue(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isGetElem());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertFalse(node1.isEmpty());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(boolean6);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean5);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));

boolean boolean7 = node2.isVar();
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isBreak());
assertEquals(83, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isCall());
assertFalse(node2.isObjectLit());
assertTrue(node2.isParamList());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(boolean7);
assertEquals(0, jSTypeArray0.length);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));

node2.setIsSyntheticBlock(false);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isBreak());
assertEquals(83, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isCall());
assertFalse(node2.isObjectLit());
assertTrue(node2.isParamList());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertEquals(0, jSTypeArray0.length);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));

boolean boolean8 = node0.isVarArgs();
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(boolean8);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean8 == boolean7);
assertTrue(boolean8 == boolean1);
assertTrue(boolean8 == boolean2);
assertTrue(boolean8 == boolean6);
assertTrue(boolean8 == boolean3);
assertTrue(boolean8 == boolean0);
assertTrue(boolean8 == boolean4);
assertTrue(boolean8 == boolean5);

boolean boolean9 = node2.isNoSideEffectsCall();
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isBreak());
assertEquals(83, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isCall());
assertFalse(node2.isObjectLit());
assertTrue(node2.isParamList());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(boolean9);
assertEquals(0, jSTypeArray0.length);
assertTrue(boolean9 == boolean3);
assertTrue(boolean9 == boolean8);
assertTrue(boolean9 == boolean4);
assertTrue(boolean9 == boolean1);
assertTrue(boolean9 == boolean2);
assertTrue(boolean9 == boolean0);
assertTrue(boolean9 == boolean6);
assertTrue(boolean9 == boolean7);
assertTrue(boolean9 == boolean5);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));

Node node4 = new Node(16);
assertFalse(node4.isArrayLit());
assertFalse(node4.isDelProp());
assertFalse(node4.isIf());
assertFalse(node4.isFor());
assertFalse(node4.isNE());
assertFalse(node4.isFunction());
assertFalse(node4.isRegExp());
assertFalse(node4.isVoid());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isInc());
assertFalse(node4.isTrue());
assertFalse(node4.isSetterDef());
assertFalse(node4.isIn());
assertFalse(node4.isEmpty());
assertFalse(node4.isCall());
assertFalse(node4.isFalse());
assertFalse(node4.isName());
assertFalse(node4.isNull());
assertFalse(node4.isThrow());
assertFalse(node4.isComma());
assertFalse(node4.isBreak());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isReturn());
assertFalse(node4.isWhile());
assertFalse(node4.isDebugger());
assertFalse(node4.isGetProp());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isString());
assertEquals(16, node4.getType());
assertFalse(node4.hasOneChild());
assertFalse(node4.isAssign());
assertFalse(node4.isLabelName());
assertFalse(node4.hasChildren());
assertFalse(node4.isExprResult());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isWith());
assertFalse(node4.isGetElem());
assertFalse(node4.isCast());
assertFalse(node4.isContinue());
assertFalse(node4.isDo());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isNew());
assertFalse(node4.isOr());
assertFalse(node4.isAdd());
assertFalse(node4.isHook());
assertFalse(node4.isBlock());
assertFalse(node4.isStringKey());
assertFalse(node4.isVar());
assertFalse(node4.isThis());
assertFalse(node4.isParamList());
assertFalse(node4.isSwitch());
assertFalse(node4.isCatch());
assertFalse(node4.isInstanceOf());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isCase());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isTry());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isScript());
assertNotNull(node4);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));

boolean boolean10 = node4.mayMutateGlobalStateOrThrow();
assertFalse(node4.isArrayLit());
assertFalse(node4.isDelProp());
assertFalse(node4.isIf());
assertFalse(node4.isFor());
assertFalse(node4.isNE());
assertFalse(node4.isFunction());
assertFalse(node4.isRegExp());
assertFalse(node4.isVoid());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isInc());
assertFalse(node4.isTrue());
assertFalse(node4.isSetterDef());
assertFalse(node4.isIn());
assertFalse(node4.isEmpty());
assertFalse(node4.isCall());
assertFalse(node4.isFalse());
assertFalse(node4.isName());
assertFalse(node4.isNull());
assertFalse(node4.isThrow());
assertFalse(node4.isComma());
assertFalse(node4.isBreak());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isReturn());
assertFalse(node4.isWhile());
assertFalse(node4.isDebugger());
assertFalse(node4.isGetProp());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isString());
assertEquals(16, node4.getType());
assertFalse(node4.hasOneChild());
assertFalse(node4.isAssign());
assertFalse(node4.isLabelName());
assertFalse(node4.hasChildren());
assertFalse(node4.isExprResult());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isWith());
assertFalse(node4.isGetElem());
assertFalse(node4.isCast());
assertFalse(node4.isContinue());
assertFalse(node4.isDo());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isNew());
assertFalse(node4.isOr());
assertFalse(node4.isAdd());
assertFalse(node4.isHook());
assertFalse(node4.isBlock());
assertFalse(node4.isStringKey());
assertFalse(node4.isVar());
assertFalse(node4.isThis());
assertFalse(node4.isParamList());
assertFalse(node4.isSwitch());
assertFalse(node4.isCatch());
assertFalse(node4.isInstanceOf());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isCase());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isTry());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isScript());
assertTrue(boolean10);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(boolean10 == boolean7);
assertFalse(boolean10 == boolean2);
assertFalse(boolean10 == boolean5);
assertFalse(boolean10 == boolean0);
assertFalse(boolean10 == boolean9);
assertFalse(boolean10 == boolean6);
assertFalse(boolean10 == boolean1);
assertFalse(boolean10 == boolean3);
assertFalse(boolean10 == boolean4);
assertFalse(boolean10 == boolean8);

node1.setChangeTime(16);
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isName());
assertTrue(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isGetElem());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertFalse(node1.isEmpty());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));

boolean boolean11 = node1.isNull();
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isName());
assertTrue(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isGetElem());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertFalse(node1.isEmpty());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(boolean11);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertTrue(boolean11 == boolean1);
assertTrue(boolean11 == boolean3);
assertTrue(boolean11 == boolean9);
assertTrue(boolean11 == boolean0);
assertFalse(boolean11 == boolean10);
assertTrue(boolean11 == boolean7);
assertTrue(boolean11 == boolean2);
assertTrue(boolean11 == boolean5);
assertTrue(boolean11 == boolean6);
assertTrue(boolean11 == boolean8);
assertTrue(boolean11 == boolean4);

boolean boolean12 = node2.isNot();
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isLabelName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isBreak());
assertEquals(83, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isCall());
assertFalse(node2.isObjectLit());
assertTrue(node2.isParamList());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isCase());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(boolean12);
assertEquals(0, jSTypeArray0.length);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node4));
assertTrue(boolean12 == boolean8);
assertFalse(boolean12 == boolean10);
assertTrue(boolean12 == boolean7);
assertTrue(boolean12 == boolean1);
assertTrue(boolean12 == boolean2);
assertTrue(boolean12 == boolean6);
assertTrue(boolean12 == boolean3);
assertTrue(boolean12 == boolean9);
assertTrue(boolean12 == boolean0);
assertTrue(boolean12 == boolean11);
assertTrue(boolean12 == boolean4);
assertTrue(boolean12 == boolean5);

Set<String> set0 = node4.getDirectives();
assertFalse(node4.isArrayLit());
assertFalse(node4.isDelProp());
assertFalse(node4.isIf());
assertFalse(node4.isFor());
assertFalse(node4.isNE());
assertFalse(node4.isFunction());
assertFalse(node4.isRegExp());
assertFalse(node4.isVoid());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isInc());
assertFalse(node4.isTrue());
assertFalse(node4.isSetterDef());
assertFalse(node4.isIn());
assertFalse(node4.isEmpty());
assertFalse(node4.isCall());
assertFalse(node4.isFalse());
assertFalse(node4.isName());
assertFalse(node4.isNull());
assertFalse(node4.isThrow());
assertFalse(node4.isComma());
assertFalse(node4.isBreak());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isReturn());
assertFalse(node4.isWhile());
assertFalse(node4.isDebugger());
assertFalse(node4.isGetProp());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isString());
assertEquals(16, node4.getType());
assertFalse(node4.hasOneChild());
assertFalse(node4.isAssign());
assertFalse(node4.isLabelName());
assertFalse(node4.hasChildren());
assertFalse(node4.isExprResult());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isWith());
assertFalse(node4.isGetElem());
assertFalse(node4.isCast());
assertFalse(node4.isContinue());
assertFalse(node4.isDo());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isNew());
assertFalse(node4.isOr());
assertFalse(node4.isAdd());
assertFalse(node4.isHook());
assertFalse(node4.isBlock());
assertFalse(node4.isStringKey());
assertFalse(node4.isVar());
assertFalse(node4.isThis());
assertFalse(node4.isParamList());
assertFalse(node4.isSwitch());
assertFalse(node4.isCatch());
assertFalse(node4.isInstanceOf());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isCase());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isTry());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isScript());
assertNull(set0);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));

boolean boolean13 = node0.isTypeOf();
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isScript());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThrow());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(boolean13);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean13 == boolean2);
assertTrue(boolean13 == boolean8);
assertTrue(boolean13 == boolean9);
assertTrue(boolean13 == boolean3);
assertTrue(boolean13 == boolean1);
assertTrue(boolean13 == boolean7);
assertTrue(boolean13 == boolean11);
assertTrue(boolean13 == boolean5);
assertTrue(boolean13 == boolean4);
assertTrue(boolean13 == boolean12);
assertFalse(boolean13 == boolean10);
assertTrue(boolean13 == boolean6);
assertTrue(boolean13 == boolean0);

boolean boolean14 = node4.isNE();
assertFalse(node4.isArrayLit());
assertFalse(node4.isDelProp());
assertFalse(node4.isIf());
assertFalse(node4.isFor());
assertFalse(node4.isNE());
assertFalse(node4.isFunction());
assertFalse(node4.isRegExp());
assertFalse(node4.isVoid());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isInc());
assertFalse(node4.isTrue());
assertFalse(node4.isSetterDef());
assertFalse(node4.isIn());
assertFalse(node4.isEmpty());
assertFalse(node4.isCall());
assertFalse(node4.isFalse());
assertFalse(node4.isName());
assertFalse(node4.isNull());
assertFalse(node4.isThrow());
assertFalse(node4.isComma());
assertFalse(node4.isBreak());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isReturn());
assertFalse(node4.isWhile());
assertFalse(node4.isDebugger());
assertFalse(node4.isGetProp());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isString());
assertEquals(16, node4.getType());
assertFalse(node4.hasOneChild());
assertFalse(node4.isAssign());
assertFalse(node4.isLabelName());
assertFalse(node4.hasChildren());
assertFalse(node4.isExprResult());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isWith());
assertFalse(node4.isGetElem());
assertFalse(node4.isCast());
assertFalse(node4.isContinue());
assertFalse(node4.isDo());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isNew());
assertFalse(node4.isOr());
assertFalse(node4.isAdd());
assertFalse(node4.isHook());
assertFalse(node4.isBlock());
assertFalse(node4.isStringKey());
assertFalse(node4.isVar());
assertFalse(node4.isThis());
assertFalse(node4.isParamList());
assertFalse(node4.isSwitch());
assertFalse(node4.isCatch());
assertFalse(node4.isInstanceOf());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isCase());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isTry());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isScript());
assertFalse(boolean14);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertTrue(boolean14 == boolean5);
assertTrue(boolean14 == boolean11);
assertTrue(boolean14 == boolean1);
assertTrue(boolean14 == boolean9);
assertTrue(boolean14 == boolean3);
assertTrue(boolean14 == boolean12);
assertTrue(boolean14 == boolean2);
assertTrue(boolean14 == boolean7);
assertFalse(boolean14 == boolean10);
assertTrue(boolean14 == boolean6);
assertTrue(boolean14 == boolean8);
assertTrue(boolean14 == boolean13);
assertTrue(boolean14 == boolean4);
assertTrue(boolean14 == boolean0);


[MASTER] 17:54:42.234 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_119_1629222881353/com/google/javascript/rhino/Node_119_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_119_1629222881353/com/google/javascript/rhino/Node_119_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:42.234 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:42.234 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:42.259 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 575
[MASTER] 17:54:42.260 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_119_1629222881353/com/google/javascript/rhino/Node_119_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:41 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_119_tmp__ESTest extends Node_119_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(45);
22:       assertFalse(node0.isObjectLit());
23:       assertFalse(node0.isAnd());
24:       assertFalse(node0.isInstanceOf());
25:       assertFalse(node0.isGetProp());
26:       assertFalse(node0.isScript());
27:       assertFalse(node0.isNot());
28:       assertFalse(node0.isCast());
29:       assertFalse(node0.isThrow());
30:       assertFalse(node0.isLabelName());
31:       assertFalse(node0.isLabel());
32:       assertFalse(node0.isFalse());
33:       assertFalse(node0.isContinue());
34:       assertFalse(node0.isDo());
35:       assertFalse(node0.isAssignAdd());
36:       assertEquals(45, node0.getType());
37:       assertFalse(node0.isString());
38:       assertFalse(node0.isOr());
39:       assertEquals((-1), node0.getSourcePosition());
40:       assertFalse(node0.isCall());
41:       assertFalse(node0.isName());
42:       assertFalse(node0.isGetElem());
43:       assertFalse(node0.isDelProp());
44:       assertFalse(node0.isBreak());
45:       assertFalse(node0.isVoid());
46:       assertFalse(node0.isTypeOf());
47:       assertFalse(node0.isExprResult());
48:       assertFalse(node0.isWhile());
49:       assertFalse(node0.isAssign());
50:       assertFalse(node0.isReturn());
51:       assertFalse(node0.isDec());
52:       assertFalse(node0.hasChildren());
53:       assertFalse(node0.isComma());
54:       assertFalse(node0.isCatch());
55:       assertFalse(node0.isSetterDef());
56:       assertFalse(node0.isTrue());
57:       assertFalse(node0.isNull());
58:       assertFalse(node0.isParamList());
59:       assertFalse(node0.isDebugger());
60:       assertFalse(node0.isVar());
61:       assertFalse(node0.isStringKey());
62:       assertFalse(node0.isEmpty());
63:       assertFalse(node0.isAdd());
64:       assertFalse(node0.isArrayLit());
65:       assertFalse(node0.isNew());
66:       assertFalse(node0.isFunction());
67:       assertFalse(node0.isDefaultCase());
68:       assertEquals(0, node0.getChildCount());
69:       assertFalse(node0.hasMoreThanOneChild());
70:       assertFalse(node0.isIn());
71:       assertFalse(node0.isCase());
72:       assertEquals((-1), node0.getLineno());
73:       assertFalse(node0.isSwitch());
74:       assertFalse(node0.isNE());
75:       assertFalse(node0.isNumber());
76:       assertFalse(node0.isInc());
77:       assertFalse(node0.isIf());
78:       assertFalse(node0.isGetterDef());
79:       assertEquals((-1), node0.getCharno());
80:       assertFalse(node0.isHook());
81:       assertFalse(node0.isTry());
82:       assertFalse(node0.hasOneChild());
83:       assertFalse(node0.isThis());
84:       assertFalse(node0.isRegExp());
85:       assertFalse(node0.isWith());
86:       assertFalse(node0.isBlock());
87:       assertFalse(node0.isFor());
88:       assertNotNull(node0);
89:       
90:       String string0 = node0.getQualifiedName();
91:       assertFalse(node0.isObjectLit());
92:       assertFalse(node0.isAnd());
93:       assertFalse(node0.isInstanceOf());
94:       assertFalse(node0.isGetProp());
95:       assertFalse(node0.isScript());
96:       assertFalse(node0.isNot());
97:       assertFalse(node0.isCast());
98:       assertFalse(node0.isThrow());
99:       assertFalse(node0.isLabelName());
100:       assertFalse(node0.isLabel());
101:       assertFalse(node0.isFalse());
102:       assertFalse(node0.isContinue());
103:       assertFalse(node0.isDo());
104:       assertFalse(node0.isAssignAdd());
105:       assertEquals(45, node0.getType());
106:       assertFalse(node0.isString());
107:       assertFalse(node0.isOr());
108:       assertEquals((-1), node0.getSourcePosition());
109:       assertFalse(node0.isCall());
110:       assertFalse(node0.isName());
111:       assertFalse(node0.isGetElem());
112:       assertFalse(node0.isDelProp());
113:       assertFalse(node0.isBreak());
114:       assertFalse(node0.isVoid());
115:       assertFalse(node0.isTypeOf());
116:       assertFalse(node0.isExprResult());
117:       assertFalse(node0.isWhile());
118:       assertFalse(node0.isAssign());
119:       assertFalse(node0.isReturn());
120:       assertFalse(node0.isDec());
121:       assertFalse(node0.hasChildren());
122:       assertFalse(node0.isComma());
123:       assertFalse(node0.isCatch());
124:       assertFalse(node0.isSetterDef());
125:       assertFalse(node0.isTrue());
126:       assertFalse(node0.isNull());
127:       assertFalse(node0.isParamList());
128:       assertFalse(node0.isDebugger());
129:       assertFalse(node0.isVar());
130:       assertFalse(node0.isStringKey());
131:       assertFalse(node0.isEmpty());
132:       assertFalse(node0.isAdd());
133:       assertFalse(node0.isArrayLit());
134:       assertFalse(node0.isNew());
135:       assertFalse(node0.isFunction());
136:       assertFalse(node0.isDefaultCase());
137:       assertEquals(0, node0.getChildCount());
138:       assertFalse(node0.hasMoreThanOneChild());
139:       assertFalse(node0.isIn());
140:       assertFalse(node0.isCase());
141:       assertEquals((-1), node0.getLineno());
142:       assertFalse(node0.isSwitch());
143:       assertFalse(node0.isNE());
144:       assertFalse(node0.isNumber());
145:       assertFalse(node0.isInc());
146:       assertFalse(node0.isIf());
147:       assertFalse(node0.isGetterDef());
148:       assertEquals((-1), node0.getCharno());
149:       assertFalse(node0.isHook());
150:       assertFalse(node0.isTry());
151:       assertFalse(node0.hasOneChild());
152:       assertFalse(node0.isThis());
153:       assertFalse(node0.isRegExp());
154:       assertFalse(node0.isWith());
155:       assertFalse(node0.isBlock());
156:       assertFalse(node0.isFor());
157:       assertNull(string0);
158:       
159:       Node node1 = new Node(31);
160:       assertEquals((-1), node1.getSourcePosition());
161:       assertTrue(node1.isDelProp());
162:       assertFalse(node1.isLabel());
163:       assertFalse(node1.isReturn());
164:       assertFalse(node1.hasChildren());
165:       assertFalse(node1.isOr());
166:       assertFalse(node1.isAssign());
167:       assertFalse(node1.isDec());
168:       assertFalse(node1.isTypeOf());
169:       assertFalse(node1.hasMoreThanOneChild());
170:       assertFalse(node1.isNumber());
171:       assertFalse(node1.isWhile());
172:       assertFalse(node1.isDo());
173:       assertFalse(node1.hasOneChild());
174:       assertFalse(node1.isAssignAdd());
175:       assertFalse(node1.isScript());
176:       assertFalse(node1.isNot());
177:       assertFalse(node1.isContinue());
178:       assertFalse(node1.isAnd());
179:       assertFalse(node1.isObjectLit());
180:       assertFalse(node1.isCast());
181:       assertFalse(node1.isStringKey());
182:       assertFalse(node1.isLabelName());
183:       assertFalse(node1.isComma());
184:       assertFalse(node1.isNull());
185:       assertFalse(node1.isBreak());
186:       assertFalse(node1.isGetProp());
187:       assertEquals(0, node1.getChildCount());
188:       assertFalse(node1.isVar());
189:       assertFalse(node1.isDefaultCase());
190:       assertFalse(node1.isExprResult());
191:       assertFalse(node1.isTrue());
192:       assertFalse(node1.isVoid());
193:       assertFalse(node1.isAdd());
194:       assertFalse(node1.isNew());
195:       assertFalse(node1.isCall());
196:       assertFalse(node1.isGetElem());
197:       assertFalse(node1.isName());
198:       assertFalse(node1.isNE());
199:       assertFalse(node1.isGetterDef());
200:       assertFalse(node1.isIn());
201:       assertFalse(node1.isCase());
202:       assertFalse(node1.isFor());
203:       assertFalse(node1.isEmpty());
204:       assertFalse(node1.isTry());
205:       assertFalse(node1.isDebugger());
206:       assertFalse(node1.isFunction());
207:       assertEquals((-1), node1.getCharno());
208:       assertFalse(node1.isString());
209:       assertFalse(node1.isArrayLit());
210:       assertFalse(node1.isSwitch());
211:       assertFalse(node1.isParamList());
212:       assertFalse(node1.isSetterDef());
213:       assertFalse(node1.isThis());
214:       assertFalse(node1.isInstanceOf());
215:       assertFalse(node1.isFalse());
216:       assertFalse(node1.isThrow());
217:       assertFalse(node1.isHook());
218:       assertFalse(node1.isInc());
219:       assertFalse(node1.isBlock());
220:       assertEquals(31, node1.getType());
221:       assertFalse(node1.isRegExp());
222:       assertFalse(node1.isWith());
223:       assertFalse(node1.isCatch());
224:       assertEquals((-1), node1.getLineno());
225:       assertFalse(node1.isIf());
226:       assertNotNull(node1);
227:       assertFalse(node1.equals((Object)node0));
228:       
229:       Node node2 = Node.newString(">F6+n;+C?)~A^");
230:       assertFalse(node2.isNE());
231:       assertFalse(node2.isIf());
232:       assertFalse(node2.isEmpty());
233:       assertFalse(node2.isDelProp());
234:       assertFalse(node2.isArrayLit());
235:       assertFalse(node2.isFor());
236:       assertFalse(node2.isRegExp());
237:       assertFalse(node2.isInc());
238:       assertFalse(node2.isTrue());
239:       assertFalse(node2.isDefaultCase());
240:       assertFalse(node2.isVoid());
241:       assertFalse(node2.isIn());
242:       assertFalse(node2.isNull());
243:       assertFalse(node2.isSetterDef());
244:       assertFalse(node2.isName());
245:       assertFalse(node2.isBreak());
246:       assertFalse(node2.isGetProp());
247:       assertFalse(node2.isCall());
248:       assertFalse(node2.isThrow());
249:       assertFalse(node2.isFalse());
250:       assertEquals(40, node2.getType());
251:       assertFalse(node2.isComma());
252:       assertFalse(node2.isFunction());
253:       assertFalse(node2.isWhile());
254:       assertFalse(node2.isAnd());
255:       assertFalse(node2.isNot());
256:       assertFalse(node2.isObjectLit());
257:       assertFalse(node2.isDebugger());
258:       assertEquals((-1), node2.getSourcePosition());
259:       assertFalse(node2.isTypeOf());
260:       assertFalse(node2.isNumber());
261:       assertFalse(node2.isLabelName());
262:       assertFalse(node2.isAssignAdd());
263:       assertFalse(node2.isGetElem());
264:       assertEquals((-1), node2.getLineno());
265:       assertFalse(node2.isCast());
266:       assertFalse(node2.hasMoreThanOneChild());
267:       assertFalse(node2.isContinue());
268:       assertFalse(node2.isAssign());
269:       assertFalse(node2.isLabel());
270:       assertFalse(node2.isReturn());
271:       assertFalse(node2.hasChildren());
272:       assertFalse(node2.isDec());
273:       assertFalse(node2.isExprResult());
274:       assertFalse(node2.isDo());
275:       assertFalse(node2.isAdd());
276:       assertFalse(node2.isNew());
277:       assertFalse(node2.isOr());
278:       assertFalse(node2.isThis());
279:       assertFalse(node2.isParamList());
280:       assertFalse(node2.isVar());
281:       assertFalse(node2.isHook());
282:       assertFalse(node2.isCatch());
283:       assertFalse(node2.isInstanceOf());
284:       assertFalse(node2.isBlock());
285:       assertFalse(node2.isWith());
286:       assertEquals(0, node2.getChildCount());
287:       assertFalse(node2.isScript());
288:       assertFalse(node2.isSwitch());
289:       assertFalse(node2.isTry());
290:       assertTrue(node2.isString());
291:       assertFalse(node2.hasOneChild());
292:       assertFalse(node2.isCase());
293:       assertFalse(node2.isStringKey());
294:       assertFalse(node2.isGetterDef());
295:       assertEquals((-1), node2.getCharno());
296:       assertNotNull(node2);
297:       assertFalse(node2.equals((Object)node0));
298:       assertFalse(node2.equals((Object)node1));
299:       
300:       Node node3 = node1.useSourceInfoIfMissingFrom(node0);
301:       assertFalse(node0.isObjectLit());
302:       assertFalse(node0.isAnd());
303:       assertFalse(node0.isInstanceOf());
304:       assertFalse(node0.isGetProp());
305:       assertFalse(node0.isScript());
306:       assertFalse(node0.isNot());
307:       assertFalse(node0.isCast());
308:       assertFalse(node0.isThrow());
309:       assertFalse(node0.isLabelName());
310:       assertFalse(node0.isLabel());
311:       assertFalse(node0.isFalse());
312:       assertFalse(node0.isContinue());
313:       assertFalse(node0.isDo());
314:       assertFalse(node0.isAssignAdd());
315:       assertEquals(45, node0.getType());
316:       assertFalse(node0.isString());
317:       assertFalse(node0.isOr());
318:       assertEquals((-1), node0.getSourcePosition());
319:       assertFalse(node0.isCall());
320:       assertFalse(node0.isName());
321:       assertFalse(node0.isGetElem());
322:       assertFalse(node0.isDelProp());
323:       assertFalse(node0.isBreak());
324:       assertFalse(node0.isVoid());
325:       assertFalse(node0.isTypeOf());
326:       assertFalse(node0.isExprResult());
327:       assertFalse(node0.isWhile());
328:       assertFalse(node0.isAssign());
329:       assertFalse(node0.isReturn());
330:       assertFalse(node0.isDec());
331:       assertFalse(node0.hasChildren());
332:       assertFalse(node0.isComma());
333:       assertFalse(node0.isCatch());
334:       assertFalse(node0.isSetterDef());
335:       assertFalse(node0.isTrue());
336:       assertFalse(node0.isNull());
337:       assertFalse(node0.isParamList());
338:       assertFalse(node0.isDebugger());
339:       assertFalse(node0.isVar());
340:       assertFalse(node0.isStringKey());
341:       assertFalse(node0.isEmpty());
342:       assertFalse(node0.isAdd());
343:       assertFalse(node0.isArrayLit());
344:       assertFalse(node0.isNew());
345:       assertFalse(node0.isFunction());
346:       assertFalse(node0.isDefaultCase());
347:       assertEquals(0, node0.getChildCount());
348:       assertFalse(node0.hasMoreThanOneChild());
349:       assertFalse(node0.isIn());
350:       assertFalse(node0.isCase());
351:       assertEquals((-1), node0.getLineno());
352:       assertFalse(node0.isSwitch());
353:       assertFalse(node0.isNE());
354:       assertFalse(node0.isNumber());
355:       assertFalse(node0.isInc());
356:       assertFalse(node0.isIf());
357:       assertFalse(node0.isGetterDef());
358:       assertEquals((-1), node0.getCharno());
359:       assertFalse(node0.isHook());
360:       assertFalse(node0.isTry());
361:       assertFalse(node0.hasOneChild());
362:       assertFalse(node0.isThis());
363:       assertFalse(node0.isRegExp());
364:       assertFalse(node0.isWith());
365:       assertFalse(node0.isBlock());
366:       assertFalse(node0.isFor());
367:       assertEquals((-1), node1.getSourcePosition());
368:       assertTrue(node1.isDelProp());
369:       assertFalse(node1.isLabel());
370:       assertFalse(node1.isReturn());
371:       assertFalse(node1.hasChildren());
372:       assertFalse(node1.isOr());
373:       assertFalse(node1.isAssign());
374:       assertFalse(node1.isDec());
375:       assertFalse(node1.isTypeOf());
376:       assertFalse(node1.hasMoreThanOneChild());
377:       assertFalse(node1.isNumber());
378:       assertFalse(node1.isWhile());
379:       assertFalse(node1.isDo());
380:       assertFalse(node1.hasOneChild());
381:       assertFalse(node1.isAssignAdd());
382:       assertFalse(node1.isScript());
383:       assertFalse(node1.isNot());
384:       assertFalse(node1.isContinue());
385:       assertFalse(node1.isAnd());
386:       assertFalse(node1.isObjectLit());
387:       assertFalse(node1.isCast());
388:       assertFalse(node1.isStringKey());
389:       assertFalse(node1.isLabelName());
390:       assertFalse(node1.isComma());
391:       assertFalse(node1.isNull());
392:       assertFalse(node1.isBreak());
393:       assertFalse(node1.isGetProp());
394:       assertEquals(0, node1.getChildCount());
395:       assertFalse(node1.isVar());
396:       assertFalse(node1.isDefaultCase());
397:       assertFalse(node1.isExprResult());
398:       assertFalse(node1.isTrue());
399:       assertFalse(node1.isVoid());
400:       assertFalse(node1.isAdd());
401:       assertFalse(node1.isNew());
402:       assertFalse(node1.isCall());
403:       assertFalse(node1.isGetElem());
404:       assertFalse(node1.isName());
405:       assertFalse(node1.isNE());
406:       assertFalse(node1.isGetterDef());
407:       assertFalse(node1.isIn());
408:       assertFalse(node1.isCase());
409:       assertFalse(node1.isFor());
410:       assertFalse(node1.isEmpty());
411:       assertFalse(node1.isTry());
412:       assertFalse(node1.isDebugger());
413:       assertFalse(node1.isFunction());
414:       assertEquals((-1), node1.getCharno());
415:       assertFalse(node1.isString());
416:       assertFalse(node1.isArrayLit());
417:       assertFalse(node1.isSwitch());
418:       assertFalse(node1.isParamList());
419:       assertFalse(node1.isSetterDef());
420:       assertFalse(node1.isThis());
421:       assertFalse(node1.isInstanceOf());
422:       assertFalse(node1.isFalse());
423:       assertFalse(node1.isThrow());
424:       assertFalse(node1.isHook());
425:       assertFalse(node1.isInc());
426:       assertFalse(node1.isBlock());
427:       assertEquals(31, node1.getType());
428:       assertFalse(node1.isRegExp());
429:       assertFalse(node1.isWith());
430:       assertFalse(node1.isCatch());
431:       assertEquals((-1), node1.getLineno());
432:       assertFalse(node1.isIf());
433:       assertFalse(node3.isTry());
434:       assertFalse(node3.isVoid());
435:       assertFalse(node3.isDebugger());
436:       assertFalse(node3.isArrayLit());
437:       assertFalse(node3.isTrue());
438:       assertFalse(node3.isDefaultCase());
439:       assertFalse(node3.isFor());
440:       assertFalse(node3.isCatch());
441:       assertFalse(node3.isFunction());
442:       assertFalse(node3.isRegExp());
443:       assertEquals(0, node3.getChildCount());
444:       assertFalse(node3.isNE());
445:       assertFalse(node3.isNull());
446:       assertFalse(node3.isIf());
447:       assertFalse(node3.isEmpty());
448:       assertFalse(node3.isInc());
449:       assertFalse(node3.isSetterDef());
450:       assertFalse(node3.isIn());
451:       assertEquals(31, node3.getType());
452:       assertFalse(node3.isBlock());
453:       assertFalse(node3.isAdd());
454:       assertEquals((-1), node3.getCharno());
455:       assertFalse(node3.isNew());
456:       assertFalse(node3.isSwitch());
457:       assertFalse(node3.isVar());
458:       assertFalse(node3.isHook());
459:       assertFalse(node3.isStringKey());
460:       assertFalse(node3.hasMoreThanOneChild());
461:       assertFalse(node3.isThis());
462:       assertFalse(node3.isParamList());
463:       assertFalse(node3.isGetterDef());
464:       assertFalse(node3.isCase());
465:       assertFalse(node3.isScript());
466:       assertFalse(node3.isNumber());
467:       assertFalse(node3.hasOneChild());
468:       assertFalse(node3.isAssign());
469:       assertFalse(node3.isWith());
470:       assertFalse(node3.isLabelName());
471:       assertFalse(node3.isGetElem());
472:       assertFalse(node3.hasChildren());
473:       assertFalse(node3.isDec());
474:       assertFalse(node3.isCast());
475:       assertFalse(node3.isTypeOf());
476:       assertFalse(node3.isExprResult());
477:       assertFalse(node3.isInstanceOf());
478:       assertFalse(node3.isOr());
479:       assertFalse(node3.isLabel());
480:       assertFalse(node3.isAssignAdd());
481:       assertTrue(node3.isDelProp());
482:       assertEquals((-1), node3.getLineno());
483:       assertFalse(node3.isDo());
484:       assertFalse(node3.isThrow());
485:       assertFalse(node3.isWhile());
486:       assertFalse(node3.isName());
487:       assertFalse(node3.isFalse());
488:       assertFalse(node3.isBreak());
489:       assertFalse(node3.isCall());
490:       assertFalse(node3.isContinue());
491:       assertFalse(node3.isReturn());
492:       assertFalse(node3.isGetProp());
493:       assertFalse(node3.isComma());
494:       assertFalse(node3.isAnd());
495:       assertFalse(node3.isNot());
496:       assertEquals((-1), node3.getSourcePosition());
497:       assertFalse(node3.isObjectLit());
498:       assertFalse(node3.isString());
499:       assertNotNull(node3);
500:       assertFalse(node0.equals((Object)node1));
501:       assertFalse(node0.equals((Object)node2));
502:       assertFalse(node1.equals((Object)node2));
503:       assertFalse(node1.equals((Object)node0));
504:       assertFalse(node3.equals((Object)node0));
505:       assertFalse(node3.equals((Object)node2));
506:       
507:       Iterable<Node> iterable0 = node0.children();
508:       assertFalse(node0.isObjectLit());
509:       assertFalse(node0.isAnd());
510:       assertFalse(node0.isInstanceOf());
511:       assertFalse(node0.isGetProp());
512:       assertFalse(node0.isScript());
513:       assertFalse(node0.isNot());
514:       assertFalse(node0.isCast());
515:       assertFalse(node0.isThrow());
516:       assertFalse(node0.isLabelName());
517:       assertFalse(node0.isLabel());
518:       assertFalse(node0.isFalse());
519:       assertFalse(node0.isContinue());
520:       assertFalse(node0.isDo());
521:       assertFalse(node0.isAssignAdd());
522:       assertEquals(45, node0.getType());
523:       assertFalse(node0.isString());
524:       assertFalse(node0.isOr());
525:       assertEquals((-1), node0.getSourcePosition());
526:       assertFalse(node0.isCall());
527:       assertFalse(node0.isName());
528:       assertFalse(node0.isGetElem());
529:       assertFalse(node0.isDelProp());
530:       assertFalse(node0.isBreak());
531:       assertFalse(node0.isVoid());
532:       assertFalse(node0.isTypeOf());
533:       assertFalse(node0.isExprResult());
534:       assertFalse(node0.isWhile());
535:       assertFalse(node0.isAssign());
536:       assertFalse(node0.isReturn());
537:       assertFalse(node0.isDec());
538:       assertFalse(node0.hasChildren());
539:       assertFalse(node0.isComma());
540:       assertFalse(node0.isCatch());
541:       assertFalse(node0.isSetterDef());
542:       assertFalse(node0.isTrue());
543:       assertFalse(node0.isNull());
544:       assertFalse(node0.isParamList());
545:       assertFalse(node0.isDebugger());
546:       assertFalse(node0.isVar());
547:       assertFalse(node0.isStringKey());
548:       assertFalse(node0.isEmpty());
549:       assertFalse(node0.isAdd());
550:       assertFalse(node0.isArrayLit());
551:       assertFalse(node0.isNew());
552:       assertFalse(node0.isFunction());
553:       assertFalse(node0.isDefaultCase());
554:       assertEquals(0, node0.getChildCount());
555:       assertFalse(node0.hasMoreThanOneChild());
556:       assertFalse(node0.isIn());
557:       assertFalse(node0.isCase());
558:       assertEquals((-1), node0.getLineno());
559:       assertFalse(node0.isSwitch());
560:       assertFalse(node0.isNE());
561:       assertFalse(node0.isNumber());
562:       assertFalse(node0.isInc());
563:       assertFalse(node0.isIf());
564:       assertFalse(node0.isGetterDef());
565:       assertEquals((-1), node0.getCharno());
566:       assertFalse(node0.isHook());
567:       assertFalse(node0.isTry());
568:       assertFalse(node0.hasOneChild());
569:       assertFalse(node0.isThis());
570:       assertFalse(node0.isRegExp());
571:       assertFalse(node0.isWith());
572:       assertFalse(node0.isBlock());
573:       assertFalse(node0.isFor());
574:       assertNotNull(iterable0);
575:       assertFalse(iterable0.contains(node0));
576:       assertFalse(node0.equals((Object)node1));
577:       assertFalse(node0.equals((Object)node2));
578:       assertFalse(node0.equals((Object)node3));
579:       
580:       Node node4 = Node.newString(">F6+n;+C?)~A^", 2, (-1087));
581:       assertFalse(node4.isObjectLit());
582:       assertFalse(node4.isNot());
583:       assertFalse(node4.isInstanceOf());
584:       assertFalse(node4.isScript());
585:       assertFalse(node4.isWith());
586:       assertFalse(node4.isThis());
587:       assertFalse(node4.isComma());
588:       assertFalse(node4.isGetProp());
589:       assertFalse(node4.hasOneChild());
590:       assertFalse(node4.isFalse());
591:       assertFalse(node4.isThrow());
592:       assertFalse(node4.isLabelName());
593:       assertFalse(node4.isNumber());
594:       assertEquals((-1), node4.getSourcePosition());
595:       assertFalse(node4.isCast());
596:       assertEquals((-1), node4.getCharno());
597:       assertFalse(node4.isAnd());
598:       assertFalse(node4.isSwitch());
599:       assertFalse(node4.isCase());
600:       assertFalse(node4.hasMoreThanOneChild());
601:       assertFalse(node4.isContinue());
602:       assertFalse(node4.isIn());
603:       assertFalse(node4.isBlock());
604:       assertTrue(node4.isString());
605:       assertFalse(node4.isInc());
606:       assertFalse(node4.isHook());
607:       assertFalse(node4.isFor());
608:       assertEquals((-1), node4.getLineno());
609:       assertFalse(node4.isNE());
610:       assertFalse(node4.isIf());
611:       assertEquals(40, node4.getType());
612:       assertEquals(0, node4.getChildCount());
613:       assertFalse(node4.isRegExp());
614:       assertFalse(node4.isCatch());
615:       assertFalse(node4.isFunction());
616:       assertFalse(node4.isTry());
617:       assertFalse(node4.isSetterDef());
618:       assertFalse(node4.isDefaultCase());
619:       assertFalse(node4.isStringKey());
620:       assertFalse(node4.isArrayLit());
621:       assertFalse(node4.isGetterDef());
622:       assertFalse(node4.isDebugger());
623:       assertFalse(node4.isParamList());
624:       assertFalse(node4.isDo());
625:       assertFalse(node4.isNew());
626:       assertFalse(node4.isAdd());
627:       assertFalse(node4.isReturn());
628:       assertFalse(node4.isLabel());
629:       assertFalse(node4.isVar());
630:       assertFalse(node4.isWhile());
631:       assertFalse(node4.isAssignAdd());
632:       assertFalse(node4.isName());
633:       assertFalse(node4.isGetElem());
634:       assertFalse(node4.isAssign());
635:       assertFalse(node4.isEmpty());
636:       assertFalse(node4.isCall());
637:       assertFalse(node4.hasChildren());
638:       assertFalse(node4.isBreak());
639:       assertFalse(node4.isTypeOf());
640:       assertFalse(node4.isDec());
641:       assertFalse(node4.isOr());
642:       assertFalse(node4.isVoid());
643:       assertFalse(node4.isExprResult());
644:       assertFalse(node4.isTrue());
645:       assertFalse(node4.isNull());
646:       assertFalse(node4.isDelProp());
647:       assertNotNull(node4);
648:       assertFalse(node4.equals((Object)node0));
649:       assertFalse(node4.equals((Object)node1));
650:       assertFalse(node4.equals((Object)node2));
651:       assertFalse(node4.equals((Object)node3));
652:       
653:       boolean boolean0 = node4.isGetProp();
654:       assertFalse(node4.isObjectLit());
655:       assertFalse(node4.isNot());
656:       assertFalse(node4.isInstanceOf());
657:       assertFalse(node4.isScript());
658:       assertFalse(node4.isWith());
659:       assertFalse(node4.isThis());
660:       assertFalse(node4.isComma());
661:       assertFalse(node4.isGetProp());
662:       assertFalse(node4.hasOneChild());
663:       assertFalse(node4.isFalse());
664:       assertFalse(node4.isThrow());
665:       assertFalse(node4.isLabelName());
666:       assertFalse(node4.isNumber());
667:       assertEquals((-1), node4.getSourcePosition());
668:       assertFalse(node4.isCast());
669:       assertEquals((-1), node4.getCharno());
670:       assertFalse(node4.isAnd());
671:       assertFalse(node4.isSwitch());
672:       assertFalse(node4.isCase());
673:       assertFalse(node4.hasMoreThanOneChild());
674:       assertFalse(node4.isContinue());
675:       assertFalse(node4.isIn());
676:       assertFalse(node4.isBlock());
677:       assertTrue(node4.isString());
678:       assertFalse(node4.isInc());
679:       assertFalse(node4.isHook());
680:       assertFalse(node4.isFor());
681:       assertEquals((-1), node4.getLineno());
682:       assertFalse(node4.isNE());
683:       assertFalse(node4.isIf());
684:       assertEquals(40, node4.getType());
685:       assertEquals(0, node4.getChildCount());
686:       assertFalse(node4.isRegExp());
687:       assertFalse(node4.isCatch());
688:       assertFalse(node4.isFunction());
689:       assertFalse(node4.isTry());
690:       assertFalse(node4.isSetterDef());
691:       assertFalse(node4.isDefaultCase());
692:       assertFalse(node4.isStringKey());
693:       assertFalse(node4.isArrayLit());
694:       assertFalse(node4.isGetterDef());
695:       assertFalse(node4.isDebugger());
696:       assertFalse(node4.isParamList());
697:       assertFalse(node4.isDo());
698:       assertFalse(node4.isNew());
699:       assertFalse(node4.isAdd());
700:       assertFalse(node4.isReturn());
701:       assertFalse(node4.isLabel());
702:       assertFalse(node4.isVar());
703:       assertFalse(node4.isWhile());
704:       assertFalse(node4.isAssignAdd());
705:       assertFalse(node4.isName());
706:       assertFalse(node4.isGetElem());
707:       assertFalse(node4.isAssign());
708:       assertFalse(node4.isEmpty());
709:       assertFalse(node4.isCall());
710:       assertFalse(node4.hasChildren());
711:       assertFalse(node4.isBreak());
712:       assertFalse(node4.isTypeOf());
713:       assertFalse(node4.isDec());
714:       assertFalse(node4.isOr());
715:       assertFalse(node4.isVoid());
716:       assertFalse(node4.isExprResult());
717:       assertFalse(node4.isTrue());
718:       assertFalse(node4.isNull());
719:       assertFalse(node4.isDelProp());
720:       assertFalse(boolean0);
721:       assertFalse(node4.equals((Object)node0));
722:       assertFalse(node4.equals((Object)node1));
723:       assertFalse(node4.equals((Object)node2));
724:       assertFalse(node4.equals((Object)node3));
725:       
726:       boolean boolean1 = node0.hasChildren();
727:       assertFalse(node0.isObjectLit());
728:       assertFalse(node0.isAnd());
729:       assertFalse(node0.isInstanceOf());
730:       assertFalse(node0.isGetProp());
731:       assertFalse(node0.isScript());
732:       assertFalse(node0.isNot());
733:       assertFalse(node0.isCast());
734:       assertFalse(node0.isThrow());
735:       assertFalse(node0.isLabelName());
736:       assertFalse(node0.isLabel());
737:       assertFalse(node0.isFalse());
738:       assertFalse(node0.isContinue());
739:       assertFalse(node0.isDo());
740:       assertFalse(node0.isAssignAdd());
741:       assertEquals(45, node0.getType());
742:       assertFalse(node0.isString());
743:       assertFalse(node0.isOr());
744:       assertEquals((-1), node0.getSourcePosition());
745:       assertFalse(node0.isCall());
746:       assertFalse(node0.isName());
747:       assertFalse(node0.isGetElem());
748:       assertFalse(node0.isDelProp());
749:       assertFalse(node0.isBreak());
750:       assertFalse(node0.isVoid());
751:       assertFalse(node0.isTypeOf());
752:       assertFalse(node0.isExprResult());
753:       assertFalse(node0.isWhile());
754:       assertFalse(node0.isAssign());
755:       assertFalse(node0.isReturn());
756:       assertFalse(node0.isDec());
757:       assertFalse(node0.hasChildren());
758:       assertFalse(node0.isComma());
759:       assertFalse(node0.isCatch());
760:       assertFalse(node0.isSetterDef());
761:       assertFalse(node0.isTrue());
762:       assertFalse(node0.isNull());
763:       assertFalse(node0.isParamList());
764:       assertFalse(node0.isDebugger());
765:       assertFalse(node0.isVar());
766:       assertFalse(node0.isStringKey());
767:       assertFalse(node0.isEmpty());
768:       assertFalse(node0.isAdd());
769:       assertFalse(node0.isArrayLit());
770:       assertFalse(node0.isNew());
771:       assertFalse(node0.isFunction());
772:       assertFalse(node0.isDefaultCase());
773:       assertEquals(0, node0.getChildCount());
774:       assertFalse(node0.hasMoreThanOneChild());
775:       assertFalse(node0.isIn());
776:       assertFalse(node0.isCase());
777:       assertEquals((-1), node0.getLineno());
778:       assertFalse(node0.isSwitch());
779:       assertFalse(node0.isNE());
780:       assertFalse(node0.isNumber());
781:       assertFalse(node0.isInc());
782:       assertFalse(node0.isIf());
783:       assertFalse(node0.isGetterDef());
784:       assertEquals((-1), node0.getCharno());
785:       assertFalse(node0.isHook());
786:       assertFalse(node0.isTry());
787:       assertFalse(node0.hasOneChild());
788:       assertFalse(node0.isThis());
789:       assertFalse(node0.isRegExp());
790:       assertFalse(node0.isWith());
791:       assertFalse(node0.isBlock());
792:       assertFalse(node0.isFor());
793:       assertFalse(boolean1);
794:       assertFalse(node0.equals((Object)node1));
795:       assertFalse(node0.equals((Object)node2));
796:       assertFalse(node0.equals((Object)node4));
797:       assertFalse(node0.equals((Object)node3));
798:       assertTrue(boolean1 == boolean0);
799:       
800:       boolean boolean2 = node1.isSwitch();
801:       assertEquals((-1), node1.getSourcePosition());
802:       assertTrue(node1.isDelProp());
803:       assertFalse(node1.isLabel());
804:       assertFalse(node1.isReturn());
805:       assertFalse(node1.hasChildren());
806:       assertFalse(node1.isOr());
807:       assertFalse(node1.isAssign());
808:       assertFalse(node1.isDec());
809:       assertFalse(node1.isTypeOf());
810:       assertFalse(node1.hasMoreThanOneChild());
811:       assertFalse(node1.isNumber());
812:       assertFalse(node1.isWhile());
813:       assertFalse(node1.isDo());
814:       assertFalse(node1.hasOneChild());
815:       assertFalse(node1.isAssignAdd());
816:       assertFalse(node1.isScript());
817:       assertFalse(node1.isNot());
818:       assertFalse(node1.isContinue());
819:       assertFalse(node1.isAnd());
820:       assertFalse(node1.isObjectLit());
821:       assertFalse(node1.isCast());
822:       assertFalse(node1.isStringKey());
823:       assertFalse(node1.isLabelName());
824:       assertFalse(node1.isComma());
825:       assertFalse(node1.isNull());
826:       assertFalse(node1.isBreak());
827:       assertFalse(node1.isGetProp());
828:       assertEquals(0, node1.getChildCount());
829:       assertFalse(node1.isVar());
830:       assertFalse(node1.isDefaultCase());
831:       assertFalse(node1.isExprResult());
832:       assertFalse(node1.isTrue());
833:       assertFalse(node1.isVoid());
834:       assertFalse(node1.isAdd());
835:       assertFalse(node1.isNew());
836:       assertFalse(node1.isCall());
837:       assertFalse(node1.isGetElem());
838:       assertFalse(node1.isName());
839:       assertFalse(node1.isNE());
840:       assertFalse(node1.isGetterDef());
841:       assertFalse(node1.isIn());
842:       assertFalse(node1.isCase());
843:       assertFalse(node1.isFor());
844:       assertFalse(node1.isEmpty());
845:       assertFalse(node1.isTry());
846:       assertFalse(node1.isDebugger());
847:       assertFalse(node1.isFunction());
848:       assertEquals((-1), node1.getCharno());
849:       assertFalse(node1.isString());
850:       assertFalse(node1.isArrayLit());
851:       assertFalse(node1.isSwitch());
852:       assertFalse(node1.isParamList());
853:       assertFalse(node1.isSetterDef());
854:       assertFalse(node1.isThis());
855:       assertFalse(node1.isInstanceOf());
856:       assertFalse(node1.isFalse());
857:       assertFalse(node1.isThrow());
858:       assertFalse(node1.isHook());
859:       assertFalse(node1.isInc());
860:       assertFalse(node1.isBlock());
861:       assertEquals(31, node1.getType());
862:       assertFalse(node1.isRegExp());
863:       assertFalse(node1.isWith());
864:       assertFalse(node1.isCatch());
865:       assertEquals((-1), node1.getLineno());
866:       assertFalse(node1.isIf());
867:       assertFalse(boolean2);
868:       assertFalse(node1.equals((Object)node2));
869:       assertFalse(node1.equals((Object)node4));
870:       assertFalse(node1.equals((Object)node0));
871:       assertTrue(boolean2 == boolean1);
872:       assertTrue(boolean2 == boolean0);
873:       
874:       Node node5 = node3.cloneNode();
875:       assertFalse(node0.isObjectLit());
876:       assertFalse(node0.isAnd());
877:       assertFalse(node0.isInstanceOf());
878:       assertFalse(node0.isGetProp());
879:       assertFalse(node0.isScript());
880:       assertFalse(node0.isNot());
881:       assertFalse(node0.isCast());
882:       assertFalse(node0.isThrow());
883:       assertFalse(node0.isLabelName());
884:       assertFalse(node0.isLabel());
885:       assertFalse(node0.isFalse());
886:       assertFalse(node0.isContinue());
887:       assertFalse(node0.isDo());
888:       assertFalse(node0.isAssignAdd());
889:       assertEquals(45, node0.getType());
890:       assertFalse(node0.isString());
891:       assertFalse(node0.isOr());
892:       assertEquals((-1), node0.getSourcePosition());
893:       assertFalse(node0.isCall());
894:       assertFalse(node0.isName());
895:       assertFalse(node0.isGetElem());
896:       assertFalse(node0.isDelProp());
897:       assertFalse(node0.isBreak());
898:       assertFalse(node0.isVoid());
899:       assertFalse(node0.isTypeOf());
900:       assertFalse(node0.isExprResult());
901:       assertFalse(node0.isWhile());
902:       assertFalse(node0.isAssign());
903:       assertFalse(node0.isReturn());
904:       assertFalse(node0.isDec());
905:       assertFalse(node0.hasChildren());
906:       assertFalse(node0.isComma());
907:       assertFalse(node0.isCatch());
908:       assertFalse(node0.isSetterDef());
909:       assertFalse(node0.isTrue());
910:       assertFalse(node0.isNull());
911:       assertFalse(node0.isParamList());
912:       assertFalse(node0.isDebugger());
913:       assertFalse(node0.isVar());
914:       assertFalse(node0.isStringKey());
915:       assertFalse(node0.isEmpty());
916:       assertFalse(node0.isAdd());
917:       assertFalse(node0.isArrayLit());
918:       assertFalse(node0.isNew());
919:       assertFalse(node0.isFunction());
920:       assertFalse(node0.isDefaultCase());
921:       assertEquals(0, node0.getChildCount());
922:       assertFalse(node0.hasMoreThanOneChild());
923:       assertFalse(node0.isIn());
924:       assertFalse(node0.isCase());
925:       assertEquals((-1), node0.getLineno());
926:       assertFalse(node0.isSwitch());
927:       assertFalse(node0.isNE());
928:       assertFalse(node0.isNumber());
929:       assertFalse(node0.isInc());
930:       assertFalse(node0.isIf());
931:       assertFalse(node0.isGetterDef());
932:       assertEquals((-1), node0.getCharno());
933:       assertFalse(node0.isHook());
934:       assertFalse(node0.isTry());
935:       assertFalse(node0.hasOneChild());
936:       assertFalse(node0.isThis());
937:       assertFalse(node0.isRegExp());
938:       assertFalse(node0.isWith());
939:       assertFalse(node0.isBlock());
940:       assertFalse(node0.isFor());
941:       assertEquals((-1), node1.getSourcePosition());
942:       assertTrue(node1.isDelProp());
943:       assertFalse(node1.isLabel());
944:       assertFalse(node1.isReturn());
945:       assertFalse(node1.hasChildren());
946:       assertFalse(node1.isOr());
947:       assertFalse(node1.isAssign());
948:       assertFalse(node1.isDec());
949:       assertFalse(node1.isTypeOf());
950:       assertFalse(node1.hasMoreThanOneChild());
951:       assertFalse(node1.isNumber());
952:       assertFalse(node1.isWhile());
953:       assertFalse(node1.isDo());
954:       assertFalse(node1.hasOneChild());
955:       assertFalse(node1.isAssignAdd());
956:       assertFalse(node1.isScript());
957:       assertFalse(node1.isNot());
958:       assertFalse(node1.isContinue());
959:       assertFalse(node1.isAnd());
960:       assertFalse(node1.isObjectLit());
961:       assertFalse(node1.isCast());
962:       assertFalse(node1.isStringKey());
963:       assertFalse(node1.isLabelName());
964:       assertFalse(node1.isComma());
965:       assertFalse(node1.isNull());
966:       assertFalse(node1.isBreak());
967:       assertFalse(node1.isGetProp());
968:       assertEquals(0, node1.getChildCount());
969:       assertFalse(node1.isVar());
970:       assertFalse(node1.isDefaultCase());
971:       assertFalse(node1.isExprResult());
972:       assertFalse(node1.isTrue());
973:       assertFalse(node1.isVoid());
974:       assertFalse(node1.isAdd());
975:       assertFalse(node1.isNew());
976:       assertFalse(node1.isCall());
977:       assertFalse(node1.isGetElem());
978:       assertFalse(node1.isName());
979:       assertFalse(node1.isNE());
980:       assertFalse(node1.isGetterDef());
981:       assertFalse(node1.isIn());
982:       assertFalse(node1.isCase());
983:       assertFalse(node1.isFor());
984:       assertFalse(node1.isEmpty());
985:       assertFalse(node1.isTry());
986:       assertFalse(node1.isDebugger());
987:       assertFalse(node1.isFunction());
988:       assertEquals((-1), node1.getCharno());
989:       assertFalse(node1.isString());
990:       assertFalse(node1.isArrayLit());
991:       assertFalse(node1.isSwitch());
992:       assertFalse(node1.isParamList());
993:       assertFalse(node1.isSetterDef());
994:       assertFalse(node1.isThis());
995:       assertFalse(node1.isInstanceOf());
996:       assertFalse(node1.isFalse());
997:       assertFalse(node1.isThrow());
998:       assertFalse(node1.isHook());
999:       assertFalse(node1.isInc());
1000:       assertFalse(node1.isBlock());
1001:       assertEquals(31, node1.getType());
1002:       assertFalse(node1.isRegExp());
1003:       assertFalse(node1.isWith());
1004:       assertFalse(node1.isCatch());
1005:       assertEquals((-1), node1.getLineno());
1006:       assertFalse(node1.isIf());
1007:       assertFalse(node3.isTry());
1008:       assertFalse(node3.isVoid());
1009:       assertFalse(node3.isDebugger());
1010:       assertFalse(node3.isArrayLit());
1011:       assertFalse(node3.isTrue());
1012:       assertFalse(node3.isDefaultCase());
1013:       assertFalse(node3.isFor());
1014:       assertFalse(node3.isCatch());
1015:       assertFalse(node3.isFunction());
1016:       assertFalse(node3.isRegExp());
1017:       assertEquals(0, node3.getChildCount());
1018:       assertFalse(node3.isNE());
1019:       assertFalse(node3.isNull());
1020:       assertFalse(node3.isIf());
1021:       assertFalse(node3.isEmpty());
1022:       assertFalse(node3.isInc());
1023:       assertFalse(node3.isSetterDef());
1024:       assertFalse(node3.isIn());
1025:       assertEquals(31, node3.getType());
1026:       assertFalse(node3.isBlock());
1027:       assertFalse(node3.isAdd());
1028:       assertEquals((-1), node3.getCharno());
1029:       assertFalse(node3.isNew());
1030:       assertFalse(node3.isSwitch());
1031:       assertFalse(node3.isVar());
1032:       assertFalse(node3.isHook());
1033:       assertFalse(node3.isStringKey());
1034:       assertFalse(node3.hasMoreThanOneChild());
1035:       assertFalse(node3.isThis());
1036:       assertFalse(node3.isParamList());
1037:       assertFalse(node3.isGetterDef());
1038:       assertFalse(node3.isCase());
1039:       assertFalse(node3.isScript());
1040:       assertFalse(node3.isNumber());
1041:       assertFalse(node3.hasOneChild());
1042:       assertFalse(node3.isAssign());
1043:       assertFalse(node3.isWith());
1044:       assertFalse(node3.isLabelName());
1045:       assertFalse(node3.isGetElem());
1046:       assertFalse(node3.hasChildren());
1047:       assertFalse(node3.isDec());
1048:       assertFalse(node3.isCast());
1049:       assertFalse(node3.isTypeOf());
1050:       assertFalse(node3.isExprResult());
1051:       assertFalse(node3.isInstanceOf());
1052:       assertFalse(node3.isOr());
1053:       assertFalse(node3.isLabel());
1054:       assertFalse(node3.isAssignAdd());
1055:       assertTrue(node3.isDelProp());
1056:       assertEquals((-1), node3.getLineno());
1057:       assertFalse(node3.isDo());
1058:       assertFalse(node3.isThrow());
1059:       assertFalse(node3.isWhile());
1060:       assertFalse(node3.isName());
1061:       assertFalse(node3.isFalse());
1062:       assertFalse(node3.isBreak());
1063:       assertFalse(node3.isCall());
1064:       assertFalse(node3.isContinue());
1065:       assertFalse(node3.isReturn());
1066:       assertFalse(node3.isGetProp());
1067:       assertFalse(node3.isComma());
1068:       assertFalse(node3.isAnd());
1069:       assertFalse(node3.isNot());
1070:       assertEquals((-1), node3.getSourcePosition());
1071:       assertFalse(node3.isObjectLit());
1072:       assertFalse(node3.isString());
1073:       assertFalse(node5.isIf());
1074:       assertFalse(node5.isNE());
1075:       assertFalse(node5.isFor());
1076:       assertFalse(node5.isEmpty());
1077:       assertFalse(node5.isIn());
1078:       assertFalse(node5.isDebugger());
1079:       assertFalse(node5.isGetterDef());
1080:       assertFalse(node5.isDefaultCase());
1081:       assertFalse(node5.isInc());
1082:       assertFalse(node5.isSwitch());
1083:       assertEquals(0, node5.getChildCount());
1084:       assertFalse(node5.isArrayLit());
1085:       assertFalse(node5.isFalse());
1086:       assertFalse(node5.isFunction());
1087:       assertFalse(node5.isBreak());
1088:       assertFalse(node5.isNull());
1089:       assertFalse(node5.isGetProp());
1090:       assertFalse(node5.isName());
1091:       assertFalse(node5.isAdd());
1092:       assertFalse(node5.isObjectLit());
1093:       assertFalse(node5.isNot());
1094:       assertFalse(node5.isWhile());
1095:       assertFalse(node5.isString());
1096:       assertFalse(node5.isExprResult());
1097:       assertFalse(node5.isTrue());
1098:       assertFalse(node5.isVoid());
1099:       assertFalse(node5.isReturn());
1100:       assertFalse(node5.isCall());
1101:       assertFalse(node5.isAssign());
1102:       assertFalse(node5.isComma());
1103:       assertFalse(node5.isTypeOf());
1104:       assertFalse(node5.isNumber());
1105:       assertFalse(node5.isDec());
1106:       assertFalse(node5.hasChildren());
1107:       assertEquals((-1), node5.getSourcePosition());
1108:       assertFalse(node5.isGetElem());
1109:       assertFalse(node5.isAssignAdd());
1110:       assertEquals((-1), node5.getLineno());
1111:       assertFalse(node5.isLabelName());
1112:       assertFalse(node5.hasOneChild());
1113:       assertTrue(node5.isDelProp());
1114:       assertFalse(node5.isOr());
1115:       assertFalse(node5.isNew());
1116:       assertFalse(node5.isAnd());
1117:       assertFalse(node5.isDo());
1118:       assertFalse(node5.isCast());
1119:       assertFalse(node5.isVar());
1120:       assertFalse(node5.isContinue());
1121:       assertFalse(node5.isLabel());
1122:       assertFalse(node5.isSetterDef());
1123:       assertFalse(node5.isThis());
1124:       assertFalse(node5.isThrow());
1125:       assertFalse(node5.isStringKey());
1126:       assertFalse(node5.isParamList());
1127:       assertEquals((-1), node5.getCharno());
1128:       assertFalse(node5.isScript());
1129:       assertFalse(node5.isCase());
1130:       assertFalse(node5.isTry());
1131:       assertFalse(node5.isInstanceOf());
1132:       assertFalse(node5.isHook());
1133:       assertFalse(node5.isCatch());
1134:       assertEquals(31, node5.getType());
1135:       assertFalse(node5.isBlock());
1136:       assertFalse(node5.hasMoreThanOneChild());
1137:       assertFalse(node5.isWith());
1138:       assertFalse(node5.isRegExp());
1139:       assertNotNull(node5);
1140:       assertFalse(node0.equals((Object)node1));
1141:       assertFalse(node0.equals((Object)node2));
1142:       assertFalse(node0.equals((Object)node4));
1143:       assertFalse(node0.equals((Object)node3));
1144:       assertFalse(node1.equals((Object)node2));
1145:       assertFalse(node1.equals((Object)node4));
1146:       assertFalse(node1.equals((Object)node0));
1147:       assertFalse(node3.equals((Object)node0));
1148:       assertFalse(node3.equals((Object)node4));
1149:       assertFalse(node3.equals((Object)node2));
1150:       assertFalse(node5.equals((Object)node4));
1151:       assertFalse(node5.equals((Object)node0));
1152:       assertFalse(node5.equals((Object)node2));
1153:       assertFalse(node5.equals((Object)node3));
1154:       assertFalse(node5.equals((Object)node1));
1155:       
1156:       Node node6 = new Node(42, node5, node5);
1157:       assertFalse(node0.isObjectLit());
1158:       assertFalse(node0.isAnd());
1159:       assertFalse(node0.isInstanceOf());
1160:       assertFalse(node0.isGetProp());
1161:       assertFalse(node0.isScript());
1162:       assertFalse(node0.isNot());
1163:       assertFalse(node0.isCast());
1164:       assertFalse(node0.isThrow());
1165:       assertFalse(node0.isLabelName());
1166:       assertFalse(node0.isLabel());
1167:       assertFalse(node0.isFalse());
1168:       assertFalse(node0.isContinue());
1169:       assertFalse(node0.isDo());
1170:       assertFalse(node0.isAssignAdd());
1171:       assertEquals(45, node0.getType());
1172:       assertFalse(node0.isString());
1173:       assertFalse(node0.isOr());
1174:       assertEquals((-1), node0.getSourcePosition());
1175:       assertFalse(node0.isCall());
1176:       assertFalse(node0.isName());
1177:       assertFalse(node0.isGetElem());
1178:       assertFalse(node0.isDelProp());
1179:       assertFalse(node0.isBreak());
1180:       assertFalse(node0.isVoid());
1181:       assertFalse(node0.isTypeOf());
1182:       assertFalse(node0.isExprResult());
1183:       assertFalse(node0.isWhile());
1184:       assertFalse(node0.isAssign());
1185:       assertFalse(node0.isReturn());
1186:       assertFalse(node0.isDec());
1187:       assertFalse(node0.hasChildren());
1188:       assertFalse(node0.isComma());
1189:       assertFalse(node0.isCatch());
1190:       assertFalse(node0.isSetterDef());
1191:       assertFalse(node0.isTrue());
1192:       assertFalse(node0.isNull());
1193:       assertFalse(node0.isParamList());
1194:       assertFalse(node0.isDebugger());
1195:       assertFalse(node0.isVar());
1196:       assertFalse(node0.isStringKey());
1197:       assertFalse(node0.isEmpty());
1198:       assertFalse(node0.isAdd());
1199:       assertFalse(node0.isArrayLit());
1200:       assertFalse(node0.isNew());
1201:       assertFalse(node0.isFunction());
1202:       assertFalse(node0.isDefaultCase());
1203:       assertEquals(0, node0.getChildCount());
1204:       assertFalse(node0.hasMoreThanOneChild());
1205:       assertFalse(node0.isIn());
1206:       assertFalse(node0.isCase());
1207:       assertEquals((-1), node0.getLineno());
1208:       assertFalse(node0.isSwitch());
1209:       assertFalse(node0.isNE());
1210:       assertFalse(node0.isNumber());
1211:       assertFalse(node0.isInc());
1212:       assertFalse(node0.isIf());
1213:       assertFalse(node0.isGetterDef());
1214:       assertEquals((-1), node0.getCharno());
1215:       assertFalse(node0.isHook());
1216:       assertFalse(node0.isTry());
1217:       assertFalse(node0.hasOneChild());
1218:       assertFalse(node0.isThis());
1219:       assertFalse(node0.isRegExp());
1220:       assertFalse(node0.isWith());
1221:       assertFalse(node0.isBlock());
1222:       assertFalse(node0.isFor());
1223:       assertEquals((-1), node1.getSourcePosition());
1224:       assertTrue(node1.isDelProp());
1225:       assertFalse(node1.isLabel());
1226:       assertFalse(node1.isReturn());
1227:       assertFalse(node1.hasChildren());
1228:       assertFalse(node1.isOr());
1229:       assertFalse(node1.isAssign());
1230:       assertFalse(node1.isDec());
1231:       assertFalse(node1.isTypeOf());
1232:       assertFalse(node1.hasMoreThanOneChild());
1233:       assertFalse(node1.isNumber());
1234:       assertFalse(node1.isWhile());
1235:       assertFalse(node1.isDo());
1236:       assertFalse(node1.hasOneChild());
1237:       assertFalse(node1.isAssignAdd());
1238:       assertFalse(node1.isScript());
1239:       assertFalse(node1.isNot());
1240:       assertFalse(node1.isContinue());
1241:       assertFalse(node1.isAnd());
1242:       assertFalse(node1.isObjectLit());
1243:       assertFalse(node1.isCast());
1244:       assertFalse(node1.isStringKey());
1245:       assertFalse(node1.isLabelName());
1246:       assertFalse(node1.isComma());
1247:       assertFalse(node1.isNull());
1248:       assertFalse(node1.isBreak());
1249:       assertFalse(node1.isGetProp());
1250:       assertEquals(0, node1.getChildCount());
1251:       assertFalse(node1.isVar());
1252:       assertFalse(node1.isDefaultCase());
1253:       assertFalse(node1.isExprResult());
1254:       assertFalse(node1.isTrue());
1255:       assertFalse(node1.isVoid());
1256:       assertFalse(node1.isAdd());
1257:       assertFalse(node1.isNew());
1258:       assertFalse(node1.isCall());
1259:       assertFalse(node1.isGetElem());
1260:       assertFalse(node1.isName());
1261:       assertFalse(node1.isNE());
1262:       assertFalse(node1.isGetterDef());
1263:       assertFalse(node1.isIn());
1264:       assertFalse(node1.isCase());
1265:       assertFalse(node1.isFor());
1266:       assertFalse(node1.isEmpty());
1267:       assertFalse(node1.isTry());
1268:       assertFalse(node1.isDebugger());
1269:       assertFalse(node1.isFunction());
1270:       assertEquals((-1), node1.getCharno());
1271:       assertFalse(node1.isString());
1272:       assertFalse(node1.isArrayLit());
1273:       assertFalse(node1.isSwitch());
1274:       assertFalse(node1.isParamList());
1275:       assertFalse(node1.isSetterDef());
1276:       assertFalse(node1.isThis());
1277:       assertFalse(node1.isInstanceOf());
1278:       assertFalse(node1.isFalse());
1279:       assertFalse(node1.isThrow());
1280:       assertFalse(node1.isHook());
1281:       assertFalse(node1.isInc());
1282:       assertFalse(node1.isBlock());
1283:       assertEquals(31, node1.getType());
1284:       assertFalse(node1.isRegExp());
1285:       assertFalse(node1.isWith());
1286:       assertFalse(node1.isCatch());
1287:       assertEquals((-1), node1.getLineno());
1288:       assertFalse(node1.isIf());
1289:       assertFalse(node3.isTry());
1290:       assertFalse(node3.isVoid());
1291:       assertFalse(node3.isDebugger());
1292:       assertFalse(node3.isArrayLit());
1293:       assertFalse(node3.isTrue());
1294:       assertFalse(node3.isDefaultCase());
1295:       assertFalse(node3.isFor());
1296:       assertFalse(node3.isCatch());
1297:       assertFalse(node3.isFunction());
1298:       assertFalse(node3.isRegExp());
1299:       assertEquals(0, node3.getChildCount());
1300:       assertFalse(node3.isNE());
1301:       assertFalse(node3.isNull());
1302:       assertFalse(node3.isIf());
1303:       assertFalse(node3.isEmpty());
1304:       assertFalse(node3.isInc());
1305:       assertFalse(node3.isSetterDef());
1306:       assertFalse(node3.isIn());
1307:       assertEquals(31, node3.getType());
1308:       assertFalse(node3.isBlock());
1309:       assertFalse(node3.isAdd());
1310:       assertEquals((-1), node3.getCharno());
1311:       assertFalse(node3.isNew());
1312:       assertFalse(node3.isSwitch());
1313:       assertFalse(node3.isVar());
1314:       assertFalse(node3.isHook());
1315:       assertFalse(node3.isStringKey());
1316:       assertFalse(node3.hasMoreThanOneChild());
1317:       assertFalse(node3.isThis());
1318:       assertFalse(node3.isParamList());
1319:       assertFalse(node3.isGetterDef());
1320:       assertFalse(node3.isCase());
1321:       assertFalse(node3.isScript());
1322:       assertFalse(node3.isNumber());
1323:       assertFalse(node3.hasOneChild());
1324:       assertFalse(node3.isAssign());
1325:       assertFalse(node3.isWith());
1326:       assertFalse(node3.isLabelName());
1327:       assertFalse(node3.isGetElem());
1328:       assertFalse(node3.hasChildren());
1329:       assertFalse(node3.isDec());
1330:       assertFalse(node3.isCast());
1331:       assertFalse(node3.isTypeOf());
1332:       assertFalse(node3.isExprResult());
1333:       assertFalse(node3.isInstanceOf());
1334:       assertFalse(node3.isOr());
1335:       assertFalse(node3.isLabel());
1336:       assertFalse(node3.isAssignAdd());
1337:       assertTrue(node3.isDelProp());
1338:       assertEquals((-1), node3.getLineno());
1339:       assertFalse(node3.isDo());
1340:       assertFalse(node3.isThrow());
1341:       assertFalse(node3.isWhile());
1342:       assertFalse(node3.isName());
1343:       assertFalse(node3.isFalse());
1344:       assertFalse(node3.isBreak());
1345:       assertFalse(node3.isCall());
1346:       assertFalse(node3.isContinue());
1347:       assertFalse(node3.isReturn());
1348:       assertFalse(node3.isGetProp());
1349:       assertFalse(node3.isComma());
1350:       assertFalse(node3.isAnd());
1351:       assertFalse(node3.isNot());
1352:       assertEquals((-1), node3.getSourcePosition());
1353:       assertFalse(node3.isObjectLit());
1354:       assertFalse(node3.isString());
1355:       assertFalse(node5.isIf());
1356:       assertFalse(node5.isNE());
1357:       assertFalse(node5.isFor());
1358:       assertFalse(node5.isEmpty());
1359:       assertFalse(node5.isIn());
1360:       assertFalse(node5.isDebugger());
1361:       assertFalse(node5.isGetterDef());
1362:       assertFalse(node5.isDefaultCase());
1363:       assertFalse(node5.isInc());
1364:       assertFalse(node5.isSwitch());
1365:       assertEquals(0, node5.getChildCount());
1366:       assertFalse(node5.isArrayLit());
1367:       assertFalse(node5.isFalse());
1368:       assertFalse(node5.isFunction());
1369:       assertFalse(node5.isBreak());
1370:       assertFalse(node5.isNull());
1371:       assertFalse(node5.isGetProp());
1372:       assertFalse(node5.isName());
1373:       assertFalse(node5.isAdd());
1374:       assertFalse(node5.isObjectLit());
1375:       assertFalse(node5.isNot());
1376:       assertFalse(node5.isWhile());
1377:       assertFalse(node5.isString());
1378:       assertFalse(node5.isExprResult());
1379:       assertFalse(node5.isTrue());
1380:       assertFalse(node5.isVoid());
1381:       assertFalse(node5.isReturn());
1382:       assertFalse(node5.isCall());
1383:       assertFalse(node5.isAssign());
1384:       assertFalse(node5.isComma());
1385:       assertFalse(node5.isTypeOf());
1386:       assertFalse(node5.isNumber());
1387:       assertFalse(node5.isDec());
1388:       assertFalse(node5.hasChildren());
1389:       assertEquals((-1), node5.getSourcePosition());
1390:       assertFalse(node5.isGetElem());
1391:       assertFalse(node5.isAssignAdd());
1392:       assertEquals((-1), node5.getLineno());
1393:       assertFalse(node5.isLabelName());
1394:       assertFalse(node5.hasOneChild());
1395:       assertTrue(node5.isDelProp());
1396:       assertFalse(node5.isOr());
1397:       assertFalse(node5.isNew());
1398:       assertFalse(node5.isAnd());
1399:       assertFalse(node5.isDo());
1400:       assertFalse(node5.isCast());
1401:       assertFalse(node5.isVar());
1402:       assertFalse(node5.isContinue());
1403:       assertFalse(node5.isLabel());
1404:       assertFalse(node5.isSetterDef());
1405:       assertFalse(node5.isThis());
1406:       assertFalse(node5.isThrow());
1407:       assertFalse(node5.isStringKey());
1408:       assertFalse(node5.isParamList());
1409:       assertEquals((-1), node5.getCharno());
1410:       assertFalse(node5.isScript());
1411:       assertFalse(node5.isCase());
1412:       assertFalse(node5.isTry());
1413:       assertFalse(node5.isInstanceOf());
1414:       assertFalse(node5.isHook());
1415:       assertFalse(node5.isCatch());
1416:       assertEquals(31, node5.getType());
1417:       assertFalse(node5.isBlock());
1418:       assertFalse(node5.hasMoreThanOneChild());
1419:       assertFalse(node5.isWith());
1420:       assertFalse(node5.isRegExp());
1421:       assertFalse(node6.isDebugger());
1422:       assertFalse(node6.isFunction());
1423:       assertFalse(node6.isTrue());
1424:       assertFalse(node6.isVoid());
1425:       assertFalse(node6.isRegExp());
1426:       assertFalse(node6.isTry());
1427:       assertFalse(node6.isDefaultCase());
1428:       assertFalse(node6.isArrayLit());
1429:       assertFalse(node6.isGetterDef());
1430:       assertFalse(node6.isNE());
1431:       assertFalse(node6.isIf());
1432:       assertFalse(node6.isDelProp());
1433:       assertTrue(node6.hasChildren());
1434:       assertTrue(node6.isThis());
1435:       assertFalse(node6.isCall());
1436:       assertFalse(node6.isCatch());
1437:       assertEquals(1, node6.getChildCount());
1438:       assertFalse(node6.isBlock());
1439:       assertFalse(node6.isFor());
1440:       assertTrue(node6.hasOneChild());
1441:       assertFalse(node6.isInc());
1442:       assertFalse(node6.isString());
1443:       assertFalse(node6.isIn());
1444:       assertFalse(node6.isSetterDef());
1445:       assertFalse(node6.isContinue());
1446:       assertFalse(node6.isCast());
1447:       assertFalse(node6.isThrow());
1448:       assertFalse(node6.isFalse());
1449:       assertFalse(node6.isExprResult());
1450:       assertFalse(node6.isScript());
1451:       assertFalse(node6.isAnd());
1452:       assertFalse(node6.isObjectLit());
1453:       assertFalse(node6.isNot());
1454:       assertEquals((-1), node6.getSourcePosition());
1455:       assertFalse(node6.isComma());
1456:       assertFalse(node6.isTypeOf());
1457:       assertFalse(node6.isNumber());
1458:       assertEquals((-1), node6.getLineno());
1459:       assertFalse(node6.isInstanceOf());
1460:       assertFalse(node6.isGetElem());
1461:       assertFalse(node6.isBreak());
1462:       assertFalse(node6.isGetProp());
1463:       assertFalse(node6.hasMoreThanOneChild());
1464:       assertFalse(node6.isWith());
1465:       assertFalse(node6.isWhile());
1466:       assertFalse(node6.isAssign());
1467:       assertFalse(node6.isDec());
1468:       assertFalse(node6.isReturn());
1469:       assertFalse(node6.isHook());
1470:       assertEquals((-1), node6.getCharno());
1471:       assertFalse(node6.isSwitch());
1472:       assertFalse(node6.isDo());
1473:       assertFalse(node6.isCase());
1474:       assertFalse(node6.isAdd());
1475:       assertFalse(node6.isNew());
1476:       assertFalse(node6.isStringKey());
1477:       assertFalse(node6.isName());
1478:       assertFalse(node6.isOr());
1479:       assertFalse(node6.isNull());
1480:       assertFalse(node6.isParamList());
1481:       assertFalse(node6.isAssignAdd());
1482:       assertFalse(node6.isLabelName());
1483:       assertFalse(node6.isEmpty());
1484:       assertEquals(42, node6.getType());
1485:       assertFalse(node6.isVar());
1486:       assertFalse(node6.isLabel());
1487:       assertNotNull(node6);
1488:       assertFalse(node0.equals((Object)node5));
1489:       assertFalse(node0.equals((Object)node1));
1490:       assertFalse(node0.equals((Object)node2));
1491:       assertFalse(node0.equals((Object)node4));
1492:       assertFalse(node0.equals((Object)node3));
1493:       assertFalse(node1.equals((Object)node2));
1494:       assertFalse(node1.equals((Object)node5));
1495:       assertFalse(node1.equals((Object)node4));
1496:       assertFalse(node1.equals((Object)node0));
1497:       assertFalse(node3.equals((Object)node0));
1498:       assertFalse(node3.equals((Object)node4));
1499:       assertFalse(node3.equals((Object)node5));
1500:       assertFalse(node3.equals((Object)node2));
1501:       assertFalse(node5.equals((Object)node4));
1502:       assertFalse(node5.equals((Object)node0));
1503:       assertFalse(node5.equals((Object)node2));
1504:       assertFalse(node5.equals((Object)node3));
1505:       assertFalse(node5.equals((Object)node1));
1506:       assertFalse(node6.equals((Object)node4));
1507:       assertFalse(node6.equals((Object)node2));
1508:       assertFalse(node6.equals((Object)node0));
1509:       assertFalse(node6.equals((Object)node1));
1510:       assertFalse(node6.equals((Object)node5));
1511:       assertFalse(node6.equals((Object)node3));
1512:       
1513:       Iterable<Node> iterable1 = node4.siblings();
1514:       assertFalse(node4.isObjectLit());
1515:       assertFalse(node4.isNot());
1516:       assertFalse(node4.isInstanceOf());
1517:       assertFalse(node4.isScript());
1518:       assertFalse(node4.isWith());
1519:       assertFalse(node4.isThis());
1520:       assertFalse(node4.isComma());
1521:       assertFalse(node4.isGetProp());
1522:       assertFalse(node4.hasOneChild());
1523:       assertFalse(node4.isFalse());
1524:       assertFalse(node4.isThrow());
1525:       assertFalse(node4.isLabelName());
1526:       assertFalse(node4.isNumber());
1527:       assertEquals((-1), node4.getSourcePosition());
1528:       assertFalse(node4.isCast());
1529:       assertEquals((-1), node4.getCharno());
1530:       assertFalse(node4.isAnd());
1531:       assertFalse(node4.isSwitch());
1532:       assertFalse(node4.isCase());
1533:       assertFalse(node4.hasMoreThanOneChild());
1534:       assertFalse(node4.isContinue());
1535:       assertFalse(node4.isIn());
1536:       assertFalse(node4.isBlock());
1537:       assertTrue(node4.isString());
1538:       assertFalse(node4.isInc());
1539:       assertFalse(node4.isHook());
1540:       assertFalse(node4.isFor());
1541:       assertEquals((-1), node4.getLineno());
1542:       assertFalse(node4.isNE());
1543:       assertFalse(node4.isIf());
1544:       assertEquals(40, node4.getType());
1545:       assertEquals(0, node4.getChildCount());
1546:       assertFalse(node4.isRegExp());
1547:       assertFalse(node4.isCatch());
1548:       assertFalse(node4.isFunction());
1549:       assertFalse(node4.isTry());
1550:       assertFalse(node4.isSetterDef());
1551:       assertFalse(node4.isDefaultCase());
1552:       assertFalse(node4.isStringKey());
1553:       assertFalse(node4.isArrayLit());
1554:       assertFalse(node4.isGetterDef());
1555:       assertFalse(node4.isDebugger());
1556:       assertFalse(node4.isParamList());
1557:       assertFalse(node4.isDo());
1558:       assertFalse(node4.isNew());
1559:       assertFalse(node4.isAdd());
1560:       assertFalse(node4.isReturn());
1561:       assertFalse(node4.isLabel());
1562:       assertFalse(node4.isVar());
1563:       assertFalse(node4.isWhile());
1564:       assertFalse(node4.isAssignAdd());
1565:       assertFalse(node4.isName());
1566:       assertFalse(node4.isGetElem());
1567:       assertFalse(node4.isAssign());
1568:       assertFalse(node4.isEmpty());
1569:       assertFalse(node4.isCall());
1570:       assertFalse(node4.hasChildren());
1571:       assertFalse(node4.isBreak());
1572:       assertFalse(node4.isTypeOf());
1573:       assertFalse(node4.isDec());
1574:       assertFalse(node4.isOr());
1575:       assertFalse(node4.isVoid());
1576:       assertFalse(node4.isExprResult());
1577:       assertFalse(node4.isTrue());
1578:       assertFalse(node4.isNull());
1579:       assertFalse(node4.isDelProp());
1580:       assertNotNull(iterable1);
1581:       assertFalse(node4.equals((Object)node0));
1582:       assertFalse(node4.equals((Object)node5));
1583:       assertFalse(node4.equals((Object)node1));
1584:       assertFalse(node4.equals((Object)node2));
1585:       assertFalse(node4.equals((Object)node6));
1586:       assertFalse(node4.equals((Object)node3));
1587:       assertFalse(iterable1.equals((Object)iterable0));
1588:       
1589:       boolean boolean3 = node6.isNull();
1590:       assertFalse(node0.isObjectLit());
1591:       assertFalse(node0.isAnd());
1592:       assertFalse(node0.isInstanceOf());
1593:       assertFalse(node0.isGetProp());
1594:       assertFalse(node0.isScript());
1595:       assertFalse(node0.isNot());
1596:       assertFalse(node0.isCast());
1597:       assertFalse(node0.isThrow());
1598:       assertFalse(node0.isLabelName());
1599:       assertFalse(node0.isLabel());
1600:       assertFalse(node0.isFalse());
1601:       assertFalse(node0.isContinue());
1602:       assertFalse(node0.isDo());
1603:       assertFalse(node0.isAssignAdd());
1604:       assertEquals(45, node0.getType());
1605:       assertFalse(node0.isString());
1606:       assertFalse(node0.isOr());
1607:       assertEquals((-1), node0.getSourcePosition());
1608:       assertFalse(node0.isCall());
1609:       assertFalse(node0.isName());
1610:       assertFalse(node0.isGetElem());
1611:       assertFalse(node0.isDelProp());
1612:       assertFalse(node0.isBreak());
1613:       assertFalse(node0.isVoid());
1614:       assertFalse(node0.isTypeOf());
1615:       assertFalse(node0.isExprResult());
1616:       assertFalse(node0.isWhile());
1617:       assertFalse(node0.isAssign());
1618:       assertFalse(node0.isReturn());
1619:       assertFalse(node0.isDec());
1620:       assertFalse(node0.hasChildren());
1621:       assertFalse(node0.isComma());
1622:       assertFalse(node0.isCatch());
1623:       assertFalse(node0.isSetterDef());
1624:       assertFalse(node0.isTrue());
1625:       assertFalse(node0.isNull());
1626:       assertFalse(node0.isParamList());
1627:       assertFalse(node0.isDebugger());
1628:       assertFalse(node0.isVar());
1629:       assertFalse(node0.isStringKey());
1630:       assertFalse(node0.isEmpty());
1631:       assertFalse(node0.isAdd());
1632:       assertFalse(node0.isArrayLit());
1633:       assertFalse(node0.isNew());
1634:       assertFalse(node0.isFunction());
1635:       assertFalse(node0.isDefaultCase());
1636:       assertEquals(0, node0.getChildCount());
1637:       assertFalse(node0.hasMoreThanOneChild());
1638:       assertFalse(node0.isIn());
1639:       assertFalse(node0.isCase());
1640:       assertEquals((-1), node0.getLineno());
1641:       assertFalse(node0.isSwitch());
1642:       assertFalse(node0.isNE());
1643:       assertFalse(node0.isNumber());
1644:       assertFalse(node0.isInc());
1645:       assertFalse(node0.isIf());
1646:       assertFalse(node0.isGetterDef());
1647:       assertEquals((-1), node0.getCharno());
1648:       assertFalse(node0.isHook());
1649:       assertFalse(node0.isTry());
1650:       assertFalse(node0.hasOneChild());
1651:       assertFalse(node0.isThis());
1652:       assertFalse(node0.isRegExp());
1653:       assertFalse(node0.isWith());
1654:       assertFalse(node0.isBlock());
1655:       assertFalse(node0.isFor());
1656:       assertEquals((-1), node1.getSourcePosition());
1657:       assertTrue(node1.isDelProp());
1658:       assertFalse(node1.isLabel());
1659:       assertFalse(node1.isReturn());
1660:       assertFalse(node1.hasChildren());
1661:       assertFalse(node1.isOr());
1662:       assertFalse(node1.isAssign());
1663:       assertFalse(node1.isDec());
1664:       assertFalse(node1.isTypeOf());
1665:       assertFalse(node1.hasMoreThanOneChild());
1666:       assertFalse(node1.isNumber());
1667:       assertFalse(node1.isWhile());
1668:       assertFalse(node1.isDo());
1669:       assertFalse(node1.hasOneChild());
1670:       assertFalse(node1.isAssignAdd());
1671:       assertFalse(node1.isScript());
1672:       assertFalse(node1.isNot());
1673:       assertFalse(node1.isContinue());
1674:       assertFalse(node1.isAnd());
1675:       assertFalse(node1.isObjectLit());
1676:       assertFalse(node1.isCast());
1677:       assertFalse(node1.isStringKey());
1678:       assertFalse(node1.isLabelName());
1679:       assertFalse(node1.isComma());
1680:       assertFalse(node1.isNull());
1681:       assertFalse(node1.isBreak());
1682:       assertFalse(node1.isGetProp());
1683:       assertEquals(0, node1.getChildCount());
1684:       assertFalse(node1.isVar());
1685:       assertFalse(node1.isDefaultCase());
1686:       assertFalse(node1.isExprResult());
1687:       assertFalse(node1.isTrue());
1688:       assertFalse(node1.isVoid());
1689:       assertFalse(node1.isAdd());
1690:       assertFalse(node1.isNew());
1691:       assertFalse(node1.isCall());
1692:       assertFalse(node1.isGetElem());
1693:       assertFalse(node1.isName());
1694:       assertFalse(node1.isNE());
1695:       assertFalse(node1.isGetterDef());
1696:       assertFalse(node1.isIn());
1697:       assertFalse(node1.isCase());
1698:       assertFalse(node1.isFor());
1699:       assertFalse(node1.isEmpty());
1700:       assertFalse(node1.isTry());
1701:       assertFalse(node1.isDebugger());
1702:       assertFalse(node1.isFunction());
1703:       assertEquals((-1), node1.getCharno());
1704:       assertFalse(node1.isString());
1705:       assertFalse(node1.isArrayLit());
1706:       assertFalse(node1.isSwitch());
1707:       assertFalse(node1.isParamList());
1708:       assertFalse(node1.isSetterDef());
1709:       assertFalse(node1.isThis());
1710:       assertFalse(node1.isInstanceOf());
1711:       assertFalse(node1.isFalse());
1712:       assertFalse(node1.isThrow());
1713:       assertFalse(node1.isHook());
1714:       assertFalse(node1.isInc());
1715:       assertFalse(node1.isBlock());
1716:       assertEquals(31, node1.getType());
1717:       assertFalse(node1.isRegExp());
1718:       assertFalse(node1.isWith());
1719:       assertFalse(node1.isCatch());
1720:       assertEquals((-1), node1.getLineno());
1721:       assertFalse(node1.isIf());
1722:       assertFalse(node3.isTry());
1723:       assertFalse(node3.isVoid());
1724:       assertFalse(node3.isDebugger());
1725:       assertFalse(node3.isArrayLit());
1726:       assertFalse(node3.isTrue());
1727:       assertFalse(node3.isDefaultCase());
1728:       assertFalse(node3.isFor());
1729:       assertFalse(node3.isCatch());
1730:       assertFalse(node3.isFunction());
1731:       assertFalse(node3.isRegExp());
1732:       assertEquals(0, node3.getChildCount());
1733:       assertFalse(node3.isNE());
1734:       assertFalse(node3.isNull());
1735:       assertFalse(node3.isIf());
1736:       assertFalse(node3.isEmpty());
1737:       assertFalse(node3.isInc());
1738:       assertFalse(node3.isSetterDef());
1739:       assertFalse(node3.isIn());
1740:       assertEquals(31, node3.getType());
1741:       assertFalse(node3.isBlock());
1742:       assertFalse(node3.isAdd());
1743:       assertEquals((-1), node3.getCharno());
1744:       assertFalse(node3.isNew());
1745:       assertFalse(node3.isSwitch());
1746:       assertFalse(node3.isVar());
1747:       assertFalse(node3.isHook());
1748:       assertFalse(node3.isStringKey());
1749:       assertFalse(node3.hasMoreThanOneChild());
1750:       assertFalse(node3.isThis());
1751:       assertFalse(node3.isParamList());
1752:       assertFalse(node3.isGetterDef());
1753:       assertFalse(node3.isCase());
1754:       assertFalse(node3.isScript());
1755:       assertFalse(node3.isNumber());
1756:       assertFalse(node3.hasOneChild());
1757:       assertFalse(node3.isAssign());
1758:       assertFalse(node3.isWith());
1759:       assertFalse(node3.isLabelName());
1760:       assertFalse(node3.isGetElem());
1761:       assertFalse(node3.hasChildren());
1762:       assertFalse(node3.isDec());
1763:       assertFalse(node3.isCast());
1764:       assertFalse(node3.isTypeOf());
1765:       assertFalse(node3.isExprResult());
1766:       assertFalse(node3.isInstanceOf());
1767:       assertFalse(node3.isOr());
1768:       assertFalse(node3.isLabel());
1769:       assertFalse(node3.isAssignAdd());
1770:       assertTrue(node3.isDelProp());
1771:       assertEquals((-1), node3.getLineno());
1772:       assertFalse(node3.isDo());
1773:       assertFalse(node3.isThrow());
1774:       assertFalse(node3.isWhile());
1775:       assertFalse(node3.isName());
1776:       assertFalse(node3.isFalse());
1777:       assertFalse(node3.isBreak());
1778:       assertFalse(node3.isCall());
1779:       assertFalse(node3.isContinue());
1780:       assertFalse(node3.isReturn());
1781:       assertFalse(node3.isGetProp());
1782:       assertFalse(node3.isComma());
1783:       assertFalse(node3.isAnd());
1784:       assertFalse(node3.isNot());
1785:       assertEquals((-1), node3.getSourcePosition());
1786:       assertFalse(node3.isObjectLit());
1787:       assertFalse(node3.isString());
1788:       assertFalse(node5.isIf());
1789:       assertFalse(node5.isNE());
1790:       assertFalse(node5.isFor());
1791:       assertFalse(node5.isEmpty());
1792:       assertFalse(node5.isIn());
1793:       assertFalse(node5.isDebugger());
1794:       assertFalse(node5.isGetterDef());
1795:       assertFalse(node5.isDefaultCase());
1796:       assertFalse(node5.isInc());
1797:       assertFalse(node5.isSwitch());
1798:       assertEquals(0, node5.getChildCount());
1799:       assertFalse(node5.isArrayLit());
1800:       assertFalse(node5.isFalse());
1801:       assertFalse(node5.isFunction());
1802:       assertFalse(node5.isBreak());
1803:       assertFalse(node5.isNull());
1804:       assertFalse(node5.isGetProp());
1805:       assertFalse(node5.isName());
1806:       assertFalse(node5.isAdd());
1807:       assertFalse(node5.isObjectLit());
1808:       assertFalse(node5.isNot());
1809:       assertFalse(node5.isWhile());
1810:       assertFalse(node5.isString());
1811:       assertFalse(node5.isExprResult());
1812:       assertFalse(node5.isTrue());
1813:       assertFalse(node5.isVoid());
1814:       assertFalse(node5.isReturn());
1815:       assertFalse(node5.isCall());
1816:       assertFalse(node5.isAssign());
1817:       assertFalse(node5.isComma());
1818:       assertFalse(node5.isTypeOf());
1819:       assertFalse(node5.isNumber());
1820:       assertFalse(node5.isDec());
1821:       assertFalse(node5.hasChildren());
1822:       assertEquals((-1), node5.getSourcePosition());
1823:       assertFalse(node5.isGetElem());
1824:       assertFalse(node5.isAssignAdd());
1825:       assertEquals((-1), node5.getLineno());
1826:       assertFalse(node5.isLabelName());
1827:       assertFalse(node5.hasOneChild());
1828:       assertTrue(node5.isDelProp());
1829:       assertFalse(node5.isOr());
1830:       assertFalse(node5.isNew());
1831:       assertFalse(node5.isAnd());
1832:       assertFalse(node5.isDo());
1833:       assertFalse(node5.isCast());
1834:       assertFalse(node5.isVar());
1835:       assertFalse(node5.isContinue());
1836:       assertFalse(node5.isLabel());
1837:       assertFalse(node5.isSetterDef());
1838:       assertFalse(node5.isThis());
1839:       assertFalse(node5.isThrow());
1840:       assertFalse(node5.isStringKey());
1841:       assertFalse(node5.isParamList());
1842:       assertEquals((-1), node5.getCharno());
1843:       assertFalse(node5.isScript());
1844:       assertFalse(node5.isCase());
1845:       assertFalse(node5.isTry());
1846:       assertFalse(node5.isInstanceOf());
1847:       assertFalse(node5.isHook());
1848:       assertFalse(node5.isCatch());
1849:       assertEquals(31, node5.getType());
1850:       assertFalse(node5.isBlock());
1851:       assertFalse(node5.hasMoreThanOneChild());
1852:       assertFalse(node5.isWith());
1853:       assertFalse(node5.isRegExp());
1854:       assertFalse(node6.isDebugger());
1855:       assertFalse(node6.isFunction());
1856:       assertFalse(node6.isTrue());
1857:       assertFalse(node6.isVoid());
1858:       assertFalse(node6.isRegExp());
1859:       assertFalse(node6.isTry());
1860:       assertFalse(node6.isDefaultCase());
1861:       assertFalse(node6.isArrayLit());
1862:       assertFalse(node6.isGetterDef());
1863:       assertFalse(node6.isNE());
1864:       assertFalse(node6.isIf());
1865:       assertFalse(node6.isDelProp());
1866:       assertTrue(node6.hasChildren());
1867:       assertTrue(node6.isThis());
1868:       assertFalse(node6.isCall());
1869:       assertFalse(node6.isCatch());
1870:       assertEquals(1, node6.getChildCount());
1871:       assertFalse(node6.isBlock());
1872:       assertFalse(node6.isFor());
1873:       assertTrue(node6.hasOneChild());
1874:       assertFalse(node6.isInc());
1875:       assertFalse(node6.isString());
1876:       assertFalse(node6.isIn());
1877:       assertFalse(node6.isSetterDef());
1878:       assertFalse(node6.isContinue());
1879:       assertFalse(node6.isCast());
1880:       assertFalse(node6.isThrow());
1881:       assertFalse(node6.isFalse());
1882:       assertFalse(node6.isExprResult());
1883:       assertFalse(node6.isScript());
1884:       assertFalse(node6.isAnd());
1885:       assertFalse(node6.isObjectLit());
1886:       assertFalse(node6.isNot());
1887:       assertEquals((-1), node6.getSourcePosition());
1888:       assertFalse(node6.isComma());
1889:       assertFalse(node6.isTypeOf());
1890:       assertFalse(node6.isNumber());
1891:       assertEquals((-1), node6.getLineno());
1892:       assertFalse(node6.isInstanceOf());
1893:       assertFalse(node6.isGetElem());
1894:       assertFalse(node6.isBreak());
1895:       assertFalse(node6.isGetProp());
1896:       assertFalse(node6.hasMoreThanOneChild());
1897:       assertFalse(node6.isWith());
1898:       assertFalse(node6.isWhile());
1899:       assertFalse(node6.isAssign());
1900:       assertFalse(node6.isDec());
1901:       assertFalse(node6.isReturn());
1902:       assertFalse(node6.isHook());
1903:       assertEquals((-1), node6.getCharno());
1904:       assertFalse(node6.isSwitch());
1905:       assertFalse(node6.isDo());
1906:       assertFalse(node6.isCase());
1907:       assertFalse(node6.isAdd());
1908:       assertFalse(node6.isNew());
1909:       assertFalse(node6.isStringKey());
1910:       assertFalse(node6.isName());
1911:       assertFalse(node6.isOr());
1912:       assertFalse(node6.isNull());
1913:       assertFalse(node6.isParamList());
1914:       assertFalse(node6.isAssignAdd());
1915:       assertFalse(node6.isLabelName());
1916:       assertFalse(node6.isEmpty());
1917:       assertEquals(42, node6.getType());
1918:       assertFalse(node6.isVar());
1919:       assertFalse(node6.isLabel());
1920:       assertFalse(boolean3);
1921:       assertFalse(node0.equals((Object)node5));
1922:       assertFalse(node0.equals((Object)node6));
1923:       assertFalse(node0.equals((Object)node1));
1924:       assertFalse(node0.equals((Object)node2));
1925:       assertFalse(node0.equals((Object)node4));
1926:       assertFalse(node0.equals((Object)node3));
1927:       assertFalse(node1.equals((Object)node2));
1928:       assertFalse(node1.equals((Object)node6));
1929:       assertFalse(node1.equals((Object)node5));
1930:       assertFalse(node1.equals((Object)node4));
1931:       assertFalse(node1.equals((Object)node0));
1932:       assertFalse(node3.equals((Object)node0));
1933:       assertFalse(node3.equals((Object)node4));
1934:       assertFalse(node3.equals((Object)node5));
1935:       assertFalse(node3.equals((Object)node6));
1936:       assertFalse(node3.equals((Object)node2));
1937:       assertFalse(node5.equals((Object)node4));
1938:       assertFalse(node5.equals((Object)node0));
1939:       assertFalse(node5.equals((Object)node2));
1940:       assertFalse(node5.equals((Object)node6));
1941:       assertFalse(node5.equals((Object)node3));
1942:       assertFalse(node5.equals((Object)node1));
1943:       assertFalse(node6.equals((Object)node4));
1944:       assertFalse(node6.equals((Object)node2));
1945:       assertFalse(node6.equals((Object)node0));
1946:       assertFalse(node6.equals((Object)node1));
1947:       assertFalse(node6.equals((Object)node5));
1948:       assertFalse(node6.equals((Object)node3));
1949:       assertTrue(boolean3 == boolean1);
1950:       assertTrue(boolean3 == boolean2);
1951:       assertTrue(boolean3 == boolean0);
1952:       
1953:       Node node7 = Node.newString("xg6~g", 85, 12);
1954:       assertFalse(node7.isIn());
1955:       assertFalse(node7.isFor());
1956:       assertFalse(node7.isEmpty());
1957:       assertFalse(node7.isCase());
1958:       assertFalse(node7.isVoid());
1959:       assertFalse(node7.isInc());
1960:       assertFalse(node7.isRegExp());
1961:       assertFalse(node7.isDelProp());
1962:       assertFalse(node7.isBreak());
1963:       assertFalse(node7.isNE());
1964:       assertFalse(node7.isTrue());
1965:       assertFalse(node7.isIf());
1966:       assertFalse(node7.isGetProp());
1967:       assertFalse(node7.isComma());
1968:       assertFalse(node7.isObjectLit());
1969:       assertFalse(node7.isSetterDef());
1970:       assertFalse(node7.isFalse());
1971:       assertEquals(40, node7.getType());
1972:       assertFalse(node7.isThrow());
1973:       assertFalse(node7.isDebugger());
1974:       assertFalse(node7.isCast());
1975:       assertFalse(node7.isFunction());
1976:       assertFalse(node7.isNot());
1977:       assertFalse(node7.isAnd());
1978:       assertFalse(node7.isOr());
1979:       assertFalse(node7.isLabel());
1980:       assertFalse(node7.isAssignAdd());
1981:       assertFalse(node7.isReturn());
1982:       assertFalse(node7.hasMoreThanOneChild());
1983:       assertFalse(node7.isNumber());
1984:       assertFalse(node7.isTypeOf());
1985:       assertFalse(node7.isContinue());
1986:       assertFalse(node7.isDo());
1987:       assertFalse(node7.isAssign());
1988:       assertFalse(node7.hasChildren());
1989:       assertFalse(node7.isDec());
1990:       assertFalse(node7.isWhile());
1991:       assertFalse(node7.isBlock());
1992:       assertFalse(node7.isAdd());
1993:       assertFalse(node7.isNew());
1994:       assertFalse(node7.isCall());
1995:       assertFalse(node7.isExprResult());
1996:       assertFalse(node7.isName());
1997:       assertFalse(node7.isGetElem());
1998:       assertFalse(node7.isNull());
1999:       assertEquals(12, node7.getCharno());
2000:       assertEquals(0, node7.getChildCount());
2001:       assertFalse(node7.isCatch());
2002:       assertFalse(node7.isInstanceOf());
2003:       assertFalse(node7.isWith());
2004:       assertFalse(node7.isVar());
2005:       assertFalse(node7.isThis());
2006:       assertFalse(node7.isHook());
2007:       assertFalse(node7.isDefaultCase());
2008:       assertFalse(node7.isTry());
2009:       assertTrue(node7.isString());
2010:       assertFalse(node7.hasOneChild());
2011:       assertFalse(node7.isArrayLit());
2012:       assertFalse(node7.isScript());
2013:       assertEquals(85, node7.getLineno());
2014:       assertFalse(node7.isLabelName());
2015:       assertFalse(node7.isGetterDef());
2016:       assertEquals(348172, node7.getSourcePosition());
2017:       assertFalse(node7.isSwitch());
2018:       assertFalse(node7.isParamList());
2019:       assertFalse(node7.isStringKey());
2020:       assertNotNull(node7);
2021:       assertFalse(node7.equals((Object)node3));
2022:       assertFalse(node7.equals((Object)node4));
2023:       assertFalse(node7.equals((Object)node5));
2024:       assertFalse(node7.equals((Object)node6));
2025:       assertFalse(node7.equals((Object)node1));
2026:       assertFalse(node7.equals((Object)node2));
2027:       assertFalse(node7.equals((Object)node0));
2028:       
2029:       Node node8 = new Node(16, node2, node3, node6, (-2355), 1739);
2030:       assertFalse(node0.isObjectLit());
2031:       assertFalse(node0.isAnd());
2032:       assertFalse(node0.isInstanceOf());
2033:       assertFalse(node0.isGetProp());
2034:       assertFalse(node0.isScript());
2035:       assertFalse(node0.isNot());
2036:       assertFalse(node0.isCast());
2037:       assertFalse(node0.isThrow());
2038:       assertFalse(node0.isLabelName());
2039:       assertFalse(node0.isLabel());
2040:       assertFalse(node0.isFalse());
2041:       assertFalse(node0.isContinue());
2042:       assertFalse(node0.isDo());
2043:       assertFalse(node0.isAssignAdd());
2044:       assertEquals(45, node0.getType());
2045:       assertFalse(node0.isString());
2046:       assertFalse(node0.isOr());
2047:       assertEquals((-1), node0.getSourcePosition());
2048:       assertFalse(node0.isCall());
2049:       assertFalse(node0.isName());
2050:       assertFalse(node0.isGetElem());
2051:       assertFalse(node0.isDelProp());
2052:       assertFalse(node0.isBreak());
2053:       assertFalse(node0.isVoid());
2054:       assertFalse(node0.isTypeOf());
2055:       assertFalse(node0.isExprResult());
2056:       assertFalse(node0.isWhile());
2057:       assertFalse(node0.isAssign());
2058:       assertFalse(node0.isReturn());
2059:       assertFalse(node0.isDec());
2060:       assertFalse(node0.hasChildren());
2061:       assertFalse(node0.isComma());
2062:       assertFalse(node0.isCatch());
2063:       assertFalse(node0.isSetterDef());
2064:       assertFalse(node0.isTrue());
2065:       assertFalse(node0.isNull());
2066:       assertFalse(node0.isParamList());
2067:       assertFalse(node0.isDebugger());
2068:       assertFalse(node0.isVar());
2069:       assertFalse(node0.isStringKey());
2070:       assertFalse(node0.isEmpty());
2071:       assertFalse(node0.isAdd());
2072:       assertFalse(node0.isArrayLit());
2073:       assertFalse(node0.isNew());
2074:       assertFalse(node0.isFunction());
2075:       assertFalse(node0.isDefaultCase());
2076:       assertEquals(0, node0.getChildCount());
2077:       assertFalse(node0.hasMoreThanOneChild());
2078:       assertFalse(node0.isIn());
2079:       assertFalse(node0.isCase());
2080:       assertEquals((-1), node0.getLineno());
2081:       assertFalse(node0.isSwitch());
2082:       assertFalse(node0.isNE());
2083:       assertFalse(node0.isNumber());
2084:       assertFalse(node0.isInc());
2085:       assertFalse(node0.isIf());
2086:       assertFalse(node0.isGetterDef());
2087:       assertEquals((-1), node0.getCharno());
2088:       assertFalse(node0.isHook());
2089:       assertFalse(node0.isTry());
2090:       assertFalse(node0.hasOneChild());
2091:       assertFalse(node0.isThis());
2092:       assertFalse(node0.isRegExp());
2093:       assertFalse(node0.isWith());
2094:       assertFalse(node0.isBlock());
2095:       assertFalse(node0.isFor());
2096:       assertEquals((-1), node1.getSourcePosition());
2097:       assertTrue(node1.isDelProp());
2098:       assertFalse(node1.isLabel());
2099:       assertFalse(node1.isReturn());
2100:       assertFalse(node1.hasChildren());
2101:       assertFalse(node1.isOr());
2102:       assertFalse(node1.isAssign());
2103:       assertFalse(node1.isDec());
2104:       assertFalse(node1.isTypeOf());
2105:       assertFalse(node1.hasMoreThanOneChild());
2106:       assertFalse(node1.isNumber());
2107:       assertFalse(node1.isWhile());
2108:       assertFalse(node1.isDo());
2109:       assertFalse(node1.hasOneChild());
2110:       assertFalse(node1.isAssignAdd());
2111:       assertFalse(node1.isScript());
2112:       assertFalse(node1.isNot());
2113:       assertFalse(node1.isContinue());
2114:       assertFalse(node1.isAnd());
2115:       assertFalse(node1.isObjectLit());
2116:       assertFalse(node1.isCast());
2117:       assertFalse(node1.isStringKey());
2118:       assertFalse(node1.isLabelName());
2119:       assertFalse(node1.isComma());
2120:       assertFalse(node1.isNull());
2121:       assertFalse(node1.isBreak());
2122:       assertFalse(node1.isGetProp());
2123:       assertEquals(0, node1.getChildCount());
2124:       assertFalse(node1.isVar());
2125:       assertFalse(node1.isDefaultCase());
2126:       assertFalse(node1.isExprResult());
2127:       assertFalse(node1.isTrue());
2128:       assertFalse(node1.isVoid());
2129:       assertFalse(node1.isAdd());
2130:       assertFalse(node1.isNew());
2131:       assertFalse(node1.isCall());
2132:       assertFalse(node1.isGetElem());
2133:       assertFalse(node1.isName());
2134:       assertFalse(node1.isNE());
2135:       assertFalse(node1.isGetterDef());
2136:       assertFalse(node1.isIn());
2137:       assertFalse(node1.isCase());
2138:       assertFalse(node1.isFor());
2139:       assertFalse(node1.isEmpty());
2140:       assertFalse(node1.isTry());
2141:       assertFalse(node1.isDebugger());
2142:       assertFalse(node1.isFunction());
2143:       assertEquals((-1), node1.getCharno());
2144:       assertFalse(node1.isString());
2145:       assertFalse(node1.isArrayLit());
2146:       assertFalse(node1.isSwitch());
2147:       assertFalse(node1.isParamList());
2148:       assertFalse(node1.isSetterDef());
2149:       assertFalse(node1.isThis());
2150:       assertFalse(node1.isInstanceOf());
2151:       assertFalse(node1.isFalse());
2152:       assertFalse(node1.isThrow());
2153:       assertFalse(node1.isHook());
2154:       assertFalse(node1.isInc());
2155:       assertFalse(node1.isBlock());
2156:       assertEquals(31, node1.getType());
2157:       assertFalse(node1.isRegExp());
2158:       assertFalse(node1.isWith());
2159:       assertFalse(node1.isCatch());
2160:       assertEquals((-1), node1.getLineno());
2161:       assertFalse(node1.isIf());
2162:       assertFalse(node2.isNE());
2163:       assertFalse(node2.isIf());
2164:       assertFalse(node2.isEmpty());
2165:       assertFalse(node2.isDelProp());
2166:       assertFalse(node2.isArrayLit());
2167:       assertFalse(node2.isFor());
2168:       assertFalse(node2.isRegExp());
2169:       assertFalse(node2.isInc());
2170:       assertFalse(node2.isTrue());
2171:       assertFalse(node2.isDefaultCase());
2172:       assertFalse(node2.isVoid());
2173:       assertFalse(node2.isIn());
2174:       assertFalse(node2.isNull());
2175:       assertFalse(node2.isSetterDef());
2176:       assertFalse(node2.isName());
2177:       assertFalse(node2.isBreak());
2178:       assertFalse(node2.isGetProp());
2179:       assertFalse(node2.isCall());
2180:       assertFalse(node2.isThrow());
2181:       assertFalse(node2.isFalse());
2182:       assertEquals(40, node2.getType());
2183:       assertFalse(node2.isComma());
2184:       assertFalse(node2.isFunction());
2185:       assertFalse(node2.isWhile());
2186:       assertFalse(node2.isAnd());
2187:       assertFalse(node2.isNot());
2188:       assertFalse(node2.isObjectLit());
2189:       assertFalse(node2.isDebugger());
2190:       assertEquals((-1), node2.getSourcePosition());
2191:       assertFalse(node2.isTypeOf());
2192:       assertFalse(node2.isNumber());
2193:       assertFalse(node2.isLabelName());
2194:       assertFalse(node2.isAssignAdd());
2195:       assertFalse(node2.isGetElem());
2196:       assertEquals((-1), node2.getLineno());
2197:       assertFalse(node2.isCast());
2198:       assertFalse(node2.hasMoreThanOneChild());
2199:       assertFalse(node2.isContinue());
2200:       assertFalse(node2.isAssign());
2201:       assertFalse(node2.isLabel());
2202:       assertFalse(node2.isReturn());
2203:       assertFalse(node2.hasChildren());
2204:       assertFalse(node2.isDec());
2205:       assertFalse(node2.isExprResult());
2206:       assertFalse(node2.isDo());
2207:       assertFalse(node2.isAdd());
2208:       assertFalse(node2.isNew());
2209:       assertFalse(node2.isOr());
2210:       assertFalse(node2.isThis());
2211:       assertFalse(node2.isParamList());
2212:       assertFalse(node2.isVar());
2213:       assertFalse(node2.isHook());
2214:       assertFalse(node2.isCatch());
2215:       assertFalse(node2.isInstanceOf());
2216:       assertFalse(node2.isBlock());
2217:       assertFalse(node2.isWith());
2218:       assertEquals(0, node2.getChildCount());
2219:       assertFalse(node2.isScript());
2220:       assertFalse(node2.isSwitch());
2221:       assertFalse(node2.isTry());
2222:       assertTrue(node2.isString());
2223:       assertFalse(node2.hasOneChild());
2224:       assertFalse(node2.isCase());
2225:       assertFalse(node2.isStringKey());
2226:       assertFalse(node2.isGetterDef());
2227:       assertEquals((-1), node2.getCharno());
2228:       assertFalse(node3.isTry());
2229:       assertFalse(node3.isVoid());
2230:       assertFalse(node3.isDebugger());
2231:       assertFalse(node3.isArrayLit());
2232:       assertFalse(node3.isTrue());
2233:       assertFalse(node3.isDefaultCase());
2234:       assertFalse(node3.isFor());
2235:       assertFalse(node3.isCatch());
2236:       assertFalse(node3.isFunction());
2237:       assertFalse(node3.isRegExp());
2238:       assertEquals(0, node3.getChildCount());
2239:       assertFalse(node3.isNE());
2240:       assertFalse(node3.isNull());
2241:       assertFalse(node3.isIf());
2242:       assertFalse(node3.isEmpty());
2243:       assertFalse(node3.isInc());
2244:       assertFalse(node3.isSetterDef());
2245:       assertFalse(node3.isIn());
2246:       assertEquals(31, node3.getType());
2247:       assertFalse(node3.isBlock());
2248:       assertFalse(node3.isAdd());
2249:       assertEquals((-1), node3.getCharno());
2250:       assertFalse(node3.isNew());
2251:       assertFalse(node3.isSwitch());
2252:       assertFalse(node3.isVar());
2253:       assertFalse(node3.isHook());
2254:       assertFalse(node3.isStringKey());
2255:       assertFalse(node3.hasMoreThanOneChild());
2256:       assertFalse(node3.isThis());
2257:       assertFalse(node3.isParamList());
2258:       assertFalse(node3.isGetterDef());
2259:       assertFalse(node3.isCase());
2260:       assertFalse(node3.isScript());
2261:       assertFalse(node3.isNumber());
2262:       assertFalse(node3.hasOneChild());
2263:       assertFalse(node3.isAssign());
2264:       assertFalse(node3.isWith());
2265:       assertFalse(node3.isLabelName());
2266:       assertFalse(node3.isGetElem());
2267:       assertFalse(node3.hasChildren());
2268:       assertFalse(node3.isDec());
2269:       assertFalse(node3.isCast());
2270:       assertFalse(node3.isTypeOf());
2271:       assertFalse(node3.isExprResult());
2272:       assertFalse(node3.isInstanceOf());
2273:       assertFalse(node3.isOr());
2274:       assertFalse(node3.isLabel());
2275:       assertFalse(node3.isAssignAdd());
2276:       assertTrue(node3.isDelProp());
2277:       assertEquals((-1), node3.getLineno());
2278:       assertFalse(node3.isDo());
2279:       assertFalse(node3.isThrow());
2280:       assertFalse(node3.isWhile());
2281:       assertFalse(node3.isName());
2282:       assertFalse(node3.isFalse());
2283:       assertFalse(node3.isBreak());
2284:       assertFalse(node3.isCall());
2285:       assertFalse(node3.isContinue());
2286:       assertFalse(node3.isReturn());
2287:       assertFalse(node3.isGetProp());
2288:       assertFalse(node3.isComma());
2289:       assertFalse(node3.isAnd());
2290:       assertFalse(node3.isNot());
2291:       assertEquals((-1), node3.getSourcePosition());
2292:       assertFalse(node3.isObjectLit());
2293:       assertFalse(node3.isString());
2294:       assertFalse(node5.isIf());
2295:       assertFalse(node5.isNE());
2296:       assertFalse(node5.isFor());
2297:       assertFalse(node5.isEmpty());
2298:       assertFalse(node5.isIn());
2299:       assertFalse(node5.isDebugger());
2300:       assertFalse(node5.isGetterDef());
2301:       assertFalse(node5.isDefaultCase());
2302:       assertFalse(node5.isInc());
2303:       assertFalse(node5.isSwitch());
2304:       assertEquals(0, node5.getChildCount());
2305:       assertFalse(node5.isArrayLit());
2306:       assertFalse(node5.isFalse());
2307:       assertFalse(node5.isFunction());
2308:       assertFalse(node5.isBreak());
2309:       assertFalse(node5.isNull());
2310:       assertFalse(node5.isGetProp());
2311:       assertFalse(node5.isName());
2312:       assertFalse(node5.isAdd());
2313:       assertFalse(node5.isObjectLit());
2314:       assertFalse(node5.isNot());
2315:       assertFalse(node5.isWhile());
2316:       assertFalse(node5.isString());
2317:       assertFalse(node5.isExprResult());
2318:       assertFalse(node5.isTrue());
2319:       assertFalse(node5.isVoid());
2320:       assertFalse(node5.isReturn());
2321:       assertFalse(node5.isCall());
2322:       assertFalse(node5.isAssign());
2323:       assertFalse(node5.isComma());
2324:       assertFalse(node5.isTypeOf());
2325:       assertFalse(node5.isNumber());
2326:       assertFalse(node5.isDec());
2327:       assertFalse(node5.hasChildren());
2328:       assertEquals((-1), node5.getSourcePosition());
2329:       assertFalse(node5.isGetElem());
2330:       assertFalse(node5.isAssignAdd());
2331:       assertEquals((-1), node5.getLineno());
2332:       assertFalse(node5.isLabelName());
2333:       assertFalse(node5.hasOneChild());
2334:       assertTrue(node5.isDelProp());
2335:       assertFalse(node5.isOr());
2336:       assertFalse(node5.isNew());
2337:       assertFalse(node5.isAnd());
2338:       assertFalse(node5.isDo());
2339:       assertFalse(node5.isCast());
2340:       assertFalse(node5.isVar());
2341:       assertFalse(node5.isContinue());
2342:       assertFalse(node5.isLabel());
2343:       assertFalse(node5.isSetterDef());
2344:       assertFalse(node5.isThis());
2345:       assertFalse(node5.isThrow());
2346:       assertFalse(node5.isStringKey());
2347:       assertFalse(node5.isParamList());
2348:       assertEquals((-1), node5.getCharno());
2349:       assertFalse(node5.isScript());
2350:       assertFalse(node5.isCase());
2351:       assertFalse(node5.isTry());
2352:       assertFalse(node5.isInstanceOf());
2353:       assertFalse(node5.isHook());
2354:       assertFalse(node5.isCatch());
2355:       assertEquals(31, node5.getType());
2356:       assertFalse(node5.isBlock());
2357:       assertFalse(node5.hasMoreThanOneChild());
2358:       assertFalse(node5.isWith());
2359:       assertFalse(node5.isRegExp());
2360:       assertFalse(node6.isDebugger());
2361:       assertFalse(node6.isFunction());
2362:       assertFalse(node6.isTrue());
2363:       assertFalse(node6.isVoid());
2364:       assertFalse(node6.isRegExp());
2365:       assertFalse(node6.isTry());
2366:       assertFalse(node6.isDefaultCase());
2367:       assertFalse(node6.isArrayLit());
2368:       assertFalse(node6.isGetterDef());
2369:       assertFalse(node6.isNE());
2370:       assertFalse(node6.isIf());
2371:       assertFalse(node6.isDelProp());
2372:       assertTrue(node6.hasChildren());
2373:       assertTrue(node6.isThis());
2374:       assertFalse(node6.isCall());
2375:       assertFalse(node6.isCatch());
2376:       assertEquals(1, node6.getChildCount());
2377:       assertFalse(node6.isBlock());
2378:       assertFalse(node6.isFor());
2379:       assertTrue(node6.hasOneChild());
2380:       assertFalse(node6.isInc());
2381:       assertFalse(node6.isString());
2382:       assertFalse(node6.isIn());
2383:       assertFalse(node6.isSetterDef());
2384:       assertFalse(node6.isContinue());
2385:       assertFalse(node6.isCast());
2386:       assertFalse(node6.isThrow());
2387:       assertFalse(node6.isFalse());
2388:       assertFalse(node6.isExprResult());
2389:       assertFalse(node6.isScript());
2390:       assertFalse(node6.isAnd());
2391:       assertFalse(node6.isObjectLit());
2392:       assertFalse(node6.isNot());
2393:       assertEquals((-1), node6.getSourcePosition());
2394:       assertFalse(node6.isComma());
2395:       assertFalse(node6.isTypeOf());
2396:       assertFalse(node6.isNumber());
2397:       assertEquals((-1), node6.getLineno());
2398:       assertFalse(node6.isInstanceOf());
2399:       assertFalse(node6.isGetElem());
2400:       assertFalse(node6.isBreak());
2401:       assertFalse(node6.isGetProp());
2402:       assertFalse(node6.hasMoreThanOneChild());
2403:       assertFalse(node6.isWith());
2404:       assertFalse(node6.isWhile());
2405:       assertFalse(node6.isAssign());
2406:       assertFalse(node6.isDec());
2407:       assertFalse(node6.isReturn());
2408:       assertFalse(node6.isHook());
2409:       assertEquals((-1), node6.getCharno());
2410:       assertFalse(node6.isSwitch());
2411:       assertFalse(node6.isDo());
2412:       assertFalse(node6.isCase());
2413:       assertFalse(node6.isAdd());
2414:       assertFalse(node6.isNew());
2415:       assertFalse(node6.isStringKey());
2416:       assertFalse(node6.isName());
2417:       assertFalse(node6.isOr());
2418:       assertFalse(node6.isNull());
2419:       assertFalse(node6.isParamList());
2420:       assertFalse(node6.isAssignAdd());
2421:       assertFalse(node6.isLabelName());
2422:       assertFalse(node6.isEmpty());
2423:       assertEquals(42, node6.getType());
2424:       assertFalse(node6.isVar());
2425:       assertFalse(node6.isLabel());
2426:       assertFalse(node8.isFor());
2427:       assertFalse(node8.isEmpty());
2428:       assertFalse(node8.isGetterDef());
2429:       assertEquals(16, node8.getType());
2430:       assertFalse(node8.isDefaultCase());
2431:       assertFalse(node8.isTry());
2432:       assertFalse(node8.isString());
2433:       assertFalse(node8.isDebugger());
2434:       assertEquals((-1), node8.getCharno());
2435:       assertFalse(node8.isFunction());
2436:       assertFalse(node8.isSwitch());
2437:       assertFalse(node8.isParamList());
2438:       assertFalse(node8.isArrayLit());
2439:       assertFalse(node8.isCall());
2440:       assertFalse(node8.isName());
2441:       assertFalse(node8.isVar());
2442:       assertFalse(node8.isNull());
2443:       assertFalse(node8.isComma());
2444:       assertFalse(node8.isGetProp());
2445:       assertFalse(node8.isAdd());
2446:       assertFalse(node8.isDo());
2447:       assertFalse(node8.isNew());
2448:       assertFalse(node8.isWhile());
2449:       assertFalse(node8.isReturn());
2450:       assertFalse(node8.isOr());
2451:       assertFalse(node8.isVoid());
2452:       assertFalse(node8.isExprResult());
2453:       assertFalse(node8.isTrue());
2454:       assertTrue(node8.hasMoreThanOneChild());
2455:       assertFalse(node8.isBreak());
2456:       assertFalse(node8.isDelProp());
2457:       assertFalse(node8.isGetElem());
2458:       assertFalse(node8.isCast());
2459:       assertFalse(node8.isNumber());
2460:       assertFalse(node8.isDec());
2461:       assertFalse(node8.isTypeOf());
2462:       assertFalse(node8.isAssign());
2463:       assertEquals((-1), node8.getSourcePosition());
2464:       assertEquals(3, node8.getChildCount());
2465:       assertFalse(node8.isAssignAdd());
2466:       assertFalse(node8.isScript());
2467:       assertFalse(node8.hasOneChild());
2468:       assertFalse(node8.isContinue());
2469:       assertFalse(node8.isObjectLit());
2470:       assertFalse(node8.isAnd());
2471:       assertFalse(node8.isNot());
2472:       assertFalse(node8.isLabel());
2473:       assertFalse(node8.isLabelName());
2474:       assertFalse(node8.isFalse());
2475:       assertFalse(node8.isThrow());
2476:       assertFalse(node8.isStringKey());
2477:       assertFalse(node8.isHook());
2478:       assertFalse(node8.isBlock());
2479:       assertFalse(node8.isInc());
2480:       assertFalse(node8.isThis());
2481:       assertFalse(node8.isSetterDef());
2482:       assertFalse(node8.isCase());
2483:       assertFalse(node8.isWith());
2484:       assertFalse(node8.isCatch());
2485:       assertFalse(node8.isIn());
2486:       assertFalse(node8.isRegExp());
2487:       assertTrue(node8.hasChildren());
2488:       assertFalse(node8.isNE());
2489:       assertFalse(node8.isInstanceOf());
2490:       assertFalse(node8.isIf());
2491:       assertEquals((-1), node8.getLineno());
2492:       assertNotNull(node8);
2493:       assertFalse(node0.equals((Object)node5));
2494:       assertFalse(node0.equals((Object)node6));
2495:       assertFalse(node0.equals((Object)node1));
2496:       assertFalse(node0.equals((Object)node2));
2497:       assertFalse(node0.equals((Object)node4));
2498:       assertFalse(node0.equals((Object)node3));
2499:       assertFalse(node0.equals((Object)node7));
2500:       assertFalse(node1.equals((Object)node2));
2501:       assertFalse(node1.equals((Object)node6));
2502:       assertFalse(node1.equals((Object)node5));
2503:       assertFalse(node1.equals((Object)node4));
2504:       assertFalse(node1.equals((Object)node0));
2505:       assertFalse(node1.equals((Object)node7));
2506:       assertFalse(node2.equals((Object)node4));
2507:       assertFalse(node2.equals((Object)node0));
2508:       assertFalse(node2.equals((Object)node5));
2509:       assertFalse(node2.equals((Object)node6));
2510:       assertFalse(node2.equals((Object)node1));
2511:       assertFalse(node2.equals((Object)node3));
2512:       assertFalse(node2.equals((Object)node7));
2513:       assertFalse(node3.equals((Object)node7));
2514:       assertFalse(node3.equals((Object)node0));
2515:       assertFalse(node3.equals((Object)node4));
2516:       assertFalse(node3.equals((Object)node5));
2517:       assertFalse(node3.equals((Object)node6));
2518:       assertFalse(node3.equals((Object)node2));
2519:       assertFalse(node5.equals((Object)node4));
2520:       assertFalse(node5.equals((Object)node0));
2521:       assertFalse(node5.equals((Object)node2));
2522:       assertFalse(node5.equals((Object)node6));
2523:       assertFalse(node5.equals((Object)node7));
2524:       assertFalse(node5.equals((Object)node3));
2525:       assertFalse(node5.equals((Object)node1));
2526:       assertFalse(node6.equals((Object)node4));
2527:       assertFalse(node6.equals((Object)node2));
2528:       assertFalse(node6.equals((Object)node0));
2529:       assertFalse(node6.equals((Object)node1));
2530:       assertFalse(node6.equals((Object)node5));
2531:       assertFalse(node6.equals((Object)node7));
2532:       
2533:       // Undeclared exception!
2534:       try { 
2535:         Node.newString(38, (String) null);
2536:         fail("Expecting exception: IllegalArgumentException");
2537:       
2538:       } catch(IllegalArgumentException e) {
2539:          //
2540:          // StringNode: str is null
2541:          //
2542:          verifyException("com.google.javascript.rhino.Node$StringNode", e);
2543:       }
2544:   }
2545: }
RegularFileObject[/tmp/EvoSuite_119_1629222881353/com/google/javascript/rhino/Node_119_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:42 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_119_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_119_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_119_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.JSTypeNative",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.common.collect.AbstractIndexedListIterator",
340:       "com.google.common.collect.Iterators$11",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.TemplatizedType",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.javascript.rhino.JSTypeExpression",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.common.collect.Iterators$12",
366:       "com.google.javascript.rhino.jstype.NamedType"
367:     );
368:   }
369: }

[MASTER] 17:54:42.533 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(45);
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals(45, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertNotNull(node0);

String string0 = node0.getQualifiedName();
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals(45, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertNull(string0);

Node node1 = new Node(31);
assertEquals((-1), node1.getSourcePosition());
assertTrue(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertEquals(31, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

Node node2 = Node.newString(">F6+n;+C?)~A^");
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isInc());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isIn());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isCall());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals(40, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isFunction());
assertFalse(node2.isWhile());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isExprResult());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isTry());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

Node node3 = node1.useSourceInfoIfMissingFrom(node0);
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals(45, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertEquals((-1), node1.getSourcePosition());
assertTrue(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertEquals(31, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertFalse(node3.isDebugger());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTrue());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFor());
assertFalse(node3.isCatch());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isIf());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertEquals(31, node3.getType());
assertFalse(node3.isBlock());
assertFalse(node3.isAdd());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNew());
assertFalse(node3.isSwitch());
assertFalse(node3.isVar());
assertFalse(node3.isHook());
assertFalse(node3.isStringKey());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isThis());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isNumber());
assertFalse(node3.hasOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.isWith());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isCast());
assertFalse(node3.isTypeOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertTrue(node3.isDelProp());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isDo());
assertFalse(node3.isThrow());
assertFalse(node3.isWhile());
assertFalse(node3.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isBreak());
assertFalse(node3.isCall());
assertFalse(node3.isContinue());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isObjectLit());
assertFalse(node3.isString());
assertNotNull(node3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals(45, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));

Node node4 = Node.newString(">F6+n;+C?)~A^", 2, (-1087));
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isScript());
assertFalse(node4.isWith());
assertFalse(node4.isThis());
assertFalse(node4.isComma());
assertFalse(node4.isGetProp());
assertFalse(node4.hasOneChild());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isLabelName());
assertFalse(node4.isNumber());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isCast());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isAnd());
assertFalse(node4.isSwitch());
assertFalse(node4.isCase());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isContinue());
assertFalse(node4.isIn());
assertFalse(node4.isBlock());
assertTrue(node4.isString());
assertFalse(node4.isInc());
assertFalse(node4.isHook());
assertFalse(node4.isFor());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertEquals(40, node4.getType());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isRegExp());
assertFalse(node4.isCatch());
assertFalse(node4.isFunction());
assertFalse(node4.isTry());
assertFalse(node4.isSetterDef());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isStringKey());
assertFalse(node4.isArrayLit());
assertFalse(node4.isGetterDef());
assertFalse(node4.isDebugger());
assertFalse(node4.isParamList());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isReturn());
assertFalse(node4.isLabel());
assertFalse(node4.isVar());
assertFalse(node4.isWhile());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isName());
assertFalse(node4.isGetElem());
assertFalse(node4.isAssign());
assertFalse(node4.isEmpty());
assertFalse(node4.isCall());
assertFalse(node4.hasChildren());
assertFalse(node4.isBreak());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.isOr());
assertFalse(node4.isVoid());
assertFalse(node4.isExprResult());
assertFalse(node4.isTrue());
assertFalse(node4.isNull());
assertFalse(node4.isDelProp());
assertNotNull(node4);
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));

boolean boolean0 = node4.isGetProp();
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isScript());
assertFalse(node4.isWith());
assertFalse(node4.isThis());
assertFalse(node4.isComma());
assertFalse(node4.isGetProp());
assertFalse(node4.hasOneChild());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isLabelName());
assertFalse(node4.isNumber());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isCast());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isAnd());
assertFalse(node4.isSwitch());
assertFalse(node4.isCase());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isContinue());
assertFalse(node4.isIn());
assertFalse(node4.isBlock());
assertTrue(node4.isString());
assertFalse(node4.isInc());
assertFalse(node4.isHook());
assertFalse(node4.isFor());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertEquals(40, node4.getType());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isRegExp());
assertFalse(node4.isCatch());
assertFalse(node4.isFunction());
assertFalse(node4.isTry());
assertFalse(node4.isSetterDef());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isStringKey());
assertFalse(node4.isArrayLit());
assertFalse(node4.isGetterDef());
assertFalse(node4.isDebugger());
assertFalse(node4.isParamList());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isReturn());
assertFalse(node4.isLabel());
assertFalse(node4.isVar());
assertFalse(node4.isWhile());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isName());
assertFalse(node4.isGetElem());
assertFalse(node4.isAssign());
assertFalse(node4.isEmpty());
assertFalse(node4.isCall());
assertFalse(node4.hasChildren());
assertFalse(node4.isBreak());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.isOr());
assertFalse(node4.isVoid());
assertFalse(node4.isExprResult());
assertFalse(node4.isTrue());
assertFalse(node4.isNull());
assertFalse(node4.isDelProp());
assertFalse(boolean0);
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));

boolean boolean1 = node0.hasChildren();
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals(45, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(boolean1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertTrue(boolean1 == boolean0);

boolean boolean2 = node1.isSwitch();
assertEquals((-1), node1.getSourcePosition());
assertTrue(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertEquals(31, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(boolean2);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

Node node5 = node3.cloneNode();
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals(45, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertEquals((-1), node1.getSourcePosition());
assertTrue(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertEquals(31, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertFalse(node3.isDebugger());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTrue());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFor());
assertFalse(node3.isCatch());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isIf());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertEquals(31, node3.getType());
assertFalse(node3.isBlock());
assertFalse(node3.isAdd());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNew());
assertFalse(node3.isSwitch());
assertFalse(node3.isVar());
assertFalse(node3.isHook());
assertFalse(node3.isStringKey());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isThis());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isNumber());
assertFalse(node3.hasOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.isWith());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isCast());
assertFalse(node3.isTypeOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertTrue(node3.isDelProp());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isDo());
assertFalse(node3.isThrow());
assertFalse(node3.isWhile());
assertFalse(node3.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isBreak());
assertFalse(node3.isCall());
assertFalse(node3.isContinue());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isObjectLit());
assertFalse(node3.isString());
assertFalse(node5.isIf());
assertFalse(node5.isNE());
assertFalse(node5.isFor());
assertFalse(node5.isEmpty());
assertFalse(node5.isIn());
assertFalse(node5.isDebugger());
assertFalse(node5.isGetterDef());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isInc());
assertFalse(node5.isSwitch());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isArrayLit());
assertFalse(node5.isFalse());
assertFalse(node5.isFunction());
assertFalse(node5.isBreak());
assertFalse(node5.isNull());
assertFalse(node5.isGetProp());
assertFalse(node5.isName());
assertFalse(node5.isAdd());
assertFalse(node5.isObjectLit());
assertFalse(node5.isNot());
assertFalse(node5.isWhile());
assertFalse(node5.isString());
assertFalse(node5.isExprResult());
assertFalse(node5.isTrue());
assertFalse(node5.isVoid());
assertFalse(node5.isReturn());
assertFalse(node5.isCall());
assertFalse(node5.isAssign());
assertFalse(node5.isComma());
assertFalse(node5.isTypeOf());
assertFalse(node5.isNumber());
assertFalse(node5.isDec());
assertFalse(node5.hasChildren());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isGetElem());
assertFalse(node5.isAssignAdd());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isLabelName());
assertFalse(node5.hasOneChild());
assertTrue(node5.isDelProp());
assertFalse(node5.isOr());
assertFalse(node5.isNew());
assertFalse(node5.isAnd());
assertFalse(node5.isDo());
assertFalse(node5.isCast());
assertFalse(node5.isVar());
assertFalse(node5.isContinue());
assertFalse(node5.isLabel());
assertFalse(node5.isSetterDef());
assertFalse(node5.isThis());
assertFalse(node5.isThrow());
assertFalse(node5.isStringKey());
assertFalse(node5.isParamList());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isScript());
assertFalse(node5.isCase());
assertFalse(node5.isTry());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isHook());
assertFalse(node5.isCatch());
assertEquals(31, node5.getType());
assertFalse(node5.isBlock());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isWith());
assertFalse(node5.isRegExp());
assertNotNull(node5);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));

Node node6 = new Node(42, node5, node5);
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals(45, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertEquals((-1), node1.getSourcePosition());
assertTrue(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertEquals(31, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertFalse(node3.isDebugger());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTrue());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFor());
assertFalse(node3.isCatch());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isIf());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertEquals(31, node3.getType());
assertFalse(node3.isBlock());
assertFalse(node3.isAdd());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNew());
assertFalse(node3.isSwitch());
assertFalse(node3.isVar());
assertFalse(node3.isHook());
assertFalse(node3.isStringKey());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isThis());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isNumber());
assertFalse(node3.hasOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.isWith());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isCast());
assertFalse(node3.isTypeOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertTrue(node3.isDelProp());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isDo());
assertFalse(node3.isThrow());
assertFalse(node3.isWhile());
assertFalse(node3.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isBreak());
assertFalse(node3.isCall());
assertFalse(node3.isContinue());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isObjectLit());
assertFalse(node3.isString());
assertFalse(node5.isIf());
assertFalse(node5.isNE());
assertFalse(node5.isFor());
assertFalse(node5.isEmpty());
assertFalse(node5.isIn());
assertFalse(node5.isDebugger());
assertFalse(node5.isGetterDef());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isInc());
assertFalse(node5.isSwitch());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isArrayLit());
assertFalse(node5.isFalse());
assertFalse(node5.isFunction());
assertFalse(node5.isBreak());
assertFalse(node5.isNull());
assertFalse(node5.isGetProp());
assertFalse(node5.isName());
assertFalse(node5.isAdd());
assertFalse(node5.isObjectLit());
assertFalse(node5.isNot());
assertFalse(node5.isWhile());
assertFalse(node5.isString());
assertFalse(node5.isExprResult());
assertFalse(node5.isTrue());
assertFalse(node5.isVoid());
assertFalse(node5.isReturn());
assertFalse(node5.isCall());
assertFalse(node5.isAssign());
assertFalse(node5.isComma());
assertFalse(node5.isTypeOf());
assertFalse(node5.isNumber());
assertFalse(node5.isDec());
assertFalse(node5.hasChildren());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isGetElem());
assertFalse(node5.isAssignAdd());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isLabelName());
assertFalse(node5.hasOneChild());
assertTrue(node5.isDelProp());
assertFalse(node5.isOr());
assertFalse(node5.isNew());
assertFalse(node5.isAnd());
assertFalse(node5.isDo());
assertFalse(node5.isCast());
assertFalse(node5.isVar());
assertFalse(node5.isContinue());
assertFalse(node5.isLabel());
assertFalse(node5.isSetterDef());
assertFalse(node5.isThis());
assertFalse(node5.isThrow());
assertFalse(node5.isStringKey());
assertFalse(node5.isParamList());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isScript());
assertFalse(node5.isCase());
assertFalse(node5.isTry());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isHook());
assertFalse(node5.isCatch());
assertEquals(31, node5.getType());
assertFalse(node5.isBlock());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isWith());
assertFalse(node5.isRegExp());
assertFalse(node6.isDebugger());
assertFalse(node6.isFunction());
assertFalse(node6.isTrue());
assertFalse(node6.isVoid());
assertFalse(node6.isRegExp());
assertFalse(node6.isTry());
assertFalse(node6.isDefaultCase());
assertFalse(node6.isArrayLit());
assertFalse(node6.isGetterDef());
assertFalse(node6.isNE());
assertFalse(node6.isIf());
assertFalse(node6.isDelProp());
assertTrue(node6.hasChildren());
assertTrue(node6.isThis());
assertFalse(node6.isCall());
assertFalse(node6.isCatch());
assertEquals(1, node6.getChildCount());
assertFalse(node6.isBlock());
assertFalse(node6.isFor());
assertTrue(node6.hasOneChild());
assertFalse(node6.isInc());
assertFalse(node6.isString());
assertFalse(node6.isIn());
assertFalse(node6.isSetterDef());
assertFalse(node6.isContinue());
assertFalse(node6.isCast());
assertFalse(node6.isThrow());
assertFalse(node6.isFalse());
assertFalse(node6.isExprResult());
assertFalse(node6.isScript());
assertFalse(node6.isAnd());
assertFalse(node6.isObjectLit());
assertFalse(node6.isNot());
assertEquals((-1), node6.getSourcePosition());
assertFalse(node6.isComma());
assertFalse(node6.isTypeOf());
assertFalse(node6.isNumber());
assertEquals((-1), node6.getLineno());
assertFalse(node6.isInstanceOf());
assertFalse(node6.isGetElem());
assertFalse(node6.isBreak());
assertFalse(node6.isGetProp());
assertFalse(node6.hasMoreThanOneChild());
assertFalse(node6.isWith());
assertFalse(node6.isWhile());
assertFalse(node6.isAssign());
assertFalse(node6.isDec());
assertFalse(node6.isReturn());
assertFalse(node6.isHook());
assertEquals((-1), node6.getCharno());
assertFalse(node6.isSwitch());
assertFalse(node6.isDo());
assertFalse(node6.isCase());
assertFalse(node6.isAdd());
assertFalse(node6.isNew());
assertFalse(node6.isStringKey());
assertFalse(node6.isName());
assertFalse(node6.isOr());
assertFalse(node6.isNull());
assertFalse(node6.isParamList());
assertFalse(node6.isAssignAdd());
assertFalse(node6.isLabelName());
assertFalse(node6.isEmpty());
assertEquals(42, node6.getType());
assertFalse(node6.isVar());
assertFalse(node6.isLabel());
assertNotNull(node6);
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node3));

Iterable<Node> iterable1 = node4.siblings();
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isScript());
assertFalse(node4.isWith());
assertFalse(node4.isThis());
assertFalse(node4.isComma());
assertFalse(node4.isGetProp());
assertFalse(node4.hasOneChild());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isLabelName());
assertFalse(node4.isNumber());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isCast());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isAnd());
assertFalse(node4.isSwitch());
assertFalse(node4.isCase());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isContinue());
assertFalse(node4.isIn());
assertFalse(node4.isBlock());
assertTrue(node4.isString());
assertFalse(node4.isInc());
assertFalse(node4.isHook());
assertFalse(node4.isFor());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertEquals(40, node4.getType());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isRegExp());
assertFalse(node4.isCatch());
assertFalse(node4.isFunction());
assertFalse(node4.isTry());
assertFalse(node4.isSetterDef());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isStringKey());
assertFalse(node4.isArrayLit());
assertFalse(node4.isGetterDef());
assertFalse(node4.isDebugger());
assertFalse(node4.isParamList());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isReturn());
assertFalse(node4.isLabel());
assertFalse(node4.isVar());
assertFalse(node4.isWhile());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isName());
assertFalse(node4.isGetElem());
assertFalse(node4.isAssign());
assertFalse(node4.isEmpty());
assertFalse(node4.isCall());
assertFalse(node4.hasChildren());
assertFalse(node4.isBreak());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.isOr());
assertFalse(node4.isVoid());
assertFalse(node4.isExprResult());
assertFalse(node4.isTrue());
assertFalse(node4.isNull());
assertFalse(node4.isDelProp());
assertNotNull(iterable1);
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node5));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node6));
assertFalse(node4.equals((Object)node3));
assertFalse(iterable1.equals((Object)iterable0));

boolean boolean3 = node6.isNull();
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals(45, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertEquals((-1), node1.getSourcePosition());
assertTrue(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertEquals(31, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertFalse(node3.isDebugger());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTrue());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFor());
assertFalse(node3.isCatch());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isIf());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertEquals(31, node3.getType());
assertFalse(node3.isBlock());
assertFalse(node3.isAdd());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNew());
assertFalse(node3.isSwitch());
assertFalse(node3.isVar());
assertFalse(node3.isHook());
assertFalse(node3.isStringKey());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isThis());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isNumber());
assertFalse(node3.hasOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.isWith());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isCast());
assertFalse(node3.isTypeOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertTrue(node3.isDelProp());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isDo());
assertFalse(node3.isThrow());
assertFalse(node3.isWhile());
assertFalse(node3.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isBreak());
assertFalse(node3.isCall());
assertFalse(node3.isContinue());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isObjectLit());
assertFalse(node3.isString());
assertFalse(node5.isIf());
assertFalse(node5.isNE());
assertFalse(node5.isFor());
assertFalse(node5.isEmpty());
assertFalse(node5.isIn());
assertFalse(node5.isDebugger());
assertFalse(node5.isGetterDef());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isInc());
assertFalse(node5.isSwitch());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isArrayLit());
assertFalse(node5.isFalse());
assertFalse(node5.isFunction());
assertFalse(node5.isBreak());
assertFalse(node5.isNull());
assertFalse(node5.isGetProp());
assertFalse(node5.isName());
assertFalse(node5.isAdd());
assertFalse(node5.isObjectLit());
assertFalse(node5.isNot());
assertFalse(node5.isWhile());
assertFalse(node5.isString());
assertFalse(node5.isExprResult());
assertFalse(node5.isTrue());
assertFalse(node5.isVoid());
assertFalse(node5.isReturn());
assertFalse(node5.isCall());
assertFalse(node5.isAssign());
assertFalse(node5.isComma());
assertFalse(node5.isTypeOf());
assertFalse(node5.isNumber());
assertFalse(node5.isDec());
assertFalse(node5.hasChildren());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isGetElem());
assertFalse(node5.isAssignAdd());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isLabelName());
assertFalse(node5.hasOneChild());
assertTrue(node5.isDelProp());
assertFalse(node5.isOr());
assertFalse(node5.isNew());
assertFalse(node5.isAnd());
assertFalse(node5.isDo());
assertFalse(node5.isCast());
assertFalse(node5.isVar());
assertFalse(node5.isContinue());
assertFalse(node5.isLabel());
assertFalse(node5.isSetterDef());
assertFalse(node5.isThis());
assertFalse(node5.isThrow());
assertFalse(node5.isStringKey());
assertFalse(node5.isParamList());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isScript());
assertFalse(node5.isCase());
assertFalse(node5.isTry());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isHook());
assertFalse(node5.isCatch());
assertEquals(31, node5.getType());
assertFalse(node5.isBlock());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isWith());
assertFalse(node5.isRegExp());
assertFalse(node6.isDebugger());
assertFalse(node6.isFunction());
assertFalse(node6.isTrue());
assertFalse(node6.isVoid());
assertFalse(node6.isRegExp());
assertFalse(node6.isTry());
assertFalse(node6.isDefaultCase());
assertFalse(node6.isArrayLit());
assertFalse(node6.isGetterDef());
assertFalse(node6.isNE());
assertFalse(node6.isIf());
assertFalse(node6.isDelProp());
assertTrue(node6.hasChildren());
assertTrue(node6.isThis());
assertFalse(node6.isCall());
assertFalse(node6.isCatch());
assertEquals(1, node6.getChildCount());
assertFalse(node6.isBlock());
assertFalse(node6.isFor());
assertTrue(node6.hasOneChild());
assertFalse(node6.isInc());
assertFalse(node6.isString());
assertFalse(node6.isIn());
assertFalse(node6.isSetterDef());
assertFalse(node6.isContinue());
assertFalse(node6.isCast());
assertFalse(node6.isThrow());
assertFalse(node6.isFalse());
assertFalse(node6.isExprResult());
assertFalse(node6.isScript());
assertFalse(node6.isAnd());
assertFalse(node6.isObjectLit());
assertFalse(node6.isNot());
assertEquals((-1), node6.getSourcePosition());
assertFalse(node6.isComma());
assertFalse(node6.isTypeOf());
assertFalse(node6.isNumber());
assertEquals((-1), node6.getLineno());
assertFalse(node6.isInstanceOf());
assertFalse(node6.isGetElem());
assertFalse(node6.isBreak());
assertFalse(node6.isGetProp());
assertFalse(node6.hasMoreThanOneChild());
assertFalse(node6.isWith());
assertFalse(node6.isWhile());
assertFalse(node6.isAssign());
assertFalse(node6.isDec());
assertFalse(node6.isReturn());
assertFalse(node6.isHook());
assertEquals((-1), node6.getCharno());
assertFalse(node6.isSwitch());
assertFalse(node6.isDo());
assertFalse(node6.isCase());
assertFalse(node6.isAdd());
assertFalse(node6.isNew());
assertFalse(node6.isStringKey());
assertFalse(node6.isName());
assertFalse(node6.isOr());
assertFalse(node6.isNull());
assertFalse(node6.isParamList());
assertFalse(node6.isAssignAdd());
assertFalse(node6.isLabelName());
assertFalse(node6.isEmpty());
assertEquals(42, node6.getType());
assertFalse(node6.isVar());
assertFalse(node6.isLabel());
assertFalse(boolean3);
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node6));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node6));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node6));
assertFalse(node3.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node6));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node3));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);

Node node7 = Node.newString("xg6~g", 85, 12);
assertFalse(node7.isIn());
assertFalse(node7.isFor());
assertFalse(node7.isEmpty());
assertFalse(node7.isCase());
assertFalse(node7.isVoid());
assertFalse(node7.isInc());
assertFalse(node7.isRegExp());
assertFalse(node7.isDelProp());
assertFalse(node7.isBreak());
assertFalse(node7.isNE());
assertFalse(node7.isTrue());
assertFalse(node7.isIf());
assertFalse(node7.isGetProp());
assertFalse(node7.isComma());
assertFalse(node7.isObjectLit());
assertFalse(node7.isSetterDef());
assertFalse(node7.isFalse());
assertEquals(40, node7.getType());
assertFalse(node7.isThrow());
assertFalse(node7.isDebugger());
assertFalse(node7.isCast());
assertFalse(node7.isFunction());
assertFalse(node7.isNot());
assertFalse(node7.isAnd());
assertFalse(node7.isOr());
assertFalse(node7.isLabel());
assertFalse(node7.isAssignAdd());
assertFalse(node7.isReturn());
assertFalse(node7.hasMoreThanOneChild());
assertFalse(node7.isNumber());
assertFalse(node7.isTypeOf());
assertFalse(node7.isContinue());
assertFalse(node7.isDo());
assertFalse(node7.isAssign());
assertFalse(node7.hasChildren());
assertFalse(node7.isDec());
assertFalse(node7.isWhile());
assertFalse(node7.isBlock());
assertFalse(node7.isAdd());
assertFalse(node7.isNew());
assertFalse(node7.isCall());
assertFalse(node7.isExprResult());
assertFalse(node7.isName());
assertFalse(node7.isGetElem());
assertFalse(node7.isNull());
assertEquals(12, node7.getCharno());
assertEquals(0, node7.getChildCount());
assertFalse(node7.isCatch());
assertFalse(node7.isInstanceOf());
assertFalse(node7.isWith());
assertFalse(node7.isVar());
assertFalse(node7.isThis());
assertFalse(node7.isHook());
assertFalse(node7.isDefaultCase());
assertFalse(node7.isTry());
assertTrue(node7.isString());
assertFalse(node7.hasOneChild());
assertFalse(node7.isArrayLit());
assertFalse(node7.isScript());
assertEquals(85, node7.getLineno());
assertFalse(node7.isLabelName());
assertFalse(node7.isGetterDef());
assertEquals(348172, node7.getSourcePosition());
assertFalse(node7.isSwitch());
assertFalse(node7.isParamList());
assertFalse(node7.isStringKey());
assertNotNull(node7);
assertFalse(node7.equals((Object)node3));
assertFalse(node7.equals((Object)node4));
assertFalse(node7.equals((Object)node5));
assertFalse(node7.equals((Object)node6));
assertFalse(node7.equals((Object)node1));
assertFalse(node7.equals((Object)node2));
assertFalse(node7.equals((Object)node0));

Node node8 = new Node(16, node2, node3, node6, (-2355), 1739);
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals(45, node0.getType());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertEquals((-1), node1.getSourcePosition());
assertTrue(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCast());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isBlock());
assertEquals(31, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isInc());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isIn());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isCall());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals(40, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isFunction());
assertFalse(node2.isWhile());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isExprResult());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isTry());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertFalse(node3.isDebugger());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTrue());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFor());
assertFalse(node3.isCatch());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isIf());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertEquals(31, node3.getType());
assertFalse(node3.isBlock());
assertFalse(node3.isAdd());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNew());
assertFalse(node3.isSwitch());
assertFalse(node3.isVar());
assertFalse(node3.isHook());
assertFalse(node3.isStringKey());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isThis());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isNumber());
assertFalse(node3.hasOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.isWith());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isCast());
assertFalse(node3.isTypeOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertTrue(node3.isDelProp());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isDo());
assertFalse(node3.isThrow());
assertFalse(node3.isWhile());
assertFalse(node3.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isBreak());
assertFalse(node3.isCall());
assertFalse(node3.isContinue());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isObjectLit());
assertFalse(node3.isString());
assertFalse(node5.isIf());
assertFalse(node5.isNE());
assertFalse(node5.isFor());
assertFalse(node5.isEmpty());
assertFalse(node5.isIn());
assertFalse(node5.isDebugger());
assertFalse(node5.isGetterDef());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isInc());
assertFalse(node5.isSwitch());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isArrayLit());
assertFalse(node5.isFalse());
assertFalse(node5.isFunction());
assertFalse(node5.isBreak());
assertFalse(node5.isNull());
assertFalse(node5.isGetProp());
assertFalse(node5.isName());
assertFalse(node5.isAdd());
assertFalse(node5.isObjectLit());
assertFalse(node5.isNot());
assertFalse(node5.isWhile());
assertFalse(node5.isString());
assertFalse(node5.isExprResult());
assertFalse(node5.isTrue());
assertFalse(node5.isVoid());
assertFalse(node5.isReturn());
assertFalse(node5.isCall());
assertFalse(node5.isAssign());
assertFalse(node5.isComma());
assertFalse(node5.isTypeOf());
assertFalse(node5.isNumber());
assertFalse(node5.isDec());
assertFalse(node5.hasChildren());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isGetElem());
assertFalse(node5.isAssignAdd());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isLabelName());
assertFalse(node5.hasOneChild());
assertTrue(node5.isDelProp());
assertFalse(node5.isOr());
assertFalse(node5.isNew());
assertFalse(node5.isAnd());
assertFalse(node5.isDo());
assertFalse(node5.isCast());
assertFalse(node5.isVar());
assertFalse(node5.isContinue());
assertFalse(node5.isLabel());
assertFalse(node5.isSetterDef());
assertFalse(node5.isThis());
assertFalse(node5.isThrow());
assertFalse(node5.isStringKey());
assertFalse(node5.isParamList());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isScript());
assertFalse(node5.isCase());
assertFalse(node5.isTry());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isHook());
assertFalse(node5.isCatch());
assertEquals(31, node5.getType());
assertFalse(node5.isBlock());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isWith());
assertFalse(node5.isRegExp());
assertFalse(node6.isDebugger());
assertFalse(node6.isFunction());
assertFalse(node6.isTrue());
assertFalse(node6.isVoid());
assertFalse(node6.isRegExp());
assertFalse(node6.isTry());
assertFalse(node6.isDefaultCase());
assertFalse(node6.isArrayLit());
assertFalse(node6.isGetterDef());
assertFalse(node6.isNE());
assertFalse(node6.isIf());
assertFalse(node6.isDelProp());
assertTrue(node6.hasChildren());
assertTrue(node6.isThis());
assertFalse(node6.isCall());
assertFalse(node6.isCatch());
assertEquals(1, node6.getChildCount());
assertFalse(node6.isBlock());
assertFalse(node6.isFor());
assertTrue(node6.hasOneChild());
assertFalse(node6.isInc());
assertFalse(node6.isString());
assertFalse(node6.isIn());
assertFalse(node6.isSetterDef());
assertFalse(node6.isContinue());
assertFalse(node6.isCast());
assertFalse(node6.isThrow());
assertFalse(node6.isFalse());
assertFalse(node6.isExprResult());
assertFalse(node6.isScript());
assertFalse(node6.isAnd());
assertFalse(node6.isObjectLit());
assertFalse(node6.isNot());
assertEquals((-1), node6.getSourcePosition());
assertFalse(node6.isComma());
assertFalse(node6.isTypeOf());
assertFalse(node6.isNumber());
assertEquals((-1), node6.getLineno());
assertFalse(node6.isInstanceOf());
assertFalse(node6.isGetElem());
assertFalse(node6.isBreak());
assertFalse(node6.isGetProp());
assertFalse(node6.hasMoreThanOneChild());
assertFalse(node6.isWith());
assertFalse(node6.isWhile());
assertFalse(node6.isAssign());
assertFalse(node6.isDec());
assertFalse(node6.isReturn());
assertFalse(node6.isHook());
assertEquals((-1), node6.getCharno());
assertFalse(node6.isSwitch());
assertFalse(node6.isDo());
assertFalse(node6.isCase());
assertFalse(node6.isAdd());
assertFalse(node6.isNew());
assertFalse(node6.isStringKey());
assertFalse(node6.isName());
assertFalse(node6.isOr());
assertFalse(node6.isNull());
assertFalse(node6.isParamList());
assertFalse(node6.isAssignAdd());
assertFalse(node6.isLabelName());
assertFalse(node6.isEmpty());
assertEquals(42, node6.getType());
assertFalse(node6.isVar());
assertFalse(node6.isLabel());
assertFalse(node8.isFor());
assertFalse(node8.isEmpty());
assertFalse(node8.isGetterDef());
assertEquals(16, node8.getType());
assertFalse(node8.isDefaultCase());
assertFalse(node8.isTry());
assertFalse(node8.isString());
assertFalse(node8.isDebugger());
assertEquals((-1), node8.getCharno());
assertFalse(node8.isFunction());
assertFalse(node8.isSwitch());
assertFalse(node8.isParamList());
assertFalse(node8.isArrayLit());
assertFalse(node8.isCall());
assertFalse(node8.isName());
assertFalse(node8.isVar());
assertFalse(node8.isNull());
assertFalse(node8.isComma());
assertFalse(node8.isGetProp());
assertFalse(node8.isAdd());
assertFalse(node8.isDo());
assertFalse(node8.isNew());
assertFalse(node8.isWhile());
assertFalse(node8.isReturn());
assertFalse(node8.isOr());
assertFalse(node8.isVoid());
assertFalse(node8.isExprResult());
assertFalse(node8.isTrue());
assertTrue(node8.hasMoreThanOneChild());
assertFalse(node8.isBreak());
assertFalse(node8.isDelProp());
assertFalse(node8.isGetElem());
assertFalse(node8.isCast());
assertFalse(node8.isNumber());
assertFalse(node8.isDec());
assertFalse(node8.isTypeOf());
assertFalse(node8.isAssign());
assertEquals((-1), node8.getSourcePosition());
assertEquals(3, node8.getChildCount());
assertFalse(node8.isAssignAdd());
assertFalse(node8.isScript());
assertFalse(node8.hasOneChild());
assertFalse(node8.isContinue());
assertFalse(node8.isObjectLit());
assertFalse(node8.isAnd());
assertFalse(node8.isNot());
assertFalse(node8.isLabel());
assertFalse(node8.isLabelName());
assertFalse(node8.isFalse());
assertFalse(node8.isThrow());
assertFalse(node8.isStringKey());
assertFalse(node8.isHook());
assertFalse(node8.isBlock());
assertFalse(node8.isInc());
assertFalse(node8.isThis());
assertFalse(node8.isSetterDef());
assertFalse(node8.isCase());
assertFalse(node8.isWith());
assertFalse(node8.isCatch());
assertFalse(node8.isIn());
assertFalse(node8.isRegExp());
assertTrue(node8.hasChildren());
assertFalse(node8.isNE());
assertFalse(node8.isInstanceOf());
assertFalse(node8.isIf());
assertEquals((-1), node8.getLineno());
assertNotNull(node8);
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node6));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node7));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node6));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node7));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node6));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node7));
assertFalse(node3.equals((Object)node7));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node6));
assertFalse(node3.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node6));
assertFalse(node5.equals((Object)node7));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node7));

Node.newString(38, (String) null);

[MASTER] 17:54:44.620 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_127_1629222884107/com/google/javascript/rhino/Node_127_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_127_1629222884107/com/google/javascript/rhino/Node_127_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:44.620 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:44.620 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:44.621 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 833
[MASTER] 17:54:44.622 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_127_1629222884107/com/google/javascript/rhino/Node_127_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:44 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSTypeRegistry;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_127_tmp__ESTest extends Node_127_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = new Node(23, 48, 2810);
23:       assertFalse(node0.isInstanceOf());
24:       assertFalse(node0.isGetProp());
25:       assertFalse(node0.isObjectLit());
26:       assertFalse(node0.isNot());
27:       assertFalse(node0.isWith());
28:       assertFalse(node0.isScript());
29:       assertFalse(node0.isThis());
30:       assertFalse(node0.isComma());
31:       assertFalse(node0.isThrow());
32:       assertFalse(node0.isHook());
33:       assertFalse(node0.isGetElem());
34:       assertFalse(node0.isAssign());
35:       assertFalse(node0.isExprResult());
36:       assertFalse(node0.isBreak());
37:       assertFalse(node0.isReturn());
38:       assertFalse(node0.isContinue());
39:       assertFalse(node0.isString());
40:       assertFalse(node0.isIn());
41:       assertFalse(node0.isDec());
42:       assertFalse(node0.isTypeOf());
43:       assertFalse(node0.isInc());
44:       assertFalse(node0.hasChildren());
45:       assertFalse(node0.isWhile());
46:       assertFalse(node0.isFalse());
47:       assertFalse(node0.isCast());
48:       assertFalse(node0.isFunction());
49:       assertFalse(node0.isDebugger());
50:       assertFalse(node0.isAnd());
51:       assertEquals(0, node0.getChildCount());
52:       assertFalse(node0.isCatch());
53:       assertFalse(node0.isDefaultCase());
54:       assertFalse(node0.isRegExp());
55:       assertFalse(node0.isSetterDef());
56:       assertFalse(node0.isTry());
57:       assertEquals(2810, node0.getCharno());
58:       assertFalse(node0.isCall());
59:       assertFalse(node0.isAdd());
60:       assertFalse(node0.isEmpty());
61:       assertFalse(node0.isDelProp());
62:       assertFalse(node0.isNE());
63:       assertFalse(node0.isNull());
64:       assertEquals(23, node0.getType());
65:       assertFalse(node0.isName());
66:       assertFalse(node0.isTrue());
67:       assertFalse(node0.isVoid());
68:       assertFalse(node0.isIf());
69:       assertFalse(node0.isLabel());
70:       assertFalse(node0.isOr());
71:       assertFalse(node0.hasMoreThanOneChild());
72:       assertEquals(199418, node0.getSourcePosition());
73:       assertFalse(node0.isCase());
74:       assertFalse(node0.isBlock());
75:       assertFalse(node0.isNew());
76:       assertFalse(node0.isDo());
77:       assertFalse(node0.isFor());
78:       assertFalse(node0.isAssignAdd());
79:       assertFalse(node0.hasOneChild());
80:       assertFalse(node0.isVar());
81:       assertEquals(48, node0.getLineno());
82:       assertFalse(node0.isArrayLit());
83:       assertFalse(node0.isNumber());
84:       assertFalse(node0.isGetterDef());
85:       assertFalse(node0.isStringKey());
86:       assertFalse(node0.isLabelName());
87:       assertFalse(node0.isSwitch());
88:       assertFalse(node0.isParamList());
89:       assertNotNull(node0);
90:       assertEquals(55, Node.INFERRED_FUNCTION);
91:       assertEquals(4095, Node.COLUMN_MASK);
92:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
93:       assertEquals(48, Node.DIRECTIVES);
94:       assertEquals(8, Node.FLAG_NO_THROWS);
95:       assertEquals(39, Node.EMPTY_BLOCK);
96:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
97:       assertEquals(43, Node.IS_CONSTANT_NAME);
98:       assertEquals(53, Node.INPUT_ID);
99:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
100:       assertEquals(36, Node.QUOTED_PROP);
101:       assertEquals(50, Node.FREE_CALL);
102:       assertEquals(40, Node.ORIGINALNAME_PROP);
103:       assertEquals(29, Node.JSDOC_INFO_PROP);
104:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
105:       assertEquals(47, Node.IS_DISPATCHER);
106:       assertEquals(30, Node.VAR_ARGS_NAME);
107:       assertEquals(2, Node.POST_FLAG);
108:       assertEquals(12, Node.COLUMN_BITS);
109:       assertEquals(46, Node.IS_NAMESPACE);
110:       assertEquals(57, Node.LAST_PROP);
111:       assertEquals(1, Node.DECR_FLAG);
112:       assertEquals(49, Node.DIRECT_EVAL);
113:       assertEquals(32, Node.INCRDECR_PROP);
114:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
115:       assertEquals(56, Node.CHANGE_TIME);
116:       assertEquals(15, Node.NO_SIDE_EFFECTS);
117:       assertEquals(54, Node.SLASH_V);
118:       assertEquals(52, Node.LENGTH);
119:       assertEquals(51, Node.STATIC_SOURCE_FILE);
120:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
121:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
122:       assertEquals(57, Node.REFLECTED_OBJECT);
123:       assertEquals(37, Node.OPT_ARG_NAME);
124:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
125:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
126:       
127:       boolean boolean0 = node0.isNE();
128:       assertFalse(node0.isInstanceOf());
129:       assertFalse(node0.isGetProp());
130:       assertFalse(node0.isObjectLit());
131:       assertFalse(node0.isNot());
132:       assertFalse(node0.isWith());
133:       assertFalse(node0.isScript());
134:       assertFalse(node0.isThis());
135:       assertFalse(node0.isComma());
136:       assertFalse(node0.isThrow());
137:       assertFalse(node0.isHook());
138:       assertFalse(node0.isGetElem());
139:       assertFalse(node0.isAssign());
140:       assertFalse(node0.isExprResult());
141:       assertFalse(node0.isBreak());
142:       assertFalse(node0.isReturn());
143:       assertFalse(node0.isContinue());
144:       assertFalse(node0.isString());
145:       assertFalse(node0.isIn());
146:       assertFalse(node0.isDec());
147:       assertFalse(node0.isTypeOf());
148:       assertFalse(node0.isInc());
149:       assertFalse(node0.hasChildren());
150:       assertFalse(node0.isWhile());
151:       assertFalse(node0.isFalse());
152:       assertFalse(node0.isCast());
153:       assertFalse(node0.isFunction());
154:       assertFalse(node0.isDebugger());
155:       assertFalse(node0.isAnd());
156:       assertEquals(0, node0.getChildCount());
157:       assertFalse(node0.isCatch());
158:       assertFalse(node0.isDefaultCase());
159:       assertFalse(node0.isRegExp());
160:       assertFalse(node0.isSetterDef());
161:       assertFalse(node0.isTry());
162:       assertEquals(2810, node0.getCharno());
163:       assertFalse(node0.isCall());
164:       assertFalse(node0.isAdd());
165:       assertFalse(node0.isEmpty());
166:       assertFalse(node0.isDelProp());
167:       assertFalse(node0.isNE());
168:       assertFalse(node0.isNull());
169:       assertEquals(23, node0.getType());
170:       assertFalse(node0.isName());
171:       assertFalse(node0.isTrue());
172:       assertFalse(node0.isVoid());
173:       assertFalse(node0.isIf());
174:       assertFalse(node0.isLabel());
175:       assertFalse(node0.isOr());
176:       assertFalse(node0.hasMoreThanOneChild());
177:       assertEquals(199418, node0.getSourcePosition());
178:       assertFalse(node0.isCase());
179:       assertFalse(node0.isBlock());
180:       assertFalse(node0.isNew());
181:       assertFalse(node0.isDo());
182:       assertFalse(node0.isFor());
183:       assertFalse(node0.isAssignAdd());
184:       assertFalse(node0.hasOneChild());
185:       assertFalse(node0.isVar());
186:       assertEquals(48, node0.getLineno());
187:       assertFalse(node0.isArrayLit());
188:       assertFalse(node0.isNumber());
189:       assertFalse(node0.isGetterDef());
190:       assertFalse(node0.isStringKey());
191:       assertFalse(node0.isLabelName());
192:       assertFalse(node0.isSwitch());
193:       assertFalse(node0.isParamList());
194:       assertFalse(boolean0);
195:       assertEquals(55, Node.INFERRED_FUNCTION);
196:       assertEquals(4095, Node.COLUMN_MASK);
197:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
198:       assertEquals(48, Node.DIRECTIVES);
199:       assertEquals(8, Node.FLAG_NO_THROWS);
200:       assertEquals(39, Node.EMPTY_BLOCK);
201:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
202:       assertEquals(43, Node.IS_CONSTANT_NAME);
203:       assertEquals(53, Node.INPUT_ID);
204:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
205:       assertEquals(36, Node.QUOTED_PROP);
206:       assertEquals(50, Node.FREE_CALL);
207:       assertEquals(40, Node.ORIGINALNAME_PROP);
208:       assertEquals(29, Node.JSDOC_INFO_PROP);
209:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
210:       assertEquals(47, Node.IS_DISPATCHER);
211:       assertEquals(30, Node.VAR_ARGS_NAME);
212:       assertEquals(2, Node.POST_FLAG);
213:       assertEquals(12, Node.COLUMN_BITS);
214:       assertEquals(46, Node.IS_NAMESPACE);
215:       assertEquals(57, Node.LAST_PROP);
216:       assertEquals(1, Node.DECR_FLAG);
217:       assertEquals(49, Node.DIRECT_EVAL);
218:       assertEquals(32, Node.INCRDECR_PROP);
219:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
220:       assertEquals(56, Node.CHANGE_TIME);
221:       assertEquals(15, Node.NO_SIDE_EFFECTS);
222:       assertEquals(54, Node.SLASH_V);
223:       assertEquals(52, Node.LENGTH);
224:       assertEquals(51, Node.STATIC_SOURCE_FILE);
225:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
226:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
227:       assertEquals(57, Node.REFLECTED_OBJECT);
228:       assertEquals(37, Node.OPT_ARG_NAME);
229:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
230:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
231:       
232:       boolean boolean1 = node0.isFromExterns();
233:       assertFalse(node0.isInstanceOf());
234:       assertFalse(node0.isGetProp());
235:       assertFalse(node0.isObjectLit());
236:       assertFalse(node0.isNot());
237:       assertFalse(node0.isWith());
238:       assertFalse(node0.isScript());
239:       assertFalse(node0.isThis());
240:       assertFalse(node0.isComma());
241:       assertFalse(node0.isThrow());
242:       assertFalse(node0.isHook());
243:       assertFalse(node0.isGetElem());
244:       assertFalse(node0.isAssign());
245:       assertFalse(node0.isExprResult());
246:       assertFalse(node0.isBreak());
247:       assertFalse(node0.isReturn());
248:       assertFalse(node0.isContinue());
249:       assertFalse(node0.isString());
250:       assertFalse(node0.isIn());
251:       assertFalse(node0.isDec());
252:       assertFalse(node0.isTypeOf());
253:       assertFalse(node0.isInc());
254:       assertFalse(node0.hasChildren());
255:       assertFalse(node0.isWhile());
256:       assertFalse(node0.isFalse());
257:       assertFalse(node0.isCast());
258:       assertFalse(node0.isFunction());
259:       assertFalse(node0.isDebugger());
260:       assertFalse(node0.isAnd());
261:       assertEquals(0, node0.getChildCount());
262:       assertFalse(node0.isCatch());
263:       assertFalse(node0.isDefaultCase());
264:       assertFalse(node0.isRegExp());
265:       assertFalse(node0.isSetterDef());
266:       assertFalse(node0.isTry());
267:       assertEquals(2810, node0.getCharno());
268:       assertFalse(node0.isCall());
269:       assertFalse(node0.isAdd());
270:       assertFalse(node0.isEmpty());
271:       assertFalse(node0.isDelProp());
272:       assertFalse(node0.isNE());
273:       assertFalse(node0.isNull());
274:       assertEquals(23, node0.getType());
275:       assertFalse(node0.isName());
276:       assertFalse(node0.isTrue());
277:       assertFalse(node0.isVoid());
278:       assertFalse(node0.isIf());
279:       assertFalse(node0.isLabel());
280:       assertFalse(node0.isOr());
281:       assertFalse(node0.hasMoreThanOneChild());
282:       assertEquals(199418, node0.getSourcePosition());
283:       assertFalse(node0.isCase());
284:       assertFalse(node0.isBlock());
285:       assertFalse(node0.isNew());
286:       assertFalse(node0.isDo());
287:       assertFalse(node0.isFor());
288:       assertFalse(node0.isAssignAdd());
289:       assertFalse(node0.hasOneChild());
290:       assertFalse(node0.isVar());
291:       assertEquals(48, node0.getLineno());
292:       assertFalse(node0.isArrayLit());
293:       assertFalse(node0.isNumber());
294:       assertFalse(node0.isGetterDef());
295:       assertFalse(node0.isStringKey());
296:       assertFalse(node0.isLabelName());
297:       assertFalse(node0.isSwitch());
298:       assertFalse(node0.isParamList());
299:       assertFalse(boolean1);
300:       assertTrue(boolean1 == boolean0);
301:       assertEquals(55, Node.INFERRED_FUNCTION);
302:       assertEquals(4095, Node.COLUMN_MASK);
303:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
304:       assertEquals(48, Node.DIRECTIVES);
305:       assertEquals(8, Node.FLAG_NO_THROWS);
306:       assertEquals(39, Node.EMPTY_BLOCK);
307:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
308:       assertEquals(43, Node.IS_CONSTANT_NAME);
309:       assertEquals(53, Node.INPUT_ID);
310:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
311:       assertEquals(36, Node.QUOTED_PROP);
312:       assertEquals(50, Node.FREE_CALL);
313:       assertEquals(40, Node.ORIGINALNAME_PROP);
314:       assertEquals(29, Node.JSDOC_INFO_PROP);
315:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
316:       assertEquals(47, Node.IS_DISPATCHER);
317:       assertEquals(30, Node.VAR_ARGS_NAME);
318:       assertEquals(2, Node.POST_FLAG);
319:       assertEquals(12, Node.COLUMN_BITS);
320:       assertEquals(46, Node.IS_NAMESPACE);
321:       assertEquals(57, Node.LAST_PROP);
322:       assertEquals(1, Node.DECR_FLAG);
323:       assertEquals(49, Node.DIRECT_EVAL);
324:       assertEquals(32, Node.INCRDECR_PROP);
325:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
326:       assertEquals(56, Node.CHANGE_TIME);
327:       assertEquals(15, Node.NO_SIDE_EFFECTS);
328:       assertEquals(54, Node.SLASH_V);
329:       assertEquals(52, Node.LENGTH);
330:       assertEquals(51, Node.STATIC_SOURCE_FILE);
331:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
332:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
333:       assertEquals(57, Node.REFLECTED_OBJECT);
334:       assertEquals(37, Node.OPT_ARG_NAME);
335:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
336:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
337:       
338:       node0.putBooleanProp((-410), true);
339:       assertFalse(node0.isInstanceOf());
340:       assertFalse(node0.isGetProp());
341:       assertFalse(node0.isObjectLit());
342:       assertFalse(node0.isNot());
343:       assertFalse(node0.isWith());
344:       assertFalse(node0.isScript());
345:       assertFalse(node0.isThis());
346:       assertFalse(node0.isComma());
347:       assertFalse(node0.isThrow());
348:       assertFalse(node0.isHook());
349:       assertFalse(node0.isGetElem());
350:       assertFalse(node0.isAssign());
351:       assertFalse(node0.isExprResult());
352:       assertFalse(node0.isBreak());
353:       assertFalse(node0.isReturn());
354:       assertFalse(node0.isContinue());
355:       assertFalse(node0.isString());
356:       assertFalse(node0.isIn());
357:       assertFalse(node0.isDec());
358:       assertFalse(node0.isTypeOf());
359:       assertFalse(node0.isInc());
360:       assertFalse(node0.hasChildren());
361:       assertFalse(node0.isWhile());
362:       assertFalse(node0.isFalse());
363:       assertFalse(node0.isCast());
364:       assertFalse(node0.isFunction());
365:       assertFalse(node0.isDebugger());
366:       assertFalse(node0.isAnd());
367:       assertEquals(0, node0.getChildCount());
368:       assertFalse(node0.isCatch());
369:       assertFalse(node0.isDefaultCase());
370:       assertFalse(node0.isRegExp());
371:       assertFalse(node0.isSetterDef());
372:       assertFalse(node0.isTry());
373:       assertEquals(2810, node0.getCharno());
374:       assertFalse(node0.isCall());
375:       assertFalse(node0.isAdd());
376:       assertFalse(node0.isEmpty());
377:       assertFalse(node0.isDelProp());
378:       assertFalse(node0.isNE());
379:       assertFalse(node0.isNull());
380:       assertEquals(23, node0.getType());
381:       assertFalse(node0.isName());
382:       assertFalse(node0.isTrue());
383:       assertFalse(node0.isVoid());
384:       assertFalse(node0.isIf());
385:       assertFalse(node0.isLabel());
386:       assertFalse(node0.isOr());
387:       assertFalse(node0.hasMoreThanOneChild());
388:       assertEquals(199418, node0.getSourcePosition());
389:       assertFalse(node0.isCase());
390:       assertFalse(node0.isBlock());
391:       assertFalse(node0.isNew());
392:       assertFalse(node0.isDo());
393:       assertFalse(node0.isFor());
394:       assertFalse(node0.isAssignAdd());
395:       assertFalse(node0.hasOneChild());
396:       assertFalse(node0.isVar());
397:       assertEquals(48, node0.getLineno());
398:       assertFalse(node0.isArrayLit());
399:       assertFalse(node0.isNumber());
400:       assertFalse(node0.isGetterDef());
401:       assertFalse(node0.isStringKey());
402:       assertFalse(node0.isLabelName());
403:       assertFalse(node0.isSwitch());
404:       assertFalse(node0.isParamList());
405:       assertEquals(55, Node.INFERRED_FUNCTION);
406:       assertEquals(4095, Node.COLUMN_MASK);
407:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
408:       assertEquals(48, Node.DIRECTIVES);
409:       assertEquals(8, Node.FLAG_NO_THROWS);
410:       assertEquals(39, Node.EMPTY_BLOCK);
411:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
412:       assertEquals(43, Node.IS_CONSTANT_NAME);
413:       assertEquals(53, Node.INPUT_ID);
414:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
415:       assertEquals(36, Node.QUOTED_PROP);
416:       assertEquals(50, Node.FREE_CALL);
417:       assertEquals(40, Node.ORIGINALNAME_PROP);
418:       assertEquals(29, Node.JSDOC_INFO_PROP);
419:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
420:       assertEquals(47, Node.IS_DISPATCHER);
421:       assertEquals(30, Node.VAR_ARGS_NAME);
422:       assertEquals(2, Node.POST_FLAG);
423:       assertEquals(12, Node.COLUMN_BITS);
424:       assertEquals(46, Node.IS_NAMESPACE);
425:       assertEquals(57, Node.LAST_PROP);
426:       assertEquals(1, Node.DECR_FLAG);
427:       assertEquals(49, Node.DIRECT_EVAL);
428:       assertEquals(32, Node.INCRDECR_PROP);
429:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
430:       assertEquals(56, Node.CHANGE_TIME);
431:       assertEquals(15, Node.NO_SIDE_EFFECTS);
432:       assertEquals(54, Node.SLASH_V);
433:       assertEquals(52, Node.LENGTH);
434:       assertEquals(51, Node.STATIC_SOURCE_FILE);
435:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
436:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
437:       assertEquals(57, Node.REFLECTED_OBJECT);
438:       assertEquals(37, Node.OPT_ARG_NAME);
439:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
440:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
441:       
442:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
443:       assertNotNull(simpleErrorReporter0);
444:       
445:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
446:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
447:       assertNotNull(jSTypeRegistry0);
448:       
449:       Node node1 = new Node(38);
450:       assertFalse(node1.isParamList());
451:       assertFalse(node1.isSetterDef());
452:       assertFalse(node1.isCatch());
453:       assertFalse(node1.isDefaultCase());
454:       assertEquals(0, node1.getChildCount());
455:       assertFalse(node1.isRegExp());
456:       assertFalse(node1.isVar());
457:       assertFalse(node1.isNew());
458:       assertFalse(node1.isVoid());
459:       assertFalse(node1.isAdd());
460:       assertFalse(node1.isCall());
461:       assertFalse(node1.isEmpty());
462:       assertFalse(node1.isIf());
463:       assertFalse(node1.isNull());
464:       assertFalse(node1.isNE());
465:       assertFalse(node1.isTrue());
466:       assertFalse(node1.isOr());
467:       assertFalse(node1.isAssignAdd());
468:       assertEquals((-1), node1.getLineno());
469:       assertFalse(node1.isCase());
470:       assertFalse(node1.isDo());
471:       assertFalse(node1.isFor());
472:       assertFalse(node1.hasMoreThanOneChild());
473:       assertFalse(node1.isLabel());
474:       assertFalse(node1.isBlock());
475:       assertFalse(node1.isTry());
476:       assertFalse(node1.isSwitch());
477:       assertFalse(node1.hasOneChild());
478:       assertFalse(node1.isScript());
479:       assertFalse(node1.isArrayLit());
480:       assertFalse(node1.isStringKey());
481:       assertFalse(node1.isLabelName());
482:       assertFalse(node1.isNumber());
483:       assertFalse(node1.isGetterDef());
484:       assertEquals((-1), node1.getCharno());
485:       assertFalse(node1.isInstanceOf());
486:       assertFalse(node1.isBreak());
487:       assertFalse(node1.isGetProp());
488:       assertFalse(node1.isFalse());
489:       assertFalse(node1.isThrow());
490:       assertFalse(node1.isWith());
491:       assertFalse(node1.isHook());
492:       assertEquals(38, node1.getType());
493:       assertFalse(node1.isThis());
494:       assertFalse(node1.isComma());
495:       assertFalse(node1.isInc());
496:       assertFalse(node1.isExprResult());
497:       assertTrue(node1.isName());
498:       assertFalse(node1.isIn());
499:       assertFalse(node1.isDelProp());
500:       assertFalse(node1.isGetElem());
501:       assertFalse(node1.isAssign());
502:       assertFalse(node1.isWhile());
503:       assertFalse(node1.isContinue());
504:       assertFalse(node1.isTypeOf());
505:       assertFalse(node1.isDec());
506:       assertFalse(node1.isReturn());
507:       assertFalse(node1.hasChildren());
508:       assertFalse(node1.isFunction());
509:       assertFalse(node1.isCast());
510:       assertFalse(node1.isNot());
511:       assertFalse(node1.isObjectLit());
512:       assertFalse(node1.isString());
513:       assertFalse(node1.isAnd());
514:       assertEquals((-1), node1.getSourcePosition());
515:       assertFalse(node1.isDebugger());
516:       assertNotNull(node1);
517:       assertFalse(node1.equals((Object)node0));
518:       assertEquals(48, Node.DIRECTIVES);
519:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
520:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
521:       assertEquals(36, Node.QUOTED_PROP);
522:       assertEquals(50, Node.FREE_CALL);
523:       assertEquals(8, Node.FLAG_NO_THROWS);
524:       assertEquals(39, Node.EMPTY_BLOCK);
525:       assertEquals(53, Node.INPUT_ID);
526:       assertEquals(55, Node.INFERRED_FUNCTION);
527:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
528:       assertEquals(43, Node.IS_CONSTANT_NAME);
529:       assertEquals(54, Node.SLASH_V);
530:       assertEquals(47, Node.IS_DISPATCHER);
531:       assertEquals(2, Node.POST_FLAG);
532:       assertEquals(30, Node.VAR_ARGS_NAME);
533:       assertEquals(40, Node.ORIGINALNAME_PROP);
534:       assertEquals(51, Node.STATIC_SOURCE_FILE);
535:       assertEquals(32, Node.INCRDECR_PROP);
536:       assertEquals(56, Node.CHANGE_TIME);
537:       assertEquals(12, Node.COLUMN_BITS);
538:       assertEquals(46, Node.IS_NAMESPACE);
539:       assertEquals(15, Node.NO_SIDE_EFFECTS);
540:       assertEquals(57, Node.LAST_PROP);
541:       assertEquals(1, Node.DECR_FLAG);
542:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
543:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
544:       assertEquals(29, Node.JSDOC_INFO_PROP);
545:       assertEquals(52, Node.LENGTH);
546:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
547:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
548:       assertEquals(57, Node.REFLECTED_OBJECT);
549:       assertEquals(49, Node.DIRECT_EVAL);
550:       assertEquals(37, Node.OPT_ARG_NAME);
551:       assertEquals(4095, Node.COLUMN_MASK);
552:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
553:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
554:       
555:       Node node2 = new Node(42, node1);
556:       assertFalse(node1.isParamList());
557:       assertFalse(node1.isSetterDef());
558:       assertFalse(node1.isCatch());
559:       assertFalse(node1.isDefaultCase());
560:       assertEquals(0, node1.getChildCount());
561:       assertFalse(node1.isRegExp());
562:       assertFalse(node1.isVar());
563:       assertFalse(node1.isNew());
564:       assertFalse(node1.isVoid());
565:       assertFalse(node1.isAdd());
566:       assertFalse(node1.isCall());
567:       assertFalse(node1.isEmpty());
568:       assertFalse(node1.isIf());
569:       assertFalse(node1.isNull());
570:       assertFalse(node1.isNE());
571:       assertFalse(node1.isTrue());
572:       assertFalse(node1.isOr());
573:       assertFalse(node1.isAssignAdd());
574:       assertEquals((-1), node1.getLineno());
575:       assertFalse(node1.isCase());
576:       assertFalse(node1.isDo());
577:       assertFalse(node1.isFor());
578:       assertFalse(node1.hasMoreThanOneChild());
579:       assertFalse(node1.isLabel());
580:       assertFalse(node1.isBlock());
581:       assertFalse(node1.isTry());
582:       assertFalse(node1.isSwitch());
583:       assertFalse(node1.hasOneChild());
584:       assertFalse(node1.isScript());
585:       assertFalse(node1.isArrayLit());
586:       assertFalse(node1.isStringKey());
587:       assertFalse(node1.isLabelName());
588:       assertFalse(node1.isNumber());
589:       assertFalse(node1.isGetterDef());
590:       assertEquals((-1), node1.getCharno());
591:       assertFalse(node1.isInstanceOf());
592:       assertFalse(node1.isBreak());
593:       assertFalse(node1.isGetProp());
594:       assertFalse(node1.isFalse());
595:       assertFalse(node1.isThrow());
596:       assertFalse(node1.isWith());
597:       assertFalse(node1.isHook());
598:       assertEquals(38, node1.getType());
599:       assertFalse(node1.isThis());
600:       assertFalse(node1.isComma());
601:       assertFalse(node1.isInc());
602:       assertFalse(node1.isExprResult());
603:       assertTrue(node1.isName());
604:       assertFalse(node1.isIn());
605:       assertFalse(node1.isDelProp());
606:       assertFalse(node1.isGetElem());
607:       assertFalse(node1.isAssign());
608:       assertFalse(node1.isWhile());
609:       assertFalse(node1.isContinue());
610:       assertFalse(node1.isTypeOf());
611:       assertFalse(node1.isDec());
612:       assertFalse(node1.isReturn());
613:       assertFalse(node1.hasChildren());
614:       assertFalse(node1.isFunction());
615:       assertFalse(node1.isCast());
616:       assertFalse(node1.isNot());
617:       assertFalse(node1.isObjectLit());
618:       assertFalse(node1.isString());
619:       assertFalse(node1.isAnd());
620:       assertEquals((-1), node1.getSourcePosition());
621:       assertFalse(node1.isDebugger());
622:       assertFalse(node2.isCase());
623:       assertFalse(node2.isString());
624:       assertFalse(node2.isInc());
625:       assertFalse(node2.isIn());
626:       assertFalse(node2.isSwitch());
627:       assertFalse(node2.isNE());
628:       assertFalse(node2.isGetterDef());
629:       assertEquals((-1), node2.getCharno());
630:       assertFalse(node2.isFalse());
631:       assertFalse(node2.isThrow());
632:       assertFalse(node2.isEmpty());
633:       assertFalse(node2.isArrayLit());
634:       assertFalse(node2.isFunction());
635:       assertFalse(node2.isWith());
636:       assertFalse(node2.isInstanceOf());
637:       assertFalse(node2.isCatch());
638:       assertFalse(node2.isScript());
639:       assertFalse(node2.isParamList());
640:       assertFalse(node2.isFor());
641:       assertFalse(node2.isIf());
642:       assertFalse(node2.isBlock());
643:       assertTrue(node2.hasChildren());
644:       assertFalse(node2.isTry());
645:       assertFalse(node2.isRegExp());
646:       assertFalse(node2.isHook());
647:       assertEquals(1, node2.getChildCount());
648:       assertFalse(node2.isDo());
649:       assertFalse(node2.isWhile());
650:       assertFalse(node2.isContinue());
651:       assertFalse(node2.hasMoreThanOneChild());
652:       assertEquals((-1), node2.getLineno());
653:       assertFalse(node2.isOr());
654:       assertFalse(node2.isAdd());
655:       assertFalse(node2.isNumber());
656:       assertEquals((-1), node2.getSourcePosition());
657:       assertFalse(node2.isStringKey());
658:       assertFalse(node2.isLabelName());
659:       assertFalse(node2.isCast());
660:       assertFalse(node2.isSetterDef());
661:       assertFalse(node2.isNew());
662:       assertFalse(node2.isAssignAdd());
663:       assertFalse(node2.isVar());
664:       assertFalse(node2.isLabel());
665:       assertFalse(node2.isNot());
666:       assertFalse(node2.isObjectLit());
667:       assertEquals(42, node2.getType());
668:       assertFalse(node2.isAnd());
669:       assertFalse(node2.isDefaultCase());
670:       assertTrue(node2.isThis());
671:       assertFalse(node2.isExprResult());
672:       assertFalse(node2.isVoid());
673:       assertFalse(node2.isNull());
674:       assertFalse(node2.isDebugger());
675:       assertFalse(node2.isTrue());
676:       assertFalse(node2.isName());
677:       assertFalse(node2.isGetElem());
678:       assertFalse(node2.isAssign());
679:       assertFalse(node2.isDelProp());
680:       assertFalse(node2.isCall());
681:       assertFalse(node2.isBreak());
682:       assertFalse(node2.isGetProp());
683:       assertFalse(node2.isTypeOf());
684:       assertFalse(node2.isDec());
685:       assertTrue(node2.hasOneChild());
686:       assertFalse(node2.isReturn());
687:       assertFalse(node2.isComma());
688:       assertNotNull(node2);
689:       assertFalse(node1.equals((Object)node0));
690:       assertFalse(node2.equals((Object)node0));
691:       assertFalse(node2.equals((Object)node1));
692:       assertEquals(48, Node.DIRECTIVES);
693:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
694:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
695:       assertEquals(36, Node.QUOTED_PROP);
696:       assertEquals(50, Node.FREE_CALL);
697:       assertEquals(8, Node.FLAG_NO_THROWS);
698:       assertEquals(39, Node.EMPTY_BLOCK);
699:       assertEquals(53, Node.INPUT_ID);
700:       assertEquals(55, Node.INFERRED_FUNCTION);
701:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
702:       assertEquals(43, Node.IS_CONSTANT_NAME);
703:       assertEquals(54, Node.SLASH_V);
704:       assertEquals(47, Node.IS_DISPATCHER);
705:       assertEquals(2, Node.POST_FLAG);
706:       assertEquals(30, Node.VAR_ARGS_NAME);
707:       assertEquals(40, Node.ORIGINALNAME_PROP);
708:       assertEquals(51, Node.STATIC_SOURCE_FILE);
709:       assertEquals(32, Node.INCRDECR_PROP);
710:       assertEquals(56, Node.CHANGE_TIME);
711:       assertEquals(12, Node.COLUMN_BITS);
712:       assertEquals(46, Node.IS_NAMESPACE);
713:       assertEquals(15, Node.NO_SIDE_EFFECTS);
714:       assertEquals(57, Node.LAST_PROP);
715:       assertEquals(1, Node.DECR_FLAG);
716:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
717:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
718:       assertEquals(29, Node.JSDOC_INFO_PROP);
719:       assertEquals(52, Node.LENGTH);
720:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
721:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
722:       assertEquals(57, Node.REFLECTED_OBJECT);
723:       assertEquals(49, Node.DIRECT_EVAL);
724:       assertEquals(37, Node.OPT_ARG_NAME);
725:       assertEquals(4095, Node.COLUMN_MASK);
726:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
727:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
728:       assertEquals(15, Node.NO_SIDE_EFFECTS);
729:       assertEquals(57, Node.LAST_PROP);
730:       assertEquals(30, Node.VAR_ARGS_NAME);
731:       assertEquals(49, Node.DIRECT_EVAL);
732:       assertEquals(1, Node.DECR_FLAG);
733:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
734:       assertEquals(12, Node.COLUMN_BITS);
735:       assertEquals(46, Node.IS_NAMESPACE);
736:       assertEquals(54, Node.SLASH_V);
737:       assertEquals(40, Node.ORIGINALNAME_PROP);
738:       assertEquals(37, Node.OPT_ARG_NAME);
739:       assertEquals(50, Node.FREE_CALL);
740:       assertEquals(32, Node.INCRDECR_PROP);
741:       assertEquals(51, Node.STATIC_SOURCE_FILE);
742:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
743:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
744:       assertEquals(36, Node.QUOTED_PROP);
745:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
746:       assertEquals(43, Node.IS_CONSTANT_NAME);
747:       assertEquals(48, Node.DIRECTIVES);
748:       assertEquals(4095, Node.COLUMN_MASK);
749:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
750:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
751:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
752:       assertEquals(47, Node.IS_DISPATCHER);
753:       assertEquals(2, Node.POST_FLAG);
754:       assertEquals(56, Node.CHANGE_TIME);
755:       assertEquals(57, Node.REFLECTED_OBJECT);
756:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
757:       assertEquals(52, Node.LENGTH);
758:       assertEquals(8, Node.FLAG_NO_THROWS);
759:       assertEquals(39, Node.EMPTY_BLOCK);
760:       assertEquals(53, Node.INPUT_ID);
761:       assertEquals(55, Node.INFERRED_FUNCTION);
762:       assertEquals(29, Node.JSDOC_INFO_PROP);
763:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
764:       
765:       Iterable<Node> iterable0 = node1.children();
766:       assertFalse(node1.isParamList());
767:       assertFalse(node1.isSetterDef());
768:       assertFalse(node1.isCatch());
769:       assertFalse(node1.isDefaultCase());
770:       assertEquals(0, node1.getChildCount());
771:       assertFalse(node1.isRegExp());
772:       assertFalse(node1.isVar());
773:       assertFalse(node1.isNew());
774:       assertFalse(node1.isVoid());
775:       assertFalse(node1.isAdd());
776:       assertFalse(node1.isCall());
777:       assertFalse(node1.isEmpty());
778:       assertFalse(node1.isIf());
779:       assertFalse(node1.isNull());
780:       assertFalse(node1.isNE());
781:       assertFalse(node1.isTrue());
782:       assertFalse(node1.isOr());
783:       assertFalse(node1.isAssignAdd());
784:       assertEquals((-1), node1.getLineno());
785:       assertFalse(node1.isCase());
786:       assertFalse(node1.isDo());
787:       assertFalse(node1.isFor());
788:       assertFalse(node1.hasMoreThanOneChild());
789:       assertFalse(node1.isLabel());
790:       assertFalse(node1.isBlock());
791:       assertFalse(node1.isTry());
792:       assertFalse(node1.isSwitch());
793:       assertFalse(node1.hasOneChild());
794:       assertFalse(node1.isScript());
795:       assertFalse(node1.isArrayLit());
796:       assertFalse(node1.isStringKey());
797:       assertFalse(node1.isLabelName());
798:       assertFalse(node1.isNumber());
799:       assertFalse(node1.isGetterDef());
800:       assertEquals((-1), node1.getCharno());
801:       assertFalse(node1.isInstanceOf());
802:       assertFalse(node1.isBreak());
803:       assertFalse(node1.isGetProp());
804:       assertFalse(node1.isFalse());
805:       assertFalse(node1.isThrow());
806:       assertFalse(node1.isWith());
807:       assertFalse(node1.isHook());
808:       assertEquals(38, node1.getType());
809:       assertFalse(node1.isThis());
810:       assertFalse(node1.isComma());
811:       assertFalse(node1.isInc());
812:       assertFalse(node1.isExprResult());
813:       assertTrue(node1.isName());
814:       assertFalse(node1.isIn());
815:       assertFalse(node1.isDelProp());
816:       assertFalse(node1.isGetElem());
817:       assertFalse(node1.isAssign());
818:       assertFalse(node1.isWhile());
819:       assertFalse(node1.isContinue());
820:       assertFalse(node1.isTypeOf());
821:       assertFalse(node1.isDec());
822:       assertFalse(node1.isReturn());
823:       assertFalse(node1.hasChildren());
824:       assertFalse(node1.isFunction());
825:       assertFalse(node1.isCast());
826:       assertFalse(node1.isNot());
827:       assertFalse(node1.isObjectLit());
828:       assertFalse(node1.isString());
829:       assertFalse(node1.isAnd());
830:       assertEquals((-1), node1.getSourcePosition());
831:       assertFalse(node1.isDebugger());
832:       assertNotNull(iterable0);
833:       assertFalse(iterable0.contains(node1));
834:       assertFalse(node1.equals((Object)node2));
835:       assertFalse(node1.equals((Object)node0));
836:       assertEquals(48, Node.DIRECTIVES);
837:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
838:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
839:       assertEquals(36, Node.QUOTED_PROP);
840:       assertEquals(50, Node.FREE_CALL);
841:       assertEquals(8, Node.FLAG_NO_THROWS);
842:       assertEquals(39, Node.EMPTY_BLOCK);
843:       assertEquals(53, Node.INPUT_ID);
844:       assertEquals(55, Node.INFERRED_FUNCTION);
845:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
846:       assertEquals(43, Node.IS_CONSTANT_NAME);
847:       assertEquals(54, Node.SLASH_V);
848:       assertEquals(47, Node.IS_DISPATCHER);
849:       assertEquals(2, Node.POST_FLAG);
850:       assertEquals(30, Node.VAR_ARGS_NAME);
851:       assertEquals(40, Node.ORIGINALNAME_PROP);
852:       assertEquals(51, Node.STATIC_SOURCE_FILE);
853:       assertEquals(32, Node.INCRDECR_PROP);
854:       assertEquals(56, Node.CHANGE_TIME);
855:       assertEquals(12, Node.COLUMN_BITS);
856:       assertEquals(46, Node.IS_NAMESPACE);
857:       assertEquals(15, Node.NO_SIDE_EFFECTS);
858:       assertEquals(57, Node.LAST_PROP);
859:       assertEquals(1, Node.DECR_FLAG);
860:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
861:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
862:       assertEquals(29, Node.JSDOC_INFO_PROP);
863:       assertEquals(52, Node.LENGTH);
864:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
865:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
866:       assertEquals(57, Node.REFLECTED_OBJECT);
867:       assertEquals(49, Node.DIRECT_EVAL);
868:       assertEquals(37, Node.OPT_ARG_NAME);
869:       assertEquals(4095, Node.COLUMN_MASK);
870:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
871:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
872:       assertNotSame(node1, node2);
873:       assertNotSame(node1, node0);
874:       
875:       boolean boolean2 = node1.isGetProp();
876:       assertFalse(node1.isParamList());
877:       assertFalse(node1.isSetterDef());
878:       assertFalse(node1.isCatch());
879:       assertFalse(node1.isDefaultCase());
880:       assertEquals(0, node1.getChildCount());
881:       assertFalse(node1.isRegExp());
882:       assertFalse(node1.isVar());
883:       assertFalse(node1.isNew());
884:       assertFalse(node1.isVoid());
885:       assertFalse(node1.isAdd());
886:       assertFalse(node1.isCall());
887:       assertFalse(node1.isEmpty());
888:       assertFalse(node1.isIf());
889:       assertFalse(node1.isNull());
890:       assertFalse(node1.isNE());
891:       assertFalse(node1.isTrue());
892:       assertFalse(node1.isOr());
893:       assertFalse(node1.isAssignAdd());
894:       assertEquals((-1), node1.getLineno());
895:       assertFalse(node1.isCase());
896:       assertFalse(node1.isDo());
897:       assertFalse(node1.isFor());
898:       assertFalse(node1.hasMoreThanOneChild());
899:       assertFalse(node1.isLabel());
900:       assertFalse(node1.isBlock());
901:       assertFalse(node1.isTry());
902:       assertFalse(node1.isSwitch());
903:       assertFalse(node1.hasOneChild());
904:       assertFalse(node1.isScript());
905:       assertFalse(node1.isArrayLit());
906:       assertFalse(node1.isStringKey());
907:       assertFalse(node1.isLabelName());
908:       assertFalse(node1.isNumber());
909:       assertFalse(node1.isGetterDef());
910:       assertEquals((-1), node1.getCharno());
911:       assertFalse(node1.isInstanceOf());
912:       assertFalse(node1.isBreak());
913:       assertFalse(node1.isGetProp());
914:       assertFalse(node1.isFalse());
915:       assertFalse(node1.isThrow());
916:       assertFalse(node1.isWith());
917:       assertFalse(node1.isHook());
918:       assertEquals(38, node1.getType());
919:       assertFalse(node1.isThis());
920:       assertFalse(node1.isComma());
921:       assertFalse(node1.isInc());
922:       assertFalse(node1.isExprResult());
923:       assertTrue(node1.isName());
924:       assertFalse(node1.isIn());
925:       assertFalse(node1.isDelProp());
926:       assertFalse(node1.isGetElem());
927:       assertFalse(node1.isAssign());
928:       assertFalse(node1.isWhile());
929:       assertFalse(node1.isContinue());
930:       assertFalse(node1.isTypeOf());
931:       assertFalse(node1.isDec());
932:       assertFalse(node1.isReturn());
933:       assertFalse(node1.hasChildren());
934:       assertFalse(node1.isFunction());
935:       assertFalse(node1.isCast());
936:       assertFalse(node1.isNot());
937:       assertFalse(node1.isObjectLit());
938:       assertFalse(node1.isString());
939:       assertFalse(node1.isAnd());
940:       assertEquals((-1), node1.getSourcePosition());
941:       assertFalse(node1.isDebugger());
942:       assertFalse(boolean2);
943:       assertFalse(node1.equals((Object)node2));
944:       assertFalse(node1.equals((Object)node0));
945:       assertTrue(boolean2 == boolean1);
946:       assertTrue(boolean2 == boolean0);
947:       assertEquals(48, Node.DIRECTIVES);
948:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
949:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
950:       assertEquals(36, Node.QUOTED_PROP);
951:       assertEquals(50, Node.FREE_CALL);
952:       assertEquals(8, Node.FLAG_NO_THROWS);
953:       assertEquals(39, Node.EMPTY_BLOCK);
954:       assertEquals(53, Node.INPUT_ID);
955:       assertEquals(55, Node.INFERRED_FUNCTION);
956:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
957:       assertEquals(43, Node.IS_CONSTANT_NAME);
958:       assertEquals(54, Node.SLASH_V);
959:       assertEquals(47, Node.IS_DISPATCHER);
960:       assertEquals(2, Node.POST_FLAG);
961:       assertEquals(30, Node.VAR_ARGS_NAME);
962:       assertEquals(40, Node.ORIGINALNAME_PROP);
963:       assertEquals(51, Node.STATIC_SOURCE_FILE);
964:       assertEquals(32, Node.INCRDECR_PROP);
965:       assertEquals(56, Node.CHANGE_TIME);
966:       assertEquals(12, Node.COLUMN_BITS);
967:       assertEquals(46, Node.IS_NAMESPACE);
968:       assertEquals(15, Node.NO_SIDE_EFFECTS);
969:       assertEquals(57, Node.LAST_PROP);
970:       assertEquals(1, Node.DECR_FLAG);
971:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
972:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
973:       assertEquals(29, Node.JSDOC_INFO_PROP);
974:       assertEquals(52, Node.LENGTH);
975:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
976:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
977:       assertEquals(57, Node.REFLECTED_OBJECT);
978:       assertEquals(49, Node.DIRECT_EVAL);
979:       assertEquals(37, Node.OPT_ARG_NAME);
980:       assertEquals(4095, Node.COLUMN_MASK);
981:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
982:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
983:       assertNotSame(node1, node2);
984:       assertNotSame(node1, node0);
985:       
986:       boolean boolean3 = node1.isParamList();
987:       assertFalse(node1.isParamList());
988:       assertFalse(node1.isSetterDef());
989:       assertFalse(node1.isCatch());
990:       assertFalse(node1.isDefaultCase());
991:       assertEquals(0, node1.getChildCount());
992:       assertFalse(node1.isRegExp());
993:       assertFalse(node1.isVar());
994:       assertFalse(node1.isNew());
995:       assertFalse(node1.isVoid());
996:       assertFalse(node1.isAdd());
997:       assertFalse(node1.isCall());
998:       assertFalse(node1.isEmpty());
999:       assertFalse(node1.isIf());
1000:       assertFalse(node1.isNull());
1001:       assertFalse(node1.isNE());
1002:       assertFalse(node1.isTrue());
1003:       assertFalse(node1.isOr());
1004:       assertFalse(node1.isAssignAdd());
1005:       assertEquals((-1), node1.getLineno());
1006:       assertFalse(node1.isCase());
1007:       assertFalse(node1.isDo());
1008:       assertFalse(node1.isFor());
1009:       assertFalse(node1.hasMoreThanOneChild());
1010:       assertFalse(node1.isLabel());
1011:       assertFalse(node1.isBlock());
1012:       assertFalse(node1.isTry());
1013:       assertFalse(node1.isSwitch());
1014:       assertFalse(node1.hasOneChild());
1015:       assertFalse(node1.isScript());
1016:       assertFalse(node1.isArrayLit());
1017:       assertFalse(node1.isStringKey());
1018:       assertFalse(node1.isLabelName());
1019:       assertFalse(node1.isNumber());
1020:       assertFalse(node1.isGetterDef());
1021:       assertEquals((-1), node1.getCharno());
1022:       assertFalse(node1.isInstanceOf());
1023:       assertFalse(node1.isBreak());
1024:       assertFalse(node1.isGetProp());
1025:       assertFalse(node1.isFalse());
1026:       assertFalse(node1.isThrow());
1027:       assertFalse(node1.isWith());
1028:       assertFalse(node1.isHook());
1029:       assertEquals(38, node1.getType());
1030:       assertFalse(node1.isThis());
1031:       assertFalse(node1.isComma());
1032:       assertFalse(node1.isInc());
1033:       assertFalse(node1.isExprResult());
1034:       assertTrue(node1.isName());
1035:       assertFalse(node1.isIn());
1036:       assertFalse(node1.isDelProp());
1037:       assertFalse(node1.isGetElem());
1038:       assertFalse(node1.isAssign());
1039:       assertFalse(node1.isWhile());
1040:       assertFalse(node1.isContinue());
1041:       assertFalse(node1.isTypeOf());
1042:       assertFalse(node1.isDec());
1043:       assertFalse(node1.isReturn());
1044:       assertFalse(node1.hasChildren());
1045:       assertFalse(node1.isFunction());
1046:       assertFalse(node1.isCast());
1047:       assertFalse(node1.isNot());
1048:       assertFalse(node1.isObjectLit());
1049:       assertFalse(node1.isString());
1050:       assertFalse(node1.isAnd());
1051:       assertEquals((-1), node1.getSourcePosition());
1052:       assertFalse(node1.isDebugger());
1053:       assertFalse(boolean3);
1054:       assertFalse(node1.equals((Object)node2));
1055:       assertFalse(node1.equals((Object)node0));
1056:       assertTrue(boolean3 == boolean2);
1057:       assertTrue(boolean3 == boolean0);
1058:       assertTrue(boolean3 == boolean1);
1059:       assertEquals(48, Node.DIRECTIVES);
1060:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1061:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1062:       assertEquals(36, Node.QUOTED_PROP);
1063:       assertEquals(50, Node.FREE_CALL);
1064:       assertEquals(8, Node.FLAG_NO_THROWS);
1065:       assertEquals(39, Node.EMPTY_BLOCK);
1066:       assertEquals(53, Node.INPUT_ID);
1067:       assertEquals(55, Node.INFERRED_FUNCTION);
1068:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1069:       assertEquals(43, Node.IS_CONSTANT_NAME);
1070:       assertEquals(54, Node.SLASH_V);
1071:       assertEquals(47, Node.IS_DISPATCHER);
1072:       assertEquals(2, Node.POST_FLAG);
1073:       assertEquals(30, Node.VAR_ARGS_NAME);
1074:       assertEquals(40, Node.ORIGINALNAME_PROP);
1075:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1076:       assertEquals(32, Node.INCRDECR_PROP);
1077:       assertEquals(56, Node.CHANGE_TIME);
1078:       assertEquals(12, Node.COLUMN_BITS);
1079:       assertEquals(46, Node.IS_NAMESPACE);
1080:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1081:       assertEquals(57, Node.LAST_PROP);
1082:       assertEquals(1, Node.DECR_FLAG);
1083:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1084:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1085:       assertEquals(29, Node.JSDOC_INFO_PROP);
1086:       assertEquals(52, Node.LENGTH);
1087:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1088:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1089:       assertEquals(57, Node.REFLECTED_OBJECT);
1090:       assertEquals(49, Node.DIRECT_EVAL);
1091:       assertEquals(37, Node.OPT_ARG_NAME);
1092:       assertEquals(4095, Node.COLUMN_MASK);
1093:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1094:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1095:       assertNotSame(node1, node2);
1096:       assertNotSame(node1, node0);
1097:       
1098:       boolean boolean4 = node2.isSetterDef();
1099:       assertFalse(node1.isParamList());
1100:       assertFalse(node1.isSetterDef());
1101:       assertFalse(node1.isCatch());
1102:       assertFalse(node1.isDefaultCase());
1103:       assertEquals(0, node1.getChildCount());
1104:       assertFalse(node1.isRegExp());
1105:       assertFalse(node1.isVar());
1106:       assertFalse(node1.isNew());
1107:       assertFalse(node1.isVoid());
1108:       assertFalse(node1.isAdd());
1109:       assertFalse(node1.isCall());
1110:       assertFalse(node1.isEmpty());
1111:       assertFalse(node1.isIf());
1112:       assertFalse(node1.isNull());
1113:       assertFalse(node1.isNE());
1114:       assertFalse(node1.isTrue());
1115:       assertFalse(node1.isOr());
1116:       assertFalse(node1.isAssignAdd());
1117:       assertEquals((-1), node1.getLineno());
1118:       assertFalse(node1.isCase());
1119:       assertFalse(node1.isDo());
1120:       assertFalse(node1.isFor());
1121:       assertFalse(node1.hasMoreThanOneChild());
1122:       assertFalse(node1.isLabel());
1123:       assertFalse(node1.isBlock());
1124:       assertFalse(node1.isTry());
1125:       assertFalse(node1.isSwitch());
1126:       assertFalse(node1.hasOneChild());
1127:       assertFalse(node1.isScript());
1128:       assertFalse(node1.isArrayLit());
1129:       assertFalse(node1.isStringKey());
1130:       assertFalse(node1.isLabelName());
1131:       assertFalse(node1.isNumber());
1132:       assertFalse(node1.isGetterDef());
1133:       assertEquals((-1), node1.getCharno());
1134:       assertFalse(node1.isInstanceOf());
1135:       assertFalse(node1.isBreak());
1136:       assertFalse(node1.isGetProp());
1137:       assertFalse(node1.isFalse());
1138:       assertFalse(node1.isThrow());
1139:       assertFalse(node1.isWith());
1140:       assertFalse(node1.isHook());
1141:       assertEquals(38, node1.getType());
1142:       assertFalse(node1.isThis());
1143:       assertFalse(node1.isComma());
1144:       assertFalse(node1.isInc());
1145:       assertFalse(node1.isExprResult());
1146:       assertTrue(node1.isName());
1147:       assertFalse(node1.isIn());
1148:       assertFalse(node1.isDelProp());
1149:       assertFalse(node1.isGetElem());
1150:       assertFalse(node1.isAssign());
1151:       assertFalse(node1.isWhile());
1152:       assertFalse(node1.isContinue());
1153:       assertFalse(node1.isTypeOf());
1154:       assertFalse(node1.isDec());
1155:       assertFalse(node1.isReturn());
1156:       assertFalse(node1.hasChildren());
1157:       assertFalse(node1.isFunction());
1158:       assertFalse(node1.isCast());
1159:       assertFalse(node1.isNot());
1160:       assertFalse(node1.isObjectLit());
1161:       assertFalse(node1.isString());
1162:       assertFalse(node1.isAnd());
1163:       assertEquals((-1), node1.getSourcePosition());
1164:       assertFalse(node1.isDebugger());
1165:       assertFalse(node2.isCase());
1166:       assertFalse(node2.isString());
1167:       assertFalse(node2.isInc());
1168:       assertFalse(node2.isIn());
1169:       assertFalse(node2.isSwitch());
1170:       assertFalse(node2.isNE());
1171:       assertFalse(node2.isGetterDef());
1172:       assertEquals((-1), node2.getCharno());
1173:       assertFalse(node2.isFalse());
1174:       assertFalse(node2.isThrow());
1175:       assertFalse(node2.isEmpty());
1176:       assertFalse(node2.isArrayLit());
1177:       assertFalse(node2.isFunction());
1178:       assertFalse(node2.isWith());
1179:       assertFalse(node2.isInstanceOf());
1180:       assertFalse(node2.isCatch());
1181:       assertFalse(node2.isScript());
1182:       assertFalse(node2.isParamList());
1183:       assertFalse(node2.isFor());
1184:       assertFalse(node2.isIf());
1185:       assertFalse(node2.isBlock());
1186:       assertTrue(node2.hasChildren());
1187:       assertFalse(node2.isTry());
1188:       assertFalse(node2.isRegExp());
1189:       assertFalse(node2.isHook());
1190:       assertEquals(1, node2.getChildCount());
1191:       assertFalse(node2.isDo());
1192:       assertFalse(node2.isWhile());
1193:       assertFalse(node2.isContinue());
1194:       assertFalse(node2.hasMoreThanOneChild());
1195:       assertEquals((-1), node2.getLineno());
1196:       assertFalse(node2.isOr());
1197:       assertFalse(node2.isAdd());
1198:       assertFalse(node2.isNumber());
1199:       assertEquals((-1), node2.getSourcePosition());
1200:       assertFalse(node2.isStringKey());
1201:       assertFalse(node2.isLabelName());
1202:       assertFalse(node2.isCast());
1203:       assertFalse(node2.isSetterDef());
1204:       assertFalse(node2.isNew());
1205:       assertFalse(node2.isAssignAdd());
1206:       assertFalse(node2.isVar());
1207:       assertFalse(node2.isLabel());
1208:       assertFalse(node2.isNot());
1209:       assertFalse(node2.isObjectLit());
1210:       assertEquals(42, node2.getType());
1211:       assertFalse(node2.isAnd());
1212:       assertFalse(node2.isDefaultCase());
1213:       assertTrue(node2.isThis());
1214:       assertFalse(node2.isExprResult());
1215:       assertFalse(node2.isVoid());
1216:       assertFalse(node2.isNull());
1217:       assertFalse(node2.isDebugger());
1218:       assertFalse(node2.isTrue());
1219:       assertFalse(node2.isName());
1220:       assertFalse(node2.isGetElem());
1221:       assertFalse(node2.isAssign());
1222:       assertFalse(node2.isDelProp());
1223:       assertFalse(node2.isCall());
1224:       assertFalse(node2.isBreak());
1225:       assertFalse(node2.isGetProp());
1226:       assertFalse(node2.isTypeOf());
1227:       assertFalse(node2.isDec());
1228:       assertTrue(node2.hasOneChild());
1229:       assertFalse(node2.isReturn());
1230:       assertFalse(node2.isComma());
1231:       assertFalse(boolean4);
1232:       assertFalse(node1.equals((Object)node2));
1233:       assertFalse(node1.equals((Object)node0));
1234:       assertFalse(node2.equals((Object)node0));
1235:       assertFalse(node2.equals((Object)node1));
1236:       assertTrue(boolean4 == boolean1);
1237:       assertTrue(boolean4 == boolean2);
1238:       assertTrue(boolean4 == boolean0);
1239:       assertTrue(boolean4 == boolean3);
1240:       assertEquals(48, Node.DIRECTIVES);
1241:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1242:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1243:       assertEquals(36, Node.QUOTED_PROP);
1244:       assertEquals(50, Node.FREE_CALL);
1245:       assertEquals(8, Node.FLAG_NO_THROWS);
1246:       assertEquals(39, Node.EMPTY_BLOCK);
1247:       assertEquals(53, Node.INPUT_ID);
1248:       assertEquals(55, Node.INFERRED_FUNCTION);
1249:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1250:       assertEquals(43, Node.IS_CONSTANT_NAME);
1251:       assertEquals(54, Node.SLASH_V);
1252:       assertEquals(47, Node.IS_DISPATCHER);
1253:       assertEquals(2, Node.POST_FLAG);
1254:       assertEquals(30, Node.VAR_ARGS_NAME);
1255:       assertEquals(40, Node.ORIGINALNAME_PROP);
1256:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1257:       assertEquals(32, Node.INCRDECR_PROP);
1258:       assertEquals(56, Node.CHANGE_TIME);
1259:       assertEquals(12, Node.COLUMN_BITS);
1260:       assertEquals(46, Node.IS_NAMESPACE);
1261:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1262:       assertEquals(57, Node.LAST_PROP);
1263:       assertEquals(1, Node.DECR_FLAG);
1264:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1265:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1266:       assertEquals(29, Node.JSDOC_INFO_PROP);
1267:       assertEquals(52, Node.LENGTH);
1268:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1269:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1270:       assertEquals(57, Node.REFLECTED_OBJECT);
1271:       assertEquals(49, Node.DIRECT_EVAL);
1272:       assertEquals(37, Node.OPT_ARG_NAME);
1273:       assertEquals(4095, Node.COLUMN_MASK);
1274:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1275:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1276:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1277:       assertEquals(57, Node.LAST_PROP);
1278:       assertEquals(30, Node.VAR_ARGS_NAME);
1279:       assertEquals(49, Node.DIRECT_EVAL);
1280:       assertEquals(1, Node.DECR_FLAG);
1281:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1282:       assertEquals(12, Node.COLUMN_BITS);
1283:       assertEquals(46, Node.IS_NAMESPACE);
1284:       assertEquals(54, Node.SLASH_V);
1285:       assertEquals(40, Node.ORIGINALNAME_PROP);
1286:       assertEquals(37, Node.OPT_ARG_NAME);
1287:       assertEquals(50, Node.FREE_CALL);
1288:       assertEquals(32, Node.INCRDECR_PROP);
1289:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1290:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1291:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1292:       assertEquals(36, Node.QUOTED_PROP);
1293:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1294:       assertEquals(43, Node.IS_CONSTANT_NAME);
1295:       assertEquals(48, Node.DIRECTIVES);
1296:       assertEquals(4095, Node.COLUMN_MASK);
1297:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1298:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1299:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1300:       assertEquals(47, Node.IS_DISPATCHER);
1301:       assertEquals(2, Node.POST_FLAG);
1302:       assertEquals(56, Node.CHANGE_TIME);
1303:       assertEquals(57, Node.REFLECTED_OBJECT);
1304:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1305:       assertEquals(52, Node.LENGTH);
1306:       assertEquals(8, Node.FLAG_NO_THROWS);
1307:       assertEquals(39, Node.EMPTY_BLOCK);
1308:       assertEquals(53, Node.INPUT_ID);
1309:       assertEquals(55, Node.INFERRED_FUNCTION);
1310:       assertEquals(29, Node.JSDOC_INFO_PROP);
1311:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1312:       assertNotSame(node1, node2);
1313:       assertNotSame(node1, node0);
1314:       assertNotSame(node2, node0);
1315:       assertNotSame(node2, node1);
1316:       
1317:       Node node3 = Node.newString("Object#Key");
1318:       assertFalse(node3.isGetterDef());
1319:       assertFalse(node3.isIn());
1320:       assertFalse(node3.isArrayLit());
1321:       assertFalse(node3.isNE());
1322:       assertFalse(node3.isDelProp());
1323:       assertFalse(node3.isSwitch());
1324:       assertFalse(node3.isIf());
1325:       assertFalse(node3.isInc());
1326:       assertFalse(node3.isTrue());
1327:       assertFalse(node3.isFunction());
1328:       assertFalse(node3.isFalse());
1329:       assertEquals(40, node3.getType());
1330:       assertFalse(node3.isThrow());
1331:       assertFalse(node3.isEmpty());
1332:       assertFalse(node3.isDefaultCase());
1333:       assertFalse(node3.isComma());
1334:       assertFalse(node3.isGetProp());
1335:       assertFalse(node3.isObjectLit());
1336:       assertFalse(node3.isName());
1337:       assertFalse(node3.isNot());
1338:       assertFalse(node3.isCall());
1339:       assertFalse(node3.isBreak());
1340:       assertFalse(node3.isNull());
1341:       assertFalse(node3.isAnd());
1342:       assertFalse(node3.isVoid());
1343:       assertFalse(node3.isDebugger());
1344:       assertFalse(node3.isExprResult());
1345:       assertFalse(node3.isAssign());
1346:       assertFalse(node3.hasChildren());
1347:       assertFalse(node3.isWhile());
1348:       assertFalse(node3.isOr());
1349:       assertFalse(node3.isReturn());
1350:       assertEquals((-1), node3.getLineno());
1351:       assertFalse(node3.isLabel());
1352:       assertFalse(node3.isNumber());
1353:       assertFalse(node3.isTypeOf());
1354:       assertFalse(node3.isDec());
1355:       assertEquals((-1), node3.getSourcePosition());
1356:       assertFalse(node3.isContinue());
1357:       assertFalse(node3.hasMoreThanOneChild());
1358:       assertFalse(node3.isGetElem());
1359:       assertFalse(node3.isLabelName());
1360:       assertFalse(node3.isAdd());
1361:       assertFalse(node3.isNew());
1362:       assertFalse(node3.isCast());
1363:       assertFalse(node3.isDo());
1364:       assertFalse(node3.isVar());
1365:       assertFalse(node3.isAssignAdd());
1366:       assertFalse(node3.isSetterDef());
1367:       assertFalse(node3.isThis());
1368:       assertFalse(node3.isInstanceOf());
1369:       assertFalse(node3.isCatch());
1370:       assertEquals(0, node3.getChildCount());
1371:       assertFalse(node3.isStringKey());
1372:       assertFalse(node3.isParamList());
1373:       assertFalse(node3.isBlock());
1374:       assertTrue(node3.isString());
1375:       assertFalse(node3.isTry());
1376:       assertEquals((-1), node3.getCharno());
1377:       assertFalse(node3.isRegExp());
1378:       assertFalse(node3.isScript());
1379:       assertFalse(node3.isWith());
1380:       assertFalse(node3.isCase());
1381:       assertFalse(node3.isFor());
1382:       assertFalse(node3.hasOneChild());
1383:       assertFalse(node3.isHook());
1384:       assertNotNull(node3);
1385:       assertFalse(node3.equals((Object)node0));
1386:       assertFalse(node3.equals((Object)node1));
1387:       assertFalse(node3.equals((Object)node2));
1388:       assertEquals(32, Node.INCRDECR_PROP);
1389:       assertEquals(12, Node.COLUMN_BITS);
1390:       assertEquals(46, Node.IS_NAMESPACE);
1391:       assertEquals(37, Node.OPT_ARG_NAME);
1392:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1393:       assertEquals(49, Node.DIRECT_EVAL);
1394:       assertEquals(1, Node.DECR_FLAG);
1395:       assertEquals(57, Node.LAST_PROP);
1396:       assertEquals(47, Node.IS_DISPATCHER);
1397:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1398:       assertEquals(2, Node.POST_FLAG);
1399:       assertEquals(30, Node.VAR_ARGS_NAME);
1400:       assertEquals(54, Node.SLASH_V);
1401:       assertEquals(40, Node.ORIGINALNAME_PROP);
1402:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1403:       assertEquals(43, Node.IS_CONSTANT_NAME);
1404:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1405:       assertEquals(50, Node.FREE_CALL);
1406:       assertEquals(55, Node.INFERRED_FUNCTION);
1407:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1408:       assertEquals(39, Node.EMPTY_BLOCK);
1409:       assertEquals(48, Node.DIRECTIVES);
1410:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1411:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1412:       assertEquals(4095, Node.COLUMN_MASK);
1413:       assertEquals(52, Node.LENGTH);
1414:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1415:       assertEquals(53, Node.INPUT_ID);
1416:       assertEquals(57, Node.REFLECTED_OBJECT);
1417:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1418:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1419:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1420:       assertEquals(56, Node.CHANGE_TIME);
1421:       assertEquals(29, Node.JSDOC_INFO_PROP);
1422:       assertEquals(8, Node.FLAG_NO_THROWS);
1423:       assertEquals(36, Node.QUOTED_PROP);
1424:       
1425:       boolean boolean5 = node0.isUnscopedQualifiedName();
1426:       assertFalse(node0.isInstanceOf());
1427:       assertFalse(node0.isGetProp());
1428:       assertFalse(node0.isObjectLit());
1429:       assertFalse(node0.isNot());
1430:       assertFalse(node0.isWith());
1431:       assertFalse(node0.isScript());
1432:       assertFalse(node0.isThis());
1433:       assertFalse(node0.isComma());
1434:       assertFalse(node0.isThrow());
1435:       assertFalse(node0.isHook());
1436:       assertFalse(node0.isGetElem());
1437:       assertFalse(node0.isAssign());
1438:       assertFalse(node0.isExprResult());
1439:       assertFalse(node0.isBreak());
1440:       assertFalse(node0.isReturn());
1441:       assertFalse(node0.isContinue());
1442:       assertFalse(node0.isString());
1443:       assertFalse(node0.isIn());
1444:       assertFalse(node0.isDec());
1445:       assertFalse(node0.isTypeOf());
1446:       assertFalse(node0.isInc());
1447:       assertFalse(node0.hasChildren());
1448:       assertFalse(node0.isWhile());
1449:       assertFalse(node0.isFalse());
1450:       assertFalse(node0.isCast());
1451:       assertFalse(node0.isFunction());
1452:       assertFalse(node0.isDebugger());
1453:       assertFalse(node0.isAnd());
1454:       assertEquals(0, node0.getChildCount());
1455:       assertFalse(node0.isCatch());
1456:       assertFalse(node0.isDefaultCase());
1457:       assertFalse(node0.isRegExp());
1458:       assertFalse(node0.isSetterDef());
1459:       assertFalse(node0.isTry());
1460:       assertEquals(2810, node0.getCharno());
1461:       assertFalse(node0.isCall());
1462:       assertFalse(node0.isAdd());
1463:       assertFalse(node0.isEmpty());
1464:       assertFalse(node0.isDelProp());
1465:       assertFalse(node0.isNE());
1466:       assertFalse(node0.isNull());
1467:       assertEquals(23, node0.getType());
1468:       assertFalse(node0.isName());
1469:       assertFalse(node0.isTrue());
1470:       assertFalse(node0.isVoid());
1471:       assertFalse(node0.isIf());
1472:       assertFalse(node0.isLabel());
1473:       assertFalse(node0.isOr());
1474:       assertFalse(node0.hasMoreThanOneChild());
1475:       assertEquals(199418, node0.getSourcePosition());
1476:       assertFalse(node0.isCase());
1477:       assertFalse(node0.isBlock());
1478:       assertFalse(node0.isNew());
1479:       assertFalse(node0.isDo());
1480:       assertFalse(node0.isFor());
1481:       assertFalse(node0.isAssignAdd());
1482:       assertFalse(node0.hasOneChild());
1483:       assertFalse(node0.isVar());
1484:       assertEquals(48, node0.getLineno());
1485:       assertFalse(node0.isArrayLit());
1486:       assertFalse(node0.isNumber());
1487:       assertFalse(node0.isGetterDef());
1488:       assertFalse(node0.isStringKey());
1489:       assertFalse(node0.isLabelName());
1490:       assertFalse(node0.isSwitch());
1491:       assertFalse(node0.isParamList());
1492:       assertFalse(boolean5);
1493:       assertFalse(node0.equals((Object)node3));
1494:       assertFalse(node0.equals((Object)node1));
1495:       assertFalse(node0.equals((Object)node2));
1496:       assertTrue(boolean5 == boolean1);
1497:       assertTrue(boolean5 == boolean0);
1498:       assertTrue(boolean5 == boolean3);
1499:       assertTrue(boolean5 == boolean4);
1500:       assertTrue(boolean5 == boolean2);
1501:       assertEquals(55, Node.INFERRED_FUNCTION);
1502:       assertEquals(4095, Node.COLUMN_MASK);
1503:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1504:       assertEquals(48, Node.DIRECTIVES);
1505:       assertEquals(8, Node.FLAG_NO_THROWS);
1506:       assertEquals(39, Node.EMPTY_BLOCK);
1507:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1508:       assertEquals(43, Node.IS_CONSTANT_NAME);
1509:       assertEquals(53, Node.INPUT_ID);
1510:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1511:       assertEquals(36, Node.QUOTED_PROP);
1512:       assertEquals(50, Node.FREE_CALL);
1513:       assertEquals(40, Node.ORIGINALNAME_PROP);
1514:       assertEquals(29, Node.JSDOC_INFO_PROP);
1515:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1516:       assertEquals(47, Node.IS_DISPATCHER);
1517:       assertEquals(30, Node.VAR_ARGS_NAME);
1518:       assertEquals(2, Node.POST_FLAG);
1519:       assertEquals(12, Node.COLUMN_BITS);
1520:       assertEquals(46, Node.IS_NAMESPACE);
1521:       assertEquals(57, Node.LAST_PROP);
1522:       assertEquals(1, Node.DECR_FLAG);
1523:       assertEquals(49, Node.DIRECT_EVAL);
1524:       assertEquals(32, Node.INCRDECR_PROP);
1525:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1526:       assertEquals(56, Node.CHANGE_TIME);
1527:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1528:       assertEquals(54, Node.SLASH_V);
1529:       assertEquals(52, Node.LENGTH);
1530:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1531:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1532:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1533:       assertEquals(57, Node.REFLECTED_OBJECT);
1534:       assertEquals(37, Node.OPT_ARG_NAME);
1535:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1536:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1537:       assertNotSame(node0, node1);
1538:       assertNotSame(node0, node2);
1539:       
1540:       boolean boolean6 = node1.isWith();
1541:       assertFalse(node1.isParamList());
1542:       assertFalse(node1.isSetterDef());
1543:       assertFalse(node1.isCatch());
1544:       assertFalse(node1.isDefaultCase());
1545:       assertEquals(0, node1.getChildCount());
1546:       assertFalse(node1.isRegExp());
1547:       assertFalse(node1.isVar());
1548:       assertFalse(node1.isNew());
1549:       assertFalse(node1.isVoid());
1550:       assertFalse(node1.isAdd());
1551:       assertFalse(node1.isCall());
1552:       assertFalse(node1.isEmpty());
1553:       assertFalse(node1.isIf());
1554:       assertFalse(node1.isNull());
1555:       assertFalse(node1.isNE());
1556:       assertFalse(node1.isTrue());
1557:       assertFalse(node1.isOr());
1558:       assertFalse(node1.isAssignAdd());
1559:       assertEquals((-1), node1.getLineno());
1560:       assertFalse(node1.isCase());
1561:       assertFalse(node1.isDo());
1562:       assertFalse(node1.isFor());
1563:       assertFalse(node1.hasMoreThanOneChild());
1564:       assertFalse(node1.isLabel());
1565:       assertFalse(node1.isBlock());
1566:       assertFalse(node1.isTry());
1567:       assertFalse(node1.isSwitch());
1568:       assertFalse(node1.hasOneChild());
1569:       assertFalse(node1.isScript());
1570:       assertFalse(node1.isArrayLit());
1571:       assertFalse(node1.isStringKey());
1572:       assertFalse(node1.isLabelName());
1573:       assertFalse(node1.isNumber());
1574:       assertFalse(node1.isGetterDef());
1575:       assertEquals((-1), node1.getCharno());
1576:       assertFalse(node1.isInstanceOf());
1577:       assertFalse(node1.isBreak());
1578:       assertFalse(node1.isGetProp());
1579:       assertFalse(node1.isFalse());
1580:       assertFalse(node1.isThrow());
1581:       assertFalse(node1.isWith());
1582:       assertFalse(node1.isHook());
1583:       assertEquals(38, node1.getType());
1584:       assertFalse(node1.isThis());
1585:       assertFalse(node1.isComma());
1586:       assertFalse(node1.isInc());
1587:       assertFalse(node1.isExprResult());
1588:       assertTrue(node1.isName());
1589:       assertFalse(node1.isIn());
1590:       assertFalse(node1.isDelProp());
1591:       assertFalse(node1.isGetElem());
1592:       assertFalse(node1.isAssign());
1593:       assertFalse(node1.isWhile());
1594:       assertFalse(node1.isContinue());
1595:       assertFalse(node1.isTypeOf());
1596:       assertFalse(node1.isDec());
1597:       assertFalse(node1.isReturn());
1598:       assertFalse(node1.hasChildren());
1599:       assertFalse(node1.isFunction());
1600:       assertFalse(node1.isCast());
1601:       assertFalse(node1.isNot());
1602:       assertFalse(node1.isObjectLit());
1603:       assertFalse(node1.isString());
1604:       assertFalse(node1.isAnd());
1605:       assertEquals((-1), node1.getSourcePosition());
1606:       assertFalse(node1.isDebugger());
1607:       assertFalse(boolean6);
1608:       assertFalse(node1.equals((Object)node3));
1609:       assertFalse(node1.equals((Object)node2));
1610:       assertFalse(node1.equals((Object)node0));
1611:       assertTrue(boolean6 == boolean5);
1612:       assertTrue(boolean6 == boolean2);
1613:       assertTrue(boolean6 == boolean0);
1614:       assertTrue(boolean6 == boolean3);
1615:       assertTrue(boolean6 == boolean1);
1616:       assertTrue(boolean6 == boolean4);
1617:       assertEquals(48, Node.DIRECTIVES);
1618:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1619:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1620:       assertEquals(36, Node.QUOTED_PROP);
1621:       assertEquals(50, Node.FREE_CALL);
1622:       assertEquals(8, Node.FLAG_NO_THROWS);
1623:       assertEquals(39, Node.EMPTY_BLOCK);
1624:       assertEquals(53, Node.INPUT_ID);
1625:       assertEquals(55, Node.INFERRED_FUNCTION);
1626:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1627:       assertEquals(43, Node.IS_CONSTANT_NAME);
1628:       assertEquals(54, Node.SLASH_V);
1629:       assertEquals(47, Node.IS_DISPATCHER);
1630:       assertEquals(2, Node.POST_FLAG);
1631:       assertEquals(30, Node.VAR_ARGS_NAME);
1632:       assertEquals(40, Node.ORIGINALNAME_PROP);
1633:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1634:       assertEquals(32, Node.INCRDECR_PROP);
1635:       assertEquals(56, Node.CHANGE_TIME);
1636:       assertEquals(12, Node.COLUMN_BITS);
1637:       assertEquals(46, Node.IS_NAMESPACE);
1638:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1639:       assertEquals(57, Node.LAST_PROP);
1640:       assertEquals(1, Node.DECR_FLAG);
1641:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1642:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1643:       assertEquals(29, Node.JSDOC_INFO_PROP);
1644:       assertEquals(52, Node.LENGTH);
1645:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1646:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1647:       assertEquals(57, Node.REFLECTED_OBJECT);
1648:       assertEquals(49, Node.DIRECT_EVAL);
1649:       assertEquals(37, Node.OPT_ARG_NAME);
1650:       assertEquals(4095, Node.COLUMN_MASK);
1651:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1652:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1653:       assertNotSame(node1, node2);
1654:       assertNotSame(node1, node0);
1655:       
1656:       node1.removeProp(87);
1657:       assertFalse(node1.isParamList());
1658:       assertFalse(node1.isSetterDef());
1659:       assertFalse(node1.isCatch());
1660:       assertFalse(node1.isDefaultCase());
1661:       assertEquals(0, node1.getChildCount());
1662:       assertFalse(node1.isRegExp());
1663:       assertFalse(node1.isVar());
1664:       assertFalse(node1.isNew());
1665:       assertFalse(node1.isVoid());
1666:       assertFalse(node1.isAdd());
1667:       assertFalse(node1.isCall());
1668:       assertFalse(node1.isEmpty());
1669:       assertFalse(node1.isIf());
1670:       assertFalse(node1.isNull());
1671:       assertFalse(node1.isNE());
1672:       assertFalse(node1.isTrue());
1673:       assertFalse(node1.isOr());
1674:       assertFalse(node1.isAssignAdd());
1675:       assertEquals((-1), node1.getLineno());
1676:       assertFalse(node1.isCase());
1677:       assertFalse(node1.isDo());
1678:       assertFalse(node1.isFor());
1679:       assertFalse(node1.hasMoreThanOneChild());
1680:       assertFalse(node1.isLabel());
1681:       assertFalse(node1.isBlock());
1682:       assertFalse(node1.isTry());
1683:       assertFalse(node1.isSwitch());
1684:       assertFalse(node1.hasOneChild());
1685:       assertFalse(node1.isScript());
1686:       assertFalse(node1.isArrayLit());
1687:       assertFalse(node1.isStringKey());
1688:       assertFalse(node1.isLabelName());
1689:       assertFalse(node1.isNumber());
1690:       assertFalse(node1.isGetterDef());
1691:       assertEquals((-1), node1.getCharno());
1692:       assertFalse(node1.isInstanceOf());
1693:       assertFalse(node1.isBreak());
1694:       assertFalse(node1.isGetProp());
1695:       assertFalse(node1.isFalse());
1696:       assertFalse(node1.isThrow());
1697:       assertFalse(node1.isWith());
1698:       assertFalse(node1.isHook());
1699:       assertEquals(38, node1.getType());
1700:       assertFalse(node1.isThis());
1701:       assertFalse(node1.isComma());
1702:       assertFalse(node1.isInc());
1703:       assertFalse(node1.isExprResult());
1704:       assertTrue(node1.isName());
1705:       assertFalse(node1.isIn());
1706:       assertFalse(node1.isDelProp());
1707:       assertFalse(node1.isGetElem());
1708:       assertFalse(node1.isAssign());
1709:       assertFalse(node1.isWhile());
1710:       assertFalse(node1.isContinue());
1711:       assertFalse(node1.isTypeOf());
1712:       assertFalse(node1.isDec());
1713:       assertFalse(node1.isReturn());
1714:       assertFalse(node1.hasChildren());
1715:       assertFalse(node1.isFunction());
1716:       assertFalse(node1.isCast());
1717:       assertFalse(node1.isNot());
1718:       assertFalse(node1.isObjectLit());
1719:       assertFalse(node1.isString());
1720:       assertFalse(node1.isAnd());
1721:       assertEquals((-1), node1.getSourcePosition());
1722:       assertFalse(node1.isDebugger());
1723:       assertFalse(node1.equals((Object)node3));
1724:       assertFalse(node1.equals((Object)node2));
1725:       assertFalse(node1.equals((Object)node0));
1726:       assertEquals(48, Node.DIRECTIVES);
1727:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1728:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1729:       assertEquals(36, Node.QUOTED_PROP);
1730:       assertEquals(50, Node.FREE_CALL);
1731:       assertEquals(8, Node.FLAG_NO_THROWS);
1732:       assertEquals(39, Node.EMPTY_BLOCK);
1733:       assertEquals(53, Node.INPUT_ID);
1734:       assertEquals(55, Node.INFERRED_FUNCTION);
1735:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1736:       assertEquals(43, Node.IS_CONSTANT_NAME);
1737:       assertEquals(54, Node.SLASH_V);
1738:       assertEquals(47, Node.IS_DISPATCHER);
1739:       assertEquals(2, Node.POST_FLAG);
1740:       assertEquals(30, Node.VAR_ARGS_NAME);
1741:       assertEquals(40, Node.ORIGINALNAME_PROP);
1742:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1743:       assertEquals(32, Node.INCRDECR_PROP);
1744:       assertEquals(56, Node.CHANGE_TIME);
1745:       assertEquals(12, Node.COLUMN_BITS);
1746:       assertEquals(46, Node.IS_NAMESPACE);
1747:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1748:       assertEquals(57, Node.LAST_PROP);
1749:       assertEquals(1, Node.DECR_FLAG);
1750:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1751:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1752:       assertEquals(29, Node.JSDOC_INFO_PROP);
1753:       assertEquals(52, Node.LENGTH);
1754:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1755:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1756:       assertEquals(57, Node.REFLECTED_OBJECT);
1757:       assertEquals(49, Node.DIRECT_EVAL);
1758:       assertEquals(37, Node.OPT_ARG_NAME);
1759:       assertEquals(4095, Node.COLUMN_MASK);
1760:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1761:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1762:       assertNotSame(node1, node2);
1763:       assertNotSame(node1, node0);
1764:       
1765:       String string0 = node1.getSourceFileName();
1766:       assertFalse(node1.isParamList());
1767:       assertFalse(node1.isSetterDef());
1768:       assertFalse(node1.isCatch());
1769:       assertFalse(node1.isDefaultCase());
1770:       assertEquals(0, node1.getChildCount());
1771:       assertFalse(node1.isRegExp());
1772:       assertFalse(node1.isVar());
1773:       assertFalse(node1.isNew());
1774:       assertFalse(node1.isVoid());
1775:       assertFalse(node1.isAdd());
1776:       assertFalse(node1.isCall());
1777:       assertFalse(node1.isEmpty());
1778:       assertFalse(node1.isIf());
1779:       assertFalse(node1.isNull());
1780:       assertFalse(node1.isNE());
1781:       assertFalse(node1.isTrue());
1782:       assertFalse(node1.isOr());
1783:       assertFalse(node1.isAssignAdd());
1784:       assertEquals((-1), node1.getLineno());
1785:       assertFalse(node1.isCase());
1786:       assertFalse(node1.isDo());
1787:       assertFalse(node1.isFor());
1788:       assertFalse(node1.hasMoreThanOneChild());
1789:       assertFalse(node1.isLabel());
1790:       assertFalse(node1.isBlock());
1791:       assertFalse(node1.isTry());
1792:       assertFalse(node1.isSwitch());
1793:       assertFalse(node1.hasOneChild());
1794:       assertFalse(node1.isScript());
1795:       assertFalse(node1.isArrayLit());
1796:       assertFalse(node1.isStringKey());
1797:       assertFalse(node1.isLabelName());
1798:       assertFalse(node1.isNumber());
1799:       assertFalse(node1.isGetterDef());
1800:       assertEquals((-1), node1.getCharno());
1801:       assertFalse(node1.isInstanceOf());
1802:       assertFalse(node1.isBreak());
1803:       assertFalse(node1.isGetProp());
1804:       assertFalse(node1.isFalse());
1805:       assertFalse(node1.isThrow());
1806:       assertFalse(node1.isWith());
1807:       assertFalse(node1.isHook());
1808:       assertEquals(38, node1.getType());
1809:       assertFalse(node1.isThis());
1810:       assertFalse(node1.isComma());
1811:       assertFalse(node1.isInc());
1812:       assertFalse(node1.isExprResult());
1813:       assertTrue(node1.isName());
1814:       assertFalse(node1.isIn());
1815:       assertFalse(node1.isDelProp());
1816:       assertFalse(node1.isGetElem());
1817:       assertFalse(node1.isAssign());
1818:       assertFalse(node1.isWhile());
1819:       assertFalse(node1.isContinue());
1820:       assertFalse(node1.isTypeOf());
1821:       assertFalse(node1.isDec());
1822:       assertFalse(node1.isReturn());
1823:       assertFalse(node1.hasChildren());
1824:       assertFalse(node1.isFunction());
1825:       assertFalse(node1.isCast());
1826:       assertFalse(node1.isNot());
1827:       assertFalse(node1.isObjectLit());
1828:       assertFalse(node1.isString());
1829:       assertFalse(node1.isAnd());
1830:       assertEquals((-1), node1.getSourcePosition());
1831:       assertFalse(node1.isDebugger());
1832:       assertNull(string0);
1833:       assertFalse(node1.equals((Object)node3));
1834:       assertFalse(node1.equals((Object)node2));
1835:       assertFalse(node1.equals((Object)node0));
1836:       assertEquals(48, Node.DIRECTIVES);
1837:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1838:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1839:       assertEquals(36, Node.QUOTED_PROP);
1840:       assertEquals(50, Node.FREE_CALL);
1841:       assertEquals(8, Node.FLAG_NO_THROWS);
1842:       assertEquals(39, Node.EMPTY_BLOCK);
1843:       assertEquals(53, Node.INPUT_ID);
1844:       assertEquals(55, Node.INFERRED_FUNCTION);
1845:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1846:       assertEquals(43, Node.IS_CONSTANT_NAME);
1847:       assertEquals(54, Node.SLASH_V);
1848:       assertEquals(47, Node.IS_DISPATCHER);
1849:       assertEquals(2, Node.POST_FLAG);
1850:       assertEquals(30, Node.VAR_ARGS_NAME);
1851:       assertEquals(40, Node.ORIGINALNAME_PROP);
1852:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1853:       assertEquals(32, Node.INCRDECR_PROP);
1854:       assertEquals(56, Node.CHANGE_TIME);
1855:       assertEquals(12, Node.COLUMN_BITS);
1856:       assertEquals(46, Node.IS_NAMESPACE);
1857:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1858:       assertEquals(57, Node.LAST_PROP);
1859:       assertEquals(1, Node.DECR_FLAG);
1860:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1861:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1862:       assertEquals(29, Node.JSDOC_INFO_PROP);
1863:       assertEquals(52, Node.LENGTH);
1864:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1865:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1866:       assertEquals(57, Node.REFLECTED_OBJECT);
1867:       assertEquals(49, Node.DIRECT_EVAL);
1868:       assertEquals(37, Node.OPT_ARG_NAME);
1869:       assertEquals(4095, Node.COLUMN_MASK);
1870:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1871:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1872:       assertNotSame(node1, node2);
1873:       assertNotSame(node1, node0);
1874:   }
1875: }
RegularFileObject[/tmp/EvoSuite_127_1629222884107/com/google/javascript/rhino/Node_127_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:44 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_127_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_127_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_127_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.JSTypeNative",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.common.collect.AbstractIndexedListIterator",
340:       "com.google.common.collect.Iterators$11",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.TemplatizedType",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.javascript.rhino.JSTypeExpression",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.common.collect.Iterators$12",
366:       "com.google.javascript.rhino.jstype.NamedType"
367:     );
368:   }
369: }

[MASTER] 17:54:44.714 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(23, 48, 2810);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInc());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertEquals(23, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertEquals(48, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertNotNull(node0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

boolean boolean0 = node0.isNE();
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInc());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertEquals(23, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertEquals(48, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(boolean0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

boolean boolean1 = node0.isFromExterns();
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInc());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertEquals(23, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertEquals(48, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

node0.putBooleanProp((-410), true);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInc());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertEquals(23, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertEquals(48, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

Node node1 = new Node(38);
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertEquals(38, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertTrue(node1.isName());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

Node node2 = new Node(42, node1);
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertEquals(38, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertTrue(node1.isName());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isSwitch());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFunction());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isParamList());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.isBlock());
assertTrue(node2.hasChildren());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(42, node2.getType());
assertFalse(node2.isAnd());
assertFalse(node2.isDefaultCase());
assertTrue(node2.isThis());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isNull());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isDelProp());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertTrue(node2.hasOneChild());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertNotNull(node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertEquals(38, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertTrue(node1.isName());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotSame(node1, node2);
assertNotSame(node1, node0);

boolean boolean2 = node1.isGetProp();
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertEquals(38, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertTrue(node1.isName());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(boolean2);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotSame(node1, node2);
assertNotSame(node1, node0);

boolean boolean3 = node1.isParamList();
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertEquals(38, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertTrue(node1.isName());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(boolean3);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotSame(node1, node2);
assertNotSame(node1, node0);

boolean boolean4 = node2.isSetterDef();
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertEquals(38, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertTrue(node1.isName());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isSwitch());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFunction());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isParamList());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.isBlock());
assertTrue(node2.hasChildren());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(42, node2.getType());
assertFalse(node2.isAnd());
assertFalse(node2.isDefaultCase());
assertTrue(node2.isThis());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isNull());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isDelProp());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertTrue(node2.hasOneChild());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(boolean4);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node0);
assertNotSame(node2, node1);

Node node3 = Node.newString("Object#Key");
assertFalse(node3.isGetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isArrayLit());
assertFalse(node3.isNE());
assertFalse(node3.isDelProp());
assertFalse(node3.isSwitch());
assertFalse(node3.isIf());
assertFalse(node3.isInc());
assertFalse(node3.isTrue());
assertFalse(node3.isFunction());
assertFalse(node3.isFalse());
assertEquals(40, node3.getType());
assertFalse(node3.isThrow());
assertFalse(node3.isEmpty());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isComma());
assertFalse(node3.isGetProp());
assertFalse(node3.isObjectLit());
assertFalse(node3.isName());
assertFalse(node3.isNot());
assertFalse(node3.isCall());
assertFalse(node3.isBreak());
assertFalse(node3.isNull());
assertFalse(node3.isAnd());
assertFalse(node3.isVoid());
assertFalse(node3.isDebugger());
assertFalse(node3.isExprResult());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.isWhile());
assertFalse(node3.isOr());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabel());
assertFalse(node3.isNumber());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isGetElem());
assertFalse(node3.isLabelName());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isCast());
assertFalse(node3.isDo());
assertFalse(node3.isVar());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isThis());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isBlock());
assertTrue(node3.isString());
assertFalse(node3.isTry());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isRegExp());
assertFalse(node3.isScript());
assertFalse(node3.isWith());
assertFalse(node3.isCase());
assertFalse(node3.isFor());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertNotNull(node3);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

boolean boolean5 = node0.isUnscopedQualifiedName();
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInc());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertEquals(2810, node0.getCharno());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertEquals(23, node0.getType());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(199418, node0.getSourcePosition());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isVar());
assertEquals(48, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(boolean5);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotSame(node0, node1);
assertNotSame(node0, node2);

boolean boolean6 = node1.isWith();
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertEquals(38, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertTrue(node1.isName());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(boolean6);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean4);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotSame(node1, node2);
assertNotSame(node1, node0);

node1.removeProp(87);
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertEquals(38, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertTrue(node1.isName());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotSame(node1, node2);
assertNotSame(node1, node0);

String string0 = node1.getSourceFileName();
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertEquals(38, node1.getType());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInc());
assertFalse(node1.isExprResult());
assertTrue(node1.isName());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertNull(string0);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotSame(node1, node2);
assertNotSame(node1, node0);


[MASTER] 17:54:53.021 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_157_1629222892209/com/google/javascript/rhino/Node_157_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_157_1629222892209/com/google/javascript/rhino/Node_157_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:53.021 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:53.022 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:53.023 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 647
[MASTER] 17:54:53.024 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_157_1629222892209/com/google/javascript/rhino/Node_157_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:52 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_157_tmp__ESTest extends Node_157_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node[] nodeArray0 = new Node[0];
21:       Node node0 = new Node(330, nodeArray0);
22:       assertFalse(node0.isIf());
23:       assertFalse(node0.isNE());
24:       assertFalse(node0.isFor());
25:       assertFalse(node0.isEmpty());
26:       assertFalse(node0.isGetterDef());
27:       assertFalse(node0.isIn());
28:       assertEquals(330, node0.getType());
29:       assertFalse(node0.isCase());
30:       assertFalse(node0.isTry());
31:       assertFalse(node0.isString());
32:       assertFalse(node0.isDefaultCase());
33:       assertFalse(node0.isFunction());
34:       assertFalse(node0.isDebugger());
35:       assertEquals(0, node0.getChildCount());
36:       assertEquals(0, node0.getLineno());
37:       assertFalse(node0.isParamList());
38:       assertFalse(node0.isSwitch());
39:       assertFalse(node0.isArrayLit());
40:       assertFalse(node0.isStringKey());
41:       assertFalse(node0.isThrow());
42:       assertFalse(node0.isThis());
43:       assertFalse(node0.isFalse());
44:       assertFalse(node0.isBlock());
45:       assertFalse(node0.isHook());
46:       assertFalse(node0.isInc());
47:       assertFalse(node0.isSetterDef());
48:       assertFalse(node0.isWith());
49:       assertFalse(node0.isCatch());
50:       assertEquals(0, node0.getCharno());
51:       assertFalse(node0.hasMoreThanOneChild());
52:       assertFalse(node0.isRegExp());
53:       assertFalse(node0.isInstanceOf());
54:       assertFalse(node0.hasChildren());
55:       assertFalse(node0.isGetElem());
56:       assertFalse(node0.isNumber());
57:       assertFalse(node0.isTypeOf());
58:       assertFalse(node0.isDec());
59:       assertFalse(node0.isOr());
60:       assertFalse(node0.isAssign());
61:       assertFalse(node0.isReturn());
62:       assertFalse(node0.isLabel());
63:       assertFalse(node0.isAssignAdd());
64:       assertFalse(node0.hasOneChild());
65:       assertFalse(node0.isDo());
66:       assertFalse(node0.isScript());
67:       assertFalse(node0.isContinue());
68:       assertFalse(node0.isObjectLit());
69:       assertFalse(node0.isNot());
70:       assertFalse(node0.isCast());
71:       assertFalse(node0.isAnd());
72:       assertFalse(node0.isLabelName());
73:       assertEquals(0, node0.getSourcePosition());
74:       assertFalse(node0.isBreak());
75:       assertFalse(node0.isNull());
76:       assertFalse(node0.isComma());
77:       assertFalse(node0.isAdd());
78:       assertFalse(node0.isVar());
79:       assertFalse(node0.isGetProp());
80:       assertFalse(node0.isNew());
81:       assertFalse(node0.isWhile());
82:       assertFalse(node0.isTrue());
83:       assertFalse(node0.isCall());
84:       assertFalse(node0.isExprResult());
85:       assertFalse(node0.isName());
86:       assertFalse(node0.isDelProp());
87:       assertFalse(node0.isVoid());
88:       assertEquals(0, nodeArray0.length);
89:       assertNotNull(node0);
90:       assertEquals(56, Node.CHANGE_TIME);
91:       assertEquals(2, Node.POST_FLAG);
92:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
93:       assertEquals(29, Node.JSDOC_INFO_PROP);
94:       assertEquals(37, Node.OPT_ARG_NAME);
95:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
96:       assertEquals(51, Node.STATIC_SOURCE_FILE);
97:       assertEquals(46, Node.IS_NAMESPACE);
98:       
99:       Node node1 = new Node(49);
100:       assertFalse(node1.isCatch());
101:       assertFalse(node1.isDebugger());
102:       assertFalse(node1.isParamList());
103:       assertFalse(node1.isTrue());
104:       assertFalse(node1.isVoid());
105:       assertFalse(node1.isNull());
106:       assertFalse(node1.isStringKey());
107:       assertFalse(node1.isVar());
108:       assertFalse(node1.isEmpty());
109:       assertFalse(node1.isArrayLit());
110:       assertFalse(node1.isAdd());
111:       assertFalse(node1.isNew());
112:       assertFalse(node1.isSetterDef());
113:       assertFalse(node1.isFunction());
114:       assertTrue(node1.isThrow());
115:       assertFalse(node1.isDefaultCase());
116:       assertEquals(0, node1.getChildCount());
117:       assertFalse(node1.isContinue());
118:       assertFalse(node1.isString());
119:       assertFalse(node1.isDo());
120:       assertEquals(49, node1.getType());
121:       assertFalse(node1.isOr());
122:       assertEquals((-1), node1.getSourcePosition());
123:       assertFalse(node1.isCall());
124:       assertFalse(node1.isName());
125:       assertFalse(node1.isDelProp());
126:       assertFalse(node1.isGetElem());
127:       assertFalse(node1.isBreak());
128:       assertFalse(node1.isComma());
129:       assertFalse(node1.isExprResult());
130:       assertFalse(node1.isTypeOf());
131:       assertFalse(node1.isReturn());
132:       assertFalse(node1.isWhile());
133:       assertFalse(node1.isAssign());
134:       assertFalse(node1.isDec());
135:       assertFalse(node1.hasChildren());
136:       assertFalse(node1.isAnd());
137:       assertFalse(node1.isObjectLit());
138:       assertFalse(node1.isWith());
139:       assertFalse(node1.isInstanceOf());
140:       assertFalse(node1.isScript());
141:       assertFalse(node1.isGetProp());
142:       assertFalse(node1.isNot());
143:       assertFalse(node1.isCast());
144:       assertFalse(node1.isFalse());
145:       assertFalse(node1.isLabelName());
146:       assertFalse(node1.isAssignAdd());
147:       assertFalse(node1.isLabel());
148:       assertFalse(node1.hasMoreThanOneChild());
149:       assertFalse(node1.isIn());
150:       assertEquals((-1), node1.getLineno());
151:       assertFalse(node1.isCase());
152:       assertFalse(node1.isInc());
153:       assertFalse(node1.isNE());
154:       assertFalse(node1.isNumber());
155:       assertFalse(node1.isSwitch());
156:       assertFalse(node1.isIf());
157:       assertFalse(node1.isGetterDef());
158:       assertEquals((-1), node1.getCharno());
159:       assertFalse(node1.isTry());
160:       assertFalse(node1.hasOneChild());
161:       assertFalse(node1.isThis());
162:       assertFalse(node1.isRegExp());
163:       assertFalse(node1.isBlock());
164:       assertFalse(node1.isHook());
165:       assertFalse(node1.isFor());
166:       assertNotNull(node1);
167:       assertFalse(node1.equals((Object)node0));
168:       
169:       Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
170:       assertFalse(node2.isCase());
171:       assertEquals((-1), node2.getCharno());
172:       assertFalse(node2.isSwitch());
173:       assertFalse(node2.isHook());
174:       assertFalse(node2.isFalse());
175:       assertFalse(node2.isGetterDef());
176:       assertFalse(node2.isComma());
177:       assertFalse(node2.isThis());
178:       assertFalse(node2.isFor());
179:       assertFalse(node2.isTry());
180:       assertFalse(node2.isObjectLit());
181:       assertFalse(node2.isGetProp());
182:       assertFalse(node2.isDefaultCase());
183:       assertFalse(node2.isTrue());
184:       assertFalse(node2.isVoid());
185:       assertFalse(node2.isArrayLit());
186:       assertEquals(0, node2.getChildCount());
187:       assertFalse(node2.isExprResult());
188:       assertFalse(node2.isGetElem());
189:       assertFalse(node2.isDelProp());
190:       assertFalse(node2.isBreak());
191:       assertFalse(node2.isName());
192:       assertFalse(node2.isNull());
193:       assertFalse(node2.isVar());
194:       assertFalse(node2.isAssignAdd());
195:       assertFalse(node2.isNew());
196:       assertFalse(node2.isOr());
197:       assertFalse(node2.isAdd());
198:       assertFalse(node2.isEmpty());
199:       assertFalse(node2.isWhile());
200:       assertFalse(node2.isDo());
201:       assertFalse(node2.isBlock());
202:       assertFalse(node2.isReturn());
203:       assertFalse(node2.isLabel());
204:       assertEquals((-1), node2.getLineno());
205:       assertFalse(node2.isContinue());
206:       assertFalse(node2.isCall());
207:       assertFalse(node2.hasMoreThanOneChild());
208:       assertFalse(node2.isNumber());
209:       assertFalse(node2.hasChildren());
210:       assertFalse(node2.isTypeOf());
211:       assertEquals((-1), node2.getSourcePosition());
212:       assertFalse(node2.isAssign());
213:       assertFalse(node2.isDec());
214:       assertFalse(node2.isLabelName());
215:       assertFalse(node2.isParamList());
216:       assertFalse(node2.isStringKey());
217:       assertTrue(node2.isString());
218:       assertFalse(node2.hasOneChild());
219:       assertFalse(node2.isScript());
220:       assertFalse(node2.isWith());
221:       assertFalse(node2.isRegExp());
222:       assertFalse(node2.isNot());
223:       assertFalse(node2.isAnd());
224:       assertFalse(node2.isDebugger());
225:       assertEquals(40, node2.getType());
226:       assertFalse(node2.isFunction());
227:       assertFalse(node2.isCatch());
228:       assertFalse(node2.isInstanceOf());
229:       assertFalse(node2.isCast());
230:       assertFalse(node2.isIf());
231:       assertFalse(node2.isThrow());
232:       assertFalse(node2.isNE());
233:       assertFalse(node2.isIn());
234:       assertFalse(node2.isInc());
235:       assertFalse(node2.isSetterDef());
236:       assertNotNull(node2);
237:       assertFalse(node2.equals((Object)node1));
238:       assertFalse(node2.equals((Object)node0));
239:       
240:       Node node3 = node2.useSourceInfoIfMissingFrom(node1);
241:       assertFalse(node1.isCatch());
242:       assertFalse(node1.isDebugger());
243:       assertFalse(node1.isParamList());
244:       assertFalse(node1.isTrue());
245:       assertFalse(node1.isVoid());
246:       assertFalse(node1.isNull());
247:       assertFalse(node1.isStringKey());
248:       assertFalse(node1.isVar());
249:       assertFalse(node1.isEmpty());
250:       assertFalse(node1.isArrayLit());
251:       assertFalse(node1.isAdd());
252:       assertFalse(node1.isNew());
253:       assertFalse(node1.isSetterDef());
254:       assertFalse(node1.isFunction());
255:       assertTrue(node1.isThrow());
256:       assertFalse(node1.isDefaultCase());
257:       assertEquals(0, node1.getChildCount());
258:       assertFalse(node1.isContinue());
259:       assertFalse(node1.isString());
260:       assertFalse(node1.isDo());
261:       assertEquals(49, node1.getType());
262:       assertFalse(node1.isOr());
263:       assertEquals((-1), node1.getSourcePosition());
264:       assertFalse(node1.isCall());
265:       assertFalse(node1.isName());
266:       assertFalse(node1.isDelProp());
267:       assertFalse(node1.isGetElem());
268:       assertFalse(node1.isBreak());
269:       assertFalse(node1.isComma());
270:       assertFalse(node1.isExprResult());
271:       assertFalse(node1.isTypeOf());
272:       assertFalse(node1.isReturn());
273:       assertFalse(node1.isWhile());
274:       assertFalse(node1.isAssign());
275:       assertFalse(node1.isDec());
276:       assertFalse(node1.hasChildren());
277:       assertFalse(node1.isAnd());
278:       assertFalse(node1.isObjectLit());
279:       assertFalse(node1.isWith());
280:       assertFalse(node1.isInstanceOf());
281:       assertFalse(node1.isScript());
282:       assertFalse(node1.isGetProp());
283:       assertFalse(node1.isNot());
284:       assertFalse(node1.isCast());
285:       assertFalse(node1.isFalse());
286:       assertFalse(node1.isLabelName());
287:       assertFalse(node1.isAssignAdd());
288:       assertFalse(node1.isLabel());
289:       assertFalse(node1.hasMoreThanOneChild());
290:       assertFalse(node1.isIn());
291:       assertEquals((-1), node1.getLineno());
292:       assertFalse(node1.isCase());
293:       assertFalse(node1.isInc());
294:       assertFalse(node1.isNE());
295:       assertFalse(node1.isNumber());
296:       assertFalse(node1.isSwitch());
297:       assertFalse(node1.isIf());
298:       assertFalse(node1.isGetterDef());
299:       assertEquals((-1), node1.getCharno());
300:       assertFalse(node1.isTry());
301:       assertFalse(node1.hasOneChild());
302:       assertFalse(node1.isThis());
303:       assertFalse(node1.isRegExp());
304:       assertFalse(node1.isBlock());
305:       assertFalse(node1.isHook());
306:       assertFalse(node1.isFor());
307:       assertFalse(node2.isCase());
308:       assertEquals((-1), node2.getCharno());
309:       assertFalse(node2.isSwitch());
310:       assertFalse(node2.isHook());
311:       assertFalse(node2.isFalse());
312:       assertFalse(node2.isGetterDef());
313:       assertFalse(node2.isComma());
314:       assertFalse(node2.isThis());
315:       assertFalse(node2.isFor());
316:       assertFalse(node2.isTry());
317:       assertFalse(node2.isObjectLit());
318:       assertFalse(node2.isGetProp());
319:       assertFalse(node2.isDefaultCase());
320:       assertFalse(node2.isTrue());
321:       assertFalse(node2.isVoid());
322:       assertFalse(node2.isArrayLit());
323:       assertEquals(0, node2.getChildCount());
324:       assertFalse(node2.isExprResult());
325:       assertFalse(node2.isGetElem());
326:       assertFalse(node2.isDelProp());
327:       assertFalse(node2.isBreak());
328:       assertFalse(node2.isName());
329:       assertFalse(node2.isNull());
330:       assertFalse(node2.isVar());
331:       assertFalse(node2.isAssignAdd());
332:       assertFalse(node2.isNew());
333:       assertFalse(node2.isOr());
334:       assertFalse(node2.isAdd());
335:       assertFalse(node2.isEmpty());
336:       assertFalse(node2.isWhile());
337:       assertFalse(node2.isDo());
338:       assertFalse(node2.isBlock());
339:       assertFalse(node2.isReturn());
340:       assertFalse(node2.isLabel());
341:       assertEquals((-1), node2.getLineno());
342:       assertFalse(node2.isContinue());
343:       assertFalse(node2.isCall());
344:       assertFalse(node2.hasMoreThanOneChild());
345:       assertFalse(node2.isNumber());
346:       assertFalse(node2.hasChildren());
347:       assertFalse(node2.isTypeOf());
348:       assertEquals((-1), node2.getSourcePosition());
349:       assertFalse(node2.isAssign());
350:       assertFalse(node2.isDec());
351:       assertFalse(node2.isLabelName());
352:       assertFalse(node2.isParamList());
353:       assertFalse(node2.isStringKey());
354:       assertTrue(node2.isString());
355:       assertFalse(node2.hasOneChild());
356:       assertFalse(node2.isScript());
357:       assertFalse(node2.isWith());
358:       assertFalse(node2.isRegExp());
359:       assertFalse(node2.isNot());
360:       assertFalse(node2.isAnd());
361:       assertFalse(node2.isDebugger());
362:       assertEquals(40, node2.getType());
363:       assertFalse(node2.isFunction());
364:       assertFalse(node2.isCatch());
365:       assertFalse(node2.isInstanceOf());
366:       assertFalse(node2.isCast());
367:       assertFalse(node2.isIf());
368:       assertFalse(node2.isThrow());
369:       assertFalse(node2.isNE());
370:       assertFalse(node2.isIn());
371:       assertFalse(node2.isInc());
372:       assertFalse(node2.isSetterDef());
373:       assertFalse(node3.isIn());
374:       assertFalse(node3.isCase());
375:       assertFalse(node3.isFor());
376:       assertFalse(node3.isVoid());
377:       assertFalse(node3.isEmpty());
378:       assertFalse(node3.isInc());
379:       assertFalse(node3.isDelProp());
380:       assertFalse(node3.isBreak());
381:       assertFalse(node3.isIf());
382:       assertFalse(node3.isTrue());
383:       assertFalse(node3.isNE());
384:       assertFalse(node3.isInstanceOf());
385:       assertEquals(0, node3.getChildCount());
386:       assertFalse(node3.isCatch());
387:       assertFalse(node3.isRegExp());
388:       assertFalse(node3.isWith());
389:       assertFalse(node3.isDefaultCase());
390:       assertFalse(node3.isVar());
391:       assertFalse(node3.isThis());
392:       assertFalse(node3.isHook());
393:       assertFalse(node3.hasOneChild());
394:       assertTrue(node3.isString());
395:       assertFalse(node3.isTry());
396:       assertFalse(node3.isScript());
397:       assertFalse(node3.isArrayLit());
398:       assertFalse(node3.isGetterDef());
399:       assertFalse(node3.isLabelName());
400:       assertFalse(node3.isNumber());
401:       assertFalse(node3.isSwitch());
402:       assertFalse(node3.isParamList());
403:       assertEquals((-1), node3.getCharno());
404:       assertFalse(node3.isStringKey());
405:       assertFalse(node3.isOr());
406:       assertEquals((-1), node3.getLineno());
407:       assertFalse(node3.hasMoreThanOneChild());
408:       assertFalse(node3.isAssignAdd());
409:       assertFalse(node3.isContinue());
410:       assertFalse(node3.isWhile());
411:       assertFalse(node3.hasChildren());
412:       assertFalse(node3.isDo());
413:       assertFalse(node3.isAssign());
414:       assertFalse(node3.isDec());
415:       assertFalse(node3.isTypeOf());
416:       assertFalse(node3.isBlock());
417:       assertFalse(node3.isLabel());
418:       assertFalse(node3.isReturn());
419:       assertFalse(node3.isCall());
420:       assertFalse(node3.isExprResult());
421:       assertFalse(node3.isNew());
422:       assertFalse(node3.isAdd());
423:       assertFalse(node3.isGetElem());
424:       assertFalse(node3.isName());
425:       assertFalse(node3.isNull());
426:       assertFalse(node3.isSetterDef());
427:       assertFalse(node3.isGetProp());
428:       assertFalse(node3.isFalse());
429:       assertFalse(node3.isFunction());
430:       assertFalse(node3.isThrow());
431:       assertFalse(node3.isComma());
432:       assertEquals(40, node3.getType());
433:       assertFalse(node3.isCast());
434:       assertFalse(node3.isNot());
435:       assertFalse(node3.isAnd());
436:       assertFalse(node3.isObjectLit());
437:       assertFalse(node3.isDebugger());
438:       assertEquals((-1), node3.getSourcePosition());
439:       assertNotNull(node3);
440:       assertFalse(node1.equals((Object)node0));
441:       assertFalse(node1.equals((Object)node2));
442:       assertFalse(node2.equals((Object)node1));
443:       assertFalse(node2.equals((Object)node0));
444:       assertFalse(node3.equals((Object)node1));
445:       assertFalse(node3.equals((Object)node0));
446:       
447:       Iterable<Node> iterable0 = node3.children();
448:       assertFalse(node1.isCatch());
449:       assertFalse(node1.isDebugger());
450:       assertFalse(node1.isParamList());
451:       assertFalse(node1.isTrue());
452:       assertFalse(node1.isVoid());
453:       assertFalse(node1.isNull());
454:       assertFalse(node1.isStringKey());
455:       assertFalse(node1.isVar());
456:       assertFalse(node1.isEmpty());
457:       assertFalse(node1.isArrayLit());
458:       assertFalse(node1.isAdd());
459:       assertFalse(node1.isNew());
460:       assertFalse(node1.isSetterDef());
461:       assertFalse(node1.isFunction());
462:       assertTrue(node1.isThrow());
463:       assertFalse(node1.isDefaultCase());
464:       assertEquals(0, node1.getChildCount());
465:       assertFalse(node1.isContinue());
466:       assertFalse(node1.isString());
467:       assertFalse(node1.isDo());
468:       assertEquals(49, node1.getType());
469:       assertFalse(node1.isOr());
470:       assertEquals((-1), node1.getSourcePosition());
471:       assertFalse(node1.isCall());
472:       assertFalse(node1.isName());
473:       assertFalse(node1.isDelProp());
474:       assertFalse(node1.isGetElem());
475:       assertFalse(node1.isBreak());
476:       assertFalse(node1.isComma());
477:       assertFalse(node1.isExprResult());
478:       assertFalse(node1.isTypeOf());
479:       assertFalse(node1.isReturn());
480:       assertFalse(node1.isWhile());
481:       assertFalse(node1.isAssign());
482:       assertFalse(node1.isDec());
483:       assertFalse(node1.hasChildren());
484:       assertFalse(node1.isAnd());
485:       assertFalse(node1.isObjectLit());
486:       assertFalse(node1.isWith());
487:       assertFalse(node1.isInstanceOf());
488:       assertFalse(node1.isScript());
489:       assertFalse(node1.isGetProp());
490:       assertFalse(node1.isNot());
491:       assertFalse(node1.isCast());
492:       assertFalse(node1.isFalse());
493:       assertFalse(node1.isLabelName());
494:       assertFalse(node1.isAssignAdd());
495:       assertFalse(node1.isLabel());
496:       assertFalse(node1.hasMoreThanOneChild());
497:       assertFalse(node1.isIn());
498:       assertEquals((-1), node1.getLineno());
499:       assertFalse(node1.isCase());
500:       assertFalse(node1.isInc());
501:       assertFalse(node1.isNE());
502:       assertFalse(node1.isNumber());
503:       assertFalse(node1.isSwitch());
504:       assertFalse(node1.isIf());
505:       assertFalse(node1.isGetterDef());
506:       assertEquals((-1), node1.getCharno());
507:       assertFalse(node1.isTry());
508:       assertFalse(node1.hasOneChild());
509:       assertFalse(node1.isThis());
510:       assertFalse(node1.isRegExp());
511:       assertFalse(node1.isBlock());
512:       assertFalse(node1.isHook());
513:       assertFalse(node1.isFor());
514:       assertFalse(node2.isCase());
515:       assertEquals((-1), node2.getCharno());
516:       assertFalse(node2.isSwitch());
517:       assertFalse(node2.isHook());
518:       assertFalse(node2.isFalse());
519:       assertFalse(node2.isGetterDef());
520:       assertFalse(node2.isComma());
521:       assertFalse(node2.isThis());
522:       assertFalse(node2.isFor());
523:       assertFalse(node2.isTry());
524:       assertFalse(node2.isObjectLit());
525:       assertFalse(node2.isGetProp());
526:       assertFalse(node2.isDefaultCase());
527:       assertFalse(node2.isTrue());
528:       assertFalse(node2.isVoid());
529:       assertFalse(node2.isArrayLit());
530:       assertEquals(0, node2.getChildCount());
531:       assertFalse(node2.isExprResult());
532:       assertFalse(node2.isGetElem());
533:       assertFalse(node2.isDelProp());
534:       assertFalse(node2.isBreak());
535:       assertFalse(node2.isName());
536:       assertFalse(node2.isNull());
537:       assertFalse(node2.isVar());
538:       assertFalse(node2.isAssignAdd());
539:       assertFalse(node2.isNew());
540:       assertFalse(node2.isOr());
541:       assertFalse(node2.isAdd());
542:       assertFalse(node2.isEmpty());
543:       assertFalse(node2.isWhile());
544:       assertFalse(node2.isDo());
545:       assertFalse(node2.isBlock());
546:       assertFalse(node2.isReturn());
547:       assertFalse(node2.isLabel());
548:       assertEquals((-1), node2.getLineno());
549:       assertFalse(node2.isContinue());
550:       assertFalse(node2.isCall());
551:       assertFalse(node2.hasMoreThanOneChild());
552:       assertFalse(node2.isNumber());
553:       assertFalse(node2.hasChildren());
554:       assertFalse(node2.isTypeOf());
555:       assertEquals((-1), node2.getSourcePosition());
556:       assertFalse(node2.isAssign());
557:       assertFalse(node2.isDec());
558:       assertFalse(node2.isLabelName());
559:       assertFalse(node2.isParamList());
560:       assertFalse(node2.isStringKey());
561:       assertTrue(node2.isString());
562:       assertFalse(node2.hasOneChild());
563:       assertFalse(node2.isScript());
564:       assertFalse(node2.isWith());
565:       assertFalse(node2.isRegExp());
566:       assertFalse(node2.isNot());
567:       assertFalse(node2.isAnd());
568:       assertFalse(node2.isDebugger());
569:       assertEquals(40, node2.getType());
570:       assertFalse(node2.isFunction());
571:       assertFalse(node2.isCatch());
572:       assertFalse(node2.isInstanceOf());
573:       assertFalse(node2.isCast());
574:       assertFalse(node2.isIf());
575:       assertFalse(node2.isThrow());
576:       assertFalse(node2.isNE());
577:       assertFalse(node2.isIn());
578:       assertFalse(node2.isInc());
579:       assertFalse(node2.isSetterDef());
580:       assertFalse(node3.isIn());
581:       assertFalse(node3.isCase());
582:       assertFalse(node3.isFor());
583:       assertFalse(node3.isVoid());
584:       assertFalse(node3.isEmpty());
585:       assertFalse(node3.isInc());
586:       assertFalse(node3.isDelProp());
587:       assertFalse(node3.isBreak());
588:       assertFalse(node3.isIf());
589:       assertFalse(node3.isTrue());
590:       assertFalse(node3.isNE());
591:       assertFalse(node3.isInstanceOf());
592:       assertEquals(0, node3.getChildCount());
593:       assertFalse(node3.isCatch());
594:       assertFalse(node3.isRegExp());
595:       assertFalse(node3.isWith());
596:       assertFalse(node3.isDefaultCase());
597:       assertFalse(node3.isVar());
598:       assertFalse(node3.isThis());
599:       assertFalse(node3.isHook());
600:       assertFalse(node3.hasOneChild());
601:       assertTrue(node3.isString());
602:       assertFalse(node3.isTry());
603:       assertFalse(node3.isScript());
604:       assertFalse(node3.isArrayLit());
605:       assertFalse(node3.isGetterDef());
606:       assertFalse(node3.isLabelName());
607:       assertFalse(node3.isNumber());
608:       assertFalse(node3.isSwitch());
609:       assertFalse(node3.isParamList());
610:       assertEquals((-1), node3.getCharno());
611:       assertFalse(node3.isStringKey());
612:       assertFalse(node3.isOr());
613:       assertEquals((-1), node3.getLineno());
614:       assertFalse(node3.hasMoreThanOneChild());
615:       assertFalse(node3.isAssignAdd());
616:       assertFalse(node3.isContinue());
617:       assertFalse(node3.isWhile());
618:       assertFalse(node3.hasChildren());
619:       assertFalse(node3.isDo());
620:       assertFalse(node3.isAssign());
621:       assertFalse(node3.isDec());
622:       assertFalse(node3.isTypeOf());
623:       assertFalse(node3.isBlock());
624:       assertFalse(node3.isLabel());
625:       assertFalse(node3.isReturn());
626:       assertFalse(node3.isCall());
627:       assertFalse(node3.isExprResult());
628:       assertFalse(node3.isNew());
629:       assertFalse(node3.isAdd());
630:       assertFalse(node3.isGetElem());
631:       assertFalse(node3.isName());
632:       assertFalse(node3.isNull());
633:       assertFalse(node3.isSetterDef());
634:       assertFalse(node3.isGetProp());
635:       assertFalse(node3.isFalse());
636:       assertFalse(node3.isFunction());
637:       assertFalse(node3.isThrow());
638:       assertFalse(node3.isComma());
639:       assertEquals(40, node3.getType());
640:       assertFalse(node3.isCast());
641:       assertFalse(node3.isNot());
642:       assertFalse(node3.isAnd());
643:       assertFalse(node3.isObjectLit());
644:       assertFalse(node3.isDebugger());
645:       assertEquals((-1), node3.getSourcePosition());
646:       assertNotNull(iterable0);
647:       assertFalse(iterable0.contains(node2));
648:       assertFalse(node1.equals((Object)node3));
649:       assertFalse(node1.equals((Object)node0));
650:       assertFalse(node1.equals((Object)node2));
651:       assertFalse(node2.equals((Object)node1));
652:       assertFalse(node2.equals((Object)node0));
653:       assertFalse(node3.equals((Object)node1));
654:       assertFalse(node3.equals((Object)node0));
655:       
656:       boolean boolean0 = node1.isGetProp();
657:       assertFalse(node1.isCatch());
658:       assertFalse(node1.isDebugger());
659:       assertFalse(node1.isParamList());
660:       assertFalse(node1.isTrue());
661:       assertFalse(node1.isVoid());
662:       assertFalse(node1.isNull());
663:       assertFalse(node1.isStringKey());
664:       assertFalse(node1.isVar());
665:       assertFalse(node1.isEmpty());
666:       assertFalse(node1.isArrayLit());
667:       assertFalse(node1.isAdd());
668:       assertFalse(node1.isNew());
669:       assertFalse(node1.isSetterDef());
670:       assertFalse(node1.isFunction());
671:       assertTrue(node1.isThrow());
672:       assertFalse(node1.isDefaultCase());
673:       assertEquals(0, node1.getChildCount());
674:       assertFalse(node1.isContinue());
675:       assertFalse(node1.isString());
676:       assertFalse(node1.isDo());
677:       assertEquals(49, node1.getType());
678:       assertFalse(node1.isOr());
679:       assertEquals((-1), node1.getSourcePosition());
680:       assertFalse(node1.isCall());
681:       assertFalse(node1.isName());
682:       assertFalse(node1.isDelProp());
683:       assertFalse(node1.isGetElem());
684:       assertFalse(node1.isBreak());
685:       assertFalse(node1.isComma());
686:       assertFalse(node1.isExprResult());
687:       assertFalse(node1.isTypeOf());
688:       assertFalse(node1.isReturn());
689:       assertFalse(node1.isWhile());
690:       assertFalse(node1.isAssign());
691:       assertFalse(node1.isDec());
692:       assertFalse(node1.hasChildren());
693:       assertFalse(node1.isAnd());
694:       assertFalse(node1.isObjectLit());
695:       assertFalse(node1.isWith());
696:       assertFalse(node1.isInstanceOf());
697:       assertFalse(node1.isScript());
698:       assertFalse(node1.isGetProp());
699:       assertFalse(node1.isNot());
700:       assertFalse(node1.isCast());
701:       assertFalse(node1.isFalse());
702:       assertFalse(node1.isLabelName());
703:       assertFalse(node1.isAssignAdd());
704:       assertFalse(node1.isLabel());
705:       assertFalse(node1.hasMoreThanOneChild());
706:       assertFalse(node1.isIn());
707:       assertEquals((-1), node1.getLineno());
708:       assertFalse(node1.isCase());
709:       assertFalse(node1.isInc());
710:       assertFalse(node1.isNE());
711:       assertFalse(node1.isNumber());
712:       assertFalse(node1.isSwitch());
713:       assertFalse(node1.isIf());
714:       assertFalse(node1.isGetterDef());
715:       assertEquals((-1), node1.getCharno());
716:       assertFalse(node1.isTry());
717:       assertFalse(node1.hasOneChild());
718:       assertFalse(node1.isThis());
719:       assertFalse(node1.isRegExp());
720:       assertFalse(node1.isBlock());
721:       assertFalse(node1.isHook());
722:       assertFalse(node1.isFor());
723:       assertFalse(boolean0);
724:       assertFalse(node1.equals((Object)node3));
725:       assertFalse(node1.equals((Object)node0));
726:       assertFalse(node1.equals((Object)node2));
727:       
728:       boolean boolean1 = node3.hasChildren();
729:       assertFalse(node1.isCatch());
730:       assertFalse(node1.isDebugger());
731:       assertFalse(node1.isParamList());
732:       assertFalse(node1.isTrue());
733:       assertFalse(node1.isVoid());
734:       assertFalse(node1.isNull());
735:       assertFalse(node1.isStringKey());
736:       assertFalse(node1.isVar());
737:       assertFalse(node1.isEmpty());
738:       assertFalse(node1.isArrayLit());
739:       assertFalse(node1.isAdd());
740:       assertFalse(node1.isNew());
741:       assertFalse(node1.isSetterDef());
742:       assertFalse(node1.isFunction());
743:       assertTrue(node1.isThrow());
744:       assertFalse(node1.isDefaultCase());
745:       assertEquals(0, node1.getChildCount());
746:       assertFalse(node1.isContinue());
747:       assertFalse(node1.isString());
748:       assertFalse(node1.isDo());
749:       assertEquals(49, node1.getType());
750:       assertFalse(node1.isOr());
751:       assertEquals((-1), node1.getSourcePosition());
752:       assertFalse(node1.isCall());
753:       assertFalse(node1.isName());
754:       assertFalse(node1.isDelProp());
755:       assertFalse(node1.isGetElem());
756:       assertFalse(node1.isBreak());
757:       assertFalse(node1.isComma());
758:       assertFalse(node1.isExprResult());
759:       assertFalse(node1.isTypeOf());
760:       assertFalse(node1.isReturn());
761:       assertFalse(node1.isWhile());
762:       assertFalse(node1.isAssign());
763:       assertFalse(node1.isDec());
764:       assertFalse(node1.hasChildren());
765:       assertFalse(node1.isAnd());
766:       assertFalse(node1.isObjectLit());
767:       assertFalse(node1.isWith());
768:       assertFalse(node1.isInstanceOf());
769:       assertFalse(node1.isScript());
770:       assertFalse(node1.isGetProp());
771:       assertFalse(node1.isNot());
772:       assertFalse(node1.isCast());
773:       assertFalse(node1.isFalse());
774:       assertFalse(node1.isLabelName());
775:       assertFalse(node1.isAssignAdd());
776:       assertFalse(node1.isLabel());
777:       assertFalse(node1.hasMoreThanOneChild());
778:       assertFalse(node1.isIn());
779:       assertEquals((-1), node1.getLineno());
780:       assertFalse(node1.isCase());
781:       assertFalse(node1.isInc());
782:       assertFalse(node1.isNE());
783:       assertFalse(node1.isNumber());
784:       assertFalse(node1.isSwitch());
785:       assertFalse(node1.isIf());
786:       assertFalse(node1.isGetterDef());
787:       assertEquals((-1), node1.getCharno());
788:       assertFalse(node1.isTry());
789:       assertFalse(node1.hasOneChild());
790:       assertFalse(node1.isThis());
791:       assertFalse(node1.isRegExp());
792:       assertFalse(node1.isBlock());
793:       assertFalse(node1.isHook());
794:       assertFalse(node1.isFor());
795:       assertFalse(node2.isCase());
796:       assertEquals((-1), node2.getCharno());
797:       assertFalse(node2.isSwitch());
798:       assertFalse(node2.isHook());
799:       assertFalse(node2.isFalse());
800:       assertFalse(node2.isGetterDef());
801:       assertFalse(node2.isComma());
802:       assertFalse(node2.isThis());
803:       assertFalse(node2.isFor());
804:       assertFalse(node2.isTry());
805:       assertFalse(node2.isObjectLit());
806:       assertFalse(node2.isGetProp());
807:       assertFalse(node2.isDefaultCase());
808:       assertFalse(node2.isTrue());
809:       assertFalse(node2.isVoid());
810:       assertFalse(node2.isArrayLit());
811:       assertEquals(0, node2.getChildCount());
812:       assertFalse(node2.isExprResult());
813:       assertFalse(node2.isGetElem());
814:       assertFalse(node2.isDelProp());
815:       assertFalse(node2.isBreak());
816:       assertFalse(node2.isName());
817:       assertFalse(node2.isNull());
818:       assertFalse(node2.isVar());
819:       assertFalse(node2.isAssignAdd());
820:       assertFalse(node2.isNew());
821:       assertFalse(node2.isOr());
822:       assertFalse(node2.isAdd());
823:       assertFalse(node2.isEmpty());
824:       assertFalse(node2.isWhile());
825:       assertFalse(node2.isDo());
826:       assertFalse(node2.isBlock());
827:       assertFalse(node2.isReturn());
828:       assertFalse(node2.isLabel());
829:       assertEquals((-1), node2.getLineno());
830:       assertFalse(node2.isContinue());
831:       assertFalse(node2.isCall());
832:       assertFalse(node2.hasMoreThanOneChild());
833:       assertFalse(node2.isNumber());
834:       assertFalse(node2.hasChildren());
835:       assertFalse(node2.isTypeOf());
836:       assertEquals((-1), node2.getSourcePosition());
837:       assertFalse(node2.isAssign());
838:       assertFalse(node2.isDec());
839:       assertFalse(node2.isLabelName());
840:       assertFalse(node2.isParamList());
841:       assertFalse(node2.isStringKey());
842:       assertTrue(node2.isString());
843:       assertFalse(node2.hasOneChild());
844:       assertFalse(node2.isScript());
845:       assertFalse(node2.isWith());
846:       assertFalse(node2.isRegExp());
847:       assertFalse(node2.isNot());
848:       assertFalse(node2.isAnd());
849:       assertFalse(node2.isDebugger());
850:       assertEquals(40, node2.getType());
851:       assertFalse(node2.isFunction());
852:       assertFalse(node2.isCatch());
853:       assertFalse(node2.isInstanceOf());
854:       assertFalse(node2.isCast());
855:       assertFalse(node2.isIf());
856:       assertFalse(node2.isThrow());
857:       assertFalse(node2.isNE());
858:       assertFalse(node2.isIn());
859:       assertFalse(node2.isInc());
860:       assertFalse(node2.isSetterDef());
861:       assertFalse(node3.isIn());
862:       assertFalse(node3.isCase());
863:       assertFalse(node3.isFor());
864:       assertFalse(node3.isVoid());
865:       assertFalse(node3.isEmpty());
866:       assertFalse(node3.isInc());
867:       assertFalse(node3.isDelProp());
868:       assertFalse(node3.isBreak());
869:       assertFalse(node3.isIf());
870:       assertFalse(node3.isTrue());
871:       assertFalse(node3.isNE());
872:       assertFalse(node3.isInstanceOf());
873:       assertEquals(0, node3.getChildCount());
874:       assertFalse(node3.isCatch());
875:       assertFalse(node3.isRegExp());
876:       assertFalse(node3.isWith());
877:       assertFalse(node3.isDefaultCase());
878:       assertFalse(node3.isVar());
879:       assertFalse(node3.isThis());
880:       assertFalse(node3.isHook());
881:       assertFalse(node3.hasOneChild());
882:       assertTrue(node3.isString());
883:       assertFalse(node3.isTry());
884:       assertFalse(node3.isScript());
885:       assertFalse(node3.isArrayLit());
886:       assertFalse(node3.isGetterDef());
887:       assertFalse(node3.isLabelName());
888:       assertFalse(node3.isNumber());
889:       assertFalse(node3.isSwitch());
890:       assertFalse(node3.isParamList());
891:       assertEquals((-1), node3.getCharno());
892:       assertFalse(node3.isStringKey());
893:       assertFalse(node3.isOr());
894:       assertEquals((-1), node3.getLineno());
895:       assertFalse(node3.hasMoreThanOneChild());
896:       assertFalse(node3.isAssignAdd());
897:       assertFalse(node3.isContinue());
898:       assertFalse(node3.isWhile());
899:       assertFalse(node3.hasChildren());
900:       assertFalse(node3.isDo());
901:       assertFalse(node3.isAssign());
902:       assertFalse(node3.isDec());
903:       assertFalse(node3.isTypeOf());
904:       assertFalse(node3.isBlock());
905:       assertFalse(node3.isLabel());
906:       assertFalse(node3.isReturn());
907:       assertFalse(node3.isCall());
908:       assertFalse(node3.isExprResult());
909:       assertFalse(node3.isNew());
910:       assertFalse(node3.isAdd());
911:       assertFalse(node3.isGetElem());
912:       assertFalse(node3.isName());
913:       assertFalse(node3.isNull());
914:       assertFalse(node3.isSetterDef());
915:       assertFalse(node3.isGetProp());
916:       assertFalse(node3.isFalse());
917:       assertFalse(node3.isFunction());
918:       assertFalse(node3.isThrow());
919:       assertFalse(node3.isComma());
920:       assertEquals(40, node3.getType());
921:       assertFalse(node3.isCast());
922:       assertFalse(node3.isNot());
923:       assertFalse(node3.isAnd());
924:       assertFalse(node3.isObjectLit());
925:       assertFalse(node3.isDebugger());
926:       assertEquals((-1), node3.getSourcePosition());
927:       assertFalse(boolean1);
928:       assertFalse(node1.equals((Object)node3));
929:       assertFalse(node1.equals((Object)node0));
930:       assertFalse(node1.equals((Object)node2));
931:       assertFalse(node2.equals((Object)node1));
932:       assertFalse(node2.equals((Object)node0));
933:       assertFalse(node3.equals((Object)node1));
934:       assertFalse(node3.equals((Object)node0));
935:       assertTrue(boolean1 == boolean0);
936:       
937:       boolean boolean2 = node2.isSwitch();
938:       assertFalse(node2.isCase());
939:       assertEquals((-1), node2.getCharno());
940:       assertFalse(node2.isSwitch());
941:       assertFalse(node2.isHook());
942:       assertFalse(node2.isFalse());
943:       assertFalse(node2.isGetterDef());
944:       assertFalse(node2.isComma());
945:       assertFalse(node2.isThis());
946:       assertFalse(node2.isFor());
947:       assertFalse(node2.isTry());
948:       assertFalse(node2.isObjectLit());
949:       assertFalse(node2.isGetProp());
950:       assertFalse(node2.isDefaultCase());
951:       assertFalse(node2.isTrue());
952:       assertFalse(node2.isVoid());
953:       assertFalse(node2.isArrayLit());
954:       assertEquals(0, node2.getChildCount());
955:       assertFalse(node2.isExprResult());
956:       assertFalse(node2.isGetElem());
957:       assertFalse(node2.isDelProp());
958:       assertFalse(node2.isBreak());
959:       assertFalse(node2.isName());
960:       assertFalse(node2.isNull());
961:       assertFalse(node2.isVar());
962:       assertFalse(node2.isAssignAdd());
963:       assertFalse(node2.isNew());
964:       assertFalse(node2.isOr());
965:       assertFalse(node2.isAdd());
966:       assertFalse(node2.isEmpty());
967:       assertFalse(node2.isWhile());
968:       assertFalse(node2.isDo());
969:       assertFalse(node2.isBlock());
970:       assertFalse(node2.isReturn());
971:       assertFalse(node2.isLabel());
972:       assertEquals((-1), node2.getLineno());
973:       assertFalse(node2.isContinue());
974:       assertFalse(node2.isCall());
975:       assertFalse(node2.hasMoreThanOneChild());
976:       assertFalse(node2.isNumber());
977:       assertFalse(node2.hasChildren());
978:       assertFalse(node2.isTypeOf());
979:       assertEquals((-1), node2.getSourcePosition());
980:       assertFalse(node2.isAssign());
981:       assertFalse(node2.isDec());
982:       assertFalse(node2.isLabelName());
983:       assertFalse(node2.isParamList());
984:       assertFalse(node2.isStringKey());
985:       assertTrue(node2.isString());
986:       assertFalse(node2.hasOneChild());
987:       assertFalse(node2.isScript());
988:       assertFalse(node2.isWith());
989:       assertFalse(node2.isRegExp());
990:       assertFalse(node2.isNot());
991:       assertFalse(node2.isAnd());
992:       assertFalse(node2.isDebugger());
993:       assertEquals(40, node2.getType());
994:       assertFalse(node2.isFunction());
995:       assertFalse(node2.isCatch());
996:       assertFalse(node2.isInstanceOf());
997:       assertFalse(node2.isCast());
998:       assertFalse(node2.isIf());
999:       assertFalse(node2.isThrow());
1000:       assertFalse(node2.isNE());
1001:       assertFalse(node2.isIn());
1002:       assertFalse(node2.isInc());
1003:       assertFalse(node2.isSetterDef());
1004:       assertFalse(boolean2);
1005:       assertFalse(node2.equals((Object)node1));
1006:       assertFalse(node2.equals((Object)node0));
1007:       assertTrue(boolean2 == boolean0);
1008:       assertTrue(boolean2 == boolean1);
1009:       
1010:       Node node4 = node0.cloneNode();
1011:       assertFalse(node0.isIf());
1012:       assertFalse(node0.isNE());
1013:       assertFalse(node0.isFor());
1014:       assertFalse(node0.isEmpty());
1015:       assertFalse(node0.isGetterDef());
1016:       assertFalse(node0.isIn());
1017:       assertEquals(330, node0.getType());
1018:       assertFalse(node0.isCase());
1019:       assertFalse(node0.isTry());
1020:       assertFalse(node0.isString());
1021:       assertFalse(node0.isDefaultCase());
1022:       assertFalse(node0.isFunction());
1023:       assertFalse(node0.isDebugger());
1024:       assertEquals(0, node0.getChildCount());
1025:       assertEquals(0, node0.getLineno());
1026:       assertFalse(node0.isParamList());
1027:       assertFalse(node0.isSwitch());
1028:       assertFalse(node0.isArrayLit());
1029:       assertFalse(node0.isStringKey());
1030:       assertFalse(node0.isThrow());
1031:       assertFalse(node0.isThis());
1032:       assertFalse(node0.isFalse());
1033:       assertFalse(node0.isBlock());
1034:       assertFalse(node0.isHook());
1035:       assertFalse(node0.isInc());
1036:       assertFalse(node0.isSetterDef());
1037:       assertFalse(node0.isWith());
1038:       assertFalse(node0.isCatch());
1039:       assertEquals(0, node0.getCharno());
1040:       assertFalse(node0.hasMoreThanOneChild());
1041:       assertFalse(node0.isRegExp());
1042:       assertFalse(node0.isInstanceOf());
1043:       assertFalse(node0.hasChildren());
1044:       assertFalse(node0.isGetElem());
1045:       assertFalse(node0.isNumber());
1046:       assertFalse(node0.isTypeOf());
1047:       assertFalse(node0.isDec());
1048:       assertFalse(node0.isOr());
1049:       assertFalse(node0.isAssign());
1050:       assertFalse(node0.isReturn());
1051:       assertFalse(node0.isLabel());
1052:       assertFalse(node0.isAssignAdd());
1053:       assertFalse(node0.hasOneChild());
1054:       assertFalse(node0.isDo());
1055:       assertFalse(node0.isScript());
1056:       assertFalse(node0.isContinue());
1057:       assertFalse(node0.isObjectLit());
1058:       assertFalse(node0.isNot());
1059:       assertFalse(node0.isCast());
1060:       assertFalse(node0.isAnd());
1061:       assertFalse(node0.isLabelName());
1062:       assertEquals(0, node0.getSourcePosition());
1063:       assertFalse(node0.isBreak());
1064:       assertFalse(node0.isNull());
1065:       assertFalse(node0.isComma());
1066:       assertFalse(node0.isAdd());
1067:       assertFalse(node0.isVar());
1068:       assertFalse(node0.isGetProp());
1069:       assertFalse(node0.isNew());
1070:       assertFalse(node0.isWhile());
1071:       assertFalse(node0.isTrue());
1072:       assertFalse(node0.isCall());
1073:       assertFalse(node0.isExprResult());
1074:       assertFalse(node0.isName());
1075:       assertFalse(node0.isDelProp());
1076:       assertFalse(node0.isVoid());
1077:       assertFalse(node4.isExprResult());
1078:       assertEquals(0, node4.getCharno());
1079:       assertFalse(node4.isNot());
1080:       assertFalse(node4.isAnd());
1081:       assertFalse(node4.isCast());
1082:       assertFalse(node4.isWith());
1083:       assertFalse(node4.isInstanceOf());
1084:       assertFalse(node4.isLabelName());
1085:       assertFalse(node4.isGetElem());
1086:       assertFalse(node4.isAssignAdd());
1087:       assertFalse(node4.isOr());
1088:       assertFalse(node4.isLabel());
1089:       assertFalse(node4.isThrow());
1090:       assertFalse(node4.isDo());
1091:       assertFalse(node4.isInc());
1092:       assertFalse(node4.isSwitch());
1093:       assertFalse(node4.isBlock());
1094:       assertFalse(node4.isHook());
1095:       assertFalse(node4.isStringKey());
1096:       assertFalse(node4.hasMoreThanOneChild());
1097:       assertFalse(node4.isThis());
1098:       assertFalse(node4.isParamList());
1099:       assertFalse(node4.isNumber());
1100:       assertFalse(node4.isGetterDef());
1101:       assertFalse(node4.isFor());
1102:       assertFalse(node4.isTry());
1103:       assertFalse(node4.hasOneChild());
1104:       assertFalse(node4.isCase());
1105:       assertFalse(node4.isScript());
1106:       assertFalse(node4.isDebugger());
1107:       assertFalse(node4.isFunction());
1108:       assertFalse(node4.isTrue());
1109:       assertFalse(node4.isVoid());
1110:       assertFalse(node4.isRegExp());
1111:       assertFalse(node4.isDefaultCase());
1112:       assertFalse(node4.isCatch());
1113:       assertFalse(node4.isDelProp());
1114:       assertFalse(node4.isArrayLit());
1115:       assertEquals(0, node4.getLineno());
1116:       assertFalse(node4.isNE());
1117:       assertFalse(node4.isIf());
1118:       assertEquals(0, node4.getChildCount());
1119:       assertFalse(node4.isNull());
1120:       assertEquals(0, node4.getSourcePosition());
1121:       assertFalse(node4.isVar());
1122:       assertFalse(node4.isIn());
1123:       assertFalse(node4.isEmpty());
1124:       assertFalse(node4.isAdd());
1125:       assertFalse(node4.isNew());
1126:       assertFalse(node4.isSetterDef());
1127:       assertFalse(node4.isWhile());
1128:       assertFalse(node4.isContinue());
1129:       assertFalse(node4.isCall());
1130:       assertFalse(node4.isName());
1131:       assertFalse(node4.isFalse());
1132:       assertFalse(node4.isBreak());
1133:       assertFalse(node4.isComma());
1134:       assertFalse(node4.isTypeOf());
1135:       assertFalse(node4.isReturn());
1136:       assertFalse(node4.isAssign());
1137:       assertFalse(node4.isDec());
1138:       assertFalse(node4.hasChildren());
1139:       assertFalse(node4.isObjectLit());
1140:       assertEquals(330, node4.getType());
1141:       assertFalse(node4.isString());
1142:       assertFalse(node4.isGetProp());
1143:       assertEquals(0, nodeArray0.length);
1144:       assertNotNull(node4);
1145:       assertFalse(node0.equals((Object)node2));
1146:       assertFalse(node0.equals((Object)node3));
1147:       assertFalse(node0.equals((Object)node1));
1148:       assertFalse(node4.equals((Object)node2));
1149:       assertFalse(node4.equals((Object)node3));
1150:       assertFalse(node4.equals((Object)node1));
1151:       assertFalse(node4.equals((Object)node0));
1152:       
1153:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
1154:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1155:       assertEquals(48, node_SideEffectFlags0.valueOf());
1156:       assertNotNull(node_SideEffectFlags0);
1157:       
1158:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
1159:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1160:       assertEquals(48, node_SideEffectFlags0.valueOf());
1161:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1162:       assertEquals(48, node_SideEffectFlags1.valueOf());
1163:       assertNotNull(node_SideEffectFlags1);
1164:       
1165:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
1166:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1167:       assertEquals(48, node_SideEffectFlags0.valueOf());
1168:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1169:       assertEquals(48, node_SideEffectFlags1.valueOf());
1170:       assertEquals(48, node_SideEffectFlags2.valueOf());
1171:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1172:       assertNotNull(node_SideEffectFlags2);
1173:       
1174:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
1175:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1176:       assertEquals(31, node_SideEffectFlags0.valueOf());
1177:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1178:       assertEquals(31, node_SideEffectFlags1.valueOf());
1179:       assertEquals(31, node_SideEffectFlags2.valueOf());
1180:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1181:       assertEquals(31, node_SideEffectFlags3.valueOf());
1182:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
1183:       assertNotNull(node_SideEffectFlags3);
1184:       
1185:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
1186:       assertEquals(0, node_SideEffectFlags0.valueOf());
1187:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1188:       assertEquals(0, node_SideEffectFlags1.valueOf());
1189:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1190:       assertEquals(0, node_SideEffectFlags2.valueOf());
1191:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1192:       assertEquals(0, node_SideEffectFlags3.valueOf());
1193:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1194:       assertEquals(0, node_SideEffectFlags4.valueOf());
1195:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
1196:       assertNotNull(node_SideEffectFlags4);
1197:       
1198:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
1199:       assertEquals(0, node_SideEffectFlags0.valueOf());
1200:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1201:       assertEquals(0, node_SideEffectFlags1.valueOf());
1202:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1203:       assertEquals(0, node_SideEffectFlags2.valueOf());
1204:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1205:       assertEquals(0, node_SideEffectFlags3.valueOf());
1206:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1207:       assertEquals(0, node_SideEffectFlags4.valueOf());
1208:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
1209:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
1210:       assertEquals(0, node_SideEffectFlags5.valueOf());
1211:       assertNotNull(node_SideEffectFlags5);
1212:       
1213:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setMutatesGlobalState();
1214:       assertEquals(0, node_SideEffectFlags6.valueOf());
1215:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
1216:       assertEquals(0, node_SideEffectFlags0.valueOf());
1217:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1218:       assertEquals(0, node_SideEffectFlags1.valueOf());
1219:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1220:       assertEquals(0, node_SideEffectFlags2.valueOf());
1221:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1222:       assertEquals(0, node_SideEffectFlags3.valueOf());
1223:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1224:       assertEquals(0, node_SideEffectFlags4.valueOf());
1225:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
1226:       assertNotNull(node_SideEffectFlags6);
1227:       
1228:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setReturnsTainted();
1229:       assertEquals(0, node_SideEffectFlags6.valueOf());
1230:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
1231:       assertTrue(node_SideEffectFlags7.areAllFlagsSet());
1232:       assertEquals(0, node_SideEffectFlags7.valueOf());
1233:       assertEquals(0, node_SideEffectFlags0.valueOf());
1234:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1235:       assertEquals(0, node_SideEffectFlags1.valueOf());
1236:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1237:       assertEquals(0, node_SideEffectFlags2.valueOf());
1238:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1239:       assertEquals(0, node_SideEffectFlags3.valueOf());
1240:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1241:       assertEquals(0, node_SideEffectFlags4.valueOf());
1242:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
1243:       assertNotNull(node_SideEffectFlags7);
1244:       
1245:       Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags7.setMutatesArguments();
1246:       assertEquals(0, node_SideEffectFlags6.valueOf());
1247:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
1248:       assertTrue(node_SideEffectFlags7.areAllFlagsSet());
1249:       assertEquals(0, node_SideEffectFlags7.valueOf());
1250:       assertTrue(node_SideEffectFlags8.areAllFlagsSet());
1251:       assertEquals(0, node_SideEffectFlags8.valueOf());
1252:       assertEquals(0, node_SideEffectFlags0.valueOf());
1253:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1254:       assertEquals(0, node_SideEffectFlags1.valueOf());
1255:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1256:       assertEquals(0, node_SideEffectFlags2.valueOf());
1257:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1258:       assertEquals(0, node_SideEffectFlags3.valueOf());
1259:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1260:       assertEquals(0, node_SideEffectFlags4.valueOf());
1261:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
1262:       assertNotNull(node_SideEffectFlags8);
1263:       
1264:       Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags2.setMutatesGlobalState();
1265:       assertTrue(node_SideEffectFlags9.areAllFlagsSet());
1266:       assertEquals(0, node_SideEffectFlags9.valueOf());
1267:       assertEquals(0, node_SideEffectFlags0.valueOf());
1268:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1269:       assertEquals(0, node_SideEffectFlags1.valueOf());
1270:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1271:       assertEquals(0, node_SideEffectFlags2.valueOf());
1272:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1273:       assertNotNull(node_SideEffectFlags9);
1274:       
1275:       Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags0.setMutatesArguments();
1276:       assertEquals(0, node_SideEffectFlags10.valueOf());
1277:       assertTrue(node_SideEffectFlags10.areAllFlagsSet());
1278:       assertEquals(0, node_SideEffectFlags0.valueOf());
1279:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1280:       assertNotNull(node_SideEffectFlags10);
1281:       
1282:       Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags10.setMutatesGlobalState();
1283:       assertEquals(0, node_SideEffectFlags10.valueOf());
1284:       assertTrue(node_SideEffectFlags10.areAllFlagsSet());
1285:       assertEquals(0, node_SideEffectFlags11.valueOf());
1286:       assertTrue(node_SideEffectFlags11.areAllFlagsSet());
1287:       assertEquals(0, node_SideEffectFlags0.valueOf());
1288:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1289:       assertNotNull(node_SideEffectFlags11);
1290:       
1291:       Node node5 = new Node(48, node1, node0);
1292:       assertFalse(node0.isIf());
1293:       assertFalse(node0.isNE());
1294:       assertFalse(node0.isFor());
1295:       assertFalse(node0.isEmpty());
1296:       assertFalse(node0.isGetterDef());
1297:       assertFalse(node0.isIn());
1298:       assertEquals(330, node0.getType());
1299:       assertFalse(node0.isCase());
1300:       assertFalse(node0.isTry());
1301:       assertFalse(node0.isString());
1302:       assertFalse(node0.isDefaultCase());
1303:       assertFalse(node0.isFunction());
1304:       assertFalse(node0.isDebugger());
1305:       assertEquals(0, node0.getChildCount());
1306:       assertEquals(0, node0.getLineno());
1307:       assertFalse(node0.isParamList());
1308:       assertFalse(node0.isSwitch());
1309:       assertFalse(node0.isArrayLit());
1310:       assertFalse(node0.isStringKey());
1311:       assertFalse(node0.isThrow());
1312:       assertFalse(node0.isThis());
1313:       assertFalse(node0.isFalse());
1314:       assertFalse(node0.isBlock());
1315:       assertFalse(node0.isHook());
1316:       assertFalse(node0.isInc());
1317:       assertFalse(node0.isSetterDef());
1318:       assertFalse(node0.isWith());
1319:       assertFalse(node0.isCatch());
1320:       assertEquals(0, node0.getCharno());
1321:       assertFalse(node0.hasMoreThanOneChild());
1322:       assertFalse(node0.isRegExp());
1323:       assertFalse(node0.isInstanceOf());
1324:       assertFalse(node0.hasChildren());
1325:       assertFalse(node0.isGetElem());
1326:       assertFalse(node0.isNumber());
1327:       assertFalse(node0.isTypeOf());
1328:       assertFalse(node0.isDec());
1329:       assertFalse(node0.isOr());
1330:       assertFalse(node0.isAssign());
1331:       assertFalse(node0.isReturn());
1332:       assertFalse(node0.isLabel());
1333:       assertFalse(node0.isAssignAdd());
1334:       assertFalse(node0.hasOneChild());
1335:       assertFalse(node0.isDo());
1336:       assertFalse(node0.isScript());
1337:       assertFalse(node0.isContinue());
1338:       assertFalse(node0.isObjectLit());
1339:       assertFalse(node0.isNot());
1340:       assertFalse(node0.isCast());
1341:       assertFalse(node0.isAnd());
1342:       assertFalse(node0.isLabelName());
1343:       assertEquals(0, node0.getSourcePosition());
1344:       assertFalse(node0.isBreak());
1345:       assertFalse(node0.isNull());
1346:       assertFalse(node0.isComma());
1347:       assertFalse(node0.isAdd());
1348:       assertFalse(node0.isVar());
1349:       assertFalse(node0.isGetProp());
1350:       assertFalse(node0.isNew());
1351:       assertFalse(node0.isWhile());
1352:       assertFalse(node0.isTrue());
1353:       assertFalse(node0.isCall());
1354:       assertFalse(node0.isExprResult());
1355:       assertFalse(node0.isName());
1356:       assertFalse(node0.isDelProp());
1357:       assertFalse(node0.isVoid());
1358:       assertFalse(node1.isCatch());
1359:       assertFalse(node1.isDebugger());
1360:       assertFalse(node1.isParamList());
1361:       assertFalse(node1.isTrue());
1362:       assertFalse(node1.isVoid());
1363:       assertFalse(node1.isNull());
1364:       assertFalse(node1.isStringKey());
1365:       assertFalse(node1.isVar());
1366:       assertFalse(node1.isEmpty());
1367:       assertFalse(node1.isArrayLit());
1368:       assertFalse(node1.isAdd());
1369:       assertFalse(node1.isNew());
1370:       assertFalse(node1.isSetterDef());
1371:       assertFalse(node1.isFunction());
1372:       assertTrue(node1.isThrow());
1373:       assertFalse(node1.isDefaultCase());
1374:       assertEquals(0, node1.getChildCount());
1375:       assertFalse(node1.isContinue());
1376:       assertFalse(node1.isString());
1377:       assertFalse(node1.isDo());
1378:       assertEquals(49, node1.getType());
1379:       assertFalse(node1.isOr());
1380:       assertEquals((-1), node1.getSourcePosition());
1381:       assertFalse(node1.isCall());
1382:       assertFalse(node1.isName());
1383:       assertFalse(node1.isDelProp());
1384:       assertFalse(node1.isGetElem());
1385:       assertFalse(node1.isBreak());
1386:       assertFalse(node1.isComma());
1387:       assertFalse(node1.isExprResult());
1388:       assertFalse(node1.isTypeOf());
1389:       assertFalse(node1.isReturn());
1390:       assertFalse(node1.isWhile());
1391:       assertFalse(node1.isAssign());
1392:       assertFalse(node1.isDec());
1393:       assertFalse(node1.hasChildren());
1394:       assertFalse(node1.isAnd());
1395:       assertFalse(node1.isObjectLit());
1396:       assertFalse(node1.isWith());
1397:       assertFalse(node1.isInstanceOf());
1398:       assertFalse(node1.isScript());
1399:       assertFalse(node1.isGetProp());
1400:       assertFalse(node1.isNot());
1401:       assertFalse(node1.isCast());
1402:       assertFalse(node1.isFalse());
1403:       assertFalse(node1.isLabelName());
1404:       assertFalse(node1.isAssignAdd());
1405:       assertFalse(node1.isLabel());
1406:       assertFalse(node1.hasMoreThanOneChild());
1407:       assertFalse(node1.isIn());
1408:       assertEquals((-1), node1.getLineno());
1409:       assertFalse(node1.isCase());
1410:       assertFalse(node1.isInc());
1411:       assertFalse(node1.isNE());
1412:       assertFalse(node1.isNumber());
1413:       assertFalse(node1.isSwitch());
1414:       assertFalse(node1.isIf());
1415:       assertFalse(node1.isGetterDef());
1416:       assertEquals((-1), node1.getCharno());
1417:       assertFalse(node1.isTry());
1418:       assertFalse(node1.hasOneChild());
1419:       assertFalse(node1.isThis());
1420:       assertFalse(node1.isRegExp());
1421:       assertFalse(node1.isBlock());
1422:       assertFalse(node1.isHook());
1423:       assertFalse(node1.isFor());
1424:       assertEquals(48, node5.getType());
1425:       assertFalse(node5.isParamList());
1426:       assertFalse(node5.isNull());
1427:       assertFalse(node5.isVar());
1428:       assertFalse(node5.isSetterDef());
1429:       assertFalse(node5.isDefaultCase());
1430:       assertFalse(node5.isDebugger());
1431:       assertFalse(node5.isFunction());
1432:       assertFalse(node5.isContinue());
1433:       assertFalse(node5.isStringKey());
1434:       assertFalse(node5.isArrayLit());
1435:       assertFalse(node5.isLabel());
1436:       assertFalse(node5.isAssignAdd());
1437:       assertFalse(node5.isReturn());
1438:       assertFalse(node5.isTypeOf());
1439:       assertEquals((-1), node5.getSourcePosition());
1440:       assertFalse(node5.isOr());
1441:       assertFalse(node5.isAssign());
1442:       assertFalse(node5.isDec());
1443:       assertFalse(node5.isWhile());
1444:       assertFalse(node5.isString());
1445:       assertFalse(node5.isEmpty());
1446:       assertFalse(node5.isDo());
1447:       assertFalse(node5.isAdd());
1448:       assertFalse(node5.isNew());
1449:       assertFalse(node5.isExprResult());
1450:       assertFalse(node5.isTrue());
1451:       assertFalse(node5.isName());
1452:       assertFalse(node5.isGetElem());
1453:       assertFalse(node5.isCall());
1454:       assertFalse(node5.isBreak());
1455:       assertFalse(node5.isDelProp());
1456:       assertTrue(node5.hasMoreThanOneChild());
1457:       assertFalse(node5.isVoid());
1458:       assertEquals(2, node5.getChildCount());
1459:       assertFalse(node5.isGetProp());
1460:       assertFalse(node5.isThis());
1461:       assertFalse(node5.isInstanceOf());
1462:       assertFalse(node5.isObjectLit());
1463:       assertFalse(node5.isComma());
1464:       assertFalse(node5.isThrow());
1465:       assertFalse(node5.isScript());
1466:       assertEquals((-1), node5.getCharno());
1467:       assertFalse(node5.isNot());
1468:       assertFalse(node5.isFalse());
1469:       assertFalse(node5.isAnd());
1470:       assertFalse(node5.isCast());
1471:       assertFalse(node5.isSwitch());
1472:       assertFalse(node5.isLabelName());
1473:       assertTrue(node5.hasChildren());
1474:       assertFalse(node5.isNE());
1475:       assertFalse(node5.isNumber());
1476:       assertFalse(node5.isIn());
1477:       assertFalse(node5.isGetterDef());
1478:       assertFalse(node5.isCase());
1479:       assertFalse(node5.isFor());
1480:       assertFalse(node5.hasOneChild());
1481:       assertFalse(node5.isTry());
1482:       assertFalse(node5.isBlock());
1483:       assertFalse(node5.isInc());
1484:       assertFalse(node5.isRegExp());
1485:       assertFalse(node5.isHook());
1486:       assertFalse(node5.isWith());
1487:       assertFalse(node5.isCatch());
1488:       assertFalse(node5.isIf());
1489:       assertEquals((-1), node5.getLineno());
1490:       assertEquals(0, nodeArray0.length);
1491:       assertNotNull(node5);
1492:       assertFalse(node0.equals((Object)node2));
1493:       assertFalse(node0.equals((Object)node4));
1494:       assertFalse(node0.equals((Object)node3));
1495:       assertFalse(node0.equals((Object)node1));
1496:       assertFalse(node1.equals((Object)node3));
1497:       assertFalse(node1.equals((Object)node4));
1498:       assertFalse(node1.equals((Object)node0));
1499:       assertFalse(node1.equals((Object)node2));
1500:       assertFalse(node5.equals((Object)node2));
1501:       assertFalse(node5.equals((Object)node0));
1502:       assertFalse(node5.equals((Object)node3));
1503:       assertFalse(node5.equals((Object)node1));
1504:       assertFalse(node5.equals((Object)node4));
1505:       
1506:       boolean boolean3 = node1.hasOneChild();
1507:       assertFalse(node1.isCatch());
1508:       assertFalse(node1.isDebugger());
1509:       assertFalse(node1.isParamList());
1510:       assertFalse(node1.isTrue());
1511:       assertFalse(node1.isVoid());
1512:       assertFalse(node1.isNull());
1513:       assertFalse(node1.isStringKey());
1514:       assertFalse(node1.isVar());
1515:       assertFalse(node1.isEmpty());
1516:       assertFalse(node1.isArrayLit());
1517:       assertFalse(node1.isAdd());
1518:       assertFalse(node1.isNew());
1519:       assertFalse(node1.isSetterDef());
1520:       assertFalse(node1.isFunction());
1521:       assertTrue(node1.isThrow());
1522:       assertFalse(node1.isDefaultCase());
1523:       assertEquals(0, node1.getChildCount());
1524:       assertFalse(node1.isContinue());
1525:       assertFalse(node1.isString());
1526:       assertFalse(node1.isDo());
1527:       assertEquals(49, node1.getType());
1528:       assertFalse(node1.isOr());
1529:       assertEquals((-1), node1.getSourcePosition());
1530:       assertFalse(node1.isCall());
1531:       assertFalse(node1.isName());
1532:       assertFalse(node1.isDelProp());
1533:       assertFalse(node1.isGetElem());
1534:       assertFalse(node1.isBreak());
1535:       assertFalse(node1.isComma());
1536:       assertFalse(node1.isExprResult());
1537:       assertFalse(node1.isTypeOf());
1538:       assertFalse(node1.isReturn());
1539:       assertFalse(node1.isWhile());
1540:       assertFalse(node1.isAssign());
1541:       assertFalse(node1.isDec());
1542:       assertFalse(node1.hasChildren());
1543:       assertFalse(node1.isAnd());
1544:       assertFalse(node1.isObjectLit());
1545:       assertFalse(node1.isWith());
1546:       assertFalse(node1.isInstanceOf());
1547:       assertFalse(node1.isScript());
1548:       assertFalse(node1.isGetProp());
1549:       assertFalse(node1.isNot());
1550:       assertFalse(node1.isCast());
1551:       assertFalse(node1.isFalse());
1552:       assertFalse(node1.isLabelName());
1553:       assertFalse(node1.isAssignAdd());
1554:       assertFalse(node1.isLabel());
1555:       assertFalse(node1.hasMoreThanOneChild());
1556:       assertFalse(node1.isIn());
1557:       assertEquals((-1), node1.getLineno());
1558:       assertFalse(node1.isCase());
1559:       assertFalse(node1.isInc());
1560:       assertFalse(node1.isNE());
1561:       assertFalse(node1.isNumber());
1562:       assertFalse(node1.isSwitch());
1563:       assertFalse(node1.isIf());
1564:       assertFalse(node1.isGetterDef());
1565:       assertEquals((-1), node1.getCharno());
1566:       assertFalse(node1.isTry());
1567:       assertFalse(node1.hasOneChild());
1568:       assertFalse(node1.isThis());
1569:       assertFalse(node1.isRegExp());
1570:       assertFalse(node1.isBlock());
1571:       assertFalse(node1.isHook());
1572:       assertFalse(node1.isFor());
1573:       assertFalse(boolean3);
1574:       assertFalse(node1.equals((Object)node3));
1575:       assertFalse(node1.equals((Object)node4));
1576:       assertFalse(node1.equals((Object)node0));
1577:       assertFalse(node1.equals((Object)node5));
1578:       assertFalse(node1.equals((Object)node2));
1579:       assertTrue(boolean3 == boolean1);
1580:       assertTrue(boolean3 == boolean0);
1581:       assertTrue(boolean3 == boolean2);
1582:       
1583:       boolean boolean4 = node5.isEquivalentToShallow(node0);
1584:       assertFalse(node0.isIf());
1585:       assertFalse(node0.isNE());
1586:       assertFalse(node0.isFor());
1587:       assertFalse(node0.isEmpty());
1588:       assertFalse(node0.isGetterDef());
1589:       assertFalse(node0.isIn());
1590:       assertEquals(330, node0.getType());
1591:       assertFalse(node0.isCase());
1592:       assertFalse(node0.isTry());
1593:       assertFalse(node0.isString());
1594:       assertFalse(node0.isDefaultCase());
1595:       assertFalse(node0.isFunction());
1596:       assertFalse(node0.isDebugger());
1597:       assertEquals(0, node0.getChildCount());
1598:       assertEquals(0, node0.getLineno());
1599:       assertFalse(node0.isParamList());
1600:       assertFalse(node0.isSwitch());
1601:       assertFalse(node0.isArrayLit());
1602:       assertFalse(node0.isStringKey());
1603:       assertFalse(node0.isThrow());
1604:       assertFalse(node0.isThis());
1605:       assertFalse(node0.isFalse());
1606:       assertFalse(node0.isBlock());
1607:       assertFalse(node0.isHook());
1608:       assertFalse(node0.isInc());
1609:       assertFalse(node0.isSetterDef());
1610:       assertFalse(node0.isWith());
1611:       assertFalse(node0.isCatch());
1612:       assertEquals(0, node0.getCharno());
1613:       assertFalse(node0.hasMoreThanOneChild());
1614:       assertFalse(node0.isRegExp());
1615:       assertFalse(node0.isInstanceOf());
1616:       assertFalse(node0.hasChildren());
1617:       assertFalse(node0.isGetElem());
1618:       assertFalse(node0.isNumber());
1619:       assertFalse(node0.isTypeOf());
1620:       assertFalse(node0.isDec());
1621:       assertFalse(node0.isOr());
1622:       assertFalse(node0.isAssign());
1623:       assertFalse(node0.isReturn());
1624:       assertFalse(node0.isLabel());
1625:       assertFalse(node0.isAssignAdd());
1626:       assertFalse(node0.hasOneChild());
1627:       assertFalse(node0.isDo());
1628:       assertFalse(node0.isScript());
1629:       assertFalse(node0.isContinue());
1630:       assertFalse(node0.isObjectLit());
1631:       assertFalse(node0.isNot());
1632:       assertFalse(node0.isCast());
1633:       assertFalse(node0.isAnd());
1634:       assertFalse(node0.isLabelName());
1635:       assertEquals(0, node0.getSourcePosition());
1636:       assertFalse(node0.isBreak());
1637:       assertFalse(node0.isNull());
1638:       assertFalse(node0.isComma());
1639:       assertFalse(node0.isAdd());
1640:       assertFalse(node0.isVar());
1641:       assertFalse(node0.isGetProp());
1642:       assertFalse(node0.isNew());
1643:       assertFalse(node0.isWhile());
1644:       assertFalse(node0.isTrue());
1645:       assertFalse(node0.isCall());
1646:       assertFalse(node0.isExprResult());
1647:       assertFalse(node0.isName());
1648:       assertFalse(node0.isDelProp());
1649:       assertFalse(node0.isVoid());
1650:       assertFalse(node1.isCatch());
1651:       assertFalse(node1.isDebugger());
1652:       assertFalse(node1.isParamList());
1653:       assertFalse(node1.isTrue());
1654:       assertFalse(node1.isVoid());
1655:       assertFalse(node1.isNull());
1656:       assertFalse(node1.isStringKey());
1657:       assertFalse(node1.isVar());
1658:       assertFalse(node1.isEmpty());
1659:       assertFalse(node1.isArrayLit());
1660:       assertFalse(node1.isAdd());
1661:       assertFalse(node1.isNew());
1662:       assertFalse(node1.isSetterDef());
1663:       assertFalse(node1.isFunction());
1664:       assertTrue(node1.isThrow());
1665:       assertFalse(node1.isDefaultCase());
1666:       assertEquals(0, node1.getChildCount());
1667:       assertFalse(node1.isContinue());
1668:       assertFalse(node1.isString());
1669:       assertFalse(node1.isDo());
1670:       assertEquals(49, node1.getType());
1671:       assertFalse(node1.isOr());
1672:       assertEquals((-1), node1.getSourcePosition());
1673:       assertFalse(node1.isCall());
1674:       assertFalse(node1.isName());
1675:       assertFalse(node1.isDelProp());
1676:       assertFalse(node1.isGetElem());
1677:       assertFalse(node1.isBreak());
1678:       assertFalse(node1.isComma());
1679:       assertFalse(node1.isExprResult());
1680:       assertFalse(node1.isTypeOf());
1681:       assertFalse(node1.isReturn());
1682:       assertFalse(node1.isWhile());
1683:       assertFalse(node1.isAssign());
1684:       assertFalse(node1.isDec());
1685:       assertFalse(node1.hasChildren());
1686:       assertFalse(node1.isAnd());
1687:       assertFalse(node1.isObjectLit());
1688:       assertFalse(node1.isWith());
1689:       assertFalse(node1.isInstanceOf());
1690:       assertFalse(node1.isScript());
1691:       assertFalse(node1.isGetProp());
1692:       assertFalse(node1.isNot());
1693:       assertFalse(node1.isCast());
1694:       assertFalse(node1.isFalse());
1695:       assertFalse(node1.isLabelName());
1696:       assertFalse(node1.isAssignAdd());
1697:       assertFalse(node1.isLabel());
1698:       assertFalse(node1.hasMoreThanOneChild());
1699:       assertFalse(node1.isIn());
1700:       assertEquals((-1), node1.getLineno());
1701:       assertFalse(node1.isCase());
1702:       assertFalse(node1.isInc());
1703:       assertFalse(node1.isNE());
1704:       assertFalse(node1.isNumber());
1705:       assertFalse(node1.isSwitch());
1706:       assertFalse(node1.isIf());
1707:       assertFalse(node1.isGetterDef());
1708:       assertEquals((-1), node1.getCharno());
1709:       assertFalse(node1.isTry());
1710:       assertFalse(node1.hasOneChild());
1711:       assertFalse(node1.isThis());
1712:       assertFalse(node1.isRegExp());
1713:       assertFalse(node1.isBlock());
1714:       assertFalse(node1.isHook());
1715:       assertFalse(node1.isFor());
1716:       assertEquals(48, node5.getType());
1717:       assertFalse(node5.isParamList());
1718:       assertFalse(node5.isNull());
1719:       assertFalse(node5.isVar());
1720:       assertFalse(node5.isSetterDef());
1721:       assertFalse(node5.isDefaultCase());
1722:       assertFalse(node5.isDebugger());
1723:       assertFalse(node5.isFunction());
1724:       assertFalse(node5.isContinue());
1725:       assertFalse(node5.isStringKey());
1726:       assertFalse(node5.isArrayLit());
1727:       assertFalse(node5.isLabel());
1728:       assertFalse(node5.isAssignAdd());
1729:       assertFalse(node5.isReturn());
1730:       assertFalse(node5.isTypeOf());
1731:       assertEquals((-1), node5.getSourcePosition());
1732:       assertFalse(node5.isOr());
1733:       assertFalse(node5.isAssign());
1734:       assertFalse(node5.isDec());
1735:       assertFalse(node5.isWhile());
1736:       assertFalse(node5.isString());
1737:       assertFalse(node5.isEmpty());
1738:       assertFalse(node5.isDo());
1739:       assertFalse(node5.isAdd());
1740:       assertFalse(node5.isNew());
1741:       assertFalse(node5.isExprResult());
1742:       assertFalse(node5.isTrue());
1743:       assertFalse(node5.isName());
1744:       assertFalse(node5.isGetElem());
1745:       assertFalse(node5.isCall());
1746:       assertFalse(node5.isBreak());
1747:       assertFalse(node5.isDelProp());
1748:       assertTrue(node5.hasMoreThanOneChild());
1749:       assertFalse(node5.isVoid());
1750:       assertEquals(2, node5.getChildCount());
1751:       assertFalse(node5.isGetProp());
1752:       assertFalse(node5.isThis());
1753:       assertFalse(node5.isInstanceOf());
1754:       assertFalse(node5.isObjectLit());
1755:       assertFalse(node5.isComma());
1756:       assertFalse(node5.isThrow());
1757:       assertFalse(node5.isScript());
1758:       assertEquals((-1), node5.getCharno());
1759:       assertFalse(node5.isNot());
1760:       assertFalse(node5.isFalse());
1761:       assertFalse(node5.isAnd());
1762:       assertFalse(node5.isCast());
1763:       assertFalse(node5.isSwitch());
1764:       assertFalse(node5.isLabelName());
1765:       assertTrue(node5.hasChildren());
1766:       assertFalse(node5.isNE());
1767:       assertFalse(node5.isNumber());
1768:       assertFalse(node5.isIn());
1769:       assertFalse(node5.isGetterDef());
1770:       assertFalse(node5.isCase());
1771:       assertFalse(node5.isFor());
1772:       assertFalse(node5.hasOneChild());
1773:       assertFalse(node5.isTry());
1774:       assertFalse(node5.isBlock());
1775:       assertFalse(node5.isInc());
1776:       assertFalse(node5.isRegExp());
1777:       assertFalse(node5.isHook());
1778:       assertFalse(node5.isWith());
1779:       assertFalse(node5.isCatch());
1780:       assertFalse(node5.isIf());
1781:       assertEquals((-1), node5.getLineno());
1782:       assertFalse(boolean4);
1783:       assertEquals(0, nodeArray0.length);
1784:       assertFalse(node0.equals((Object)node2));
1785:       assertFalse(node0.equals((Object)node4));
1786:       assertFalse(node0.equals((Object)node3));
1787:       assertFalse(node0.equals((Object)node5));
1788:       assertFalse(node0.equals((Object)node1));
1789:       assertFalse(node1.equals((Object)node3));
1790:       assertFalse(node1.equals((Object)node4));
1791:       assertFalse(node1.equals((Object)node0));
1792:       assertFalse(node1.equals((Object)node5));
1793:       assertFalse(node1.equals((Object)node2));
1794:       assertFalse(node5.equals((Object)node2));
1795:       assertFalse(node5.equals((Object)node0));
1796:       assertFalse(node5.equals((Object)node3));
1797:       assertFalse(node5.equals((Object)node1));
1798:       assertFalse(node5.equals((Object)node4));
1799:       assertTrue(boolean4 == boolean2);
1800:       assertTrue(boolean4 == boolean1);
1801:       assertTrue(boolean4 == boolean3);
1802:       assertTrue(boolean4 == boolean0);
1803:       
1804:       boolean boolean5 = node4.isName();
1805:       assertFalse(node0.isIf());
1806:       assertFalse(node0.isNE());
1807:       assertFalse(node0.isFor());
1808:       assertFalse(node0.isEmpty());
1809:       assertFalse(node0.isGetterDef());
1810:       assertFalse(node0.isIn());
1811:       assertEquals(330, node0.getType());
1812:       assertFalse(node0.isCase());
1813:       assertFalse(node0.isTry());
1814:       assertFalse(node0.isString());
1815:       assertFalse(node0.isDefaultCase());
1816:       assertFalse(node0.isFunction());
1817:       assertFalse(node0.isDebugger());
1818:       assertEquals(0, node0.getChildCount());
1819:       assertEquals(0, node0.getLineno());
1820:       assertFalse(node0.isParamList());
1821:       assertFalse(node0.isSwitch());
1822:       assertFalse(node0.isArrayLit());
1823:       assertFalse(node0.isStringKey());
1824:       assertFalse(node0.isThrow());
1825:       assertFalse(node0.isThis());
1826:       assertFalse(node0.isFalse());
1827:       assertFalse(node0.isBlock());
1828:       assertFalse(node0.isHook());
1829:       assertFalse(node0.isInc());
1830:       assertFalse(node0.isSetterDef());
1831:       assertFalse(node0.isWith());
1832:       assertFalse(node0.isCatch());
1833:       assertEquals(0, node0.getCharno());
1834:       assertFalse(node0.hasMoreThanOneChild());
1835:       assertFalse(node0.isRegExp());
1836:       assertFalse(node0.isInstanceOf());
1837:       assertFalse(node0.hasChildren());
1838:       assertFalse(node0.isGetElem());
1839:       assertFalse(node0.isNumber());
1840:       assertFalse(node0.isTypeOf());
1841:       assertFalse(node0.isDec());
1842:       assertFalse(node0.isOr());
1843:       assertFalse(node0.isAssign());
1844:       assertFalse(node0.isReturn());
1845:       assertFalse(node0.isLabel());
1846:       assertFalse(node0.isAssignAdd());
1847:       assertFalse(node0.hasOneChild());
1848:       assertFalse(node0.isDo());
1849:       assertFalse(node0.isScript());
1850:       assertFalse(node0.isContinue());
1851:       assertFalse(node0.isObjectLit());
1852:       assertFalse(node0.isNot());
1853:       assertFalse(node0.isCast());
1854:       assertFalse(node0.isAnd());
1855:       assertFalse(node0.isLabelName());
1856:       assertEquals(0, node0.getSourcePosition());
1857:       assertFalse(node0.isBreak());
1858:       assertFalse(node0.isNull());
1859:       assertFalse(node0.isComma());
1860:       assertFalse(node0.isAdd());
1861:       assertFalse(node0.isVar());
1862:       assertFalse(node0.isGetProp());
1863:       assertFalse(node0.isNew());
1864:       assertFalse(node0.isWhile());
1865:       assertFalse(node0.isTrue());
1866:       assertFalse(node0.isCall());
1867:       assertFalse(node0.isExprResult());
1868:       assertFalse(node0.isName());
1869:       assertFalse(node0.isDelProp());
1870:       assertFalse(node0.isVoid());
1871:       assertFalse(node4.isExprResult());
1872:       assertEquals(0, node4.getCharno());
1873:       assertFalse(node4.isNot());
1874:       assertFalse(node4.isAnd());
1875:       assertFalse(node4.isCast());
1876:       assertFalse(node4.isWith());
1877:       assertFalse(node4.isInstanceOf());
1878:       assertFalse(node4.isLabelName());
1879:       assertFalse(node4.isGetElem());
1880:       assertFalse(node4.isAssignAdd());
1881:       assertFalse(node4.isOr());
1882:       assertFalse(node4.isLabel());
1883:       assertFalse(node4.isThrow());
1884:       assertFalse(node4.isDo());
1885:       assertFalse(node4.isInc());
1886:       assertFalse(node4.isSwitch());
1887:       assertFalse(node4.isBlock());
1888:       assertFalse(node4.isHook());
1889:       assertFalse(node4.isStringKey());
1890:       assertFalse(node4.hasMoreThanOneChild());
1891:       assertFalse(node4.isThis());
1892:       assertFalse(node4.isParamList());
1893:       assertFalse(node4.isNumber());
1894:       assertFalse(node4.isGetterDef());
1895:       assertFalse(node4.isFor());
1896:       assertFalse(node4.isTry());
1897:       assertFalse(node4.hasOneChild());
1898:       assertFalse(node4.isCase());
1899:       assertFalse(node4.isScript());
1900:       assertFalse(node4.isDebugger());
1901:       assertFalse(node4.isFunction());
1902:       assertFalse(node4.isTrue());
1903:       assertFalse(node4.isVoid());
1904:       assertFalse(node4.isRegExp());
1905:       assertFalse(node4.isDefaultCase());
1906:       assertFalse(node4.isCatch());
1907:       assertFalse(node4.isDelProp());
1908:       assertFalse(node4.isArrayLit());
1909:       assertEquals(0, node4.getLineno());
1910:       assertFalse(node4.isNE());
1911:       assertFalse(node4.isIf());
1912:       assertEquals(0, node4.getChildCount());
1913:       assertFalse(node4.isNull());
1914:       assertEquals(0, node4.getSourcePosition());
1915:       assertFalse(node4.isVar());
1916:       assertFalse(node4.isIn());
1917:       assertFalse(node4.isEmpty());
1918:       assertFalse(node4.isAdd());
1919:       assertFalse(node4.isNew());
1920:       assertFalse(node4.isSetterDef());
1921:       assertFalse(node4.isWhile());
1922:       assertFalse(node4.isContinue());
1923:       assertFalse(node4.isCall());
1924:       assertFalse(node4.isName());
1925:       assertFalse(node4.isFalse());
1926:       assertFalse(node4.isBreak());
1927:       assertFalse(node4.isComma());
1928:       assertFalse(node4.isTypeOf());
1929:       assertFalse(node4.isReturn());
1930:       assertFalse(node4.isAssign());
1931:       assertFalse(node4.isDec());
1932:       assertFalse(node4.hasChildren());
1933:       assertFalse(node4.isObjectLit());
1934:       assertEquals(330, node4.getType());
1935:       assertFalse(node4.isString());
1936:       assertFalse(node4.isGetProp());
1937:       assertFalse(boolean5);
1938:       assertEquals(0, nodeArray0.length);
1939:       assertFalse(node0.equals((Object)node2));
1940:       assertFalse(node0.equals((Object)node4));
1941:       assertFalse(node0.equals((Object)node3));
1942:       assertFalse(node0.equals((Object)node5));
1943:       assertFalse(node0.equals((Object)node1));
1944:       assertTrue(boolean5 == boolean0);
1945:       assertTrue(boolean5 == boolean3);
1946:       assertTrue(boolean5 == boolean1);
1947:       assertTrue(boolean5 == boolean4);
1948:       assertTrue(boolean5 == boolean2);
1949:       assertFalse(node4.equals((Object)node5));
1950:       assertFalse(node4.equals((Object)node2));
1951:       assertFalse(node4.equals((Object)node3));
1952:       assertFalse(node4.equals((Object)node1));
1953:       assertFalse(node4.equals((Object)node0));
1954:       
1955:       boolean boolean6 = node3.isDelProp();
1956:       assertFalse(node1.isCatch());
1957:       assertFalse(node1.isDebugger());
1958:       assertFalse(node1.isParamList());
1959:       assertFalse(node1.isTrue());
1960:       assertFalse(node1.isVoid());
1961:       assertFalse(node1.isNull());
1962:       assertFalse(node1.isStringKey());
1963:       assertFalse(node1.isVar());
1964:       assertFalse(node1.isEmpty());
1965:       assertFalse(node1.isArrayLit());
1966:       assertFalse(node1.isAdd());
1967:       assertFalse(node1.isNew());
1968:       assertFalse(node1.isSetterDef());
1969:       assertFalse(node1.isFunction());
1970:       assertTrue(node1.isThrow());
1971:       assertFalse(node1.isDefaultCase());
1972:       assertEquals(0, node1.getChildCount());
1973:       assertFalse(node1.isContinue());
1974:       assertFalse(node1.isString());
1975:       assertFalse(node1.isDo());
1976:       assertEquals(49, node1.getType());
1977:       assertFalse(node1.isOr());
1978:       assertEquals((-1), node1.getSourcePosition());
1979:       assertFalse(node1.isCall());
1980:       assertFalse(node1.isName());
1981:       assertFalse(node1.isDelProp());
1982:       assertFalse(node1.isGetElem());
1983:       assertFalse(node1.isBreak());
1984:       assertFalse(node1.isComma());
1985:       assertFalse(node1.isExprResult());
1986:       assertFalse(node1.isTypeOf());
1987:       assertFalse(node1.isReturn());
1988:       assertFalse(node1.isWhile());
1989:       assertFalse(node1.isAssign());
1990:       assertFalse(node1.isDec());
1991:       assertFalse(node1.hasChildren());
1992:       assertFalse(node1.isAnd());
1993:       assertFalse(node1.isObjectLit());
1994:       assertFalse(node1.isWith());
1995:       assertFalse(node1.isInstanceOf());
1996:       assertFalse(node1.isScript());
1997:       assertFalse(node1.isGetProp());
1998:       assertFalse(node1.isNot());
1999:       assertFalse(node1.isCast());
2000:       assertFalse(node1.isFalse());
2001:       assertFalse(node1.isLabelName());
2002:       assertFalse(node1.isAssignAdd());
2003:       assertFalse(node1.isLabel());
2004:       assertFalse(node1.hasMoreThanOneChild());
2005:       assertFalse(node1.isIn());
2006:       assertEquals((-1), node1.getLineno());
2007:       assertFalse(node1.isCase());
2008:       assertFalse(node1.isInc());
2009:       assertFalse(node1.isNE());
2010:       assertFalse(node1.isNumber());
2011:       assertFalse(node1.isSwitch());
2012:       assertFalse(node1.isIf());
2013:       assertFalse(node1.isGetterDef());
2014:       assertEquals((-1), node1.getCharno());
2015:       assertFalse(node1.isTry());
2016:       assertFalse(node1.hasOneChild());
2017:       assertFalse(node1.isThis());
2018:       assertFalse(node1.isRegExp());
2019:       assertFalse(node1.isBlock());
2020:       assertFalse(node1.isHook());
2021:       assertFalse(node1.isFor());
2022:       assertFalse(node2.isCase());
2023:       assertEquals((-1), node2.getCharno());
2024:       assertFalse(node2.isSwitch());
2025:       assertFalse(node2.isHook());
2026:       assertFalse(node2.isFalse());
2027:       assertFalse(node2.isGetterDef());
2028:       assertFalse(node2.isComma());
2029:       assertFalse(node2.isThis());
2030:       assertFalse(node2.isFor());
2031:       assertFalse(node2.isTry());
2032:       assertFalse(node2.isObjectLit());
2033:       assertFalse(node2.isGetProp());
2034:       assertFalse(node2.isDefaultCase());
2035:       assertFalse(node2.isTrue());
2036:       assertFalse(node2.isVoid());
2037:       assertFalse(node2.isArrayLit());
2038:       assertEquals(0, node2.getChildCount());
2039:       assertFalse(node2.isExprResult());
2040:       assertFalse(node2.isGetElem());
2041:       assertFalse(node2.isDelProp());
2042:       assertFalse(node2.isBreak());
2043:       assertFalse(node2.isName());
2044:       assertFalse(node2.isNull());
2045:       assertFalse(node2.isVar());
2046:       assertFalse(node2.isAssignAdd());
2047:       assertFalse(node2.isNew());
2048:       assertFalse(node2.isOr());
2049:       assertFalse(node2.isAdd());
2050:       assertFalse(node2.isEmpty());
2051:       assertFalse(node2.isWhile());
2052:       assertFalse(node2.isDo());
2053:       assertFalse(node2.isBlock());
2054:       assertFalse(node2.isReturn());
2055:       assertFalse(node2.isLabel());
2056:       assertEquals((-1), node2.getLineno());
2057:       assertFalse(node2.isContinue());
2058:       assertFalse(node2.isCall());
2059:       assertFalse(node2.hasMoreThanOneChild());
2060:       assertFalse(node2.isNumber());
2061:       assertFalse(node2.hasChildren());
2062:       assertFalse(node2.isTypeOf());
2063:       assertEquals((-1), node2.getSourcePosition());
2064:       assertFalse(node2.isAssign());
2065:       assertFalse(node2.isDec());
2066:       assertFalse(node2.isLabelName());
2067:       assertFalse(node2.isParamList());
2068:       assertFalse(node2.isStringKey());
2069:       assertTrue(node2.isString());
2070:       assertFalse(node2.hasOneChild());
2071:       assertFalse(node2.isScript());
2072:       assertFalse(node2.isWith());
2073:       assertFalse(node2.isRegExp());
2074:       assertFalse(node2.isNot());
2075:       assertFalse(node2.isAnd());
2076:       assertFalse(node2.isDebugger());
2077:       assertEquals(40, node2.getType());
2078:       assertFalse(node2.isFunction());
2079:       assertFalse(node2.isCatch());
2080:       assertFalse(node2.isInstanceOf());
2081:       assertFalse(node2.isCast());
2082:       assertFalse(node2.isIf());
2083:       assertFalse(node2.isThrow());
2084:       assertFalse(node2.isNE());
2085:       assertFalse(node2.isIn());
2086:       assertFalse(node2.isInc());
2087:       assertFalse(node2.isSetterDef());
2088:       assertFalse(node3.isIn());
2089:       assertFalse(node3.isCase());
2090:       assertFalse(node3.isFor());
2091:       assertFalse(node3.isVoid());
2092:       assertFalse(node3.isEmpty());
2093:       assertFalse(node3.isInc());
2094:       assertFalse(node3.isDelProp());
2095:       assertFalse(node3.isBreak());
2096:       assertFalse(node3.isIf());
2097:       assertFalse(node3.isTrue());
2098:       assertFalse(node3.isNE());
2099:       assertFalse(node3.isInstanceOf());
2100:       assertEquals(0, node3.getChildCount());
2101:       assertFalse(node3.isCatch());
2102:       assertFalse(node3.isRegExp());
2103:       assertFalse(node3.isWith());
2104:       assertFalse(node3.isDefaultCase());
2105:       assertFalse(node3.isVar());
2106:       assertFalse(node3.isThis());
2107:       assertFalse(node3.isHook());
2108:       assertFalse(node3.hasOneChild());
2109:       assertTrue(node3.isString());
2110:       assertFalse(node3.isTry());
2111:       assertFalse(node3.isScript());
2112:       assertFalse(node3.isArrayLit());
2113:       assertFalse(node3.isGetterDef());
2114:       assertFalse(node3.isLabelName());
2115:       assertFalse(node3.isNumber());
2116:       assertFalse(node3.isSwitch());
2117:       assertFalse(node3.isParamList());
2118:       assertEquals((-1), node3.getCharno());
2119:       assertFalse(node3.isStringKey());
2120:       assertFalse(node3.isOr());
2121:       assertEquals((-1), node3.getLineno());
2122:       assertFalse(node3.hasMoreThanOneChild());
2123:       assertFalse(node3.isAssignAdd());
2124:       assertFalse(node3.isContinue());
2125:       assertFalse(node3.isWhile());
2126:       assertFalse(node3.hasChildren());
2127:       assertFalse(node3.isDo());
2128:       assertFalse(node3.isAssign());
2129:       assertFalse(node3.isDec());
2130:       assertFalse(node3.isTypeOf());
2131:       assertFalse(node3.isBlock());
2132:       assertFalse(node3.isLabel());
2133:       assertFalse(node3.isReturn());
2134:       assertFalse(node3.isCall());
2135:       assertFalse(node3.isExprResult());
2136:       assertFalse(node3.isNew());
2137:       assertFalse(node3.isAdd());
2138:       assertFalse(node3.isGetElem());
2139:       assertFalse(node3.isName());
2140:       assertFalse(node3.isNull());
2141:       assertFalse(node3.isSetterDef());
2142:       assertFalse(node3.isGetProp());
2143:       assertFalse(node3.isFalse());
2144:       assertFalse(node3.isFunction());
2145:       assertFalse(node3.isThrow());
2146:       assertFalse(node3.isComma());
2147:       assertEquals(40, node3.getType());
2148:       assertFalse(node3.isCast());
2149:       assertFalse(node3.isNot());
2150:       assertFalse(node3.isAnd());
2151:       assertFalse(node3.isObjectLit());
2152:       assertFalse(node3.isDebugger());
2153:       assertEquals((-1), node3.getSourcePosition());
2154:       assertFalse(boolean6);
2155:       assertFalse(node1.equals((Object)node3));
2156:       assertFalse(node1.equals((Object)node4));
2157:       assertFalse(node1.equals((Object)node0));
2158:       assertFalse(node1.equals((Object)node5));
2159:       assertFalse(node1.equals((Object)node2));
2160:       assertFalse(node2.equals((Object)node5));
2161:       assertFalse(node2.equals((Object)node1));
2162:       assertFalse(node2.equals((Object)node4));
2163:       assertFalse(node2.equals((Object)node0));
2164:       assertFalse(node3.equals((Object)node1));
2165:       assertFalse(node3.equals((Object)node4));
2166:       assertFalse(node3.equals((Object)node0));
2167:       assertFalse(node3.equals((Object)node5));
2168:       assertTrue(boolean6 == boolean4);
2169:       assertTrue(boolean6 == boolean0);
2170:       assertTrue(boolean6 == boolean2);
2171:       assertTrue(boolean6 == boolean3);
2172:       assertTrue(boolean6 == boolean5);
2173:       assertTrue(boolean6 == boolean1);
2174:       
2175:       node2.putIntProp(29, 4095);
2176:       assertFalse(node2.isCase());
2177:       assertEquals((-1), node2.getCharno());
2178:       assertFalse(node2.isSwitch());
2179:       assertFalse(node2.isHook());
2180:       assertFalse(node2.isFalse());
2181:       assertFalse(node2.isGetterDef());
2182:       assertFalse(node2.isComma());
2183:       assertFalse(node2.isThis());
2184:       assertFalse(node2.isFor());
2185:       assertFalse(node2.isTry());
2186:       assertFalse(node2.isObjectLit());
2187:       assertFalse(node2.isGetProp());
2188:       assertFalse(node2.isDefaultCase());
2189:       assertFalse(node2.isTrue());
2190:       assertFalse(node2.isVoid());
2191:       assertFalse(node2.isArrayLit());
2192:       assertEquals(0, node2.getChildCount());
2193:       assertFalse(node2.isExprResult());
2194:       assertFalse(node2.isGetElem());
2195:       assertFalse(node2.isDelProp());
2196:       assertFalse(node2.isBreak());
2197:       assertFalse(node2.isName());
2198:       assertFalse(node2.isNull());
2199:       assertFalse(node2.isVar());
2200:       assertFalse(node2.isAssignAdd());
2201:       assertFalse(node2.isNew());
2202:       assertFalse(node2.isOr());
2203:       assertFalse(node2.isAdd());
2204:       assertFalse(node2.isEmpty());
2205:       assertFalse(node2.isWhile());
2206:       assertFalse(node2.isDo());
2207:       assertFalse(node2.isBlock());
2208:       assertFalse(node2.isReturn());
2209:       assertFalse(node2.isLabel());
2210:       assertEquals((-1), node2.getLineno());
2211:       assertFalse(node2.isContinue());
2212:       assertFalse(node2.isCall());
2213:       assertFalse(node2.hasMoreThanOneChild());
2214:       assertFalse(node2.isNumber());
2215:       assertFalse(node2.hasChildren());
2216:       assertFalse(node2.isTypeOf());
2217:       assertEquals((-1), node2.getSourcePosition());
2218:       assertFalse(node2.isAssign());
2219:       assertFalse(node2.isDec());
2220:       assertFalse(node2.isLabelName());
2221:       assertFalse(node2.isParamList());
2222:       assertFalse(node2.isStringKey());
2223:       assertTrue(node2.isString());
2224:       assertFalse(node2.hasOneChild());
2225:       assertFalse(node2.isScript());
2226:       assertFalse(node2.isWith());
2227:       assertFalse(node2.isRegExp());
2228:       assertFalse(node2.isNot());
2229:       assertFalse(node2.isAnd());
2230:       assertFalse(node2.isDebugger());
2231:       assertEquals(40, node2.getType());
2232:       assertFalse(node2.isFunction());
2233:       assertFalse(node2.isCatch());
2234:       assertFalse(node2.isInstanceOf());
2235:       assertFalse(node2.isCast());
2236:       assertFalse(node2.isIf());
2237:       assertFalse(node2.isThrow());
2238:       assertFalse(node2.isNE());
2239:       assertFalse(node2.isIn());
2240:       assertFalse(node2.isInc());
2241:       assertFalse(node2.isSetterDef());
2242:       assertFalse(node2.equals((Object)node5));
2243:       assertFalse(node2.equals((Object)node1));
2244:       assertFalse(node2.equals((Object)node4));
2245:       assertFalse(node2.equals((Object)node0));
2246:       
2247:       boolean boolean7 = node3.isOr();
2248:       assertFalse(node1.isCatch());
2249:       assertFalse(node1.isDebugger());
2250:       assertFalse(node1.isParamList());
2251:       assertFalse(node1.isTrue());
2252:       assertFalse(node1.isVoid());
2253:       assertFalse(node1.isNull());
2254:       assertFalse(node1.isStringKey());
2255:       assertFalse(node1.isVar());
2256:       assertFalse(node1.isEmpty());
2257:       assertFalse(node1.isArrayLit());
2258:       assertFalse(node1.isAdd());
2259:       assertFalse(node1.isNew());
2260:       assertFalse(node1.isSetterDef());
2261:       assertFalse(node1.isFunction());
2262:       assertTrue(node1.isThrow());
2263:       assertFalse(node1.isDefaultCase());
2264:       assertEquals(0, node1.getChildCount());
2265:       assertFalse(node1.isContinue());
2266:       assertFalse(node1.isString());
2267:       assertFalse(node1.isDo());
2268:       assertEquals(49, node1.getType());
2269:       assertFalse(node1.isOr());
2270:       assertEquals((-1), node1.getSourcePosition());
2271:       assertFalse(node1.isCall());
2272:       assertFalse(node1.isName());
2273:       assertFalse(node1.isDelProp());
2274:       assertFalse(node1.isGetElem());
2275:       assertFalse(node1.isBreak());
2276:       assertFalse(node1.isComma());
2277:       assertFalse(node1.isExprResult());
2278:       assertFalse(node1.isTypeOf());
2279:       assertFalse(node1.isReturn());
2280:       assertFalse(node1.isWhile());
2281:       assertFalse(node1.isAssign());
2282:       assertFalse(node1.isDec());
2283:       assertFalse(node1.hasChildren());
2284:       assertFalse(node1.isAnd());
2285:       assertFalse(node1.isObjectLit());
2286:       assertFalse(node1.isWith());
2287:       assertFalse(node1.isInstanceOf());
2288:       assertFalse(node1.isScript());
2289:       assertFalse(node1.isGetProp());
2290:       assertFalse(node1.isNot());
2291:       assertFalse(node1.isCast());
2292:       assertFalse(node1.isFalse());
2293:       assertFalse(node1.isLabelName());
2294:       assertFalse(node1.isAssignAdd());
2295:       assertFalse(node1.isLabel());
2296:       assertFalse(node1.hasMoreThanOneChild());
2297:       assertFalse(node1.isIn());
2298:       assertEquals((-1), node1.getLineno());
2299:       assertFalse(node1.isCase());
2300:       assertFalse(node1.isInc());
2301:       assertFalse(node1.isNE());
2302:       assertFalse(node1.isNumber());
2303:       assertFalse(node1.isSwitch());
2304:       assertFalse(node1.isIf());
2305:       assertFalse(node1.isGetterDef());
2306:       assertEquals((-1), node1.getCharno());
2307:       assertFalse(node1.isTry());
2308:       assertFalse(node1.hasOneChild());
2309:       assertFalse(node1.isThis());
2310:       assertFalse(node1.isRegExp());
2311:       assertFalse(node1.isBlock());
2312:       assertFalse(node1.isHook());
2313:       assertFalse(node1.isFor());
2314:       assertFalse(node2.isCase());
2315:       assertEquals((-1), node2.getCharno());
2316:       assertFalse(node2.isSwitch());
2317:       assertFalse(node2.isHook());
2318:       assertFalse(node2.isFalse());
2319:       assertFalse(node2.isGetterDef());
2320:       assertFalse(node2.isComma());
2321:       assertFalse(node2.isThis());
2322:       assertFalse(node2.isFor());
2323:       assertFalse(node2.isTry());
2324:       assertFalse(node2.isObjectLit());
2325:       assertFalse(node2.isGetProp());
2326:       assertFalse(node2.isDefaultCase());
2327:       assertFalse(node2.isTrue());
2328:       assertFalse(node2.isVoid());
2329:       assertFalse(node2.isArrayLit());
2330:       assertEquals(0, node2.getChildCount());
2331:       assertFalse(node2.isExprResult());
2332:       assertFalse(node2.isGetElem());
2333:       assertFalse(node2.isDelProp());
2334:       assertFalse(node2.isBreak());
2335:       assertFalse(node2.isName());
2336:       assertFalse(node2.isNull());
2337:       assertFalse(node2.isVar());
2338:       assertFalse(node2.isAssignAdd());
2339:       assertFalse(node2.isNew());
2340:       assertFalse(node2.isOr());
2341:       assertFalse(node2.isAdd());
2342:       assertFalse(node2.isEmpty());
2343:       assertFalse(node2.isWhile());
2344:       assertFalse(node2.isDo());
2345:       assertFalse(node2.isBlock());
2346:       assertFalse(node2.isReturn());
2347:       assertFalse(node2.isLabel());
2348:       assertEquals((-1), node2.getLineno());
2349:       assertFalse(node2.isContinue());
2350:       assertFalse(node2.isCall());
2351:       assertFalse(node2.hasMoreThanOneChild());
2352:       assertFalse(node2.isNumber());
2353:       assertFalse(node2.hasChildren());
2354:       assertFalse(node2.isTypeOf());
2355:       assertEquals((-1), node2.getSourcePosition());
2356:       assertFalse(node2.isAssign());
2357:       assertFalse(node2.isDec());
2358:       assertFalse(node2.isLabelName());
2359:       assertFalse(node2.isParamList());
2360:       assertFalse(node2.isStringKey());
2361:       assertTrue(node2.isString());
2362:       assertFalse(node2.hasOneChild());
2363:       assertFalse(node2.isScript());
2364:       assertFalse(node2.isWith());
2365:       assertFalse(node2.isRegExp());
2366:       assertFalse(node2.isNot());
2367:       assertFalse(node2.isAnd());
2368:       assertFalse(node2.isDebugger());
2369:       assertEquals(40, node2.getType());
2370:       assertFalse(node2.isFunction());
2371:       assertFalse(node2.isCatch());
2372:       assertFalse(node2.isInstanceOf());
2373:       assertFalse(node2.isCast());
2374:       assertFalse(node2.isIf());
2375:       assertFalse(node2.isThrow());
2376:       assertFalse(node2.isNE());
2377:       assertFalse(node2.isIn());
2378:       assertFalse(node2.isInc());
2379:       assertFalse(node2.isSetterDef());
2380:       assertFalse(node3.isIn());
2381:       assertFalse(node3.isCase());
2382:       assertFalse(node3.isFor());
2383:       assertFalse(node3.isVoid());
2384:       assertFalse(node3.isEmpty());
2385:       assertFalse(node3.isInc());
2386:       assertFalse(node3.isDelProp());
2387:       assertFalse(node3.isBreak());
2388:       assertFalse(node3.isIf());
2389:       assertFalse(node3.isTrue());
2390:       assertFalse(node3.isNE());
2391:       assertFalse(node3.isInstanceOf());
2392:       assertEquals(0, node3.getChildCount());
2393:       assertFalse(node3.isCatch());
2394:       assertFalse(node3.isRegExp());
2395:       assertFalse(node3.isWith());
2396:       assertFalse(node3.isDefaultCase());
2397:       assertFalse(node3.isVar());
2398:       assertFalse(node3.isThis());
2399:       assertFalse(node3.isHook());
2400:       assertFalse(node3.hasOneChild());
2401:       assertTrue(node3.isString());
2402:       assertFalse(node3.isTry());
2403:       assertFalse(node3.isScript());
2404:       assertFalse(node3.isArrayLit());
2405:       assertFalse(node3.isGetterDef());
2406:       assertFalse(node3.isLabelName());
2407:       assertFalse(node3.isNumber());
2408:       assertFalse(node3.isSwitch());
2409:       assertFalse(node3.isParamList());
2410:       assertEquals((-1), node3.getCharno());
2411:       assertFalse(node3.isStringKey());
2412:       assertFalse(node3.isOr());
2413:       assertEquals((-1), node3.getLineno());
2414:       assertFalse(node3.hasMoreThanOneChild());
2415:       assertFalse(node3.isAssignAdd());
2416:       assertFalse(node3.isContinue());
2417:       assertFalse(node3.isWhile());
2418:       assertFalse(node3.hasChildren());
2419:       assertFalse(node3.isDo());
2420:       assertFalse(node3.isAssign());
2421:       assertFalse(node3.isDec());
2422:       assertFalse(node3.isTypeOf());
2423:       assertFalse(node3.isBlock());
2424:       assertFalse(node3.isLabel());
2425:       assertFalse(node3.isReturn());
2426:       assertFalse(node3.isCall());
2427:       assertFalse(node3.isExprResult());
2428:       assertFalse(node3.isNew());
2429:       assertFalse(node3.isAdd());
2430:       assertFalse(node3.isGetElem());
2431:       assertFalse(node3.isName());
2432:       assertFalse(node3.isNull());
2433:       assertFalse(node3.isSetterDef());
2434:       assertFalse(node3.isGetProp());
2435:       assertFalse(node3.isFalse());
2436:       assertFalse(node3.isFunction());
2437:       assertFalse(node3.isThrow());
2438:       assertFalse(node3.isComma());
2439:       assertEquals(40, node3.getType());
2440:       assertFalse(node3.isCast());
2441:       assertFalse(node3.isNot());
2442:       assertFalse(node3.isAnd());
2443:       assertFalse(node3.isObjectLit());
2444:       assertFalse(node3.isDebugger());
2445:       assertEquals((-1), node3.getSourcePosition());
2446:       assertFalse(boolean7);
2447:       assertFalse(node1.equals((Object)node3));
2448:       assertFalse(node1.equals((Object)node4));
2449:       assertFalse(node1.equals((Object)node0));
2450:       assertFalse(node1.equals((Object)node5));
2451:       assertFalse(node1.equals((Object)node2));
2452:       assertFalse(node2.equals((Object)node5));
2453:       assertFalse(node2.equals((Object)node1));
2454:       assertFalse(node2.equals((Object)node4));
2455:       assertFalse(node2.equals((Object)node0));
2456:       assertFalse(node3.equals((Object)node1));
2457:       assertFalse(node3.equals((Object)node4));
2458:       assertFalse(node3.equals((Object)node0));
2459:       assertFalse(node3.equals((Object)node5));
2460:       assertTrue(boolean7 == boolean1);
2461:       assertTrue(boolean7 == boolean4);
2462:       assertTrue(boolean7 == boolean5);
2463:       assertTrue(boolean7 == boolean2);
2464:       assertTrue(boolean7 == boolean3);
2465:       assertTrue(boolean7 == boolean0);
2466:       assertTrue(boolean7 == boolean6);
2467:       
2468:       boolean boolean8 = node2.isThis();
2469:       assertFalse(node2.isCase());
2470:       assertEquals((-1), node2.getCharno());
2471:       assertFalse(node2.isSwitch());
2472:       assertFalse(node2.isHook());
2473:       assertFalse(node2.isFalse());
2474:       assertFalse(node2.isGetterDef());
2475:       assertFalse(node2.isComma());
2476:       assertFalse(node2.isThis());
2477:       assertFalse(node2.isFor());
2478:       assertFalse(node2.isTry());
2479:       assertFalse(node2.isObjectLit());
2480:       assertFalse(node2.isGetProp());
2481:       assertFalse(node2.isDefaultCase());
2482:       assertFalse(node2.isTrue());
2483:       assertFalse(node2.isVoid());
2484:       assertFalse(node2.isArrayLit());
2485:       assertEquals(0, node2.getChildCount());
2486:       assertFalse(node2.isExprResult());
2487:       assertFalse(node2.isGetElem());
2488:       assertFalse(node2.isDelProp());
2489:       assertFalse(node2.isBreak());
2490:       assertFalse(node2.isName());
2491:       assertFalse(node2.isNull());
2492:       assertFalse(node2.isVar());
2493:       assertFalse(node2.isAssignAdd());
2494:       assertFalse(node2.isNew());
2495:       assertFalse(node2.isOr());
2496:       assertFalse(node2.isAdd());
2497:       assertFalse(node2.isEmpty());
2498:       assertFalse(node2.isWhile());
2499:       assertFalse(node2.isDo());
2500:       assertFalse(node2.isBlock());
2501:       assertFalse(node2.isReturn());
2502:       assertFalse(node2.isLabel());
2503:       assertEquals((-1), node2.getLineno());
2504:       assertFalse(node2.isContinue());
2505:       assertFalse(node2.isCall());
2506:       assertFalse(node2.hasMoreThanOneChild());
2507:       assertFalse(node2.isNumber());
2508:       assertFalse(node2.hasChildren());
2509:       assertFalse(node2.isTypeOf());
2510:       assertEquals((-1), node2.getSourcePosition());
2511:       assertFalse(node2.isAssign());
2512:       assertFalse(node2.isDec());
2513:       assertFalse(node2.isLabelName());
2514:       assertFalse(node2.isParamList());
2515:       assertFalse(node2.isStringKey());
2516:       assertTrue(node2.isString());
2517:       assertFalse(node2.hasOneChild());
2518:       assertFalse(node2.isScript());
2519:       assertFalse(node2.isWith());
2520:       assertFalse(node2.isRegExp());
2521:       assertFalse(node2.isNot());
2522:       assertFalse(node2.isAnd());
2523:       assertFalse(node2.isDebugger());
2524:       assertEquals(40, node2.getType());
2525:       assertFalse(node2.isFunction());
2526:       assertFalse(node2.isCatch());
2527:       assertFalse(node2.isInstanceOf());
2528:       assertFalse(node2.isCast());
2529:       assertFalse(node2.isIf());
2530:       assertFalse(node2.isThrow());
2531:       assertFalse(node2.isNE());
2532:       assertFalse(node2.isIn());
2533:       assertFalse(node2.isInc());
2534:       assertFalse(node2.isSetterDef());
2535:       assertFalse(boolean8);
2536:       assertFalse(node2.equals((Object)node5));
2537:       assertFalse(node2.equals((Object)node1));
2538:       assertFalse(node2.equals((Object)node4));
2539:       assertFalse(node2.equals((Object)node0));
2540:       assertTrue(boolean8 == boolean3);
2541:       assertTrue(boolean8 == boolean4);
2542:       assertTrue(boolean8 == boolean6);
2543:       assertTrue(boolean8 == boolean7);
2544:       assertTrue(boolean8 == boolean0);
2545:       assertTrue(boolean8 == boolean2);
2546:       assertTrue(boolean8 == boolean1);
2547:       assertTrue(boolean8 == boolean5);
2548:   }
2549: }
RegularFileObject[/tmp/EvoSuite_157_1629222892209/com/google/javascript/rhino/Node_157_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:52 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_157_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_157_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_157_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.JSTypeNative",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.common.collect.AbstractIndexedListIterator",
340:       "com.google.common.collect.Iterators$11",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.TemplatizedType",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.javascript.rhino.JSTypeExpression",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.common.collect.Iterators$12",
366:       "com.google.javascript.rhino.jstype.NamedType"
367:     );
368:   }
369: }

[MASTER] 17:54:53.294 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node[] nodeArray0 = new Node[0];
Node node0 = new Node(330, nodeArray0);
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertEquals(330, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertEquals(0, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertEquals(0, nodeArray0.length);
assertNotNull(node0);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);

Node node1 = new Node(49);
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertTrue(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertEquals(49, node1.getType());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isGetterDef());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isBlock());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isIf());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertNotNull(node2);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));

Node node3 = node2.useSourceInfoIfMissingFrom(node1);
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertTrue(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertEquals(49, node1.getType());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isGetterDef());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isBlock());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isIf());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isCase());
assertFalse(node3.isFor());
assertFalse(node3.isVoid());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isIf());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isInstanceOf());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isWith());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVar());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.hasOneChild());
assertTrue(node3.isString());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.isArrayLit());
assertFalse(node3.isGetterDef());
assertFalse(node3.isLabelName());
assertFalse(node3.isNumber());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isStringKey());
assertFalse(node3.isOr());
assertEquals((-1), node3.getLineno());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isContinue());
assertFalse(node3.isWhile());
assertFalse(node3.hasChildren());
assertFalse(node3.isDo());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isBlock());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertFalse(node3.isCall());
assertFalse(node3.isExprResult());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isGetElem());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetProp());
assertFalse(node3.isFalse());
assertFalse(node3.isFunction());
assertFalse(node3.isThrow());
assertFalse(node3.isComma());
assertEquals(40, node3.getType());
assertFalse(node3.isCast());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertNotNull(node3);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));

Iterable<Node> iterable0 = node3.children();
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertTrue(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertEquals(49, node1.getType());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isGetterDef());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isBlock());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isIf());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isCase());
assertFalse(node3.isFor());
assertFalse(node3.isVoid());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isIf());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isInstanceOf());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isWith());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVar());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.hasOneChild());
assertTrue(node3.isString());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.isArrayLit());
assertFalse(node3.isGetterDef());
assertFalse(node3.isLabelName());
assertFalse(node3.isNumber());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isStringKey());
assertFalse(node3.isOr());
assertEquals((-1), node3.getLineno());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isContinue());
assertFalse(node3.isWhile());
assertFalse(node3.hasChildren());
assertFalse(node3.isDo());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isBlock());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertFalse(node3.isCall());
assertFalse(node3.isExprResult());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isGetElem());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetProp());
assertFalse(node3.isFalse());
assertFalse(node3.isFunction());
assertFalse(node3.isThrow());
assertFalse(node3.isComma());
assertEquals(40, node3.getType());
assertFalse(node3.isCast());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));

boolean boolean0 = node1.isGetProp();
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertTrue(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertEquals(49, node1.getType());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(boolean0);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));

boolean boolean1 = node3.hasChildren();
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertTrue(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertEquals(49, node1.getType());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isGetterDef());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isBlock());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isIf());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isCase());
assertFalse(node3.isFor());
assertFalse(node3.isVoid());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isIf());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isInstanceOf());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isWith());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVar());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.hasOneChild());
assertTrue(node3.isString());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.isArrayLit());
assertFalse(node3.isGetterDef());
assertFalse(node3.isLabelName());
assertFalse(node3.isNumber());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isStringKey());
assertFalse(node3.isOr());
assertEquals((-1), node3.getLineno());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isContinue());
assertFalse(node3.isWhile());
assertFalse(node3.hasChildren());
assertFalse(node3.isDo());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isBlock());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertFalse(node3.isCall());
assertFalse(node3.isExprResult());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isGetElem());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetProp());
assertFalse(node3.isFalse());
assertFalse(node3.isFunction());
assertFalse(node3.isThrow());
assertFalse(node3.isComma());
assertEquals(40, node3.getType());
assertFalse(node3.isCast());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertFalse(boolean1);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertTrue(boolean1 == boolean0);

boolean boolean2 = node2.isSwitch();
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isGetterDef());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isBlock());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isIf());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(boolean2);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

Node node4 = node0.cloneNode();
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertEquals(330, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertEquals(0, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node4.isExprResult());
assertEquals(0, node4.getCharno());
assertFalse(node4.isNot());
assertFalse(node4.isAnd());
assertFalse(node4.isCast());
assertFalse(node4.isWith());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isLabelName());
assertFalse(node4.isGetElem());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isOr());
assertFalse(node4.isLabel());
assertFalse(node4.isThrow());
assertFalse(node4.isDo());
assertFalse(node4.isInc());
assertFalse(node4.isSwitch());
assertFalse(node4.isBlock());
assertFalse(node4.isHook());
assertFalse(node4.isStringKey());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isThis());
assertFalse(node4.isParamList());
assertFalse(node4.isNumber());
assertFalse(node4.isGetterDef());
assertFalse(node4.isFor());
assertFalse(node4.isTry());
assertFalse(node4.hasOneChild());
assertFalse(node4.isCase());
assertFalse(node4.isScript());
assertFalse(node4.isDebugger());
assertFalse(node4.isFunction());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertFalse(node4.isRegExp());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isCatch());
assertFalse(node4.isDelProp());
assertFalse(node4.isArrayLit());
assertEquals(0, node4.getLineno());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isNull());
assertEquals(0, node4.getSourcePosition());
assertFalse(node4.isVar());
assertFalse(node4.isIn());
assertFalse(node4.isEmpty());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isSetterDef());
assertFalse(node4.isWhile());
assertFalse(node4.isContinue());
assertFalse(node4.isCall());
assertFalse(node4.isName());
assertFalse(node4.isFalse());
assertFalse(node4.isBreak());
assertFalse(node4.isComma());
assertFalse(node4.isTypeOf());
assertFalse(node4.isReturn());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isObjectLit());
assertEquals(330, node4.getType());
assertFalse(node4.isString());
assertFalse(node4.isGetProp());
assertEquals(0, nodeArray0.length);
assertNotNull(node4);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags1.valueOf());
assertEquals(48, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertEquals(31, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertNotNull(node_SideEffectFlags3);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertNotNull(node_SideEffectFlags4);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertNotNull(node_SideEffectFlags5);

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setMutatesGlobalState();
assertEquals(0, node_SideEffectFlags6.valueOf());
assertTrue(node_SideEffectFlags6.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertNotNull(node_SideEffectFlags6);

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setReturnsTainted();
assertEquals(0, node_SideEffectFlags6.valueOf());
assertTrue(node_SideEffectFlags6.areAllFlagsSet());
assertTrue(node_SideEffectFlags7.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags7.valueOf());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertNotNull(node_SideEffectFlags7);

Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags7.setMutatesArguments();
assertEquals(0, node_SideEffectFlags6.valueOf());
assertTrue(node_SideEffectFlags6.areAllFlagsSet());
assertTrue(node_SideEffectFlags7.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags7.valueOf());
assertTrue(node_SideEffectFlags8.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags8.valueOf());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertNotNull(node_SideEffectFlags8);

Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags2.setMutatesGlobalState();
assertTrue(node_SideEffectFlags9.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags9.valueOf());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags9);

Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags0.setMutatesArguments();
assertEquals(0, node_SideEffectFlags10.valueOf());
assertTrue(node_SideEffectFlags10.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags10);

Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags10.setMutatesGlobalState();
assertEquals(0, node_SideEffectFlags10.valueOf());
assertTrue(node_SideEffectFlags10.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags11.valueOf());
assertTrue(node_SideEffectFlags11.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags11);

Node node5 = new Node(48, node1, node0);
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertEquals(330, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertEquals(0, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertTrue(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertEquals(49, node1.getType());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertEquals(48, node5.getType());
assertFalse(node5.isParamList());
assertFalse(node5.isNull());
assertFalse(node5.isVar());
assertFalse(node5.isSetterDef());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isDebugger());
assertFalse(node5.isFunction());
assertFalse(node5.isContinue());
assertFalse(node5.isStringKey());
assertFalse(node5.isArrayLit());
assertFalse(node5.isLabel());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isReturn());
assertFalse(node5.isTypeOf());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isOr());
assertFalse(node5.isAssign());
assertFalse(node5.isDec());
assertFalse(node5.isWhile());
assertFalse(node5.isString());
assertFalse(node5.isEmpty());
assertFalse(node5.isDo());
assertFalse(node5.isAdd());
assertFalse(node5.isNew());
assertFalse(node5.isExprResult());
assertFalse(node5.isTrue());
assertFalse(node5.isName());
assertFalse(node5.isGetElem());
assertFalse(node5.isCall());
assertFalse(node5.isBreak());
assertFalse(node5.isDelProp());
assertTrue(node5.hasMoreThanOneChild());
assertFalse(node5.isVoid());
assertEquals(2, node5.getChildCount());
assertFalse(node5.isGetProp());
assertFalse(node5.isThis());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isObjectLit());
assertFalse(node5.isComma());
assertFalse(node5.isThrow());
assertFalse(node5.isScript());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isNot());
assertFalse(node5.isFalse());
assertFalse(node5.isAnd());
assertFalse(node5.isCast());
assertFalse(node5.isSwitch());
assertFalse(node5.isLabelName());
assertTrue(node5.hasChildren());
assertFalse(node5.isNE());
assertFalse(node5.isNumber());
assertFalse(node5.isIn());
assertFalse(node5.isGetterDef());
assertFalse(node5.isCase());
assertFalse(node5.isFor());
assertFalse(node5.hasOneChild());
assertFalse(node5.isTry());
assertFalse(node5.isBlock());
assertFalse(node5.isInc());
assertFalse(node5.isRegExp());
assertFalse(node5.isHook());
assertFalse(node5.isWith());
assertFalse(node5.isCatch());
assertFalse(node5.isIf());
assertEquals((-1), node5.getLineno());
assertEquals(0, nodeArray0.length);
assertNotNull(node5);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node4));

boolean boolean3 = node1.hasOneChild();
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertTrue(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertEquals(49, node1.getType());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(boolean3);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);

boolean boolean4 = node5.isEquivalentToShallow(node0);
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertEquals(330, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertEquals(0, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertTrue(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertEquals(49, node1.getType());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertEquals(48, node5.getType());
assertFalse(node5.isParamList());
assertFalse(node5.isNull());
assertFalse(node5.isVar());
assertFalse(node5.isSetterDef());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isDebugger());
assertFalse(node5.isFunction());
assertFalse(node5.isContinue());
assertFalse(node5.isStringKey());
assertFalse(node5.isArrayLit());
assertFalse(node5.isLabel());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isReturn());
assertFalse(node5.isTypeOf());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isOr());
assertFalse(node5.isAssign());
assertFalse(node5.isDec());
assertFalse(node5.isWhile());
assertFalse(node5.isString());
assertFalse(node5.isEmpty());
assertFalse(node5.isDo());
assertFalse(node5.isAdd());
assertFalse(node5.isNew());
assertFalse(node5.isExprResult());
assertFalse(node5.isTrue());
assertFalse(node5.isName());
assertFalse(node5.isGetElem());
assertFalse(node5.isCall());
assertFalse(node5.isBreak());
assertFalse(node5.isDelProp());
assertTrue(node5.hasMoreThanOneChild());
assertFalse(node5.isVoid());
assertEquals(2, node5.getChildCount());
assertFalse(node5.isGetProp());
assertFalse(node5.isThis());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isObjectLit());
assertFalse(node5.isComma());
assertFalse(node5.isThrow());
assertFalse(node5.isScript());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isNot());
assertFalse(node5.isFalse());
assertFalse(node5.isAnd());
assertFalse(node5.isCast());
assertFalse(node5.isSwitch());
assertFalse(node5.isLabelName());
assertTrue(node5.hasChildren());
assertFalse(node5.isNE());
assertFalse(node5.isNumber());
assertFalse(node5.isIn());
assertFalse(node5.isGetterDef());
assertFalse(node5.isCase());
assertFalse(node5.isFor());
assertFalse(node5.hasOneChild());
assertFalse(node5.isTry());
assertFalse(node5.isBlock());
assertFalse(node5.isInc());
assertFalse(node5.isRegExp());
assertFalse(node5.isHook());
assertFalse(node5.isWith());
assertFalse(node5.isCatch());
assertFalse(node5.isIf());
assertEquals((-1), node5.getLineno());
assertFalse(boolean4);
assertEquals(0, nodeArray0.length);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node4));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);

boolean boolean5 = node4.isName();
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertEquals(330, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertEquals(0, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isScript());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isGetProp());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node4.isExprResult());
assertEquals(0, node4.getCharno());
assertFalse(node4.isNot());
assertFalse(node4.isAnd());
assertFalse(node4.isCast());
assertFalse(node4.isWith());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isLabelName());
assertFalse(node4.isGetElem());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isOr());
assertFalse(node4.isLabel());
assertFalse(node4.isThrow());
assertFalse(node4.isDo());
assertFalse(node4.isInc());
assertFalse(node4.isSwitch());
assertFalse(node4.isBlock());
assertFalse(node4.isHook());
assertFalse(node4.isStringKey());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isThis());
assertFalse(node4.isParamList());
assertFalse(node4.isNumber());
assertFalse(node4.isGetterDef());
assertFalse(node4.isFor());
assertFalse(node4.isTry());
assertFalse(node4.hasOneChild());
assertFalse(node4.isCase());
assertFalse(node4.isScript());
assertFalse(node4.isDebugger());
assertFalse(node4.isFunction());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertFalse(node4.isRegExp());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isCatch());
assertFalse(node4.isDelProp());
assertFalse(node4.isArrayLit());
assertEquals(0, node4.getLineno());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isNull());
assertEquals(0, node4.getSourcePosition());
assertFalse(node4.isVar());
assertFalse(node4.isIn());
assertFalse(node4.isEmpty());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isSetterDef());
assertFalse(node4.isWhile());
assertFalse(node4.isContinue());
assertFalse(node4.isCall());
assertFalse(node4.isName());
assertFalse(node4.isFalse());
assertFalse(node4.isBreak());
assertFalse(node4.isComma());
assertFalse(node4.isTypeOf());
assertFalse(node4.isReturn());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isObjectLit());
assertEquals(330, node4.getType());
assertFalse(node4.isString());
assertFalse(node4.isGetProp());
assertFalse(boolean5);
assertEquals(0, nodeArray0.length);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertFalse(node4.equals((Object)node5));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));

boolean boolean6 = node3.isDelProp();
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertTrue(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertEquals(49, node1.getType());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isGetterDef());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isBlock());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isIf());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isCase());
assertFalse(node3.isFor());
assertFalse(node3.isVoid());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isIf());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isInstanceOf());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isWith());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVar());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.hasOneChild());
assertTrue(node3.isString());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.isArrayLit());
assertFalse(node3.isGetterDef());
assertFalse(node3.isLabelName());
assertFalse(node3.isNumber());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isStringKey());
assertFalse(node3.isOr());
assertEquals((-1), node3.getLineno());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isContinue());
assertFalse(node3.isWhile());
assertFalse(node3.hasChildren());
assertFalse(node3.isDo());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isBlock());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertFalse(node3.isCall());
assertFalse(node3.isExprResult());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isGetElem());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetProp());
assertFalse(node3.isFalse());
assertFalse(node3.isFunction());
assertFalse(node3.isThrow());
assertFalse(node3.isComma());
assertEquals(40, node3.getType());
assertFalse(node3.isCast());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertFalse(boolean6);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node5));
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean1);

node2.putIntProp(29, 4095);
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isGetterDef());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isBlock());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isIf());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));

boolean boolean7 = node3.isOr();
assertFalse(node1.isCatch());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertTrue(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertEquals(49, node1.getType());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isGetterDef());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isBlock());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isIf());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isCase());
assertFalse(node3.isFor());
assertFalse(node3.isVoid());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isIf());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isInstanceOf());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isWith());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVar());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.hasOneChild());
assertTrue(node3.isString());
assertFalse(node3.isTry());
assertFalse(node3.isScript());
assertFalse(node3.isArrayLit());
assertFalse(node3.isGetterDef());
assertFalse(node3.isLabelName());
assertFalse(node3.isNumber());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isStringKey());
assertFalse(node3.isOr());
assertEquals((-1), node3.getLineno());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isContinue());
assertFalse(node3.isWhile());
assertFalse(node3.hasChildren());
assertFalse(node3.isDo());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isBlock());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertFalse(node3.isCall());
assertFalse(node3.isExprResult());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isGetElem());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isGetProp());
assertFalse(node3.isFalse());
assertFalse(node3.isFunction());
assertFalse(node3.isThrow());
assertFalse(node3.isComma());
assertEquals(40, node3.getType());
assertFalse(node3.isCast());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertFalse(boolean7);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node5));
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean6);

boolean boolean8 = node2.isThis();
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isGetterDef());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isBlock());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isDebugger());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isIf());
assertFalse(node2.isThrow());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(boolean8);
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean8 == boolean3);
assertTrue(boolean8 == boolean4);
assertTrue(boolean8 == boolean6);
assertTrue(boolean8 == boolean7);
assertTrue(boolean8 == boolean0);
assertTrue(boolean8 == boolean2);
assertTrue(boolean8 == boolean1);
assertTrue(boolean8 == boolean5);


[MASTER] 17:54:53.862 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_158_1629222893295/com/google/javascript/rhino/Node_158_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_158_1629222893295/com/google/javascript/rhino/Node_158_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:53.862 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:53.862 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:53.862 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 855
[MASTER] 17:54:53.864 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_158_1629222893295/com/google/javascript/rhino/Node_158_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:53 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_158_tmp__ESTest extends Node_158_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node[] nodeArray0 = new Node[0];
21:       Node node0 = new Node(330, nodeArray0);
22:       assertFalse(node0.hasMoreThanOneChild());
23:       assertFalse(node0.isOr());
24:       assertFalse(node0.isContinue());
25:       assertFalse(node0.isNumber());
26:       assertFalse(node0.isLabelName());
27:       assertFalse(node0.isCast());
28:       assertFalse(node0.isVar());
29:       assertFalse(node0.isAdd());
30:       assertFalse(node0.isSetterDef());
31:       assertFalse(node0.isNew());
32:       assertFalse(node0.isDo());
33:       assertFalse(node0.isLabel());
34:       assertFalse(node0.isAssignAdd());
35:       assertFalse(node0.isCatch());
36:       assertEquals(0, node0.getChildCount());
37:       assertFalse(node0.isWith());
38:       assertFalse(node0.isInstanceOf());
39:       assertEquals(0, node0.getCharno());
40:       assertFalse(node0.isParamList());
41:       assertFalse(node0.isStringKey());
42:       assertFalse(node0.isHook());
43:       assertFalse(node0.hasOneChild());
44:       assertFalse(node0.isScript());
45:       assertFalse(node0.isThis());
46:       assertFalse(node0.isRegExp());
47:       assertFalse(node0.isTry());
48:       assertFalse(node0.isFor());
49:       assertFalse(node0.isBlock());
50:       assertFalse(node0.isCase());
51:       assertFalse(node0.isIn());
52:       assertFalse(node0.isString());
53:       assertFalse(node0.isSwitch());
54:       assertFalse(node0.isNE());
55:       assertFalse(node0.isGetterDef());
56:       assertFalse(node0.isDelProp());
57:       assertFalse(node0.isIf());
58:       assertFalse(node0.isArrayLit());
59:       assertFalse(node0.isEmpty());
60:       assertFalse(node0.isFalse());
61:       assertFalse(node0.isFunction());
62:       assertFalse(node0.isInc());
63:       assertFalse(node0.isThrow());
64:       assertFalse(node0.isDefaultCase());
65:       assertFalse(node0.isObjectLit());
66:       assertFalse(node0.isNot());
67:       assertEquals(0, node0.getLineno());
68:       assertFalse(node0.isExprResult());
69:       assertFalse(node0.isTrue());
70:       assertFalse(node0.isNull());
71:       assertEquals(0, node0.getSourcePosition());
72:       assertFalse(node0.isBreak());
73:       assertFalse(node0.isVoid());
74:       assertFalse(node0.isDebugger());
75:       assertFalse(node0.isName());
76:       assertFalse(node0.isAnd());
77:       assertFalse(node0.isCall());
78:       assertFalse(node0.isAssign());
79:       assertFalse(node0.isGetElem());
80:       assertFalse(node0.isTypeOf());
81:       assertFalse(node0.hasChildren());
82:       assertFalse(node0.isGetProp());
83:       assertFalse(node0.isDec());
84:       assertFalse(node0.isComma());
85:       assertFalse(node0.isReturn());
86:       assertFalse(node0.isWhile());
87:       assertEquals(330, node0.getType());
88:       assertEquals(0, nodeArray0.length);
89:       assertNotNull(node0);
90:       assertEquals(1, Node.DECR_FLAG);
91:       assertEquals(12, Node.COLUMN_BITS);
92:       assertEquals(15, Node.NO_SIDE_EFFECTS);
93:       assertEquals(57, Node.LAST_PROP);
94:       assertEquals(46, Node.IS_NAMESPACE);
95:       assertEquals(49, Node.DIRECT_EVAL);
96:       assertEquals(32, Node.INCRDECR_PROP);
97:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
98:       assertEquals(37, Node.OPT_ARG_NAME);
99:       assertEquals(47, Node.IS_DISPATCHER);
100:       assertEquals(2, Node.POST_FLAG);
101:       assertEquals(30, Node.VAR_ARGS_NAME);
102:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
103:       assertEquals(40, Node.ORIGINALNAME_PROP);
104:       assertEquals(54, Node.SLASH_V);
105:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
106:       assertEquals(51, Node.STATIC_SOURCE_FILE);
107:       assertEquals(50, Node.FREE_CALL);
108:       assertEquals(55, Node.INFERRED_FUNCTION);
109:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
110:       assertEquals(43, Node.IS_CONSTANT_NAME);
111:       assertEquals(48, Node.DIRECTIVES);
112:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
113:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
114:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
115:       assertEquals(4095, Node.COLUMN_MASK);
116:       assertEquals(29, Node.JSDOC_INFO_PROP);
117:       assertEquals(57, Node.REFLECTED_OBJECT);
118:       assertEquals(56, Node.CHANGE_TIME);
119:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
120:       assertEquals(39, Node.EMPTY_BLOCK);
121:       assertEquals(53, Node.INPUT_ID);
122:       assertEquals(36, Node.QUOTED_PROP);
123:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
124:       assertEquals(52, Node.LENGTH);
125:       assertEquals(8, Node.FLAG_NO_THROWS);
126:       
127:       Node node1 = new Node(49);
128:       assertFalse(node1.isRegExp());
129:       assertFalse(node1.isVoid());
130:       assertFalse(node1.isFunction());
131:       assertFalse(node1.isDefaultCase());
132:       assertFalse(node1.isTry());
133:       assertFalse(node1.isCatch());
134:       assertEquals(0, node1.getChildCount());
135:       assertFalse(node1.isFor());
136:       assertFalse(node1.isNE());
137:       assertFalse(node1.isNull());
138:       assertFalse(node1.isDelProp());
139:       assertFalse(node1.isIf());
140:       assertFalse(node1.isName());
141:       assertFalse(node1.isEmpty());
142:       assertFalse(node1.isCall());
143:       assertFalse(node1.isSetterDef());
144:       assertFalse(node1.isIn());
145:       assertFalse(node1.isTrue());
146:       assertFalse(node1.isSwitch());
147:       assertFalse(node1.isDo());
148:       assertFalse(node1.isCase());
149:       assertFalse(node1.isAdd());
150:       assertFalse(node1.isNew());
151:       assertFalse(node1.isVar());
152:       assertFalse(node1.hasMoreThanOneChild());
153:       assertFalse(node1.isLabel());
154:       assertFalse(node1.isAssignAdd());
155:       assertFalse(node1.isBlock());
156:       assertFalse(node1.isHook());
157:       assertTrue(node1.isThrow());
158:       assertFalse(node1.isParamList());
159:       assertFalse(node1.isGetterDef());
160:       assertFalse(node1.isNumber());
161:       assertFalse(node1.isLabelName());
162:       assertFalse(node1.isArrayLit());
163:       assertFalse(node1.isStringKey());
164:       assertEquals((-1), node1.getCharno());
165:       assertFalse(node1.isScript());
166:       assertFalse(node1.isWith());
167:       assertFalse(node1.isExprResult());
168:       assertFalse(node1.hasOneChild());
169:       assertFalse(node1.isInstanceOf());
170:       assertFalse(node1.isCast());
171:       assertFalse(node1.isAssign());
172:       assertFalse(node1.hasChildren());
173:       assertFalse(node1.isThis());
174:       assertFalse(node1.isTypeOf());
175:       assertFalse(node1.isDec());
176:       assertFalse(node1.isComma());
177:       assertEquals((-1), node1.getLineno());
178:       assertFalse(node1.isBreak());
179:       assertFalse(node1.isGetElem());
180:       assertFalse(node1.isOr());
181:       assertFalse(node1.isString());
182:       assertFalse(node1.isInc());
183:       assertFalse(node1.isContinue());
184:       assertFalse(node1.isFalse());
185:       assertFalse(node1.isWhile());
186:       assertFalse(node1.isReturn());
187:       assertEquals((-1), node1.getSourcePosition());
188:       assertEquals(49, node1.getType());
189:       assertFalse(node1.isGetProp());
190:       assertFalse(node1.isAnd());
191:       assertFalse(node1.isObjectLit());
192:       assertFalse(node1.isNot());
193:       assertFalse(node1.isDebugger());
194:       assertNotNull(node1);
195:       assertFalse(node1.equals((Object)node0));
196:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
197:       assertEquals(53, Node.INPUT_ID);
198:       assertEquals(36, Node.QUOTED_PROP);
199:       assertEquals(43, Node.IS_CONSTANT_NAME);
200:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
201:       assertEquals(29, Node.JSDOC_INFO_PROP);
202:       assertEquals(55, Node.INFERRED_FUNCTION);
203:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
204:       assertEquals(39, Node.EMPTY_BLOCK);
205:       assertEquals(2, Node.POST_FLAG);
206:       assertEquals(46, Node.IS_NAMESPACE);
207:       assertEquals(47, Node.IS_DISPATCHER);
208:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
209:       assertEquals(40, Node.ORIGINALNAME_PROP);
210:       assertEquals(30, Node.VAR_ARGS_NAME);
211:       assertEquals(54, Node.SLASH_V);
212:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
213:       assertEquals(57, Node.LAST_PROP);
214:       assertEquals(57, Node.REFLECTED_OBJECT);
215:       assertEquals(50, Node.FREE_CALL);
216:       assertEquals(51, Node.STATIC_SOURCE_FILE);
217:       assertEquals(1, Node.DECR_FLAG);
218:       assertEquals(52, Node.LENGTH);
219:       assertEquals(15, Node.NO_SIDE_EFFECTS);
220:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
221:       assertEquals(37, Node.OPT_ARG_NAME);
222:       assertEquals(48, Node.DIRECTIVES);
223:       assertEquals(8, Node.FLAG_NO_THROWS);
224:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
225:       assertEquals(32, Node.INCRDECR_PROP);
226:       assertEquals(12, Node.COLUMN_BITS);
227:       assertEquals(56, Node.CHANGE_TIME);
228:       assertEquals(49, Node.DIRECT_EVAL);
229:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
230:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
231:       assertEquals(4095, Node.COLUMN_MASK);
232:       
233:       Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
234:       assertFalse(node2.isCall());
235:       assertFalse(node2.isName());
236:       assertFalse(node2.isVar());
237:       assertFalse(node2.isStringKey());
238:       assertFalse(node2.isNull());
239:       assertFalse(node2.isParamList());
240:       assertFalse(node2.isContinue());
241:       assertEquals(40, node2.getType());
242:       assertEquals(0, node2.getChildCount());
243:       assertFalse(node2.isOr());
244:       assertFalse(node2.isLabel());
245:       assertFalse(node2.isSetterDef());
246:       assertFalse(node2.isAdd());
247:       assertFalse(node2.isAssignAdd());
248:       assertFalse(node2.isDefaultCase());
249:       assertFalse(node2.isDo());
250:       assertFalse(node2.isNew());
251:       assertFalse(node2.isFor());
252:       assertFalse(node2.isGetterDef());
253:       assertFalse(node2.isNumber());
254:       assertFalse(node2.isNE());
255:       assertFalse(node2.isIf());
256:       assertFalse(node2.isArrayLit());
257:       assertFalse(node2.isLabelName());
258:       assertEquals((-1), node2.getLineno());
259:       assertFalse(node2.hasMoreThanOneChild());
260:       assertFalse(node2.isWith());
261:       assertFalse(node2.isCatch());
262:       assertFalse(node2.isInstanceOf());
263:       assertFalse(node2.isRegExp());
264:       assertFalse(node2.isBlock());
265:       assertTrue(node2.isString());
266:       assertFalse(node2.isThis());
267:       assertFalse(node2.isScript());
268:       assertFalse(node2.isTry());
269:       assertFalse(node2.hasOneChild());
270:       assertFalse(node2.isCase());
271:       assertFalse(node2.isThrow());
272:       assertFalse(node2.isFalse());
273:       assertFalse(node2.isHook());
274:       assertFalse(node2.isComma());
275:       assertEquals((-1), node2.getCharno());
276:       assertFalse(node2.isSwitch());
277:       assertFalse(node2.isBreak());
278:       assertFalse(node2.isIn());
279:       assertFalse(node2.isInc());
280:       assertFalse(node2.isGetElem());
281:       assertFalse(node2.isCast());
282:       assertFalse(node2.isEmpty());
283:       assertFalse(node2.hasChildren());
284:       assertFalse(node2.isTypeOf());
285:       assertFalse(node2.isAssign());
286:       assertFalse(node2.isDec());
287:       assertEquals((-1), node2.getSourcePosition());
288:       assertFalse(node2.isDebugger());
289:       assertFalse(node2.isVoid());
290:       assertFalse(node2.isFunction());
291:       assertFalse(node2.isExprResult());
292:       assertFalse(node2.isTrue());
293:       assertFalse(node2.isDelProp());
294:       assertFalse(node2.isAnd());
295:       assertFalse(node2.isObjectLit());
296:       assertFalse(node2.isWhile());
297:       assertFalse(node2.isReturn());
298:       assertFalse(node2.isNot());
299:       assertFalse(node2.isGetProp());
300:       assertNotNull(node2);
301:       assertFalse(node2.equals((Object)node0));
302:       assertFalse(node2.equals((Object)node1));
303:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
304:       assertEquals(50, Node.FREE_CALL);
305:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
306:       assertEquals(40, Node.ORIGINALNAME_PROP);
307:       assertEquals(39, Node.EMPTY_BLOCK);
308:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
309:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
310:       assertEquals(30, Node.VAR_ARGS_NAME);
311:       assertEquals(1, Node.DECR_FLAG);
312:       assertEquals(43, Node.IS_CONSTANT_NAME);
313:       assertEquals(51, Node.STATIC_SOURCE_FILE);
314:       assertEquals(46, Node.IS_NAMESPACE);
315:       assertEquals(54, Node.SLASH_V);
316:       assertEquals(29, Node.JSDOC_INFO_PROP);
317:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
318:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
319:       assertEquals(37, Node.OPT_ARG_NAME);
320:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
321:       assertEquals(32, Node.INCRDECR_PROP);
322:       assertEquals(2, Node.POST_FLAG);
323:       assertEquals(47, Node.IS_DISPATCHER);
324:       assertEquals(12, Node.COLUMN_BITS);
325:       assertEquals(49, Node.DIRECT_EVAL);
326:       assertEquals(57, Node.LAST_PROP);
327:       assertEquals(55, Node.INFERRED_FUNCTION);
328:       assertEquals(4095, Node.COLUMN_MASK);
329:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
330:       assertEquals(15, Node.NO_SIDE_EFFECTS);
331:       assertEquals(53, Node.INPUT_ID);
332:       assertEquals(52, Node.LENGTH);
333:       assertEquals(48, Node.DIRECTIVES);
334:       assertEquals(8, Node.FLAG_NO_THROWS);
335:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
336:       assertEquals(56, Node.CHANGE_TIME);
337:       assertEquals(36, Node.QUOTED_PROP);
338:       assertEquals(57, Node.REFLECTED_OBJECT);
339:       
340:       Node node3 = node2.useSourceInfoIfMissingFrom(node1);
341:       assertFalse(node1.isRegExp());
342:       assertFalse(node1.isVoid());
343:       assertFalse(node1.isFunction());
344:       assertFalse(node1.isDefaultCase());
345:       assertFalse(node1.isTry());
346:       assertFalse(node1.isCatch());
347:       assertEquals(0, node1.getChildCount());
348:       assertFalse(node1.isFor());
349:       assertFalse(node1.isNE());
350:       assertFalse(node1.isNull());
351:       assertFalse(node1.isDelProp());
352:       assertFalse(node1.isIf());
353:       assertFalse(node1.isName());
354:       assertFalse(node1.isEmpty());
355:       assertFalse(node1.isCall());
356:       assertFalse(node1.isSetterDef());
357:       assertFalse(node1.isIn());
358:       assertFalse(node1.isTrue());
359:       assertFalse(node1.isSwitch());
360:       assertFalse(node1.isDo());
361:       assertFalse(node1.isCase());
362:       assertFalse(node1.isAdd());
363:       assertFalse(node1.isNew());
364:       assertFalse(node1.isVar());
365:       assertFalse(node1.hasMoreThanOneChild());
366:       assertFalse(node1.isLabel());
367:       assertFalse(node1.isAssignAdd());
368:       assertFalse(node1.isBlock());
369:       assertFalse(node1.isHook());
370:       assertTrue(node1.isThrow());
371:       assertFalse(node1.isParamList());
372:       assertFalse(node1.isGetterDef());
373:       assertFalse(node1.isNumber());
374:       assertFalse(node1.isLabelName());
375:       assertFalse(node1.isArrayLit());
376:       assertFalse(node1.isStringKey());
377:       assertEquals((-1), node1.getCharno());
378:       assertFalse(node1.isScript());
379:       assertFalse(node1.isWith());
380:       assertFalse(node1.isExprResult());
381:       assertFalse(node1.hasOneChild());
382:       assertFalse(node1.isInstanceOf());
383:       assertFalse(node1.isCast());
384:       assertFalse(node1.isAssign());
385:       assertFalse(node1.hasChildren());
386:       assertFalse(node1.isThis());
387:       assertFalse(node1.isTypeOf());
388:       assertFalse(node1.isDec());
389:       assertFalse(node1.isComma());
390:       assertEquals((-1), node1.getLineno());
391:       assertFalse(node1.isBreak());
392:       assertFalse(node1.isGetElem());
393:       assertFalse(node1.isOr());
394:       assertFalse(node1.isString());
395:       assertFalse(node1.isInc());
396:       assertFalse(node1.isContinue());
397:       assertFalse(node1.isFalse());
398:       assertFalse(node1.isWhile());
399:       assertFalse(node1.isReturn());
400:       assertEquals((-1), node1.getSourcePosition());
401:       assertEquals(49, node1.getType());
402:       assertFalse(node1.isGetProp());
403:       assertFalse(node1.isAnd());
404:       assertFalse(node1.isObjectLit());
405:       assertFalse(node1.isNot());
406:       assertFalse(node1.isDebugger());
407:       assertFalse(node2.isCall());
408:       assertFalse(node2.isName());
409:       assertFalse(node2.isVar());
410:       assertFalse(node2.isStringKey());
411:       assertFalse(node2.isNull());
412:       assertFalse(node2.isParamList());
413:       assertFalse(node2.isContinue());
414:       assertEquals(40, node2.getType());
415:       assertEquals(0, node2.getChildCount());
416:       assertFalse(node2.isOr());
417:       assertFalse(node2.isLabel());
418:       assertFalse(node2.isSetterDef());
419:       assertFalse(node2.isAdd());
420:       assertFalse(node2.isAssignAdd());
421:       assertFalse(node2.isDefaultCase());
422:       assertFalse(node2.isDo());
423:       assertFalse(node2.isNew());
424:       assertFalse(node2.isFor());
425:       assertFalse(node2.isGetterDef());
426:       assertFalse(node2.isNumber());
427:       assertFalse(node2.isNE());
428:       assertFalse(node2.isIf());
429:       assertFalse(node2.isArrayLit());
430:       assertFalse(node2.isLabelName());
431:       assertEquals((-1), node2.getLineno());
432:       assertFalse(node2.hasMoreThanOneChild());
433:       assertFalse(node2.isWith());
434:       assertFalse(node2.isCatch());
435:       assertFalse(node2.isInstanceOf());
436:       assertFalse(node2.isRegExp());
437:       assertFalse(node2.isBlock());
438:       assertTrue(node2.isString());
439:       assertFalse(node2.isThis());
440:       assertFalse(node2.isScript());
441:       assertFalse(node2.isTry());
442:       assertFalse(node2.hasOneChild());
443:       assertFalse(node2.isCase());
444:       assertFalse(node2.isThrow());
445:       assertFalse(node2.isFalse());
446:       assertFalse(node2.isHook());
447:       assertFalse(node2.isComma());
448:       assertEquals((-1), node2.getCharno());
449:       assertFalse(node2.isSwitch());
450:       assertFalse(node2.isBreak());
451:       assertFalse(node2.isIn());
452:       assertFalse(node2.isInc());
453:       assertFalse(node2.isGetElem());
454:       assertFalse(node2.isCast());
455:       assertFalse(node2.isEmpty());
456:       assertFalse(node2.hasChildren());
457:       assertFalse(node2.isTypeOf());
458:       assertFalse(node2.isAssign());
459:       assertFalse(node2.isDec());
460:       assertEquals((-1), node2.getSourcePosition());
461:       assertFalse(node2.isDebugger());
462:       assertFalse(node2.isVoid());
463:       assertFalse(node2.isFunction());
464:       assertFalse(node2.isExprResult());
465:       assertFalse(node2.isTrue());
466:       assertFalse(node2.isDelProp());
467:       assertFalse(node2.isAnd());
468:       assertFalse(node2.isObjectLit());
469:       assertFalse(node2.isWhile());
470:       assertFalse(node2.isReturn());
471:       assertFalse(node2.isNot());
472:       assertFalse(node2.isGetProp());
473:       assertFalse(node3.isTry());
474:       assertFalse(node3.isDebugger());
475:       assertFalse(node3.isArrayLit());
476:       assertFalse(node3.isTrue());
477:       assertFalse(node3.isVoid());
478:       assertFalse(node3.isDefaultCase());
479:       assertFalse(node3.isGetterDef());
480:       assertFalse(node3.isEmpty());
481:       assertFalse(node3.isNE());
482:       assertFalse(node3.isNull());
483:       assertFalse(node3.isIf());
484:       assertFalse(node3.isName());
485:       assertFalse(node3.isDelProp());
486:       assertFalse(node3.isFor());
487:       assertFalse(node3.isCatch());
488:       assertFalse(node3.isCall());
489:       assertFalse(node3.isRegExp());
490:       assertTrue(node3.isString());
491:       assertFalse(node3.isAdd());
492:       assertFalse(node3.isBlock());
493:       assertFalse(node3.isHook());
494:       assertFalse(node3.isNew());
495:       assertEquals((-1), node3.getCharno());
496:       assertFalse(node3.isSwitch());
497:       assertFalse(node3.isVar());
498:       assertFalse(node3.isStringKey());
499:       assertFalse(node3.isDo());
500:       assertFalse(node3.isCase());
501:       assertEquals(0, node3.getChildCount());
502:       assertFalse(node3.isLabel());
503:       assertFalse(node3.isParamList());
504:       assertFalse(node3.isAssignAdd());
505:       assertFalse(node3.isLabelName());
506:       assertFalse(node3.hasOneChild());
507:       assertFalse(node3.isNot());
508:       assertEquals((-1), node3.getSourcePosition());
509:       assertFalse(node3.isObjectLit());
510:       assertFalse(node3.isScript());
511:       assertFalse(node3.isNumber());
512:       assertFalse(node3.isReturn());
513:       assertEquals((-1), node3.getLineno());
514:       assertFalse(node3.isOr());
515:       assertFalse(node3.isGetProp());
516:       assertFalse(node3.isThis());
517:       assertFalse(node3.isWhile());
518:       assertFalse(node3.isWith());
519:       assertFalse(node3.isAssign());
520:       assertFalse(node3.isGetElem());
521:       assertFalse(node3.isDec());
522:       assertFalse(node3.hasChildren());
523:       assertFalse(node3.isBreak());
524:       assertFalse(node3.hasMoreThanOneChild());
525:       assertFalse(node3.isComma());
526:       assertFalse(node3.isTypeOf());
527:       assertFalse(node3.isExprResult());
528:       assertFalse(node3.isInstanceOf());
529:       assertFalse(node3.isThrow());
530:       assertFalse(node3.isInc());
531:       assertFalse(node3.isSetterDef());
532:       assertFalse(node3.isIn());
533:       assertFalse(node3.isAnd());
534:       assertEquals(40, node3.getType());
535:       assertFalse(node3.isCast());
536:       assertFalse(node3.isFunction());
537:       assertFalse(node3.isFalse());
538:       assertFalse(node3.isContinue());
539:       assertNotNull(node3);
540:       assertFalse(node1.equals((Object)node0));
541:       assertFalse(node1.equals((Object)node2));
542:       assertFalse(node2.equals((Object)node0));
543:       assertFalse(node2.equals((Object)node1));
544:       assertFalse(node3.equals((Object)node0));
545:       assertFalse(node3.equals((Object)node1));
546:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
547:       assertEquals(53, Node.INPUT_ID);
548:       assertEquals(36, Node.QUOTED_PROP);
549:       assertEquals(43, Node.IS_CONSTANT_NAME);
550:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
551:       assertEquals(29, Node.JSDOC_INFO_PROP);
552:       assertEquals(55, Node.INFERRED_FUNCTION);
553:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
554:       assertEquals(39, Node.EMPTY_BLOCK);
555:       assertEquals(2, Node.POST_FLAG);
556:       assertEquals(46, Node.IS_NAMESPACE);
557:       assertEquals(47, Node.IS_DISPATCHER);
558:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
559:       assertEquals(40, Node.ORIGINALNAME_PROP);
560:       assertEquals(30, Node.VAR_ARGS_NAME);
561:       assertEquals(54, Node.SLASH_V);
562:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
563:       assertEquals(57, Node.LAST_PROP);
564:       assertEquals(57, Node.REFLECTED_OBJECT);
565:       assertEquals(50, Node.FREE_CALL);
566:       assertEquals(51, Node.STATIC_SOURCE_FILE);
567:       assertEquals(1, Node.DECR_FLAG);
568:       assertEquals(52, Node.LENGTH);
569:       assertEquals(15, Node.NO_SIDE_EFFECTS);
570:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
571:       assertEquals(37, Node.OPT_ARG_NAME);
572:       assertEquals(48, Node.DIRECTIVES);
573:       assertEquals(8, Node.FLAG_NO_THROWS);
574:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
575:       assertEquals(32, Node.INCRDECR_PROP);
576:       assertEquals(12, Node.COLUMN_BITS);
577:       assertEquals(56, Node.CHANGE_TIME);
578:       assertEquals(49, Node.DIRECT_EVAL);
579:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
580:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
581:       assertEquals(4095, Node.COLUMN_MASK);
582:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
583:       assertEquals(50, Node.FREE_CALL);
584:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
585:       assertEquals(40, Node.ORIGINALNAME_PROP);
586:       assertEquals(39, Node.EMPTY_BLOCK);
587:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
588:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
589:       assertEquals(30, Node.VAR_ARGS_NAME);
590:       assertEquals(1, Node.DECR_FLAG);
591:       assertEquals(43, Node.IS_CONSTANT_NAME);
592:       assertEquals(51, Node.STATIC_SOURCE_FILE);
593:       assertEquals(46, Node.IS_NAMESPACE);
594:       assertEquals(54, Node.SLASH_V);
595:       assertEquals(29, Node.JSDOC_INFO_PROP);
596:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
597:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
598:       assertEquals(37, Node.OPT_ARG_NAME);
599:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
600:       assertEquals(32, Node.INCRDECR_PROP);
601:       assertEquals(2, Node.POST_FLAG);
602:       assertEquals(47, Node.IS_DISPATCHER);
603:       assertEquals(12, Node.COLUMN_BITS);
604:       assertEquals(49, Node.DIRECT_EVAL);
605:       assertEquals(57, Node.LAST_PROP);
606:       assertEquals(55, Node.INFERRED_FUNCTION);
607:       assertEquals(4095, Node.COLUMN_MASK);
608:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
609:       assertEquals(15, Node.NO_SIDE_EFFECTS);
610:       assertEquals(53, Node.INPUT_ID);
611:       assertEquals(52, Node.LENGTH);
612:       assertEquals(48, Node.DIRECTIVES);
613:       assertEquals(8, Node.FLAG_NO_THROWS);
614:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
615:       assertEquals(56, Node.CHANGE_TIME);
616:       assertEquals(36, Node.QUOTED_PROP);
617:       assertEquals(57, Node.REFLECTED_OBJECT);
618:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
619:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
620:       assertEquals(43, Node.IS_CONSTANT_NAME);
621:       assertEquals(56, Node.CHANGE_TIME);
622:       assertEquals(36, Node.QUOTED_PROP);
623:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
624:       assertEquals(37, Node.OPT_ARG_NAME);
625:       assertEquals(55, Node.INFERRED_FUNCTION);
626:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
627:       assertEquals(30, Node.VAR_ARGS_NAME);
628:       assertEquals(8, Node.FLAG_NO_THROWS);
629:       assertEquals(2, Node.POST_FLAG);
630:       assertEquals(15, Node.NO_SIDE_EFFECTS);
631:       assertEquals(47, Node.IS_DISPATCHER);
632:       assertEquals(57, Node.LAST_PROP);
633:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
634:       assertEquals(39, Node.EMPTY_BLOCK);
635:       assertEquals(29, Node.JSDOC_INFO_PROP);
636:       assertEquals(53, Node.INPUT_ID);
637:       assertEquals(57, Node.REFLECTED_OBJECT);
638:       assertEquals(40, Node.ORIGINALNAME_PROP);
639:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
640:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
641:       assertEquals(52, Node.LENGTH);
642:       assertEquals(50, Node.FREE_CALL);
643:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
644:       assertEquals(54, Node.SLASH_V);
645:       assertEquals(48, Node.DIRECTIVES);
646:       assertEquals(49, Node.DIRECT_EVAL);
647:       assertEquals(51, Node.STATIC_SOURCE_FILE);
648:       assertEquals(4095, Node.COLUMN_MASK);
649:       assertEquals(12, Node.COLUMN_BITS);
650:       assertEquals(46, Node.IS_NAMESPACE);
651:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
652:       assertEquals(1, Node.DECR_FLAG);
653:       assertEquals(32, Node.INCRDECR_PROP);
654:       
655:       Iterable<Node> iterable0 = node3.children();
656:       assertFalse(node1.isRegExp());
657:       assertFalse(node1.isVoid());
658:       assertFalse(node1.isFunction());
659:       assertFalse(node1.isDefaultCase());
660:       assertFalse(node1.isTry());
661:       assertFalse(node1.isCatch());
662:       assertEquals(0, node1.getChildCount());
663:       assertFalse(node1.isFor());
664:       assertFalse(node1.isNE());
665:       assertFalse(node1.isNull());
666:       assertFalse(node1.isDelProp());
667:       assertFalse(node1.isIf());
668:       assertFalse(node1.isName());
669:       assertFalse(node1.isEmpty());
670:       assertFalse(node1.isCall());
671:       assertFalse(node1.isSetterDef());
672:       assertFalse(node1.isIn());
673:       assertFalse(node1.isTrue());
674:       assertFalse(node1.isSwitch());
675:       assertFalse(node1.isDo());
676:       assertFalse(node1.isCase());
677:       assertFalse(node1.isAdd());
678:       assertFalse(node1.isNew());
679:       assertFalse(node1.isVar());
680:       assertFalse(node1.hasMoreThanOneChild());
681:       assertFalse(node1.isLabel());
682:       assertFalse(node1.isAssignAdd());
683:       assertFalse(node1.isBlock());
684:       assertFalse(node1.isHook());
685:       assertTrue(node1.isThrow());
686:       assertFalse(node1.isParamList());
687:       assertFalse(node1.isGetterDef());
688:       assertFalse(node1.isNumber());
689:       assertFalse(node1.isLabelName());
690:       assertFalse(node1.isArrayLit());
691:       assertFalse(node1.isStringKey());
692:       assertEquals((-1), node1.getCharno());
693:       assertFalse(node1.isScript());
694:       assertFalse(node1.isWith());
695:       assertFalse(node1.isExprResult());
696:       assertFalse(node1.hasOneChild());
697:       assertFalse(node1.isInstanceOf());
698:       assertFalse(node1.isCast());
699:       assertFalse(node1.isAssign());
700:       assertFalse(node1.hasChildren());
701:       assertFalse(node1.isThis());
702:       assertFalse(node1.isTypeOf());
703:       assertFalse(node1.isDec());
704:       assertFalse(node1.isComma());
705:       assertEquals((-1), node1.getLineno());
706:       assertFalse(node1.isBreak());
707:       assertFalse(node1.isGetElem());
708:       assertFalse(node1.isOr());
709:       assertFalse(node1.isString());
710:       assertFalse(node1.isInc());
711:       assertFalse(node1.isContinue());
712:       assertFalse(node1.isFalse());
713:       assertFalse(node1.isWhile());
714:       assertFalse(node1.isReturn());
715:       assertEquals((-1), node1.getSourcePosition());
716:       assertEquals(49, node1.getType());
717:       assertFalse(node1.isGetProp());
718:       assertFalse(node1.isAnd());
719:       assertFalse(node1.isObjectLit());
720:       assertFalse(node1.isNot());
721:       assertFalse(node1.isDebugger());
722:       assertFalse(node2.isCall());
723:       assertFalse(node2.isName());
724:       assertFalse(node2.isVar());
725:       assertFalse(node2.isStringKey());
726:       assertFalse(node2.isNull());
727:       assertFalse(node2.isParamList());
728:       assertFalse(node2.isContinue());
729:       assertEquals(40, node2.getType());
730:       assertEquals(0, node2.getChildCount());
731:       assertFalse(node2.isOr());
732:       assertFalse(node2.isLabel());
733:       assertFalse(node2.isSetterDef());
734:       assertFalse(node2.isAdd());
735:       assertFalse(node2.isAssignAdd());
736:       assertFalse(node2.isDefaultCase());
737:       assertFalse(node2.isDo());
738:       assertFalse(node2.isNew());
739:       assertFalse(node2.isFor());
740:       assertFalse(node2.isGetterDef());
741:       assertFalse(node2.isNumber());
742:       assertFalse(node2.isNE());
743:       assertFalse(node2.isIf());
744:       assertFalse(node2.isArrayLit());
745:       assertFalse(node2.isLabelName());
746:       assertEquals((-1), node2.getLineno());
747:       assertFalse(node2.hasMoreThanOneChild());
748:       assertFalse(node2.isWith());
749:       assertFalse(node2.isCatch());
750:       assertFalse(node2.isInstanceOf());
751:       assertFalse(node2.isRegExp());
752:       assertFalse(node2.isBlock());
753:       assertTrue(node2.isString());
754:       assertFalse(node2.isThis());
755:       assertFalse(node2.isScript());
756:       assertFalse(node2.isTry());
757:       assertFalse(node2.hasOneChild());
758:       assertFalse(node2.isCase());
759:       assertFalse(node2.isThrow());
760:       assertFalse(node2.isFalse());
761:       assertFalse(node2.isHook());
762:       assertFalse(node2.isComma());
763:       assertEquals((-1), node2.getCharno());
764:       assertFalse(node2.isSwitch());
765:       assertFalse(node2.isBreak());
766:       assertFalse(node2.isIn());
767:       assertFalse(node2.isInc());
768:       assertFalse(node2.isGetElem());
769:       assertFalse(node2.isCast());
770:       assertFalse(node2.isEmpty());
771:       assertFalse(node2.hasChildren());
772:       assertFalse(node2.isTypeOf());
773:       assertFalse(node2.isAssign());
774:       assertFalse(node2.isDec());
775:       assertEquals((-1), node2.getSourcePosition());
776:       assertFalse(node2.isDebugger());
777:       assertFalse(node2.isVoid());
778:       assertFalse(node2.isFunction());
779:       assertFalse(node2.isExprResult());
780:       assertFalse(node2.isTrue());
781:       assertFalse(node2.isDelProp());
782:       assertFalse(node2.isAnd());
783:       assertFalse(node2.isObjectLit());
784:       assertFalse(node2.isWhile());
785:       assertFalse(node2.isReturn());
786:       assertFalse(node2.isNot());
787:       assertFalse(node2.isGetProp());
788:       assertFalse(node3.isTry());
789:       assertFalse(node3.isDebugger());
790:       assertFalse(node3.isArrayLit());
791:       assertFalse(node3.isTrue());
792:       assertFalse(node3.isVoid());
793:       assertFalse(node3.isDefaultCase());
794:       assertFalse(node3.isGetterDef());
795:       assertFalse(node3.isEmpty());
796:       assertFalse(node3.isNE());
797:       assertFalse(node3.isNull());
798:       assertFalse(node3.isIf());
799:       assertFalse(node3.isName());
800:       assertFalse(node3.isDelProp());
801:       assertFalse(node3.isFor());
802:       assertFalse(node3.isCatch());
803:       assertFalse(node3.isCall());
804:       assertFalse(node3.isRegExp());
805:       assertTrue(node3.isString());
806:       assertFalse(node3.isAdd());
807:       assertFalse(node3.isBlock());
808:       assertFalse(node3.isHook());
809:       assertFalse(node3.isNew());
810:       assertEquals((-1), node3.getCharno());
811:       assertFalse(node3.isSwitch());
812:       assertFalse(node3.isVar());
813:       assertFalse(node3.isStringKey());
814:       assertFalse(node3.isDo());
815:       assertFalse(node3.isCase());
816:       assertEquals(0, node3.getChildCount());
817:       assertFalse(node3.isLabel());
818:       assertFalse(node3.isParamList());
819:       assertFalse(node3.isAssignAdd());
820:       assertFalse(node3.isLabelName());
821:       assertFalse(node3.hasOneChild());
822:       assertFalse(node3.isNot());
823:       assertEquals((-1), node3.getSourcePosition());
824:       assertFalse(node3.isObjectLit());
825:       assertFalse(node3.isScript());
826:       assertFalse(node3.isNumber());
827:       assertFalse(node3.isReturn());
828:       assertEquals((-1), node3.getLineno());
829:       assertFalse(node3.isOr());
830:       assertFalse(node3.isGetProp());
831:       assertFalse(node3.isThis());
832:       assertFalse(node3.isWhile());
833:       assertFalse(node3.isWith());
834:       assertFalse(node3.isAssign());
835:       assertFalse(node3.isGetElem());
836:       assertFalse(node3.isDec());
837:       assertFalse(node3.hasChildren());
838:       assertFalse(node3.isBreak());
839:       assertFalse(node3.hasMoreThanOneChild());
840:       assertFalse(node3.isComma());
841:       assertFalse(node3.isTypeOf());
842:       assertFalse(node3.isExprResult());
843:       assertFalse(node3.isInstanceOf());
844:       assertFalse(node3.isThrow());
845:       assertFalse(node3.isInc());
846:       assertFalse(node3.isSetterDef());
847:       assertFalse(node3.isIn());
848:       assertFalse(node3.isAnd());
849:       assertEquals(40, node3.getType());
850:       assertFalse(node3.isCast());
851:       assertFalse(node3.isFunction());
852:       assertFalse(node3.isFalse());
853:       assertFalse(node3.isContinue());
854:       assertNotNull(iterable0);
855:       assertFalse(iterable0.contains(node2));
856:       assertFalse(node1.equals((Object)node0));
857:       assertFalse(node1.equals((Object)node2));
858:       assertFalse(node1.equals((Object)node3));
859:       assertFalse(node2.equals((Object)node0));
860:       assertFalse(node2.equals((Object)node1));
861:       assertFalse(node3.equals((Object)node0));
862:       assertFalse(node3.equals((Object)node1));
863:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
864:       assertEquals(53, Node.INPUT_ID);
865:       assertEquals(36, Node.QUOTED_PROP);
866:       assertEquals(43, Node.IS_CONSTANT_NAME);
867:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
868:       assertEquals(29, Node.JSDOC_INFO_PROP);
869:       assertEquals(55, Node.INFERRED_FUNCTION);
870:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
871:       assertEquals(39, Node.EMPTY_BLOCK);
872:       assertEquals(2, Node.POST_FLAG);
873:       assertEquals(46, Node.IS_NAMESPACE);
874:       assertEquals(47, Node.IS_DISPATCHER);
875:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
876:       assertEquals(40, Node.ORIGINALNAME_PROP);
877:       assertEquals(30, Node.VAR_ARGS_NAME);
878:       assertEquals(54, Node.SLASH_V);
879:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
880:       assertEquals(57, Node.LAST_PROP);
881:       assertEquals(57, Node.REFLECTED_OBJECT);
882:       assertEquals(50, Node.FREE_CALL);
883:       assertEquals(51, Node.STATIC_SOURCE_FILE);
884:       assertEquals(1, Node.DECR_FLAG);
885:       assertEquals(52, Node.LENGTH);
886:       assertEquals(15, Node.NO_SIDE_EFFECTS);
887:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
888:       assertEquals(37, Node.OPT_ARG_NAME);
889:       assertEquals(48, Node.DIRECTIVES);
890:       assertEquals(8, Node.FLAG_NO_THROWS);
891:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
892:       assertEquals(32, Node.INCRDECR_PROP);
893:       assertEquals(12, Node.COLUMN_BITS);
894:       assertEquals(56, Node.CHANGE_TIME);
895:       assertEquals(49, Node.DIRECT_EVAL);
896:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
897:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
898:       assertEquals(4095, Node.COLUMN_MASK);
899:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
900:       assertEquals(50, Node.FREE_CALL);
901:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
902:       assertEquals(40, Node.ORIGINALNAME_PROP);
903:       assertEquals(39, Node.EMPTY_BLOCK);
904:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
905:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
906:       assertEquals(30, Node.VAR_ARGS_NAME);
907:       assertEquals(1, Node.DECR_FLAG);
908:       assertEquals(43, Node.IS_CONSTANT_NAME);
909:       assertEquals(51, Node.STATIC_SOURCE_FILE);
910:       assertEquals(46, Node.IS_NAMESPACE);
911:       assertEquals(54, Node.SLASH_V);
912:       assertEquals(29, Node.JSDOC_INFO_PROP);
913:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
914:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
915:       assertEquals(37, Node.OPT_ARG_NAME);
916:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
917:       assertEquals(32, Node.INCRDECR_PROP);
918:       assertEquals(2, Node.POST_FLAG);
919:       assertEquals(47, Node.IS_DISPATCHER);
920:       assertEquals(12, Node.COLUMN_BITS);
921:       assertEquals(49, Node.DIRECT_EVAL);
922:       assertEquals(57, Node.LAST_PROP);
923:       assertEquals(55, Node.INFERRED_FUNCTION);
924:       assertEquals(4095, Node.COLUMN_MASK);
925:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
926:       assertEquals(15, Node.NO_SIDE_EFFECTS);
927:       assertEquals(53, Node.INPUT_ID);
928:       assertEquals(52, Node.LENGTH);
929:       assertEquals(48, Node.DIRECTIVES);
930:       assertEquals(8, Node.FLAG_NO_THROWS);
931:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
932:       assertEquals(56, Node.CHANGE_TIME);
933:       assertEquals(36, Node.QUOTED_PROP);
934:       assertEquals(57, Node.REFLECTED_OBJECT);
935:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
936:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
937:       assertEquals(43, Node.IS_CONSTANT_NAME);
938:       assertEquals(56, Node.CHANGE_TIME);
939:       assertEquals(36, Node.QUOTED_PROP);
940:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
941:       assertEquals(37, Node.OPT_ARG_NAME);
942:       assertEquals(55, Node.INFERRED_FUNCTION);
943:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
944:       assertEquals(30, Node.VAR_ARGS_NAME);
945:       assertEquals(8, Node.FLAG_NO_THROWS);
946:       assertEquals(2, Node.POST_FLAG);
947:       assertEquals(15, Node.NO_SIDE_EFFECTS);
948:       assertEquals(47, Node.IS_DISPATCHER);
949:       assertEquals(57, Node.LAST_PROP);
950:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
951:       assertEquals(39, Node.EMPTY_BLOCK);
952:       assertEquals(29, Node.JSDOC_INFO_PROP);
953:       assertEquals(53, Node.INPUT_ID);
954:       assertEquals(57, Node.REFLECTED_OBJECT);
955:       assertEquals(40, Node.ORIGINALNAME_PROP);
956:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
957:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
958:       assertEquals(52, Node.LENGTH);
959:       assertEquals(50, Node.FREE_CALL);
960:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
961:       assertEquals(54, Node.SLASH_V);
962:       assertEquals(48, Node.DIRECTIVES);
963:       assertEquals(49, Node.DIRECT_EVAL);
964:       assertEquals(51, Node.STATIC_SOURCE_FILE);
965:       assertEquals(4095, Node.COLUMN_MASK);
966:       assertEquals(12, Node.COLUMN_BITS);
967:       assertEquals(46, Node.IS_NAMESPACE);
968:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
969:       assertEquals(1, Node.DECR_FLAG);
970:       assertEquals(32, Node.INCRDECR_PROP);
971:       
972:       boolean boolean0 = node1.isGetProp();
973:       assertFalse(node1.isRegExp());
974:       assertFalse(node1.isVoid());
975:       assertFalse(node1.isFunction());
976:       assertFalse(node1.isDefaultCase());
977:       assertFalse(node1.isTry());
978:       assertFalse(node1.isCatch());
979:       assertEquals(0, node1.getChildCount());
980:       assertFalse(node1.isFor());
981:       assertFalse(node1.isNE());
982:       assertFalse(node1.isNull());
983:       assertFalse(node1.isDelProp());
984:       assertFalse(node1.isIf());
985:       assertFalse(node1.isName());
986:       assertFalse(node1.isEmpty());
987:       assertFalse(node1.isCall());
988:       assertFalse(node1.isSetterDef());
989:       assertFalse(node1.isIn());
990:       assertFalse(node1.isTrue());
991:       assertFalse(node1.isSwitch());
992:       assertFalse(node1.isDo());
993:       assertFalse(node1.isCase());
994:       assertFalse(node1.isAdd());
995:       assertFalse(node1.isNew());
996:       assertFalse(node1.isVar());
997:       assertFalse(node1.hasMoreThanOneChild());
998:       assertFalse(node1.isLabel());
999:       assertFalse(node1.isAssignAdd());
1000:       assertFalse(node1.isBlock());
1001:       assertFalse(node1.isHook());
1002:       assertTrue(node1.isThrow());
1003:       assertFalse(node1.isParamList());
1004:       assertFalse(node1.isGetterDef());
1005:       assertFalse(node1.isNumber());
1006:       assertFalse(node1.isLabelName());
1007:       assertFalse(node1.isArrayLit());
1008:       assertFalse(node1.isStringKey());
1009:       assertEquals((-1), node1.getCharno());
1010:       assertFalse(node1.isScript());
1011:       assertFalse(node1.isWith());
1012:       assertFalse(node1.isExprResult());
1013:       assertFalse(node1.hasOneChild());
1014:       assertFalse(node1.isInstanceOf());
1015:       assertFalse(node1.isCast());
1016:       assertFalse(node1.isAssign());
1017:       assertFalse(node1.hasChildren());
1018:       assertFalse(node1.isThis());
1019:       assertFalse(node1.isTypeOf());
1020:       assertFalse(node1.isDec());
1021:       assertFalse(node1.isComma());
1022:       assertEquals((-1), node1.getLineno());
1023:       assertFalse(node1.isBreak());
1024:       assertFalse(node1.isGetElem());
1025:       assertFalse(node1.isOr());
1026:       assertFalse(node1.isString());
1027:       assertFalse(node1.isInc());
1028:       assertFalse(node1.isContinue());
1029:       assertFalse(node1.isFalse());
1030:       assertFalse(node1.isWhile());
1031:       assertFalse(node1.isReturn());
1032:       assertEquals((-1), node1.getSourcePosition());
1033:       assertEquals(49, node1.getType());
1034:       assertFalse(node1.isGetProp());
1035:       assertFalse(node1.isAnd());
1036:       assertFalse(node1.isObjectLit());
1037:       assertFalse(node1.isNot());
1038:       assertFalse(node1.isDebugger());
1039:       assertFalse(boolean0);
1040:       assertFalse(node1.equals((Object)node0));
1041:       assertFalse(node1.equals((Object)node2));
1042:       assertFalse(node1.equals((Object)node3));
1043:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1044:       assertEquals(53, Node.INPUT_ID);
1045:       assertEquals(36, Node.QUOTED_PROP);
1046:       assertEquals(43, Node.IS_CONSTANT_NAME);
1047:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1048:       assertEquals(29, Node.JSDOC_INFO_PROP);
1049:       assertEquals(55, Node.INFERRED_FUNCTION);
1050:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1051:       assertEquals(39, Node.EMPTY_BLOCK);
1052:       assertEquals(2, Node.POST_FLAG);
1053:       assertEquals(46, Node.IS_NAMESPACE);
1054:       assertEquals(47, Node.IS_DISPATCHER);
1055:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1056:       assertEquals(40, Node.ORIGINALNAME_PROP);
1057:       assertEquals(30, Node.VAR_ARGS_NAME);
1058:       assertEquals(54, Node.SLASH_V);
1059:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1060:       assertEquals(57, Node.LAST_PROP);
1061:       assertEquals(57, Node.REFLECTED_OBJECT);
1062:       assertEquals(50, Node.FREE_CALL);
1063:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1064:       assertEquals(1, Node.DECR_FLAG);
1065:       assertEquals(52, Node.LENGTH);
1066:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1067:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1068:       assertEquals(37, Node.OPT_ARG_NAME);
1069:       assertEquals(48, Node.DIRECTIVES);
1070:       assertEquals(8, Node.FLAG_NO_THROWS);
1071:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1072:       assertEquals(32, Node.INCRDECR_PROP);
1073:       assertEquals(12, Node.COLUMN_BITS);
1074:       assertEquals(56, Node.CHANGE_TIME);
1075:       assertEquals(49, Node.DIRECT_EVAL);
1076:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1077:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1078:       assertEquals(4095, Node.COLUMN_MASK);
1079:       
1080:       boolean boolean1 = node3.hasChildren();
1081:       assertFalse(node1.isRegExp());
1082:       assertFalse(node1.isVoid());
1083:       assertFalse(node1.isFunction());
1084:       assertFalse(node1.isDefaultCase());
1085:       assertFalse(node1.isTry());
1086:       assertFalse(node1.isCatch());
1087:       assertEquals(0, node1.getChildCount());
1088:       assertFalse(node1.isFor());
1089:       assertFalse(node1.isNE());
1090:       assertFalse(node1.isNull());
1091:       assertFalse(node1.isDelProp());
1092:       assertFalse(node1.isIf());
1093:       assertFalse(node1.isName());
1094:       assertFalse(node1.isEmpty());
1095:       assertFalse(node1.isCall());
1096:       assertFalse(node1.isSetterDef());
1097:       assertFalse(node1.isIn());
1098:       assertFalse(node1.isTrue());
1099:       assertFalse(node1.isSwitch());
1100:       assertFalse(node1.isDo());
1101:       assertFalse(node1.isCase());
1102:       assertFalse(node1.isAdd());
1103:       assertFalse(node1.isNew());
1104:       assertFalse(node1.isVar());
1105:       assertFalse(node1.hasMoreThanOneChild());
1106:       assertFalse(node1.isLabel());
1107:       assertFalse(node1.isAssignAdd());
1108:       assertFalse(node1.isBlock());
1109:       assertFalse(node1.isHook());
1110:       assertTrue(node1.isThrow());
1111:       assertFalse(node1.isParamList());
1112:       assertFalse(node1.isGetterDef());
1113:       assertFalse(node1.isNumber());
1114:       assertFalse(node1.isLabelName());
1115:       assertFalse(node1.isArrayLit());
1116:       assertFalse(node1.isStringKey());
1117:       assertEquals((-1), node1.getCharno());
1118:       assertFalse(node1.isScript());
1119:       assertFalse(node1.isWith());
1120:       assertFalse(node1.isExprResult());
1121:       assertFalse(node1.hasOneChild());
1122:       assertFalse(node1.isInstanceOf());
1123:       assertFalse(node1.isCast());
1124:       assertFalse(node1.isAssign());
1125:       assertFalse(node1.hasChildren());
1126:       assertFalse(node1.isThis());
1127:       assertFalse(node1.isTypeOf());
1128:       assertFalse(node1.isDec());
1129:       assertFalse(node1.isComma());
1130:       assertEquals((-1), node1.getLineno());
1131:       assertFalse(node1.isBreak());
1132:       assertFalse(node1.isGetElem());
1133:       assertFalse(node1.isOr());
1134:       assertFalse(node1.isString());
1135:       assertFalse(node1.isInc());
1136:       assertFalse(node1.isContinue());
1137:       assertFalse(node1.isFalse());
1138:       assertFalse(node1.isWhile());
1139:       assertFalse(node1.isReturn());
1140:       assertEquals((-1), node1.getSourcePosition());
1141:       assertEquals(49, node1.getType());
1142:       assertFalse(node1.isGetProp());
1143:       assertFalse(node1.isAnd());
1144:       assertFalse(node1.isObjectLit());
1145:       assertFalse(node1.isNot());
1146:       assertFalse(node1.isDebugger());
1147:       assertFalse(node2.isCall());
1148:       assertFalse(node2.isName());
1149:       assertFalse(node2.isVar());
1150:       assertFalse(node2.isStringKey());
1151:       assertFalse(node2.isNull());
1152:       assertFalse(node2.isParamList());
1153:       assertFalse(node2.isContinue());
1154:       assertEquals(40, node2.getType());
1155:       assertEquals(0, node2.getChildCount());
1156:       assertFalse(node2.isOr());
1157:       assertFalse(node2.isLabel());
1158:       assertFalse(node2.isSetterDef());
1159:       assertFalse(node2.isAdd());
1160:       assertFalse(node2.isAssignAdd());
1161:       assertFalse(node2.isDefaultCase());
1162:       assertFalse(node2.isDo());
1163:       assertFalse(node2.isNew());
1164:       assertFalse(node2.isFor());
1165:       assertFalse(node2.isGetterDef());
1166:       assertFalse(node2.isNumber());
1167:       assertFalse(node2.isNE());
1168:       assertFalse(node2.isIf());
1169:       assertFalse(node2.isArrayLit());
1170:       assertFalse(node2.isLabelName());
1171:       assertEquals((-1), node2.getLineno());
1172:       assertFalse(node2.hasMoreThanOneChild());
1173:       assertFalse(node2.isWith());
1174:       assertFalse(node2.isCatch());
1175:       assertFalse(node2.isInstanceOf());
1176:       assertFalse(node2.isRegExp());
1177:       assertFalse(node2.isBlock());
1178:       assertTrue(node2.isString());
1179:       assertFalse(node2.isThis());
1180:       assertFalse(node2.isScript());
1181:       assertFalse(node2.isTry());
1182:       assertFalse(node2.hasOneChild());
1183:       assertFalse(node2.isCase());
1184:       assertFalse(node2.isThrow());
1185:       assertFalse(node2.isFalse());
1186:       assertFalse(node2.isHook());
1187:       assertFalse(node2.isComma());
1188:       assertEquals((-1), node2.getCharno());
1189:       assertFalse(node2.isSwitch());
1190:       assertFalse(node2.isBreak());
1191:       assertFalse(node2.isIn());
1192:       assertFalse(node2.isInc());
1193:       assertFalse(node2.isGetElem());
1194:       assertFalse(node2.isCast());
1195:       assertFalse(node2.isEmpty());
1196:       assertFalse(node2.hasChildren());
1197:       assertFalse(node2.isTypeOf());
1198:       assertFalse(node2.isAssign());
1199:       assertFalse(node2.isDec());
1200:       assertEquals((-1), node2.getSourcePosition());
1201:       assertFalse(node2.isDebugger());
1202:       assertFalse(node2.isVoid());
1203:       assertFalse(node2.isFunction());
1204:       assertFalse(node2.isExprResult());
1205:       assertFalse(node2.isTrue());
1206:       assertFalse(node2.isDelProp());
1207:       assertFalse(node2.isAnd());
1208:       assertFalse(node2.isObjectLit());
1209:       assertFalse(node2.isWhile());
1210:       assertFalse(node2.isReturn());
1211:       assertFalse(node2.isNot());
1212:       assertFalse(node2.isGetProp());
1213:       assertFalse(node3.isTry());
1214:       assertFalse(node3.isDebugger());
1215:       assertFalse(node3.isArrayLit());
1216:       assertFalse(node3.isTrue());
1217:       assertFalse(node3.isVoid());
1218:       assertFalse(node3.isDefaultCase());
1219:       assertFalse(node3.isGetterDef());
1220:       assertFalse(node3.isEmpty());
1221:       assertFalse(node3.isNE());
1222:       assertFalse(node3.isNull());
1223:       assertFalse(node3.isIf());
1224:       assertFalse(node3.isName());
1225:       assertFalse(node3.isDelProp());
1226:       assertFalse(node3.isFor());
1227:       assertFalse(node3.isCatch());
1228:       assertFalse(node3.isCall());
1229:       assertFalse(node3.isRegExp());
1230:       assertTrue(node3.isString());
1231:       assertFalse(node3.isAdd());
1232:       assertFalse(node3.isBlock());
1233:       assertFalse(node3.isHook());
1234:       assertFalse(node3.isNew());
1235:       assertEquals((-1), node3.getCharno());
1236:       assertFalse(node3.isSwitch());
1237:       assertFalse(node3.isVar());
1238:       assertFalse(node3.isStringKey());
1239:       assertFalse(node3.isDo());
1240:       assertFalse(node3.isCase());
1241:       assertEquals(0, node3.getChildCount());
1242:       assertFalse(node3.isLabel());
1243:       assertFalse(node3.isParamList());
1244:       assertFalse(node3.isAssignAdd());
1245:       assertFalse(node3.isLabelName());
1246:       assertFalse(node3.hasOneChild());
1247:       assertFalse(node3.isNot());
1248:       assertEquals((-1), node3.getSourcePosition());
1249:       assertFalse(node3.isObjectLit());
1250:       assertFalse(node3.isScript());
1251:       assertFalse(node3.isNumber());
1252:       assertFalse(node3.isReturn());
1253:       assertEquals((-1), node3.getLineno());
1254:       assertFalse(node3.isOr());
1255:       assertFalse(node3.isGetProp());
1256:       assertFalse(node3.isThis());
1257:       assertFalse(node3.isWhile());
1258:       assertFalse(node3.isWith());
1259:       assertFalse(node3.isAssign());
1260:       assertFalse(node3.isGetElem());
1261:       assertFalse(node3.isDec());
1262:       assertFalse(node3.hasChildren());
1263:       assertFalse(node3.isBreak());
1264:       assertFalse(node3.hasMoreThanOneChild());
1265:       assertFalse(node3.isComma());
1266:       assertFalse(node3.isTypeOf());
1267:       assertFalse(node3.isExprResult());
1268:       assertFalse(node3.isInstanceOf());
1269:       assertFalse(node3.isThrow());
1270:       assertFalse(node3.isInc());
1271:       assertFalse(node3.isSetterDef());
1272:       assertFalse(node3.isIn());
1273:       assertFalse(node3.isAnd());
1274:       assertEquals(40, node3.getType());
1275:       assertFalse(node3.isCast());
1276:       assertFalse(node3.isFunction());
1277:       assertFalse(node3.isFalse());
1278:       assertFalse(node3.isContinue());
1279:       assertFalse(boolean1);
1280:       assertFalse(node1.equals((Object)node0));
1281:       assertFalse(node1.equals((Object)node2));
1282:       assertFalse(node1.equals((Object)node3));
1283:       assertFalse(node2.equals((Object)node0));
1284:       assertFalse(node2.equals((Object)node1));
1285:       assertFalse(node3.equals((Object)node0));
1286:       assertFalse(node3.equals((Object)node1));
1287:       assertTrue(boolean1 == boolean0);
1288:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1289:       assertEquals(53, Node.INPUT_ID);
1290:       assertEquals(36, Node.QUOTED_PROP);
1291:       assertEquals(43, Node.IS_CONSTANT_NAME);
1292:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1293:       assertEquals(29, Node.JSDOC_INFO_PROP);
1294:       assertEquals(55, Node.INFERRED_FUNCTION);
1295:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1296:       assertEquals(39, Node.EMPTY_BLOCK);
1297:       assertEquals(2, Node.POST_FLAG);
1298:       assertEquals(46, Node.IS_NAMESPACE);
1299:       assertEquals(47, Node.IS_DISPATCHER);
1300:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1301:       assertEquals(40, Node.ORIGINALNAME_PROP);
1302:       assertEquals(30, Node.VAR_ARGS_NAME);
1303:       assertEquals(54, Node.SLASH_V);
1304:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1305:       
1306:       boolean boolean2 = node2.isSwitch();
1307:       assertFalse(node2.isCall());
1308:       assertFalse(node2.isName());
1309:       assertFalse(node2.isVar());
1310:       assertFalse(node2.isStringKey());
1311:       assertFalse(node2.isNull());
1312:       assertFalse(node2.isParamList());
1313:       assertFalse(node2.isContinue());
1314:       assertEquals(40, node2.getType());
1315:       assertEquals(0, node2.getChildCount());
1316:       assertFalse(node2.isOr());
1317:       assertFalse(node2.isLabel());
1318:       assertFalse(node2.isSetterDef());
1319:       assertFalse(node2.isAdd());
1320:       assertFalse(node2.isAssignAdd());
1321:       assertFalse(node2.isDefaultCase());
1322:       assertFalse(node2.isDo());
1323:       assertFalse(node2.isNew());
1324:       assertFalse(node2.isFor());
1325:       assertFalse(node2.isGetterDef());
1326:       assertFalse(node2.isNumber());
1327:       assertFalse(node2.isNE());
1328:       assertFalse(node2.isIf());
1329:       assertFalse(node2.isArrayLit());
1330:       assertFalse(node2.isLabelName());
1331:       assertEquals((-1), node2.getLineno());
1332:       assertFalse(node2.hasMoreThanOneChild());
1333:       assertFalse(node2.isWith());
1334:       assertFalse(node2.isCatch());
1335:       assertFalse(node2.isInstanceOf());
1336:       assertFalse(node2.isRegExp());
1337:       assertFalse(node2.isBlock());
1338:       assertTrue(node2.isString());
1339:       assertFalse(node2.isThis());
1340:       assertFalse(node2.isScript());
1341:       assertFalse(node2.isTry());
1342:       assertFalse(node2.hasOneChild());
1343:       assertFalse(node2.isCase());
1344:       assertFalse(node2.isThrow());
1345:       assertFalse(node2.isFalse());
1346:       assertFalse(node2.isHook());
1347:       assertFalse(node2.isComma());
1348:       assertEquals((-1), node2.getCharno());
1349:       assertFalse(node2.isSwitch());
1350:       assertFalse(node2.isBreak());
1351:       assertFalse(node2.isIn());
1352:       assertFalse(node2.isInc());
1353:       assertFalse(node2.isGetElem());
1354:       assertFalse(node2.isCast());
1355:       assertFalse(node2.isEmpty());
1356:       assertFalse(node2.hasChildren());
1357:       assertFalse(node2.isTypeOf());
1358:       assertFalse(node2.isAssign());
1359:       assertFalse(node2.isDec());
1360:       assertEquals((-1), node2.getSourcePosition());
1361:       assertFalse(node2.isDebugger());
1362:       assertFalse(node2.isVoid());
1363:       assertFalse(node2.isFunction());
1364:       assertFalse(node2.isExprResult());
1365:       assertFalse(node2.isTrue());
1366:       assertFalse(node2.isDelProp());
1367:       assertFalse(node2.isAnd());
1368:       assertFalse(node2.isObjectLit());
1369:       assertFalse(node2.isWhile());
1370:       assertFalse(node2.isReturn());
1371:       assertFalse(node2.isNot());
1372:       assertFalse(node2.isGetProp());
1373:       assertFalse(boolean2);
1374:       assertFalse(node2.equals((Object)node0));
1375:       assertFalse(node2.equals((Object)node1));
1376:       assertTrue(boolean2 == boolean1);
1377:       assertTrue(boolean2 == boolean0);
1378:       
1379:       Node node4 = node0.cloneNode();
1380:       assertFalse(node0.hasMoreThanOneChild());
1381:       assertFalse(node0.isOr());
1382:       assertFalse(node0.isContinue());
1383:       assertFalse(node0.isNumber());
1384:       assertFalse(node0.isLabelName());
1385:       assertFalse(node0.isCast());
1386:       assertFalse(node0.isVar());
1387:       assertFalse(node0.isAdd());
1388:       assertFalse(node0.isSetterDef());
1389:       assertFalse(node0.isNew());
1390:       assertFalse(node0.isDo());
1391:       assertFalse(node0.isLabel());
1392:       assertFalse(node0.isAssignAdd());
1393:       assertFalse(node0.isCatch());
1394:       assertEquals(0, node0.getChildCount());
1395:       assertFalse(node0.isWith());
1396:       assertFalse(node0.isInstanceOf());
1397:       assertEquals(0, node0.getCharno());
1398:       assertFalse(node0.isParamList());
1399:       assertFalse(node0.isStringKey());
1400:       assertFalse(node0.isHook());
1401:       assertFalse(node0.hasOneChild());
1402:       assertFalse(node0.isScript());
1403:       assertFalse(node0.isThis());
1404:       assertFalse(node0.isRegExp());
1405:       assertFalse(node0.isTry());
1406:       assertFalse(node0.isFor());
1407:       assertFalse(node0.isBlock());
1408:       assertFalse(node0.isCase());
1409:       assertFalse(node0.isIn());
1410:       assertFalse(node0.isString());
1411:       assertFalse(node0.isSwitch());
1412:       assertFalse(node0.isNE());
1413:       assertFalse(node0.isGetterDef());
1414:       assertFalse(node0.isDelProp());
1415:       assertFalse(node0.isIf());
1416:       assertFalse(node0.isArrayLit());
1417:       assertFalse(node0.isEmpty());
1418:       assertFalse(node0.isFalse());
1419:       assertFalse(node0.isFunction());
1420:       assertFalse(node0.isInc());
1421:       assertFalse(node0.isThrow());
1422:       assertFalse(node0.isDefaultCase());
1423:       assertFalse(node0.isObjectLit());
1424:       assertFalse(node0.isNot());
1425:       assertEquals(0, node0.getLineno());
1426:       assertFalse(node0.isExprResult());
1427:       assertFalse(node0.isTrue());
1428:       assertFalse(node0.isNull());
1429:       assertEquals(0, node0.getSourcePosition());
1430:       assertFalse(node0.isBreak());
1431:       assertFalse(node0.isVoid());
1432:       assertFalse(node0.isDebugger());
1433:       assertFalse(node0.isName());
1434:       assertFalse(node0.isAnd());
1435:       assertFalse(node0.isCall());
1436:       assertFalse(node0.isAssign());
1437:       assertFalse(node0.isGetElem());
1438:       assertFalse(node0.isTypeOf());
1439:       assertFalse(node0.hasChildren());
1440:       assertFalse(node0.isGetProp());
1441:       assertFalse(node0.isDec());
1442:       assertFalse(node0.isComma());
1443:       assertFalse(node0.isReturn());
1444:       assertFalse(node0.isWhile());
1445:       assertEquals(330, node0.getType());
1446:       assertFalse(node4.isBreak());
1447:       assertFalse(node4.isGetProp());
1448:       assertFalse(node4.isObjectLit());
1449:       assertFalse(node4.isAnd());
1450:       assertFalse(node4.isNot());
1451:       assertFalse(node4.isScript());
1452:       assertFalse(node4.isString());
1453:       assertFalse(node4.isWith());
1454:       assertFalse(node4.isCase());
1455:       assertFalse(node4.isExprResult());
1456:       assertFalse(node4.hasOneChild());
1457:       assertFalse(node4.isInstanceOf());
1458:       assertFalse(node4.isHook());
1459:       assertEquals(330, node4.getType());
1460:       assertFalse(node4.isAssign());
1461:       assertFalse(node4.isThis());
1462:       assertFalse(node4.isComma());
1463:       assertFalse(node4.hasChildren());
1464:       assertFalse(node4.isNumber());
1465:       assertFalse(node4.isTypeOf());
1466:       assertFalse(node4.isDec());
1467:       assertFalse(node4.isDelProp());
1468:       assertFalse(node4.isGetterDef());
1469:       assertFalse(node4.isGetElem());
1470:       assertFalse(node4.isLabelName());
1471:       assertFalse(node4.isEmpty());
1472:       assertFalse(node4.isArrayLit());
1473:       assertFalse(node4.isOr());
1474:       assertFalse(node4.isTrue());
1475:       assertFalse(node4.isSwitch());
1476:       assertFalse(node4.isDefaultCase());
1477:       assertFalse(node4.isNew());
1478:       assertFalse(node4.isDo());
1479:       assertFalse(node4.isAdd());
1480:       assertEquals(0, node4.getChildCount());
1481:       assertFalse(node4.isVar());
1482:       assertFalse(node4.isAssignAdd());
1483:       assertFalse(node4.isLabel());
1484:       assertFalse(node4.isNull());
1485:       assertFalse(node4.isParamList());
1486:       assertFalse(node4.isName());
1487:       assertFalse(node4.isCall());
1488:       assertFalse(node4.isSetterDef());
1489:       assertEquals(0, node4.getLineno());
1490:       assertFalse(node4.isStringKey());
1491:       assertEquals(0, node4.getSourcePosition());
1492:       assertFalse(node4.isRegExp());
1493:       assertFalse(node4.isWhile());
1494:       assertFalse(node4.isTry());
1495:       assertFalse(node4.isVoid());
1496:       assertFalse(node4.isCatch());
1497:       assertFalse(node4.hasMoreThanOneChild());
1498:       assertFalse(node4.isBlock());
1499:       assertFalse(node4.isFor());
1500:       assertFalse(node4.isReturn());
1501:       assertFalse(node4.isNE());
1502:       assertFalse(node4.isIf());
1503:       assertFalse(node4.isIn());
1504:       assertEquals(0, node4.getCharno());
1505:       assertFalse(node4.isDebugger());
1506:       assertFalse(node4.isFunction());
1507:       assertFalse(node4.isInc());
1508:       assertFalse(node4.isCast());
1509:       assertFalse(node4.isContinue());
1510:       assertFalse(node4.isFalse());
1511:       assertFalse(node4.isThrow());
1512:       assertEquals(0, nodeArray0.length);
1513:       assertNotNull(node4);
1514:       assertFalse(node0.equals((Object)node2));
1515:       assertFalse(node0.equals((Object)node1));
1516:       assertFalse(node0.equals((Object)node3));
1517:       assertFalse(node4.equals((Object)node1));
1518:       assertFalse(node4.equals((Object)node3));
1519:       assertFalse(node4.equals((Object)node2));
1520:       assertFalse(node4.equals((Object)node0));
1521:       
1522:       Node node5 = Node.newString(153, "com.google.javascript.rhino.Node$IntPropListItem", 51, 44);
1523:       assertFalse(node5.isDo());
1524:       assertFalse(node5.isContinue());
1525:       assertFalse(node5.isWhile());
1526:       assertFalse(node5.hasMoreThanOneChild());
1527:       assertFalse(node5.isOr());
1528:       assertFalse(node5.isAdd());
1529:       assertFalse(node5.isLabel());
1530:       assertFalse(node5.isAssignAdd());
1531:       assertFalse(node5.isReturn());
1532:       assertFalse(node5.isBlock());
1533:       assertFalse(node5.isNew());
1534:       assertFalse(node5.isCast());
1535:       assertFalse(node5.isStringKey());
1536:       assertFalse(node5.isVar());
1537:       assertFalse(node5.isNumber());
1538:       assertFalse(node5.isParamList());
1539:       assertFalse(node5.isNot());
1540:       assertFalse(node5.isAnd());
1541:       assertFalse(node5.isObjectLit());
1542:       assertFalse(node5.isDebugger());
1543:       assertEquals(0, node5.getChildCount());
1544:       assertFalse(node5.isGetProp());
1545:       assertFalse(node5.isDefaultCase());
1546:       assertFalse(node5.isName());
1547:       assertFalse(node5.isAssign());
1548:       assertFalse(node5.isEmpty());
1549:       assertFalse(node5.isGetElem());
1550:       assertFalse(node5.isCall());
1551:       assertEquals(153, node5.getType());
1552:       assertFalse(node5.isTypeOf());
1553:       assertFalse(node5.isNull());
1554:       assertFalse(node5.hasChildren());
1555:       assertFalse(node5.isDec());
1556:       assertFalse(node5.isComma());
1557:       assertFalse(node5.isExprResult());
1558:       assertFalse(node5.isTrue());
1559:       assertFalse(node5.isDelProp());
1560:       assertFalse(node5.isBreak());
1561:       assertFalse(node5.isVoid());
1562:       assertFalse(node5.isCase());
1563:       assertFalse(node5.isString());
1564:       assertFalse(node5.isIn());
1565:       assertEquals(51, node5.getLineno());
1566:       assertFalse(node5.isInc());
1567:       assertFalse(node5.isFalse());
1568:       assertFalse(node5.isThrow());
1569:       assertFalse(node5.isGetterDef());
1570:       assertTrue(node5.isLabelName());
1571:       assertEquals(44, node5.getCharno());
1572:       assertFalse(node5.isArrayLit());
1573:       assertFalse(node5.isSwitch());
1574:       assertFalse(node5.isWith());
1575:       assertFalse(node5.isCatch());
1576:       assertFalse(node5.isRegExp());
1577:       assertFalse(node5.isFunction());
1578:       assertFalse(node5.isTry());
1579:       assertFalse(node5.isScript());
1580:       assertFalse(node5.isSetterDef());
1581:       assertFalse(node5.hasOneChild());
1582:       assertFalse(node5.isFor());
1583:       assertFalse(node5.isIf());
1584:       assertFalse(node5.isNE());
1585:       assertFalse(node5.isThis());
1586:       assertFalse(node5.isHook());
1587:       assertFalse(node5.isInstanceOf());
1588:       assertEquals(208940, node5.getSourcePosition());
1589:       assertNotNull(node5);
1590:       assertFalse(node5.equals((Object)node2));
1591:       assertFalse(node5.equals((Object)node4));
1592:       assertFalse(node5.equals((Object)node0));
1593:       assertFalse(node5.equals((Object)node3));
1594:       assertFalse(node5.equals((Object)node1));
1595:       
1596:       int int0 = node3.getLineno();
1597:       assertFalse(node1.isRegExp());
1598:       assertFalse(node1.isVoid());
1599:       assertFalse(node1.isFunction());
1600:       assertFalse(node1.isDefaultCase());
1601:       assertFalse(node1.isTry());
1602:       assertFalse(node1.isCatch());
1603:       assertEquals(0, node1.getChildCount());
1604:       assertFalse(node1.isFor());
1605:       assertFalse(node1.isNE());
1606:       assertFalse(node1.isNull());
1607:       assertFalse(node1.isDelProp());
1608:       assertFalse(node1.isIf());
1609:       assertFalse(node1.isName());
1610:       assertFalse(node1.isEmpty());
1611:       assertFalse(node1.isCall());
1612:       assertFalse(node1.isSetterDef());
1613:       assertFalse(node1.isIn());
1614:       assertFalse(node1.isTrue());
1615:       assertFalse(node1.isSwitch());
1616:       assertFalse(node1.isDo());
1617:       assertFalse(node1.isCase());
1618:       assertFalse(node1.isAdd());
1619:       assertFalse(node1.isNew());
1620:       assertFalse(node1.isVar());
1621:       assertFalse(node1.hasMoreThanOneChild());
1622:       assertFalse(node1.isLabel());
1623:       assertFalse(node1.isAssignAdd());
1624:       assertFalse(node1.isBlock());
1625:       assertFalse(node1.isHook());
1626:       assertTrue(node1.isThrow());
1627:       assertFalse(node1.isParamList());
1628:       assertFalse(node1.isGetterDef());
1629:       assertFalse(node1.isNumber());
1630:       assertFalse(node1.isLabelName());
1631:       assertFalse(node1.isArrayLit());
1632:       assertFalse(node1.isStringKey());
1633:       assertEquals((-1), node1.getCharno());
1634:       assertFalse(node1.isScript());
1635:       assertFalse(node1.isWith());
1636:       assertFalse(node1.isExprResult());
1637:       assertFalse(node1.hasOneChild());
1638:       assertFalse(node1.isInstanceOf());
1639:       assertFalse(node1.isCast());
1640:       assertFalse(node1.isAssign());
1641:       assertFalse(node1.hasChildren());
1642:       assertFalse(node1.isThis());
1643:       assertFalse(node1.isTypeOf());
1644:       assertFalse(node1.isDec());
1645:       assertFalse(node1.isComma());
1646:       assertEquals((-1), node1.getLineno());
1647:       assertFalse(node1.isBreak());
1648:       assertFalse(node1.isGetElem());
1649:       assertFalse(node1.isOr());
1650:       assertFalse(node1.isString());
1651:       assertFalse(node1.isInc());
1652:       assertFalse(node1.isContinue());
1653:       assertFalse(node1.isFalse());
1654:       assertFalse(node1.isWhile());
1655:       assertFalse(node1.isReturn());
1656:       assertEquals((-1), node1.getSourcePosition());
1657:       assertEquals(49, node1.getType());
1658:       assertFalse(node1.isGetProp());
1659:       assertFalse(node1.isAnd());
1660:       assertFalse(node1.isObjectLit());
1661:       assertFalse(node1.isNot());
1662:       assertFalse(node1.isDebugger());
1663:       assertFalse(node2.isCall());
1664:       assertFalse(node2.isName());
1665:       assertFalse(node2.isVar());
1666:       assertFalse(node2.isStringKey());
1667:       assertFalse(node2.isNull());
1668:       assertFalse(node2.isParamList());
1669:       assertFalse(node2.isContinue());
1670:       assertEquals(40, node2.getType());
1671:       assertEquals(0, node2.getChildCount());
1672:       assertFalse(node2.isOr());
1673:       assertFalse(node2.isLabel());
1674:       assertFalse(node2.isSetterDef());
1675:       assertFalse(node2.isAdd());
1676:       assertFalse(node2.isAssignAdd());
1677:       assertFalse(node2.isDefaultCase());
1678:       assertFalse(node2.isDo());
1679:       assertFalse(node2.isNew());
1680:       assertFalse(node2.isFor());
1681:       assertFalse(node2.isGetterDef());
1682:       assertFalse(node2.isNumber());
1683:       assertFalse(node2.isNE());
1684:       assertFalse(node2.isIf());
1685:       assertFalse(node2.isArrayLit());
1686:       assertFalse(node2.isLabelName());
1687:       assertEquals((-1), node2.getLineno());
1688:       assertFalse(node2.hasMoreThanOneChild());
1689:       assertFalse(node2.isWith());
1690:       assertFalse(node2.isCatch());
1691:       assertFalse(node2.isInstanceOf());
1692:       assertFalse(node2.isRegExp());
1693:       assertFalse(node2.isBlock());
1694:       assertTrue(node2.isString());
1695:       assertFalse(node2.isThis());
1696:       assertFalse(node2.isScript());
1697:       assertFalse(node2.isTry());
1698:       assertFalse(node2.hasOneChild());
1699:       assertFalse(node2.isCase());
1700:       assertFalse(node2.isThrow());
1701:       assertFalse(node2.isFalse());
1702:       assertFalse(node2.isHook());
1703:       assertFalse(node2.isComma());
1704:       assertEquals((-1), node2.getCharno());
1705:       assertFalse(node2.isSwitch());
1706:       assertFalse(node2.isBreak());
1707:       assertFalse(node2.isIn());
1708:       assertFalse(node2.isInc());
1709:       assertFalse(node2.isGetElem());
1710:       assertFalse(node2.isCast());
1711:       assertFalse(node2.isEmpty());
1712:       assertFalse(node2.hasChildren());
1713:       assertFalse(node2.isTypeOf());
1714:       assertFalse(node2.isAssign());
1715:       assertFalse(node2.isDec());
1716:       assertEquals((-1), node2.getSourcePosition());
1717:       assertFalse(node2.isDebugger());
1718:       assertFalse(node2.isVoid());
1719:       assertFalse(node2.isFunction());
1720:       assertFalse(node2.isExprResult());
1721:       assertFalse(node2.isTrue());
1722:       assertFalse(node2.isDelProp());
1723:       assertFalse(node2.isAnd());
1724:       assertFalse(node2.isObjectLit());
1725:       assertFalse(node2.isWhile());
1726:       assertFalse(node2.isReturn());
1727:       assertFalse(node2.isNot());
1728:       assertFalse(node2.isGetProp());
1729:       assertFalse(node3.isTry());
1730:       assertFalse(node3.isDebugger());
1731:       assertFalse(node3.isArrayLit());
1732:       assertFalse(node3.isTrue());
1733:       assertFalse(node3.isVoid());
1734:       assertFalse(node3.isDefaultCase());
1735:       assertFalse(node3.isGetterDef());
1736:       assertFalse(node3.isEmpty());
1737:       assertFalse(node3.isNE());
1738:       assertFalse(node3.isNull());
1739:       assertFalse(node3.isIf());
1740:       assertFalse(node3.isName());
1741:       assertFalse(node3.isDelProp());
1742:       assertFalse(node3.isFor());
1743:       assertFalse(node3.isCatch());
1744:       assertFalse(node3.isCall());
1745:       assertFalse(node3.isRegExp());
1746:       assertTrue(node3.isString());
1747:       assertFalse(node3.isAdd());
1748:       assertFalse(node3.isBlock());
1749:       assertFalse(node3.isHook());
1750:       assertFalse(node3.isNew());
1751:       assertEquals((-1), node3.getCharno());
1752:       assertFalse(node3.isSwitch());
1753:       assertFalse(node3.isVar());
1754:       assertFalse(node3.isStringKey());
1755:       assertFalse(node3.isDo());
1756:       assertFalse(node3.isCase());
1757:       assertEquals(0, node3.getChildCount());
1758:       assertFalse(node3.isLabel());
1759:       assertFalse(node3.isParamList());
1760:       assertFalse(node3.isAssignAdd());
1761:       assertFalse(node3.isLabelName());
1762:       assertFalse(node3.hasOneChild());
1763:       assertFalse(node3.isNot());
1764:       assertEquals((-1), node3.getSourcePosition());
1765:       assertFalse(node3.isObjectLit());
1766:       assertFalse(node3.isScript());
1767:       assertFalse(node3.isNumber());
1768:       assertFalse(node3.isReturn());
1769:       assertEquals((-1), node3.getLineno());
1770:       assertFalse(node3.isOr());
1771:       assertFalse(node3.isGetProp());
1772:       assertFalse(node3.isThis());
1773:       assertFalse(node3.isWhile());
1774:       assertFalse(node3.isWith());
1775:       assertFalse(node3.isAssign());
1776:       assertFalse(node3.isGetElem());
1777:       assertFalse(node3.isDec());
1778:       assertFalse(node3.hasChildren());
1779:       assertFalse(node3.isBreak());
1780:       assertFalse(node3.hasMoreThanOneChild());
1781:       assertFalse(node3.isComma());
1782:       assertFalse(node3.isTypeOf());
1783:       assertFalse(node3.isExprResult());
1784:       assertFalse(node3.isInstanceOf());
1785:       assertFalse(node3.isThrow());
1786:       assertFalse(node3.isInc());
1787:       assertFalse(node3.isSetterDef());
1788:       assertFalse(node3.isIn());
1789:       assertFalse(node3.isAnd());
1790:       assertEquals(40, node3.getType());
1791:       assertFalse(node3.isCast());
1792:       assertFalse(node3.isFunction());
1793:       assertFalse(node3.isFalse());
1794:       assertFalse(node3.isContinue());
1795:       assertEquals((-1), int0);
1796:       assertFalse(node1.equals((Object)node5));
1797:       assertFalse(node1.equals((Object)node4));
1798:       assertFalse(node1.equals((Object)node0));
1799:       assertFalse(node1.equals((Object)node2));
1800:       assertFalse(node1.equals((Object)node3));
1801:       assertFalse(node2.equals((Object)node4));
1802:       assertFalse(node2.equals((Object)node0));
1803:       assertFalse(node2.equals((Object)node5));
1804:       assertFalse(node2.equals((Object)node1));
1805:       assertFalse(node3.equals((Object)node0));
1806:       assertFalse(node3.equals((Object)node5));
1807:       assertFalse(node3.equals((Object)node4));
1808:       assertFalse(node3.equals((Object)node1));
1809:       
1810:       Node node6 = new Node(118, node0, node4, node2);
1811:       assertFalse(node0.hasMoreThanOneChild());
1812:       assertFalse(node0.isOr());
1813:       assertFalse(node0.isContinue());
1814:       assertFalse(node0.isNumber());
1815:       assertFalse(node0.isLabelName());
1816:       assertFalse(node0.isCast());
1817:       assertFalse(node0.isVar());
1818:       assertFalse(node0.isAdd());
1819:       assertFalse(node0.isSetterDef());
1820:       assertFalse(node0.isNew());
1821:       assertFalse(node0.isDo());
1822:       assertFalse(node0.isLabel());
1823:       assertFalse(node0.isAssignAdd());
1824:       assertFalse(node0.isCatch());
1825:       assertEquals(0, node0.getChildCount());
1826:       assertFalse(node0.isWith());
1827:       assertFalse(node0.isInstanceOf());
1828:       assertEquals(0, node0.getCharno());
1829:       assertFalse(node0.isParamList());
1830:       assertFalse(node0.isStringKey());
1831:       assertFalse(node0.isHook());
1832:       assertFalse(node0.hasOneChild());
1833:       assertFalse(node0.isScript());
1834:       assertFalse(node0.isThis());
1835:       assertFalse(node0.isRegExp());
1836:       assertFalse(node0.isTry());
1837:       assertFalse(node0.isFor());
1838:       assertFalse(node0.isBlock());
1839:       assertFalse(node0.isCase());
1840:       assertFalse(node0.isIn());
1841:       assertFalse(node0.isString());
1842:       assertFalse(node0.isSwitch());
1843:       assertFalse(node0.isNE());
1844:       assertFalse(node0.isGetterDef());
1845:       assertFalse(node0.isDelProp());
1846:       assertFalse(node0.isIf());
1847:       assertFalse(node0.isArrayLit());
1848:       assertFalse(node0.isEmpty());
1849:       assertFalse(node0.isFalse());
1850:       assertFalse(node0.isFunction());
1851:       assertFalse(node0.isInc());
1852:       assertFalse(node0.isThrow());
1853:       assertFalse(node0.isDefaultCase());
1854:       assertFalse(node0.isObjectLit());
1855:       assertFalse(node0.isNot());
1856:       assertEquals(0, node0.getLineno());
1857:       assertFalse(node0.isExprResult());
1858:       assertFalse(node0.isTrue());
1859:       assertFalse(node0.isNull());
1860:       assertEquals(0, node0.getSourcePosition());
1861:       assertFalse(node0.isBreak());
1862:       assertFalse(node0.isVoid());
1863:       assertFalse(node0.isDebugger());
1864:       assertFalse(node0.isName());
1865:       assertFalse(node0.isAnd());
1866:       assertFalse(node0.isCall());
1867:       assertFalse(node0.isAssign());
1868:       assertFalse(node0.isGetElem());
1869:       assertFalse(node0.isTypeOf());
1870:       assertFalse(node0.hasChildren());
1871:       assertFalse(node0.isGetProp());
1872:       assertFalse(node0.isDec());
1873:       assertFalse(node0.isComma());
1874:       assertFalse(node0.isReturn());
1875:       assertFalse(node0.isWhile());
1876:       assertEquals(330, node0.getType());
1877:       assertFalse(node2.isCall());
1878:       assertFalse(node2.isName());
1879:       assertFalse(node2.isVar());
1880:       assertFalse(node2.isStringKey());
1881:       assertFalse(node2.isNull());
1882:       assertFalse(node2.isParamList());
1883:       assertFalse(node2.isContinue());
1884:       assertEquals(40, node2.getType());
1885:       assertEquals(0, node2.getChildCount());
1886:       assertFalse(node2.isOr());
1887:       assertFalse(node2.isLabel());
1888:       assertFalse(node2.isSetterDef());
1889:       assertFalse(node2.isAdd());
1890:       assertFalse(node2.isAssignAdd());
1891:       assertFalse(node2.isDefaultCase());
1892:       assertFalse(node2.isDo());
1893:       assertFalse(node2.isNew());
1894:       assertFalse(node2.isFor());
1895:       assertFalse(node2.isGetterDef());
1896:       assertFalse(node2.isNumber());
1897:       assertFalse(node2.isNE());
1898:       assertFalse(node2.isIf());
1899:       assertFalse(node2.isArrayLit());
1900:       assertFalse(node2.isLabelName());
1901:       assertEquals((-1), node2.getLineno());
1902:       assertFalse(node2.hasMoreThanOneChild());
1903:       assertFalse(node2.isWith());
1904:       assertFalse(node2.isCatch());
1905:       assertFalse(node2.isInstanceOf());
1906:       assertFalse(node2.isRegExp());
1907:       assertFalse(node2.isBlock());
1908:       assertTrue(node2.isString());
1909:       assertFalse(node2.isThis());
1910:       assertFalse(node2.isScript());
1911:       assertFalse(node2.isTry());
1912:       assertFalse(node2.hasOneChild());
1913:       assertFalse(node2.isCase());
1914:       assertFalse(node2.isThrow());
1915:       assertFalse(node2.isFalse());
1916:       assertFalse(node2.isHook());
1917:       assertFalse(node2.isComma());
1918:       assertEquals((-1), node2.getCharno());
1919:       assertFalse(node2.isSwitch());
1920:       assertFalse(node2.isBreak());
1921:       assertFalse(node2.isIn());
1922:       assertFalse(node2.isInc());
1923:       assertFalse(node2.isGetElem());
1924:       assertFalse(node2.isCast());
1925:       assertFalse(node2.isEmpty());
1926:       assertFalse(node2.hasChildren());
1927:       assertFalse(node2.isTypeOf());
1928:       assertFalse(node2.isAssign());
1929:       assertFalse(node2.isDec());
1930:       assertEquals((-1), node2.getSourcePosition());
1931:       assertFalse(node2.isDebugger());
1932:       assertFalse(node2.isVoid());
1933:       assertFalse(node2.isFunction());
1934:       assertFalse(node2.isExprResult());
1935:       assertFalse(node2.isTrue());
1936:       assertFalse(node2.isDelProp());
1937:       assertFalse(node2.isAnd());
1938:       assertFalse(node2.isObjectLit());
1939:       assertFalse(node2.isWhile());
1940:       assertFalse(node2.isReturn());
1941:       assertFalse(node2.isNot());
1942:       assertFalse(node2.isGetProp());
1943:       assertFalse(node4.isBreak());
1944:       assertFalse(node4.isGetProp());
1945:       assertFalse(node4.isObjectLit());
1946:       assertFalse(node4.isAnd());
1947:       assertFalse(node4.isNot());
1948:       assertFalse(node4.isScript());
1949:       assertFalse(node4.isString());
1950:       assertFalse(node4.isWith());
1951:       assertFalse(node4.isCase());
1952:       assertFalse(node4.isExprResult());
1953:       assertFalse(node4.hasOneChild());
1954:       assertFalse(node4.isInstanceOf());
1955:       assertFalse(node4.isHook());
1956:       assertEquals(330, node4.getType());
1957:       assertFalse(node4.isAssign());
1958:       assertFalse(node4.isThis());
1959:       assertFalse(node4.isComma());
1960:       assertFalse(node4.hasChildren());
1961:       assertFalse(node4.isNumber());
1962:       assertFalse(node4.isTypeOf());
1963:       assertFalse(node4.isDec());
1964:       assertFalse(node4.isDelProp());
1965:       assertFalse(node4.isGetterDef());
1966:       assertFalse(node4.isGetElem());
1967:       assertFalse(node4.isLabelName());
1968:       assertFalse(node4.isEmpty());
1969:       assertFalse(node4.isArrayLit());
1970:       assertFalse(node4.isOr());
1971:       assertFalse(node4.isTrue());
1972:       assertFalse(node4.isSwitch());
1973:       assertFalse(node4.isDefaultCase());
1974:       assertFalse(node4.isNew());
1975:       assertFalse(node4.isDo());
1976:       assertFalse(node4.isAdd());
1977:       assertEquals(0, node4.getChildCount());
1978:       assertFalse(node4.isVar());
1979:       assertFalse(node4.isAssignAdd());
1980:       assertFalse(node4.isLabel());
1981:       assertFalse(node4.isNull());
1982:       assertFalse(node4.isParamList());
1983:       assertFalse(node4.isName());
1984:       assertFalse(node4.isCall());
1985:       assertFalse(node4.isSetterDef());
1986:       assertEquals(0, node4.getLineno());
1987:       assertFalse(node4.isStringKey());
1988:       assertEquals(0, node4.getSourcePosition());
1989:       assertFalse(node4.isRegExp());
1990:       assertFalse(node4.isWhile());
1991:       assertFalse(node4.isTry());
1992:       assertFalse(node4.isVoid());
1993:       assertFalse(node4.isCatch());
1994:       assertFalse(node4.hasMoreThanOneChild());
1995:       assertFalse(node4.isBlock());
1996:       assertFalse(node4.isFor());
1997:       assertFalse(node4.isReturn());
1998:       assertFalse(node4.isNE());
1999:       assertFalse(node4.isIf());
2000:       assertFalse(node4.isIn());
2001:       assertEquals(0, node4.getCharno());
2002:       assertFalse(node4.isDebugger());
2003:       assertFalse(node4.isFunction());
2004:       assertFalse(node4.isInc());
2005:       assertFalse(node4.isCast());
2006:       assertFalse(node4.isContinue());
2007:       assertFalse(node4.isFalse());
2008:       assertFalse(node4.isThrow());
2009:       assertTrue(node6.hasChildren());
2010:       assertFalse(node6.isIn());
2011:       assertFalse(node6.isGetterDef());
2012:       assertFalse(node6.isSwitch());
2013:       assertFalse(node6.isNE());
2014:       assertFalse(node6.isArrayLit());
2015:       assertTrue(node6.hasMoreThanOneChild());
2016:       assertFalse(node6.isIf());
2017:       assertFalse(node6.isDelProp());
2018:       assertFalse(node6.isTry());
2019:       assertEquals((-1), node6.getCharno());
2020:       assertFalse(node6.isHook());
2021:       assertFalse(node6.isDebugger());
2022:       assertFalse(node6.isRegExp());
2023:       assertFalse(node6.isFor());
2024:       assertFalse(node6.isCase());
2025:       assertFalse(node6.isString());
2026:       assertFalse(node6.isGetProp());
2027:       assertFalse(node6.isSetterDef());
2028:       assertFalse(node6.isThis());
2029:       assertFalse(node6.isCatch());
2030:       assertFalse(node6.isInstanceOf());
2031:       assertTrue(node6.isVar());
2032:       assertFalse(node6.isObjectLit());
2033:       assertFalse(node6.isNot());
2034:       assertFalse(node6.isWith());
2035:       assertEquals(118, node6.getType());
2036:       assertFalse(node6.isAnd());
2037:       assertFalse(node6.isInc());
2038:       assertFalse(node6.isCast());
2039:       assertFalse(node6.isFalse());
2040:       assertFalse(node6.isFunction());
2041:       assertFalse(node6.isThrow());
2042:       assertFalse(node6.isOr());
2043:       assertFalse(node6.isLabel());
2044:       assertFalse(node6.isAssignAdd());
2045:       assertEquals((-1), node6.getLineno());
2046:       assertFalse(node6.isReturn());
2047:       assertEquals(3, node6.getChildCount());
2048:       assertFalse(node6.isDec());
2049:       assertEquals((-1), node6.getSourcePosition());
2050:       assertFalse(node6.isContinue());
2051:       assertFalse(node6.isNumber());
2052:       assertFalse(node6.isTypeOf());
2053:       assertFalse(node6.isLabelName());
2054:       assertFalse(node6.isGetElem());
2055:       assertFalse(node6.isBlock());
2056:       assertFalse(node6.isExprResult());
2057:       assertFalse(node6.isScript());
2058:       assertFalse(node6.isAssign());
2059:       assertFalse(node6.isWhile());
2060:       assertFalse(node6.hasOneChild());
2061:       assertFalse(node6.isComma());
2062:       assertFalse(node6.isStringKey());
2063:       assertFalse(node6.isBreak());
2064:       assertFalse(node6.isCall());
2065:       assertFalse(node6.isNull());
2066:       assertFalse(node6.isParamList());
2067:       assertFalse(node6.isVoid());
2068:       assertFalse(node6.isName());
2069:       assertFalse(node6.isNew());
2070:       assertFalse(node6.isTrue());
2071:       assertFalse(node6.isAdd());
2072:       assertFalse(node6.isDo());
2073:       assertFalse(node6.isEmpty());
2074:       assertFalse(node6.isDefaultCase());
2075:       assertEquals(0, nodeArray0.length);
2076:       assertNotNull(node6);
2077:       assertFalse(node0.equals((Object)node2));
2078:       assertFalse(node0.equals((Object)node4));
2079:       assertFalse(node0.equals((Object)node1));
2080:       assertFalse(node0.equals((Object)node5));
2081:       assertFalse(node0.equals((Object)node3));
2082:       assertFalse(node2.equals((Object)node4));
2083:       assertFalse(node2.equals((Object)node0));
2084:       assertFalse(node2.equals((Object)node5));
2085:       assertFalse(node2.equals((Object)node1));
2086:       assertFalse(node4.equals((Object)node5));
2087:       assertFalse(node4.equals((Object)node1));
2088:       assertFalse(node4.equals((Object)node3));
2089:       assertFalse(node4.equals((Object)node2));
2090:       assertFalse(node4.equals((Object)node0));
2091:       assertFalse(node6.equals((Object)node0));
2092:       assertFalse(node6.equals((Object)node1));
2093:       assertFalse(node6.equals((Object)node3));
2094:       assertFalse(node6.equals((Object)node2));
2095:       assertFalse(node6.equals((Object)node4));
2096:       assertFalse(node6.equals((Object)node5));
2097:       
2098:       Node node7 = node1.useSourceInfoFrom(node6);
2099:       assertFalse(node0.hasMoreThanOneChild());
2100:       assertFalse(node0.isOr());
2101:       assertFalse(node0.isContinue());
2102:       assertFalse(node0.isNumber());
2103:       assertFalse(node0.isLabelName());
2104:       assertFalse(node0.isCast());
2105:       assertFalse(node0.isVar());
2106:       assertFalse(node0.isAdd());
2107:       assertFalse(node0.isSetterDef());
2108:       assertFalse(node0.isNew());
2109:       assertFalse(node0.isDo());
2110:       assertFalse(node0.isLabel());
2111:       assertFalse(node0.isAssignAdd());
2112:       assertFalse(node0.isCatch());
2113:       assertEquals(0, node0.getChildCount());
2114:       assertFalse(node0.isWith());
2115:       assertFalse(node0.isInstanceOf());
2116:       assertEquals(0, node0.getCharno());
2117:       assertFalse(node0.isParamList());
2118:       assertFalse(node0.isStringKey());
2119:       assertFalse(node0.isHook());
2120:       assertFalse(node0.hasOneChild());
2121:       assertFalse(node0.isScript());
2122:       assertFalse(node0.isThis());
2123:       assertFalse(node0.isRegExp());
2124:       assertFalse(node0.isTry());
2125:       assertFalse(node0.isFor());
2126:       assertFalse(node0.isBlock());
2127:       assertFalse(node0.isCase());
2128:       assertFalse(node0.isIn());
2129:       assertFalse(node0.isString());
2130:       assertFalse(node0.isSwitch());
2131:       assertFalse(node0.isNE());
2132:       assertFalse(node0.isGetterDef());
2133:       assertFalse(node0.isDelProp());
2134:       assertFalse(node0.isIf());
2135:       assertFalse(node0.isArrayLit());
2136:       assertFalse(node0.isEmpty());
2137:       assertFalse(node0.isFalse());
2138:       assertFalse(node0.isFunction());
2139:       assertFalse(node0.isInc());
2140:       assertFalse(node0.isThrow());
2141:       assertFalse(node0.isDefaultCase());
2142:       assertFalse(node0.isObjectLit());
2143:       assertFalse(node0.isNot());
2144:       assertEquals(0, node0.getLineno());
2145:       assertFalse(node0.isExprResult());
2146:       assertFalse(node0.isTrue());
2147:       assertFalse(node0.isNull());
2148:       assertEquals(0, node0.getSourcePosition());
2149:       assertFalse(node0.isBreak());
2150:       assertFalse(node0.isVoid());
2151:       assertFalse(node0.isDebugger());
2152:       assertFalse(node0.isName());
2153:       assertFalse(node0.isAnd());
2154:       assertFalse(node0.isCall());
2155:       assertFalse(node0.isAssign());
2156:       assertFalse(node0.isGetElem());
2157:       assertFalse(node0.isTypeOf());
2158:       assertFalse(node0.hasChildren());
2159:       assertFalse(node0.isGetProp());
2160:       assertFalse(node0.isDec());
2161:       assertFalse(node0.isComma());
2162:       assertFalse(node0.isReturn());
2163:       assertFalse(node0.isWhile());
2164:       assertEquals(330, node0.getType());
2165:       assertFalse(node1.isRegExp());
2166:       assertFalse(node1.isVoid());
2167:       assertFalse(node1.isFunction());
2168:       assertFalse(node1.isDefaultCase());
2169:       assertFalse(node1.isTry());
2170:       assertFalse(node1.isCatch());
2171:       assertEquals(0, node1.getChildCount());
2172:       assertFalse(node1.isFor());
2173:       assertFalse(node1.isNE());
2174:       assertFalse(node1.isNull());
2175:       assertFalse(node1.isDelProp());
2176:       assertFalse(node1.isIf());
2177:       assertFalse(node1.isName());
2178:       assertFalse(node1.isEmpty());
2179:       assertFalse(node1.isCall());
2180:       assertFalse(node1.isSetterDef());
2181:       assertFalse(node1.isIn());
2182:       assertFalse(node1.isTrue());
2183:       assertFalse(node1.isSwitch());
2184:       assertFalse(node1.isDo());
2185:       assertFalse(node1.isCase());
2186:       assertFalse(node1.isAdd());
2187:       assertFalse(node1.isNew());
2188:       assertFalse(node1.isVar());
2189:       assertFalse(node1.hasMoreThanOneChild());
2190:       assertFalse(node1.isLabel());
2191:       assertFalse(node1.isAssignAdd());
2192:       assertFalse(node1.isBlock());
2193:       assertFalse(node1.isHook());
2194:       assertTrue(node1.isThrow());
2195:       assertFalse(node1.isParamList());
2196:       assertFalse(node1.isGetterDef());
2197:       assertFalse(node1.isNumber());
2198:       assertFalse(node1.isLabelName());
2199:       assertFalse(node1.isArrayLit());
2200:       assertFalse(node1.isStringKey());
2201:       assertEquals((-1), node1.getCharno());
2202:       assertFalse(node1.isScript());
2203:       assertFalse(node1.isWith());
2204:       assertFalse(node1.isExprResult());
2205:       assertFalse(node1.hasOneChild());
2206:       assertFalse(node1.isInstanceOf());
2207:       assertFalse(node1.isCast());
2208:       assertFalse(node1.isAssign());
2209:       assertFalse(node1.hasChildren());
2210:       assertFalse(node1.isThis());
2211:       assertFalse(node1.isTypeOf());
2212:       assertFalse(node1.isDec());
2213:       assertFalse(node1.isComma());
2214:       assertEquals((-1), node1.getLineno());
2215:       assertFalse(node1.isBreak());
2216:       assertFalse(node1.isGetElem());
2217:       assertFalse(node1.isOr());
2218:       assertFalse(node1.isString());
2219:       assertFalse(node1.isInc());
2220:       assertFalse(node1.isContinue());
2221:       assertFalse(node1.isFalse());
2222:       assertFalse(node1.isWhile());
2223:       assertFalse(node1.isReturn());
2224:       assertEquals((-1), node1.getSourcePosition());
2225:       assertEquals(49, node1.getType());
2226:       assertFalse(node1.isGetProp());
2227:       assertFalse(node1.isAnd());
2228:       assertFalse(node1.isObjectLit());
2229:       assertFalse(node1.isNot());
2230:       assertFalse(node1.isDebugger());
2231:       assertFalse(node2.isCall());
2232:       assertFalse(node2.isName());
2233:       assertFalse(node2.isVar());
2234:       assertFalse(node2.isStringKey());
2235:       assertFalse(node2.isNull());
2236:       assertFalse(node2.isParamList());
2237:       assertFalse(node2.isContinue());
2238:       assertEquals(40, node2.getType());
2239:       assertEquals(0, node2.getChildCount());
2240:       assertFalse(node2.isOr());
2241:       assertFalse(node2.isLabel());
2242:       assertFalse(node2.isSetterDef());
2243:       assertFalse(node2.isAdd());
2244:       assertFalse(node2.isAssignAdd());
2245:       assertFalse(node2.isDefaultCase());
2246:       assertFalse(node2.isDo());
2247:       assertFalse(node2.isNew());
2248:       assertFalse(node2.isFor());
2249:       assertFalse(node2.isGetterDef());
2250:       assertFalse(node2.isNumber());
2251:       assertFalse(node2.isNE());
2252:       assertFalse(node2.isIf());
2253:       assertFalse(node2.isArrayLit());
2254:       assertFalse(node2.isLabelName());
2255:       assertEquals((-1), node2.getLineno());
2256:       assertFalse(node2.hasMoreThanOneChild());
2257:       assertFalse(node2.isWith());
2258:       assertFalse(node2.isCatch());
2259:       assertFalse(node2.isInstanceOf());
2260:       assertFalse(node2.isRegExp());
2261:       assertFalse(node2.isBlock());
2262:       assertTrue(node2.isString());
2263:       assertFalse(node2.isThis());
2264:       assertFalse(node2.isScript());
2265:       assertFalse(node2.isTry());
2266:       assertFalse(node2.hasOneChild());
2267:       assertFalse(node2.isCase());
2268:       assertFalse(node2.isThrow());
2269:       assertFalse(node2.isFalse());
2270:       assertFalse(node2.isHook());
2271:       assertFalse(node2.isComma());
2272:       assertEquals((-1), node2.getCharno());
2273:       assertFalse(node2.isSwitch());
2274:       assertFalse(node2.isBreak());
2275:       assertFalse(node2.isIn());
2276:       assertFalse(node2.isInc());
2277:       assertFalse(node2.isGetElem());
2278:       assertFalse(node2.isCast());
2279:       assertFalse(node2.isEmpty());
2280:       assertFalse(node2.hasChildren());
2281:       assertFalse(node2.isTypeOf());
2282:       assertFalse(node2.isAssign());
2283:       assertFalse(node2.isDec());
2284:       assertEquals((-1), node2.getSourcePosition());
2285:       assertFalse(node2.isDebugger());
2286:       assertFalse(node2.isVoid());
2287:       assertFalse(node2.isFunction());
2288:       assertFalse(node2.isExprResult());
2289:       assertFalse(node2.isTrue());
2290:       assertFalse(node2.isDelProp());
2291:       assertFalse(node2.isAnd());
2292:       assertFalse(node2.isObjectLit());
2293:       assertFalse(node2.isWhile());
2294:       assertFalse(node2.isReturn());
2295:       assertFalse(node2.isNot());
2296:       assertFalse(node2.isGetProp());
2297:       assertFalse(node4.isBreak());
2298:       assertFalse(node4.isGetProp());
2299:       assertFalse(node4.isObjectLit());
2300:       assertFalse(node4.isAnd());
2301:       assertFalse(node4.isNot());
2302:       assertFalse(node4.isScript());
2303:       assertFalse(node4.isString());
2304:       assertFalse(node4.isWith());
2305:       assertFalse(node4.isCase());
2306:       assertFalse(node4.isExprResult());
2307:       assertFalse(node4.hasOneChild());
2308:       assertFalse(node4.isInstanceOf());
2309:       assertFalse(node4.isHook());
2310:       assertEquals(330, node4.getType());
2311:       assertFalse(node4.isAssign());
2312:       assertFalse(node4.isThis());
2313:       assertFalse(node4.isComma());
2314:       assertFalse(node4.hasChildren());
2315:       assertFalse(node4.isNumber());
2316:       assertFalse(node4.isTypeOf());
2317:       assertFalse(node4.isDec());
2318:       assertFalse(node4.isDelProp());
2319:       assertFalse(node4.isGetterDef());
2320:       assertFalse(node4.isGetElem());
2321:       assertFalse(node4.isLabelName());
2322:       assertFalse(node4.isEmpty());
2323:       assertFalse(node4.isArrayLit());
2324:       assertFalse(node4.isOr());
2325:       assertFalse(node4.isTrue());
2326:       assertFalse(node4.isSwitch());
2327:       assertFalse(node4.isDefaultCase());
2328:       assertFalse(node4.isNew());
2329:       assertFalse(node4.isDo());
2330:       assertFalse(node4.isAdd());
2331:       assertEquals(0, node4.getChildCount());
2332:       assertFalse(node4.isVar());
2333:       assertFalse(node4.isAssignAdd());
2334:       assertFalse(node4.isLabel());
2335:       assertFalse(node4.isNull());
2336:       assertFalse(node4.isParamList());
2337:       assertFalse(node4.isName());
2338:       assertFalse(node4.isCall());
2339:       assertFalse(node4.isSetterDef());
2340:       assertEquals(0, node4.getLineno());
2341:       assertFalse(node4.isStringKey());
2342:       assertEquals(0, node4.getSourcePosition());
2343:       assertFalse(node4.isRegExp());
2344:       assertFalse(node4.isWhile());
2345:       assertFalse(node4.isTry());
2346:       assertFalse(node4.isVoid());
2347:       assertFalse(node4.isCatch());
2348:       assertFalse(node4.hasMoreThanOneChild());
2349:       assertFalse(node4.isBlock());
2350:       assertFalse(node4.isFor());
2351:       assertFalse(node4.isReturn());
2352:       assertFalse(node4.isNE());
2353:       assertFalse(node4.isIf());
2354:       assertFalse(node4.isIn());
2355:       assertEquals(0, node4.getCharno());
2356:       assertFalse(node4.isDebugger());
2357:       assertFalse(node4.isFunction());
2358:       assertFalse(node4.isInc());
2359:       assertFalse(node4.isCast());
2360:       assertFalse(node4.isContinue());
2361:       assertFalse(node4.isFalse());
2362:       assertFalse(node4.isThrow());
2363:       assertTrue(node6.hasChildren());
2364:       assertFalse(node6.isIn());
2365:       assertFalse(node6.isGetterDef());
2366:       assertFalse(node6.isSwitch());
2367:       assertFalse(node6.isNE());
2368:       assertFalse(node6.isArrayLit());
2369:       assertTrue(node6.hasMoreThanOneChild());
2370:       assertFalse(node6.isIf());
2371:       assertFalse(node6.isDelProp());
2372:       assertFalse(node6.isTry());
2373:       assertEquals((-1), node6.getCharno());
2374:       assertFalse(node6.isHook());
2375:       assertFalse(node6.isDebugger());
2376:       assertFalse(node6.isRegExp());
2377:       assertFalse(node6.isFor());
2378:       assertFalse(node6.isCase());
2379:       assertFalse(node6.isString());
2380:       assertFalse(node6.isGetProp());
2381:       assertFalse(node6.isSetterDef());
2382:       assertFalse(node6.isThis());
2383:       assertFalse(node6.isCatch());
2384:       assertFalse(node6.isInstanceOf());
2385:       assertTrue(node6.isVar());
2386:       assertFalse(node6.isObjectLit());
2387:       assertFalse(node6.isNot());
2388:       assertFalse(node6.isWith());
2389:       assertEquals(118, node6.getType());
2390:       assertFalse(node6.isAnd());
2391:       assertFalse(node6.isInc());
2392:       assertFalse(node6.isCast());
2393:       assertFalse(node6.isFalse());
2394:       assertFalse(node6.isFunction());
2395:       assertFalse(node6.isThrow());
2396:       assertFalse(node6.isOr());
2397:       assertFalse(node6.isLabel());
2398:       assertFalse(node6.isAssignAdd());
2399:       assertEquals((-1), node6.getLineno());
2400:       assertFalse(node6.isReturn());
2401:       assertEquals(3, node6.getChildCount());
2402:       assertFalse(node6.isDec());
2403:       assertEquals((-1), node6.getSourcePosition());
2404:       assertFalse(node6.isContinue());
2405:       assertFalse(node6.isNumber());
2406:       assertFalse(node6.isTypeOf());
2407:       assertFalse(node6.isLabelName());
2408:       assertFalse(node6.isGetElem());
2409:       assertFalse(node6.isBlock());
2410:       assertFalse(node6.isExprResult());
2411:       assertFalse(node6.isScript());
2412:       assertFalse(node6.isAssign());
2413:       assertFalse(node6.isWhile());
2414:       assertFalse(node6.hasOneChild());
2415:       assertFalse(node6.isComma());
2416:       assertFalse(node6.isStringKey());
2417:       assertFalse(node6.isBreak());
2418:       assertFalse(node6.isCall());
2419:       assertFalse(node6.isNull());
2420:       assertFalse(node6.isParamList());
2421:       assertFalse(node6.isVoid());
2422:       assertFalse(node6.isName());
2423:       assertFalse(node6.isNew());
2424:       assertFalse(node6.isTrue());
2425:       assertFalse(node6.isAdd());
2426:       assertFalse(node6.isDo());
2427:       assertFalse(node6.isEmpty());
2428:       assertFalse(node6.isDefaultCase());
2429:       assertFalse(node7.isIn());
2430:       assertEquals(49, node7.getType());
2431:       assertFalse(node7.isGetterDef());
2432:       assertFalse(node7.isString());
2433:       assertFalse(node7.isFor());
2434:       assertFalse(node7.isEmpty());
2435:       assertFalse(node7.isInc());
2436:       assertFalse(node7.isCase());
2437:       assertFalse(node7.isHook());
2438:       assertFalse(node7.isTrue());
2439:       assertFalse(node7.isRegExp());
2440:       assertFalse(node7.isIf());
2441:       assertFalse(node7.isBreak());
2442:       assertFalse(node7.isNE());
2443:       assertFalse(node7.isDelProp());
2444:       assertFalse(node7.isVoid());
2445:       assertFalse(node7.isComma());
2446:       assertFalse(node7.isObjectLit());
2447:       assertFalse(node7.isNot());
2448:       assertFalse(node7.isSetterDef());
2449:       assertFalse(node7.isGetProp());
2450:       assertFalse(node7.isCast());
2451:       assertFalse(node7.isFunction());
2452:       assertFalse(node7.isDebugger());
2453:       assertFalse(node7.isFalse());
2454:       assertFalse(node7.isAnd());
2455:       assertFalse(node7.isReturn());
2456:       assertEquals((-1), node7.getLineno());
2457:       assertFalse(node7.isLabel());
2458:       assertFalse(node7.isAssignAdd());
2459:       assertFalse(node7.isContinue());
2460:       assertFalse(node7.hasMoreThanOneChild());
2461:       assertFalse(node7.isNumber());
2462:       assertFalse(node7.isTypeOf());
2463:       assertFalse(node7.isDec());
2464:       assertEquals((-1), node7.getSourcePosition());
2465:       assertFalse(node7.isOr());
2466:       assertFalse(node7.isWhile());
2467:       assertFalse(node7.hasChildren());
2468:       assertFalse(node7.hasOneChild());
2469:       assertFalse(node7.isNew());
2470:       assertFalse(node7.isDo());
2471:       assertFalse(node7.isBlock());
2472:       assertFalse(node7.isAdd());
2473:       assertFalse(node7.isAssign());
2474:       assertFalse(node7.isWith());
2475:       assertFalse(node7.isGetElem());
2476:       assertFalse(node7.isNull());
2477:       assertFalse(node7.isCall());
2478:       assertFalse(node7.isExprResult());
2479:       assertFalse(node7.isName());
2480:       assertFalse(node7.isInstanceOf());
2481:       assertFalse(node7.isCatch());
2482:       assertFalse(node7.isThis());
2483:       assertTrue(node7.isThrow());
2484:       assertEquals(0, node7.getChildCount());
2485:       assertFalse(node7.isDefaultCase());
2486:       assertFalse(node7.isScript());
2487:       assertFalse(node7.isTry());
2488:       assertFalse(node7.isVar());
2489:       assertEquals((-1), node7.getCharno());
2490:       assertFalse(node7.isStringKey());
2491:       assertFalse(node7.isParamList());
2492:       assertFalse(node7.isSwitch());
2493:       assertFalse(node7.isArrayLit());
2494:       assertFalse(node7.isLabelName());
2495:       assertEquals(0, nodeArray0.length);
2496:       assertNotNull(node7);
2497:       assertFalse(node0.equals((Object)node2));
2498:       assertFalse(node0.equals((Object)node4));
2499:       assertFalse(node0.equals((Object)node1));
2500:       assertFalse(node0.equals((Object)node6));
2501:       assertFalse(node0.equals((Object)node5));
2502:       assertFalse(node0.equals((Object)node3));
2503:       assertFalse(node1.equals((Object)node5));
2504:       assertFalse(node1.equals((Object)node6));
2505:       assertFalse(node1.equals((Object)node4));
2506:       assertFalse(node1.equals((Object)node0));
2507:       assertFalse(node1.equals((Object)node2));
2508:       assertFalse(node1.equals((Object)node3));
2509:       assertFalse(node2.equals((Object)node4));
2510:       assertFalse(node2.equals((Object)node0));
2511:       assertFalse(node2.equals((Object)node5));
2512:       assertFalse(node2.equals((Object)node1));
2513:       assertFalse(node2.equals((Object)node6));
2514:       assertFalse(node4.equals((Object)node5));
2515:       assertFalse(node4.equals((Object)node1));
2516:       assertFalse(node4.equals((Object)node6));
2517:       assertFalse(node4.equals((Object)node3));
2518:       assertFalse(node4.equals((Object)node2));
2519:       assertFalse(node4.equals((Object)node0));
2520:       assertFalse(node6.equals((Object)node0));
2521:       assertFalse(node6.equals((Object)node1));
2522:       assertFalse(node6.equals((Object)node3));
2523:       assertFalse(node6.equals((Object)node2));
2524:       assertFalse(node6.equals((Object)node4));
2525:       assertFalse(node6.equals((Object)node5));
2526:       assertFalse(node7.equals((Object)node0));
2527:       assertFalse(node7.equals((Object)node3));
2528:       assertFalse(node7.equals((Object)node6));
2529:       assertFalse(node7.equals((Object)node4));
2530:       assertFalse(node7.equals((Object)node2));
2531:       assertFalse(node7.equals((Object)node5));
2532:   }
2533: }
RegularFileObject[/tmp/EvoSuite_158_1629222893295/com/google/javascript/rhino/Node_158_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:53 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_158_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_158_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_158_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.JSTypeNative",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.common.collect.AbstractIndexedListIterator",
340:       "com.google.common.collect.Iterators$11",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.TemplatizedType",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.javascript.rhino.JSTypeExpression",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.common.collect.Iterators$12",
366:       "com.google.javascript.rhino.jstype.NamedType"
367:     );
368:   }
369: }

[MASTER] 17:54:54.082 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node[] nodeArray0 = new Node[0];
Node node0 = new Node(330, nodeArray0);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(0, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(330, node0.getType());
assertEquals(0, nodeArray0.length);
assertNotNull(node0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

Node node1 = new Node(49);
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertTrue(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertEquals(49, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isBreak());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isEmpty());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isDelProp());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);

Node node3 = node2.useSourceInfoIfMissingFrom(node1);
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertTrue(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertEquals(49, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isBreak());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isEmpty());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isDelProp());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isGetterDef());
assertFalse(node3.isEmpty());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isIf());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isFor());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.isRegExp());
assertTrue(node3.isString());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isHook());
assertFalse(node3.isNew());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isVar());
assertFalse(node3.isStringKey());
assertFalse(node3.isDo());
assertFalse(node3.isCase());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabel());
assertFalse(node3.isParamList());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabelName());
assertFalse(node3.hasOneChild());
assertFalse(node3.isNot());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isObjectLit());
assertFalse(node3.isScript());
assertFalse(node3.isNumber());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isWhile());
assertFalse(node3.isWith());
assertFalse(node3.isAssign());
assertFalse(node3.isGetElem());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isBreak());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isThrow());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isAnd());
assertEquals(40, node3.getType());
assertFalse(node3.isCast());
assertFalse(node3.isFunction());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertNotNull(node3);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

Iterable<Node> iterable0 = node3.children();
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertTrue(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertEquals(49, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isBreak());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isEmpty());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isDelProp());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isGetterDef());
assertFalse(node3.isEmpty());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isIf());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isFor());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.isRegExp());
assertTrue(node3.isString());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isHook());
assertFalse(node3.isNew());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isVar());
assertFalse(node3.isStringKey());
assertFalse(node3.isDo());
assertFalse(node3.isCase());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabel());
assertFalse(node3.isParamList());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabelName());
assertFalse(node3.hasOneChild());
assertFalse(node3.isNot());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isObjectLit());
assertFalse(node3.isScript());
assertFalse(node3.isNumber());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isWhile());
assertFalse(node3.isWith());
assertFalse(node3.isAssign());
assertFalse(node3.isGetElem());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isBreak());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isThrow());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isAnd());
assertEquals(40, node3.getType());
assertFalse(node3.isCast());
assertFalse(node3.isFunction());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean0 = node1.isGetProp();
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertTrue(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertEquals(49, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(boolean0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

boolean boolean1 = node3.hasChildren();
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertTrue(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertEquals(49, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isBreak());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isEmpty());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isDelProp());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isGetterDef());
assertFalse(node3.isEmpty());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isIf());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isFor());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.isRegExp());
assertTrue(node3.isString());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isHook());
assertFalse(node3.isNew());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isVar());
assertFalse(node3.isStringKey());
assertFalse(node3.isDo());
assertFalse(node3.isCase());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabel());
assertFalse(node3.isParamList());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabelName());
assertFalse(node3.hasOneChild());
assertFalse(node3.isNot());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isObjectLit());
assertFalse(node3.isScript());
assertFalse(node3.isNumber());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isWhile());
assertFalse(node3.isWith());
assertFalse(node3.isAssign());
assertFalse(node3.isGetElem());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isBreak());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isThrow());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isAnd());
assertEquals(40, node3.getType());
assertFalse(node3.isCast());
assertFalse(node3.isFunction());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertFalse(boolean1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

boolean boolean2 = node2.isSwitch();
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isBreak());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isEmpty());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isDelProp());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(boolean2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

Node node4 = node0.cloneNode();
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(0, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(330, node0.getType());
assertFalse(node4.isBreak());
assertFalse(node4.isGetProp());
assertFalse(node4.isObjectLit());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isScript());
assertFalse(node4.isString());
assertFalse(node4.isWith());
assertFalse(node4.isCase());
assertFalse(node4.isExprResult());
assertFalse(node4.hasOneChild());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isHook());
assertEquals(330, node4.getType());
assertFalse(node4.isAssign());
assertFalse(node4.isThis());
assertFalse(node4.isComma());
assertFalse(node4.hasChildren());
assertFalse(node4.isNumber());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.isDelProp());
assertFalse(node4.isGetterDef());
assertFalse(node4.isGetElem());
assertFalse(node4.isLabelName());
assertFalse(node4.isEmpty());
assertFalse(node4.isArrayLit());
assertFalse(node4.isOr());
assertFalse(node4.isTrue());
assertFalse(node4.isSwitch());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isNew());
assertFalse(node4.isDo());
assertFalse(node4.isAdd());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isVar());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isLabel());
assertFalse(node4.isNull());
assertFalse(node4.isParamList());
assertFalse(node4.isName());
assertFalse(node4.isCall());
assertFalse(node4.isSetterDef());
assertEquals(0, node4.getLineno());
assertFalse(node4.isStringKey());
assertEquals(0, node4.getSourcePosition());
assertFalse(node4.isRegExp());
assertFalse(node4.isWhile());
assertFalse(node4.isTry());
assertFalse(node4.isVoid());
assertFalse(node4.isCatch());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isBlock());
assertFalse(node4.isFor());
assertFalse(node4.isReturn());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isIn());
assertEquals(0, node4.getCharno());
assertFalse(node4.isDebugger());
assertFalse(node4.isFunction());
assertFalse(node4.isInc());
assertFalse(node4.isCast());
assertFalse(node4.isContinue());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertEquals(0, nodeArray0.length);
assertNotNull(node4);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));

Node node5 = Node.newString(153, "com.google.javascript.rhino.Node$IntPropListItem", 51, 44);
assertFalse(node5.isDo());
assertFalse(node5.isContinue());
assertFalse(node5.isWhile());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isOr());
assertFalse(node5.isAdd());
assertFalse(node5.isLabel());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isReturn());
assertFalse(node5.isBlock());
assertFalse(node5.isNew());
assertFalse(node5.isCast());
assertFalse(node5.isStringKey());
assertFalse(node5.isVar());
assertFalse(node5.isNumber());
assertFalse(node5.isParamList());
assertFalse(node5.isNot());
assertFalse(node5.isAnd());
assertFalse(node5.isObjectLit());
assertFalse(node5.isDebugger());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isGetProp());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isName());
assertFalse(node5.isAssign());
assertFalse(node5.isEmpty());
assertFalse(node5.isGetElem());
assertFalse(node5.isCall());
assertEquals(153, node5.getType());
assertFalse(node5.isTypeOf());
assertFalse(node5.isNull());
assertFalse(node5.hasChildren());
assertFalse(node5.isDec());
assertFalse(node5.isComma());
assertFalse(node5.isExprResult());
assertFalse(node5.isTrue());
assertFalse(node5.isDelProp());
assertFalse(node5.isBreak());
assertFalse(node5.isVoid());
assertFalse(node5.isCase());
assertFalse(node5.isString());
assertFalse(node5.isIn());
assertEquals(51, node5.getLineno());
assertFalse(node5.isInc());
assertFalse(node5.isFalse());
assertFalse(node5.isThrow());
assertFalse(node5.isGetterDef());
assertTrue(node5.isLabelName());
assertEquals(44, node5.getCharno());
assertFalse(node5.isArrayLit());
assertFalse(node5.isSwitch());
assertFalse(node5.isWith());
assertFalse(node5.isCatch());
assertFalse(node5.isRegExp());
assertFalse(node5.isFunction());
assertFalse(node5.isTry());
assertFalse(node5.isScript());
assertFalse(node5.isSetterDef());
assertFalse(node5.hasOneChild());
assertFalse(node5.isFor());
assertFalse(node5.isIf());
assertFalse(node5.isNE());
assertFalse(node5.isThis());
assertFalse(node5.isHook());
assertFalse(node5.isInstanceOf());
assertEquals(208940, node5.getSourcePosition());
assertNotNull(node5);
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));

int int0 = node3.getLineno();
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertTrue(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertEquals(49, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isBreak());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isEmpty());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isDelProp());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isGetterDef());
assertFalse(node3.isEmpty());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertFalse(node3.isIf());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isFor());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.isRegExp());
assertTrue(node3.isString());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isHook());
assertFalse(node3.isNew());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isVar());
assertFalse(node3.isStringKey());
assertFalse(node3.isDo());
assertFalse(node3.isCase());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabel());
assertFalse(node3.isParamList());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabelName());
assertFalse(node3.hasOneChild());
assertFalse(node3.isNot());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isObjectLit());
assertFalse(node3.isScript());
assertFalse(node3.isNumber());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isWhile());
assertFalse(node3.isWith());
assertFalse(node3.isAssign());
assertFalse(node3.isGetElem());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isBreak());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isExprResult());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isThrow());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isAnd());
assertEquals(40, node3.getType());
assertFalse(node3.isCast());
assertFalse(node3.isFunction());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertEquals((-1), int0);
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node5));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node1));

Node node6 = new Node(118, node0, node4, node2);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(0, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(330, node0.getType());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isBreak());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isEmpty());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isDelProp());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node4.isBreak());
assertFalse(node4.isGetProp());
assertFalse(node4.isObjectLit());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isScript());
assertFalse(node4.isString());
assertFalse(node4.isWith());
assertFalse(node4.isCase());
assertFalse(node4.isExprResult());
assertFalse(node4.hasOneChild());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isHook());
assertEquals(330, node4.getType());
assertFalse(node4.isAssign());
assertFalse(node4.isThis());
assertFalse(node4.isComma());
assertFalse(node4.hasChildren());
assertFalse(node4.isNumber());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.isDelProp());
assertFalse(node4.isGetterDef());
assertFalse(node4.isGetElem());
assertFalse(node4.isLabelName());
assertFalse(node4.isEmpty());
assertFalse(node4.isArrayLit());
assertFalse(node4.isOr());
assertFalse(node4.isTrue());
assertFalse(node4.isSwitch());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isNew());
assertFalse(node4.isDo());
assertFalse(node4.isAdd());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isVar());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isLabel());
assertFalse(node4.isNull());
assertFalse(node4.isParamList());
assertFalse(node4.isName());
assertFalse(node4.isCall());
assertFalse(node4.isSetterDef());
assertEquals(0, node4.getLineno());
assertFalse(node4.isStringKey());
assertEquals(0, node4.getSourcePosition());
assertFalse(node4.isRegExp());
assertFalse(node4.isWhile());
assertFalse(node4.isTry());
assertFalse(node4.isVoid());
assertFalse(node4.isCatch());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isBlock());
assertFalse(node4.isFor());
assertFalse(node4.isReturn());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isIn());
assertEquals(0, node4.getCharno());
assertFalse(node4.isDebugger());
assertFalse(node4.isFunction());
assertFalse(node4.isInc());
assertFalse(node4.isCast());
assertFalse(node4.isContinue());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertTrue(node6.hasChildren());
assertFalse(node6.isIn());
assertFalse(node6.isGetterDef());
assertFalse(node6.isSwitch());
assertFalse(node6.isNE());
assertFalse(node6.isArrayLit());
assertTrue(node6.hasMoreThanOneChild());
assertFalse(node6.isIf());
assertFalse(node6.isDelProp());
assertFalse(node6.isTry());
assertEquals((-1), node6.getCharno());
assertFalse(node6.isHook());
assertFalse(node6.isDebugger());
assertFalse(node6.isRegExp());
assertFalse(node6.isFor());
assertFalse(node6.isCase());
assertFalse(node6.isString());
assertFalse(node6.isGetProp());
assertFalse(node6.isSetterDef());
assertFalse(node6.isThis());
assertFalse(node6.isCatch());
assertFalse(node6.isInstanceOf());
assertTrue(node6.isVar());
assertFalse(node6.isObjectLit());
assertFalse(node6.isNot());
assertFalse(node6.isWith());
assertEquals(118, node6.getType());
assertFalse(node6.isAnd());
assertFalse(node6.isInc());
assertFalse(node6.isCast());
assertFalse(node6.isFalse());
assertFalse(node6.isFunction());
assertFalse(node6.isThrow());
assertFalse(node6.isOr());
assertFalse(node6.isLabel());
assertFalse(node6.isAssignAdd());
assertEquals((-1), node6.getLineno());
assertFalse(node6.isReturn());
assertEquals(3, node6.getChildCount());
assertFalse(node6.isDec());
assertEquals((-1), node6.getSourcePosition());
assertFalse(node6.isContinue());
assertFalse(node6.isNumber());
assertFalse(node6.isTypeOf());
assertFalse(node6.isLabelName());
assertFalse(node6.isGetElem());
assertFalse(node6.isBlock());
assertFalse(node6.isExprResult());
assertFalse(node6.isScript());
assertFalse(node6.isAssign());
assertFalse(node6.isWhile());
assertFalse(node6.hasOneChild());
assertFalse(node6.isComma());
assertFalse(node6.isStringKey());
assertFalse(node6.isBreak());
assertFalse(node6.isCall());
assertFalse(node6.isNull());
assertFalse(node6.isParamList());
assertFalse(node6.isVoid());
assertFalse(node6.isName());
assertFalse(node6.isNew());
assertFalse(node6.isTrue());
assertFalse(node6.isAdd());
assertFalse(node6.isDo());
assertFalse(node6.isEmpty());
assertFalse(node6.isDefaultCase());
assertEquals(0, nodeArray0.length);
assertNotNull(node6);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node3));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node4.equals((Object)node5));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node5));

Node node7 = node1.useSourceInfoFrom(node6);
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(0, node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertEquals(330, node0.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isTrue());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertTrue(node1.isThrow());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isThis());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isOr());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertEquals(49, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isComma());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isBreak());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isEmpty());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isDelProp());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node4.isBreak());
assertFalse(node4.isGetProp());
assertFalse(node4.isObjectLit());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isScript());
assertFalse(node4.isString());
assertFalse(node4.isWith());
assertFalse(node4.isCase());
assertFalse(node4.isExprResult());
assertFalse(node4.hasOneChild());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isHook());
assertEquals(330, node4.getType());
assertFalse(node4.isAssign());
assertFalse(node4.isThis());
assertFalse(node4.isComma());
assertFalse(node4.hasChildren());
assertFalse(node4.isNumber());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.isDelProp());
assertFalse(node4.isGetterDef());
assertFalse(node4.isGetElem());
assertFalse(node4.isLabelName());
assertFalse(node4.isEmpty());
assertFalse(node4.isArrayLit());
assertFalse(node4.isOr());
assertFalse(node4.isTrue());
assertFalse(node4.isSwitch());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isNew());
assertFalse(node4.isDo());
assertFalse(node4.isAdd());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isVar());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isLabel());
assertFalse(node4.isNull());
assertFalse(node4.isParamList());
assertFalse(node4.isName());
assertFalse(node4.isCall());
assertFalse(node4.isSetterDef());
assertEquals(0, node4.getLineno());
assertFalse(node4.isStringKey());
assertEquals(0, node4.getSourcePosition());
assertFalse(node4.isRegExp());
assertFalse(node4.isWhile());
assertFalse(node4.isTry());
assertFalse(node4.isVoid());
assertFalse(node4.isCatch());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isBlock());
assertFalse(node4.isFor());
assertFalse(node4.isReturn());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isIn());
assertEquals(0, node4.getCharno());
assertFalse(node4.isDebugger());
assertFalse(node4.isFunction());
assertFalse(node4.isInc());
assertFalse(node4.isCast());
assertFalse(node4.isContinue());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertTrue(node6.hasChildren());
assertFalse(node6.isIn());
assertFalse(node6.isGetterDef());
assertFalse(node6.isSwitch());
assertFalse(node6.isNE());
assertFalse(node6.isArrayLit());
assertTrue(node6.hasMoreThanOneChild());
assertFalse(node6.isIf());
assertFalse(node6.isDelProp());
assertFalse(node6.isTry());
assertEquals((-1), node6.getCharno());
assertFalse(node6.isHook());
assertFalse(node6.isDebugger());
assertFalse(node6.isRegExp());
assertFalse(node6.isFor());
assertFalse(node6.isCase());
assertFalse(node6.isString());
assertFalse(node6.isGetProp());
assertFalse(node6.isSetterDef());
assertFalse(node6.isThis());
assertFalse(node6.isCatch());
assertFalse(node6.isInstanceOf());
assertTrue(node6.isVar());
assertFalse(node6.isObjectLit());
assertFalse(node6.isNot());
assertFalse(node6.isWith());
assertEquals(118, node6.getType());
assertFalse(node6.isAnd());
assertFalse(node6.isInc());
assertFalse(node6.isCast());
assertFalse(node6.isFalse());
assertFalse(node6.isFunction());
assertFalse(node6.isThrow());
assertFalse(node6.isOr());
assertFalse(node6.isLabel());
assertFalse(node6.isAssignAdd());
assertEquals((-1), node6.getLineno());
assertFalse(node6.isReturn());
assertEquals(3, node6.getChildCount());
assertFalse(node6.isDec());
assertEquals((-1), node6.getSourcePosition());
assertFalse(node6.isContinue());
assertFalse(node6.isNumber());
assertFalse(node6.isTypeOf());
assertFalse(node6.isLabelName());
assertFalse(node6.isGetElem());
assertFalse(node6.isBlock());
assertFalse(node6.isExprResult());
assertFalse(node6.isScript());
assertFalse(node6.isAssign());
assertFalse(node6.isWhile());
assertFalse(node6.hasOneChild());
assertFalse(node6.isComma());
assertFalse(node6.isStringKey());
assertFalse(node6.isBreak());
assertFalse(node6.isCall());
assertFalse(node6.isNull());
assertFalse(node6.isParamList());
assertFalse(node6.isVoid());
assertFalse(node6.isName());
assertFalse(node6.isNew());
assertFalse(node6.isTrue());
assertFalse(node6.isAdd());
assertFalse(node6.isDo());
assertFalse(node6.isEmpty());
assertFalse(node6.isDefaultCase());
assertFalse(node7.isIn());
assertEquals(49, node7.getType());
assertFalse(node7.isGetterDef());
assertFalse(node7.isString());
assertFalse(node7.isFor());
assertFalse(node7.isEmpty());
assertFalse(node7.isInc());
assertFalse(node7.isCase());
assertFalse(node7.isHook());
assertFalse(node7.isTrue());
assertFalse(node7.isRegExp());
assertFalse(node7.isIf());
assertFalse(node7.isBreak());
assertFalse(node7.isNE());
assertFalse(node7.isDelProp());
assertFalse(node7.isVoid());
assertFalse(node7.isComma());
assertFalse(node7.isObjectLit());
assertFalse(node7.isNot());
assertFalse(node7.isSetterDef());
assertFalse(node7.isGetProp());
assertFalse(node7.isCast());
assertFalse(node7.isFunction());
assertFalse(node7.isDebugger());
assertFalse(node7.isFalse());
assertFalse(node7.isAnd());
assertFalse(node7.isReturn());
assertEquals((-1), node7.getLineno());
assertFalse(node7.isLabel());
assertFalse(node7.isAssignAdd());
assertFalse(node7.isContinue());
assertFalse(node7.hasMoreThanOneChild());
assertFalse(node7.isNumber());
assertFalse(node7.isTypeOf());
assertFalse(node7.isDec());
assertEquals((-1), node7.getSourcePosition());
assertFalse(node7.isOr());
assertFalse(node7.isWhile());
assertFalse(node7.hasChildren());
assertFalse(node7.hasOneChild());
assertFalse(node7.isNew());
assertFalse(node7.isDo());
assertFalse(node7.isBlock());
assertFalse(node7.isAdd());
assertFalse(node7.isAssign());
assertFalse(node7.isWith());
assertFalse(node7.isGetElem());
assertFalse(node7.isNull());
assertFalse(node7.isCall());
assertFalse(node7.isExprResult());
assertFalse(node7.isName());
assertFalse(node7.isInstanceOf());
assertFalse(node7.isCatch());
assertFalse(node7.isThis());
assertTrue(node7.isThrow());
assertEquals(0, node7.getChildCount());
assertFalse(node7.isDefaultCase());
assertFalse(node7.isScript());
assertFalse(node7.isTry());
assertFalse(node7.isVar());
assertEquals((-1), node7.getCharno());
assertFalse(node7.isStringKey());
assertFalse(node7.isParamList());
assertFalse(node7.isSwitch());
assertFalse(node7.isArrayLit());
assertFalse(node7.isLabelName());
assertEquals(0, nodeArray0.length);
assertNotNull(node7);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node6));
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node6));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node5));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node6));
assertFalse(node4.equals((Object)node5));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node6));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node5));
assertFalse(node7.equals((Object)node0));
assertFalse(node7.equals((Object)node3));
assertFalse(node7.equals((Object)node6));
assertFalse(node7.equals((Object)node4));
assertFalse(node7.equals((Object)node2));
assertFalse(node7.equals((Object)node5));


[MASTER] 17:54:56.162 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_165_1629222895556/com/google/javascript/rhino/Node_165_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_165_1629222895556/com/google/javascript/rhino/Node_165_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:56.163 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:56.163 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:56.164 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 639
[MASTER] 17:54:56.165 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_165_1629222895556/com/google/javascript/rhino/Node_165_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:55 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_165_tmp__ESTest extends Node_165_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node[] nodeArray0 = new Node[0];
21:       Node node0 = new Node(330, nodeArray0);
22:       assertFalse(node0.isSetterDef());
23:       assertFalse(node0.isNull());
24:       assertFalse(node0.isParamList());
25:       assertFalse(node0.isName());
26:       assertEquals(0, node0.getLineno());
27:       assertFalse(node0.isStringKey());
28:       assertEquals(0, node0.getSourcePosition());
29:       assertFalse(node0.isDebugger());
30:       assertFalse(node0.isFunction());
31:       assertFalse(node0.isAdd());
32:       assertFalse(node0.isDefaultCase());
33:       assertFalse(node0.isDo());
34:       assertFalse(node0.isArrayLit());
35:       assertFalse(node0.isNew());
36:       assertFalse(node0.isContinue());
37:       assertFalse(node0.isVar());
38:       assertFalse(node0.isLabel());
39:       assertEquals(0, node0.getChildCount());
40:       assertFalse(node0.isAssignAdd());
41:       assertFalse(node0.isDelProp());
42:       assertFalse(node0.isEmpty());
43:       assertFalse(node0.isString());
44:       assertFalse(node0.isOr());
45:       assertFalse(node0.isExprResult());
46:       assertFalse(node0.isTrue());
47:       assertFalse(node0.isVoid());
48:       assertFalse(node0.isCall());
49:       assertFalse(node0.isGetElem());
50:       assertFalse(node0.isWhile());
51:       assertEquals(330, node0.getType());
52:       assertFalse(node0.hasChildren());
53:       assertFalse(node0.isReturn());
54:       assertFalse(node0.isAssign());
55:       assertFalse(node0.isTypeOf());
56:       assertFalse(node0.isDec());
57:       assertFalse(node0.isComma());
58:       assertFalse(node0.isThis());
59:       assertFalse(node0.isGetProp());
60:       assertFalse(node0.isBreak());
61:       assertFalse(node0.isAnd());
62:       assertFalse(node0.isObjectLit());
63:       assertFalse(node0.isNot());
64:       assertFalse(node0.isInc());
65:       assertFalse(node0.isSwitch());
66:       assertFalse(node0.isFalse());
67:       assertFalse(node0.isCast());
68:       assertFalse(node0.isThrow());
69:       assertFalse(node0.isNE());
70:       assertFalse(node0.isIf());
71:       assertFalse(node0.isLabelName());
72:       assertFalse(node0.isIn());
73:       assertFalse(node0.isGetterDef());
74:       assertFalse(node0.isNumber());
75:       assertFalse(node0.isBlock());
76:       assertEquals(0, node0.getCharno());
77:       assertFalse(node0.isScript());
78:       assertFalse(node0.isCase());
79:       assertFalse(node0.isTry());
80:       assertFalse(node0.hasOneChild());
81:       assertFalse(node0.hasMoreThanOneChild());
82:       assertFalse(node0.isFor());
83:       assertFalse(node0.isCatch());
84:       assertFalse(node0.isInstanceOf());
85:       assertFalse(node0.isWith());
86:       assertFalse(node0.isHook());
87:       assertFalse(node0.isRegExp());
88:       assertEquals(0, nodeArray0.length);
89:       assertNotNull(node0);
90:       
91:       Node node1 = new Node(49);
92:       assertFalse(node1.isNE());
93:       assertFalse(node1.isEmpty());
94:       assertFalse(node1.isGetterDef());
95:       assertEquals(49, node1.getType());
96:       assertFalse(node1.isIn());
97:       assertFalse(node1.isArrayLit());
98:       assertFalse(node1.isDelProp());
99:       assertFalse(node1.isIf());
100:       assertFalse(node1.isSwitch());
101:       assertFalse(node1.isFunction());
102:       assertFalse(node1.isInc());
103:       assertFalse(node1.isTrue());
104:       assertEquals(0, node1.getChildCount());
105:       assertFalse(node1.isDefaultCase());
106:       assertFalse(node1.isSetterDef());
107:       assertTrue(node1.isThrow());
108:       assertFalse(node1.isThis());
109:       assertFalse(node1.isInstanceOf());
110:       assertFalse(node1.isCatch());
111:       assertFalse(node1.isStringKey());
112:       assertFalse(node1.isParamList());
113:       assertFalse(node1.isRegExp());
114:       assertFalse(node1.isScript());
115:       assertEquals((-1), node1.getCharno());
116:       assertFalse(node1.isWith());
117:       assertFalse(node1.hasMoreThanOneChild());
118:       assertFalse(node1.isHook());
119:       assertFalse(node1.hasOneChild());
120:       assertFalse(node1.isCase());
121:       assertFalse(node1.isTry());
122:       assertFalse(node1.isBlock());
123:       assertFalse(node1.isFor());
124:       assertFalse(node1.isNumber());
125:       assertFalse(node1.isTypeOf());
126:       assertFalse(node1.isDec());
127:       assertFalse(node1.hasChildren());
128:       assertEquals((-1), node1.getSourcePosition());
129:       assertFalse(node1.isOr());
130:       assertFalse(node1.isAssign());
131:       assertFalse(node1.isGetElem());
132:       assertFalse(node1.isCast());
133:       assertEquals((-1), node1.getLineno());
134:       assertFalse(node1.isLabelName());
135:       assertFalse(node1.isNew());
136:       assertFalse(node1.isAdd());
137:       assertFalse(node1.isContinue());
138:       assertFalse(node1.isVar());
139:       assertFalse(node1.isDo());
140:       assertFalse(node1.isLabel());
141:       assertFalse(node1.isAssignAdd());
142:       assertFalse(node1.isNull());
143:       assertFalse(node1.isBreak());
144:       assertFalse(node1.isGetProp());
145:       assertFalse(node1.isComma());
146:       assertFalse(node1.isFalse());
147:       assertFalse(node1.isCall());
148:       assertFalse(node1.isObjectLit());
149:       assertFalse(node1.isName());
150:       assertFalse(node1.isAnd());
151:       assertFalse(node1.isExprResult());
152:       assertFalse(node1.isVoid());
153:       assertFalse(node1.isDebugger());
154:       assertFalse(node1.isNot());
155:       assertFalse(node1.isString());
156:       assertFalse(node1.isReturn());
157:       assertFalse(node1.isWhile());
158:       assertNotNull(node1);
159:       assertFalse(node1.equals((Object)node0));
160:       
161:       Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
162:       assertFalse(node2.isBlock());
163:       assertTrue(node2.isString());
164:       assertFalse(node2.isAdd());
165:       assertFalse(node2.isVar());
166:       assertFalse(node2.isDo());
167:       assertFalse(node2.isWhile());
168:       assertFalse(node2.isSetterDef());
169:       assertFalse(node2.isNew());
170:       assertFalse(node2.isOr());
171:       assertFalse(node2.isReturn());
172:       assertEquals((-1), node2.getLineno());
173:       assertFalse(node2.hasMoreThanOneChild());
174:       assertFalse(node2.isTypeOf());
175:       assertFalse(node2.isNull());
176:       assertFalse(node2.isDec());
177:       assertFalse(node2.hasChildren());
178:       assertFalse(node2.isAssign());
179:       assertFalse(node2.isName());
180:       assertFalse(node2.isCatch());
181:       assertFalse(node2.isCall());
182:       assertFalse(node2.isVoid());
183:       assertFalse(node2.isGetElem());
184:       assertFalse(node2.isTry());
185:       assertFalse(node2.isRegExp());
186:       assertFalse(node2.isTrue());
187:       assertFalse(node2.isGetterDef());
188:       assertFalse(node2.isFor());
189:       assertFalse(node2.isEmpty());
190:       assertFalse(node2.isNumber());
191:       assertFalse(node2.isDefaultCase());
192:       assertFalse(node2.isScript());
193:       assertFalse(node2.hasOneChild());
194:       assertFalse(node2.isAssignAdd());
195:       assertFalse(node2.isParamList());
196:       assertEquals(0, node2.getChildCount());
197:       assertFalse(node2.isLabel());
198:       assertFalse(node2.isLabelName());
199:       assertFalse(node2.isStringKey());
200:       assertFalse(node2.isSwitch());
201:       assertFalse(node2.isArrayLit());
202:       assertFalse(node2.isHook());
203:       assertEquals((-1), node2.getCharno());
204:       assertFalse(node2.isThrow());
205:       assertFalse(node2.isInc());
206:       assertFalse(node2.isGetProp());
207:       assertFalse(node2.isCase());
208:       assertFalse(node2.isInstanceOf());
209:       assertFalse(node2.isIn());
210:       assertFalse(node2.isNE());
211:       assertFalse(node2.isThis());
212:       assertFalse(node2.isComma());
213:       assertFalse(node2.isWith());
214:       assertFalse(node2.isDelProp());
215:       assertFalse(node2.isIf());
216:       assertFalse(node2.isExprResult());
217:       assertFalse(node2.isBreak());
218:       assertFalse(node2.isFunction());
219:       assertFalse(node2.isDebugger());
220:       assertFalse(node2.isNot());
221:       assertEquals(40, node2.getType());
222:       assertFalse(node2.isObjectLit());
223:       assertEquals((-1), node2.getSourcePosition());
224:       assertFalse(node2.isFalse());
225:       assertFalse(node2.isContinue());
226:       assertFalse(node2.isAnd());
227:       assertFalse(node2.isCast());
228:       assertNotNull(node2);
229:       assertFalse(node2.equals((Object)node0));
230:       assertFalse(node2.equals((Object)node1));
231:       
232:       Node node3 = node2.useSourceInfoIfMissingFrom(node1);
233:       assertFalse(node1.isNE());
234:       assertFalse(node1.isEmpty());
235:       assertFalse(node1.isGetterDef());
236:       assertEquals(49, node1.getType());
237:       assertFalse(node1.isIn());
238:       assertFalse(node1.isArrayLit());
239:       assertFalse(node1.isDelProp());
240:       assertFalse(node1.isIf());
241:       assertFalse(node1.isSwitch());
242:       assertFalse(node1.isFunction());
243:       assertFalse(node1.isInc());
244:       assertFalse(node1.isTrue());
245:       assertEquals(0, node1.getChildCount());
246:       assertFalse(node1.isDefaultCase());
247:       assertFalse(node1.isSetterDef());
248:       assertTrue(node1.isThrow());
249:       assertFalse(node1.isThis());
250:       assertFalse(node1.isInstanceOf());
251:       assertFalse(node1.isCatch());
252:       assertFalse(node1.isStringKey());
253:       assertFalse(node1.isParamList());
254:       assertFalse(node1.isRegExp());
255:       assertFalse(node1.isScript());
256:       assertEquals((-1), node1.getCharno());
257:       assertFalse(node1.isWith());
258:       assertFalse(node1.hasMoreThanOneChild());
259:       assertFalse(node1.isHook());
260:       assertFalse(node1.hasOneChild());
261:       assertFalse(node1.isCase());
262:       assertFalse(node1.isTry());
263:       assertFalse(node1.isBlock());
264:       assertFalse(node1.isFor());
265:       assertFalse(node1.isNumber());
266:       assertFalse(node1.isTypeOf());
267:       assertFalse(node1.isDec());
268:       assertFalse(node1.hasChildren());
269:       assertEquals((-1), node1.getSourcePosition());
270:       assertFalse(node1.isOr());
271:       assertFalse(node1.isAssign());
272:       assertFalse(node1.isGetElem());
273:       assertFalse(node1.isCast());
274:       assertEquals((-1), node1.getLineno());
275:       assertFalse(node1.isLabelName());
276:       assertFalse(node1.isNew());
277:       assertFalse(node1.isAdd());
278:       assertFalse(node1.isContinue());
279:       assertFalse(node1.isVar());
280:       assertFalse(node1.isDo());
281:       assertFalse(node1.isLabel());
282:       assertFalse(node1.isAssignAdd());
283:       assertFalse(node1.isNull());
284:       assertFalse(node1.isBreak());
285:       assertFalse(node1.isGetProp());
286:       assertFalse(node1.isComma());
287:       assertFalse(node1.isFalse());
288:       assertFalse(node1.isCall());
289:       assertFalse(node1.isObjectLit());
290:       assertFalse(node1.isName());
291:       assertFalse(node1.isAnd());
292:       assertFalse(node1.isExprResult());
293:       assertFalse(node1.isVoid());
294:       assertFalse(node1.isDebugger());
295:       assertFalse(node1.isNot());
296:       assertFalse(node1.isString());
297:       assertFalse(node1.isReturn());
298:       assertFalse(node1.isWhile());
299:       assertFalse(node2.isBlock());
300:       assertTrue(node2.isString());
301:       assertFalse(node2.isAdd());
302:       assertFalse(node2.isVar());
303:       assertFalse(node2.isDo());
304:       assertFalse(node2.isWhile());
305:       assertFalse(node2.isSetterDef());
306:       assertFalse(node2.isNew());
307:       assertFalse(node2.isOr());
308:       assertFalse(node2.isReturn());
309:       assertEquals((-1), node2.getLineno());
310:       assertFalse(node2.hasMoreThanOneChild());
311:       assertFalse(node2.isTypeOf());
312:       assertFalse(node2.isNull());
313:       assertFalse(node2.isDec());
314:       assertFalse(node2.hasChildren());
315:       assertFalse(node2.isAssign());
316:       assertFalse(node2.isName());
317:       assertFalse(node2.isCatch());
318:       assertFalse(node2.isCall());
319:       assertFalse(node2.isVoid());
320:       assertFalse(node2.isGetElem());
321:       assertFalse(node2.isTry());
322:       assertFalse(node2.isRegExp());
323:       assertFalse(node2.isTrue());
324:       assertFalse(node2.isGetterDef());
325:       assertFalse(node2.isFor());
326:       assertFalse(node2.isEmpty());
327:       assertFalse(node2.isNumber());
328:       assertFalse(node2.isDefaultCase());
329:       assertFalse(node2.isScript());
330:       assertFalse(node2.hasOneChild());
331:       assertFalse(node2.isAssignAdd());
332:       assertFalse(node2.isParamList());
333:       assertEquals(0, node2.getChildCount());
334:       assertFalse(node2.isLabel());
335:       assertFalse(node2.isLabelName());
336:       assertFalse(node2.isStringKey());
337:       assertFalse(node2.isSwitch());
338:       assertFalse(node2.isArrayLit());
339:       assertFalse(node2.isHook());
340:       assertEquals((-1), node2.getCharno());
341:       assertFalse(node2.isThrow());
342:       assertFalse(node2.isInc());
343:       assertFalse(node2.isGetProp());
344:       assertFalse(node2.isCase());
345:       assertFalse(node2.isInstanceOf());
346:       assertFalse(node2.isIn());
347:       assertFalse(node2.isNE());
348:       assertFalse(node2.isThis());
349:       assertFalse(node2.isComma());
350:       assertFalse(node2.isWith());
351:       assertFalse(node2.isDelProp());
352:       assertFalse(node2.isIf());
353:       assertFalse(node2.isExprResult());
354:       assertFalse(node2.isBreak());
355:       assertFalse(node2.isFunction());
356:       assertFalse(node2.isDebugger());
357:       assertFalse(node2.isNot());
358:       assertEquals(40, node2.getType());
359:       assertFalse(node2.isObjectLit());
360:       assertEquals((-1), node2.getSourcePosition());
361:       assertFalse(node2.isFalse());
362:       assertFalse(node2.isContinue());
363:       assertFalse(node2.isAnd());
364:       assertFalse(node2.isCast());
365:       assertFalse(node3.isWhile());
366:       assertTrue(node3.isString());
367:       assertFalse(node3.isDo());
368:       assertFalse(node3.isNew());
369:       assertFalse(node3.isAdd());
370:       assertFalse(node3.isOr());
371:       assertEquals((-1), node3.getSourcePosition());
372:       assertFalse(node3.isParamList());
373:       assertFalse(node3.isStringKey());
374:       assertFalse(node3.isSetterDef());
375:       assertFalse(node3.isLabelName());
376:       assertEquals(0, node3.getChildCount());
377:       assertFalse(node3.isCast());
378:       assertFalse(node3.isAssignAdd());
379:       assertFalse(node3.isVar());
380:       assertFalse(node3.isContinue());
381:       assertEquals(40, node3.getType());
382:       assertFalse(node3.isLabel());
383:       assertFalse(node3.isWith());
384:       assertFalse(node3.isScript());
385:       assertFalse(node3.isTry());
386:       assertFalse(node3.isIf());
387:       assertFalse(node3.isGetterDef());
388:       assertFalse(node3.isNumber());
389:       assertFalse(node3.isNE());
390:       assertFalse(node3.isFor());
391:       assertFalse(node3.hasOneChild());
392:       assertEquals((-1), node3.getLineno());
393:       assertFalse(node3.isHook());
394:       assertFalse(node3.isCatch());
395:       assertFalse(node3.isInstanceOf());
396:       assertFalse(node3.hasMoreThanOneChild());
397:       assertFalse(node3.isBlock());
398:       assertFalse(node3.isThis());
399:       assertFalse(node3.isRegExp());
400:       assertFalse(node3.isSwitch());
401:       assertFalse(node3.isInc());
402:       assertFalse(node3.isCase());
403:       assertFalse(node3.isIn());
404:       assertEquals((-1), node3.getCharno());
405:       assertFalse(node3.isEmpty());
406:       assertFalse(node3.isArrayLit());
407:       assertFalse(node3.isThrow());
408:       assertFalse(node3.isFalse());
409:       assertFalse(node3.isFunction());
410:       assertFalse(node3.isDefaultCase());
411:       assertFalse(node3.isAnd());
412:       assertFalse(node3.isVoid());
413:       assertFalse(node3.isExprResult());
414:       assertFalse(node3.isObjectLit());
415:       assertFalse(node3.isDebugger());
416:       assertFalse(node3.isTrue());
417:       assertFalse(node3.isNot());
418:       assertFalse(node3.hasChildren());
419:       assertFalse(node3.isDelProp());
420:       assertFalse(node3.isBreak());
421:       assertFalse(node3.isTypeOf());
422:       assertFalse(node3.isNull());
423:       assertFalse(node3.isGetProp());
424:       assertFalse(node3.isCall());
425:       assertFalse(node3.isName());
426:       assertFalse(node3.isGetElem());
427:       assertFalse(node3.isReturn());
428:       assertFalse(node3.isAssign());
429:       assertFalse(node3.isDec());
430:       assertFalse(node3.isComma());
431:       assertNotNull(node3);
432:       assertFalse(node1.equals((Object)node2));
433:       assertFalse(node1.equals((Object)node0));
434:       assertFalse(node2.equals((Object)node0));
435:       assertFalse(node2.equals((Object)node1));
436:       assertFalse(node3.equals((Object)node0));
437:       assertFalse(node3.equals((Object)node1));
438:       
439:       Iterable<Node> iterable0 = node3.children();
440:       assertFalse(node1.isNE());
441:       assertFalse(node1.isEmpty());
442:       assertFalse(node1.isGetterDef());
443:       assertEquals(49, node1.getType());
444:       assertFalse(node1.isIn());
445:       assertFalse(node1.isArrayLit());
446:       assertFalse(node1.isDelProp());
447:       assertFalse(node1.isIf());
448:       assertFalse(node1.isSwitch());
449:       assertFalse(node1.isFunction());
450:       assertFalse(node1.isInc());
451:       assertFalse(node1.isTrue());
452:       assertEquals(0, node1.getChildCount());
453:       assertFalse(node1.isDefaultCase());
454:       assertFalse(node1.isSetterDef());
455:       assertTrue(node1.isThrow());
456:       assertFalse(node1.isThis());
457:       assertFalse(node1.isInstanceOf());
458:       assertFalse(node1.isCatch());
459:       assertFalse(node1.isStringKey());
460:       assertFalse(node1.isParamList());
461:       assertFalse(node1.isRegExp());
462:       assertFalse(node1.isScript());
463:       assertEquals((-1), node1.getCharno());
464:       assertFalse(node1.isWith());
465:       assertFalse(node1.hasMoreThanOneChild());
466:       assertFalse(node1.isHook());
467:       assertFalse(node1.hasOneChild());
468:       assertFalse(node1.isCase());
469:       assertFalse(node1.isTry());
470:       assertFalse(node1.isBlock());
471:       assertFalse(node1.isFor());
472:       assertFalse(node1.isNumber());
473:       assertFalse(node1.isTypeOf());
474:       assertFalse(node1.isDec());
475:       assertFalse(node1.hasChildren());
476:       assertEquals((-1), node1.getSourcePosition());
477:       assertFalse(node1.isOr());
478:       assertFalse(node1.isAssign());
479:       assertFalse(node1.isGetElem());
480:       assertFalse(node1.isCast());
481:       assertEquals((-1), node1.getLineno());
482:       assertFalse(node1.isLabelName());
483:       assertFalse(node1.isNew());
484:       assertFalse(node1.isAdd());
485:       assertFalse(node1.isContinue());
486:       assertFalse(node1.isVar());
487:       assertFalse(node1.isDo());
488:       assertFalse(node1.isLabel());
489:       assertFalse(node1.isAssignAdd());
490:       assertFalse(node1.isNull());
491:       assertFalse(node1.isBreak());
492:       assertFalse(node1.isGetProp());
493:       assertFalse(node1.isComma());
494:       assertFalse(node1.isFalse());
495:       assertFalse(node1.isCall());
496:       assertFalse(node1.isObjectLit());
497:       assertFalse(node1.isName());
498:       assertFalse(node1.isAnd());
499:       assertFalse(node1.isExprResult());
500:       assertFalse(node1.isVoid());
501:       assertFalse(node1.isDebugger());
502:       assertFalse(node1.isNot());
503:       assertFalse(node1.isString());
504:       assertFalse(node1.isReturn());
505:       assertFalse(node1.isWhile());
506:       assertFalse(node2.isBlock());
507:       assertTrue(node2.isString());
508:       assertFalse(node2.isAdd());
509:       assertFalse(node2.isVar());
510:       assertFalse(node2.isDo());
511:       assertFalse(node2.isWhile());
512:       assertFalse(node2.isSetterDef());
513:       assertFalse(node2.isNew());
514:       assertFalse(node2.isOr());
515:       assertFalse(node2.isReturn());
516:       assertEquals((-1), node2.getLineno());
517:       assertFalse(node2.hasMoreThanOneChild());
518:       assertFalse(node2.isTypeOf());
519:       assertFalse(node2.isNull());
520:       assertFalse(node2.isDec());
521:       assertFalse(node2.hasChildren());
522:       assertFalse(node2.isAssign());
523:       assertFalse(node2.isName());
524:       assertFalse(node2.isCatch());
525:       assertFalse(node2.isCall());
526:       assertFalse(node2.isVoid());
527:       assertFalse(node2.isGetElem());
528:       assertFalse(node2.isTry());
529:       assertFalse(node2.isRegExp());
530:       assertFalse(node2.isTrue());
531:       assertFalse(node2.isGetterDef());
532:       assertFalse(node2.isFor());
533:       assertFalse(node2.isEmpty());
534:       assertFalse(node2.isNumber());
535:       assertFalse(node2.isDefaultCase());
536:       assertFalse(node2.isScript());
537:       assertFalse(node2.hasOneChild());
538:       assertFalse(node2.isAssignAdd());
539:       assertFalse(node2.isParamList());
540:       assertEquals(0, node2.getChildCount());
541:       assertFalse(node2.isLabel());
542:       assertFalse(node2.isLabelName());
543:       assertFalse(node2.isStringKey());
544:       assertFalse(node2.isSwitch());
545:       assertFalse(node2.isArrayLit());
546:       assertFalse(node2.isHook());
547:       assertEquals((-1), node2.getCharno());
548:       assertFalse(node2.isThrow());
549:       assertFalse(node2.isInc());
550:       assertFalse(node2.isGetProp());
551:       assertFalse(node2.isCase());
552:       assertFalse(node2.isInstanceOf());
553:       assertFalse(node2.isIn());
554:       assertFalse(node2.isNE());
555:       assertFalse(node2.isThis());
556:       assertFalse(node2.isComma());
557:       assertFalse(node2.isWith());
558:       assertFalse(node2.isDelProp());
559:       assertFalse(node2.isIf());
560:       assertFalse(node2.isExprResult());
561:       assertFalse(node2.isBreak());
562:       assertFalse(node2.isFunction());
563:       assertFalse(node2.isDebugger());
564:       assertFalse(node2.isNot());
565:       assertEquals(40, node2.getType());
566:       assertFalse(node2.isObjectLit());
567:       assertEquals((-1), node2.getSourcePosition());
568:       assertFalse(node2.isFalse());
569:       assertFalse(node2.isContinue());
570:       assertFalse(node2.isAnd());
571:       assertFalse(node2.isCast());
572:       assertFalse(node3.isWhile());
573:       assertTrue(node3.isString());
574:       assertFalse(node3.isDo());
575:       assertFalse(node3.isNew());
576:       assertFalse(node3.isAdd());
577:       assertFalse(node3.isOr());
578:       assertEquals((-1), node3.getSourcePosition());
579:       assertFalse(node3.isParamList());
580:       assertFalse(node3.isStringKey());
581:       assertFalse(node3.isSetterDef());
582:       assertFalse(node3.isLabelName());
583:       assertEquals(0, node3.getChildCount());
584:       assertFalse(node3.isCast());
585:       assertFalse(node3.isAssignAdd());
586:       assertFalse(node3.isVar());
587:       assertFalse(node3.isContinue());
588:       assertEquals(40, node3.getType());
589:       assertFalse(node3.isLabel());
590:       assertFalse(node3.isWith());
591:       assertFalse(node3.isScript());
592:       assertFalse(node3.isTry());
593:       assertFalse(node3.isIf());
594:       assertFalse(node3.isGetterDef());
595:       assertFalse(node3.isNumber());
596:       assertFalse(node3.isNE());
597:       assertFalse(node3.isFor());
598:       assertFalse(node3.hasOneChild());
599:       assertEquals((-1), node3.getLineno());
600:       assertFalse(node3.isHook());
601:       assertFalse(node3.isCatch());
602:       assertFalse(node3.isInstanceOf());
603:       assertFalse(node3.hasMoreThanOneChild());
604:       assertFalse(node3.isBlock());
605:       assertFalse(node3.isThis());
606:       assertFalse(node3.isRegExp());
607:       assertFalse(node3.isSwitch());
608:       assertFalse(node3.isInc());
609:       assertFalse(node3.isCase());
610:       assertFalse(node3.isIn());
611:       assertEquals((-1), node3.getCharno());
612:       assertFalse(node3.isEmpty());
613:       assertFalse(node3.isArrayLit());
614:       assertFalse(node3.isThrow());
615:       assertFalse(node3.isFalse());
616:       assertFalse(node3.isFunction());
617:       assertFalse(node3.isDefaultCase());
618:       assertFalse(node3.isAnd());
619:       assertFalse(node3.isVoid());
620:       assertFalse(node3.isExprResult());
621:       assertFalse(node3.isObjectLit());
622:       assertFalse(node3.isDebugger());
623:       assertFalse(node3.isTrue());
624:       assertFalse(node3.isNot());
625:       assertFalse(node3.hasChildren());
626:       assertFalse(node3.isDelProp());
627:       assertFalse(node3.isBreak());
628:       assertFalse(node3.isTypeOf());
629:       assertFalse(node3.isNull());
630:       assertFalse(node3.isGetProp());
631:       assertFalse(node3.isCall());
632:       assertFalse(node3.isName());
633:       assertFalse(node3.isGetElem());
634:       assertFalse(node3.isReturn());
635:       assertFalse(node3.isAssign());
636:       assertFalse(node3.isDec());
637:       assertFalse(node3.isComma());
638:       assertNotNull(iterable0);
639:       assertFalse(iterable0.contains(node1));
640:       assertFalse(node1.equals((Object)node2));
641:       assertFalse(node1.equals((Object)node0));
642:       assertFalse(node1.equals((Object)node3));
643:       assertFalse(node2.equals((Object)node0));
644:       assertFalse(node2.equals((Object)node1));
645:       assertFalse(node3.equals((Object)node0));
646:       assertFalse(node3.equals((Object)node1));
647:       
648:       boolean boolean0 = node1.isGetProp();
649:       assertFalse(node1.isNE());
650:       assertFalse(node1.isEmpty());
651:       assertFalse(node1.isGetterDef());
652:       assertEquals(49, node1.getType());
653:       assertFalse(node1.isIn());
654:       assertFalse(node1.isArrayLit());
655:       assertFalse(node1.isDelProp());
656:       assertFalse(node1.isIf());
657:       assertFalse(node1.isSwitch());
658:       assertFalse(node1.isFunction());
659:       assertFalse(node1.isInc());
660:       assertFalse(node1.isTrue());
661:       assertEquals(0, node1.getChildCount());
662:       assertFalse(node1.isDefaultCase());
663:       assertFalse(node1.isSetterDef());
664:       assertTrue(node1.isThrow());
665:       assertFalse(node1.isThis());
666:       assertFalse(node1.isInstanceOf());
667:       assertFalse(node1.isCatch());
668:       assertFalse(node1.isStringKey());
669:       assertFalse(node1.isParamList());
670:       assertFalse(node1.isRegExp());
671:       assertFalse(node1.isScript());
672:       assertEquals((-1), node1.getCharno());
673:       assertFalse(node1.isWith());
674:       assertFalse(node1.hasMoreThanOneChild());
675:       assertFalse(node1.isHook());
676:       assertFalse(node1.hasOneChild());
677:       assertFalse(node1.isCase());
678:       assertFalse(node1.isTry());
679:       assertFalse(node1.isBlock());
680:       assertFalse(node1.isFor());
681:       assertFalse(node1.isNumber());
682:       assertFalse(node1.isTypeOf());
683:       assertFalse(node1.isDec());
684:       assertFalse(node1.hasChildren());
685:       assertEquals((-1), node1.getSourcePosition());
686:       assertFalse(node1.isOr());
687:       assertFalse(node1.isAssign());
688:       assertFalse(node1.isGetElem());
689:       assertFalse(node1.isCast());
690:       assertEquals((-1), node1.getLineno());
691:       assertFalse(node1.isLabelName());
692:       assertFalse(node1.isNew());
693:       assertFalse(node1.isAdd());
694:       assertFalse(node1.isContinue());
695:       assertFalse(node1.isVar());
696:       assertFalse(node1.isDo());
697:       assertFalse(node1.isLabel());
698:       assertFalse(node1.isAssignAdd());
699:       assertFalse(node1.isNull());
700:       assertFalse(node1.isBreak());
701:       assertFalse(node1.isGetProp());
702:       assertFalse(node1.isComma());
703:       assertFalse(node1.isFalse());
704:       assertFalse(node1.isCall());
705:       assertFalse(node1.isObjectLit());
706:       assertFalse(node1.isName());
707:       assertFalse(node1.isAnd());
708:       assertFalse(node1.isExprResult());
709:       assertFalse(node1.isVoid());
710:       assertFalse(node1.isDebugger());
711:       assertFalse(node1.isNot());
712:       assertFalse(node1.isString());
713:       assertFalse(node1.isReturn());
714:       assertFalse(node1.isWhile());
715:       assertFalse(boolean0);
716:       assertFalse(node1.equals((Object)node2));
717:       assertFalse(node1.equals((Object)node0));
718:       assertFalse(node1.equals((Object)node3));
719:       
720:       boolean boolean1 = node3.hasChildren();
721:       assertFalse(node1.isNE());
722:       assertFalse(node1.isEmpty());
723:       assertFalse(node1.isGetterDef());
724:       assertEquals(49, node1.getType());
725:       assertFalse(node1.isIn());
726:       assertFalse(node1.isArrayLit());
727:       assertFalse(node1.isDelProp());
728:       assertFalse(node1.isIf());
729:       assertFalse(node1.isSwitch());
730:       assertFalse(node1.isFunction());
731:       assertFalse(node1.isInc());
732:       assertFalse(node1.isTrue());
733:       assertEquals(0, node1.getChildCount());
734:       assertFalse(node1.isDefaultCase());
735:       assertFalse(node1.isSetterDef());
736:       assertTrue(node1.isThrow());
737:       assertFalse(node1.isThis());
738:       assertFalse(node1.isInstanceOf());
739:       assertFalse(node1.isCatch());
740:       assertFalse(node1.isStringKey());
741:       assertFalse(node1.isParamList());
742:       assertFalse(node1.isRegExp());
743:       assertFalse(node1.isScript());
744:       assertEquals((-1), node1.getCharno());
745:       assertFalse(node1.isWith());
746:       assertFalse(node1.hasMoreThanOneChild());
747:       assertFalse(node1.isHook());
748:       assertFalse(node1.hasOneChild());
749:       assertFalse(node1.isCase());
750:       assertFalse(node1.isTry());
751:       assertFalse(node1.isBlock());
752:       assertFalse(node1.isFor());
753:       assertFalse(node1.isNumber());
754:       assertFalse(node1.isTypeOf());
755:       assertFalse(node1.isDec());
756:       assertFalse(node1.hasChildren());
757:       assertEquals((-1), node1.getSourcePosition());
758:       assertFalse(node1.isOr());
759:       assertFalse(node1.isAssign());
760:       assertFalse(node1.isGetElem());
761:       assertFalse(node1.isCast());
762:       assertEquals((-1), node1.getLineno());
763:       assertFalse(node1.isLabelName());
764:       assertFalse(node1.isNew());
765:       assertFalse(node1.isAdd());
766:       assertFalse(node1.isContinue());
767:       assertFalse(node1.isVar());
768:       assertFalse(node1.isDo());
769:       assertFalse(node1.isLabel());
770:       assertFalse(node1.isAssignAdd());
771:       assertFalse(node1.isNull());
772:       assertFalse(node1.isBreak());
773:       assertFalse(node1.isGetProp());
774:       assertFalse(node1.isComma());
775:       assertFalse(node1.isFalse());
776:       assertFalse(node1.isCall());
777:       assertFalse(node1.isObjectLit());
778:       assertFalse(node1.isName());
779:       assertFalse(node1.isAnd());
780:       assertFalse(node1.isExprResult());
781:       assertFalse(node1.isVoid());
782:       assertFalse(node1.isDebugger());
783:       assertFalse(node1.isNot());
784:       assertFalse(node1.isString());
785:       assertFalse(node1.isReturn());
786:       assertFalse(node1.isWhile());
787:       assertFalse(node2.isBlock());
788:       assertTrue(node2.isString());
789:       assertFalse(node2.isAdd());
790:       assertFalse(node2.isVar());
791:       assertFalse(node2.isDo());
792:       assertFalse(node2.isWhile());
793:       assertFalse(node2.isSetterDef());
794:       assertFalse(node2.isNew());
795:       assertFalse(node2.isOr());
796:       assertFalse(node2.isReturn());
797:       assertEquals((-1), node2.getLineno());
798:       assertFalse(node2.hasMoreThanOneChild());
799:       assertFalse(node2.isTypeOf());
800:       assertFalse(node2.isNull());
801:       assertFalse(node2.isDec());
802:       assertFalse(node2.hasChildren());
803:       assertFalse(node2.isAssign());
804:       assertFalse(node2.isName());
805:       assertFalse(node2.isCatch());
806:       assertFalse(node2.isCall());
807:       assertFalse(node2.isVoid());
808:       assertFalse(node2.isGetElem());
809:       assertFalse(node2.isTry());
810:       assertFalse(node2.isRegExp());
811:       assertFalse(node2.isTrue());
812:       assertFalse(node2.isGetterDef());
813:       assertFalse(node2.isFor());
814:       assertFalse(node2.isEmpty());
815:       assertFalse(node2.isNumber());
816:       assertFalse(node2.isDefaultCase());
817:       assertFalse(node2.isScript());
818:       assertFalse(node2.hasOneChild());
819:       assertFalse(node2.isAssignAdd());
820:       assertFalse(node2.isParamList());
821:       assertEquals(0, node2.getChildCount());
822:       assertFalse(node2.isLabel());
823:       assertFalse(node2.isLabelName());
824:       assertFalse(node2.isStringKey());
825:       assertFalse(node2.isSwitch());
826:       assertFalse(node2.isArrayLit());
827:       assertFalse(node2.isHook());
828:       assertEquals((-1), node2.getCharno());
829:       assertFalse(node2.isThrow());
830:       assertFalse(node2.isInc());
831:       assertFalse(node2.isGetProp());
832:       assertFalse(node2.isCase());
833:       assertFalse(node2.isInstanceOf());
834:       assertFalse(node2.isIn());
835:       assertFalse(node2.isNE());
836:       assertFalse(node2.isThis());
837:       assertFalse(node2.isComma());
838:       assertFalse(node2.isWith());
839:       assertFalse(node2.isDelProp());
840:       assertFalse(node2.isIf());
841:       assertFalse(node2.isExprResult());
842:       assertFalse(node2.isBreak());
843:       assertFalse(node2.isFunction());
844:       assertFalse(node2.isDebugger());
845:       assertFalse(node2.isNot());
846:       assertEquals(40, node2.getType());
847:       assertFalse(node2.isObjectLit());
848:       assertEquals((-1), node2.getSourcePosition());
849:       assertFalse(node2.isFalse());
850:       assertFalse(node2.isContinue());
851:       assertFalse(node2.isAnd());
852:       assertFalse(node2.isCast());
853:       assertFalse(node3.isWhile());
854:       assertTrue(node3.isString());
855:       assertFalse(node3.isDo());
856:       assertFalse(node3.isNew());
857:       assertFalse(node3.isAdd());
858:       assertFalse(node3.isOr());
859:       assertEquals((-1), node3.getSourcePosition());
860:       assertFalse(node3.isParamList());
861:       assertFalse(node3.isStringKey());
862:       assertFalse(node3.isSetterDef());
863:       assertFalse(node3.isLabelName());
864:       assertEquals(0, node3.getChildCount());
865:       assertFalse(node3.isCast());
866:       assertFalse(node3.isAssignAdd());
867:       assertFalse(node3.isVar());
868:       assertFalse(node3.isContinue());
869:       assertEquals(40, node3.getType());
870:       assertFalse(node3.isLabel());
871:       assertFalse(node3.isWith());
872:       assertFalse(node3.isScript());
873:       assertFalse(node3.isTry());
874:       assertFalse(node3.isIf());
875:       assertFalse(node3.isGetterDef());
876:       assertFalse(node3.isNumber());
877:       assertFalse(node3.isNE());
878:       assertFalse(node3.isFor());
879:       assertFalse(node3.hasOneChild());
880:       assertEquals((-1), node3.getLineno());
881:       assertFalse(node3.isHook());
882:       assertFalse(node3.isCatch());
883:       assertFalse(node3.isInstanceOf());
884:       assertFalse(node3.hasMoreThanOneChild());
885:       assertFalse(node3.isBlock());
886:       assertFalse(node3.isThis());
887:       assertFalse(node3.isRegExp());
888:       assertFalse(node3.isSwitch());
889:       assertFalse(node3.isInc());
890:       assertFalse(node3.isCase());
891:       assertFalse(node3.isIn());
892:       assertEquals((-1), node3.getCharno());
893:       assertFalse(node3.isEmpty());
894:       assertFalse(node3.isArrayLit());
895:       assertFalse(node3.isThrow());
896:       assertFalse(node3.isFalse());
897:       assertFalse(node3.isFunction());
898:       assertFalse(node3.isDefaultCase());
899:       assertFalse(node3.isAnd());
900:       assertFalse(node3.isVoid());
901:       assertFalse(node3.isExprResult());
902:       assertFalse(node3.isObjectLit());
903:       assertFalse(node3.isDebugger());
904:       assertFalse(node3.isTrue());
905:       assertFalse(node3.isNot());
906:       assertFalse(node3.hasChildren());
907:       assertFalse(node3.isDelProp());
908:       assertFalse(node3.isBreak());
909:       assertFalse(node3.isTypeOf());
910:       assertFalse(node3.isNull());
911:       assertFalse(node3.isGetProp());
912:       assertFalse(node3.isCall());
913:       assertFalse(node3.isName());
914:       assertFalse(node3.isGetElem());
915:       assertFalse(node3.isReturn());
916:       assertFalse(node3.isAssign());
917:       assertFalse(node3.isDec());
918:       assertFalse(node3.isComma());
919:       assertFalse(boolean1);
920:       assertFalse(node1.equals((Object)node2));
921:       assertFalse(node1.equals((Object)node0));
922:       assertFalse(node1.equals((Object)node3));
923:       assertFalse(node2.equals((Object)node0));
924:       assertFalse(node2.equals((Object)node1));
925:       assertFalse(node3.equals((Object)node0));
926:       assertFalse(node3.equals((Object)node1));
927:       assertTrue(boolean1 == boolean0);
928:       
929:       boolean boolean2 = node2.isSwitch();
930:       assertFalse(node2.isBlock());
931:       assertTrue(node2.isString());
932:       assertFalse(node2.isAdd());
933:       assertFalse(node2.isVar());
934:       assertFalse(node2.isDo());
935:       assertFalse(node2.isWhile());
936:       assertFalse(node2.isSetterDef());
937:       assertFalse(node2.isNew());
938:       assertFalse(node2.isOr());
939:       assertFalse(node2.isReturn());
940:       assertEquals((-1), node2.getLineno());
941:       assertFalse(node2.hasMoreThanOneChild());
942:       assertFalse(node2.isTypeOf());
943:       assertFalse(node2.isNull());
944:       assertFalse(node2.isDec());
945:       assertFalse(node2.hasChildren());
946:       assertFalse(node2.isAssign());
947:       assertFalse(node2.isName());
948:       assertFalse(node2.isCatch());
949:       assertFalse(node2.isCall());
950:       assertFalse(node2.isVoid());
951:       assertFalse(node2.isGetElem());
952:       assertFalse(node2.isTry());
953:       assertFalse(node2.isRegExp());
954:       assertFalse(node2.isTrue());
955:       assertFalse(node2.isGetterDef());
956:       assertFalse(node2.isFor());
957:       assertFalse(node2.isEmpty());
958:       assertFalse(node2.isNumber());
959:       assertFalse(node2.isDefaultCase());
960:       assertFalse(node2.isScript());
961:       assertFalse(node2.hasOneChild());
962:       assertFalse(node2.isAssignAdd());
963:       assertFalse(node2.isParamList());
964:       assertEquals(0, node2.getChildCount());
965:       assertFalse(node2.isLabel());
966:       assertFalse(node2.isLabelName());
967:       assertFalse(node2.isStringKey());
968:       assertFalse(node2.isSwitch());
969:       assertFalse(node2.isArrayLit());
970:       assertFalse(node2.isHook());
971:       assertEquals((-1), node2.getCharno());
972:       assertFalse(node2.isThrow());
973:       assertFalse(node2.isInc());
974:       assertFalse(node2.isGetProp());
975:       assertFalse(node2.isCase());
976:       assertFalse(node2.isInstanceOf());
977:       assertFalse(node2.isIn());
978:       assertFalse(node2.isNE());
979:       assertFalse(node2.isThis());
980:       assertFalse(node2.isComma());
981:       assertFalse(node2.isWith());
982:       assertFalse(node2.isDelProp());
983:       assertFalse(node2.isIf());
984:       assertFalse(node2.isExprResult());
985:       assertFalse(node2.isBreak());
986:       assertFalse(node2.isFunction());
987:       assertFalse(node2.isDebugger());
988:       assertFalse(node2.isNot());
989:       assertEquals(40, node2.getType());
990:       assertFalse(node2.isObjectLit());
991:       assertEquals((-1), node2.getSourcePosition());
992:       assertFalse(node2.isFalse());
993:       assertFalse(node2.isContinue());
994:       assertFalse(node2.isAnd());
995:       assertFalse(node2.isCast());
996:       assertFalse(boolean2);
997:       assertFalse(node2.equals((Object)node0));
998:       assertFalse(node2.equals((Object)node1));
999:       assertTrue(boolean2 == boolean1);
1000:       assertTrue(boolean2 == boolean0);
1001:       
1002:       Node node4 = node0.cloneNode();
1003:       assertFalse(node0.isSetterDef());
1004:       assertFalse(node0.isNull());
1005:       assertFalse(node0.isParamList());
1006:       assertFalse(node0.isName());
1007:       assertEquals(0, node0.getLineno());
1008:       assertFalse(node0.isStringKey());
1009:       assertEquals(0, node0.getSourcePosition());
1010:       assertFalse(node0.isDebugger());
1011:       assertFalse(node0.isFunction());
1012:       assertFalse(node0.isAdd());
1013:       assertFalse(node0.isDefaultCase());
1014:       assertFalse(node0.isDo());
1015:       assertFalse(node0.isArrayLit());
1016:       assertFalse(node0.isNew());
1017:       assertFalse(node0.isContinue());
1018:       assertFalse(node0.isVar());
1019:       assertFalse(node0.isLabel());
1020:       assertEquals(0, node0.getChildCount());
1021:       assertFalse(node0.isAssignAdd());
1022:       assertFalse(node0.isDelProp());
1023:       assertFalse(node0.isEmpty());
1024:       assertFalse(node0.isString());
1025:       assertFalse(node0.isOr());
1026:       assertFalse(node0.isExprResult());
1027:       assertFalse(node0.isTrue());
1028:       assertFalse(node0.isVoid());
1029:       assertFalse(node0.isCall());
1030:       assertFalse(node0.isGetElem());
1031:       assertFalse(node0.isWhile());
1032:       assertEquals(330, node0.getType());
1033:       assertFalse(node0.hasChildren());
1034:       assertFalse(node0.isReturn());
1035:       assertFalse(node0.isAssign());
1036:       assertFalse(node0.isTypeOf());
1037:       assertFalse(node0.isDec());
1038:       assertFalse(node0.isComma());
1039:       assertFalse(node0.isThis());
1040:       assertFalse(node0.isGetProp());
1041:       assertFalse(node0.isBreak());
1042:       assertFalse(node0.isAnd());
1043:       assertFalse(node0.isObjectLit());
1044:       assertFalse(node0.isNot());
1045:       assertFalse(node0.isInc());
1046:       assertFalse(node0.isSwitch());
1047:       assertFalse(node0.isFalse());
1048:       assertFalse(node0.isCast());
1049:       assertFalse(node0.isThrow());
1050:       assertFalse(node0.isNE());
1051:       assertFalse(node0.isIf());
1052:       assertFalse(node0.isLabelName());
1053:       assertFalse(node0.isIn());
1054:       assertFalse(node0.isGetterDef());
1055:       assertFalse(node0.isNumber());
1056:       assertFalse(node0.isBlock());
1057:       assertEquals(0, node0.getCharno());
1058:       assertFalse(node0.isScript());
1059:       assertFalse(node0.isCase());
1060:       assertFalse(node0.isTry());
1061:       assertFalse(node0.hasOneChild());
1062:       assertFalse(node0.hasMoreThanOneChild());
1063:       assertFalse(node0.isFor());
1064:       assertFalse(node0.isCatch());
1065:       assertFalse(node0.isInstanceOf());
1066:       assertFalse(node0.isWith());
1067:       assertFalse(node0.isHook());
1068:       assertFalse(node0.isRegExp());
1069:       assertFalse(node4.isNE());
1070:       assertFalse(node4.isIf());
1071:       assertFalse(node4.isEmpty());
1072:       assertFalse(node4.isDelProp());
1073:       assertFalse(node4.isIn());
1074:       assertFalse(node4.isGetterDef());
1075:       assertFalse(node4.isDebugger());
1076:       assertFalse(node4.isSwitch());
1077:       assertFalse(node4.isFunction());
1078:       assertFalse(node4.isInc());
1079:       assertFalse(node4.isDefaultCase());
1080:       assertFalse(node4.isArrayLit());
1081:       assertFalse(node4.isFalse());
1082:       assertFalse(node4.isThrow());
1083:       assertEquals(0, node4.getChildCount());
1084:       assertFalse(node4.isSetterDef());
1085:       assertFalse(node4.isThis());
1086:       assertFalse(node4.isParamList());
1087:       assertFalse(node4.isStringKey());
1088:       assertFalse(node4.isRegExp());
1089:       assertFalse(node4.isScript());
1090:       assertEquals(0, node4.getCharno());
1091:       assertFalse(node4.isTry());
1092:       assertFalse(node4.hasOneChild());
1093:       assertFalse(node4.isCase());
1094:       assertFalse(node4.hasMoreThanOneChild());
1095:       assertFalse(node4.isCatch());
1096:       assertFalse(node4.isHook());
1097:       assertFalse(node4.isInstanceOf());
1098:       assertFalse(node4.isWith());
1099:       assertFalse(node4.isBlock());
1100:       assertFalse(node4.isFor());
1101:       assertFalse(node4.isTypeOf());
1102:       assertFalse(node4.isNumber());
1103:       assertFalse(node4.isLabelName());
1104:       assertFalse(node4.isAssignAdd());
1105:       assertFalse(node4.isGetElem());
1106:       assertFalse(node4.isOr());
1107:       assertFalse(node4.isDo());
1108:       assertFalse(node4.isAdd());
1109:       assertFalse(node4.isNew());
1110:       assertFalse(node4.isCast());
1111:       assertFalse(node4.isVar());
1112:       assertFalse(node4.isContinue());
1113:       assertFalse(node4.isLabel());
1114:       assertFalse(node4.isNull());
1115:       assertEquals(0, node4.getLineno());
1116:       assertFalse(node4.isName());
1117:       assertFalse(node4.isBreak());
1118:       assertFalse(node4.isGetProp());
1119:       assertFalse(node4.isObjectLit());
1120:       assertFalse(node4.isAnd());
1121:       assertFalse(node4.isNot());
1122:       assertEquals(0, node4.getSourcePosition());
1123:       assertFalse(node4.isExprResult());
1124:       assertFalse(node4.isTrue());
1125:       assertFalse(node4.isWhile());
1126:       assertFalse(node4.isString());
1127:       assertFalse(node4.isVoid());
1128:       assertFalse(node4.isCall());
1129:       assertEquals(330, node4.getType());
1130:       assertFalse(node4.isAssign());
1131:       assertFalse(node4.isReturn());
1132:       assertFalse(node4.isDec());
1133:       assertFalse(node4.hasChildren());
1134:       assertFalse(node4.isComma());
1135:       assertEquals(0, nodeArray0.length);
1136:       assertNotNull(node4);
1137:       assertFalse(node0.equals((Object)node2));
1138:       assertFalse(node0.equals((Object)node3));
1139:       assertFalse(node0.equals((Object)node1));
1140:       assertFalse(node4.equals((Object)node2));
1141:       assertFalse(node4.equals((Object)node0));
1142:       assertFalse(node4.equals((Object)node3));
1143:       assertFalse(node4.equals((Object)node1));
1144:       
1145:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
1146:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1147:       assertEquals(48, node_SideEffectFlags0.valueOf());
1148:       assertNotNull(node_SideEffectFlags0);
1149:       
1150:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
1151:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1152:       assertEquals(48, node_SideEffectFlags0.valueOf());
1153:       assertEquals(48, node_SideEffectFlags1.valueOf());
1154:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1155:       assertNotNull(node_SideEffectFlags1);
1156:       
1157:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
1158:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1159:       assertEquals(48, node_SideEffectFlags0.valueOf());
1160:       assertEquals(48, node_SideEffectFlags1.valueOf());
1161:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1162:       assertEquals(48, node_SideEffectFlags2.valueOf());
1163:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1164:       assertNotNull(node_SideEffectFlags2);
1165:       
1166:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
1167:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1168:       assertEquals(31, node_SideEffectFlags0.valueOf());
1169:       assertEquals(31, node_SideEffectFlags1.valueOf());
1170:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1171:       assertEquals(31, node_SideEffectFlags2.valueOf());
1172:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1173:       assertEquals(31, node_SideEffectFlags3.valueOf());
1174:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
1175:       assertNotNull(node_SideEffectFlags3);
1176:       
1177:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
1178:       assertEquals(0, node_SideEffectFlags0.valueOf());
1179:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1180:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1181:       assertEquals(0, node_SideEffectFlags1.valueOf());
1182:       assertEquals(0, node_SideEffectFlags2.valueOf());
1183:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1184:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1185:       assertEquals(0, node_SideEffectFlags3.valueOf());
1186:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
1187:       assertEquals(0, node_SideEffectFlags4.valueOf());
1188:       assertNotNull(node_SideEffectFlags4);
1189:       
1190:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
1191:       assertEquals(0, node_SideEffectFlags0.valueOf());
1192:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1193:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1194:       assertEquals(0, node_SideEffectFlags1.valueOf());
1195:       assertEquals(0, node_SideEffectFlags2.valueOf());
1196:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1197:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1198:       assertEquals(0, node_SideEffectFlags3.valueOf());
1199:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
1200:       assertEquals(0, node_SideEffectFlags4.valueOf());
1201:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
1202:       assertEquals(0, node_SideEffectFlags5.valueOf());
1203:       assertNotNull(node_SideEffectFlags5);
1204:       
1205:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setMutatesGlobalState();
1206:       assertEquals(0, node_SideEffectFlags6.valueOf());
1207:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
1208:       assertEquals(0, node_SideEffectFlags0.valueOf());
1209:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1210:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1211:       assertEquals(0, node_SideEffectFlags1.valueOf());
1212:       assertEquals(0, node_SideEffectFlags2.valueOf());
1213:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1214:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1215:       assertEquals(0, node_SideEffectFlags3.valueOf());
1216:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
1217:       assertEquals(0, node_SideEffectFlags4.valueOf());
1218:       assertNotNull(node_SideEffectFlags6);
1219:       
1220:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setReturnsTainted();
1221:       assertEquals(0, node_SideEffectFlags6.valueOf());
1222:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
1223:       assertTrue(node_SideEffectFlags7.areAllFlagsSet());
1224:       assertEquals(0, node_SideEffectFlags7.valueOf());
1225:       assertEquals(0, node_SideEffectFlags0.valueOf());
1226:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1227:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1228:       assertEquals(0, node_SideEffectFlags1.valueOf());
1229:       assertEquals(0, node_SideEffectFlags2.valueOf());
1230:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1231:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1232:       assertEquals(0, node_SideEffectFlags3.valueOf());
1233:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
1234:       assertEquals(0, node_SideEffectFlags4.valueOf());
1235:       assertNotNull(node_SideEffectFlags7);
1236:       
1237:       Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags7.setMutatesArguments();
1238:       assertEquals(0, node_SideEffectFlags6.valueOf());
1239:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
1240:       assertTrue(node_SideEffectFlags7.areAllFlagsSet());
1241:       assertEquals(0, node_SideEffectFlags7.valueOf());
1242:       assertTrue(node_SideEffectFlags8.areAllFlagsSet());
1243:       assertEquals(0, node_SideEffectFlags8.valueOf());
1244:       assertEquals(0, node_SideEffectFlags0.valueOf());
1245:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1246:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1247:       assertEquals(0, node_SideEffectFlags1.valueOf());
1248:       assertEquals(0, node_SideEffectFlags2.valueOf());
1249:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1250:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1251:       assertEquals(0, node_SideEffectFlags3.valueOf());
1252:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
1253:       assertEquals(0, node_SideEffectFlags4.valueOf());
1254:       assertNotNull(node_SideEffectFlags8);
1255:       
1256:       Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags2.setMutatesGlobalState();
1257:       assertEquals(0, node_SideEffectFlags9.valueOf());
1258:       assertTrue(node_SideEffectFlags9.areAllFlagsSet());
1259:       assertEquals(0, node_SideEffectFlags0.valueOf());
1260:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1261:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1262:       assertEquals(0, node_SideEffectFlags1.valueOf());
1263:       assertEquals(0, node_SideEffectFlags2.valueOf());
1264:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1265:       assertNotNull(node_SideEffectFlags9);
1266:       
1267:       Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags0.setMutatesArguments();
1268:       assertEquals(0, node_SideEffectFlags10.valueOf());
1269:       assertTrue(node_SideEffectFlags10.areAllFlagsSet());
1270:       assertEquals(0, node_SideEffectFlags0.valueOf());
1271:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1272:       assertNotNull(node_SideEffectFlags10);
1273:       
1274:       Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags10.setMutatesGlobalState();
1275:       assertEquals(0, node_SideEffectFlags10.valueOf());
1276:       assertTrue(node_SideEffectFlags10.areAllFlagsSet());
1277:       assertTrue(node_SideEffectFlags11.areAllFlagsSet());
1278:       assertEquals(0, node_SideEffectFlags11.valueOf());
1279:       assertEquals(0, node_SideEffectFlags0.valueOf());
1280:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1281:       assertNotNull(node_SideEffectFlags11);
1282:       
1283:       Node node5 = new Node(48, node1, node0);
1284:       assertFalse(node0.isSetterDef());
1285:       assertFalse(node0.isNull());
1286:       assertFalse(node0.isParamList());
1287:       assertFalse(node0.isName());
1288:       assertEquals(0, node0.getLineno());
1289:       assertFalse(node0.isStringKey());
1290:       assertEquals(0, node0.getSourcePosition());
1291:       assertFalse(node0.isDebugger());
1292:       assertFalse(node0.isFunction());
1293:       assertFalse(node0.isAdd());
1294:       assertFalse(node0.isDefaultCase());
1295:       assertFalse(node0.isDo());
1296:       assertFalse(node0.isArrayLit());
1297:       assertFalse(node0.isNew());
1298:       assertFalse(node0.isContinue());
1299:       assertFalse(node0.isVar());
1300:       assertFalse(node0.isLabel());
1301:       assertEquals(0, node0.getChildCount());
1302:       assertFalse(node0.isAssignAdd());
1303:       assertFalse(node0.isDelProp());
1304:       assertFalse(node0.isEmpty());
1305:       assertFalse(node0.isString());
1306:       assertFalse(node0.isOr());
1307:       assertFalse(node0.isExprResult());
1308:       assertFalse(node0.isTrue());
1309:       assertFalse(node0.isVoid());
1310:       assertFalse(node0.isCall());
1311:       assertFalse(node0.isGetElem());
1312:       assertFalse(node0.isWhile());
1313:       assertEquals(330, node0.getType());
1314:       assertFalse(node0.hasChildren());
1315:       assertFalse(node0.isReturn());
1316:       assertFalse(node0.isAssign());
1317:       assertFalse(node0.isTypeOf());
1318:       assertFalse(node0.isDec());
1319:       assertFalse(node0.isComma());
1320:       assertFalse(node0.isThis());
1321:       assertFalse(node0.isGetProp());
1322:       assertFalse(node0.isBreak());
1323:       assertFalse(node0.isAnd());
1324:       assertFalse(node0.isObjectLit());
1325:       assertFalse(node0.isNot());
1326:       assertFalse(node0.isInc());
1327:       assertFalse(node0.isSwitch());
1328:       assertFalse(node0.isFalse());
1329:       assertFalse(node0.isCast());
1330:       assertFalse(node0.isThrow());
1331:       assertFalse(node0.isNE());
1332:       assertFalse(node0.isIf());
1333:       assertFalse(node0.isLabelName());
1334:       assertFalse(node0.isIn());
1335:       assertFalse(node0.isGetterDef());
1336:       assertFalse(node0.isNumber());
1337:       assertFalse(node0.isBlock());
1338:       assertEquals(0, node0.getCharno());
1339:       assertFalse(node0.isScript());
1340:       assertFalse(node0.isCase());
1341:       assertFalse(node0.isTry());
1342:       assertFalse(node0.hasOneChild());
1343:       assertFalse(node0.hasMoreThanOneChild());
1344:       assertFalse(node0.isFor());
1345:       assertFalse(node0.isCatch());
1346:       assertFalse(node0.isInstanceOf());
1347:       assertFalse(node0.isWith());
1348:       assertFalse(node0.isHook());
1349:       assertFalse(node0.isRegExp());
1350:       assertFalse(node1.isNE());
1351:       assertFalse(node1.isEmpty());
1352:       assertFalse(node1.isGetterDef());
1353:       assertEquals(49, node1.getType());
1354:       assertFalse(node1.isIn());
1355:       assertFalse(node1.isArrayLit());
1356:       assertFalse(node1.isDelProp());
1357:       assertFalse(node1.isIf());
1358:       assertFalse(node1.isSwitch());
1359:       assertFalse(node1.isFunction());
1360:       assertFalse(node1.isInc());
1361:       assertFalse(node1.isTrue());
1362:       assertEquals(0, node1.getChildCount());
1363:       assertFalse(node1.isDefaultCase());
1364:       assertFalse(node1.isSetterDef());
1365:       assertTrue(node1.isThrow());
1366:       assertFalse(node1.isThis());
1367:       assertFalse(node1.isInstanceOf());
1368:       assertFalse(node1.isCatch());
1369:       assertFalse(node1.isStringKey());
1370:       assertFalse(node1.isParamList());
1371:       assertFalse(node1.isRegExp());
1372:       assertFalse(node1.isScript());
1373:       assertEquals((-1), node1.getCharno());
1374:       assertFalse(node1.isWith());
1375:       assertFalse(node1.hasMoreThanOneChild());
1376:       assertFalse(node1.isHook());
1377:       assertFalse(node1.hasOneChild());
1378:       assertFalse(node1.isCase());
1379:       assertFalse(node1.isTry());
1380:       assertFalse(node1.isBlock());
1381:       assertFalse(node1.isFor());
1382:       assertFalse(node1.isNumber());
1383:       assertFalse(node1.isTypeOf());
1384:       assertFalse(node1.isDec());
1385:       assertFalse(node1.hasChildren());
1386:       assertEquals((-1), node1.getSourcePosition());
1387:       assertFalse(node1.isOr());
1388:       assertFalse(node1.isAssign());
1389:       assertFalse(node1.isGetElem());
1390:       assertFalse(node1.isCast());
1391:       assertEquals((-1), node1.getLineno());
1392:       assertFalse(node1.isLabelName());
1393:       assertFalse(node1.isNew());
1394:       assertFalse(node1.isAdd());
1395:       assertFalse(node1.isContinue());
1396:       assertFalse(node1.isVar());
1397:       assertFalse(node1.isDo());
1398:       assertFalse(node1.isLabel());
1399:       assertFalse(node1.isAssignAdd());
1400:       assertFalse(node1.isNull());
1401:       assertFalse(node1.isBreak());
1402:       assertFalse(node1.isGetProp());
1403:       assertFalse(node1.isComma());
1404:       assertFalse(node1.isFalse());
1405:       assertFalse(node1.isCall());
1406:       assertFalse(node1.isObjectLit());
1407:       assertFalse(node1.isName());
1408:       assertFalse(node1.isAnd());
1409:       assertFalse(node1.isExprResult());
1410:       assertFalse(node1.isVoid());
1411:       assertFalse(node1.isDebugger());
1412:       assertFalse(node1.isNot());
1413:       assertFalse(node1.isString());
1414:       assertFalse(node1.isReturn());
1415:       assertFalse(node1.isWhile());
1416:       assertFalse(node5.isNE());
1417:       assertTrue(node5.hasChildren());
1418:       assertFalse(node5.isIf());
1419:       assertFalse(node5.isDelProp());
1420:       assertFalse(node5.isFor());
1421:       assertFalse(node5.isInc());
1422:       assertFalse(node5.isTrue());
1423:       assertTrue(node5.hasMoreThanOneChild());
1424:       assertFalse(node5.isDefaultCase());
1425:       assertFalse(node5.isVoid());
1426:       assertFalse(node5.isEmpty());
1427:       assertFalse(node5.isIn());
1428:       assertFalse(node5.isGetProp());
1429:       assertEquals(2, node5.getChildCount());
1430:       assertFalse(node5.isSetterDef());
1431:       assertEquals(48, node5.getType());
1432:       assertFalse(node5.isNull());
1433:       assertFalse(node5.isBreak());
1434:       assertFalse(node5.isName());
1435:       assertFalse(node5.isFalse());
1436:       assertFalse(node5.isThrow());
1437:       assertFalse(node5.isCall());
1438:       assertFalse(node5.isFunction());
1439:       assertFalse(node5.isComma());
1440:       assertFalse(node5.isDebugger());
1441:       assertFalse(node5.isWhile());
1442:       assertFalse(node5.isAnd());
1443:       assertEquals((-1), node5.getSourcePosition());
1444:       assertFalse(node5.isString());
1445:       assertFalse(node5.isObjectLit());
1446:       assertFalse(node5.isNot());
1447:       assertFalse(node5.isLabel());
1448:       assertFalse(node5.isReturn());
1449:       assertEquals((-1), node5.getLineno());
1450:       assertFalse(node5.isAssignAdd());
1451:       assertFalse(node5.isLabelName());
1452:       assertFalse(node5.isGetElem());
1453:       assertFalse(node5.isContinue());
1454:       assertFalse(node5.isCast());
1455:       assertFalse(node5.isDec());
1456:       assertFalse(node5.isAssign());
1457:       assertFalse(node5.isTypeOf());
1458:       assertFalse(node5.isNew());
1459:       assertFalse(node5.isExprResult());
1460:       assertFalse(node5.isAdd());
1461:       assertFalse(node5.isDo());
1462:       assertFalse(node5.isOr());
1463:       assertFalse(node5.isParamList());
1464:       assertFalse(node5.isThis());
1465:       assertFalse(node5.isCatch());
1466:       assertFalse(node5.isVar());
1467:       assertFalse(node5.isInstanceOf());
1468:       assertFalse(node5.isHook());
1469:       assertFalse(node5.isWith());
1470:       assertFalse(node5.isRegExp());
1471:       assertEquals((-1), node5.getCharno());
1472:       assertFalse(node5.isBlock());
1473:       assertFalse(node5.isScript());
1474:       assertFalse(node5.hasOneChild());
1475:       assertFalse(node5.isArrayLit());
1476:       assertFalse(node5.isSwitch());
1477:       assertFalse(node5.isTry());
1478:       assertFalse(node5.isStringKey());
1479:       assertFalse(node5.isCase());
1480:       assertFalse(node5.isNumber());
1481:       assertFalse(node5.isGetterDef());
1482:       assertEquals(0, nodeArray0.length);
1483:       assertNotNull(node5);
1484:       assertFalse(node0.equals((Object)node2));
1485:       assertFalse(node0.equals((Object)node3));
1486:       assertFalse(node0.equals((Object)node4));
1487:       assertFalse(node0.equals((Object)node1));
1488:       assertFalse(node1.equals((Object)node2));
1489:       assertFalse(node1.equals((Object)node0));
1490:       assertFalse(node1.equals((Object)node3));
1491:       assertFalse(node1.equals((Object)node4));
1492:       assertFalse(node5.equals((Object)node0));
1493:       assertFalse(node5.equals((Object)node2));
1494:       assertFalse(node5.equals((Object)node3));
1495:       assertFalse(node5.equals((Object)node4));
1496:       assertFalse(node5.equals((Object)node1));
1497:       
1498:       boolean boolean3 = node1.hasOneChild();
1499:       assertFalse(node1.isNE());
1500:       assertFalse(node1.isEmpty());
1501:       assertFalse(node1.isGetterDef());
1502:       assertEquals(49, node1.getType());
1503:       assertFalse(node1.isIn());
1504:       assertFalse(node1.isArrayLit());
1505:       assertFalse(node1.isDelProp());
1506:       assertFalse(node1.isIf());
1507:       assertFalse(node1.isSwitch());
1508:       assertFalse(node1.isFunction());
1509:       assertFalse(node1.isInc());
1510:       assertFalse(node1.isTrue());
1511:       assertEquals(0, node1.getChildCount());
1512:       assertFalse(node1.isDefaultCase());
1513:       assertFalse(node1.isSetterDef());
1514:       assertTrue(node1.isThrow());
1515:       assertFalse(node1.isThis());
1516:       assertFalse(node1.isInstanceOf());
1517:       assertFalse(node1.isCatch());
1518:       assertFalse(node1.isStringKey());
1519:       assertFalse(node1.isParamList());
1520:       assertFalse(node1.isRegExp());
1521:       assertFalse(node1.isScript());
1522:       assertEquals((-1), node1.getCharno());
1523:       assertFalse(node1.isWith());
1524:       assertFalse(node1.hasMoreThanOneChild());
1525:       assertFalse(node1.isHook());
1526:       assertFalse(node1.hasOneChild());
1527:       assertFalse(node1.isCase());
1528:       assertFalse(node1.isTry());
1529:       assertFalse(node1.isBlock());
1530:       assertFalse(node1.isFor());
1531:       assertFalse(node1.isNumber());
1532:       assertFalse(node1.isTypeOf());
1533:       assertFalse(node1.isDec());
1534:       assertFalse(node1.hasChildren());
1535:       assertEquals((-1), node1.getSourcePosition());
1536:       assertFalse(node1.isOr());
1537:       assertFalse(node1.isAssign());
1538:       assertFalse(node1.isGetElem());
1539:       assertFalse(node1.isCast());
1540:       assertEquals((-1), node1.getLineno());
1541:       assertFalse(node1.isLabelName());
1542:       assertFalse(node1.isNew());
1543:       assertFalse(node1.isAdd());
1544:       assertFalse(node1.isContinue());
1545:       assertFalse(node1.isVar());
1546:       assertFalse(node1.isDo());
1547:       assertFalse(node1.isLabel());
1548:       assertFalse(node1.isAssignAdd());
1549:       assertFalse(node1.isNull());
1550:       assertFalse(node1.isBreak());
1551:       assertFalse(node1.isGetProp());
1552:       assertFalse(node1.isComma());
1553:       assertFalse(node1.isFalse());
1554:       assertFalse(node1.isCall());
1555:       assertFalse(node1.isObjectLit());
1556:       assertFalse(node1.isName());
1557:       assertFalse(node1.isAnd());
1558:       assertFalse(node1.isExprResult());
1559:       assertFalse(node1.isVoid());
1560:       assertFalse(node1.isDebugger());
1561:       assertFalse(node1.isNot());
1562:       assertFalse(node1.isString());
1563:       assertFalse(node1.isReturn());
1564:       assertFalse(node1.isWhile());
1565:       assertFalse(boolean3);
1566:       assertFalse(node1.equals((Object)node5));
1567:       assertFalse(node1.equals((Object)node2));
1568:       assertFalse(node1.equals((Object)node0));
1569:       assertFalse(node1.equals((Object)node3));
1570:       assertFalse(node1.equals((Object)node4));
1571:       assertTrue(boolean3 == boolean0);
1572:       assertTrue(boolean3 == boolean2);
1573:       assertTrue(boolean3 == boolean1);
1574:       
1575:       boolean boolean4 = node5.isEquivalentToShallow(node0);
1576:       assertFalse(node0.isSetterDef());
1577:       assertFalse(node0.isNull());
1578:       assertFalse(node0.isParamList());
1579:       assertFalse(node0.isName());
1580:       assertEquals(0, node0.getLineno());
1581:       assertFalse(node0.isStringKey());
1582:       assertEquals(0, node0.getSourcePosition());
1583:       assertFalse(node0.isDebugger());
1584:       assertFalse(node0.isFunction());
1585:       assertFalse(node0.isAdd());
1586:       assertFalse(node0.isDefaultCase());
1587:       assertFalse(node0.isDo());
1588:       assertFalse(node0.isArrayLit());
1589:       assertFalse(node0.isNew());
1590:       assertFalse(node0.isContinue());
1591:       assertFalse(node0.isVar());
1592:       assertFalse(node0.isLabel());
1593:       assertEquals(0, node0.getChildCount());
1594:       assertFalse(node0.isAssignAdd());
1595:       assertFalse(node0.isDelProp());
1596:       assertFalse(node0.isEmpty());
1597:       assertFalse(node0.isString());
1598:       assertFalse(node0.isOr());
1599:       assertFalse(node0.isExprResult());
1600:       assertFalse(node0.isTrue());
1601:       assertFalse(node0.isVoid());
1602:       assertFalse(node0.isCall());
1603:       assertFalse(node0.isGetElem());
1604:       assertFalse(node0.isWhile());
1605:       assertEquals(330, node0.getType());
1606:       assertFalse(node0.hasChildren());
1607:       assertFalse(node0.isReturn());
1608:       assertFalse(node0.isAssign());
1609:       assertFalse(node0.isTypeOf());
1610:       assertFalse(node0.isDec());
1611:       assertFalse(node0.isComma());
1612:       assertFalse(node0.isThis());
1613:       assertFalse(node0.isGetProp());
1614:       assertFalse(node0.isBreak());
1615:       assertFalse(node0.isAnd());
1616:       assertFalse(node0.isObjectLit());
1617:       assertFalse(node0.isNot());
1618:       assertFalse(node0.isInc());
1619:       assertFalse(node0.isSwitch());
1620:       assertFalse(node0.isFalse());
1621:       assertFalse(node0.isCast());
1622:       assertFalse(node0.isThrow());
1623:       assertFalse(node0.isNE());
1624:       assertFalse(node0.isIf());
1625:       assertFalse(node0.isLabelName());
1626:       assertFalse(node0.isIn());
1627:       assertFalse(node0.isGetterDef());
1628:       assertFalse(node0.isNumber());
1629:       assertFalse(node0.isBlock());
1630:       assertEquals(0, node0.getCharno());
1631:       assertFalse(node0.isScript());
1632:       assertFalse(node0.isCase());
1633:       assertFalse(node0.isTry());
1634:       assertFalse(node0.hasOneChild());
1635:       assertFalse(node0.hasMoreThanOneChild());
1636:       assertFalse(node0.isFor());
1637:       assertFalse(node0.isCatch());
1638:       assertFalse(node0.isInstanceOf());
1639:       assertFalse(node0.isWith());
1640:       assertFalse(node0.isHook());
1641:       assertFalse(node0.isRegExp());
1642:       assertFalse(node1.isNE());
1643:       assertFalse(node1.isEmpty());
1644:       assertFalse(node1.isGetterDef());
1645:       assertEquals(49, node1.getType());
1646:       assertFalse(node1.isIn());
1647:       assertFalse(node1.isArrayLit());
1648:       assertFalse(node1.isDelProp());
1649:       assertFalse(node1.isIf());
1650:       assertFalse(node1.isSwitch());
1651:       assertFalse(node1.isFunction());
1652:       assertFalse(node1.isInc());
1653:       assertFalse(node1.isTrue());
1654:       assertEquals(0, node1.getChildCount());
1655:       assertFalse(node1.isDefaultCase());
1656:       assertFalse(node1.isSetterDef());
1657:       assertTrue(node1.isThrow());
1658:       assertFalse(node1.isThis());
1659:       assertFalse(node1.isInstanceOf());
1660:       assertFalse(node1.isCatch());
1661:       assertFalse(node1.isStringKey());
1662:       assertFalse(node1.isParamList());
1663:       assertFalse(node1.isRegExp());
1664:       assertFalse(node1.isScript());
1665:       assertEquals((-1), node1.getCharno());
1666:       assertFalse(node1.isWith());
1667:       assertFalse(node1.hasMoreThanOneChild());
1668:       assertFalse(node1.isHook());
1669:       assertFalse(node1.hasOneChild());
1670:       assertFalse(node1.isCase());
1671:       assertFalse(node1.isTry());
1672:       assertFalse(node1.isBlock());
1673:       assertFalse(node1.isFor());
1674:       assertFalse(node1.isNumber());
1675:       assertFalse(node1.isTypeOf());
1676:       assertFalse(node1.isDec());
1677:       assertFalse(node1.hasChildren());
1678:       assertEquals((-1), node1.getSourcePosition());
1679:       assertFalse(node1.isOr());
1680:       assertFalse(node1.isAssign());
1681:       assertFalse(node1.isGetElem());
1682:       assertFalse(node1.isCast());
1683:       assertEquals((-1), node1.getLineno());
1684:       assertFalse(node1.isLabelName());
1685:       assertFalse(node1.isNew());
1686:       assertFalse(node1.isAdd());
1687:       assertFalse(node1.isContinue());
1688:       assertFalse(node1.isVar());
1689:       assertFalse(node1.isDo());
1690:       assertFalse(node1.isLabel());
1691:       assertFalse(node1.isAssignAdd());
1692:       assertFalse(node1.isNull());
1693:       assertFalse(node1.isBreak());
1694:       assertFalse(node1.isGetProp());
1695:       assertFalse(node1.isComma());
1696:       assertFalse(node1.isFalse());
1697:       assertFalse(node1.isCall());
1698:       assertFalse(node1.isObjectLit());
1699:       assertFalse(node1.isName());
1700:       assertFalse(node1.isAnd());
1701:       assertFalse(node1.isExprResult());
1702:       assertFalse(node1.isVoid());
1703:       assertFalse(node1.isDebugger());
1704:       assertFalse(node1.isNot());
1705:       assertFalse(node1.isString());
1706:       assertFalse(node1.isReturn());
1707:       assertFalse(node1.isWhile());
1708:       assertFalse(node5.isNE());
1709:       assertTrue(node5.hasChildren());
1710:       assertFalse(node5.isIf());
1711:       assertFalse(node5.isDelProp());
1712:       assertFalse(node5.isFor());
1713:       assertFalse(node5.isInc());
1714:       assertFalse(node5.isTrue());
1715:       assertTrue(node5.hasMoreThanOneChild());
1716:       assertFalse(node5.isDefaultCase());
1717:       assertFalse(node5.isVoid());
1718:       assertFalse(node5.isEmpty());
1719:       assertFalse(node5.isIn());
1720:       assertFalse(node5.isGetProp());
1721:       assertEquals(2, node5.getChildCount());
1722:       assertFalse(node5.isSetterDef());
1723:       assertEquals(48, node5.getType());
1724:       assertFalse(node5.isNull());
1725:       assertFalse(node5.isBreak());
1726:       assertFalse(node5.isName());
1727:       assertFalse(node5.isFalse());
1728:       assertFalse(node5.isThrow());
1729:       assertFalse(node5.isCall());
1730:       assertFalse(node5.isFunction());
1731:       assertFalse(node5.isComma());
1732:       assertFalse(node5.isDebugger());
1733:       assertFalse(node5.isWhile());
1734:       assertFalse(node5.isAnd());
1735:       assertEquals((-1), node5.getSourcePosition());
1736:       assertFalse(node5.isString());
1737:       assertFalse(node5.isObjectLit());
1738:       assertFalse(node5.isNot());
1739:       assertFalse(node5.isLabel());
1740:       assertFalse(node5.isReturn());
1741:       assertEquals((-1), node5.getLineno());
1742:       assertFalse(node5.isAssignAdd());
1743:       assertFalse(node5.isLabelName());
1744:       assertFalse(node5.isGetElem());
1745:       assertFalse(node5.isContinue());
1746:       assertFalse(node5.isCast());
1747:       assertFalse(node5.isDec());
1748:       assertFalse(node5.isAssign());
1749:       assertFalse(node5.isTypeOf());
1750:       assertFalse(node5.isNew());
1751:       assertFalse(node5.isExprResult());
1752:       assertFalse(node5.isAdd());
1753:       assertFalse(node5.isDo());
1754:       assertFalse(node5.isOr());
1755:       assertFalse(node5.isParamList());
1756:       assertFalse(node5.isThis());
1757:       assertFalse(node5.isCatch());
1758:       assertFalse(node5.isVar());
1759:       assertFalse(node5.isInstanceOf());
1760:       assertFalse(node5.isHook());
1761:       assertFalse(node5.isWith());
1762:       assertFalse(node5.isRegExp());
1763:       assertEquals((-1), node5.getCharno());
1764:       assertFalse(node5.isBlock());
1765:       assertFalse(node5.isScript());
1766:       assertFalse(node5.hasOneChild());
1767:       assertFalse(node5.isArrayLit());
1768:       assertFalse(node5.isSwitch());
1769:       assertFalse(node5.isTry());
1770:       assertFalse(node5.isStringKey());
1771:       assertFalse(node5.isCase());
1772:       assertFalse(node5.isNumber());
1773:       assertFalse(node5.isGetterDef());
1774:       assertFalse(boolean4);
1775:       assertEquals(0, nodeArray0.length);
1776:       assertFalse(node0.equals((Object)node5));
1777:       assertFalse(node0.equals((Object)node2));
1778:       assertFalse(node0.equals((Object)node3));
1779:       assertFalse(node0.equals((Object)node4));
1780:       assertFalse(node0.equals((Object)node1));
1781:       assertFalse(node1.equals((Object)node5));
1782:       assertFalse(node1.equals((Object)node2));
1783:       assertFalse(node1.equals((Object)node0));
1784:       assertFalse(node1.equals((Object)node3));
1785:       assertFalse(node1.equals((Object)node4));
1786:       assertFalse(node5.equals((Object)node0));
1787:       assertFalse(node5.equals((Object)node2));
1788:       assertFalse(node5.equals((Object)node3));
1789:       assertFalse(node5.equals((Object)node4));
1790:       assertFalse(node5.equals((Object)node1));
1791:       assertTrue(boolean4 == boolean1);
1792:       assertTrue(boolean4 == boolean3);
1793:       assertTrue(boolean4 == boolean2);
1794:       assertTrue(boolean4 == boolean0);
1795:       
1796:       boolean boolean5 = node0.isEquivalentTo(node2, false, false, true);
1797:       assertFalse(node0.isSetterDef());
1798:       assertFalse(node0.isNull());
1799:       assertFalse(node0.isParamList());
1800:       assertFalse(node0.isName());
1801:       assertEquals(0, node0.getLineno());
1802:       assertFalse(node0.isStringKey());
1803:       assertEquals(0, node0.getSourcePosition());
1804:       assertFalse(node0.isDebugger());
1805:       assertFalse(node0.isFunction());
1806:       assertFalse(node0.isAdd());
1807:       assertFalse(node0.isDefaultCase());
1808:       assertFalse(node0.isDo());
1809:       assertFalse(node0.isArrayLit());
1810:       assertFalse(node0.isNew());
1811:       assertFalse(node0.isContinue());
1812:       assertFalse(node0.isVar());
1813:       assertFalse(node0.isLabel());
1814:       assertEquals(0, node0.getChildCount());
1815:       assertFalse(node0.isAssignAdd());
1816:       assertFalse(node0.isDelProp());
1817:       assertFalse(node0.isEmpty());
1818:       assertFalse(node0.isString());
1819:       assertFalse(node0.isOr());
1820:       assertFalse(node0.isExprResult());
1821:       assertFalse(node0.isTrue());
1822:       assertFalse(node0.isVoid());
1823:       assertFalse(node0.isCall());
1824:       assertFalse(node0.isGetElem());
1825:       assertFalse(node0.isWhile());
1826:       assertEquals(330, node0.getType());
1827:       assertFalse(node0.hasChildren());
1828:       assertFalse(node0.isReturn());
1829:       assertFalse(node0.isAssign());
1830:       assertFalse(node0.isTypeOf());
1831:       assertFalse(node0.isDec());
1832:       assertFalse(node0.isComma());
1833:       assertFalse(node0.isThis());
1834:       assertFalse(node0.isGetProp());
1835:       assertFalse(node0.isBreak());
1836:       assertFalse(node0.isAnd());
1837:       assertFalse(node0.isObjectLit());
1838:       assertFalse(node0.isNot());
1839:       assertFalse(node0.isInc());
1840:       assertFalse(node0.isSwitch());
1841:       assertFalse(node0.isFalse());
1842:       assertFalse(node0.isCast());
1843:       assertFalse(node0.isThrow());
1844:       assertFalse(node0.isNE());
1845:       assertFalse(node0.isIf());
1846:       assertFalse(node0.isLabelName());
1847:       assertFalse(node0.isIn());
1848:       assertFalse(node0.isGetterDef());
1849:       assertFalse(node0.isNumber());
1850:       assertFalse(node0.isBlock());
1851:       assertEquals(0, node0.getCharno());
1852:       assertFalse(node0.isScript());
1853:       assertFalse(node0.isCase());
1854:       assertFalse(node0.isTry());
1855:       assertFalse(node0.hasOneChild());
1856:       assertFalse(node0.hasMoreThanOneChild());
1857:       assertFalse(node0.isFor());
1858:       assertFalse(node0.isCatch());
1859:       assertFalse(node0.isInstanceOf());
1860:       assertFalse(node0.isWith());
1861:       assertFalse(node0.isHook());
1862:       assertFalse(node0.isRegExp());
1863:       assertFalse(node2.isBlock());
1864:       assertTrue(node2.isString());
1865:       assertFalse(node2.isAdd());
1866:       assertFalse(node2.isVar());
1867:       assertFalse(node2.isDo());
1868:       assertFalse(node2.isWhile());
1869:       assertFalse(node2.isSetterDef());
1870:       assertFalse(node2.isNew());
1871:       assertFalse(node2.isOr());
1872:       assertFalse(node2.isReturn());
1873:       assertEquals((-1), node2.getLineno());
1874:       assertFalse(node2.hasMoreThanOneChild());
1875:       assertFalse(node2.isTypeOf());
1876:       assertFalse(node2.isNull());
1877:       assertFalse(node2.isDec());
1878:       assertFalse(node2.hasChildren());
1879:       assertFalse(node2.isAssign());
1880:       assertFalse(node2.isName());
1881:       assertFalse(node2.isCatch());
1882:       assertFalse(node2.isCall());
1883:       assertFalse(node2.isVoid());
1884:       assertFalse(node2.isGetElem());
1885:       assertFalse(node2.isTry());
1886:       assertFalse(node2.isRegExp());
1887:       assertFalse(node2.isTrue());
1888:       assertFalse(node2.isGetterDef());
1889:       assertFalse(node2.isFor());
1890:       assertFalse(node2.isEmpty());
1891:       assertFalse(node2.isNumber());
1892:       assertFalse(node2.isDefaultCase());
1893:       assertFalse(node2.isScript());
1894:       assertFalse(node2.hasOneChild());
1895:       assertFalse(node2.isAssignAdd());
1896:       assertFalse(node2.isParamList());
1897:       assertEquals(0, node2.getChildCount());
1898:       assertFalse(node2.isLabel());
1899:       assertFalse(node2.isLabelName());
1900:       assertFalse(node2.isStringKey());
1901:       assertFalse(node2.isSwitch());
1902:       assertFalse(node2.isArrayLit());
1903:       assertFalse(node2.isHook());
1904:       assertEquals((-1), node2.getCharno());
1905:       assertFalse(node2.isThrow());
1906:       assertFalse(node2.isInc());
1907:       assertFalse(node2.isGetProp());
1908:       assertFalse(node2.isCase());
1909:       assertFalse(node2.isInstanceOf());
1910:       assertFalse(node2.isIn());
1911:       assertFalse(node2.isNE());
1912:       assertFalse(node2.isThis());
1913:       assertFalse(node2.isComma());
1914:       assertFalse(node2.isWith());
1915:       assertFalse(node2.isDelProp());
1916:       assertFalse(node2.isIf());
1917:       assertFalse(node2.isExprResult());
1918:       assertFalse(node2.isBreak());
1919:       assertFalse(node2.isFunction());
1920:       assertFalse(node2.isDebugger());
1921:       assertFalse(node2.isNot());
1922:       assertEquals(40, node2.getType());
1923:       assertFalse(node2.isObjectLit());
1924:       assertEquals((-1), node2.getSourcePosition());
1925:       assertFalse(node2.isFalse());
1926:       assertFalse(node2.isContinue());
1927:       assertFalse(node2.isAnd());
1928:       assertFalse(node2.isCast());
1929:       assertFalse(boolean5);
1930:       assertEquals(0, nodeArray0.length);
1931:       assertFalse(node0.equals((Object)node5));
1932:       assertFalse(node0.equals((Object)node2));
1933:       assertFalse(node0.equals((Object)node3));
1934:       assertFalse(node0.equals((Object)node4));
1935:       assertFalse(node0.equals((Object)node1));
1936:       assertFalse(node2.equals((Object)node0));
1937:       assertFalse(node2.equals((Object)node1));
1938:       assertFalse(node2.equals((Object)node4));
1939:       assertFalse(node2.equals((Object)node5));
1940:       assertTrue(boolean5 == boolean2);
1941:       assertTrue(boolean5 == boolean0);
1942:       assertTrue(boolean5 == boolean1);
1943:       
1944:       Node node6 = node3.useSourceInfoFrom(node0);
1945:       assertFalse(node0.isSetterDef());
1946:       assertFalse(node0.isNull());
1947:       assertFalse(node0.isParamList());
1948:       assertFalse(node0.isName());
1949:       assertEquals(0, node0.getLineno());
1950:       assertFalse(node0.isStringKey());
1951:       assertEquals(0, node0.getSourcePosition());
1952:       assertFalse(node0.isDebugger());
1953:       assertFalse(node0.isFunction());
1954:       assertFalse(node0.isAdd());
1955:       assertFalse(node0.isDefaultCase());
1956:       assertFalse(node0.isDo());
1957:       assertFalse(node0.isArrayLit());
1958:       assertFalse(node0.isNew());
1959:       assertFalse(node0.isContinue());
1960:       assertFalse(node0.isVar());
1961:       assertFalse(node0.isLabel());
1962:       assertEquals(0, node0.getChildCount());
1963:       assertFalse(node0.isAssignAdd());
1964:       assertFalse(node0.isDelProp());
1965:       assertFalse(node0.isEmpty());
1966:       assertFalse(node0.isString());
1967:       assertFalse(node0.isOr());
1968:       assertFalse(node0.isExprResult());
1969:       assertFalse(node0.isTrue());
1970:       assertFalse(node0.isVoid());
1971:       assertFalse(node0.isCall());
1972:       assertFalse(node0.isGetElem());
1973:       assertFalse(node0.isWhile());
1974:       assertEquals(330, node0.getType());
1975:       assertFalse(node0.hasChildren());
1976:       assertFalse(node0.isReturn());
1977:       assertFalse(node0.isAssign());
1978:       assertFalse(node0.isTypeOf());
1979:       assertFalse(node0.isDec());
1980:       assertFalse(node0.isComma());
1981:       assertFalse(node0.isThis());
1982:       assertFalse(node0.isGetProp());
1983:       assertFalse(node0.isBreak());
1984:       assertFalse(node0.isAnd());
1985:       assertFalse(node0.isObjectLit());
1986:       assertFalse(node0.isNot());
1987:       assertFalse(node0.isInc());
1988:       assertFalse(node0.isSwitch());
1989:       assertFalse(node0.isFalse());
1990:       assertFalse(node0.isCast());
1991:       assertFalse(node0.isThrow());
1992:       assertFalse(node0.isNE());
1993:       assertFalse(node0.isIf());
1994:       assertFalse(node0.isLabelName());
1995:       assertFalse(node0.isIn());
1996:       assertFalse(node0.isGetterDef());
1997:       assertFalse(node0.isNumber());
1998:       assertFalse(node0.isBlock());
1999:       assertEquals(0, node0.getCharno());
2000:       assertFalse(node0.isScript());
2001:       assertFalse(node0.isCase());
2002:       assertFalse(node0.isTry());
2003:       assertFalse(node0.hasOneChild());
2004:       assertFalse(node0.hasMoreThanOneChild());
2005:       assertFalse(node0.isFor());
2006:       assertFalse(node0.isCatch());
2007:       assertFalse(node0.isInstanceOf());
2008:       assertFalse(node0.isWith());
2009:       assertFalse(node0.isHook());
2010:       assertFalse(node0.isRegExp());
2011:       assertFalse(node1.isNE());
2012:       assertFalse(node1.isEmpty());
2013:       assertFalse(node1.isGetterDef());
2014:       assertEquals(49, node1.getType());
2015:       assertFalse(node1.isIn());
2016:       assertFalse(node1.isArrayLit());
2017:       assertFalse(node1.isDelProp());
2018:       assertFalse(node1.isIf());
2019:       assertFalse(node1.isSwitch());
2020:       assertFalse(node1.isFunction());
2021:       assertFalse(node1.isInc());
2022:       assertFalse(node1.isTrue());
2023:       assertEquals(0, node1.getChildCount());
2024:       assertFalse(node1.isDefaultCase());
2025:       assertFalse(node1.isSetterDef());
2026:       assertTrue(node1.isThrow());
2027:       assertFalse(node1.isThis());
2028:       assertFalse(node1.isInstanceOf());
2029:       assertFalse(node1.isCatch());
2030:       assertFalse(node1.isStringKey());
2031:       assertFalse(node1.isParamList());
2032:       assertFalse(node1.isRegExp());
2033:       assertFalse(node1.isScript());
2034:       assertEquals((-1), node1.getCharno());
2035:       assertFalse(node1.isWith());
2036:       assertFalse(node1.hasMoreThanOneChild());
2037:       assertFalse(node1.isHook());
2038:       assertFalse(node1.hasOneChild());
2039:       assertFalse(node1.isCase());
2040:       assertFalse(node1.isTry());
2041:       assertFalse(node1.isBlock());
2042:       assertFalse(node1.isFor());
2043:       assertFalse(node1.isNumber());
2044:       assertFalse(node1.isTypeOf());
2045:       assertFalse(node1.isDec());
2046:       assertFalse(node1.hasChildren());
2047:       assertEquals((-1), node1.getSourcePosition());
2048:       assertFalse(node1.isOr());
2049:       assertFalse(node1.isAssign());
2050:       assertFalse(node1.isGetElem());
2051:       assertFalse(node1.isCast());
2052:       assertEquals((-1), node1.getLineno());
2053:       assertFalse(node1.isLabelName());
2054:       assertFalse(node1.isNew());
2055:       assertFalse(node1.isAdd());
2056:       assertFalse(node1.isContinue());
2057:       assertFalse(node1.isVar());
2058:       assertFalse(node1.isDo());
2059:       assertFalse(node1.isLabel());
2060:       assertFalse(node1.isAssignAdd());
2061:       assertFalse(node1.isNull());
2062:       assertFalse(node1.isBreak());
2063:       assertFalse(node1.isGetProp());
2064:       assertFalse(node1.isComma());
2065:       assertFalse(node1.isFalse());
2066:       assertFalse(node1.isCall());
2067:       assertFalse(node1.isObjectLit());
2068:       assertFalse(node1.isName());
2069:       assertFalse(node1.isAnd());
2070:       assertFalse(node1.isExprResult());
2071:       assertFalse(node1.isVoid());
2072:       assertFalse(node1.isDebugger());
2073:       assertFalse(node1.isNot());
2074:       assertFalse(node1.isString());
2075:       assertFalse(node1.isReturn());
2076:       assertFalse(node1.isWhile());
2077:       assertFalse(node2.isBlock());
2078:       assertTrue(node2.isString());
2079:       assertFalse(node2.isAdd());
2080:       assertFalse(node2.isVar());
2081:       assertFalse(node2.isDo());
2082:       assertFalse(node2.isWhile());
2083:       assertFalse(node2.isSetterDef());
2084:       assertFalse(node2.isNew());
2085:       assertFalse(node2.isOr());
2086:       assertFalse(node2.isReturn());
2087:       assertFalse(node2.hasMoreThanOneChild());
2088:       assertFalse(node2.isTypeOf());
2089:       assertFalse(node2.isNull());
2090:       assertFalse(node2.isDec());
2091:       assertFalse(node2.hasChildren());
2092:       assertEquals(0, node2.getSourcePosition());
2093:       assertFalse(node2.isAssign());
2094:       assertFalse(node2.isName());
2095:       assertFalse(node2.isCatch());
2096:       assertFalse(node2.isCall());
2097:       assertFalse(node2.isVoid());
2098:       assertFalse(node2.isGetElem());
2099:       assertFalse(node2.isTry());
2100:       assertFalse(node2.isRegExp());
2101:       assertFalse(node2.isTrue());
2102:       assertFalse(node2.isGetterDef());
2103:       assertFalse(node2.isFor());
2104:       assertFalse(node2.isEmpty());
2105:       assertFalse(node2.isNumber());
2106:       assertFalse(node2.isDefaultCase());
2107:       assertFalse(node2.isScript());
2108:       assertFalse(node2.hasOneChild());
2109:       assertFalse(node2.isAssignAdd());
2110:       assertFalse(node2.isParamList());
2111:       assertEquals(0, node2.getChildCount());
2112:       assertFalse(node2.isLabel());
2113:       assertFalse(node2.isLabelName());
2114:       assertFalse(node2.isStringKey());
2115:       assertFalse(node2.isSwitch());
2116:       assertFalse(node2.isArrayLit());
2117:       assertFalse(node2.isHook());
2118:       assertFalse(node2.isThrow());
2119:       assertFalse(node2.isInc());
2120:       assertFalse(node2.isGetProp());
2121:       assertFalse(node2.isCase());
2122:       assertFalse(node2.isInstanceOf());
2123:       assertFalse(node2.isIn());
2124:       assertFalse(node2.isNE());
2125:       assertFalse(node2.isThis());
2126:       assertFalse(node2.isComma());
2127:       assertFalse(node2.isWith());
2128:       assertFalse(node2.isDelProp());
2129:       assertFalse(node2.isIf());
2130:       assertFalse(node2.isExprResult());
2131:       assertFalse(node2.isBreak());
2132:       assertEquals(0, node2.getCharno());
2133:       assertFalse(node2.isFunction());
2134:       assertFalse(node2.isDebugger());
2135:       assertFalse(node2.isNot());
2136:       assertEquals(40, node2.getType());
2137:       assertFalse(node2.isObjectLit());
2138:       assertFalse(node2.isFalse());
2139:       assertFalse(node2.isContinue());
2140:       assertFalse(node2.isAnd());
2141:       assertFalse(node2.isCast());
2142:       assertEquals(0, node2.getLineno());
2143:       assertFalse(node3.isWhile());
2144:       assertTrue(node3.isString());
2145:       assertFalse(node3.isDo());
2146:       assertFalse(node3.isNew());
2147:       assertFalse(node3.isAdd());
2148:       assertFalse(node3.isOr());
2149:       assertFalse(node3.isParamList());
2150:       assertFalse(node3.isStringKey());
2151:       assertFalse(node3.isSetterDef());
2152:       assertEquals(0, node3.getLineno());
2153:       assertFalse(node3.isLabelName());
2154:       assertEquals(0, node3.getChildCount());
2155:       assertFalse(node3.isCast());
2156:       assertFalse(node3.isAssignAdd());
2157:       assertFalse(node3.isVar());
2158:       assertFalse(node3.isContinue());
2159:       assertEquals(40, node3.getType());
2160:       assertFalse(node3.isLabel());
2161:       assertFalse(node3.isWith());
2162:       assertFalse(node3.isScript());
2163:       assertFalse(node3.isTry());
2164:       assertEquals(0, node3.getCharno());
2165:       assertFalse(node3.isIf());
2166:       assertFalse(node3.isGetterDef());
2167:       assertFalse(node3.isNumber());
2168:       assertFalse(node3.isNE());
2169:       assertFalse(node3.isFor());
2170:       assertFalse(node3.hasOneChild());
2171:       assertFalse(node3.isHook());
2172:       assertFalse(node3.isCatch());
2173:       assertFalse(node3.isInstanceOf());
2174:       assertFalse(node3.hasMoreThanOneChild());
2175:       assertFalse(node3.isBlock());
2176:       assertFalse(node3.isThis());
2177:       assertFalse(node3.isRegExp());
2178:       assertFalse(node3.isSwitch());
2179:       assertFalse(node3.isInc());
2180:       assertFalse(node3.isCase());
2181:       assertFalse(node3.isIn());
2182:       assertFalse(node3.isEmpty());
2183:       assertFalse(node3.isArrayLit());
2184:       assertFalse(node3.isThrow());
2185:       assertFalse(node3.isFalse());
2186:       assertFalse(node3.isFunction());
2187:       assertFalse(node3.isDefaultCase());
2188:       assertFalse(node3.isAnd());
2189:       assertFalse(node3.isVoid());
2190:       assertFalse(node3.isExprResult());
2191:       assertFalse(node3.isObjectLit());
2192:       assertFalse(node3.isDebugger());
2193:       assertFalse(node3.isTrue());
2194:       assertFalse(node3.isNot());
2195:       assertFalse(node3.hasChildren());
2196:       assertEquals(0, node3.getSourcePosition());
2197:       assertFalse(node3.isDelProp());
2198:       assertFalse(node3.isBreak());
2199:       assertFalse(node3.isTypeOf());
2200:       assertFalse(node3.isNull());
2201:       assertFalse(node3.isGetProp());
2202:       assertFalse(node3.isCall());
2203:       assertFalse(node3.isName());
2204:       assertFalse(node3.isGetElem());
2205:       assertFalse(node3.isReturn());
2206:       assertFalse(node3.isAssign());
2207:       assertFalse(node3.isDec());
2208:       assertFalse(node3.isComma());
2209:       assertFalse(node6.isReturn());
2210:       assertFalse(node6.isAssignAdd());
2211:       assertFalse(node6.isDo());
2212:       assertFalse(node6.isNumber());
2213:       assertFalse(node6.isOr());
2214:       assertFalse(node6.isCall());
2215:       assertFalse(node6.isExprResult());
2216:       assertFalse(node6.isGetElem());
2217:       assertFalse(node6.isName());
2218:       assertTrue(node6.isString());
2219:       assertFalse(node6.hasOneChild());
2220:       assertFalse(node6.hasChildren());
2221:       assertFalse(node6.isWith());
2222:       assertFalse(node6.isWhile());
2223:       assertFalse(node6.hasMoreThanOneChild());
2224:       assertFalse(node6.isBlock());
2225:       assertFalse(node6.isAssign());
2226:       assertFalse(node6.isTypeOf());
2227:       assertFalse(node6.isDec());
2228:       assertFalse(node6.isCatch());
2229:       assertFalse(node6.isInstanceOf());
2230:       assertFalse(node6.isAnd());
2231:       assertFalse(node6.isSetterDef());
2232:       assertFalse(node6.isGetProp());
2233:       assertEquals(0, node6.getLineno());
2234:       assertFalse(node6.isObjectLit());
2235:       assertFalse(node6.isDebugger());
2236:       assertEquals(0, node6.getCharno());
2237:       assertFalse(node6.isNot());
2238:       assertFalse(node6.isCast());
2239:       assertFalse(node6.isInc());
2240:       assertEquals(40, node6.getType());
2241:       assertFalse(node6.isThrow());
2242:       assertFalse(node6.isContinue());
2243:       assertFalse(node6.isFalse());
2244:       assertFalse(node6.isFunction());
2245:       assertFalse(node6.isIn());
2246:       assertFalse(node6.isCase());
2247:       assertFalse(node6.isDelProp());
2248:       assertFalse(node6.isIf());
2249:       assertFalse(node6.isGetterDef());
2250:       assertFalse(node6.isNE());
2251:       assertFalse(node6.isEmpty());
2252:       assertFalse(node6.isHook());
2253:       assertFalse(node6.isVoid());
2254:       assertFalse(node6.isTry());
2255:       assertFalse(node6.isBreak());
2256:       assertFalse(node6.isFor());
2257:       assertFalse(node6.isThis());
2258:       assertFalse(node6.isRegExp());
2259:       assertFalse(node6.isComma());
2260:       assertEquals(0, node6.getSourcePosition());
2261:       assertFalse(node6.isScript());
2262:       assertFalse(node6.isNull());
2263:       assertFalse(node6.isParamList());
2264:       assertFalse(node6.isStringKey());
2265:       assertFalse(node6.isTrue());
2266:       assertFalse(node6.isAdd());
2267:       assertFalse(node6.isVar());
2268:       assertFalse(node6.isSwitch());
2269:       assertFalse(node6.isArrayLit());
2270:       assertFalse(node6.isLabelName());
2271:       assertFalse(node6.isNew());
2272:       assertFalse(node6.isDefaultCase());
2273:       assertFalse(node6.isLabel());
2274:       assertEquals(0, node6.getChildCount());
2275:       assertEquals(0, nodeArray0.length);
2276:       assertNotNull(node6);
2277:       
2278:       node1.setChangeTime(47);
2279:       assertFalse(node1.isNE());
2280:       assertFalse(node1.isEmpty());
2281:       assertFalse(node1.isGetterDef());
2282:       assertEquals(49, node1.getType());
2283:       assertFalse(node1.isIn());
2284:       assertFalse(node1.isArrayLit());
2285:       assertFalse(node1.isDelProp());
2286:       assertFalse(node1.isIf());
2287:       assertFalse(node1.isSwitch());
2288:       assertFalse(node1.isFunction());
2289:       assertFalse(node1.isInc());
2290:       assertFalse(node1.isTrue());
2291:       assertEquals(0, node1.getChildCount());
2292:       assertFalse(node1.isDefaultCase());
2293:       assertFalse(node1.isSetterDef());
2294:       assertTrue(node1.isThrow());
2295:       assertFalse(node1.isThis());
2296:       assertFalse(node1.isInstanceOf());
2297:       assertFalse(node1.isCatch());
2298:       assertFalse(node1.isStringKey());
2299:       assertFalse(node1.isParamList());
2300:       assertFalse(node1.isRegExp());
2301:       assertFalse(node1.isScript());
2302:       assertEquals((-1), node1.getCharno());
2303:       assertFalse(node1.isWith());
2304:       assertFalse(node1.hasMoreThanOneChild());
2305:       assertFalse(node1.isHook());
2306:       assertFalse(node1.hasOneChild());
2307:       assertFalse(node1.isCase());
2308:       assertFalse(node1.isTry());
2309:       assertFalse(node1.isBlock());
2310:       assertFalse(node1.isFor());
2311:       assertFalse(node1.isNumber());
2312:       assertFalse(node1.isTypeOf());
2313:       assertFalse(node1.isDec());
2314:       assertFalse(node1.hasChildren());
2315:       assertEquals((-1), node1.getSourcePosition());
2316:       assertFalse(node1.isOr());
2317:       assertFalse(node1.isAssign());
2318:       assertFalse(node1.isGetElem());
2319:       assertFalse(node1.isCast());
2320:       assertEquals((-1), node1.getLineno());
2321:       assertFalse(node1.isLabelName());
2322:       assertFalse(node1.isNew());
2323:       assertFalse(node1.isAdd());
2324:       assertFalse(node1.isContinue());
2325:       assertFalse(node1.isVar());
2326:       assertFalse(node1.isDo());
2327:       assertFalse(node1.isLabel());
2328:       assertFalse(node1.isAssignAdd());
2329:       assertFalse(node1.isNull());
2330:       assertFalse(node1.isBreak());
2331:       assertFalse(node1.isGetProp());
2332:       assertFalse(node1.isComma());
2333:       assertFalse(node1.isFalse());
2334:       assertFalse(node1.isCall());
2335:       assertFalse(node1.isObjectLit());
2336:       assertFalse(node1.isName());
2337:       assertFalse(node1.isAnd());
2338:       assertFalse(node1.isExprResult());
2339:       assertFalse(node1.isVoid());
2340:       assertFalse(node1.isDebugger());
2341:       assertFalse(node1.isNot());
2342:       assertFalse(node1.isString());
2343:       assertFalse(node1.isReturn());
2344:       assertFalse(node1.isWhile());
2345:       
2346:       int int0 = node5.getCharno();
2347:       assertFalse(node0.isSetterDef());
2348:       assertFalse(node0.isNull());
2349:       assertFalse(node0.isParamList());
2350:       assertFalse(node0.isName());
2351:       assertEquals(0, node0.getLineno());
2352:       assertFalse(node0.isStringKey());
2353:       assertEquals(0, node0.getSourcePosition());
2354:       assertFalse(node0.isDebugger());
2355:       assertFalse(node0.isFunction());
2356:       assertFalse(node0.isAdd());
2357:       assertFalse(node0.isDefaultCase());
2358:       assertFalse(node0.isDo());
2359:       assertFalse(node0.isArrayLit());
2360:       assertFalse(node0.isNew());
2361:       assertFalse(node0.isContinue());
2362:       assertFalse(node0.isVar());
2363:       assertFalse(node0.isLabel());
2364:       assertEquals(0, node0.getChildCount());
2365:       assertFalse(node0.isAssignAdd());
2366:       assertFalse(node0.isDelProp());
2367:       assertFalse(node0.isEmpty());
2368:       assertFalse(node0.isString());
2369:       assertFalse(node0.isOr());
2370:       assertFalse(node0.isExprResult());
2371:       assertFalse(node0.isTrue());
2372:       assertFalse(node0.isVoid());
2373:       assertFalse(node0.isCall());
2374:       assertFalse(node0.isGetElem());
2375:       assertFalse(node0.isWhile());
2376:       assertEquals(330, node0.getType());
2377:       assertFalse(node0.hasChildren());
2378:       assertFalse(node0.isReturn());
2379:       assertFalse(node0.isAssign());
2380:       assertFalse(node0.isTypeOf());
2381:       assertFalse(node0.isDec());
2382:       assertFalse(node0.isComma());
2383:       assertFalse(node0.isThis());
2384:       assertFalse(node0.isGetProp());
2385:       assertFalse(node0.isBreak());
2386:       assertFalse(node0.isAnd());
2387:       assertFalse(node0.isObjectLit());
2388:       assertFalse(node0.isNot());
2389:       assertFalse(node0.isInc());
2390:       assertFalse(node0.isSwitch());
2391:       assertFalse(node0.isFalse());
2392:       assertFalse(node0.isCast());
2393:       assertFalse(node0.isThrow());
2394:       assertFalse(node0.isNE());
2395:       assertFalse(node0.isIf());
2396:       assertFalse(node0.isLabelName());
2397:       assertFalse(node0.isIn());
2398:       assertFalse(node0.isGetterDef());
2399:       assertFalse(node0.isNumber());
2400:       assertFalse(node0.isBlock());
2401:       assertEquals(0, node0.getCharno());
2402:       assertFalse(node0.isScript());
2403:       assertFalse(node0.isCase());
2404:       assertFalse(node0.isTry());
2405:       assertFalse(node0.hasOneChild());
2406:       assertFalse(node0.hasMoreThanOneChild());
2407:       assertFalse(node0.isFor());
2408:       assertFalse(node0.isCatch());
2409:       assertFalse(node0.isInstanceOf());
2410:       assertFalse(node0.isWith());
2411:       assertFalse(node0.isHook());
2412:       assertFalse(node0.isRegExp());
2413:       assertFalse(node1.isNE());
2414:       assertFalse(node1.isEmpty());
2415:       assertFalse(node1.isGetterDef());
2416:       assertEquals(49, node1.getType());
2417:       assertFalse(node1.isIn());
2418:       assertFalse(node1.isArrayLit());
2419:       assertFalse(node1.isDelProp());
2420:       assertFalse(node1.isIf());
2421:       assertFalse(node1.isSwitch());
2422:       assertFalse(node1.isFunction());
2423:       assertFalse(node1.isInc());
2424:       assertFalse(node1.isTrue());
2425:       assertEquals(0, node1.getChildCount());
2426:       assertFalse(node1.isDefaultCase());
2427:       assertFalse(node1.isSetterDef());
2428:       assertTrue(node1.isThrow());
2429:       assertFalse(node1.isThis());
2430:       assertFalse(node1.isInstanceOf());
2431:       assertFalse(node1.isCatch());
2432:       assertFalse(node1.isStringKey());
2433:       assertFalse(node1.isParamList());
2434:       assertFalse(node1.isRegExp());
2435:       assertFalse(node1.isScript());
2436:       assertEquals((-1), node1.getCharno());
2437:       assertFalse(node1.isWith());
2438:       assertFalse(node1.hasMoreThanOneChild());
2439:       assertFalse(node1.isHook());
2440:       assertFalse(node1.hasOneChild());
2441:       assertFalse(node1.isCase());
2442:       assertFalse(node1.isTry());
2443:       assertFalse(node1.isBlock());
2444:       assertFalse(node1.isFor());
2445:       assertFalse(node1.isNumber());
2446:       assertFalse(node1.isTypeOf());
2447:       assertFalse(node1.isDec());
2448:       assertFalse(node1.hasChildren());
2449:       assertEquals((-1), node1.getSourcePosition());
2450:       assertFalse(node1.isOr());
2451:       assertFalse(node1.isAssign());
2452:       assertFalse(node1.isGetElem());
2453:       assertFalse(node1.isCast());
2454:       assertEquals((-1), node1.getLineno());
2455:       assertFalse(node1.isLabelName());
2456:       assertFalse(node1.isNew());
2457:       assertFalse(node1.isAdd());
2458:       assertFalse(node1.isContinue());
2459:       assertFalse(node1.isVar());
2460:       assertFalse(node1.isDo());
2461:       assertFalse(node1.isLabel());
2462:       assertFalse(node1.isAssignAdd());
2463:       assertFalse(node1.isNull());
2464:       assertFalse(node1.isBreak());
2465:       assertFalse(node1.isGetProp());
2466:       assertFalse(node1.isComma());
2467:       assertFalse(node1.isFalse());
2468:       assertFalse(node1.isCall());
2469:       assertFalse(node1.isObjectLit());
2470:       assertFalse(node1.isName());
2471:       assertFalse(node1.isAnd());
2472:       assertFalse(node1.isExprResult());
2473:       assertFalse(node1.isVoid());
2474:       assertFalse(node1.isDebugger());
2475:       assertFalse(node1.isNot());
2476:       assertFalse(node1.isString());
2477:       assertFalse(node1.isReturn());
2478:       assertFalse(node1.isWhile());
2479:       assertFalse(node5.isNE());
2480:       assertTrue(node5.hasChildren());
2481:       assertFalse(node5.isIf());
2482:       assertFalse(node5.isDelProp());
2483:       assertFalse(node5.isFor());
2484:       assertFalse(node5.isInc());
2485:       assertFalse(node5.isTrue());
2486:       assertTrue(node5.hasMoreThanOneChild());
2487:       assertFalse(node5.isDefaultCase());
2488:       assertFalse(node5.isVoid());
2489:       assertFalse(node5.isEmpty());
2490:       assertFalse(node5.isIn());
2491:       assertFalse(node5.isGetProp());
2492:       assertEquals(2, node5.getChildCount());
2493:       assertFalse(node5.isSetterDef());
2494:       assertEquals(48, node5.getType());
2495:       assertFalse(node5.isNull());
2496:       assertFalse(node5.isBreak());
2497:       assertFalse(node5.isName());
2498:       assertFalse(node5.isFalse());
2499:       assertFalse(node5.isThrow());
2500:       assertFalse(node5.isCall());
2501:       assertFalse(node5.isFunction());
2502:       assertFalse(node5.isComma());
2503:       assertFalse(node5.isDebugger());
2504:       assertFalse(node5.isWhile());
2505:       assertFalse(node5.isAnd());
2506:       assertEquals((-1), node5.getSourcePosition());
2507:       assertFalse(node5.isString());
2508:       assertFalse(node5.isObjectLit());
2509:       assertFalse(node5.isNot());
2510:       assertFalse(node5.isLabel());
2511:       assertFalse(node5.isReturn());
2512:       assertEquals((-1), node5.getLineno());
2513:       assertFalse(node5.isAssignAdd());
2514:       assertFalse(node5.isLabelName());
2515:       assertFalse(node5.isGetElem());
2516:       assertFalse(node5.isContinue());
2517:       assertFalse(node5.isCast());
2518:       assertFalse(node5.isDec());
2519:       assertFalse(node5.isAssign());
2520:       assertFalse(node5.isTypeOf());
2521:       assertFalse(node5.isNew());
2522:       assertFalse(node5.isExprResult());
2523:       assertFalse(node5.isAdd());
2524:       assertFalse(node5.isDo());
2525:       assertFalse(node5.isOr());
2526:       assertFalse(node5.isParamList());
2527:       assertFalse(node5.isThis());
2528:       assertFalse(node5.isCatch());
2529:       assertFalse(node5.isVar());
2530:       assertFalse(node5.isInstanceOf());
2531:       assertFalse(node5.isHook());
2532:       assertFalse(node5.isWith());
2533:       assertFalse(node5.isRegExp());
2534:       assertEquals((-1), node5.getCharno());
2535:       assertFalse(node5.isBlock());
2536:       assertFalse(node5.isScript());
2537:       assertFalse(node5.hasOneChild());
2538:       assertFalse(node5.isArrayLit());
2539:       assertFalse(node5.isSwitch());
2540:       assertFalse(node5.isTry());
2541:       assertFalse(node5.isStringKey());
2542:       assertFalse(node5.isCase());
2543:       assertFalse(node5.isNumber());
2544:       assertFalse(node5.isGetterDef());
2545:       assertEquals((-1), int0);
2546:       assertEquals(0, nodeArray0.length);
2547:   }
2548: }
RegularFileObject[/tmp/EvoSuite_165_1629222895556/com/google/javascript/rhino/Node_165_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:56 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_165_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_165_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_165_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.JSTypeNative",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.common.collect.AbstractIndexedListIterator",
340:       "com.google.common.collect.Iterators$11",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.TemplatizedType",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.javascript.rhino.JSTypeExpression",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.common.collect.Iterators$12",
366:       "com.google.javascript.rhino.jstype.NamedType"
367:     );
368:   }
369: }

[MASTER] 17:54:56.558 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node[] nodeArray0 = new Node[0];
Node node0 = new Node(330, nodeArray0);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getLineno());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertEquals(330, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isBlock());
assertEquals(0, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals(0, nodeArray0.length);
assertNotNull(node0);

Node node1 = new Node(49);
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertEquals(49, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isObjectLit());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isNumber());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

Node node3 = node2.useSourceInfoIfMissingFrom(node1);
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertEquals(49, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isObjectLit());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isNumber());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node3.isWhile());
assertTrue(node3.isString());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isOr());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isSetterDef());
assertFalse(node3.isLabelName());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCast());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isVar());
assertFalse(node3.isContinue());
assertEquals(40, node3.getType());
assertFalse(node3.isLabel());
assertFalse(node3.isWith());
assertFalse(node3.isScript());
assertFalse(node3.isTry());
assertFalse(node3.isIf());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.hasOneChild());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isHook());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isBlock());
assertFalse(node3.isThis());
assertFalse(node3.isRegExp());
assertFalse(node3.isSwitch());
assertFalse(node3.isInc());
assertFalse(node3.isCase());
assertFalse(node3.isIn());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isEmpty());
assertFalse(node3.isArrayLit());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isFunction());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAnd());
assertFalse(node3.isVoid());
assertFalse(node3.isExprResult());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isNot());
assertFalse(node3.hasChildren());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNull());
assertFalse(node3.isGetProp());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isReturn());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isComma());
assertNotNull(node3);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));

Iterable<Node> iterable0 = node3.children();
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertEquals(49, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isObjectLit());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isNumber());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node3.isWhile());
assertTrue(node3.isString());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isOr());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isSetterDef());
assertFalse(node3.isLabelName());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCast());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isVar());
assertFalse(node3.isContinue());
assertEquals(40, node3.getType());
assertFalse(node3.isLabel());
assertFalse(node3.isWith());
assertFalse(node3.isScript());
assertFalse(node3.isTry());
assertFalse(node3.isIf());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.hasOneChild());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isHook());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isBlock());
assertFalse(node3.isThis());
assertFalse(node3.isRegExp());
assertFalse(node3.isSwitch());
assertFalse(node3.isInc());
assertFalse(node3.isCase());
assertFalse(node3.isIn());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isEmpty());
assertFalse(node3.isArrayLit());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isFunction());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAnd());
assertFalse(node3.isVoid());
assertFalse(node3.isExprResult());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isNot());
assertFalse(node3.hasChildren());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNull());
assertFalse(node3.isGetProp());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isReturn());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isComma());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));

boolean boolean0 = node1.isGetProp();
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertEquals(49, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isObjectLit());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(boolean0);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));

boolean boolean1 = node3.hasChildren();
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertEquals(49, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isObjectLit());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isNumber());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node3.isWhile());
assertTrue(node3.isString());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isOr());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isSetterDef());
assertFalse(node3.isLabelName());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCast());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isVar());
assertFalse(node3.isContinue());
assertEquals(40, node3.getType());
assertFalse(node3.isLabel());
assertFalse(node3.isWith());
assertFalse(node3.isScript());
assertFalse(node3.isTry());
assertFalse(node3.isIf());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.hasOneChild());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isHook());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isBlock());
assertFalse(node3.isThis());
assertFalse(node3.isRegExp());
assertFalse(node3.isSwitch());
assertFalse(node3.isInc());
assertFalse(node3.isCase());
assertFalse(node3.isIn());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isEmpty());
assertFalse(node3.isArrayLit());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isFunction());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAnd());
assertFalse(node3.isVoid());
assertFalse(node3.isExprResult());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isNot());
assertFalse(node3.hasChildren());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNull());
assertFalse(node3.isGetProp());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isReturn());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isComma());
assertFalse(boolean1);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean1 == boolean0);

boolean boolean2 = node2.isSwitch();
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isNumber());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(boolean2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

Node node4 = node0.cloneNode();
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getLineno());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertEquals(330, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isBlock());
assertEquals(0, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isEmpty());
assertFalse(node4.isDelProp());
assertFalse(node4.isIn());
assertFalse(node4.isGetterDef());
assertFalse(node4.isDebugger());
assertFalse(node4.isSwitch());
assertFalse(node4.isFunction());
assertFalse(node4.isInc());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isArrayLit());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isSetterDef());
assertFalse(node4.isThis());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertFalse(node4.isRegExp());
assertFalse(node4.isScript());
assertEquals(0, node4.getCharno());
assertFalse(node4.isTry());
assertFalse(node4.hasOneChild());
assertFalse(node4.isCase());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isCatch());
assertFalse(node4.isHook());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isWith());
assertFalse(node4.isBlock());
assertFalse(node4.isFor());
assertFalse(node4.isTypeOf());
assertFalse(node4.isNumber());
assertFalse(node4.isLabelName());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isGetElem());
assertFalse(node4.isOr());
assertFalse(node4.isDo());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isCast());
assertFalse(node4.isVar());
assertFalse(node4.isContinue());
assertFalse(node4.isLabel());
assertFalse(node4.isNull());
assertEquals(0, node4.getLineno());
assertFalse(node4.isName());
assertFalse(node4.isBreak());
assertFalse(node4.isGetProp());
assertFalse(node4.isObjectLit());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertEquals(0, node4.getSourcePosition());
assertFalse(node4.isExprResult());
assertFalse(node4.isTrue());
assertFalse(node4.isWhile());
assertFalse(node4.isString());
assertFalse(node4.isVoid());
assertFalse(node4.isCall());
assertEquals(330, node4.getType());
assertFalse(node4.isAssign());
assertFalse(node4.isReturn());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isComma());
assertEquals(0, nodeArray0.length);
assertNotNull(node4);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags0.valueOf());
assertEquals(48, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags0.valueOf());
assertEquals(48, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertNotNull(node_SideEffectFlags3);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertNotNull(node_SideEffectFlags4);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertNotNull(node_SideEffectFlags5);

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setMutatesGlobalState();
assertEquals(0, node_SideEffectFlags6.valueOf());
assertTrue(node_SideEffectFlags6.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertNotNull(node_SideEffectFlags6);

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setReturnsTainted();
assertEquals(0, node_SideEffectFlags6.valueOf());
assertTrue(node_SideEffectFlags6.areAllFlagsSet());
assertTrue(node_SideEffectFlags7.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags7.valueOf());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertNotNull(node_SideEffectFlags7);

Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags7.setMutatesArguments();
assertEquals(0, node_SideEffectFlags6.valueOf());
assertTrue(node_SideEffectFlags6.areAllFlagsSet());
assertTrue(node_SideEffectFlags7.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags7.valueOf());
assertTrue(node_SideEffectFlags8.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags8.valueOf());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertNotNull(node_SideEffectFlags8);

Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags2.setMutatesGlobalState();
assertEquals(0, node_SideEffectFlags9.valueOf());
assertTrue(node_SideEffectFlags9.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags9);

Node.SideEffectFlags node_SideEffectFlags10 = node_SideEffectFlags0.setMutatesArguments();
assertEquals(0, node_SideEffectFlags10.valueOf());
assertTrue(node_SideEffectFlags10.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags10);

Node.SideEffectFlags node_SideEffectFlags11 = node_SideEffectFlags10.setMutatesGlobalState();
assertEquals(0, node_SideEffectFlags10.valueOf());
assertTrue(node_SideEffectFlags10.areAllFlagsSet());
assertTrue(node_SideEffectFlags11.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags11.valueOf());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags11);

Node node5 = new Node(48, node1, node0);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getLineno());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertEquals(330, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isBlock());
assertEquals(0, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertEquals(49, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isObjectLit());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node5.isNE());
assertTrue(node5.hasChildren());
assertFalse(node5.isIf());
assertFalse(node5.isDelProp());
assertFalse(node5.isFor());
assertFalse(node5.isInc());
assertFalse(node5.isTrue());
assertTrue(node5.hasMoreThanOneChild());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isVoid());
assertFalse(node5.isEmpty());
assertFalse(node5.isIn());
assertFalse(node5.isGetProp());
assertEquals(2, node5.getChildCount());
assertFalse(node5.isSetterDef());
assertEquals(48, node5.getType());
assertFalse(node5.isNull());
assertFalse(node5.isBreak());
assertFalse(node5.isName());
assertFalse(node5.isFalse());
assertFalse(node5.isThrow());
assertFalse(node5.isCall());
assertFalse(node5.isFunction());
assertFalse(node5.isComma());
assertFalse(node5.isDebugger());
assertFalse(node5.isWhile());
assertFalse(node5.isAnd());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isString());
assertFalse(node5.isObjectLit());
assertFalse(node5.isNot());
assertFalse(node5.isLabel());
assertFalse(node5.isReturn());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isLabelName());
assertFalse(node5.isGetElem());
assertFalse(node5.isContinue());
assertFalse(node5.isCast());
assertFalse(node5.isDec());
assertFalse(node5.isAssign());
assertFalse(node5.isTypeOf());
assertFalse(node5.isNew());
assertFalse(node5.isExprResult());
assertFalse(node5.isAdd());
assertFalse(node5.isDo());
assertFalse(node5.isOr());
assertFalse(node5.isParamList());
assertFalse(node5.isThis());
assertFalse(node5.isCatch());
assertFalse(node5.isVar());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isHook());
assertFalse(node5.isWith());
assertFalse(node5.isRegExp());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isBlock());
assertFalse(node5.isScript());
assertFalse(node5.hasOneChild());
assertFalse(node5.isArrayLit());
assertFalse(node5.isSwitch());
assertFalse(node5.isTry());
assertFalse(node5.isStringKey());
assertFalse(node5.isCase());
assertFalse(node5.isNumber());
assertFalse(node5.isGetterDef());
assertEquals(0, nodeArray0.length);
assertNotNull(node5);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));

boolean boolean3 = node1.hasOneChild();
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertEquals(49, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isObjectLit());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(boolean3);
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);

boolean boolean4 = node5.isEquivalentToShallow(node0);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getLineno());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertEquals(330, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isBlock());
assertEquals(0, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertEquals(49, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isObjectLit());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node5.isNE());
assertTrue(node5.hasChildren());
assertFalse(node5.isIf());
assertFalse(node5.isDelProp());
assertFalse(node5.isFor());
assertFalse(node5.isInc());
assertFalse(node5.isTrue());
assertTrue(node5.hasMoreThanOneChild());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isVoid());
assertFalse(node5.isEmpty());
assertFalse(node5.isIn());
assertFalse(node5.isGetProp());
assertEquals(2, node5.getChildCount());
assertFalse(node5.isSetterDef());
assertEquals(48, node5.getType());
assertFalse(node5.isNull());
assertFalse(node5.isBreak());
assertFalse(node5.isName());
assertFalse(node5.isFalse());
assertFalse(node5.isThrow());
assertFalse(node5.isCall());
assertFalse(node5.isFunction());
assertFalse(node5.isComma());
assertFalse(node5.isDebugger());
assertFalse(node5.isWhile());
assertFalse(node5.isAnd());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isString());
assertFalse(node5.isObjectLit());
assertFalse(node5.isNot());
assertFalse(node5.isLabel());
assertFalse(node5.isReturn());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isLabelName());
assertFalse(node5.isGetElem());
assertFalse(node5.isContinue());
assertFalse(node5.isCast());
assertFalse(node5.isDec());
assertFalse(node5.isAssign());
assertFalse(node5.isTypeOf());
assertFalse(node5.isNew());
assertFalse(node5.isExprResult());
assertFalse(node5.isAdd());
assertFalse(node5.isDo());
assertFalse(node5.isOr());
assertFalse(node5.isParamList());
assertFalse(node5.isThis());
assertFalse(node5.isCatch());
assertFalse(node5.isVar());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isHook());
assertFalse(node5.isWith());
assertFalse(node5.isRegExp());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isBlock());
assertFalse(node5.isScript());
assertFalse(node5.hasOneChild());
assertFalse(node5.isArrayLit());
assertFalse(node5.isSwitch());
assertFalse(node5.isTry());
assertFalse(node5.isStringKey());
assertFalse(node5.isCase());
assertFalse(node5.isNumber());
assertFalse(node5.isGetterDef());
assertFalse(boolean4);
assertEquals(0, nodeArray0.length);
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node1));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);

boolean boolean5 = node0.isEquivalentTo(node2, false, false, true);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getLineno());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertEquals(330, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isBlock());
assertEquals(0, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isNumber());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(boolean5);
assertEquals(0, nodeArray0.length);
assertFalse(node0.equals((Object)node5));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node5));
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);

Node node6 = node3.useSourceInfoFrom(node0);
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getLineno());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertEquals(330, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isBlock());
assertEquals(0, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertEquals(49, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isObjectLit());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node2.isBlock());
assertTrue(node2.isString());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals(0, node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isNumber());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isExprResult());
assertFalse(node2.isBreak());
assertEquals(0, node2.getCharno());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isObjectLit());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertEquals(0, node2.getLineno());
assertFalse(node3.isWhile());
assertTrue(node3.isString());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isOr());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isSetterDef());
assertEquals(0, node3.getLineno());
assertFalse(node3.isLabelName());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCast());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isVar());
assertFalse(node3.isContinue());
assertEquals(40, node3.getType());
assertFalse(node3.isLabel());
assertFalse(node3.isWith());
assertFalse(node3.isScript());
assertFalse(node3.isTry());
assertEquals(0, node3.getCharno());
assertFalse(node3.isIf());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isBlock());
assertFalse(node3.isThis());
assertFalse(node3.isRegExp());
assertFalse(node3.isSwitch());
assertFalse(node3.isInc());
assertFalse(node3.isCase());
assertFalse(node3.isIn());
assertFalse(node3.isEmpty());
assertFalse(node3.isArrayLit());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isFunction());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAnd());
assertFalse(node3.isVoid());
assertFalse(node3.isExprResult());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isNot());
assertFalse(node3.hasChildren());
assertEquals(0, node3.getSourcePosition());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNull());
assertFalse(node3.isGetProp());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isReturn());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isComma());
assertFalse(node6.isReturn());
assertFalse(node6.isAssignAdd());
assertFalse(node6.isDo());
assertFalse(node6.isNumber());
assertFalse(node6.isOr());
assertFalse(node6.isCall());
assertFalse(node6.isExprResult());
assertFalse(node6.isGetElem());
assertFalse(node6.isName());
assertTrue(node6.isString());
assertFalse(node6.hasOneChild());
assertFalse(node6.hasChildren());
assertFalse(node6.isWith());
assertFalse(node6.isWhile());
assertFalse(node6.hasMoreThanOneChild());
assertFalse(node6.isBlock());
assertFalse(node6.isAssign());
assertFalse(node6.isTypeOf());
assertFalse(node6.isDec());
assertFalse(node6.isCatch());
assertFalse(node6.isInstanceOf());
assertFalse(node6.isAnd());
assertFalse(node6.isSetterDef());
assertFalse(node6.isGetProp());
assertEquals(0, node6.getLineno());
assertFalse(node6.isObjectLit());
assertFalse(node6.isDebugger());
assertEquals(0, node6.getCharno());
assertFalse(node6.isNot());
assertFalse(node6.isCast());
assertFalse(node6.isInc());
assertEquals(40, node6.getType());
assertFalse(node6.isThrow());
assertFalse(node6.isContinue());
assertFalse(node6.isFalse());
assertFalse(node6.isFunction());
assertFalse(node6.isIn());
assertFalse(node6.isCase());
assertFalse(node6.isDelProp());
assertFalse(node6.isIf());
assertFalse(node6.isGetterDef());
assertFalse(node6.isNE());
assertFalse(node6.isEmpty());
assertFalse(node6.isHook());
assertFalse(node6.isVoid());
assertFalse(node6.isTry());
assertFalse(node6.isBreak());
assertFalse(node6.isFor());
assertFalse(node6.isThis());
assertFalse(node6.isRegExp());
assertFalse(node6.isComma());
assertEquals(0, node6.getSourcePosition());
assertFalse(node6.isScript());
assertFalse(node6.isNull());
assertFalse(node6.isParamList());
assertFalse(node6.isStringKey());
assertFalse(node6.isTrue());
assertFalse(node6.isAdd());
assertFalse(node6.isVar());
assertFalse(node6.isSwitch());
assertFalse(node6.isArrayLit());
assertFalse(node6.isLabelName());
assertFalse(node6.isNew());
assertFalse(node6.isDefaultCase());
assertFalse(node6.isLabel());
assertEquals(0, node6.getChildCount());
assertEquals(0, nodeArray0.length);
assertNotNull(node6);

node1.setChangeTime(47);
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertEquals(49, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isObjectLit());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());

int int0 = node5.getCharno();
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getLineno());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertEquals(330, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isLabelName());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isBlock());
assertEquals(0, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertEquals(49, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertTrue(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isObjectLit());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node5.isNE());
assertTrue(node5.hasChildren());
assertFalse(node5.isIf());
assertFalse(node5.isDelProp());
assertFalse(node5.isFor());
assertFalse(node5.isInc());
assertFalse(node5.isTrue());
assertTrue(node5.hasMoreThanOneChild());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isVoid());
assertFalse(node5.isEmpty());
assertFalse(node5.isIn());
assertFalse(node5.isGetProp());
assertEquals(2, node5.getChildCount());
assertFalse(node5.isSetterDef());
assertEquals(48, node5.getType());
assertFalse(node5.isNull());
assertFalse(node5.isBreak());
assertFalse(node5.isName());
assertFalse(node5.isFalse());
assertFalse(node5.isThrow());
assertFalse(node5.isCall());
assertFalse(node5.isFunction());
assertFalse(node5.isComma());
assertFalse(node5.isDebugger());
assertFalse(node5.isWhile());
assertFalse(node5.isAnd());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isString());
assertFalse(node5.isObjectLit());
assertFalse(node5.isNot());
assertFalse(node5.isLabel());
assertFalse(node5.isReturn());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isLabelName());
assertFalse(node5.isGetElem());
assertFalse(node5.isContinue());
assertFalse(node5.isCast());
assertFalse(node5.isDec());
assertFalse(node5.isAssign());
assertFalse(node5.isTypeOf());
assertFalse(node5.isNew());
assertFalse(node5.isExprResult());
assertFalse(node5.isAdd());
assertFalse(node5.isDo());
assertFalse(node5.isOr());
assertFalse(node5.isParamList());
assertFalse(node5.isThis());
assertFalse(node5.isCatch());
assertFalse(node5.isVar());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isHook());
assertFalse(node5.isWith());
assertFalse(node5.isRegExp());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isBlock());
assertFalse(node5.isScript());
assertFalse(node5.hasOneChild());
assertFalse(node5.isArrayLit());
assertFalse(node5.isSwitch());
assertFalse(node5.isTry());
assertFalse(node5.isStringKey());
assertFalse(node5.isCase());
assertFalse(node5.isNumber());
assertFalse(node5.isGetterDef());
assertEquals((-1), int0);
assertEquals(0, nodeArray0.length);


[MASTER] 17:54:57.474 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_166_1629222896569/com/google/javascript/rhino/Node_166_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_166_1629222896569/com/google/javascript/rhino/Node_166_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:57.474 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:57.474 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:57.475 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 860
[MASTER] 17:54:57.476 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_166_1629222896569/com/google/javascript/rhino/Node_166_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:56 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_166_tmp__ESTest extends Node_166_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node[] nodeArray0 = new Node[0];
22:       Node node0 = new Node(330, nodeArray0);
23:       assertFalse(node0.isCatch());
24:       assertEquals(0, node0.getChildCount());
25:       assertFalse(node0.isSetterDef());
26:       assertFalse(node0.isDefaultCase());
27:       assertFalse(node0.isTry());
28:       assertFalse(node0.isVar());
29:       assertFalse(node0.isStringKey());
30:       assertFalse(node0.isGetterDef());
31:       assertFalse(node0.isDebugger());
32:       assertFalse(node0.isFunction());
33:       assertFalse(node0.isParamList());
34:       assertEquals(0, node0.getLineno());
35:       assertFalse(node0.isArrayLit());
36:       assertEquals(330, node0.getType());
37:       assertFalse(node0.isOr());
38:       assertFalse(node0.isLabel());
39:       assertFalse(node0.isReturn());
40:       assertFalse(node0.isWhile());
41:       assertFalse(node0.isString());
42:       assertFalse(node0.isDo());
43:       assertFalse(node0.isAdd());
44:       assertFalse(node0.isEmpty());
45:       assertFalse(node0.isAssignAdd());
46:       assertFalse(node0.isNew());
47:       assertFalse(node0.isCall());
48:       assertFalse(node0.isAssign());
49:       assertFalse(node0.hasChildren());
50:       assertEquals(0, node0.getSourcePosition());
51:       assertFalse(node0.isDec());
52:       assertFalse(node0.isTypeOf());
53:       assertFalse(node0.isExprResult());
54:       assertFalse(node0.isTrue());
55:       assertFalse(node0.isNull());
56:       assertFalse(node0.isName());
57:       assertFalse(node0.isGetElem());
58:       assertFalse(node0.isDelProp());
59:       assertFalse(node0.isBreak());
60:       assertFalse(node0.isVoid());
61:       assertFalse(node0.isObjectLit());
62:       assertFalse(node0.isAnd());
63:       assertFalse(node0.isInstanceOf());
64:       assertFalse(node0.isNot());
65:       assertFalse(node0.isWith());
66:       assertFalse(node0.isComma());
67:       assertFalse(node0.isScript());
68:       assertFalse(node0.isThis());
69:       assertFalse(node0.isGetProp());
70:       assertFalse(node0.hasOneChild());
71:       assertFalse(node0.isCast());
72:       assertFalse(node0.isThrow());
73:       assertFalse(node0.isFalse());
74:       assertFalse(node0.isSwitch());
75:       assertFalse(node0.isLabelName());
76:       assertFalse(node0.hasMoreThanOneChild());
77:       assertFalse(node0.isContinue());
78:       assertFalse(node0.isIn());
79:       assertFalse(node0.isNumber());
80:       assertFalse(node0.isInc());
81:       assertFalse(node0.isCase());
82:       assertFalse(node0.isHook());
83:       assertFalse(node0.isFor());
84:       assertFalse(node0.isBlock());
85:       assertFalse(node0.isNE());
86:       assertFalse(node0.isRegExp());
87:       assertEquals(0, node0.getCharno());
88:       assertFalse(node0.isIf());
89:       assertEquals(0, nodeArray0.length);
90:       assertNotNull(node0);
91:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
92:       assertEquals(4095, Node.COLUMN_MASK);
93:       assertEquals(55, Node.INFERRED_FUNCTION);
94:       assertEquals(48, Node.DIRECTIVES);
95:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
96:       assertEquals(8, Node.FLAG_NO_THROWS);
97:       assertEquals(43, Node.IS_CONSTANT_NAME);
98:       assertEquals(36, Node.QUOTED_PROP);
99:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
100:       assertEquals(50, Node.FREE_CALL);
101:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
102:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
103:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
104:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
105:       assertEquals(12, Node.COLUMN_BITS);
106:       assertEquals(1, Node.DECR_FLAG);
107:       assertEquals(30, Node.VAR_ARGS_NAME);
108:       assertEquals(49, Node.DIRECT_EVAL);
109:       assertEquals(15, Node.NO_SIDE_EFFECTS);
110:       assertEquals(32, Node.INCRDECR_PROP);
111:       assertEquals(54, Node.SLASH_V);
112:       assertEquals(37, Node.OPT_ARG_NAME);
113:       assertEquals(52, Node.LENGTH);
114:       assertEquals(46, Node.IS_NAMESPACE);
115:       assertEquals(56, Node.CHANGE_TIME);
116:       assertEquals(51, Node.STATIC_SOURCE_FILE);
117:       assertEquals(57, Node.REFLECTED_OBJECT);
118:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
119:       assertEquals(29, Node.JSDOC_INFO_PROP);
120:       assertEquals(40, Node.ORIGINALNAME_PROP);
121:       assertEquals(39, Node.EMPTY_BLOCK);
122:       assertEquals(53, Node.INPUT_ID);
123:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
124:       assertEquals(2, Node.POST_FLAG);
125:       assertEquals(57, Node.LAST_PROP);
126:       assertEquals(47, Node.IS_DISPATCHER);
127:       
128:       Node node1 = new Node(49);
129:       assertFalse(node1.isFor());
130:       assertFalse(node1.isEmpty());
131:       assertFalse(node1.isGetterDef());
132:       assertFalse(node1.isDebugger());
133:       assertFalse(node1.isNE());
134:       assertFalse(node1.isTrue());
135:       assertFalse(node1.isIf());
136:       assertFalse(node1.isArrayLit());
137:       assertFalse(node1.isDelProp());
138:       assertFalse(node1.isVoid());
139:       assertFalse(node1.isCase());
140:       assertFalse(node1.isCatch());
141:       assertFalse(node1.isString());
142:       assertFalse(node1.isRegExp());
143:       assertEquals(49, node1.getType());
144:       assertFalse(node1.isTry());
145:       assertFalse(node1.isStringKey());
146:       assertFalse(node1.isCall());
147:       assertFalse(node1.isVar());
148:       assertTrue(node1.isThrow());
149:       assertFalse(node1.isComma());
150:       assertFalse(node1.isParamList());
151:       assertEquals((-1), node1.getCharno());
152:       assertFalse(node1.isNull());
153:       assertFalse(node1.isBreak());
154:       assertFalse(node1.isSwitch());
155:       assertFalse(node1.isName());
156:       assertEquals(0, node1.getChildCount());
157:       assertFalse(node1.isOr());
158:       assertFalse(node1.isNew());
159:       assertFalse(node1.isLabel());
160:       assertFalse(node1.isAssignAdd());
161:       assertFalse(node1.isAdd());
162:       assertFalse(node1.isDefaultCase());
163:       assertFalse(node1.isDo());
164:       assertFalse(node1.isGetElem());
165:       assertFalse(node1.isCast());
166:       assertFalse(node1.isNumber());
167:       assertFalse(node1.isDec());
168:       assertFalse(node1.hasChildren());
169:       assertEquals((-1), node1.getSourcePosition());
170:       assertFalse(node1.isAssign());
171:       assertFalse(node1.isTypeOf());
172:       assertFalse(node1.isExprResult());
173:       assertEquals((-1), node1.getLineno());
174:       assertFalse(node1.isLabelName());
175:       assertFalse(node1.isAnd());
176:       assertFalse(node1.isInstanceOf());
177:       assertFalse(node1.hasMoreThanOneChild());
178:       assertFalse(node1.isWith());
179:       assertFalse(node1.isObjectLit());
180:       assertFalse(node1.isNot());
181:       assertFalse(node1.isGetProp());
182:       assertFalse(node1.isReturn());
183:       assertFalse(node1.isThis());
184:       assertFalse(node1.isBlock());
185:       assertFalse(node1.isScript());
186:       assertFalse(node1.hasOneChild());
187:       assertFalse(node1.isWhile());
188:       assertFalse(node1.isFalse());
189:       assertFalse(node1.isHook());
190:       assertFalse(node1.isContinue());
191:       assertFalse(node1.isIn());
192:       assertFalse(node1.isFunction());
193:       assertFalse(node1.isInc());
194:       assertFalse(node1.isSetterDef());
195:       assertNotNull(node1);
196:       assertFalse(node1.equals((Object)node0));
197:       assertEquals(29, Node.JSDOC_INFO_PROP);
198:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
199:       assertEquals(56, Node.CHANGE_TIME);
200:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
201:       assertEquals(37, Node.OPT_ARG_NAME);
202:       assertEquals(32, Node.INCRDECR_PROP);
203:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
204:       assertEquals(2, Node.POST_FLAG);
205:       assertEquals(12, Node.COLUMN_BITS);
206:       assertEquals(47, Node.IS_DISPATCHER);
207:       assertEquals(49, Node.DIRECT_EVAL);
208:       assertEquals(57, Node.LAST_PROP);
209:       assertEquals(55, Node.INFERRED_FUNCTION);
210:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
211:       assertEquals(15, Node.NO_SIDE_EFFECTS);
212:       assertEquals(52, Node.LENGTH);
213:       assertEquals(53, Node.INPUT_ID);
214:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
215:       assertEquals(8, Node.FLAG_NO_THROWS);
216:       assertEquals(57, Node.REFLECTED_OBJECT);
217:       assertEquals(36, Node.QUOTED_PROP);
218:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
219:       assertEquals(50, Node.FREE_CALL);
220:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
221:       assertEquals(39, Node.EMPTY_BLOCK);
222:       assertEquals(40, Node.ORIGINALNAME_PROP);
223:       assertEquals(48, Node.DIRECTIVES);
224:       assertEquals(4095, Node.COLUMN_MASK);
225:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
226:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
227:       assertEquals(30, Node.VAR_ARGS_NAME);
228:       assertEquals(43, Node.IS_CONSTANT_NAME);
229:       assertEquals(1, Node.DECR_FLAG);
230:       assertEquals(46, Node.IS_NAMESPACE);
231:       assertEquals(54, Node.SLASH_V);
232:       assertEquals(51, Node.STATIC_SOURCE_FILE);
233:       
234:       String string0 = "xpBF>P}ZAl``iC)9";
235:       Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
236:       assertFalse(node2.isSetterDef());
237:       assertFalse(node2.isNull());
238:       assertFalse(node2.isParamList());
239:       assertFalse(node2.isName());
240:       assertFalse(node2.isStringKey());
241:       assertFalse(node2.isFunction());
242:       assertFalse(node2.isDefaultCase());
243:       assertFalse(node2.isDo());
244:       assertFalse(node2.isAdd());
245:       assertFalse(node2.isArrayLit());
246:       assertFalse(node2.isNew());
247:       assertFalse(node2.isVar());
248:       assertFalse(node2.isContinue());
249:       assertEquals(40, node2.getType());
250:       assertEquals(0, node2.getChildCount());
251:       assertFalse(node2.isLabel());
252:       assertFalse(node2.isNE());
253:       assertFalse(node2.isNumber());
254:       assertFalse(node2.isIf());
255:       assertEquals((-1), node2.getLineno());
256:       assertFalse(node2.isLabelName());
257:       assertFalse(node2.isIn());
258:       assertFalse(node2.isGetterDef());
259:       assertFalse(node2.isRegExp());
260:       assertFalse(node2.isScript());
261:       assertTrue(node2.isString());
262:       assertFalse(node2.isTry());
263:       assertFalse(node2.hasOneChild());
264:       assertFalse(node2.isCase());
265:       assertFalse(node2.hasMoreThanOneChild());
266:       assertFalse(node2.isCatch());
267:       assertFalse(node2.isInstanceOf());
268:       assertFalse(node2.isWith());
269:       assertFalse(node2.isBlock());
270:       assertFalse(node2.isFor());
271:       assertFalse(node2.isHook());
272:       assertFalse(node2.isThis());
273:       assertFalse(node2.isComma());
274:       assertFalse(node2.isBreak());
275:       assertFalse(node2.isGetProp());
276:       assertFalse(node2.isObjectLit());
277:       assertFalse(node2.isAnd());
278:       assertFalse(node2.isNot());
279:       assertEquals((-1), node2.getCharno());
280:       assertFalse(node2.isSwitch());
281:       assertFalse(node2.isInc());
282:       assertFalse(node2.isCast());
283:       assertFalse(node2.isFalse());
284:       assertFalse(node2.isThrow());
285:       assertFalse(node2.isTypeOf());
286:       assertFalse(node2.isAssignAdd());
287:       assertFalse(node2.isDelProp());
288:       assertFalse(node2.isEmpty());
289:       assertFalse(node2.isGetElem());
290:       assertFalse(node2.isOr());
291:       assertEquals((-1), node2.getSourcePosition());
292:       assertFalse(node2.isDebugger());
293:       assertFalse(node2.isExprResult());
294:       assertFalse(node2.isTrue());
295:       assertFalse(node2.isVoid());
296:       assertFalse(node2.isWhile());
297:       assertFalse(node2.isCall());
298:       assertFalse(node2.isAssign());
299:       assertFalse(node2.isReturn());
300:       assertFalse(node2.isDec());
301:       assertFalse(node2.hasChildren());
302:       assertNotNull(node2);
303:       assertFalse(node2.equals((Object)node0));
304:       assertFalse(node2.equals((Object)node1));
305:       assertEquals(48, Node.DIRECTIVES);
306:       assertEquals(8, Node.FLAG_NO_THROWS);
307:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
308:       assertEquals(4095, Node.COLUMN_MASK);
309:       assertEquals(40, Node.ORIGINALNAME_PROP);
310:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
311:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
312:       assertEquals(43, Node.IS_CONSTANT_NAME);
313:       assertEquals(54, Node.SLASH_V);
314:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
315:       assertEquals(1, Node.DECR_FLAG);
316:       assertEquals(50, Node.FREE_CALL);
317:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
318:       assertEquals(37, Node.OPT_ARG_NAME);
319:       assertEquals(2, Node.POST_FLAG);
320:       assertEquals(32, Node.INCRDECR_PROP);
321:       assertEquals(56, Node.CHANGE_TIME);
322:       assertEquals(47, Node.IS_DISPATCHER);
323:       assertEquals(51, Node.STATIC_SOURCE_FILE);
324:       assertEquals(12, Node.COLUMN_BITS);
325:       assertEquals(46, Node.IS_NAMESPACE);
326:       assertEquals(30, Node.VAR_ARGS_NAME);
327:       assertEquals(49, Node.DIRECT_EVAL);
328:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
329:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
330:       assertEquals(52, Node.LENGTH);
331:       assertEquals(57, Node.LAST_PROP);
332:       assertEquals(57, Node.REFLECTED_OBJECT);
333:       assertEquals(36, Node.QUOTED_PROP);
334:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
335:       assertEquals(15, Node.NO_SIDE_EFFECTS);
336:       assertEquals(55, Node.INFERRED_FUNCTION);
337:       assertEquals(39, Node.EMPTY_BLOCK);
338:       assertEquals(29, Node.JSDOC_INFO_PROP);
339:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
340:       assertEquals(53, Node.INPUT_ID);
341:       
342:       Node node3 = node2.useSourceInfoIfMissingFrom(node1);
343:       assertFalse(node1.isFor());
344:       assertFalse(node1.isEmpty());
345:       assertFalse(node1.isGetterDef());
346:       assertFalse(node1.isDebugger());
347:       assertFalse(node1.isNE());
348:       assertFalse(node1.isTrue());
349:       assertFalse(node1.isIf());
350:       assertFalse(node1.isArrayLit());
351:       assertFalse(node1.isDelProp());
352:       assertFalse(node1.isVoid());
353:       assertFalse(node1.isCase());
354:       assertFalse(node1.isCatch());
355:       assertFalse(node1.isString());
356:       assertFalse(node1.isRegExp());
357:       assertEquals(49, node1.getType());
358:       assertFalse(node1.isTry());
359:       assertFalse(node1.isStringKey());
360:       assertFalse(node1.isCall());
361:       assertFalse(node1.isVar());
362:       assertTrue(node1.isThrow());
363:       assertFalse(node1.isComma());
364:       assertFalse(node1.isParamList());
365:       assertEquals((-1), node1.getCharno());
366:       assertFalse(node1.isNull());
367:       assertFalse(node1.isBreak());
368:       assertFalse(node1.isSwitch());
369:       assertFalse(node1.isName());
370:       assertEquals(0, node1.getChildCount());
371:       assertFalse(node1.isOr());
372:       assertFalse(node1.isNew());
373:       assertFalse(node1.isLabel());
374:       assertFalse(node1.isAssignAdd());
375:       assertFalse(node1.isAdd());
376:       assertFalse(node1.isDefaultCase());
377:       assertFalse(node1.isDo());
378:       assertFalse(node1.isGetElem());
379:       assertFalse(node1.isCast());
380:       assertFalse(node1.isNumber());
381:       assertFalse(node1.isDec());
382:       assertFalse(node1.hasChildren());
383:       assertEquals((-1), node1.getSourcePosition());
384:       assertFalse(node1.isAssign());
385:       assertFalse(node1.isTypeOf());
386:       assertFalse(node1.isExprResult());
387:       assertEquals((-1), node1.getLineno());
388:       assertFalse(node1.isLabelName());
389:       assertFalse(node1.isAnd());
390:       assertFalse(node1.isInstanceOf());
391:       assertFalse(node1.hasMoreThanOneChild());
392:       assertFalse(node1.isWith());
393:       assertFalse(node1.isObjectLit());
394:       assertFalse(node1.isNot());
395:       assertFalse(node1.isGetProp());
396:       assertFalse(node1.isReturn());
397:       assertFalse(node1.isThis());
398:       assertFalse(node1.isBlock());
399:       assertFalse(node1.isScript());
400:       assertFalse(node1.hasOneChild());
401:       assertFalse(node1.isWhile());
402:       assertFalse(node1.isFalse());
403:       assertFalse(node1.isHook());
404:       assertFalse(node1.isContinue());
405:       assertFalse(node1.isIn());
406:       assertFalse(node1.isFunction());
407:       assertFalse(node1.isInc());
408:       assertFalse(node1.isSetterDef());
409:       assertFalse(node2.isSetterDef());
410:       assertFalse(node2.isNull());
411:       assertFalse(node2.isParamList());
412:       assertFalse(node2.isName());
413:       assertFalse(node2.isStringKey());
414:       assertFalse(node2.isFunction());
415:       assertFalse(node2.isDefaultCase());
416:       assertFalse(node2.isDo());
417:       assertFalse(node2.isAdd());
418:       assertFalse(node2.isArrayLit());
419:       assertFalse(node2.isNew());
420:       assertFalse(node2.isVar());
421:       assertFalse(node2.isContinue());
422:       assertEquals(40, node2.getType());
423:       assertEquals(0, node2.getChildCount());
424:       assertFalse(node2.isLabel());
425:       assertFalse(node2.isNE());
426:       assertFalse(node2.isNumber());
427:       assertFalse(node2.isIf());
428:       assertEquals((-1), node2.getLineno());
429:       assertFalse(node2.isLabelName());
430:       assertFalse(node2.isIn());
431:       assertFalse(node2.isGetterDef());
432:       assertFalse(node2.isRegExp());
433:       assertFalse(node2.isScript());
434:       assertTrue(node2.isString());
435:       assertFalse(node2.isTry());
436:       assertFalse(node2.hasOneChild());
437:       assertFalse(node2.isCase());
438:       assertFalse(node2.hasMoreThanOneChild());
439:       assertFalse(node2.isCatch());
440:       assertFalse(node2.isInstanceOf());
441:       assertFalse(node2.isWith());
442:       assertFalse(node2.isBlock());
443:       assertFalse(node2.isFor());
444:       assertFalse(node2.isHook());
445:       assertFalse(node2.isThis());
446:       assertFalse(node2.isComma());
447:       assertFalse(node2.isBreak());
448:       assertFalse(node2.isGetProp());
449:       assertFalse(node2.isObjectLit());
450:       assertFalse(node2.isAnd());
451:       assertFalse(node2.isNot());
452:       assertEquals((-1), node2.getCharno());
453:       assertFalse(node2.isSwitch());
454:       assertFalse(node2.isInc());
455:       assertFalse(node2.isCast());
456:       assertFalse(node2.isFalse());
457:       assertFalse(node2.isThrow());
458:       assertFalse(node2.isTypeOf());
459:       assertFalse(node2.isAssignAdd());
460:       assertFalse(node2.isDelProp());
461:       assertFalse(node2.isEmpty());
462:       assertFalse(node2.isGetElem());
463:       assertFalse(node2.isOr());
464:       assertEquals((-1), node2.getSourcePosition());
465:       assertFalse(node2.isDebugger());
466:       assertFalse(node2.isExprResult());
467:       assertFalse(node2.isTrue());
468:       assertFalse(node2.isVoid());
469:       assertFalse(node2.isWhile());
470:       assertFalse(node2.isCall());
471:       assertFalse(node2.isAssign());
472:       assertFalse(node2.isReturn());
473:       assertFalse(node2.isDec());
474:       assertFalse(node2.hasChildren());
475:       assertFalse(node3.isGetElem());
476:       assertFalse(node3.isAssign());
477:       assertFalse(node3.isLabelName());
478:       assertFalse(node3.hasChildren());
479:       assertFalse(node3.hasOneChild());
480:       assertFalse(node3.isReturn());
481:       assertEquals((-1), node3.getLineno());
482:       assertFalse(node3.isExprResult());
483:       assertFalse(node3.isLabel());
484:       assertFalse(node3.isTypeOf());
485:       assertFalse(node3.isDec());
486:       assertFalse(node3.isCast());
487:       assertFalse(node3.isWith());
488:       assertFalse(node3.isContinue());
489:       assertFalse(node3.hasMoreThanOneChild());
490:       assertFalse(node3.isDo());
491:       assertFalse(node3.isAssignAdd());
492:       assertFalse(node3.isNew());
493:       assertFalse(node3.isOr());
494:       assertFalse(node3.isAdd());
495:       assertFalse(node3.isName());
496:       assertFalse(node3.isFalse());
497:       assertFalse(node3.isThrow());
498:       assertFalse(node3.isCall());
499:       assertFalse(node3.isBreak());
500:       assertFalse(node3.isNull());
501:       assertFalse(node3.isComma());
502:       assertFalse(node3.isObjectLit());
503:       assertFalse(node3.isNot());
504:       assertFalse(node3.isWhile());
505:       assertFalse(node3.isAnd());
506:       assertFalse(node3.isDebugger());
507:       assertFalse(node3.isGetProp());
508:       assertEquals((-1), node3.getSourcePosition());
509:       assertFalse(node3.isFor());
510:       assertFalse(node3.isEmpty());
511:       assertFalse(node3.isArrayLit());
512:       assertFalse(node3.isDelProp());
513:       assertFalse(node3.isNE());
514:       assertFalse(node3.isIf());
515:       assertFalse(node3.isVoid());
516:       assertFalse(node3.isRegExp());
517:       assertFalse(node3.isFunction());
518:       assertEquals(40, node3.getType());
519:       assertFalse(node3.isDefaultCase());
520:       assertFalse(node3.isInc());
521:       assertFalse(node3.isSetterDef());
522:       assertFalse(node3.isTrue());
523:       assertFalse(node3.isIn());
524:       assertFalse(node3.isStringKey());
525:       assertFalse(node3.isHook());
526:       assertFalse(node3.isVar());
527:       assertFalse(node3.isParamList());
528:       assertFalse(node3.isBlock());
529:       assertFalse(node3.isThis());
530:       assertFalse(node3.isInstanceOf());
531:       assertEquals(0, node3.getChildCount());
532:       assertFalse(node3.isCatch());
533:       assertFalse(node3.isCase());
534:       assertFalse(node3.isSwitch());
535:       assertTrue(node3.isString());
536:       assertFalse(node3.isTry());
537:       assertEquals((-1), node3.getCharno());
538:       assertFalse(node3.isNumber());
539:       assertFalse(node3.isGetterDef());
540:       assertFalse(node3.isScript());
541:       assertNotNull(node3);
542:       assertFalse(node1.equals((Object)node0));
543:       assertFalse(node1.equals((Object)node2));
544:       assertFalse(node2.equals((Object)node0));
545:       assertFalse(node2.equals((Object)node1));
546:       assertFalse(node3.equals((Object)node0));
547:       assertFalse(node3.equals((Object)node1));
548:       assertEquals(29, Node.JSDOC_INFO_PROP);
549:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
550:       assertEquals(56, Node.CHANGE_TIME);
551:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
552:       assertEquals(37, Node.OPT_ARG_NAME);
553:       assertEquals(32, Node.INCRDECR_PROP);
554:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
555:       assertEquals(2, Node.POST_FLAG);
556:       assertEquals(12, Node.COLUMN_BITS);
557:       assertEquals(47, Node.IS_DISPATCHER);
558:       assertEquals(49, Node.DIRECT_EVAL);
559:       assertEquals(57, Node.LAST_PROP);
560:       assertEquals(55, Node.INFERRED_FUNCTION);
561:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
562:       assertEquals(15, Node.NO_SIDE_EFFECTS);
563:       assertEquals(52, Node.LENGTH);
564:       assertEquals(53, Node.INPUT_ID);
565:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
566:       assertEquals(8, Node.FLAG_NO_THROWS);
567:       assertEquals(57, Node.REFLECTED_OBJECT);
568:       assertEquals(36, Node.QUOTED_PROP);
569:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
570:       assertEquals(50, Node.FREE_CALL);
571:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
572:       assertEquals(39, Node.EMPTY_BLOCK);
573:       assertEquals(40, Node.ORIGINALNAME_PROP);
574:       assertEquals(48, Node.DIRECTIVES);
575:       assertEquals(4095, Node.COLUMN_MASK);
576:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
577:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
578:       assertEquals(30, Node.VAR_ARGS_NAME);
579:       assertEquals(43, Node.IS_CONSTANT_NAME);
580:       assertEquals(1, Node.DECR_FLAG);
581:       assertEquals(46, Node.IS_NAMESPACE);
582:       assertEquals(54, Node.SLASH_V);
583:       assertEquals(51, Node.STATIC_SOURCE_FILE);
584:       assertEquals(48, Node.DIRECTIVES);
585:       assertEquals(8, Node.FLAG_NO_THROWS);
586:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
587:       assertEquals(4095, Node.COLUMN_MASK);
588:       assertEquals(40, Node.ORIGINALNAME_PROP);
589:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
590:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
591:       assertEquals(43, Node.IS_CONSTANT_NAME);
592:       assertEquals(54, Node.SLASH_V);
593:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
594:       assertEquals(1, Node.DECR_FLAG);
595:       assertEquals(50, Node.FREE_CALL);
596:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
597:       assertEquals(37, Node.OPT_ARG_NAME);
598:       assertEquals(2, Node.POST_FLAG);
599:       assertEquals(32, Node.INCRDECR_PROP);
600:       assertEquals(56, Node.CHANGE_TIME);
601:       assertEquals(47, Node.IS_DISPATCHER);
602:       assertEquals(51, Node.STATIC_SOURCE_FILE);
603:       assertEquals(12, Node.COLUMN_BITS);
604:       assertEquals(46, Node.IS_NAMESPACE);
605:       assertEquals(30, Node.VAR_ARGS_NAME);
606:       assertEquals(49, Node.DIRECT_EVAL);
607:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
608:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
609:       assertEquals(52, Node.LENGTH);
610:       assertEquals(57, Node.LAST_PROP);
611:       assertEquals(57, Node.REFLECTED_OBJECT);
612:       assertEquals(36, Node.QUOTED_PROP);
613:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
614:       assertEquals(15, Node.NO_SIDE_EFFECTS);
615:       assertEquals(55, Node.INFERRED_FUNCTION);
616:       assertEquals(39, Node.EMPTY_BLOCK);
617:       assertEquals(29, Node.JSDOC_INFO_PROP);
618:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
619:       assertEquals(53, Node.INPUT_ID);
620:       assertEquals(47, Node.IS_DISPATCHER);
621:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
622:       assertEquals(56, Node.CHANGE_TIME);
623:       assertEquals(29, Node.JSDOC_INFO_PROP);
624:       assertEquals(2, Node.POST_FLAG);
625:       assertEquals(53, Node.INPUT_ID);
626:       assertEquals(12, Node.COLUMN_BITS);
627:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
628:       assertEquals(32, Node.INCRDECR_PROP);
629:       assertEquals(1, Node.DECR_FLAG);
630:       assertEquals(57, Node.LAST_PROP);
631:       assertEquals(43, Node.IS_CONSTANT_NAME);
632:       assertEquals(51, Node.STATIC_SOURCE_FILE);
633:       assertEquals(30, Node.VAR_ARGS_NAME);
634:       assertEquals(46, Node.IS_NAMESPACE);
635:       assertEquals(54, Node.SLASH_V);
636:       assertEquals(40, Node.ORIGINALNAME_PROP);
637:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
638:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
639:       assertEquals(8, Node.FLAG_NO_THROWS);
640:       assertEquals(50, Node.FREE_CALL);
641:       assertEquals(52, Node.LENGTH);
642:       assertEquals(55, Node.INFERRED_FUNCTION);
643:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
644:       assertEquals(39, Node.EMPTY_BLOCK);
645:       assertEquals(15, Node.NO_SIDE_EFFECTS);
646:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
647:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
648:       assertEquals(4095, Node.COLUMN_MASK);
649:       assertEquals(36, Node.QUOTED_PROP);
650:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
651:       assertEquals(57, Node.REFLECTED_OBJECT);
652:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
653:       assertEquals(37, Node.OPT_ARG_NAME);
654:       assertEquals(48, Node.DIRECTIVES);
655:       assertEquals(49, Node.DIRECT_EVAL);
656:       assertNotSame(node1, node0);
657:       assertSame(node2, node3);
658:       assertSame(node3, node2);
659:       
660:       Iterable<Node> iterable0 = node3.children();
661:       assertFalse(node1.isFor());
662:       assertFalse(node1.isEmpty());
663:       assertFalse(node1.isGetterDef());
664:       assertFalse(node1.isDebugger());
665:       assertFalse(node1.isNE());
666:       assertFalse(node1.isTrue());
667:       assertFalse(node1.isIf());
668:       assertFalse(node1.isArrayLit());
669:       assertFalse(node1.isDelProp());
670:       assertFalse(node1.isVoid());
671:       assertFalse(node1.isCase());
672:       assertFalse(node1.isCatch());
673:       assertFalse(node1.isString());
674:       assertFalse(node1.isRegExp());
675:       assertEquals(49, node1.getType());
676:       assertFalse(node1.isTry());
677:       assertFalse(node1.isStringKey());
678:       assertFalse(node1.isCall());
679:       assertFalse(node1.isVar());
680:       assertTrue(node1.isThrow());
681:       assertFalse(node1.isComma());
682:       assertFalse(node1.isParamList());
683:       assertEquals((-1), node1.getCharno());
684:       assertFalse(node1.isNull());
685:       assertFalse(node1.isBreak());
686:       assertFalse(node1.isSwitch());
687:       assertFalse(node1.isName());
688:       assertEquals(0, node1.getChildCount());
689:       assertFalse(node1.isOr());
690:       assertFalse(node1.isNew());
691:       assertFalse(node1.isLabel());
692:       assertFalse(node1.isAssignAdd());
693:       assertFalse(node1.isAdd());
694:       assertFalse(node1.isDefaultCase());
695:       assertFalse(node1.isDo());
696:       assertFalse(node1.isGetElem());
697:       assertFalse(node1.isCast());
698:       assertFalse(node1.isNumber());
699:       assertFalse(node1.isDec());
700:       assertFalse(node1.hasChildren());
701:       assertEquals((-1), node1.getSourcePosition());
702:       assertFalse(node1.isAssign());
703:       assertFalse(node1.isTypeOf());
704:       assertFalse(node1.isExprResult());
705:       assertEquals((-1), node1.getLineno());
706:       assertFalse(node1.isLabelName());
707:       assertFalse(node1.isAnd());
708:       assertFalse(node1.isInstanceOf());
709:       assertFalse(node1.hasMoreThanOneChild());
710:       assertFalse(node1.isWith());
711:       assertFalse(node1.isObjectLit());
712:       assertFalse(node1.isNot());
713:       assertFalse(node1.isGetProp());
714:       assertFalse(node1.isReturn());
715:       assertFalse(node1.isThis());
716:       assertFalse(node1.isBlock());
717:       assertFalse(node1.isScript());
718:       assertFalse(node1.hasOneChild());
719:       assertFalse(node1.isWhile());
720:       assertFalse(node1.isFalse());
721:       assertFalse(node1.isHook());
722:       assertFalse(node1.isContinue());
723:       assertFalse(node1.isIn());
724:       assertFalse(node1.isFunction());
725:       assertFalse(node1.isInc());
726:       assertFalse(node1.isSetterDef());
727:       assertFalse(node2.isSetterDef());
728:       assertFalse(node2.isNull());
729:       assertFalse(node2.isParamList());
730:       assertFalse(node2.isName());
731:       assertFalse(node2.isStringKey());
732:       assertFalse(node2.isFunction());
733:       assertFalse(node2.isDefaultCase());
734:       assertFalse(node2.isDo());
735:       assertFalse(node2.isAdd());
736:       assertFalse(node2.isArrayLit());
737:       assertFalse(node2.isNew());
738:       assertFalse(node2.isVar());
739:       assertFalse(node2.isContinue());
740:       assertEquals(40, node2.getType());
741:       assertEquals(0, node2.getChildCount());
742:       assertFalse(node2.isLabel());
743:       assertFalse(node2.isNE());
744:       assertFalse(node2.isNumber());
745:       assertFalse(node2.isIf());
746:       assertEquals((-1), node2.getLineno());
747:       assertFalse(node2.isLabelName());
748:       assertFalse(node2.isIn());
749:       assertFalse(node2.isGetterDef());
750:       assertFalse(node2.isRegExp());
751:       assertFalse(node2.isScript());
752:       assertTrue(node2.isString());
753:       assertFalse(node2.isTry());
754:       assertFalse(node2.hasOneChild());
755:       assertFalse(node2.isCase());
756:       assertFalse(node2.hasMoreThanOneChild());
757:       assertFalse(node2.isCatch());
758:       assertFalse(node2.isInstanceOf());
759:       assertFalse(node2.isWith());
760:       assertFalse(node2.isBlock());
761:       assertFalse(node2.isFor());
762:       assertFalse(node2.isHook());
763:       assertFalse(node2.isThis());
764:       assertFalse(node2.isComma());
765:       assertFalse(node2.isBreak());
766:       assertFalse(node2.isGetProp());
767:       assertFalse(node2.isObjectLit());
768:       assertFalse(node2.isAnd());
769:       assertFalse(node2.isNot());
770:       assertEquals((-1), node2.getCharno());
771:       assertFalse(node2.isSwitch());
772:       assertFalse(node2.isInc());
773:       assertFalse(node2.isCast());
774:       assertFalse(node2.isFalse());
775:       assertFalse(node2.isThrow());
776:       assertFalse(node2.isTypeOf());
777:       assertFalse(node2.isAssignAdd());
778:       assertFalse(node2.isDelProp());
779:       assertFalse(node2.isEmpty());
780:       assertFalse(node2.isGetElem());
781:       assertFalse(node2.isOr());
782:       assertEquals((-1), node2.getSourcePosition());
783:       assertFalse(node2.isDebugger());
784:       assertFalse(node2.isExprResult());
785:       assertFalse(node2.isTrue());
786:       assertFalse(node2.isVoid());
787:       assertFalse(node2.isWhile());
788:       assertFalse(node2.isCall());
789:       assertFalse(node2.isAssign());
790:       assertFalse(node2.isReturn());
791:       assertFalse(node2.isDec());
792:       assertFalse(node2.hasChildren());
793:       assertFalse(node3.isGetElem());
794:       assertFalse(node3.isAssign());
795:       assertFalse(node3.isLabelName());
796:       assertFalse(node3.hasChildren());
797:       assertFalse(node3.hasOneChild());
798:       assertFalse(node3.isReturn());
799:       assertEquals((-1), node3.getLineno());
800:       assertFalse(node3.isExprResult());
801:       assertFalse(node3.isLabel());
802:       assertFalse(node3.isTypeOf());
803:       assertFalse(node3.isDec());
804:       assertFalse(node3.isCast());
805:       assertFalse(node3.isWith());
806:       assertFalse(node3.isContinue());
807:       assertFalse(node3.hasMoreThanOneChild());
808:       assertFalse(node3.isDo());
809:       assertFalse(node3.isAssignAdd());
810:       assertFalse(node3.isNew());
811:       assertFalse(node3.isOr());
812:       assertFalse(node3.isAdd());
813:       assertFalse(node3.isName());
814:       assertFalse(node3.isFalse());
815:       assertFalse(node3.isThrow());
816:       assertFalse(node3.isCall());
817:       assertFalse(node3.isBreak());
818:       assertFalse(node3.isNull());
819:       assertFalse(node3.isComma());
820:       assertFalse(node3.isObjectLit());
821:       assertFalse(node3.isNot());
822:       assertFalse(node3.isWhile());
823:       assertFalse(node3.isAnd());
824:       assertFalse(node3.isDebugger());
825:       assertFalse(node3.isGetProp());
826:       assertEquals((-1), node3.getSourcePosition());
827:       assertFalse(node3.isFor());
828:       assertFalse(node3.isEmpty());
829:       assertFalse(node3.isArrayLit());
830:       assertFalse(node3.isDelProp());
831:       assertFalse(node3.isNE());
832:       assertFalse(node3.isIf());
833:       assertFalse(node3.isVoid());
834:       assertFalse(node3.isRegExp());
835:       assertFalse(node3.isFunction());
836:       assertEquals(40, node3.getType());
837:       assertFalse(node3.isDefaultCase());
838:       assertFalse(node3.isInc());
839:       assertFalse(node3.isSetterDef());
840:       assertFalse(node3.isTrue());
841:       assertFalse(node3.isIn());
842:       assertFalse(node3.isStringKey());
843:       assertFalse(node3.isHook());
844:       assertFalse(node3.isVar());
845:       assertFalse(node3.isParamList());
846:       assertFalse(node3.isBlock());
847:       assertFalse(node3.isThis());
848:       assertFalse(node3.isInstanceOf());
849:       assertEquals(0, node3.getChildCount());
850:       assertFalse(node3.isCatch());
851:       assertFalse(node3.isCase());
852:       assertFalse(node3.isSwitch());
853:       assertTrue(node3.isString());
854:       assertFalse(node3.isTry());
855:       assertEquals((-1), node3.getCharno());
856:       assertFalse(node3.isNumber());
857:       assertFalse(node3.isGetterDef());
858:       assertFalse(node3.isScript());
859:       assertNotNull(iterable0);
860:       assertFalse(iterable0.contains(node1));
861:       assertFalse(node1.equals((Object)node3));
862:       assertFalse(node1.equals((Object)node0));
863:       assertFalse(node1.equals((Object)node2));
864:       assertFalse(node2.equals((Object)node0));
865:       assertFalse(node2.equals((Object)node1));
866:       assertFalse(node3.equals((Object)node0));
867:       assertFalse(node3.equals((Object)node1));
868:       assertEquals(29, Node.JSDOC_INFO_PROP);
869:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
870:       assertEquals(56, Node.CHANGE_TIME);
871:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
872:       assertEquals(37, Node.OPT_ARG_NAME);
873:       assertEquals(32, Node.INCRDECR_PROP);
874:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
875:       assertEquals(2, Node.POST_FLAG);
876:       assertEquals(12, Node.COLUMN_BITS);
877:       assertEquals(47, Node.IS_DISPATCHER);
878:       assertEquals(49, Node.DIRECT_EVAL);
879:       assertEquals(57, Node.LAST_PROP);
880:       assertEquals(55, Node.INFERRED_FUNCTION);
881:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
882:       assertEquals(15, Node.NO_SIDE_EFFECTS);
883:       assertEquals(52, Node.LENGTH);
884:       assertEquals(53, Node.INPUT_ID);
885:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
886:       assertEquals(8, Node.FLAG_NO_THROWS);
887:       assertEquals(57, Node.REFLECTED_OBJECT);
888:       assertEquals(36, Node.QUOTED_PROP);
889:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
890:       assertEquals(50, Node.FREE_CALL);
891:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
892:       assertEquals(39, Node.EMPTY_BLOCK);
893:       assertEquals(40, Node.ORIGINALNAME_PROP);
894:       assertEquals(48, Node.DIRECTIVES);
895:       assertEquals(4095, Node.COLUMN_MASK);
896:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
897:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
898:       assertEquals(30, Node.VAR_ARGS_NAME);
899:       assertEquals(43, Node.IS_CONSTANT_NAME);
900:       assertEquals(1, Node.DECR_FLAG);
901:       assertEquals(46, Node.IS_NAMESPACE);
902:       assertEquals(54, Node.SLASH_V);
903:       assertEquals(51, Node.STATIC_SOURCE_FILE);
904:       assertEquals(48, Node.DIRECTIVES);
905:       assertEquals(8, Node.FLAG_NO_THROWS);
906:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
907:       assertEquals(4095, Node.COLUMN_MASK);
908:       assertEquals(40, Node.ORIGINALNAME_PROP);
909:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
910:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
911:       assertEquals(43, Node.IS_CONSTANT_NAME);
912:       assertEquals(54, Node.SLASH_V);
913:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
914:       assertEquals(1, Node.DECR_FLAG);
915:       assertEquals(50, Node.FREE_CALL);
916:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
917:       assertEquals(37, Node.OPT_ARG_NAME);
918:       assertEquals(2, Node.POST_FLAG);
919:       assertEquals(32, Node.INCRDECR_PROP);
920:       assertEquals(56, Node.CHANGE_TIME);
921:       assertEquals(47, Node.IS_DISPATCHER);
922:       assertEquals(51, Node.STATIC_SOURCE_FILE);
923:       assertEquals(12, Node.COLUMN_BITS);
924:       assertEquals(46, Node.IS_NAMESPACE);
925:       assertEquals(30, Node.VAR_ARGS_NAME);
926:       assertEquals(49, Node.DIRECT_EVAL);
927:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
928:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
929:       assertEquals(52, Node.LENGTH);
930:       assertEquals(57, Node.LAST_PROP);
931:       assertEquals(57, Node.REFLECTED_OBJECT);
932:       assertEquals(36, Node.QUOTED_PROP);
933:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
934:       assertEquals(15, Node.NO_SIDE_EFFECTS);
935:       assertEquals(55, Node.INFERRED_FUNCTION);
936:       assertEquals(39, Node.EMPTY_BLOCK);
937:       assertEquals(29, Node.JSDOC_INFO_PROP);
938:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
939:       assertEquals(53, Node.INPUT_ID);
940:       assertEquals(47, Node.IS_DISPATCHER);
941:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
942:       assertEquals(56, Node.CHANGE_TIME);
943:       assertEquals(29, Node.JSDOC_INFO_PROP);
944:       assertEquals(2, Node.POST_FLAG);
945:       assertEquals(53, Node.INPUT_ID);
946:       assertEquals(12, Node.COLUMN_BITS);
947:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
948:       assertEquals(32, Node.INCRDECR_PROP);
949:       assertEquals(1, Node.DECR_FLAG);
950:       assertEquals(57, Node.LAST_PROP);
951:       assertEquals(43, Node.IS_CONSTANT_NAME);
952:       assertEquals(51, Node.STATIC_SOURCE_FILE);
953:       assertEquals(30, Node.VAR_ARGS_NAME);
954:       assertEquals(46, Node.IS_NAMESPACE);
955:       assertEquals(54, Node.SLASH_V);
956:       assertEquals(40, Node.ORIGINALNAME_PROP);
957:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
958:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
959:       assertEquals(8, Node.FLAG_NO_THROWS);
960:       assertEquals(50, Node.FREE_CALL);
961:       assertEquals(52, Node.LENGTH);
962:       assertEquals(55, Node.INFERRED_FUNCTION);
963:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
964:       assertEquals(39, Node.EMPTY_BLOCK);
965:       assertEquals(15, Node.NO_SIDE_EFFECTS);
966:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
967:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
968:       assertEquals(4095, Node.COLUMN_MASK);
969:       assertEquals(36, Node.QUOTED_PROP);
970:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
971:       assertEquals(57, Node.REFLECTED_OBJECT);
972:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
973:       assertEquals(37, Node.OPT_ARG_NAME);
974:       assertEquals(48, Node.DIRECTIVES);
975:       assertEquals(49, Node.DIRECT_EVAL);
976:       assertNotSame(node1, node0);
977:       assertSame(node2, node3);
978:       assertSame(node3, node2);
979:       
980:       boolean boolean0 = node1.isGetProp();
981:       assertFalse(node1.isFor());
982:       assertFalse(node1.isEmpty());
983:       assertFalse(node1.isGetterDef());
984:       assertFalse(node1.isDebugger());
985:       assertFalse(node1.isNE());
986:       assertFalse(node1.isTrue());
987:       assertFalse(node1.isIf());
988:       assertFalse(node1.isArrayLit());
989:       assertFalse(node1.isDelProp());
990:       assertFalse(node1.isVoid());
991:       assertFalse(node1.isCase());
992:       assertFalse(node1.isCatch());
993:       assertFalse(node1.isString());
994:       assertFalse(node1.isRegExp());
995:       assertEquals(49, node1.getType());
996:       assertFalse(node1.isTry());
997:       assertFalse(node1.isStringKey());
998:       assertFalse(node1.isCall());
999:       assertFalse(node1.isVar());
1000:       assertTrue(node1.isThrow());
1001:       assertFalse(node1.isComma());
1002:       assertFalse(node1.isParamList());
1003:       assertEquals((-1), node1.getCharno());
1004:       assertFalse(node1.isNull());
1005:       assertFalse(node1.isBreak());
1006:       assertFalse(node1.isSwitch());
1007:       assertFalse(node1.isName());
1008:       assertEquals(0, node1.getChildCount());
1009:       assertFalse(node1.isOr());
1010:       assertFalse(node1.isNew());
1011:       assertFalse(node1.isLabel());
1012:       assertFalse(node1.isAssignAdd());
1013:       assertFalse(node1.isAdd());
1014:       assertFalse(node1.isDefaultCase());
1015:       assertFalse(node1.isDo());
1016:       assertFalse(node1.isGetElem());
1017:       assertFalse(node1.isCast());
1018:       assertFalse(node1.isNumber());
1019:       assertFalse(node1.isDec());
1020:       assertFalse(node1.hasChildren());
1021:       assertEquals((-1), node1.getSourcePosition());
1022:       assertFalse(node1.isAssign());
1023:       assertFalse(node1.isTypeOf());
1024:       assertFalse(node1.isExprResult());
1025:       assertEquals((-1), node1.getLineno());
1026:       assertFalse(node1.isLabelName());
1027:       assertFalse(node1.isAnd());
1028:       assertFalse(node1.isInstanceOf());
1029:       assertFalse(node1.hasMoreThanOneChild());
1030:       assertFalse(node1.isWith());
1031:       assertFalse(node1.isObjectLit());
1032:       assertFalse(node1.isNot());
1033:       assertFalse(node1.isGetProp());
1034:       assertFalse(node1.isReturn());
1035:       assertFalse(node1.isThis());
1036:       assertFalse(node1.isBlock());
1037:       assertFalse(node1.isScript());
1038:       assertFalse(node1.hasOneChild());
1039:       assertFalse(node1.isWhile());
1040:       assertFalse(node1.isFalse());
1041:       assertFalse(node1.isHook());
1042:       assertFalse(node1.isContinue());
1043:       assertFalse(node1.isIn());
1044:       assertFalse(node1.isFunction());
1045:       assertFalse(node1.isInc());
1046:       assertFalse(node1.isSetterDef());
1047:       assertFalse(boolean0);
1048:       assertFalse(node1.equals((Object)node3));
1049:       assertFalse(node1.equals((Object)node0));
1050:       assertFalse(node1.equals((Object)node2));
1051:       assertEquals(29, Node.JSDOC_INFO_PROP);
1052:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1053:       assertEquals(56, Node.CHANGE_TIME);
1054:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1055:       assertEquals(37, Node.OPT_ARG_NAME);
1056:       assertEquals(32, Node.INCRDECR_PROP);
1057:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1058:       assertEquals(2, Node.POST_FLAG);
1059:       assertEquals(12, Node.COLUMN_BITS);
1060:       assertEquals(47, Node.IS_DISPATCHER);
1061:       assertEquals(49, Node.DIRECT_EVAL);
1062:       assertEquals(57, Node.LAST_PROP);
1063:       assertEquals(55, Node.INFERRED_FUNCTION);
1064:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1065:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1066:       assertEquals(52, Node.LENGTH);
1067:       assertEquals(53, Node.INPUT_ID);
1068:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1069:       assertEquals(8, Node.FLAG_NO_THROWS);
1070:       assertEquals(57, Node.REFLECTED_OBJECT);
1071:       assertEquals(36, Node.QUOTED_PROP);
1072:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1073:       assertEquals(50, Node.FREE_CALL);
1074:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1075:       assertEquals(39, Node.EMPTY_BLOCK);
1076:       assertEquals(40, Node.ORIGINALNAME_PROP);
1077:       assertEquals(48, Node.DIRECTIVES);
1078:       assertEquals(4095, Node.COLUMN_MASK);
1079:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1080:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1081:       assertEquals(30, Node.VAR_ARGS_NAME);
1082:       assertEquals(43, Node.IS_CONSTANT_NAME);
1083:       assertEquals(1, Node.DECR_FLAG);
1084:       assertEquals(46, Node.IS_NAMESPACE);
1085:       assertEquals(54, Node.SLASH_V);
1086:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1087:       assertNotSame(node1, node0);
1088:       
1089:       boolean boolean1 = node3.hasChildren();
1090:       assertFalse(node1.isFor());
1091:       assertFalse(node1.isEmpty());
1092:       assertFalse(node1.isGetterDef());
1093:       assertFalse(node1.isDebugger());
1094:       assertFalse(node1.isNE());
1095:       assertFalse(node1.isTrue());
1096:       assertFalse(node1.isIf());
1097:       assertFalse(node1.isArrayLit());
1098:       assertFalse(node1.isDelProp());
1099:       assertFalse(node1.isVoid());
1100:       assertFalse(node1.isCase());
1101:       assertFalse(node1.isCatch());
1102:       assertFalse(node1.isString());
1103:       assertFalse(node1.isRegExp());
1104:       assertEquals(49, node1.getType());
1105:       assertFalse(node1.isTry());
1106:       assertFalse(node1.isStringKey());
1107:       assertFalse(node1.isCall());
1108:       assertFalse(node1.isVar());
1109:       assertTrue(node1.isThrow());
1110:       assertFalse(node1.isComma());
1111:       assertFalse(node1.isParamList());
1112:       assertEquals((-1), node1.getCharno());
1113:       assertFalse(node1.isNull());
1114:       assertFalse(node1.isBreak());
1115:       assertFalse(node1.isSwitch());
1116:       assertFalse(node1.isName());
1117:       assertEquals(0, node1.getChildCount());
1118:       assertFalse(node1.isOr());
1119:       assertFalse(node1.isNew());
1120:       assertFalse(node1.isLabel());
1121:       assertFalse(node1.isAssignAdd());
1122:       assertFalse(node1.isAdd());
1123:       assertFalse(node1.isDefaultCase());
1124:       assertFalse(node1.isDo());
1125:       assertFalse(node1.isGetElem());
1126:       assertFalse(node1.isCast());
1127:       assertFalse(node1.isNumber());
1128:       assertFalse(node1.isDec());
1129:       assertFalse(node1.hasChildren());
1130:       assertEquals((-1), node1.getSourcePosition());
1131:       assertFalse(node1.isAssign());
1132:       assertFalse(node1.isTypeOf());
1133:       assertFalse(node1.isExprResult());
1134:       assertEquals((-1), node1.getLineno());
1135:       assertFalse(node1.isLabelName());
1136:       assertFalse(node1.isAnd());
1137:       assertFalse(node1.isInstanceOf());
1138:       assertFalse(node1.hasMoreThanOneChild());
1139:       assertFalse(node1.isWith());
1140:       assertFalse(node1.isObjectLit());
1141:       assertFalse(node1.isNot());
1142:       assertFalse(node1.isGetProp());
1143:       assertFalse(node1.isReturn());
1144:       assertFalse(node1.isThis());
1145:       assertFalse(node1.isBlock());
1146:       assertFalse(node1.isScript());
1147:       assertFalse(node1.hasOneChild());
1148:       assertFalse(node1.isWhile());
1149:       assertFalse(node1.isFalse());
1150:       assertFalse(node1.isHook());
1151:       assertFalse(node1.isContinue());
1152:       assertFalse(node1.isIn());
1153:       assertFalse(node1.isFunction());
1154:       assertFalse(node1.isInc());
1155:       assertFalse(node1.isSetterDef());
1156:       assertFalse(node2.isSetterDef());
1157:       assertFalse(node2.isNull());
1158:       assertFalse(node2.isParamList());
1159:       assertFalse(node2.isName());
1160:       assertFalse(node2.isStringKey());
1161:       assertFalse(node2.isFunction());
1162:       assertFalse(node2.isDefaultCase());
1163:       assertFalse(node2.isDo());
1164:       assertFalse(node2.isAdd());
1165:       assertFalse(node2.isArrayLit());
1166:       assertFalse(node2.isNew());
1167:       assertFalse(node2.isVar());
1168:       assertFalse(node2.isContinue());
1169:       assertEquals(40, node2.getType());
1170:       assertEquals(0, node2.getChildCount());
1171:       assertFalse(node2.isLabel());
1172:       assertFalse(node2.isNE());
1173:       assertFalse(node2.isNumber());
1174:       assertFalse(node2.isIf());
1175:       assertEquals((-1), node2.getLineno());
1176:       assertFalse(node2.isLabelName());
1177:       assertFalse(node2.isIn());
1178:       assertFalse(node2.isGetterDef());
1179:       assertFalse(node2.isRegExp());
1180:       assertFalse(node2.isScript());
1181:       assertTrue(node2.isString());
1182:       assertFalse(node2.isTry());
1183:       assertFalse(node2.hasOneChild());
1184:       assertFalse(node2.isCase());
1185:       assertFalse(node2.hasMoreThanOneChild());
1186:       assertFalse(node2.isCatch());
1187:       assertFalse(node2.isInstanceOf());
1188:       assertFalse(node2.isWith());
1189:       assertFalse(node2.isBlock());
1190:       assertFalse(node2.isFor());
1191:       assertFalse(node2.isHook());
1192:       assertFalse(node2.isThis());
1193:       assertFalse(node2.isComma());
1194:       assertFalse(node2.isBreak());
1195:       assertFalse(node2.isGetProp());
1196:       assertFalse(node2.isObjectLit());
1197:       assertFalse(node2.isAnd());
1198:       assertFalse(node2.isNot());
1199:       assertEquals((-1), node2.getCharno());
1200:       assertFalse(node2.isSwitch());
1201:       assertFalse(node2.isInc());
1202:       assertFalse(node2.isCast());
1203:       assertFalse(node2.isFalse());
1204:       assertFalse(node2.isThrow());
1205:       assertFalse(node2.isTypeOf());
1206:       assertFalse(node2.isAssignAdd());
1207:       assertFalse(node2.isDelProp());
1208:       assertFalse(node2.isEmpty());
1209:       assertFalse(node2.isGetElem());
1210:       assertFalse(node2.isOr());
1211:       assertEquals((-1), node2.getSourcePosition());
1212:       assertFalse(node2.isDebugger());
1213:       assertFalse(node2.isExprResult());
1214:       assertFalse(node2.isTrue());
1215:       assertFalse(node2.isVoid());
1216:       assertFalse(node2.isWhile());
1217:       assertFalse(node2.isCall());
1218:       assertFalse(node2.isAssign());
1219:       assertFalse(node2.isReturn());
1220:       assertFalse(node2.isDec());
1221:       assertFalse(node2.hasChildren());
1222:       assertFalse(node3.isGetElem());
1223:       assertFalse(node3.isAssign());
1224:       assertFalse(node3.isLabelName());
1225:       assertFalse(node3.hasChildren());
1226:       assertFalse(node3.hasOneChild());
1227:       assertFalse(node3.isReturn());
1228:       assertEquals((-1), node3.getLineno());
1229:       assertFalse(node3.isExprResult());
1230:       assertFalse(node3.isLabel());
1231:       assertFalse(node3.isTypeOf());
1232:       assertFalse(node3.isDec());
1233:       assertFalse(node3.isCast());
1234:       assertFalse(node3.isWith());
1235:       assertFalse(node3.isContinue());
1236:       assertFalse(node3.hasMoreThanOneChild());
1237:       assertFalse(node3.isDo());
1238:       assertFalse(node3.isAssignAdd());
1239:       assertFalse(node3.isNew());
1240:       assertFalse(node3.isOr());
1241:       assertFalse(node3.isAdd());
1242:       assertFalse(node3.isName());
1243:       assertFalse(node3.isFalse());
1244:       assertFalse(node3.isThrow());
1245:       assertFalse(node3.isCall());
1246:       assertFalse(node3.isBreak());
1247:       assertFalse(node3.isNull());
1248:       assertFalse(node3.isComma());
1249:       assertFalse(node3.isObjectLit());
1250:       assertFalse(node3.isNot());
1251:       assertFalse(node3.isWhile());
1252:       assertFalse(node3.isAnd());
1253:       assertFalse(node3.isDebugger());
1254:       assertFalse(node3.isGetProp());
1255:       assertEquals((-1), node3.getSourcePosition());
1256:       assertFalse(node3.isFor());
1257:       assertFalse(node3.isEmpty());
1258:       assertFalse(node3.isArrayLit());
1259:       assertFalse(node3.isDelProp());
1260:       assertFalse(node3.isNE());
1261:       assertFalse(node3.isIf());
1262:       assertFalse(node3.isVoid());
1263:       assertFalse(node3.isRegExp());
1264:       assertFalse(node3.isFunction());
1265:       assertEquals(40, node3.getType());
1266:       assertFalse(node3.isDefaultCase());
1267:       assertFalse(node3.isInc());
1268:       assertFalse(node3.isSetterDef());
1269:       assertFalse(node3.isTrue());
1270:       assertFalse(node3.isIn());
1271:       assertFalse(node3.isStringKey());
1272:       assertFalse(node3.isHook());
1273:       assertFalse(node3.isVar());
1274:       assertFalse(node3.isParamList());
1275:       assertFalse(node3.isBlock());
1276:       assertFalse(node3.isThis());
1277:       assertFalse(node3.isInstanceOf());
1278:       assertEquals(0, node3.getChildCount());
1279:       assertFalse(node3.isCatch());
1280:       assertFalse(node3.isCase());
1281:       assertFalse(node3.isSwitch());
1282:       assertTrue(node3.isString());
1283:       assertFalse(node3.isTry());
1284:       assertEquals((-1), node3.getCharno());
1285:       assertFalse(node3.isNumber());
1286:       assertFalse(node3.isGetterDef());
1287:       assertFalse(node3.isScript());
1288:       assertFalse(boolean1);
1289:       assertFalse(node1.equals((Object)node3));
1290:       assertFalse(node1.equals((Object)node0));
1291:       assertFalse(node1.equals((Object)node2));
1292:       assertFalse(node2.equals((Object)node0));
1293:       assertFalse(node2.equals((Object)node1));
1294:       assertFalse(node3.equals((Object)node0));
1295:       assertFalse(node3.equals((Object)node1));
1296:       assertTrue(boolean1 == boolean0);
1297:       assertEquals(29, Node.JSDOC_INFO_PROP);
1298:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1299:       assertEquals(56, Node.CHANGE_TIME);
1300:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1301:       assertEquals(37, Node.OPT_ARG_NAME);
1302:       assertEquals(32, Node.INCRDECR_PROP);
1303:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1304:       assertEquals(2, Node.POST_FLAG);
1305:       assertEquals(12, Node.COLUMN_BITS);
1306:       assertEquals(47, Node.IS_DISPATCHER);
1307:       assertEquals(49, Node.DIRECT_EVAL);
1308:       assertEquals(57, Node.LAST_PROP);
1309:       assertEquals(55, Node.INFERRED_FUNCTION);
1310:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1311:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1312:       assertEquals(52, Node.LENGTH);
1313:       assertEquals(53, Node.INPUT_ID);
1314:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1315:       assertEquals(8, Node.FLAG_NO_THROWS);
1316:       assertEquals(57, Node.REFLECTED_OBJECT);
1317:       assertEquals(36, Node.QUOTED_PROP);
1318:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1319:       assertEquals(50, Node.FREE_CALL);
1320:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1321:       assertEquals(39, Node.EMPTY_BLOCK);
1322:       assertEquals(40, Node.ORIGINALNAME_PROP);
1323:       assertEquals(48, Node.DIRECTIVES);
1324:       assertEquals(4095, Node.COLUMN_MASK);
1325:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1326:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1327:       assertEquals(30, Node.VAR_ARGS_NAME);
1328:       assertEquals(43, Node.IS_CONSTANT_NAME);
1329:       assertEquals(1, Node.DECR_FLAG);
1330:       assertEquals(46, Node.IS_NAMESPACE);
1331:       assertEquals(54, Node.SLASH_V);
1332:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1333:       assertEquals(48, Node.DIRECTIVES);
1334:       assertEquals(8, Node.FLAG_NO_THROWS);
1335:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1336:       assertEquals(4095, Node.COLUMN_MASK);
1337:       assertEquals(40, Node.ORIGINALNAME_PROP);
1338:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1339:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1340:       assertEquals(43, Node.IS_CONSTANT_NAME);
1341:       assertEquals(54, Node.SLASH_V);
1342:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1343:       assertEquals(1, Node.DECR_FLAG);
1344:       assertEquals(50, Node.FREE_CALL);
1345:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1346:       assertEquals(37, Node.OPT_ARG_NAME);
1347:       assertEquals(2, Node.POST_FLAG);
1348:       assertEquals(32, Node.INCRDECR_PROP);
1349:       assertEquals(56, Node.CHANGE_TIME);
1350:       assertEquals(47, Node.IS_DISPATCHER);
1351:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1352:       assertEquals(12, Node.COLUMN_BITS);
1353:       assertEquals(46, Node.IS_NAMESPACE);
1354:       assertEquals(30, Node.VAR_ARGS_NAME);
1355:       assertEquals(49, Node.DIRECT_EVAL);
1356:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1357:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1358:       assertEquals(52, Node.LENGTH);
1359:       assertEquals(57, Node.LAST_PROP);
1360:       assertEquals(57, Node.REFLECTED_OBJECT);
1361:       assertEquals(36, Node.QUOTED_PROP);
1362:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1363:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1364:       assertEquals(55, Node.INFERRED_FUNCTION);
1365:       assertEquals(39, Node.EMPTY_BLOCK);
1366:       assertEquals(29, Node.JSDOC_INFO_PROP);
1367:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1368:       assertEquals(53, Node.INPUT_ID);
1369:       assertEquals(47, Node.IS_DISPATCHER);
1370:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1371:       assertEquals(56, Node.CHANGE_TIME);
1372:       assertEquals(29, Node.JSDOC_INFO_PROP);
1373:       assertEquals(2, Node.POST_FLAG);
1374:       assertEquals(53, Node.INPUT_ID);
1375:       assertEquals(12, Node.COLUMN_BITS);
1376:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1377:       assertEquals(32, Node.INCRDECR_PROP);
1378:       assertEquals(1, Node.DECR_FLAG);
1379:       assertEquals(57, Node.LAST_PROP);
1380:       assertEquals(43, Node.IS_CONSTANT_NAME);
1381:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1382:       assertEquals(30, Node.VAR_ARGS_NAME);
1383:       assertEquals(46, Node.IS_NAMESPACE);
1384:       assertEquals(54, Node.SLASH_V);
1385:       assertEquals(40, Node.ORIGINALNAME_PROP);
1386:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1387:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1388:       assertEquals(8, Node.FLAG_NO_THROWS);
1389:       assertEquals(50, Node.FREE_CALL);
1390:       assertEquals(52, Node.LENGTH);
1391:       assertEquals(55, Node.INFERRED_FUNCTION);
1392:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1393:       assertEquals(39, Node.EMPTY_BLOCK);
1394:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1395:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1396:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1397:       assertEquals(4095, Node.COLUMN_MASK);
1398:       assertEquals(36, Node.QUOTED_PROP);
1399:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1400:       assertEquals(57, Node.REFLECTED_OBJECT);
1401:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1402:       assertEquals(37, Node.OPT_ARG_NAME);
1403:       assertEquals(48, Node.DIRECTIVES);
1404:       assertEquals(49, Node.DIRECT_EVAL);
1405:       assertNotSame(node1, node0);
1406:       assertSame(node2, node3);
1407:       assertSame(node3, node2);
1408:       
1409:       boolean boolean2 = node2.isSwitch();
1410:       assertFalse(node2.isSetterDef());
1411:       assertFalse(node2.isNull());
1412:       assertFalse(node2.isParamList());
1413:       assertFalse(node2.isName());
1414:       assertFalse(node2.isStringKey());
1415:       assertFalse(node2.isFunction());
1416:       assertFalse(node2.isDefaultCase());
1417:       assertFalse(node2.isDo());
1418:       assertFalse(node2.isAdd());
1419:       assertFalse(node2.isArrayLit());
1420:       assertFalse(node2.isNew());
1421:       assertFalse(node2.isVar());
1422:       assertFalse(node2.isContinue());
1423:       assertEquals(40, node2.getType());
1424:       assertEquals(0, node2.getChildCount());
1425:       assertFalse(node2.isLabel());
1426:       assertFalse(node2.isNE());
1427:       assertFalse(node2.isNumber());
1428:       assertFalse(node2.isIf());
1429:       assertEquals((-1), node2.getLineno());
1430:       assertFalse(node2.isLabelName());
1431:       assertFalse(node2.isIn());
1432:       assertFalse(node2.isGetterDef());
1433:       assertFalse(node2.isRegExp());
1434:       assertFalse(node2.isScript());
1435:       assertTrue(node2.isString());
1436:       assertFalse(node2.isTry());
1437:       assertFalse(node2.hasOneChild());
1438:       assertFalse(node2.isCase());
1439:       assertFalse(node2.hasMoreThanOneChild());
1440:       assertFalse(node2.isCatch());
1441:       assertFalse(node2.isInstanceOf());
1442:       assertFalse(node2.isWith());
1443:       assertFalse(node2.isBlock());
1444:       assertFalse(node2.isFor());
1445:       assertFalse(node2.isHook());
1446:       assertFalse(node2.isThis());
1447:       assertFalse(node2.isComma());
1448:       assertFalse(node2.isBreak());
1449:       assertFalse(node2.isGetProp());
1450:       assertFalse(node2.isObjectLit());
1451:       assertFalse(node2.isAnd());
1452:       assertFalse(node2.isNot());
1453:       assertEquals((-1), node2.getCharno());
1454:       assertFalse(node2.isSwitch());
1455:       assertFalse(node2.isInc());
1456:       assertFalse(node2.isCast());
1457:       assertFalse(node2.isFalse());
1458:       assertFalse(node2.isThrow());
1459:       assertFalse(node2.isTypeOf());
1460:       assertFalse(node2.isAssignAdd());
1461:       assertFalse(node2.isDelProp());
1462:       assertFalse(node2.isEmpty());
1463:       assertFalse(node2.isGetElem());
1464:       assertFalse(node2.isOr());
1465:       assertEquals((-1), node2.getSourcePosition());
1466:       assertFalse(node2.isDebugger());
1467:       assertFalse(node2.isExprResult());
1468:       assertFalse(node2.isTrue());
1469:       assertFalse(node2.isVoid());
1470:       assertFalse(node2.isWhile());
1471:       assertFalse(node2.isCall());
1472:       assertFalse(node2.isAssign());
1473:       assertFalse(node2.isReturn());
1474:       assertFalse(node2.isDec());
1475:       assertFalse(node2.hasChildren());
1476:       assertFalse(boolean2);
1477:       assertFalse(node2.equals((Object)node0));
1478:       assertFalse(node2.equals((Object)node1));
1479:       assertTrue(boolean2 == boolean0);
1480:       assertTrue(boolean2 == boolean1);
1481:       assertEquals(48, Node.DIRECTIVES);
1482:       assertEquals(8, Node.FLAG_NO_THROWS);
1483:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1484:       assertEquals(4095, Node.COLUMN_MASK);
1485:       assertEquals(40, Node.ORIGINALNAME_PROP);
1486:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1487:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1488:       assertEquals(43, Node.IS_CONSTANT_NAME);
1489:       assertEquals(54, Node.SLASH_V);
1490:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1491:       assertEquals(1, Node.DECR_FLAG);
1492:       assertEquals(50, Node.FREE_CALL);
1493:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1494:       assertEquals(37, Node.OPT_ARG_NAME);
1495:       assertEquals(2, Node.POST_FLAG);
1496:       assertEquals(32, Node.INCRDECR_PROP);
1497:       assertEquals(56, Node.CHANGE_TIME);
1498:       assertEquals(47, Node.IS_DISPATCHER);
1499:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1500:       assertEquals(12, Node.COLUMN_BITS);
1501:       assertEquals(46, Node.IS_NAMESPACE);
1502:       assertEquals(30, Node.VAR_ARGS_NAME);
1503:       assertEquals(49, Node.DIRECT_EVAL);
1504:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1505:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1506:       assertEquals(52, Node.LENGTH);
1507:       assertEquals(57, Node.LAST_PROP);
1508:       assertEquals(57, Node.REFLECTED_OBJECT);
1509:       assertEquals(36, Node.QUOTED_PROP);
1510:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1511:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1512:       assertEquals(55, Node.INFERRED_FUNCTION);
1513:       assertEquals(39, Node.EMPTY_BLOCK);
1514:       assertEquals(29, Node.JSDOC_INFO_PROP);
1515:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1516:       assertEquals(53, Node.INPUT_ID);
1517:       assertSame(node2, node3);
1518:       
1519:       Node node4 = node0.cloneNode();
1520:       assertFalse(node0.isCatch());
1521:       assertEquals(0, node0.getChildCount());
1522:       assertFalse(node0.isSetterDef());
1523:       assertFalse(node0.isDefaultCase());
1524:       assertFalse(node0.isTry());
1525:       assertFalse(node0.isVar());
1526:       assertFalse(node0.isStringKey());
1527:       assertFalse(node0.isGetterDef());
1528:       assertFalse(node0.isDebugger());
1529:       assertFalse(node0.isFunction());
1530:       assertFalse(node0.isParamList());
1531:       assertEquals(0, node0.getLineno());
1532:       assertFalse(node0.isArrayLit());
1533:       assertEquals(330, node0.getType());
1534:       assertFalse(node0.isOr());
1535:       assertFalse(node0.isLabel());
1536:       assertFalse(node0.isReturn());
1537:       assertFalse(node0.isWhile());
1538:       assertFalse(node0.isString());
1539:       assertFalse(node0.isDo());
1540:       assertFalse(node0.isAdd());
1541:       assertFalse(node0.isEmpty());
1542:       assertFalse(node0.isAssignAdd());
1543:       assertFalse(node0.isNew());
1544:       assertFalse(node0.isCall());
1545:       assertFalse(node0.isAssign());
1546:       assertFalse(node0.hasChildren());
1547:       assertEquals(0, node0.getSourcePosition());
1548:       assertFalse(node0.isDec());
1549:       assertFalse(node0.isTypeOf());
1550:       assertFalse(node0.isExprResult());
1551:       assertFalse(node0.isTrue());
1552:       assertFalse(node0.isNull());
1553:       assertFalse(node0.isName());
1554:       assertFalse(node0.isGetElem());
1555:       assertFalse(node0.isDelProp());
1556:       assertFalse(node0.isBreak());
1557:       assertFalse(node0.isVoid());
1558:       assertFalse(node0.isObjectLit());
1559:       assertFalse(node0.isAnd());
1560:       assertFalse(node0.isInstanceOf());
1561:       assertFalse(node0.isNot());
1562:       assertFalse(node0.isWith());
1563:       assertFalse(node0.isComma());
1564:       assertFalse(node0.isScript());
1565:       assertFalse(node0.isThis());
1566:       assertFalse(node0.isGetProp());
1567:       assertFalse(node0.hasOneChild());
1568:       assertFalse(node0.isCast());
1569:       assertFalse(node0.isThrow());
1570:       assertFalse(node0.isFalse());
1571:       assertFalse(node0.isSwitch());
1572:       assertFalse(node0.isLabelName());
1573:       assertFalse(node0.hasMoreThanOneChild());
1574:       assertFalse(node0.isContinue());
1575:       assertFalse(node0.isIn());
1576:       assertFalse(node0.isNumber());
1577:       assertFalse(node0.isInc());
1578:       assertFalse(node0.isCase());
1579:       assertFalse(node0.isHook());
1580:       assertFalse(node0.isFor());
1581:       assertFalse(node0.isBlock());
1582:       assertFalse(node0.isNE());
1583:       assertFalse(node0.isRegExp());
1584:       assertEquals(0, node0.getCharno());
1585:       assertFalse(node0.isIf());
1586:       assertFalse(node4.isTry());
1587:       assertFalse(node4.isVoid());
1588:       assertFalse(node4.isDebugger());
1589:       assertFalse(node4.isTrue());
1590:       assertFalse(node4.isArrayLit());
1591:       assertFalse(node4.isDefaultCase());
1592:       assertFalse(node4.isFor());
1593:       assertFalse(node4.isRegExp());
1594:       assertFalse(node4.isCatch());
1595:       assertEquals(0, node4.getChildCount());
1596:       assertFalse(node4.isFunction());
1597:       assertEquals(0, node4.getLineno());
1598:       assertEquals(330, node4.getType());
1599:       assertFalse(node4.isParamList());
1600:       assertFalse(node4.isCase());
1601:       assertFalse(node4.isStringKey());
1602:       assertFalse(node4.isString());
1603:       assertFalse(node4.isGetterDef());
1604:       assertFalse(node4.isBlock());
1605:       assertFalse(node4.isInc());
1606:       assertFalse(node4.isHook());
1607:       assertFalse(node4.isThrow());
1608:       assertFalse(node4.isContinue());
1609:       assertFalse(node4.hasMoreThanOneChild());
1610:       assertFalse(node4.isFalse());
1611:       assertFalse(node4.isSetterDef());
1612:       assertFalse(node4.isNE());
1613:       assertFalse(node4.isIf());
1614:       assertFalse(node4.isIn());
1615:       assertFalse(node4.isExprResult());
1616:       assertEquals(0, node4.getCharno());
1617:       assertFalse(node4.hasOneChild());
1618:       assertFalse(node4.isGetElem());
1619:       assertFalse(node4.isAssign());
1620:       assertFalse(node4.isLabelName());
1621:       assertFalse(node4.hasChildren());
1622:       assertFalse(node4.isTypeOf());
1623:       assertFalse(node4.isDec());
1624:       assertFalse(node4.isInstanceOf());
1625:       assertFalse(node4.isCast());
1626:       assertFalse(node4.isWith());
1627:       assertFalse(node4.isReturn());
1628:       assertFalse(node4.isThis());
1629:       assertFalse(node4.isGetProp());
1630:       assertFalse(node4.isAnd());
1631:       assertFalse(node4.isNot());
1632:       assertFalse(node4.isScript());
1633:       assertFalse(node4.isObjectLit());
1634:       assertFalse(node4.isNumber());
1635:       assertFalse(node4.isAdd());
1636:       assertFalse(node4.isNew());
1637:       assertFalse(node4.isVar());
1638:       assertFalse(node4.isWhile());
1639:       assertFalse(node4.isSwitch());
1640:       assertFalse(node4.isName());
1641:       assertFalse(node4.isCall());
1642:       assertFalse(node4.isBreak());
1643:       assertFalse(node4.isComma());
1644:       assertFalse(node4.isOr());
1645:       assertFalse(node4.isLabel());
1646:       assertFalse(node4.isNull());
1647:       assertFalse(node4.isDelProp());
1648:       assertFalse(node4.isAssignAdd());
1649:       assertFalse(node4.isDo());
1650:       assertFalse(node4.isEmpty());
1651:       assertEquals(0, node4.getSourcePosition());
1652:       assertEquals(0, nodeArray0.length);
1653:       assertNotNull(node4);
1654:       assertFalse(node0.equals((Object)node1));
1655:       assertFalse(node0.equals((Object)node3));
1656:       assertFalse(node0.equals((Object)node2));
1657:       assertFalse(node4.equals((Object)node1));
1658:       assertFalse(node4.equals((Object)node2));
1659:       assertFalse(node4.equals((Object)node0));
1660:       assertFalse(node4.equals((Object)node3));
1661:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1662:       assertEquals(4095, Node.COLUMN_MASK);
1663:       assertEquals(55, Node.INFERRED_FUNCTION);
1664:       assertEquals(48, Node.DIRECTIVES);
1665:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1666:       assertEquals(8, Node.FLAG_NO_THROWS);
1667:       assertEquals(43, Node.IS_CONSTANT_NAME);
1668:       assertEquals(36, Node.QUOTED_PROP);
1669:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1670:       assertEquals(50, Node.FREE_CALL);
1671:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1672:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1673:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1674:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1675:       assertEquals(12, Node.COLUMN_BITS);
1676:       assertEquals(1, Node.DECR_FLAG);
1677:       assertEquals(30, Node.VAR_ARGS_NAME);
1678:       assertEquals(49, Node.DIRECT_EVAL);
1679:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1680:       assertEquals(32, Node.INCRDECR_PROP);
1681:       assertEquals(54, Node.SLASH_V);
1682:       assertEquals(37, Node.OPT_ARG_NAME);
1683:       assertEquals(52, Node.LENGTH);
1684:       assertEquals(46, Node.IS_NAMESPACE);
1685:       assertEquals(56, Node.CHANGE_TIME);
1686:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1687:       assertEquals(57, Node.REFLECTED_OBJECT);
1688:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1689:       assertEquals(29, Node.JSDOC_INFO_PROP);
1690:       assertEquals(40, Node.ORIGINALNAME_PROP);
1691:       assertEquals(39, Node.EMPTY_BLOCK);
1692:       assertEquals(53, Node.INPUT_ID);
1693:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1694:       assertEquals(2, Node.POST_FLAG);
1695:       assertEquals(57, Node.LAST_PROP);
1696:       assertEquals(47, Node.IS_DISPATCHER);
1697:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1698:       assertEquals(53, Node.INPUT_ID);
1699:       assertEquals(36, Node.QUOTED_PROP);
1700:       assertEquals(47, Node.IS_DISPATCHER);
1701:       assertEquals(29, Node.JSDOC_INFO_PROP);
1702:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1703:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1704:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1705:       assertEquals(32, Node.INCRDECR_PROP);
1706:       assertEquals(12, Node.COLUMN_BITS);
1707:       assertEquals(4095, Node.COLUMN_MASK);
1708:       assertEquals(55, Node.INFERRED_FUNCTION);
1709:       assertEquals(8, Node.FLAG_NO_THROWS);
1710:       assertEquals(56, Node.CHANGE_TIME);
1711:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1712:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1713:       assertEquals(37, Node.OPT_ARG_NAME);
1714:       assertEquals(48, Node.DIRECTIVES);
1715:       assertEquals(49, Node.DIRECT_EVAL);
1716:       assertEquals(52, Node.LENGTH);
1717:       assertEquals(57, Node.REFLECTED_OBJECT);
1718:       assertEquals(54, Node.SLASH_V);
1719:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1720:       assertEquals(50, Node.FREE_CALL);
1721:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1722:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1723:       assertEquals(57, Node.LAST_PROP);
1724:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1725:       assertEquals(39, Node.EMPTY_BLOCK);
1726:       assertEquals(1, Node.DECR_FLAG);
1727:       assertEquals(46, Node.IS_NAMESPACE);
1728:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1729:       assertEquals(2, Node.POST_FLAG);
1730:       assertEquals(30, Node.VAR_ARGS_NAME);
1731:       assertEquals(43, Node.IS_CONSTANT_NAME);
1732:       assertEquals(40, Node.ORIGINALNAME_PROP);
1733:       assertNotSame(node0, node1);
1734:       assertNotSame(node0, node4);
1735:       assertNotSame(node4, node1);
1736:       assertNotSame(node4, node0);
1737:       
1738:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
1739:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1740:       assertEquals(48, node_SideEffectFlags0.valueOf());
1741:       assertNotNull(node_SideEffectFlags0);
1742:       
1743:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
1744:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1745:       assertEquals(48, node_SideEffectFlags0.valueOf());
1746:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1747:       assertEquals(48, node_SideEffectFlags1.valueOf());
1748:       assertNotNull(node_SideEffectFlags1);
1749:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1750:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1751:       
1752:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
1753:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1754:       assertEquals(48, node_SideEffectFlags0.valueOf());
1755:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1756:       assertEquals(48, node_SideEffectFlags1.valueOf());
1757:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1758:       assertEquals(48, node_SideEffectFlags2.valueOf());
1759:       assertNotNull(node_SideEffectFlags2);
1760:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1761:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1762:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1763:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1764:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1765:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1766:       
1767:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
1768:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1769:       assertEquals(31, node_SideEffectFlags0.valueOf());
1770:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1771:       assertEquals(31, node_SideEffectFlags1.valueOf());
1772:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1773:       assertEquals(31, node_SideEffectFlags2.valueOf());
1774:       assertEquals(31, node_SideEffectFlags3.valueOf());
1775:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
1776:       assertNotNull(node_SideEffectFlags3);
1777:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1778:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1779:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1780:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1781:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1782:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1783:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1784:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1785:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1786:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1787:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1788:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1789:       
1790:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
1791:       assertEquals(0, node_SideEffectFlags0.valueOf());
1792:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1793:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1794:       assertEquals(0, node_SideEffectFlags1.valueOf());
1795:       assertEquals(0, node_SideEffectFlags2.valueOf());
1796:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1797:       assertEquals(0, node_SideEffectFlags3.valueOf());
1798:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1799:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
1800:       assertEquals(0, node_SideEffectFlags4.valueOf());
1801:       assertNotNull(node_SideEffectFlags4);
1802:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1803:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1804:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1805:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1806:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1807:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1808:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1809:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1810:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1811:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1812:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1813:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1814:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1815:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1816:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1817:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1818:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1819:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1820:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1821:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1822:       
1823:       boolean boolean3 = node1.isIf();
1824:       assertFalse(node1.isFor());
1825:       assertFalse(node1.isEmpty());
1826:       assertFalse(node1.isGetterDef());
1827:       assertFalse(node1.isDebugger());
1828:       assertFalse(node1.isNE());
1829:       assertFalse(node1.isTrue());
1830:       assertFalse(node1.isIf());
1831:       assertFalse(node1.isArrayLit());
1832:       assertFalse(node1.isDelProp());
1833:       assertFalse(node1.isVoid());
1834:       assertFalse(node1.isCase());
1835:       assertFalse(node1.isCatch());
1836:       assertFalse(node1.isString());
1837:       assertFalse(node1.isRegExp());
1838:       assertEquals(49, node1.getType());
1839:       assertFalse(node1.isTry());
1840:       assertFalse(node1.isStringKey());
1841:       assertFalse(node1.isCall());
1842:       assertFalse(node1.isVar());
1843:       assertTrue(node1.isThrow());
1844:       assertFalse(node1.isComma());
1845:       assertFalse(node1.isParamList());
1846:       assertEquals((-1), node1.getCharno());
1847:       assertFalse(node1.isNull());
1848:       assertFalse(node1.isBreak());
1849:       assertFalse(node1.isSwitch());
1850:       assertFalse(node1.isName());
1851:       assertEquals(0, node1.getChildCount());
1852:       assertFalse(node1.isOr());
1853:       assertFalse(node1.isNew());
1854:       assertFalse(node1.isLabel());
1855:       assertFalse(node1.isAssignAdd());
1856:       assertFalse(node1.isAdd());
1857:       assertFalse(node1.isDefaultCase());
1858:       assertFalse(node1.isDo());
1859:       assertFalse(node1.isGetElem());
1860:       assertFalse(node1.isCast());
1861:       assertFalse(node1.isNumber());
1862:       assertFalse(node1.isDec());
1863:       assertFalse(node1.hasChildren());
1864:       assertEquals((-1), node1.getSourcePosition());
1865:       assertFalse(node1.isAssign());
1866:       assertFalse(node1.isTypeOf());
1867:       assertFalse(node1.isExprResult());
1868:       assertEquals((-1), node1.getLineno());
1869:       assertFalse(node1.isLabelName());
1870:       assertFalse(node1.isAnd());
1871:       assertFalse(node1.isInstanceOf());
1872:       assertFalse(node1.hasMoreThanOneChild());
1873:       assertFalse(node1.isWith());
1874:       assertFalse(node1.isObjectLit());
1875:       assertFalse(node1.isNot());
1876:       assertFalse(node1.isGetProp());
1877:       assertFalse(node1.isReturn());
1878:       assertFalse(node1.isThis());
1879:       assertFalse(node1.isBlock());
1880:       assertFalse(node1.isScript());
1881:       assertFalse(node1.hasOneChild());
1882:       assertFalse(node1.isWhile());
1883:       assertFalse(node1.isFalse());
1884:       assertFalse(node1.isHook());
1885:       assertFalse(node1.isContinue());
1886:       assertFalse(node1.isIn());
1887:       assertFalse(node1.isFunction());
1888:       assertFalse(node1.isInc());
1889:       assertFalse(node1.isSetterDef());
1890:       assertFalse(boolean3);
1891:       assertTrue(boolean3 == boolean2);
1892:       assertTrue(boolean3 == boolean1);
1893:       assertTrue(boolean3 == boolean0);
1894:       assertFalse(node1.equals((Object)node4));
1895:       assertFalse(node1.equals((Object)node3));
1896:       assertFalse(node1.equals((Object)node0));
1897:       assertFalse(node1.equals((Object)node2));
1898:       assertEquals(29, Node.JSDOC_INFO_PROP);
1899:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1900:       assertEquals(56, Node.CHANGE_TIME);
1901:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1902:       assertEquals(37, Node.OPT_ARG_NAME);
1903:       assertEquals(32, Node.INCRDECR_PROP);
1904:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1905:       assertEquals(2, Node.POST_FLAG);
1906:       assertEquals(12, Node.COLUMN_BITS);
1907:       assertEquals(47, Node.IS_DISPATCHER);
1908:       assertEquals(49, Node.DIRECT_EVAL);
1909:       assertEquals(57, Node.LAST_PROP);
1910:       assertEquals(55, Node.INFERRED_FUNCTION);
1911:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1912:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1913:       assertEquals(52, Node.LENGTH);
1914:       assertEquals(53, Node.INPUT_ID);
1915:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1916:       assertEquals(8, Node.FLAG_NO_THROWS);
1917:       assertEquals(57, Node.REFLECTED_OBJECT);
1918:       assertEquals(36, Node.QUOTED_PROP);
1919:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1920:       assertEquals(50, Node.FREE_CALL);
1921:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1922:       assertEquals(39, Node.EMPTY_BLOCK);
1923:       assertEquals(40, Node.ORIGINALNAME_PROP);
1924:       assertEquals(48, Node.DIRECTIVES);
1925:       assertEquals(4095, Node.COLUMN_MASK);
1926:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1927:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1928:       assertEquals(30, Node.VAR_ARGS_NAME);
1929:       assertEquals(43, Node.IS_CONSTANT_NAME);
1930:       assertEquals(1, Node.DECR_FLAG);
1931:       assertEquals(46, Node.IS_NAMESPACE);
1932:       assertEquals(54, Node.SLASH_V);
1933:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1934:       assertNotSame(node1, node4);
1935:       assertNotSame(node1, node0);
1936:       
1937:       boolean boolean4 = node3.isNot();
1938:       assertFalse(node1.isFor());
1939:       assertFalse(node1.isEmpty());
1940:       assertFalse(node1.isGetterDef());
1941:       assertFalse(node1.isDebugger());
1942:       assertFalse(node1.isNE());
1943:       assertFalse(node1.isTrue());
1944:       assertFalse(node1.isIf());
1945:       assertFalse(node1.isArrayLit());
1946:       assertFalse(node1.isDelProp());
1947:       assertFalse(node1.isVoid());
1948:       assertFalse(node1.isCase());
1949:       assertFalse(node1.isCatch());
1950:       assertFalse(node1.isString());
1951:       assertFalse(node1.isRegExp());
1952:       assertEquals(49, node1.getType());
1953:       assertFalse(node1.isTry());
1954:       assertFalse(node1.isStringKey());
1955:       assertFalse(node1.isCall());
1956:       assertFalse(node1.isVar());
1957:       assertTrue(node1.isThrow());
1958:       assertFalse(node1.isComma());
1959:       assertFalse(node1.isParamList());
1960:       assertEquals((-1), node1.getCharno());
1961:       assertFalse(node1.isNull());
1962:       assertFalse(node1.isBreak());
1963:       assertFalse(node1.isSwitch());
1964:       assertFalse(node1.isName());
1965:       assertEquals(0, node1.getChildCount());
1966:       assertFalse(node1.isOr());
1967:       assertFalse(node1.isNew());
1968:       assertFalse(node1.isLabel());
1969:       assertFalse(node1.isAssignAdd());
1970:       assertFalse(node1.isAdd());
1971:       assertFalse(node1.isDefaultCase());
1972:       assertFalse(node1.isDo());
1973:       assertFalse(node1.isGetElem());
1974:       assertFalse(node1.isCast());
1975:       assertFalse(node1.isNumber());
1976:       assertFalse(node1.isDec());
1977:       assertFalse(node1.hasChildren());
1978:       assertEquals((-1), node1.getSourcePosition());
1979:       assertFalse(node1.isAssign());
1980:       assertFalse(node1.isTypeOf());
1981:       assertFalse(node1.isExprResult());
1982:       assertEquals((-1), node1.getLineno());
1983:       assertFalse(node1.isLabelName());
1984:       assertFalse(node1.isAnd());
1985:       assertFalse(node1.isInstanceOf());
1986:       assertFalse(node1.hasMoreThanOneChild());
1987:       assertFalse(node1.isWith());
1988:       assertFalse(node1.isObjectLit());
1989:       assertFalse(node1.isNot());
1990:       assertFalse(node1.isGetProp());
1991:       assertFalse(node1.isReturn());
1992:       assertFalse(node1.isThis());
1993:       assertFalse(node1.isBlock());
1994:       assertFalse(node1.isScript());
1995:       assertFalse(node1.hasOneChild());
1996:       assertFalse(node1.isWhile());
1997:       assertFalse(node1.isFalse());
1998:       assertFalse(node1.isHook());
1999:       assertFalse(node1.isContinue());
2000:       assertFalse(node1.isIn());
2001:       assertFalse(node1.isFunction());
2002:       assertFalse(node1.isInc());
2003:       assertFalse(node1.isSetterDef());
2004:       assertFalse(node2.isSetterDef());
2005:       assertFalse(node2.isNull());
2006:       assertFalse(node2.isParamList());
2007:       assertFalse(node2.isName());
2008:       assertFalse(node2.isStringKey());
2009:       assertFalse(node2.isFunction());
2010:       assertFalse(node2.isDefaultCase());
2011:       assertFalse(node2.isDo());
2012:       assertFalse(node2.isAdd());
2013:       assertFalse(node2.isArrayLit());
2014:       assertFalse(node2.isNew());
2015:       assertFalse(node2.isVar());
2016:       assertFalse(node2.isContinue());
2017:       assertEquals(40, node2.getType());
2018:       assertEquals(0, node2.getChildCount());
2019:       assertFalse(node2.isLabel());
2020:       assertFalse(node2.isNE());
2021:       assertFalse(node2.isNumber());
2022:       assertFalse(node2.isIf());
2023:       assertEquals((-1), node2.getLineno());
2024:       assertFalse(node2.isLabelName());
2025:       assertFalse(node2.isIn());
2026:       assertFalse(node2.isGetterDef());
2027:       assertFalse(node2.isRegExp());
2028:       assertFalse(node2.isScript());
2029:       assertTrue(node2.isString());
2030:       assertFalse(node2.isTry());
2031:       assertFalse(node2.hasOneChild());
2032:       assertFalse(node2.isCase());
2033:       assertFalse(node2.hasMoreThanOneChild());
2034:       assertFalse(node2.isCatch());
2035:       assertFalse(node2.isInstanceOf());
2036:       assertFalse(node2.isWith());
2037:       assertFalse(node2.isBlock());
2038:       assertFalse(node2.isFor());
2039:       assertFalse(node2.isHook());
2040:       assertFalse(node2.isThis());
2041:       assertFalse(node2.isComma());
2042:       assertFalse(node2.isBreak());
2043:       assertFalse(node2.isGetProp());
2044:       assertFalse(node2.isObjectLit());
2045:       assertFalse(node2.isAnd());
2046:       assertFalse(node2.isNot());
2047:       assertEquals((-1), node2.getCharno());
2048:       assertFalse(node2.isSwitch());
2049:       assertFalse(node2.isInc());
2050:       assertFalse(node2.isCast());
2051:       assertFalse(node2.isFalse());
2052:       assertFalse(node2.isThrow());
2053:       assertFalse(node2.isTypeOf());
2054:       assertFalse(node2.isAssignAdd());
2055:       assertFalse(node2.isDelProp());
2056:       assertFalse(node2.isEmpty());
2057:       assertFalse(node2.isGetElem());
2058:       assertFalse(node2.isOr());
2059:       assertEquals((-1), node2.getSourcePosition());
2060:       assertFalse(node2.isDebugger());
2061:       assertFalse(node2.isExprResult());
2062:       assertFalse(node2.isTrue());
2063:       assertFalse(node2.isVoid());
2064:       assertFalse(node2.isWhile());
2065:       assertFalse(node2.isCall());
2066:       assertFalse(node2.isAssign());
2067:       assertFalse(node2.isReturn());
2068:       assertFalse(node2.isDec());
2069:       assertFalse(node2.hasChildren());
2070:       assertFalse(node3.isGetElem());
2071:       assertFalse(node3.isAssign());
2072:       assertFalse(node3.isLabelName());
2073:       assertFalse(node3.hasChildren());
2074:       assertFalse(node3.hasOneChild());
2075:       assertFalse(node3.isReturn());
2076:       assertEquals((-1), node3.getLineno());
2077:       assertFalse(node3.isExprResult());
2078:       assertFalse(node3.isLabel());
2079:       assertFalse(node3.isTypeOf());
2080:       assertFalse(node3.isDec());
2081:       assertFalse(node3.isCast());
2082:       assertFalse(node3.isWith());
2083:       assertFalse(node3.isContinue());
2084:       assertFalse(node3.hasMoreThanOneChild());
2085:       assertFalse(node3.isDo());
2086:       assertFalse(node3.isAssignAdd());
2087:       assertFalse(node3.isNew());
2088:       assertFalse(node3.isOr());
2089:       assertFalse(node3.isAdd());
2090:       assertFalse(node3.isName());
2091:       assertFalse(node3.isFalse());
2092:       assertFalse(node3.isThrow());
2093:       assertFalse(node3.isCall());
2094:       assertFalse(node3.isBreak());
2095:       assertFalse(node3.isNull());
2096:       assertFalse(node3.isComma());
2097:       assertFalse(node3.isObjectLit());
2098:       assertFalse(node3.isNot());
2099:       assertFalse(node3.isWhile());
2100:       assertFalse(node3.isAnd());
2101:       assertFalse(node3.isDebugger());
2102:       assertFalse(node3.isGetProp());
2103:       assertEquals((-1), node3.getSourcePosition());
2104:       assertFalse(node3.isFor());
2105:       assertFalse(node3.isEmpty());
2106:       assertFalse(node3.isArrayLit());
2107:       assertFalse(node3.isDelProp());
2108:       assertFalse(node3.isNE());
2109:       assertFalse(node3.isIf());
2110:       assertFalse(node3.isVoid());
2111:       assertFalse(node3.isRegExp());
2112:       assertFalse(node3.isFunction());
2113:       assertEquals(40, node3.getType());
2114:       assertFalse(node3.isDefaultCase());
2115:       assertFalse(node3.isInc());
2116:       assertFalse(node3.isSetterDef());
2117:       assertFalse(node3.isTrue());
2118:       assertFalse(node3.isIn());
2119:       assertFalse(node3.isStringKey());
2120:       assertFalse(node3.isHook());
2121:       assertFalse(node3.isVar());
2122:       assertFalse(node3.isParamList());
2123:       assertFalse(node3.isBlock());
2124:       assertFalse(node3.isThis());
2125:       assertFalse(node3.isInstanceOf());
2126:       assertEquals(0, node3.getChildCount());
2127:       assertFalse(node3.isCatch());
2128:       assertFalse(node3.isCase());
2129:       assertFalse(node3.isSwitch());
2130:       assertTrue(node3.isString());
2131:       assertFalse(node3.isTry());
2132:       assertEquals((-1), node3.getCharno());
2133:       assertFalse(node3.isNumber());
2134:       assertFalse(node3.isGetterDef());
2135:       assertFalse(node3.isScript());
2136:       assertFalse(boolean4);
2137:       assertTrue(boolean4 == boolean0);
2138:       assertTrue(boolean4 == boolean1);
2139:       assertTrue(boolean4 == boolean3);
2140:       assertTrue(boolean4 == boolean2);
2141:       assertFalse(node1.equals((Object)node4));
2142:       assertFalse(node1.equals((Object)node3));
2143:       assertFalse(node1.equals((Object)node0));
2144:       assertFalse(node1.equals((Object)node2));
2145:       assertFalse(node2.equals((Object)node4));
2146:       assertFalse(node2.equals((Object)node1));
2147:       assertFalse(node2.equals((Object)node0));
2148:       assertFalse(node3.equals((Object)node4));
2149:       assertFalse(node3.equals((Object)node0));
2150:       assertFalse(node3.equals((Object)node1));
2151:       assertEquals(29, Node.JSDOC_INFO_PROP);
2152:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2153:       assertEquals(56, Node.CHANGE_TIME);
2154:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2155:       assertEquals(37, Node.OPT_ARG_NAME);
2156:       assertEquals(32, Node.INCRDECR_PROP);
2157:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2158:       assertEquals(2, Node.POST_FLAG);
2159:       assertEquals(12, Node.COLUMN_BITS);
2160:       assertEquals(47, Node.IS_DISPATCHER);
2161:       assertEquals(49, Node.DIRECT_EVAL);
2162:       assertEquals(57, Node.LAST_PROP);
2163:       assertEquals(55, Node.INFERRED_FUNCTION);
2164:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2165:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2166:       assertEquals(52, Node.LENGTH);
2167:       assertEquals(53, Node.INPUT_ID);
2168:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2169:       assertEquals(8, Node.FLAG_NO_THROWS);
2170:       assertEquals(57, Node.REFLECTED_OBJECT);
2171:       assertEquals(36, Node.QUOTED_PROP);
2172:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2173:       assertEquals(50, Node.FREE_CALL);
2174:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2175:       assertEquals(39, Node.EMPTY_BLOCK);
2176:       assertEquals(40, Node.ORIGINALNAME_PROP);
2177:       assertEquals(48, Node.DIRECTIVES);
2178:       assertEquals(4095, Node.COLUMN_MASK);
2179:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2180:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2181:       assertEquals(30, Node.VAR_ARGS_NAME);
2182:       assertEquals(43, Node.IS_CONSTANT_NAME);
2183:       assertEquals(1, Node.DECR_FLAG);
2184:       assertEquals(46, Node.IS_NAMESPACE);
2185:       assertEquals(54, Node.SLASH_V);
2186:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2187:       assertEquals(48, Node.DIRECTIVES);
2188:       assertEquals(8, Node.FLAG_NO_THROWS);
2189:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2190:       assertEquals(4095, Node.COLUMN_MASK);
2191:       assertEquals(40, Node.ORIGINALNAME_PROP);
2192:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2193:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2194:       assertEquals(43, Node.IS_CONSTANT_NAME);
2195:       assertEquals(54, Node.SLASH_V);
2196:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2197:       assertEquals(1, Node.DECR_FLAG);
2198:       assertEquals(50, Node.FREE_CALL);
2199:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2200:       assertEquals(37, Node.OPT_ARG_NAME);
2201:       assertEquals(2, Node.POST_FLAG);
2202:       assertEquals(32, Node.INCRDECR_PROP);
2203:       assertEquals(56, Node.CHANGE_TIME);
2204:       assertEquals(47, Node.IS_DISPATCHER);
2205:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2206:       assertEquals(12, Node.COLUMN_BITS);
2207:       assertEquals(46, Node.IS_NAMESPACE);
2208:       assertEquals(30, Node.VAR_ARGS_NAME);
2209:       assertEquals(49, Node.DIRECT_EVAL);
2210:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2211:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2212:       assertEquals(52, Node.LENGTH);
2213:       assertEquals(57, Node.LAST_PROP);
2214:       assertEquals(57, Node.REFLECTED_OBJECT);
2215:       assertEquals(36, Node.QUOTED_PROP);
2216:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2217:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2218:       assertEquals(55, Node.INFERRED_FUNCTION);
2219:       assertEquals(39, Node.EMPTY_BLOCK);
2220:       assertEquals(29, Node.JSDOC_INFO_PROP);
2221:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2222:       assertEquals(53, Node.INPUT_ID);
2223:       assertEquals(47, Node.IS_DISPATCHER);
2224:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2225:       assertEquals(56, Node.CHANGE_TIME);
2226:       assertEquals(29, Node.JSDOC_INFO_PROP);
2227:       assertEquals(2, Node.POST_FLAG);
2228:       assertEquals(53, Node.INPUT_ID);
2229:       assertEquals(12, Node.COLUMN_BITS);
2230:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2231:       assertEquals(32, Node.INCRDECR_PROP);
2232:       assertEquals(1, Node.DECR_FLAG);
2233:       assertEquals(57, Node.LAST_PROP);
2234:       assertEquals(43, Node.IS_CONSTANT_NAME);
2235:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2236:       assertEquals(30, Node.VAR_ARGS_NAME);
2237:       assertEquals(46, Node.IS_NAMESPACE);
2238:       assertEquals(54, Node.SLASH_V);
2239:       assertEquals(40, Node.ORIGINALNAME_PROP);
2240:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2241:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2242:       assertEquals(8, Node.FLAG_NO_THROWS);
2243:       assertEquals(50, Node.FREE_CALL);
2244:       assertEquals(52, Node.LENGTH);
2245:       assertEquals(55, Node.INFERRED_FUNCTION);
2246:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2247:       assertEquals(39, Node.EMPTY_BLOCK);
2248:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2249:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2250:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2251:       assertEquals(4095, Node.COLUMN_MASK);
2252:       assertEquals(36, Node.QUOTED_PROP);
2253:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2254:       assertEquals(57, Node.REFLECTED_OBJECT);
2255:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2256:       assertEquals(37, Node.OPT_ARG_NAME);
2257:       assertEquals(48, Node.DIRECTIVES);
2258:       assertEquals(49, Node.DIRECT_EVAL);
2259:       assertNotSame(node1, node4);
2260:       assertNotSame(node1, node0);
2261:       assertSame(node2, node3);
2262:       assertSame(node3, node2);
2263:       
2264:       try { 
2265:         node1.getString();
2266:         fail("Expecting exception: UnsupportedOperationException");
2267:       
2268:       } catch(UnsupportedOperationException e) {
2269:          //
2270:          // THROW is not a string node
2271:          //
2272:          verifyException("com.google.javascript.rhino.Node", e);
2273:       }
2274:   }
2275: }
RegularFileObject[/tmp/EvoSuite_166_1629222896569/com/google/javascript/rhino/Node_166_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:57 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_166_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_166_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.jstype.RecordType",
105:       "com.google.javascript.rhino.Node$NodeMismatch",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_166_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.SimpleErrorReporter",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Preconditions",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.JSTypeNative",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.common.base.Objects",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.common.collect.AbstractIndexedListIterator",
340:       "com.google.common.collect.Iterators$11",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.InputId",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.TemplatizedType",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.common.collect.AbstractMultimap$Values",
349:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
350:       "com.google.common.collect.AbstractMapBasedMultimap$1",
351:       "com.google.common.collect.Multimaps$Entries",
352:       "com.google.common.collect.AbstractMultimap$Entries",
353:       "com.google.common.collect.AbstractMapBasedMultimap$2",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
358:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
360:       "com.google.javascript.rhino.JSTypeExpression",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.common.collect.Iterators$12",
366:       "com.google.javascript.rhino.jstype.NamedType"
367:     );
368:   }
369: }

[MASTER] 17:54:57.772 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node[] nodeArray0 = new Node[0];
Node node0 = new Node(330, nodeArray0);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isArrayLit());
assertEquals(330, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIf());
assertEquals(0, nodeArray0.length);
assertNotNull(node0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);

Node node1 = new Node(49);
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isString());
assertFalse(node1.isRegExp());
assertEquals(49, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertTrue(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);

String string0 = "xpBF>P}ZAl``iC)9";
Node node2 = Node.newString("xpBF>P}ZAl``iC)9");
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isNE());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);

Node node3 = node2.useSourceInfoIfMissingFrom(node1);
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isString());
assertFalse(node1.isRegExp());
assertEquals(49, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertTrue(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isNE());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isLabelName());
assertFalse(node3.hasChildren());
assertFalse(node3.hasOneChild());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isExprResult());
assertFalse(node3.isLabel());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isCast());
assertFalse(node3.isWith());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isDo());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNew());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isCall());
assertFalse(node3.isBreak());
assertFalse(node3.isNull());
assertFalse(node3.isComma());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isWhile());
assertFalse(node3.isAnd());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetProp());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isArrayLit());
assertFalse(node3.isDelProp());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isVoid());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertEquals(40, node3.getType());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isTrue());
assertFalse(node3.isIn());
assertFalse(node3.isStringKey());
assertFalse(node3.isHook());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertFalse(node3.isBlock());
assertFalse(node3.isThis());
assertFalse(node3.isInstanceOf());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertTrue(node3.isString());
assertFalse(node3.isTry());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isScript());
assertNotNull(node3);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);

Iterable<Node> iterable0 = node3.children();
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isString());
assertFalse(node1.isRegExp());
assertEquals(49, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertTrue(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isNE());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isLabelName());
assertFalse(node3.hasChildren());
assertFalse(node3.hasOneChild());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isExprResult());
assertFalse(node3.isLabel());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isCast());
assertFalse(node3.isWith());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isDo());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNew());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isCall());
assertFalse(node3.isBreak());
assertFalse(node3.isNull());
assertFalse(node3.isComma());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isWhile());
assertFalse(node3.isAnd());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetProp());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isArrayLit());
assertFalse(node3.isDelProp());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isVoid());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertEquals(40, node3.getType());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isTrue());
assertFalse(node3.isIn());
assertFalse(node3.isStringKey());
assertFalse(node3.isHook());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertFalse(node3.isBlock());
assertFalse(node3.isThis());
assertFalse(node3.isInstanceOf());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertTrue(node3.isString());
assertFalse(node3.isTry());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isScript());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node1));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);

boolean boolean0 = node1.isGetProp();
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isString());
assertFalse(node1.isRegExp());
assertEquals(49, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertTrue(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(boolean0);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotSame(node1, node0);

boolean boolean1 = node3.hasChildren();
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isString());
assertFalse(node1.isRegExp());
assertEquals(49, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertTrue(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isNE());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isLabelName());
assertFalse(node3.hasChildren());
assertFalse(node3.hasOneChild());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isExprResult());
assertFalse(node3.isLabel());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isCast());
assertFalse(node3.isWith());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isDo());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNew());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isCall());
assertFalse(node3.isBreak());
assertFalse(node3.isNull());
assertFalse(node3.isComma());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isWhile());
assertFalse(node3.isAnd());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetProp());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isArrayLit());
assertFalse(node3.isDelProp());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isVoid());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertEquals(40, node3.getType());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isTrue());
assertFalse(node3.isIn());
assertFalse(node3.isStringKey());
assertFalse(node3.isHook());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertFalse(node3.isBlock());
assertFalse(node3.isThis());
assertFalse(node3.isInstanceOf());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertTrue(node3.isString());
assertFalse(node3.isTry());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isScript());
assertFalse(boolean1);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);

boolean boolean2 = node2.isSwitch();
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isNE());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(boolean2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertSame(node2, node3);

Node node4 = node0.cloneNode();
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isArrayLit());
assertEquals(330, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node4.isTry());
assertFalse(node4.isVoid());
assertFalse(node4.isDebugger());
assertFalse(node4.isTrue());
assertFalse(node4.isArrayLit());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isFor());
assertFalse(node4.isRegExp());
assertFalse(node4.isCatch());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isFunction());
assertEquals(0, node4.getLineno());
assertEquals(330, node4.getType());
assertFalse(node4.isParamList());
assertFalse(node4.isCase());
assertFalse(node4.isStringKey());
assertFalse(node4.isString());
assertFalse(node4.isGetterDef());
assertFalse(node4.isBlock());
assertFalse(node4.isInc());
assertFalse(node4.isHook());
assertFalse(node4.isThrow());
assertFalse(node4.isContinue());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isFalse());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isIn());
assertFalse(node4.isExprResult());
assertEquals(0, node4.getCharno());
assertFalse(node4.hasOneChild());
assertFalse(node4.isGetElem());
assertFalse(node4.isAssign());
assertFalse(node4.isLabelName());
assertFalse(node4.hasChildren());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isCast());
assertFalse(node4.isWith());
assertFalse(node4.isReturn());
assertFalse(node4.isThis());
assertFalse(node4.isGetProp());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isScript());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNumber());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isVar());
assertFalse(node4.isWhile());
assertFalse(node4.isSwitch());
assertFalse(node4.isName());
assertFalse(node4.isCall());
assertFalse(node4.isBreak());
assertFalse(node4.isComma());
assertFalse(node4.isOr());
assertFalse(node4.isLabel());
assertFalse(node4.isNull());
assertFalse(node4.isDelProp());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDo());
assertFalse(node4.isEmpty());
assertEquals(0, node4.getSourcePosition());
assertEquals(0, nodeArray0.length);
assertNotNull(node4);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotSame(node0, node1);
assertNotSame(node0, node4);
assertNotSame(node4, node1);
assertNotSame(node4, node0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags2.valueOf());
assertNotNull(node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags2.valueOf());
assertEquals(31, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertNotNull(node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertNotNull(node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);

boolean boolean3 = node1.isIf();
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isString());
assertFalse(node1.isRegExp());
assertEquals(49, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertTrue(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(boolean3);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotSame(node1, node4);
assertNotSame(node1, node0);

boolean boolean4 = node3.isNot();
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isString());
assertFalse(node1.isRegExp());
assertEquals(49, node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertTrue(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isNumber());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isNE());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node3.isGetElem());
assertFalse(node3.isAssign());
assertFalse(node3.isLabelName());
assertFalse(node3.hasChildren());
assertFalse(node3.hasOneChild());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isExprResult());
assertFalse(node3.isLabel());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isCast());
assertFalse(node3.isWith());
assertFalse(node3.isContinue());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isDo());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNew());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isName());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isCall());
assertFalse(node3.isBreak());
assertFalse(node3.isNull());
assertFalse(node3.isComma());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isWhile());
assertFalse(node3.isAnd());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetProp());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isArrayLit());
assertFalse(node3.isDelProp());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isVoid());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertEquals(40, node3.getType());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isTrue());
assertFalse(node3.isIn());
assertFalse(node3.isStringKey());
assertFalse(node3.isHook());
assertFalse(node3.isVar());
assertFalse(node3.isParamList());
assertFalse(node3.isBlock());
assertFalse(node3.isThis());
assertFalse(node3.isInstanceOf());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertTrue(node3.isString());
assertFalse(node3.isTry());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isScript());
assertFalse(boolean4);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertNotSame(node1, node4);
assertNotSame(node1, node0);
assertSame(node2, node3);
assertSame(node3, node2);

node1.getString();

* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/4
* Done!

* Computation finished
