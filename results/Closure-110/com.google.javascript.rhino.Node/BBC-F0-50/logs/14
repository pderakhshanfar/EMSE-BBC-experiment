* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 3864
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2984270459
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:15:03.549 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:15:05.249 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:15:05.771 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - true
[MASTER] 10:15:05.804 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 3555: com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V:972 - ReplaceComparisonOperator == -> -2
[MASTER] 10:15:21.403 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:21:33.360 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 1497
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 16254
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 2090
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 472
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 3618
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 578
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 107
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 1497
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 189
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - true: 472
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 2013
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 723
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 498
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 2013
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 2013
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 7945
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 2013
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 2441
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 3198
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 10502
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 2013
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - true: 210
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 698: 1356
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 279
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 1356
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 11471
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 5
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 545
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 4331
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 1038
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 378
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 1515
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 126
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 5260
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 7393
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 472
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 1438
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - false: 472
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 613
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 8752
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - true: 73
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 397
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - false: 73
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 581
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 1410
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 7393
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 768
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1483: 7210
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 472
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 126
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 288
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 1590
Number of times BBC is called for com.google.javascript.rhino.Node.mergeLineCharNo(II)I: I15 Branch 141 IFEQ L1197 - false: 16
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 232
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 4150
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 1061
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 2427
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 2195: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 786
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 8786
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 2197: 44
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 337
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 2196: 44
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 126
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 199
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 4418
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 595
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 542
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 378
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 378
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 6487
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 5512
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 1718
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 206
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 5820
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 126
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1180: 378
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 1789
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 2198: 44
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1182: 378
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 277
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 1439
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1186: 378
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 520
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1473: 472
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 1728
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 592
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - true: 75
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 126
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 76
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 59
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 472
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 59
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 12503
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 227
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 227
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 44
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 227
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 8669
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 378
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 2249
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 640: 1934
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 20163
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 8074
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 8669
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 1789
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 2453
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 1215
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 8410
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 16257
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - true: 243
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 703
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 8085
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 49059
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 17890
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 1087
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 944
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 1142
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 703
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 1369
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 4822
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 303
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 269
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - true: 126
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 4283
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 9127
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 2090
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 72
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 675
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 6764
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 2336
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 210
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 378
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 12797
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 2090
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 232: 126
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - true: 72
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 13658
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 295
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 1490
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 1356
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: Line 1258: 472
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 778
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 1333
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 1789
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 428
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 198
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 3297
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 895
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: Line 2161: 956
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 183
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 1638
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 1789
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: root-Branch: 295
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 1580
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 2948
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 759
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 472
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 828
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 550: 378
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 306
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - true: 378
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 126
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 126
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1271: 472
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 3327
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1270: 472
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1273: 472
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 1356
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1272: 472
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 25168
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 584
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 1237
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1274: 472
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 20163
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: root-Branch: 126
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 15483
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 3097
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 8741
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 4712
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 8741
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 378
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 5260
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 6733
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 6821
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 12677
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 4251
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 8669
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 8669
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - false: 956
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 20080
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: root-Branch: 1641
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 378
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 49059
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 3708
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 378
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 2790
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 5
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 5634
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 11613
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 472
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 610
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 3708
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 1789
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - true: 63
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 126
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 472
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 378
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 2490
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 378
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 3620
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 378
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 905
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 295
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 5820
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 664
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 1789
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 8734
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 4897
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 3097
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 23962
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 3080
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 11471
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 462
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 11471
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 264
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 472
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 703
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1039: 280
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 1253
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1032: 210
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 295
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1033: 280
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 1344
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1034: 280
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 1333
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 210
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 63
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 285
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1029: 210
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: Line 2135: 1356
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 157
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 320
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - false: 71
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 670: 63
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 89
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 1215
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 1216
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 126
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 1907
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 13037
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 4706
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 11405
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 1907
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: Line 2166: 44
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 895
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 692: 63
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 4150
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 378
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 68
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 1912
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 2636
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: root-Branch: 210
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1791: 472
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 295
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1792: 472
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 277
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 895
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 675: 63
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 472
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 676: 63
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1797: 472
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 472
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 1097
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 472
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 472
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 472
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 13249
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 545
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 2057
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 990
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 545
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 545
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 545
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 118
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: root-Branch: 210
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 378
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 1789
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 596: 472
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: root-Branch: 126
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 2842
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 2502
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 472
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 916
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 472
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 472
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 3620
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 472
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 916
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 916
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 10921
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 916
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 1741
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 1259
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 210
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 595
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 703
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 716
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 4059
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 174
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - false: 29
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 1497
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 10341
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 126
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 3442
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 1960
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 6574
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 5444
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: Line 1616: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 1925
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 126
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - true: 210
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 378
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 637
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 274
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 2277
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 2249
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 12706
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 378
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 2249
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 9517
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - true: 5
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 2989
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 5273
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 333
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 80
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1582: 488
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - true: 2416
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 51
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 244
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 1789
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 633: 126
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 174: 472
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 634: 126
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 295
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 173: 472
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 2249
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 11915
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 9219
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: Line 2351: 295
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 222
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 16
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 76
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 8560
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 1789
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 2007
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - false: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 7135
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 1087
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 9671
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 492
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 89
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 2090
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 75
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 9703
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - false: 1934
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 5613
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 378
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 8462
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 11471
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 8958
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 224
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - true: 219
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 1510
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 5484
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 179
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 1510
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 1356
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 5840
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - true: 5
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 5444
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 8741
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 126
Number of times BBC is called for com.google.javascript.rhino.Node.extractLineno(I)I: I4 Branch 142 IF_ICMPNE L1209 - false: 23
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - false: 219
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 1
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 8741
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 8741
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 1414
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 56
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 10062
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: root-Branch: 472
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 8741
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 8741
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 8741
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 1497
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 44
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 117
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 95
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 378
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 5725
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 5725
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 5
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1015: 210
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 472
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1017: 280
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 10339
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 96
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1016: 210
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1024: 210
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1025: 280
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 472
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 8459
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 44
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 1883
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 3227
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: root-Branch: 210
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 324
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 210
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 267
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: Line 1010: 210
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 51
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 733
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 472
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 11163
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 1087
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 472
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 1471
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 1003
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 2304
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 264
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 828
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 1315
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 11349
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 1925
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 8608
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 1925
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 126
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1634: 210
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 562
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 1479
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 637
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 8781
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 8335
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 2013
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 330
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 5634
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 1087
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: Line 214: 126
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: Line 2124: 1641
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 428
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 621
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 1462
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 621
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 5070
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 24678
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 126
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - false: 567
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 3239
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 195
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 4897
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 22209
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 703
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 126
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 1537
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 1510
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 1960
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 4150
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 8605
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 472
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 472
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 472
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 44
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 472
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 324
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 8822
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 44
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1459: 75
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 1356
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 2777
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - true: 210
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 1517: 44
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 280
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 295
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 295
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 136
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 472
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 1067
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1128: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1127: 44
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 52
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1446: 44
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 155
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 196
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 472
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 6533
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 56
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 622: 372
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1137: 210
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 684
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1136: 210
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 472
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 703
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 1038
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 1038
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 6533
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 1038
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 52
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - true: 378
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 1038
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 82
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 808
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 126
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 268
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 472
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 1288
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 126
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 703
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 126
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 126
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 2312
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 1689
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 126
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 126
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 126
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 210
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 126
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 126
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 4043
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 126
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 126
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 126
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 4186
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 4186
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 5338
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 5434
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: root-Branch: 472
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 1745
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 9533
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: Line 1951: 472
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 9421
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: Line 2060: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 126
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 4637
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 17890
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 126
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 33
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: Line 889: 2416
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 8436
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 12745
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 12151
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 59
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 1960
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 472
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 1497
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 472
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 2942
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 896
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 1497
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 584
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 210
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 3
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 210
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 126
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 111
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 3966
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 888
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 703
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 2391
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 37
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 703
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 2013
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 4684
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 4712
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 24178
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 828
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 19171
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 44
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 235
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 916
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 1934
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 2249
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 3066
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 126
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 126
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 17100
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 472
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 277
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 33
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1408: 210
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 4415
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 73
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 472
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1411: 210
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 837: 295
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 472
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 838: 295
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 1356
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: root-Branch: 1356
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 9939
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 13249
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 1356
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1407: 210
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: root-Branch: 210
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - true: 1
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 545
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 1789
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 1789
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 16053
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 1934
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 202
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 404
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 9939
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 13
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 898
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 49059
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 2203
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 545
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 2
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 828
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - true: 5
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 295
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 703
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 2249
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 4150
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 194
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 4593
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 52
Number of times BBC is called in total: 2981436
* Search finished after 605s and 275 generations, 168744 statements, best individual has fitness: 3294.0
* Minimizing test suite
[MASTER] 10:26:30.930 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 92%
* Total number of goals: 853
* Number of covered goals: 782
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 81%
* Total number of goals: 714
* Number of covered goals: 581
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 106
* Number of covered goals: 106
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 84%
* Total number of goals: 530
* Number of covered goals: 447
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 41%
* Total number of goals: 4536
* Number of covered goals: 1881
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 211
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 75%
* Total number of goals: 714
* Number of covered goals: 536
* Generated 603 tests with total length 10839
* Resulting test suite's coverage: 74% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:27:34.829 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.68585% of time used, but only 38/603 tests minimized), falling back to using all assertions
[MASTER] 10:27:53.887 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 10:28:01.548 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 7 seconds more than allowed.
[MASTER] 10:28:25.990 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_166_1628159305926/com/google/javascript/rhino/Node_166_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_166_1628159305926/com/google/javascript/rhino/Node_166_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:25.990 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:25.990 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:25.993 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 567
[MASTER] 10:28:25.996 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_166_1628159305926/com/google/javascript/rhino/Node_166_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:25 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.jstype.SimpleSourceFile;
14: import java.util.LinkedHashSet;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_166_tmp__ESTest extends Node_166_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Node node0 = Node.newString((-1033), "", (-1033), (-489));
25:       assertFalse(node0.isVar());
26:       assertFalse(node0.isCall());
27:       assertFalse(node0.isAdd());
28:       assertFalse(node0.isNull());
29:       assertFalse(node0.isName());
30:       assertFalse(node0.isParamList());
31:       assertFalse(node0.isStringKey());
32:       assertEquals(0, node0.getChildCount());
33:       assertFalse(node0.isOr());
34:       assertFalse(node0.isContinue());
35:       assertFalse(node0.isFunction());
36:       assertFalse(node0.isSetterDef());
37:       assertFalse(node0.isNew());
38:       assertFalse(node0.isLabel());
39:       assertFalse(node0.isDo());
40:       assertFalse(node0.isAssignAdd());
41:       assertFalse(node0.isDefaultCase());
42:       assertFalse(node0.isCast());
43:       assertFalse(node0.isAssign());
44:       assertFalse(node0.isEmpty());
45:       assertFalse(node0.isGetElem());
46:       assertFalse(node0.isExprResult());
47:       assertFalse(node0.isTrue());
48:       assertFalse(node0.isDelProp());
49:       assertFalse(node0.isDebugger());
50:       assertFalse(node0.isVoid());
51:       assertEquals((-1), node0.getSourcePosition());
52:       assertEquals((-1033), node0.getType());
53:       assertFalse(node0.isAnd());
54:       assertFalse(node0.isObjectLit());
55:       assertFalse(node0.isNot());
56:       assertFalse(node0.isString());
57:       assertFalse(node0.isTypeOf());
58:       assertFalse(node0.hasChildren());
59:       assertFalse(node0.isGetProp());
60:       assertFalse(node0.isDec());
61:       assertFalse(node0.isComma());
62:       assertFalse(node0.isReturn());
63:       assertFalse(node0.isWhile());
64:       assertFalse(node0.isHook());
65:       assertFalse(node0.isFalse());
66:       assertFalse(node0.isSwitch());
67:       assertFalse(node0.isBreak());
68:       assertEquals((-1), node0.getCharno());
69:       assertFalse(node0.isIn());
70:       assertFalse(node0.isInc());
71:       assertFalse(node0.isThrow());
72:       assertFalse(node0.isArrayLit());
73:       assertFalse(node0.hasOneChild());
74:       assertFalse(node0.isNE());
75:       assertFalse(node0.isNumber());
76:       assertFalse(node0.isGetterDef());
77:       assertFalse(node0.isLabelName());
78:       assertFalse(node0.isIf());
79:       assertFalse(node0.hasMoreThanOneChild());
80:       assertEquals((-1), node0.getLineno());
81:       assertFalse(node0.isCase());
82:       assertFalse(node0.isWith());
83:       assertFalse(node0.isInstanceOf());
84:       assertFalse(node0.isCatch());
85:       assertFalse(node0.isScript());
86:       assertFalse(node0.isRegExp());
87:       assertFalse(node0.isThis());
88:       assertFalse(node0.isFor());
89:       assertFalse(node0.isTry());
90:       assertFalse(node0.isBlock());
91:       assertEquals(47, Node.IS_DISPATCHER);
92:       assertEquals(56, Node.CHANGE_TIME);
93:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
94:       assertEquals(37, Node.OPT_ARG_NAME);
95:       assertEquals(2, Node.POST_FLAG);
96:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
97:       assertEquals(51, Node.STATIC_SOURCE_FILE);
98:       assertEquals(1, Node.DECR_FLAG);
99:       assertEquals(32, Node.INCRDECR_PROP);
100:       assertEquals(46, Node.IS_NAMESPACE);
101:       assertEquals(12, Node.COLUMN_BITS);
102:       assertEquals(43, Node.IS_CONSTANT_NAME);
103:       assertEquals(54, Node.SLASH_V);
104:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
105:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
106:       assertEquals(40, Node.ORIGINALNAME_PROP);
107:       assertEquals(50, Node.FREE_CALL);
108:       assertEquals(57, Node.REFLECTED_OBJECT);
109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
110:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
111:       assertEquals(48, Node.DIRECTIVES);
112:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
113:       assertEquals(4095, Node.COLUMN_MASK);
114:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
115:       assertEquals(49, Node.DIRECT_EVAL);
116:       assertEquals(30, Node.VAR_ARGS_NAME);
117:       assertEquals(57, Node.LAST_PROP);
118:       assertEquals(8, Node.FLAG_NO_THROWS);
119:       assertEquals(39, Node.EMPTY_BLOCK);
120:       assertEquals(36, Node.QUOTED_PROP);
121:       assertEquals(52, Node.LENGTH);
122:       assertEquals(15, Node.NO_SIDE_EFFECTS);
123:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
124:       assertEquals(29, Node.JSDOC_INFO_PROP);
125:       assertEquals(53, Node.INPUT_ID);
126:       assertEquals(55, Node.INFERRED_FUNCTION);
127:       assertNotNull(node0);
128:       
129:       Node node1 = new Node((-1380), node0, 0, (-192));
130:       assertFalse(node1.equals((Object)node0));
131:       assertFalse(node0.isVar());
132:       assertFalse(node0.isCall());
133:       assertFalse(node0.isAdd());
134:       assertFalse(node0.isNull());
135:       assertFalse(node0.isName());
136:       assertFalse(node0.isParamList());
137:       assertFalse(node0.isStringKey());
138:       assertEquals(0, node0.getChildCount());
139:       assertFalse(node0.isOr());
140:       assertFalse(node0.isContinue());
141:       assertFalse(node0.isFunction());
142:       assertFalse(node0.isSetterDef());
143:       assertFalse(node0.isNew());
144:       assertFalse(node0.isLabel());
145:       assertFalse(node0.isDo());
146:       assertFalse(node0.isAssignAdd());
147:       assertFalse(node0.isDefaultCase());
148:       assertFalse(node0.isCast());
149:       assertFalse(node0.isAssign());
150:       assertFalse(node0.isEmpty());
151:       assertFalse(node0.isGetElem());
152:       assertFalse(node0.isExprResult());
153:       assertFalse(node0.isTrue());
154:       assertFalse(node0.isDelProp());
155:       assertFalse(node0.isDebugger());
156:       assertFalse(node0.isVoid());
157:       assertEquals((-1), node0.getSourcePosition());
158:       assertEquals((-1033), node0.getType());
159:       assertFalse(node0.isAnd());
160:       assertFalse(node0.isObjectLit());
161:       assertFalse(node0.isNot());
162:       assertFalse(node0.isString());
163:       assertFalse(node0.isTypeOf());
164:       assertFalse(node0.hasChildren());
165:       assertFalse(node0.isGetProp());
166:       assertFalse(node0.isDec());
167:       assertFalse(node0.isComma());
168:       assertFalse(node0.isReturn());
169:       assertFalse(node0.isWhile());
170:       assertFalse(node0.isHook());
171:       assertFalse(node0.isFalse());
172:       assertFalse(node0.isSwitch());
173:       assertFalse(node0.isBreak());
174:       assertEquals((-1), node0.getCharno());
175:       assertFalse(node0.isIn());
176:       assertFalse(node0.isInc());
177:       assertFalse(node0.isThrow());
178:       assertFalse(node0.isArrayLit());
179:       assertFalse(node0.hasOneChild());
180:       assertFalse(node0.isNE());
181:       assertFalse(node0.isNumber());
182:       assertFalse(node0.isGetterDef());
183:       assertFalse(node0.isLabelName());
184:       assertFalse(node0.isIf());
185:       assertFalse(node0.hasMoreThanOneChild());
186:       assertEquals((-1), node0.getLineno());
187:       assertFalse(node0.isCase());
188:       assertFalse(node0.isWith());
189:       assertFalse(node0.isInstanceOf());
190:       assertFalse(node0.isCatch());
191:       assertFalse(node0.isScript());
192:       assertFalse(node0.isRegExp());
193:       assertFalse(node0.isThis());
194:       assertFalse(node0.isFor());
195:       assertFalse(node0.isTry());
196:       assertFalse(node0.isBlock());
197:       assertFalse(node1.isNew());
198:       assertFalse(node1.isBlock());
199:       assertFalse(node1.isAdd());
200:       assertFalse(node1.isVar());
201:       assertFalse(node1.isDo());
202:       assertFalse(node1.isWhile());
203:       assertFalse(node1.isSetterDef());
204:       assertFalse(node1.isParamList());
205:       assertFalse(node1.isAssignAdd());
206:       assertFalse(node1.isNumber());
207:       assertEquals((-1), node1.getSourcePosition());
208:       assertFalse(node1.isLabel());
209:       assertFalse(node1.isStringKey());
210:       assertFalse(node1.isLabelName());
211:       assertFalse(node1.isContinue());
212:       assertFalse(node1.isCast());
213:       assertFalse(node1.isVoid());
214:       assertFalse(node1.isDebugger());
215:       assertFalse(node1.isTrue());
216:       assertFalse(node1.isNot());
217:       assertFalse(node1.isEmpty());
218:       assertFalse(node1.isObjectLit());
219:       assertFalse(node1.isDefaultCase());
220:       assertFalse(node1.isOr());
221:       assertFalse(node1.isDec());
222:       assertFalse(node1.isTypeOf());
223:       assertFalse(node1.isNull());
224:       assertFalse(node1.isComma());
225:       assertFalse(node1.isReturn());
226:       assertTrue(node1.hasOneChild());
227:       assertFalse(node1.isGetElem());
228:       assertFalse(node1.isName());
229:       assertFalse(node1.isAssign());
230:       assertFalse(node1.isDelProp());
231:       assertFalse(node1.isExprResult());
232:       assertFalse(node1.isCall());
233:       assertFalse(node1.isBreak());
234:       assertFalse(node1.isSwitch());
235:       assertFalse(node1.isHook());
236:       assertEquals((-1), node1.getCharno());
237:       assertFalse(node1.isCase());
238:       assertFalse(node1.isThrow());
239:       assertFalse(node1.isString());
240:       assertFalse(node1.isInc());
241:       assertFalse(node1.isGetProp());
242:       assertFalse(node1.isGetterDef());
243:       assertFalse(node1.isFalse());
244:       assertFalse(node1.isAnd());
245:       assertFalse(node1.isArrayLit());
246:       assertEquals((-1380), node1.getType());
247:       assertFalse(node1.isTry());
248:       assertFalse(node1.isFunction());
249:       assertFalse(node1.isRegExp());
250:       assertFalse(node1.isFor());
251:       assertFalse(node1.isScript());
252:       assertTrue(node1.hasChildren());
253:       assertFalse(node1.isIn());
254:       assertFalse(node1.isNE());
255:       assertEquals(1, node1.getChildCount());
256:       assertFalse(node1.isThis());
257:       assertFalse(node1.isWith());
258:       assertFalse(node1.hasMoreThanOneChild());
259:       assertFalse(node1.isIf());
260:       assertFalse(node1.isInstanceOf());
261:       assertFalse(node1.isCatch());
262:       assertEquals((-1), node1.getLineno());
263:       assertEquals(47, Node.IS_DISPATCHER);
264:       assertEquals(56, Node.CHANGE_TIME);
265:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
266:       assertEquals(37, Node.OPT_ARG_NAME);
267:       assertEquals(2, Node.POST_FLAG);
268:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
269:       assertEquals(51, Node.STATIC_SOURCE_FILE);
270:       assertEquals(1, Node.DECR_FLAG);
271:       assertEquals(32, Node.INCRDECR_PROP);
272:       assertEquals(46, Node.IS_NAMESPACE);
273:       assertEquals(12, Node.COLUMN_BITS);
274:       assertEquals(43, Node.IS_CONSTANT_NAME);
275:       assertEquals(54, Node.SLASH_V);
276:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
277:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
278:       assertEquals(40, Node.ORIGINALNAME_PROP);
279:       assertEquals(50, Node.FREE_CALL);
280:       assertEquals(57, Node.REFLECTED_OBJECT);
281:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
282:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
283:       assertEquals(48, Node.DIRECTIVES);
284:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
285:       assertEquals(4095, Node.COLUMN_MASK);
286:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
287:       assertEquals(49, Node.DIRECT_EVAL);
288:       assertEquals(30, Node.VAR_ARGS_NAME);
289:       assertEquals(57, Node.LAST_PROP);
290:       assertEquals(8, Node.FLAG_NO_THROWS);
291:       assertEquals(39, Node.EMPTY_BLOCK);
292:       assertEquals(36, Node.QUOTED_PROP);
293:       assertEquals(52, Node.LENGTH);
294:       assertEquals(15, Node.NO_SIDE_EFFECTS);
295:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
296:       assertEquals(29, Node.JSDOC_INFO_PROP);
297:       assertEquals(53, Node.INPUT_ID);
298:       assertEquals(55, Node.INFERRED_FUNCTION);
299:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
300:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
301:       assertEquals(53, Node.INPUT_ID);
302:       assertEquals(29, Node.JSDOC_INFO_PROP);
303:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
304:       assertEquals(43, Node.IS_CONSTANT_NAME);
305:       assertEquals(56, Node.CHANGE_TIME);
306:       assertEquals(36, Node.QUOTED_PROP);
307:       assertEquals(32, Node.INCRDECR_PROP);
308:       assertEquals(4095, Node.COLUMN_MASK);
309:       assertEquals(48, Node.DIRECTIVES);
310:       assertEquals(1, Node.DECR_FLAG);
311:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
312:       assertEquals(37, Node.OPT_ARG_NAME);
313:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
314:       assertEquals(12, Node.COLUMN_BITS);
315:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
316:       assertEquals(52, Node.LENGTH);
317:       assertEquals(40, Node.ORIGINALNAME_PROP);
318:       assertEquals(15, Node.NO_SIDE_EFFECTS);
319:       assertEquals(49, Node.DIRECT_EVAL);
320:       assertEquals(50, Node.FREE_CALL);
321:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
322:       assertEquals(8, Node.FLAG_NO_THROWS);
323:       assertEquals(54, Node.SLASH_V);
324:       assertEquals(51, Node.STATIC_SOURCE_FILE);
325:       assertEquals(57, Node.REFLECTED_OBJECT);
326:       assertEquals(46, Node.IS_NAMESPACE);
327:       assertEquals(55, Node.INFERRED_FUNCTION);
328:       assertEquals(39, Node.EMPTY_BLOCK);
329:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
330:       assertEquals(30, Node.VAR_ARGS_NAME);
331:       assertEquals(57, Node.LAST_PROP);
332:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
333:       assertEquals(2, Node.POST_FLAG);
334:       assertEquals(47, Node.IS_DISPATCHER);
335:       assertNotNull(node1);
336:       
337:       node1.putIntProp(4095, (-2997));
338:       assertFalse(node0.equals((Object)node1));
339:       assertFalse(node1.equals((Object)node0));
340:       assertFalse(node0.isVar());
341:       assertFalse(node0.isCall());
342:       assertFalse(node0.isAdd());
343:       assertFalse(node0.isNull());
344:       assertFalse(node0.isName());
345:       assertFalse(node0.isParamList());
346:       assertFalse(node0.isStringKey());
347:       assertEquals(0, node0.getChildCount());
348:       assertFalse(node0.isOr());
349:       assertFalse(node0.isContinue());
350:       assertFalse(node0.isFunction());
351:       assertFalse(node0.isSetterDef());
352:       assertFalse(node0.isNew());
353:       assertFalse(node0.isLabel());
354:       assertFalse(node0.isDo());
355:       assertFalse(node0.isAssignAdd());
356:       assertFalse(node0.isDefaultCase());
357:       assertFalse(node0.isCast());
358:       assertFalse(node0.isAssign());
359:       assertFalse(node0.isEmpty());
360:       assertFalse(node0.isGetElem());
361:       assertFalse(node0.isExprResult());
362:       assertFalse(node0.isTrue());
363:       assertFalse(node0.isDelProp());
364:       assertFalse(node0.isDebugger());
365:       assertFalse(node0.isVoid());
366:       assertEquals((-1), node0.getSourcePosition());
367:       assertEquals((-1033), node0.getType());
368:       assertFalse(node0.isAnd());
369:       assertFalse(node0.isObjectLit());
370:       assertFalse(node0.isNot());
371:       assertFalse(node0.isString());
372:       assertFalse(node0.isTypeOf());
373:       assertFalse(node0.hasChildren());
374:       assertFalse(node0.isGetProp());
375:       assertFalse(node0.isDec());
376:       assertFalse(node0.isComma());
377:       assertFalse(node0.isReturn());
378:       assertFalse(node0.isWhile());
379:       assertFalse(node0.isHook());
380:       assertFalse(node0.isFalse());
381:       assertFalse(node0.isSwitch());
382:       assertFalse(node0.isBreak());
383:       assertEquals((-1), node0.getCharno());
384:       assertFalse(node0.isIn());
385:       assertFalse(node0.isInc());
386:       assertFalse(node0.isThrow());
387:       assertFalse(node0.isArrayLit());
388:       assertFalse(node0.hasOneChild());
389:       assertFalse(node0.isNE());
390:       assertFalse(node0.isNumber());
391:       assertFalse(node0.isGetterDef());
392:       assertFalse(node0.isLabelName());
393:       assertFalse(node0.isIf());
394:       assertFalse(node0.hasMoreThanOneChild());
395:       assertEquals((-1), node0.getLineno());
396:       assertFalse(node0.isCase());
397:       assertFalse(node0.isWith());
398:       assertFalse(node0.isInstanceOf());
399:       assertFalse(node0.isCatch());
400:       assertFalse(node0.isScript());
401:       assertFalse(node0.isRegExp());
402:       assertFalse(node0.isThis());
403:       assertFalse(node0.isFor());
404:       assertFalse(node0.isTry());
405:       assertFalse(node0.isBlock());
406:       assertFalse(node1.isNew());
407:       assertFalse(node1.isBlock());
408:       assertFalse(node1.isAdd());
409:       assertFalse(node1.isVar());
410:       assertFalse(node1.isDo());
411:       assertFalse(node1.isWhile());
412:       assertFalse(node1.isSetterDef());
413:       assertFalse(node1.isParamList());
414:       assertFalse(node1.isAssignAdd());
415:       assertFalse(node1.isNumber());
416:       assertEquals((-1), node1.getSourcePosition());
417:       assertFalse(node1.isLabel());
418:       assertFalse(node1.isStringKey());
419:       assertFalse(node1.isLabelName());
420:       assertFalse(node1.isContinue());
421:       assertFalse(node1.isCast());
422:       assertFalse(node1.isVoid());
423:       assertFalse(node1.isDebugger());
424:       assertFalse(node1.isTrue());
425:       assertFalse(node1.isNot());
426:       assertFalse(node1.isEmpty());
427:       assertFalse(node1.isObjectLit());
428:       assertFalse(node1.isDefaultCase());
429:       assertFalse(node1.isOr());
430:       assertFalse(node1.isDec());
431:       assertFalse(node1.isTypeOf());
432:       assertFalse(node1.isNull());
433:       assertFalse(node1.isComma());
434:       assertFalse(node1.isReturn());
435:       assertTrue(node1.hasOneChild());
436:       assertFalse(node1.isGetElem());
437:       assertFalse(node1.isName());
438:       assertFalse(node1.isAssign());
439:       assertFalse(node1.isDelProp());
440:       assertFalse(node1.isExprResult());
441:       assertFalse(node1.isCall());
442:       assertFalse(node1.isBreak());
443:       assertFalse(node1.isSwitch());
444:       assertFalse(node1.isHook());
445:       assertEquals((-1), node1.getCharno());
446:       assertFalse(node1.isCase());
447:       assertFalse(node1.isThrow());
448:       assertFalse(node1.isString());
449:       assertFalse(node1.isInc());
450:       assertFalse(node1.isGetProp());
451:       assertFalse(node1.isGetterDef());
452:       assertFalse(node1.isFalse());
453:       assertFalse(node1.isAnd());
454:       assertFalse(node1.isArrayLit());
455:       assertEquals((-1380), node1.getType());
456:       assertFalse(node1.isTry());
457:       assertFalse(node1.isFunction());
458:       assertFalse(node1.isRegExp());
459:       assertFalse(node1.isFor());
460:       assertFalse(node1.isScript());
461:       assertTrue(node1.hasChildren());
462:       assertFalse(node1.isIn());
463:       assertFalse(node1.isNE());
464:       assertEquals(1, node1.getChildCount());
465:       assertFalse(node1.isThis());
466:       assertFalse(node1.isWith());
467:       assertFalse(node1.hasMoreThanOneChild());
468:       assertFalse(node1.isIf());
469:       assertFalse(node1.isInstanceOf());
470:       assertFalse(node1.isCatch());
471:       assertEquals((-1), node1.getLineno());
472:       assertEquals(47, Node.IS_DISPATCHER);
473:       assertEquals(56, Node.CHANGE_TIME);
474:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
475:       assertEquals(37, Node.OPT_ARG_NAME);
476:       assertEquals(2, Node.POST_FLAG);
477:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
478:       assertEquals(51, Node.STATIC_SOURCE_FILE);
479:       assertEquals(1, Node.DECR_FLAG);
480:       assertEquals(32, Node.INCRDECR_PROP);
481:       assertEquals(46, Node.IS_NAMESPACE);
482:       assertEquals(12, Node.COLUMN_BITS);
483:       assertEquals(43, Node.IS_CONSTANT_NAME);
484:       assertEquals(54, Node.SLASH_V);
485:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
486:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
487:       assertEquals(40, Node.ORIGINALNAME_PROP);
488:       assertEquals(50, Node.FREE_CALL);
489:       assertEquals(57, Node.REFLECTED_OBJECT);
490:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
491:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
492:       assertEquals(48, Node.DIRECTIVES);
493:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
494:       assertEquals(4095, Node.COLUMN_MASK);
495:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
496:       assertEquals(49, Node.DIRECT_EVAL);
497:       assertEquals(30, Node.VAR_ARGS_NAME);
498:       assertEquals(57, Node.LAST_PROP);
499:       assertEquals(8, Node.FLAG_NO_THROWS);
500:       assertEquals(39, Node.EMPTY_BLOCK);
501:       assertEquals(36, Node.QUOTED_PROP);
502:       assertEquals(52, Node.LENGTH);
503:       assertEquals(15, Node.NO_SIDE_EFFECTS);
504:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
505:       assertEquals(29, Node.JSDOC_INFO_PROP);
506:       assertEquals(53, Node.INPUT_ID);
507:       assertEquals(55, Node.INFERRED_FUNCTION);
508:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
509:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
510:       assertEquals(53, Node.INPUT_ID);
511:       assertEquals(29, Node.JSDOC_INFO_PROP);
512:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
513:       assertEquals(43, Node.IS_CONSTANT_NAME);
514:       assertEquals(56, Node.CHANGE_TIME);
515:       assertEquals(36, Node.QUOTED_PROP);
516:       assertEquals(32, Node.INCRDECR_PROP);
517:       assertEquals(4095, Node.COLUMN_MASK);
518:       assertEquals(48, Node.DIRECTIVES);
519:       assertEquals(1, Node.DECR_FLAG);
520:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
521:       assertEquals(37, Node.OPT_ARG_NAME);
522:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
523:       assertEquals(12, Node.COLUMN_BITS);
524:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
525:       assertEquals(52, Node.LENGTH);
526:       assertEquals(40, Node.ORIGINALNAME_PROP);
527:       assertEquals(15, Node.NO_SIDE_EFFECTS);
528:       assertEquals(49, Node.DIRECT_EVAL);
529:       assertEquals(50, Node.FREE_CALL);
530:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
531:       assertEquals(8, Node.FLAG_NO_THROWS);
532:       assertEquals(54, Node.SLASH_V);
533:       assertEquals(51, Node.STATIC_SOURCE_FILE);
534:       assertEquals(57, Node.REFLECTED_OBJECT);
535:       assertEquals(46, Node.IS_NAMESPACE);
536:       assertEquals(55, Node.INFERRED_FUNCTION);
537:       assertEquals(39, Node.EMPTY_BLOCK);
538:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
539:       assertEquals(30, Node.VAR_ARGS_NAME);
540:       assertEquals(57, Node.LAST_PROP);
541:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
542:       assertEquals(2, Node.POST_FLAG);
543:       assertEquals(47, Node.IS_DISPATCHER);
544:       
545:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
546:       assertFalse(linkedHashSet0.contains(""));
547:       assertEquals(0, linkedHashSet0.size());
548:       assertTrue(linkedHashSet0.isEmpty());
549:       assertNotNull(linkedHashSet0);
550:       
551:       boolean boolean0 = linkedHashSet0.add("");
552:       assertTrue(boolean0);
553:       assertTrue(linkedHashSet0.contains(""));
554:       assertFalse(linkedHashSet0.isEmpty());
555:       assertEquals(1, linkedHashSet0.size());
556:       
557:       String string0 = "@3~| ~ Y_;JL";
558:       boolean boolean1 = false;
559:       SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("@3~| ~ Y_;JL", false);
560:       assertEquals("@3~| ~ Y_;JL", simpleSourceFile0.getName());
561:       assertFalse(simpleSourceFile0.isExtern());
562:       assertEquals("@3~| ~ Y_;JL", simpleSourceFile0.toString());
563:       assertNotNull(simpleSourceFile0);
564:       
565:       Iterable<Node> iterable0 = node0.children();
566:       assertFalse(node0.equals((Object)node1));
567:       assertFalse(iterable0.contains(node1));
568:       assertFalse(node0.isVar());
569:       assertFalse(node0.isCall());
570:       assertFalse(node0.isAdd());
571:       assertFalse(node0.isNull());
572:       assertFalse(node0.isName());
573:       assertFalse(node0.isParamList());
574:       assertFalse(node0.isStringKey());
575:       assertEquals(0, node0.getChildCount());
576:       assertFalse(node0.isOr());
577:       assertFalse(node0.isContinue());
578:       assertFalse(node0.isFunction());
579:       assertFalse(node0.isSetterDef());
580:       assertFalse(node0.isNew());
581:       assertFalse(node0.isLabel());
582:       assertFalse(node0.isDo());
583:       assertFalse(node0.isAssignAdd());
584:       assertFalse(node0.isDefaultCase());
585:       assertFalse(node0.isCast());
586:       assertFalse(node0.isAssign());
587:       assertFalse(node0.isEmpty());
588:       assertFalse(node0.isGetElem());
589:       assertFalse(node0.isExprResult());
590:       assertFalse(node0.isTrue());
591:       assertFalse(node0.isDelProp());
592:       assertFalse(node0.isDebugger());
593:       assertFalse(node0.isVoid());
594:       assertEquals((-1), node0.getSourcePosition());
595:       assertEquals((-1033), node0.getType());
596:       assertFalse(node0.isAnd());
597:       assertFalse(node0.isObjectLit());
598:       assertFalse(node0.isNot());
599:       assertFalse(node0.isString());
600:       assertFalse(node0.isTypeOf());
601:       assertFalse(node0.hasChildren());
602:       assertFalse(node0.isGetProp());
603:       assertFalse(node0.isDec());
604:       assertFalse(node0.isComma());
605:       assertFalse(node0.isReturn());
606:       assertFalse(node0.isWhile());
607:       assertFalse(node0.isHook());
608:       assertFalse(node0.isFalse());
609:       assertFalse(node0.isSwitch());
610:       assertFalse(node0.isBreak());
611:       assertEquals((-1), node0.getCharno());
612:       assertFalse(node0.isIn());
613:       assertFalse(node0.isInc());
614:       assertFalse(node0.isThrow());
615:       assertFalse(node0.isArrayLit());
616:       assertFalse(node0.hasOneChild());
617:       assertFalse(node0.isNE());
618:       assertFalse(node0.isNumber());
619:       assertFalse(node0.isGetterDef());
620:       assertFalse(node0.isLabelName());
621:       assertFalse(node0.isIf());
622:       assertFalse(node0.hasMoreThanOneChild());
623:       assertEquals((-1), node0.getLineno());
624:       assertFalse(node0.isCase());
625:       assertFalse(node0.isWith());
626:       assertFalse(node0.isInstanceOf());
627:       assertFalse(node0.isCatch());
628:       assertFalse(node0.isScript());
629:       assertFalse(node0.isRegExp());
630:       assertFalse(node0.isThis());
631:       assertFalse(node0.isFor());
632:       assertFalse(node0.isTry());
633:       assertFalse(node0.isBlock());
634:       assertEquals(47, Node.IS_DISPATCHER);
635:       assertEquals(56, Node.CHANGE_TIME);
636:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
637:       assertEquals(37, Node.OPT_ARG_NAME);
638:       assertEquals(2, Node.POST_FLAG);
639:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
640:       assertEquals(51, Node.STATIC_SOURCE_FILE);
641:       assertEquals(1, Node.DECR_FLAG);
642:       assertEquals(32, Node.INCRDECR_PROP);
643:       assertEquals(46, Node.IS_NAMESPACE);
644:       assertEquals(12, Node.COLUMN_BITS);
645:       assertEquals(43, Node.IS_CONSTANT_NAME);
646:       assertEquals(54, Node.SLASH_V);
647:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
648:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
649:       assertEquals(40, Node.ORIGINALNAME_PROP);
650:       assertEquals(50, Node.FREE_CALL);
651:       assertEquals(57, Node.REFLECTED_OBJECT);
652:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
653:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
654:       assertEquals(48, Node.DIRECTIVES);
655:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
656:       assertEquals(4095, Node.COLUMN_MASK);
657:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
658:       assertEquals(49, Node.DIRECT_EVAL);
659:       assertEquals(30, Node.VAR_ARGS_NAME);
660:       assertEquals(57, Node.LAST_PROP);
661:       assertEquals(8, Node.FLAG_NO_THROWS);
662:       assertEquals(39, Node.EMPTY_BLOCK);
663:       assertEquals(36, Node.QUOTED_PROP);
664:       assertEquals(52, Node.LENGTH);
665:       assertEquals(15, Node.NO_SIDE_EFFECTS);
666:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
667:       assertEquals(29, Node.JSDOC_INFO_PROP);
668:       assertEquals(53, Node.INPUT_ID);
669:       assertEquals(55, Node.INFERRED_FUNCTION);
670:       assertNotNull(iterable0);
671:       
672:       int int0 = simpleSourceFile0.getLineOffset(52);
673:       assertEquals(Integer.MIN_VALUE, int0);
674:       assertEquals("@3~| ~ Y_;JL", simpleSourceFile0.getName());
675:       assertFalse(simpleSourceFile0.isExtern());
676:       assertEquals("@3~| ~ Y_;JL", simpleSourceFile0.toString());
677:       
678:       int int1 = simpleSourceFile0.getLineOffset(57);
679:       assertTrue(int1 == int0);
680:       assertEquals(Integer.MIN_VALUE, int1);
681:       assertEquals("@3~| ~ Y_;JL", simpleSourceFile0.getName());
682:       assertFalse(simpleSourceFile0.isExtern());
683:       assertEquals("@3~| ~ Y_;JL", simpleSourceFile0.toString());
684:       
685:       node0.setDirectives(linkedHashSet0);
686:       assertFalse(node0.equals((Object)node1));
687:       assertTrue(linkedHashSet0.contains(""));
688:       assertFalse(linkedHashSet0.contains(string0));
689:       assertFalse(node0.isVar());
690:       assertFalse(node0.isCall());
691:       assertFalse(node0.isAdd());
692:       assertFalse(node0.isNull());
693:       assertFalse(node0.isName());
694:       assertFalse(node0.isParamList());
695:       assertFalse(node0.isStringKey());
696:       assertEquals(0, node0.getChildCount());
697:       assertFalse(node0.isOr());
698:       assertFalse(node0.isContinue());
699:       assertFalse(node0.isFunction());
700:       assertFalse(node0.isSetterDef());
701:       assertFalse(node0.isNew());
702:       assertFalse(node0.isLabel());
703:       assertFalse(node0.isDo());
704:       assertFalse(node0.isAssignAdd());
705:       assertFalse(node0.isDefaultCase());
706:       assertFalse(node0.isCast());
707:       assertFalse(node0.isAssign());
708:       assertFalse(node0.isEmpty());
709:       assertFalse(node0.isGetElem());
710:       assertFalse(node0.isExprResult());
711:       assertFalse(node0.isTrue());
712:       assertFalse(node0.isDelProp());
713:       assertFalse(node0.isDebugger());
714:       assertFalse(node0.isVoid());
715:       assertEquals((-1), node0.getSourcePosition());
716:       assertEquals((-1033), node0.getType());
717:       assertFalse(node0.isAnd());
718:       assertFalse(node0.isObjectLit());
719:       assertFalse(node0.isNot());
720:       assertFalse(node0.isString());
721:       assertFalse(node0.isTypeOf());
722:       assertFalse(node0.hasChildren());
723:       assertFalse(node0.isGetProp());
724:       assertFalse(node0.isDec());
725:       assertFalse(node0.isComma());
726:       assertFalse(node0.isReturn());
727:       assertFalse(node0.isWhile());
728:       assertFalse(node0.isHook());
729:       assertFalse(node0.isFalse());
730:       assertFalse(node0.isSwitch());
731:       assertFalse(node0.isBreak());
732:       assertEquals((-1), node0.getCharno());
733:       assertFalse(node0.isIn());
734:       assertFalse(node0.isInc());
735:       assertFalse(node0.isThrow());
736:       assertFalse(node0.isArrayLit());
737:       assertFalse(node0.hasOneChild());
738:       assertFalse(node0.isNE());
739:       assertFalse(node0.isNumber());
740:       assertFalse(node0.isGetterDef());
741:       assertFalse(node0.isLabelName());
742:       assertFalse(node0.isIf());
743:       assertFalse(node0.hasMoreThanOneChild());
744:       assertEquals((-1), node0.getLineno());
745:       assertFalse(node0.isCase());
746:       assertFalse(node0.isWith());
747:       assertFalse(node0.isInstanceOf());
748:       assertFalse(node0.isCatch());
749:       assertFalse(node0.isScript());
750:       assertFalse(node0.isRegExp());
751:       assertFalse(node0.isThis());
752:       assertFalse(node0.isFor());
753:       assertFalse(node0.isTry());
754:       assertFalse(node0.isBlock());
755:       assertFalse(linkedHashSet0.isEmpty());
756:       assertEquals(1, linkedHashSet0.size());
757:       assertEquals(47, Node.IS_DISPATCHER);
758:       assertEquals(56, Node.CHANGE_TIME);
759:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
760:       assertEquals(37, Node.OPT_ARG_NAME);
761:       assertEquals(2, Node.POST_FLAG);
762:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
763:       assertEquals(51, Node.STATIC_SOURCE_FILE);
764:       assertEquals(1, Node.DECR_FLAG);
765:       assertEquals(32, Node.INCRDECR_PROP);
766:       assertEquals(46, Node.IS_NAMESPACE);
767:       assertEquals(12, Node.COLUMN_BITS);
768:       assertEquals(43, Node.IS_CONSTANT_NAME);
769:       assertEquals(54, Node.SLASH_V);
770:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
771:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
772:       assertEquals(40, Node.ORIGINALNAME_PROP);
773:       assertEquals(50, Node.FREE_CALL);
774:       assertEquals(57, Node.REFLECTED_OBJECT);
775:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
776:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
777:       assertEquals(48, Node.DIRECTIVES);
778:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
779:       assertEquals(4095, Node.COLUMN_MASK);
780:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
781:       assertEquals(49, Node.DIRECT_EVAL);
782:       assertEquals(30, Node.VAR_ARGS_NAME);
783:       assertEquals(57, Node.LAST_PROP);
784:       assertEquals(8, Node.FLAG_NO_THROWS);
785:       assertEquals(39, Node.EMPTY_BLOCK);
786:       assertEquals(36, Node.QUOTED_PROP);
787:       assertEquals(52, Node.LENGTH);
788:       assertEquals(15, Node.NO_SIDE_EFFECTS);
789:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
790:       assertEquals(29, Node.JSDOC_INFO_PROP);
791:       assertEquals(53, Node.INPUT_ID);
792:       assertEquals(55, Node.INFERRED_FUNCTION);
793:       
794:       // Undeclared exception!
795:       try { 
796:         node1.addChildrenToFront(node0);
797:         fail("Expecting exception: IllegalArgumentException");
798:       
799:       } catch(IllegalArgumentException e) {
800:          //
801:          // no message in exception (getMessage() returned null)
802:          //
803:          verifyException("com.google.common.base.Preconditions", e);
804:       }
805:   }
806: }
RegularFileObject[/tmp/EvoSuite_166_1628159305926/com/google/javascript/rhino/Node_166_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:25 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_166_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_166_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
71:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_166_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.SimpleErrorReporter",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.JSDocInfo",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.javascript.rhino.JSTypeExpression",
342:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
343:       "com.google.common.collect.Sets",
344:       "com.google.common.base.Objects",
345:       "com.google.javascript.rhino.InputId",
346:       "com.google.javascript.rhino.jstype.TemplatizedType",
347:       "com.google.common.collect.AbstractIndexedListIterator",
348:       "com.google.common.collect.Iterators$11",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.common.collect.Iterables",
351:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
352:       "com.google.javascript.rhino.jstype.NamedType",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.javascript.rhino.jstype.TernaryValue",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.common.collect.FluentIterable",
358:       "com.google.common.collect.Iterables$2",
359:       "com.google.common.collect.TransformedIterator",
360:       "com.google.common.collect.Iterables$3",
361:       "com.google.common.collect.Iterators$5",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.common.collect.AbstractMultimap$Values",
364:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
365:       "com.google.common.collect.AbstractMapBasedMultimap$1",
366:       "com.google.common.collect.Multimaps$Entries",
367:       "com.google.common.collect.AbstractMultimap$Entries",
368:       "com.google.common.collect.AbstractMapBasedMultimap$2"
369:     );
370:   }
371: }

[MASTER] 10:28:26.015 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString((-1033), "", (-1033), (-489));
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1033), node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertNotNull(node0);

Node node1 = new Node((-1380), node0, 0, (-192));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1033), node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isNot());
assertFalse(node1.isEmpty());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isArrayLit());
assertEquals((-1380), node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertNotNull(node1);

node1.putIntProp(4095, (-2997));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1033), node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isNot());
assertFalse(node1.isEmpty());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isArrayLit());
assertEquals((-1380), node1.getType());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);

LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
assertFalse(linkedHashSet0.contains(""));
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertNotNull(linkedHashSet0);

boolean boolean0 = linkedHashSet0.add("");
assertTrue(boolean0);
assertTrue(linkedHashSet0.contains(""));
assertFalse(linkedHashSet0.isEmpty());
assertEquals(1, linkedHashSet0.size());

String string0 = "@3~| ~ Y_;JL";
boolean boolean1 = false;
SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("@3~| ~ Y_;JL", false);
assertEquals("@3~| ~ Y_;JL", simpleSourceFile0.getName());
assertFalse(simpleSourceFile0.isExtern());
assertEquals("@3~| ~ Y_;JL", simpleSourceFile0.toString());
assertNotNull(simpleSourceFile0);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node1));
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1033), node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertNotNull(iterable0);

int int0 = simpleSourceFile0.getLineOffset(52);
assertEquals(Integer.MIN_VALUE, int0);
assertEquals("@3~| ~ Y_;JL", simpleSourceFile0.getName());
assertFalse(simpleSourceFile0.isExtern());
assertEquals("@3~| ~ Y_;JL", simpleSourceFile0.toString());

int int1 = simpleSourceFile0.getLineOffset(57);
assertTrue(int1 == int0);
assertEquals(Integer.MIN_VALUE, int1);
assertEquals("@3~| ~ Y_;JL", simpleSourceFile0.getName());
assertFalse(simpleSourceFile0.isExtern());
assertEquals("@3~| ~ Y_;JL", simpleSourceFile0.toString());

node0.setDirectives(linkedHashSet0);
assertFalse(node0.equals((Object)node1));
assertTrue(linkedHashSet0.contains(""));
assertFalse(linkedHashSet0.contains(string0));
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1033), node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(linkedHashSet0.isEmpty());
assertEquals(1, linkedHashSet0.size());
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);

node1.addChildrenToFront(node0);

[MASTER] 10:28:27.118 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_169_1628159306588/com/google/javascript/rhino/Node_169_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_169_1628159306588/com/google/javascript/rhino/Node_169_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:27.118 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:27.118 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:27.152 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2401
[MASTER] 10:28:27.155 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_169_1628159306588/com/google/javascript/rhino/Node_169_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:26 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_169_tmp__ESTest extends Node_169_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(".");
21:       assertFalse(node0.isNot());
22:       assertFalse(node0.isScript());
23:       assertFalse(node0.isInstanceOf());
24:       assertFalse(node0.isObjectLit());
25:       assertFalse(node0.isWith());
26:       assertFalse(node0.isComma());
27:       assertFalse(node0.isThis());
28:       assertFalse(node0.isGetProp());
29:       assertFalse(node0.hasOneChild());
30:       assertFalse(node0.isLabelName());
31:       assertFalse(node0.isThrow());
32:       assertEquals((-1), node0.getSourcePosition());
33:       assertFalse(node0.isCast());
34:       assertFalse(node0.isNumber());
35:       assertFalse(node0.isFalse());
36:       assertEquals((-1), node0.getCharno());
37:       assertFalse(node0.isAnd());
38:       assertFalse(node0.isSwitch());
39:       assertFalse(node0.isCase());
40:       assertFalse(node0.isContinue());
41:       assertFalse(node0.hasMoreThanOneChild());
42:       assertFalse(node0.isIn());
43:       assertFalse(node0.isBlock());
44:       assertTrue(node0.isString());
45:       assertFalse(node0.isInc());
46:       assertFalse(node0.isHook());
47:       assertFalse(node0.isFor());
48:       assertEquals((-1), node0.getLineno());
49:       assertFalse(node0.isNE());
50:       assertFalse(node0.isIf());
51:       assertEquals(40, node0.getType());
52:       assertFalse(node0.isRegExp());
53:       assertEquals(0, node0.getChildCount());
54:       assertFalse(node0.isCatch());
55:       assertFalse(node0.isFunction());
56:       assertFalse(node0.isTry());
57:       assertFalse(node0.isSetterDef());
58:       assertFalse(node0.isDefaultCase());
59:       assertFalse(node0.isStringKey());
60:       assertFalse(node0.isGetterDef());
61:       assertFalse(node0.isDebugger());
62:       assertFalse(node0.isArrayLit());
63:       assertFalse(node0.isParamList());
64:       assertFalse(node0.isDo());
65:       assertFalse(node0.isNew());
66:       assertFalse(node0.isAdd());
67:       assertFalse(node0.isReturn());
68:       assertFalse(node0.isLabel());
69:       assertFalse(node0.isVar());
70:       assertFalse(node0.isWhile());
71:       assertFalse(node0.isAssignAdd());
72:       assertFalse(node0.isGetElem());
73:       assertFalse(node0.isName());
74:       assertFalse(node0.isAssign());
75:       assertFalse(node0.isEmpty());
76:       assertFalse(node0.isCall());
77:       assertFalse(node0.isBreak());
78:       assertFalse(node0.hasChildren());
79:       assertFalse(node0.isTypeOf());
80:       assertFalse(node0.isDec());
81:       assertFalse(node0.isOr());
82:       assertFalse(node0.isVoid());
83:       assertFalse(node0.isExprResult());
84:       assertFalse(node0.isTrue());
85:       assertFalse(node0.isNull());
86:       assertFalse(node0.isDelProp());
87:       assertEquals(30, Node.VAR_ARGS_NAME);
88:       assertEquals(49, Node.DIRECT_EVAL);
89:       assertEquals(15, Node.NO_SIDE_EFFECTS);
90:       assertEquals(1, Node.DECR_FLAG);
91:       assertEquals(54, Node.SLASH_V);
92:       assertEquals(57, Node.LAST_PROP);
93:       assertEquals(32, Node.INCRDECR_PROP);
94:       assertEquals(46, Node.IS_NAMESPACE);
95:       assertEquals(51, Node.STATIC_SOURCE_FILE);
96:       assertEquals(57, Node.REFLECTED_OBJECT);
97:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
98:       assertEquals(52, Node.LENGTH);
99:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
100:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
101:       assertEquals(37, Node.OPT_ARG_NAME);
102:       assertEquals(48, Node.DIRECTIVES);
103:       assertEquals(56, Node.CHANGE_TIME);
104:       assertEquals(12, Node.COLUMN_BITS);
105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
106:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
107:       assertEquals(4095, Node.COLUMN_MASK);
108:       assertEquals(36, Node.QUOTED_PROP);
109:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
110:       assertEquals(43, Node.IS_CONSTANT_NAME);
111:       assertEquals(53, Node.INPUT_ID);
112:       assertEquals(8, Node.FLAG_NO_THROWS);
113:       assertEquals(39, Node.EMPTY_BLOCK);
114:       assertEquals(55, Node.INFERRED_FUNCTION);
115:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
116:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
117:       assertEquals(29, Node.JSDOC_INFO_PROP);
118:       assertEquals(50, Node.FREE_CALL);
119:       assertEquals(47, Node.IS_DISPATCHER);
120:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
121:       assertEquals(40, Node.ORIGINALNAME_PROP);
122:       assertEquals(2, Node.POST_FLAG);
123:       
124:       node0.getProp(4095);
125:       assertFalse(node0.isNot());
126:       assertFalse(node0.isScript());
127:       assertFalse(node0.isInstanceOf());
128:       assertFalse(node0.isObjectLit());
129:       assertFalse(node0.isWith());
130:       assertFalse(node0.isComma());
131:       assertFalse(node0.isThis());
132:       assertFalse(node0.isGetProp());
133:       assertFalse(node0.hasOneChild());
134:       assertFalse(node0.isLabelName());
135:       assertFalse(node0.isThrow());
136:       assertEquals((-1), node0.getSourcePosition());
137:       assertFalse(node0.isCast());
138:       assertFalse(node0.isNumber());
139:       assertFalse(node0.isFalse());
140:       assertEquals((-1), node0.getCharno());
141:       assertFalse(node0.isAnd());
142:       assertFalse(node0.isSwitch());
143:       assertFalse(node0.isCase());
144:       assertFalse(node0.isContinue());
145:       assertFalse(node0.hasMoreThanOneChild());
146:       assertFalse(node0.isIn());
147:       assertFalse(node0.isBlock());
148:       assertTrue(node0.isString());
149:       assertFalse(node0.isInc());
150:       assertFalse(node0.isHook());
151:       assertFalse(node0.isFor());
152:       assertEquals((-1), node0.getLineno());
153:       assertFalse(node0.isNE());
154:       assertFalse(node0.isIf());
155:       assertEquals(40, node0.getType());
156:       assertFalse(node0.isRegExp());
157:       assertEquals(0, node0.getChildCount());
158:       assertFalse(node0.isCatch());
159:       assertFalse(node0.isFunction());
160:       assertFalse(node0.isTry());
161:       assertFalse(node0.isSetterDef());
162:       assertFalse(node0.isDefaultCase());
163:       assertFalse(node0.isStringKey());
164:       assertFalse(node0.isGetterDef());
165:       assertFalse(node0.isDebugger());
166:       assertFalse(node0.isArrayLit());
167:       assertFalse(node0.isParamList());
168:       assertFalse(node0.isDo());
169:       assertFalse(node0.isNew());
170:       assertFalse(node0.isAdd());
171:       assertFalse(node0.isReturn());
172:       assertFalse(node0.isLabel());
173:       assertFalse(node0.isVar());
174:       assertFalse(node0.isWhile());
175:       assertFalse(node0.isAssignAdd());
176:       assertFalse(node0.isGetElem());
177:       assertFalse(node0.isName());
178:       assertFalse(node0.isAssign());
179:       assertFalse(node0.isEmpty());
180:       assertFalse(node0.isCall());
181:       assertFalse(node0.isBreak());
182:       assertFalse(node0.hasChildren());
183:       assertFalse(node0.isTypeOf());
184:       assertFalse(node0.isDec());
185:       assertFalse(node0.isOr());
186:       assertFalse(node0.isVoid());
187:       assertFalse(node0.isExprResult());
188:       assertFalse(node0.isTrue());
189:       assertFalse(node0.isNull());
190:       assertFalse(node0.isDelProp());
191:       assertEquals(30, Node.VAR_ARGS_NAME);
192:       assertEquals(49, Node.DIRECT_EVAL);
193:       assertEquals(15, Node.NO_SIDE_EFFECTS);
194:       assertEquals(1, Node.DECR_FLAG);
195:       assertEquals(54, Node.SLASH_V);
196:       assertEquals(57, Node.LAST_PROP);
197:       assertEquals(32, Node.INCRDECR_PROP);
198:       assertEquals(46, Node.IS_NAMESPACE);
199:       assertEquals(51, Node.STATIC_SOURCE_FILE);
200:       assertEquals(57, Node.REFLECTED_OBJECT);
201:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
202:       assertEquals(52, Node.LENGTH);
203:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
204:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
205:       assertEquals(37, Node.OPT_ARG_NAME);
206:       assertEquals(48, Node.DIRECTIVES);
207:       assertEquals(56, Node.CHANGE_TIME);
208:       assertEquals(12, Node.COLUMN_BITS);
209:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
210:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
211:       assertEquals(4095, Node.COLUMN_MASK);
212:       assertEquals(36, Node.QUOTED_PROP);
213:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
214:       assertEquals(43, Node.IS_CONSTANT_NAME);
215:       assertEquals(53, Node.INPUT_ID);
216:       assertEquals(8, Node.FLAG_NO_THROWS);
217:       assertEquals(39, Node.EMPTY_BLOCK);
218:       assertEquals(55, Node.INFERRED_FUNCTION);
219:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
220:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
221:       assertEquals(29, Node.JSDOC_INFO_PROP);
222:       assertEquals(50, Node.FREE_CALL);
223:       assertEquals(47, Node.IS_DISPATCHER);
224:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
225:       assertEquals(40, Node.ORIGINALNAME_PROP);
226:       assertEquals(2, Node.POST_FLAG);
227:       
228:       boolean boolean0 = node0.isVoid();
229:       assertFalse(boolean0);
230:       assertFalse(node0.isNot());
231:       assertFalse(node0.isScript());
232:       assertFalse(node0.isInstanceOf());
233:       assertFalse(node0.isObjectLit());
234:       assertFalse(node0.isWith());
235:       assertFalse(node0.isComma());
236:       assertFalse(node0.isThis());
237:       assertFalse(node0.isGetProp());
238:       assertFalse(node0.hasOneChild());
239:       assertFalse(node0.isLabelName());
240:       assertFalse(node0.isThrow());
241:       assertEquals((-1), node0.getSourcePosition());
242:       assertFalse(node0.isCast());
243:       assertFalse(node0.isNumber());
244:       assertFalse(node0.isFalse());
245:       assertEquals((-1), node0.getCharno());
246:       assertFalse(node0.isAnd());
247:       assertFalse(node0.isSwitch());
248:       assertFalse(node0.isCase());
249:       assertFalse(node0.isContinue());
250:       assertFalse(node0.hasMoreThanOneChild());
251:       assertFalse(node0.isIn());
252:       assertFalse(node0.isBlock());
253:       assertTrue(node0.isString());
254:       assertFalse(node0.isInc());
255:       assertFalse(node0.isHook());
256:       assertFalse(node0.isFor());
257:       assertEquals((-1), node0.getLineno());
258:       assertFalse(node0.isNE());
259:       assertFalse(node0.isIf());
260:       assertEquals(40, node0.getType());
261:       assertFalse(node0.isRegExp());
262:       assertEquals(0, node0.getChildCount());
263:       assertFalse(node0.isCatch());
264:       assertFalse(node0.isFunction());
265:       assertFalse(node0.isTry());
266:       assertFalse(node0.isSetterDef());
267:       assertFalse(node0.isDefaultCase());
268:       assertFalse(node0.isStringKey());
269:       assertFalse(node0.isGetterDef());
270:       assertFalse(node0.isDebugger());
271:       assertFalse(node0.isArrayLit());
272:       assertFalse(node0.isParamList());
273:       assertFalse(node0.isDo());
274:       assertFalse(node0.isNew());
275:       assertFalse(node0.isAdd());
276:       assertFalse(node0.isReturn());
277:       assertFalse(node0.isLabel());
278:       assertFalse(node0.isVar());
279:       assertFalse(node0.isWhile());
280:       assertFalse(node0.isAssignAdd());
281:       assertFalse(node0.isGetElem());
282:       assertFalse(node0.isName());
283:       assertFalse(node0.isAssign());
284:       assertFalse(node0.isEmpty());
285:       assertFalse(node0.isCall());
286:       assertFalse(node0.isBreak());
287:       assertFalse(node0.hasChildren());
288:       assertFalse(node0.isTypeOf());
289:       assertFalse(node0.isDec());
290:       assertFalse(node0.isOr());
291:       assertFalse(node0.isVoid());
292:       assertFalse(node0.isExprResult());
293:       assertFalse(node0.isTrue());
294:       assertFalse(node0.isNull());
295:       assertFalse(node0.isDelProp());
296:       assertEquals(30, Node.VAR_ARGS_NAME);
297:       assertEquals(49, Node.DIRECT_EVAL);
298:       assertEquals(15, Node.NO_SIDE_EFFECTS);
299:       assertEquals(1, Node.DECR_FLAG);
300:       assertEquals(54, Node.SLASH_V);
301:       assertEquals(57, Node.LAST_PROP);
302:       assertEquals(32, Node.INCRDECR_PROP);
303:       assertEquals(46, Node.IS_NAMESPACE);
304:       assertEquals(51, Node.STATIC_SOURCE_FILE);
305:       assertEquals(57, Node.REFLECTED_OBJECT);
306:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
307:       assertEquals(52, Node.LENGTH);
308:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
309:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
310:       assertEquals(37, Node.OPT_ARG_NAME);
311:       assertEquals(48, Node.DIRECTIVES);
312:       assertEquals(56, Node.CHANGE_TIME);
313:       assertEquals(12, Node.COLUMN_BITS);
314:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
315:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
316:       assertEquals(4095, Node.COLUMN_MASK);
317:       assertEquals(36, Node.QUOTED_PROP);
318:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
319:       assertEquals(43, Node.IS_CONSTANT_NAME);
320:       assertEquals(53, Node.INPUT_ID);
321:       assertEquals(8, Node.FLAG_NO_THROWS);
322:       assertEquals(39, Node.EMPTY_BLOCK);
323:       assertEquals(55, Node.INFERRED_FUNCTION);
324:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
325:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
326:       assertEquals(29, Node.JSDOC_INFO_PROP);
327:       assertEquals(50, Node.FREE_CALL);
328:       assertEquals(47, Node.IS_DISPATCHER);
329:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
330:       assertEquals(40, Node.ORIGINALNAME_PROP);
331:       assertEquals(2, Node.POST_FLAG);
332:       
333:       Node node1 = new Node(49, node0, node0, node0, node0, 53, 2);
334:       assertFalse(node1.equals((Object)node0));
335:       assertFalse(node0.isNot());
336:       assertFalse(node0.isScript());
337:       assertFalse(node0.isInstanceOf());
338:       assertFalse(node0.isObjectLit());
339:       assertFalse(node0.isWith());
340:       assertFalse(node0.isComma());
341:       assertFalse(node0.isThis());
342:       assertFalse(node0.isGetProp());
343:       assertFalse(node0.hasOneChild());
344:       assertFalse(node0.isLabelName());
345:       assertFalse(node0.isThrow());
346:       assertEquals((-1), node0.getSourcePosition());
347:       assertFalse(node0.isCast());
348:       assertFalse(node0.isNumber());
349:       assertFalse(node0.isFalse());
350:       assertEquals((-1), node0.getCharno());
351:       assertFalse(node0.isAnd());
352:       assertFalse(node0.isSwitch());
353:       assertFalse(node0.isCase());
354:       assertFalse(node0.isContinue());
355:       assertFalse(node0.hasMoreThanOneChild());
356:       assertFalse(node0.isIn());
357:       assertFalse(node0.isBlock());
358:       assertTrue(node0.isString());
359:       assertFalse(node0.isInc());
360:       assertFalse(node0.isHook());
361:       assertFalse(node0.isFor());
362:       assertEquals((-1), node0.getLineno());
363:       assertFalse(node0.isNE());
364:       assertFalse(node0.isIf());
365:       assertEquals(40, node0.getType());
366:       assertFalse(node0.isRegExp());
367:       assertEquals(0, node0.getChildCount());
368:       assertFalse(node0.isCatch());
369:       assertFalse(node0.isFunction());
370:       assertFalse(node0.isTry());
371:       assertFalse(node0.isSetterDef());
372:       assertFalse(node0.isDefaultCase());
373:       assertFalse(node0.isStringKey());
374:       assertFalse(node0.isGetterDef());
375:       assertFalse(node0.isDebugger());
376:       assertFalse(node0.isArrayLit());
377:       assertFalse(node0.isParamList());
378:       assertFalse(node0.isDo());
379:       assertFalse(node0.isNew());
380:       assertFalse(node0.isAdd());
381:       assertFalse(node0.isReturn());
382:       assertFalse(node0.isLabel());
383:       assertFalse(node0.isVar());
384:       assertFalse(node0.isWhile());
385:       assertFalse(node0.isAssignAdd());
386:       assertFalse(node0.isGetElem());
387:       assertFalse(node0.isName());
388:       assertFalse(node0.isAssign());
389:       assertFalse(node0.isEmpty());
390:       assertFalse(node0.isCall());
391:       assertFalse(node0.isBreak());
392:       assertFalse(node0.hasChildren());
393:       assertFalse(node0.isTypeOf());
394:       assertFalse(node0.isDec());
395:       assertFalse(node0.isOr());
396:       assertFalse(node0.isVoid());
397:       assertFalse(node0.isExprResult());
398:       assertFalse(node0.isTrue());
399:       assertFalse(node0.isNull());
400:       assertFalse(node0.isDelProp());
401:       assertFalse(node1.isArrayLit());
402:       assertFalse(node1.isEmpty());
403:       assertFalse(node1.isTry());
404:       assertFalse(node1.isNE());
405:       assertEquals(2, node1.getCharno());
406:       assertFalse(node1.isDelProp());
407:       assertFalse(node1.isVoid());
408:       assertFalse(node1.isGetterDef());
409:       assertFalse(node1.isIf());
410:       assertFalse(node1.isDebugger());
411:       assertFalse(node1.isTrue());
412:       assertFalse(node1.isIn());
413:       assertFalse(node1.isSetterDef());
414:       assertFalse(node1.isDefaultCase());
415:       assertFalse(node1.isFunction());
416:       assertTrue(node1.isThrow());
417:       assertFalse(node1.isVar());
418:       assertFalse(node1.isFalse());
419:       assertFalse(node1.isAdd());
420:       assertFalse(node1.isName());
421:       assertFalse(node1.isNew());
422:       assertFalse(node1.isBreak());
423:       assertFalse(node1.isCall());
424:       assertFalse(node1.isNull());
425:       assertFalse(node1.isString());
426:       assertFalse(node1.isObjectLit());
427:       assertEquals(49, node1.getType());
428:       assertFalse(node1.isGetProp());
429:       assertFalse(node1.isTypeOf());
430:       assertFalse(node1.isDec());
431:       assertFalse(node1.isComma());
432:       assertFalse(node1.isAssign());
433:       assertFalse(node1.isWhile());
434:       assertFalse(node1.isReturn());
435:       assertTrue(node1.hasOneChild());
436:       assertFalse(node1.isCast());
437:       assertEquals(217090, node1.getSourcePosition());
438:       assertFalse(node1.isLabelName());
439:       assertFalse(node1.isExprResult());
440:       assertFalse(node1.isGetElem());
441:       assertFalse(node1.isScript());
442:       assertFalse(node1.isNumber());
443:       assertFalse(node1.isNot());
444:       assertFalse(node1.isOr());
445:       assertFalse(node1.isAnd());
446:       assertFalse(node1.isContinue());
447:       assertFalse(node1.isDo());
448:       assertFalse(node1.isLabel());
449:       assertFalse(node1.isAssignAdd());
450:       assertFalse(node1.isInc());
451:       assertFalse(node1.isParamList());
452:       assertEquals(53, node1.getLineno());
453:       assertFalse(node1.isSwitch());
454:       assertFalse(node1.isStringKey());
455:       assertFalse(node1.isInstanceOf());
456:       assertFalse(node1.isCatch());
457:       assertFalse(node1.hasMoreThanOneChild());
458:       assertTrue(node1.hasChildren());
459:       assertFalse(node1.isCase());
460:       assertFalse(node1.isRegExp());
461:       assertFalse(node1.isWith());
462:       assertFalse(node1.isFor());
463:       assertEquals(1, node1.getChildCount());
464:       assertFalse(node1.isHook());
465:       assertFalse(node1.isThis());
466:       assertFalse(node1.isBlock());
467:       assertEquals(30, Node.VAR_ARGS_NAME);
468:       assertEquals(49, Node.DIRECT_EVAL);
469:       assertEquals(15, Node.NO_SIDE_EFFECTS);
470:       assertEquals(1, Node.DECR_FLAG);
471:       assertEquals(54, Node.SLASH_V);
472:       assertEquals(57, Node.LAST_PROP);
473:       assertEquals(32, Node.INCRDECR_PROP);
474:       assertEquals(46, Node.IS_NAMESPACE);
475:       assertEquals(51, Node.STATIC_SOURCE_FILE);
476:       assertEquals(57, Node.REFLECTED_OBJECT);
477:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
478:       assertEquals(52, Node.LENGTH);
479:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
480:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
481:       assertEquals(37, Node.OPT_ARG_NAME);
482:       assertEquals(48, Node.DIRECTIVES);
483:       assertEquals(56, Node.CHANGE_TIME);
484:       assertEquals(12, Node.COLUMN_BITS);
485:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
486:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
487:       assertEquals(4095, Node.COLUMN_MASK);
488:       assertEquals(36, Node.QUOTED_PROP);
489:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
490:       assertEquals(43, Node.IS_CONSTANT_NAME);
491:       assertEquals(53, Node.INPUT_ID);
492:       assertEquals(8, Node.FLAG_NO_THROWS);
493:       assertEquals(39, Node.EMPTY_BLOCK);
494:       assertEquals(55, Node.INFERRED_FUNCTION);
495:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
496:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
497:       assertEquals(29, Node.JSDOC_INFO_PROP);
498:       assertEquals(50, Node.FREE_CALL);
499:       assertEquals(47, Node.IS_DISPATCHER);
500:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
501:       assertEquals(40, Node.ORIGINALNAME_PROP);
502:       assertEquals(2, Node.POST_FLAG);
503:       assertEquals(40, Node.ORIGINALNAME_PROP);
504:       assertEquals(50, Node.FREE_CALL);
505:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
506:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
507:       assertEquals(57, Node.REFLECTED_OBJECT);
508:       assertEquals(54, Node.SLASH_V);
509:       assertEquals(48, Node.DIRECTIVES);
510:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
511:       assertEquals(1, Node.DECR_FLAG);
512:       assertEquals(4095, Node.COLUMN_MASK);
513:       assertEquals(46, Node.IS_NAMESPACE);
514:       assertEquals(51, Node.STATIC_SOURCE_FILE);
515:       assertEquals(12, Node.COLUMN_BITS);
516:       assertEquals(32, Node.INCRDECR_PROP);
517:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
518:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
519:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
520:       assertEquals(56, Node.CHANGE_TIME);
521:       assertEquals(47, Node.IS_DISPATCHER);
522:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
523:       assertEquals(37, Node.OPT_ARG_NAME);
524:       assertEquals(2, Node.POST_FLAG);
525:       assertEquals(43, Node.IS_CONSTANT_NAME);
526:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
527:       assertEquals(55, Node.INFERRED_FUNCTION);
528:       assertEquals(49, Node.DIRECT_EVAL);
529:       assertEquals(30, Node.VAR_ARGS_NAME);
530:       assertEquals(36, Node.QUOTED_PROP);
531:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
532:       assertEquals(52, Node.LENGTH);
533:       assertEquals(8, Node.FLAG_NO_THROWS);
534:       assertEquals(57, Node.LAST_PROP);
535:       assertEquals(29, Node.JSDOC_INFO_PROP);
536:       assertEquals(53, Node.INPUT_ID);
537:       assertEquals(15, Node.NO_SIDE_EFFECTS);
538:       assertEquals(39, Node.EMPTY_BLOCK);
539:       
540:       node1.setWasEmptyNode(true);
541:       assertFalse(node0.equals((Object)node1));
542:       assertFalse(node1.equals((Object)node0));
543:       assertFalse(node0.isNot());
544:       assertFalse(node0.isScript());
545:       assertFalse(node0.isInstanceOf());
546:       assertFalse(node0.isObjectLit());
547:       assertFalse(node0.isWith());
548:       assertFalse(node0.isComma());
549:       assertFalse(node0.isThis());
550:       assertFalse(node0.isGetProp());
551:       assertFalse(node0.hasOneChild());
552:       assertFalse(node0.isLabelName());
553:       assertFalse(node0.isThrow());
554:       assertEquals((-1), node0.getSourcePosition());
555:       assertFalse(node0.isCast());
556:       assertFalse(node0.isNumber());
557:       assertFalse(node0.isFalse());
558:       assertEquals((-1), node0.getCharno());
559:       assertFalse(node0.isAnd());
560:       assertFalse(node0.isSwitch());
561:       assertFalse(node0.isCase());
562:       assertFalse(node0.isContinue());
563:       assertFalse(node0.hasMoreThanOneChild());
564:       assertFalse(node0.isIn());
565:       assertFalse(node0.isBlock());
566:       assertTrue(node0.isString());
567:       assertFalse(node0.isInc());
568:       assertFalse(node0.isHook());
569:       assertFalse(node0.isFor());
570:       assertEquals((-1), node0.getLineno());
571:       assertFalse(node0.isNE());
572:       assertFalse(node0.isIf());
573:       assertEquals(40, node0.getType());
574:       assertFalse(node0.isRegExp());
575:       assertEquals(0, node0.getChildCount());
576:       assertFalse(node0.isCatch());
577:       assertFalse(node0.isFunction());
578:       assertFalse(node0.isTry());
579:       assertFalse(node0.isSetterDef());
580:       assertFalse(node0.isDefaultCase());
581:       assertFalse(node0.isStringKey());
582:       assertFalse(node0.isGetterDef());
583:       assertFalse(node0.isDebugger());
584:       assertFalse(node0.isArrayLit());
585:       assertFalse(node0.isParamList());
586:       assertFalse(node0.isDo());
587:       assertFalse(node0.isNew());
588:       assertFalse(node0.isAdd());
589:       assertFalse(node0.isReturn());
590:       assertFalse(node0.isLabel());
591:       assertFalse(node0.isVar());
592:       assertFalse(node0.isWhile());
593:       assertFalse(node0.isAssignAdd());
594:       assertFalse(node0.isGetElem());
595:       assertFalse(node0.isName());
596:       assertFalse(node0.isAssign());
597:       assertFalse(node0.isEmpty());
598:       assertFalse(node0.isCall());
599:       assertFalse(node0.isBreak());
600:       assertFalse(node0.hasChildren());
601:       assertFalse(node0.isTypeOf());
602:       assertFalse(node0.isDec());
603:       assertFalse(node0.isOr());
604:       assertFalse(node0.isVoid());
605:       assertFalse(node0.isExprResult());
606:       assertFalse(node0.isTrue());
607:       assertFalse(node0.isNull());
608:       assertFalse(node0.isDelProp());
609:       assertFalse(node1.isArrayLit());
610:       assertFalse(node1.isEmpty());
611:       assertFalse(node1.isTry());
612:       assertFalse(node1.isNE());
613:       assertEquals(2, node1.getCharno());
614:       assertFalse(node1.isDelProp());
615:       assertFalse(node1.isVoid());
616:       assertFalse(node1.isGetterDef());
617:       assertFalse(node1.isIf());
618:       assertFalse(node1.isDebugger());
619:       assertFalse(node1.isTrue());
620:       assertFalse(node1.isIn());
621:       assertFalse(node1.isSetterDef());
622:       assertFalse(node1.isDefaultCase());
623:       assertFalse(node1.isFunction());
624:       assertTrue(node1.isThrow());
625:       assertFalse(node1.isVar());
626:       assertFalse(node1.isFalse());
627:       assertFalse(node1.isAdd());
628:       assertFalse(node1.isName());
629:       assertFalse(node1.isNew());
630:       assertFalse(node1.isBreak());
631:       assertFalse(node1.isCall());
632:       assertFalse(node1.isNull());
633:       assertFalse(node1.isString());
634:       assertFalse(node1.isObjectLit());
635:       assertEquals(49, node1.getType());
636:       assertFalse(node1.isGetProp());
637:       assertFalse(node1.isTypeOf());
638:       assertFalse(node1.isDec());
639:       assertFalse(node1.isComma());
640:       assertFalse(node1.isAssign());
641:       assertFalse(node1.isWhile());
642:       assertFalse(node1.isReturn());
643:       assertTrue(node1.hasOneChild());
644:       assertFalse(node1.isCast());
645:       assertEquals(217090, node1.getSourcePosition());
646:       assertFalse(node1.isLabelName());
647:       assertFalse(node1.isExprResult());
648:       assertFalse(node1.isGetElem());
649:       assertFalse(node1.isScript());
650:       assertFalse(node1.isNumber());
651:       assertFalse(node1.isNot());
652:       assertFalse(node1.isOr());
653:       assertFalse(node1.isAnd());
654:       assertFalse(node1.isContinue());
655:       assertFalse(node1.isDo());
656:       assertFalse(node1.isLabel());
657:       assertFalse(node1.isAssignAdd());
658:       assertFalse(node1.isInc());
659:       assertFalse(node1.isParamList());
660:       assertEquals(53, node1.getLineno());
661:       assertFalse(node1.isSwitch());
662:       assertFalse(node1.isStringKey());
663:       assertFalse(node1.isInstanceOf());
664:       assertFalse(node1.isCatch());
665:       assertFalse(node1.hasMoreThanOneChild());
666:       assertTrue(node1.hasChildren());
667:       assertFalse(node1.isCase());
668:       assertFalse(node1.isRegExp());
669:       assertFalse(node1.isWith());
670:       assertFalse(node1.isFor());
671:       assertEquals(1, node1.getChildCount());
672:       assertFalse(node1.isHook());
673:       assertFalse(node1.isThis());
674:       assertFalse(node1.isBlock());
675:       assertEquals(30, Node.VAR_ARGS_NAME);
676:       assertEquals(49, Node.DIRECT_EVAL);
677:       assertEquals(15, Node.NO_SIDE_EFFECTS);
678:       assertEquals(1, Node.DECR_FLAG);
679:       assertEquals(54, Node.SLASH_V);
680:       assertEquals(57, Node.LAST_PROP);
681:       assertEquals(32, Node.INCRDECR_PROP);
682:       assertEquals(46, Node.IS_NAMESPACE);
683:       assertEquals(51, Node.STATIC_SOURCE_FILE);
684:       assertEquals(57, Node.REFLECTED_OBJECT);
685:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
686:       assertEquals(52, Node.LENGTH);
687:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
688:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
689:       assertEquals(37, Node.OPT_ARG_NAME);
690:       assertEquals(48, Node.DIRECTIVES);
691:       assertEquals(56, Node.CHANGE_TIME);
692:       assertEquals(12, Node.COLUMN_BITS);
693:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
694:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
695:       assertEquals(4095, Node.COLUMN_MASK);
696:       assertEquals(36, Node.QUOTED_PROP);
697:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
698:       assertEquals(43, Node.IS_CONSTANT_NAME);
699:       assertEquals(53, Node.INPUT_ID);
700:       assertEquals(8, Node.FLAG_NO_THROWS);
701:       assertEquals(39, Node.EMPTY_BLOCK);
702:       assertEquals(55, Node.INFERRED_FUNCTION);
703:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
704:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
705:       assertEquals(29, Node.JSDOC_INFO_PROP);
706:       assertEquals(50, Node.FREE_CALL);
707:       assertEquals(47, Node.IS_DISPATCHER);
708:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
709:       assertEquals(40, Node.ORIGINALNAME_PROP);
710:       assertEquals(2, Node.POST_FLAG);
711:       assertEquals(40, Node.ORIGINALNAME_PROP);
712:       assertEquals(50, Node.FREE_CALL);
713:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
714:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
715:       assertEquals(57, Node.REFLECTED_OBJECT);
716:       assertEquals(54, Node.SLASH_V);
717:       assertEquals(48, Node.DIRECTIVES);
718:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
719:       assertEquals(1, Node.DECR_FLAG);
720:       assertEquals(4095, Node.COLUMN_MASK);
721:       assertEquals(46, Node.IS_NAMESPACE);
722:       assertEquals(51, Node.STATIC_SOURCE_FILE);
723:       assertEquals(12, Node.COLUMN_BITS);
724:       assertEquals(32, Node.INCRDECR_PROP);
725:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
726:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
727:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
728:       assertEquals(56, Node.CHANGE_TIME);
729:       assertEquals(47, Node.IS_DISPATCHER);
730:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
731:       assertEquals(37, Node.OPT_ARG_NAME);
732:       assertEquals(2, Node.POST_FLAG);
733:       assertEquals(43, Node.IS_CONSTANT_NAME);
734:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
735:       assertEquals(55, Node.INFERRED_FUNCTION);
736:       assertEquals(49, Node.DIRECT_EVAL);
737:       assertEquals(30, Node.VAR_ARGS_NAME);
738:       assertEquals(36, Node.QUOTED_PROP);
739:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
740:       assertEquals(52, Node.LENGTH);
741:       assertEquals(8, Node.FLAG_NO_THROWS);
742:       assertEquals(57, Node.LAST_PROP);
743:       assertEquals(29, Node.JSDOC_INFO_PROP);
744:       assertEquals(53, Node.INPUT_ID);
745:       assertEquals(15, Node.NO_SIDE_EFFECTS);
746:       assertEquals(39, Node.EMPTY_BLOCK);
747:       
748:       boolean boolean1 = node1.isVarArgs();
749:       assertFalse(node0.equals((Object)node1));
750:       assertFalse(node1.equals((Object)node0));
751:       assertTrue(boolean1 == boolean0);
752:       assertFalse(boolean1);
753:       assertFalse(node0.isNot());
754:       assertFalse(node0.isScript());
755:       assertFalse(node0.isInstanceOf());
756:       assertFalse(node0.isObjectLit());
757:       assertFalse(node0.isWith());
758:       assertFalse(node0.isComma());
759:       assertFalse(node0.isThis());
760:       assertFalse(node0.isGetProp());
761:       assertFalse(node0.hasOneChild());
762:       assertFalse(node0.isLabelName());
763:       assertFalse(node0.isThrow());
764:       assertEquals((-1), node0.getSourcePosition());
765:       assertFalse(node0.isCast());
766:       assertFalse(node0.isNumber());
767:       assertFalse(node0.isFalse());
768:       assertEquals((-1), node0.getCharno());
769:       assertFalse(node0.isAnd());
770:       assertFalse(node0.isSwitch());
771:       assertFalse(node0.isCase());
772:       assertFalse(node0.isContinue());
773:       assertFalse(node0.hasMoreThanOneChild());
774:       assertFalse(node0.isIn());
775:       assertFalse(node0.isBlock());
776:       assertTrue(node0.isString());
777:       assertFalse(node0.isInc());
778:       assertFalse(node0.isHook());
779:       assertFalse(node0.isFor());
780:       assertEquals((-1), node0.getLineno());
781:       assertFalse(node0.isNE());
782:       assertFalse(node0.isIf());
783:       assertEquals(40, node0.getType());
784:       assertFalse(node0.isRegExp());
785:       assertEquals(0, node0.getChildCount());
786:       assertFalse(node0.isCatch());
787:       assertFalse(node0.isFunction());
788:       assertFalse(node0.isTry());
789:       assertFalse(node0.isSetterDef());
790:       assertFalse(node0.isDefaultCase());
791:       assertFalse(node0.isStringKey());
792:       assertFalse(node0.isGetterDef());
793:       assertFalse(node0.isDebugger());
794:       assertFalse(node0.isArrayLit());
795:       assertFalse(node0.isParamList());
796:       assertFalse(node0.isDo());
797:       assertFalse(node0.isNew());
798:       assertFalse(node0.isAdd());
799:       assertFalse(node0.isReturn());
800:       assertFalse(node0.isLabel());
801:       assertFalse(node0.isVar());
802:       assertFalse(node0.isWhile());
803:       assertFalse(node0.isAssignAdd());
804:       assertFalse(node0.isGetElem());
805:       assertFalse(node0.isName());
806:       assertFalse(node0.isAssign());
807:       assertFalse(node0.isEmpty());
808:       assertFalse(node0.isCall());
809:       assertFalse(node0.isBreak());
810:       assertFalse(node0.hasChildren());
811:       assertFalse(node0.isTypeOf());
812:       assertFalse(node0.isDec());
813:       assertFalse(node0.isOr());
814:       assertFalse(node0.isVoid());
815:       assertFalse(node0.isExprResult());
816:       assertFalse(node0.isTrue());
817:       assertFalse(node0.isNull());
818:       assertFalse(node0.isDelProp());
819:       assertFalse(node1.isArrayLit());
820:       assertFalse(node1.isEmpty());
821:       assertFalse(node1.isTry());
822:       assertFalse(node1.isNE());
823:       assertEquals(2, node1.getCharno());
824:       assertFalse(node1.isDelProp());
825:       assertFalse(node1.isVoid());
826:       assertFalse(node1.isGetterDef());
827:       assertFalse(node1.isIf());
828:       assertFalse(node1.isDebugger());
829:       assertFalse(node1.isTrue());
830:       assertFalse(node1.isIn());
831:       assertFalse(node1.isSetterDef());
832:       assertFalse(node1.isDefaultCase());
833:       assertFalse(node1.isFunction());
834:       assertTrue(node1.isThrow());
835:       assertFalse(node1.isVar());
836:       assertFalse(node1.isFalse());
837:       assertFalse(node1.isAdd());
838:       assertFalse(node1.isName());
839:       assertFalse(node1.isNew());
840:       assertFalse(node1.isBreak());
841:       assertFalse(node1.isCall());
842:       assertFalse(node1.isNull());
843:       assertFalse(node1.isString());
844:       assertFalse(node1.isObjectLit());
845:       assertEquals(49, node1.getType());
846:       assertFalse(node1.isGetProp());
847:       assertFalse(node1.isTypeOf());
848:       assertFalse(node1.isDec());
849:       assertFalse(node1.isComma());
850:       assertFalse(node1.isAssign());
851:       assertFalse(node1.isWhile());
852:       assertFalse(node1.isReturn());
853:       assertTrue(node1.hasOneChild());
854:       assertFalse(node1.isCast());
855:       assertEquals(217090, node1.getSourcePosition());
856:       assertFalse(node1.isLabelName());
857:       assertFalse(node1.isExprResult());
858:       assertFalse(node1.isGetElem());
859:       assertFalse(node1.isScript());
860:       assertFalse(node1.isNumber());
861:       assertFalse(node1.isNot());
862:       assertFalse(node1.isOr());
863:       assertFalse(node1.isAnd());
864:       assertFalse(node1.isContinue());
865:       assertFalse(node1.isDo());
866:       assertFalse(node1.isLabel());
867:       assertFalse(node1.isAssignAdd());
868:       assertFalse(node1.isInc());
869:       assertFalse(node1.isParamList());
870:       assertEquals(53, node1.getLineno());
871:       assertFalse(node1.isSwitch());
872:       assertFalse(node1.isStringKey());
873:       assertFalse(node1.isInstanceOf());
874:       assertFalse(node1.isCatch());
875:       assertFalse(node1.hasMoreThanOneChild());
876:       assertTrue(node1.hasChildren());
877:       assertFalse(node1.isCase());
878:       assertFalse(node1.isRegExp());
879:       assertFalse(node1.isWith());
880:       assertFalse(node1.isFor());
881:       assertEquals(1, node1.getChildCount());
882:       assertFalse(node1.isHook());
883:       assertFalse(node1.isThis());
884:       assertFalse(node1.isBlock());
885:       assertEquals(30, Node.VAR_ARGS_NAME);
886:       assertEquals(49, Node.DIRECT_EVAL);
887:       assertEquals(15, Node.NO_SIDE_EFFECTS);
888:       assertEquals(1, Node.DECR_FLAG);
889:       assertEquals(54, Node.SLASH_V);
890:       assertEquals(57, Node.LAST_PROP);
891:       assertEquals(32, Node.INCRDECR_PROP);
892:       assertEquals(46, Node.IS_NAMESPACE);
893:       assertEquals(51, Node.STATIC_SOURCE_FILE);
894:       assertEquals(57, Node.REFLECTED_OBJECT);
895:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
896:       assertEquals(52, Node.LENGTH);
897:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
898:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
899:       assertEquals(37, Node.OPT_ARG_NAME);
900:       assertEquals(48, Node.DIRECTIVES);
901:       assertEquals(56, Node.CHANGE_TIME);
902:       assertEquals(12, Node.COLUMN_BITS);
903:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
904:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
905:       assertEquals(4095, Node.COLUMN_MASK);
906:       assertEquals(36, Node.QUOTED_PROP);
907:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
908:       assertEquals(43, Node.IS_CONSTANT_NAME);
909:       assertEquals(53, Node.INPUT_ID);
910:       assertEquals(8, Node.FLAG_NO_THROWS);
911:       assertEquals(39, Node.EMPTY_BLOCK);
912:       assertEquals(55, Node.INFERRED_FUNCTION);
913:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
914:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
915:       assertEquals(29, Node.JSDOC_INFO_PROP);
916:       assertEquals(50, Node.FREE_CALL);
917:       assertEquals(47, Node.IS_DISPATCHER);
918:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
919:       assertEquals(40, Node.ORIGINALNAME_PROP);
920:       assertEquals(2, Node.POST_FLAG);
921:       assertEquals(40, Node.ORIGINALNAME_PROP);
922:       assertEquals(50, Node.FREE_CALL);
923:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
924:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
925:       assertEquals(57, Node.REFLECTED_OBJECT);
926:       assertEquals(54, Node.SLASH_V);
927:       assertEquals(48, Node.DIRECTIVES);
928:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
929:       assertEquals(1, Node.DECR_FLAG);
930:       assertEquals(4095, Node.COLUMN_MASK);
931:       assertEquals(46, Node.IS_NAMESPACE);
932:       assertEquals(51, Node.STATIC_SOURCE_FILE);
933:       assertEquals(12, Node.COLUMN_BITS);
934:       assertEquals(32, Node.INCRDECR_PROP);
935:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
936:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
937:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
938:       assertEquals(56, Node.CHANGE_TIME);
939:       assertEquals(47, Node.IS_DISPATCHER);
940:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
941:       assertEquals(37, Node.OPT_ARG_NAME);
942:       assertEquals(2, Node.POST_FLAG);
943:       assertEquals(43, Node.IS_CONSTANT_NAME);
944:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
945:       assertEquals(55, Node.INFERRED_FUNCTION);
946:       assertEquals(49, Node.DIRECT_EVAL);
947:       assertEquals(30, Node.VAR_ARGS_NAME);
948:       assertEquals(36, Node.QUOTED_PROP);
949:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
950:       assertEquals(52, Node.LENGTH);
951:       assertEquals(8, Node.FLAG_NO_THROWS);
952:       assertEquals(57, Node.LAST_PROP);
953:       assertEquals(29, Node.JSDOC_INFO_PROP);
954:       assertEquals(53, Node.INPUT_ID);
955:       assertEquals(15, Node.NO_SIDE_EFFECTS);
956:       assertEquals(39, Node.EMPTY_BLOCK);
957:       
958:       Node node2 = Node.newString(38, ".");
959:       assertFalse(node2.equals((Object)node1));
960:       assertFalse(node2.equals((Object)node0));
961:       assertNotSame(node2, node0);
962:       assertFalse(node2.isNE());
963:       assertFalse(node2.isIf());
964:       assertFalse(node2.isEmpty());
965:       assertFalse(node2.isDelProp());
966:       assertFalse(node2.isIn());
967:       assertFalse(node2.isDebugger());
968:       assertFalse(node2.isGetterDef());
969:       assertFalse(node2.isSwitch());
970:       assertFalse(node2.isFunction());
971:       assertFalse(node2.isInc());
972:       assertFalse(node2.isDefaultCase());
973:       assertFalse(node2.isArrayLit());
974:       assertFalse(node2.isThrow());
975:       assertFalse(node2.isFalse());
976:       assertEquals(0, node2.getChildCount());
977:       assertFalse(node2.isThis());
978:       assertFalse(node2.isSetterDef());
979:       assertFalse(node2.isParamList());
980:       assertFalse(node2.isStringKey());
981:       assertEquals((-1), node2.getCharno());
982:       assertTrue(node2.isName());
983:       assertFalse(node2.isScript());
984:       assertFalse(node2.isRegExp());
985:       assertFalse(node2.isTry());
986:       assertFalse(node2.hasOneChild());
987:       assertFalse(node2.isCase());
988:       assertFalse(node2.isHook());
989:       assertFalse(node2.hasMoreThanOneChild());
990:       assertFalse(node2.isInstanceOf());
991:       assertFalse(node2.isCatch());
992:       assertFalse(node2.isFor());
993:       assertFalse(node2.isWith());
994:       assertFalse(node2.isBlock());
995:       assertFalse(node2.isTypeOf());
996:       assertFalse(node2.isNumber());
997:       assertFalse(node2.isLabelName());
998:       assertFalse(node2.isAssignAdd());
999:       assertFalse(node2.isGetElem());
1000:       assertEquals((-1), node2.getLineno());
1001:       assertFalse(node2.isOr());
1002:       assertEquals((-1), node2.getSourcePosition());
1003:       assertFalse(node2.isAdd());
1004:       assertFalse(node2.isDo());
1005:       assertFalse(node2.isNew());
1006:       assertFalse(node2.isVar());
1007:       assertFalse(node2.isCast());
1008:       assertFalse(node2.isContinue());
1009:       assertFalse(node2.isLabel());
1010:       assertEquals(38, node2.getType());
1011:       assertFalse(node2.isNull());
1012:       assertFalse(node2.isBreak());
1013:       assertFalse(node2.isGetProp());
1014:       assertFalse(node2.isAnd());
1015:       assertFalse(node2.isNot());
1016:       assertFalse(node2.isObjectLit());
1017:       assertFalse(node2.isExprResult());
1018:       assertFalse(node2.isTrue());
1019:       assertFalse(node2.isWhile());
1020:       assertFalse(node2.isString());
1021:       assertFalse(node2.isVoid());
1022:       assertFalse(node2.isCall());
1023:       assertFalse(node2.isAssign());
1024:       assertFalse(node2.isReturn());
1025:       assertFalse(node2.hasChildren());
1026:       assertFalse(node2.isDec());
1027:       assertFalse(node2.isComma());
1028:       assertEquals(8, Node.FLAG_NO_THROWS);
1029:       assertEquals(39, Node.EMPTY_BLOCK);
1030:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1031:       assertEquals(50, Node.FREE_CALL);
1032:       assertEquals(40, Node.ORIGINALNAME_PROP);
1033:       assertEquals(4095, Node.COLUMN_MASK);
1034:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1035:       assertEquals(48, Node.DIRECTIVES);
1036:       assertEquals(54, Node.SLASH_V);
1037:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1038:       assertEquals(43, Node.IS_CONSTANT_NAME);
1039:       assertEquals(12, Node.COLUMN_BITS);
1040:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1041:       assertEquals(32, Node.INCRDECR_PROP);
1042:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1043:       assertEquals(1, Node.DECR_FLAG);
1044:       assertEquals(37, Node.OPT_ARG_NAME);
1045:       assertEquals(56, Node.CHANGE_TIME);
1046:       assertEquals(46, Node.IS_NAMESPACE);
1047:       assertEquals(47, Node.IS_DISPATCHER);
1048:       assertEquals(2, Node.POST_FLAG);
1049:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1050:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1051:       assertEquals(49, Node.DIRECT_EVAL);
1052:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1053:       assertEquals(53, Node.INPUT_ID);
1054:       assertEquals(52, Node.LENGTH);
1055:       assertEquals(57, Node.REFLECTED_OBJECT);
1056:       assertEquals(36, Node.QUOTED_PROP);
1057:       assertEquals(30, Node.VAR_ARGS_NAME);
1058:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1059:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1060:       assertEquals(29, Node.JSDOC_INFO_PROP);
1061:       assertEquals(55, Node.INFERRED_FUNCTION);
1062:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1063:       assertEquals(57, Node.LAST_PROP);
1064:       
1065:       boolean boolean2 = node2.wasEmptyNode();
1066:       assertFalse(node2.equals((Object)node1));
1067:       assertFalse(node2.equals((Object)node0));
1068:       assertTrue(boolean2 == boolean0);
1069:       assertTrue(boolean2 == boolean1);
1070:       assertFalse(boolean2);
1071:       assertNotSame(node2, node0);
1072:       assertFalse(node2.isNE());
1073:       assertFalse(node2.isIf());
1074:       assertFalse(node2.isEmpty());
1075:       assertFalse(node2.isDelProp());
1076:       assertFalse(node2.isIn());
1077:       assertFalse(node2.isDebugger());
1078:       assertFalse(node2.isGetterDef());
1079:       assertFalse(node2.isSwitch());
1080:       assertFalse(node2.isFunction());
1081:       assertFalse(node2.isInc());
1082:       assertFalse(node2.isDefaultCase());
1083:       assertFalse(node2.isArrayLit());
1084:       assertFalse(node2.isThrow());
1085:       assertFalse(node2.isFalse());
1086:       assertEquals(0, node2.getChildCount());
1087:       assertFalse(node2.isThis());
1088:       assertFalse(node2.isSetterDef());
1089:       assertFalse(node2.isParamList());
1090:       assertFalse(node2.isStringKey());
1091:       assertEquals((-1), node2.getCharno());
1092:       assertTrue(node2.isName());
1093:       assertFalse(node2.isScript());
1094:       assertFalse(node2.isRegExp());
1095:       assertFalse(node2.isTry());
1096:       assertFalse(node2.hasOneChild());
1097:       assertFalse(node2.isCase());
1098:       assertFalse(node2.isHook());
1099:       assertFalse(node2.hasMoreThanOneChild());
1100:       assertFalse(node2.isInstanceOf());
1101:       assertFalse(node2.isCatch());
1102:       assertFalse(node2.isFor());
1103:       assertFalse(node2.isWith());
1104:       assertFalse(node2.isBlock());
1105:       assertFalse(node2.isTypeOf());
1106:       assertFalse(node2.isNumber());
1107:       assertFalse(node2.isLabelName());
1108:       assertFalse(node2.isAssignAdd());
1109:       assertFalse(node2.isGetElem());
1110:       assertEquals((-1), node2.getLineno());
1111:       assertFalse(node2.isOr());
1112:       assertEquals((-1), node2.getSourcePosition());
1113:       assertFalse(node2.isAdd());
1114:       assertFalse(node2.isDo());
1115:       assertFalse(node2.isNew());
1116:       assertFalse(node2.isVar());
1117:       assertFalse(node2.isCast());
1118:       assertFalse(node2.isContinue());
1119:       assertFalse(node2.isLabel());
1120:       assertEquals(38, node2.getType());
1121:       assertFalse(node2.isNull());
1122:       assertFalse(node2.isBreak());
1123:       assertFalse(node2.isGetProp());
1124:       assertFalse(node2.isAnd());
1125:       assertFalse(node2.isNot());
1126:       assertFalse(node2.isObjectLit());
1127:       assertFalse(node2.isExprResult());
1128:       assertFalse(node2.isTrue());
1129:       assertFalse(node2.isWhile());
1130:       assertFalse(node2.isString());
1131:       assertFalse(node2.isVoid());
1132:       assertFalse(node2.isCall());
1133:       assertFalse(node2.isAssign());
1134:       assertFalse(node2.isReturn());
1135:       assertFalse(node2.hasChildren());
1136:       assertFalse(node2.isDec());
1137:       assertFalse(node2.isComma());
1138:       assertEquals(8, Node.FLAG_NO_THROWS);
1139:       assertEquals(39, Node.EMPTY_BLOCK);
1140:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1141:       assertEquals(50, Node.FREE_CALL);
1142:       assertEquals(40, Node.ORIGINALNAME_PROP);
1143:       assertEquals(4095, Node.COLUMN_MASK);
1144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1145:       assertEquals(48, Node.DIRECTIVES);
1146:       assertEquals(54, Node.SLASH_V);
1147:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1148:       assertEquals(43, Node.IS_CONSTANT_NAME);
1149:       assertEquals(12, Node.COLUMN_BITS);
1150:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1151:       assertEquals(32, Node.INCRDECR_PROP);
1152:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1153:       assertEquals(1, Node.DECR_FLAG);
1154:       assertEquals(37, Node.OPT_ARG_NAME);
1155:       assertEquals(56, Node.CHANGE_TIME);
1156:       assertEquals(46, Node.IS_NAMESPACE);
1157:       assertEquals(47, Node.IS_DISPATCHER);
1158:       assertEquals(2, Node.POST_FLAG);
1159:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1160:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1161:       assertEquals(49, Node.DIRECT_EVAL);
1162:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1163:       assertEquals(53, Node.INPUT_ID);
1164:       assertEquals(52, Node.LENGTH);
1165:       assertEquals(57, Node.REFLECTED_OBJECT);
1166:       assertEquals(36, Node.QUOTED_PROP);
1167:       assertEquals(30, Node.VAR_ARGS_NAME);
1168:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1169:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1170:       assertEquals(29, Node.JSDOC_INFO_PROP);
1171:       assertEquals(55, Node.INFERRED_FUNCTION);
1172:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1173:       assertEquals(57, Node.LAST_PROP);
1174:       
1175:       node1.setType(9);
1176:       assertFalse(node0.equals((Object)node2));
1177:       assertFalse(node0.equals((Object)node1));
1178:       assertFalse(node1.equals((Object)node2));
1179:       assertFalse(node1.equals((Object)node0));
1180:       assertNotSame(node0, node2);
1181:       assertFalse(node0.isNot());
1182:       assertFalse(node0.isScript());
1183:       assertFalse(node0.isInstanceOf());
1184:       assertFalse(node0.isObjectLit());
1185:       assertFalse(node0.isWith());
1186:       assertFalse(node0.isComma());
1187:       assertFalse(node0.isThis());
1188:       assertFalse(node0.isGetProp());
1189:       assertFalse(node0.hasOneChild());
1190:       assertFalse(node0.isLabelName());
1191:       assertFalse(node0.isThrow());
1192:       assertEquals((-1), node0.getSourcePosition());
1193:       assertFalse(node0.isCast());
1194:       assertFalse(node0.isNumber());
1195:       assertFalse(node0.isFalse());
1196:       assertEquals((-1), node0.getCharno());
1197:       assertFalse(node0.isAnd());
1198:       assertFalse(node0.isSwitch());
1199:       assertFalse(node0.isCase());
1200:       assertFalse(node0.isContinue());
1201:       assertFalse(node0.hasMoreThanOneChild());
1202:       assertFalse(node0.isIn());
1203:       assertFalse(node0.isBlock());
1204:       assertTrue(node0.isString());
1205:       assertFalse(node0.isInc());
1206:       assertFalse(node0.isHook());
1207:       assertFalse(node0.isFor());
1208:       assertEquals((-1), node0.getLineno());
1209:       assertFalse(node0.isNE());
1210:       assertFalse(node0.isIf());
1211:       assertEquals(40, node0.getType());
1212:       assertFalse(node0.isRegExp());
1213:       assertEquals(0, node0.getChildCount());
1214:       assertFalse(node0.isCatch());
1215:       assertFalse(node0.isFunction());
1216:       assertFalse(node0.isTry());
1217:       assertFalse(node0.isSetterDef());
1218:       assertFalse(node0.isDefaultCase());
1219:       assertFalse(node0.isStringKey());
1220:       assertFalse(node0.isGetterDef());
1221:       assertFalse(node0.isDebugger());
1222:       assertFalse(node0.isArrayLit());
1223:       assertFalse(node0.isParamList());
1224:       assertFalse(node0.isDo());
1225:       assertFalse(node0.isNew());
1226:       assertFalse(node0.isAdd());
1227:       assertFalse(node0.isReturn());
1228:       assertFalse(node0.isLabel());
1229:       assertFalse(node0.isVar());
1230:       assertFalse(node0.isWhile());
1231:       assertFalse(node0.isAssignAdd());
1232:       assertFalse(node0.isGetElem());
1233:       assertFalse(node0.isName());
1234:       assertFalse(node0.isAssign());
1235:       assertFalse(node0.isEmpty());
1236:       assertFalse(node0.isCall());
1237:       assertFalse(node0.isBreak());
1238:       assertFalse(node0.hasChildren());
1239:       assertFalse(node0.isTypeOf());
1240:       assertFalse(node0.isDec());
1241:       assertFalse(node0.isOr());
1242:       assertFalse(node0.isVoid());
1243:       assertFalse(node0.isExprResult());
1244:       assertFalse(node0.isTrue());
1245:       assertFalse(node0.isNull());
1246:       assertFalse(node0.isDelProp());
1247:       assertFalse(node1.isArrayLit());
1248:       assertFalse(node1.isEmpty());
1249:       assertFalse(node1.isTry());
1250:       assertFalse(node1.isNE());
1251:       assertEquals(2, node1.getCharno());
1252:       assertFalse(node1.isDelProp());
1253:       assertFalse(node1.isVoid());
1254:       assertFalse(node1.isGetterDef());
1255:       assertFalse(node1.isIf());
1256:       assertFalse(node1.isDebugger());
1257:       assertFalse(node1.isTrue());
1258:       assertFalse(node1.isIn());
1259:       assertFalse(node1.isSetterDef());
1260:       assertFalse(node1.isDefaultCase());
1261:       assertFalse(node1.isFunction());
1262:       assertFalse(node1.isVar());
1263:       assertFalse(node1.isFalse());
1264:       assertFalse(node1.isAdd());
1265:       assertFalse(node1.isName());
1266:       assertFalse(node1.isNew());
1267:       assertFalse(node1.isBreak());
1268:       assertFalse(node1.isCall());
1269:       assertFalse(node1.isNull());
1270:       assertFalse(node1.isString());
1271:       assertFalse(node1.isObjectLit());
1272:       assertFalse(node1.isGetProp());
1273:       assertFalse(node1.isTypeOf());
1274:       assertFalse(node1.isDec());
1275:       assertFalse(node1.isComma());
1276:       assertFalse(node1.isAssign());
1277:       assertFalse(node1.isWhile());
1278:       assertFalse(node1.isReturn());
1279:       assertTrue(node1.hasOneChild());
1280:       assertFalse(node1.isCast());
1281:       assertEquals(217090, node1.getSourcePosition());
1282:       assertFalse(node1.isLabelName());
1283:       assertFalse(node1.isExprResult());
1284:       assertFalse(node1.isGetElem());
1285:       assertFalse(node1.isScript());
1286:       assertFalse(node1.isNumber());
1287:       assertFalse(node1.isNot());
1288:       assertFalse(node1.isOr());
1289:       assertFalse(node1.isAnd());
1290:       assertFalse(node1.isContinue());
1291:       assertFalse(node1.isDo());
1292:       assertFalse(node1.isLabel());
1293:       assertFalse(node1.isAssignAdd());
1294:       assertFalse(node1.isThrow());
1295:       assertEquals(9, node1.getType());
1296:       assertFalse(node1.isInc());
1297:       assertFalse(node1.isParamList());
1298:       assertEquals(53, node1.getLineno());
1299:       assertFalse(node1.isSwitch());
1300:       assertFalse(node1.isStringKey());
1301:       assertFalse(node1.isInstanceOf());
1302:       assertFalse(node1.isCatch());
1303:       assertFalse(node1.hasMoreThanOneChild());
1304:       assertTrue(node1.hasChildren());
1305:       assertFalse(node1.isCase());
1306:       assertFalse(node1.isRegExp());
1307:       assertFalse(node1.isWith());
1308:       assertFalse(node1.isFor());
1309:       assertEquals(1, node1.getChildCount());
1310:       assertFalse(node1.isHook());
1311:       assertFalse(node1.isThis());
1312:       assertFalse(node1.isBlock());
1313:       assertEquals(30, Node.VAR_ARGS_NAME);
1314:       assertEquals(49, Node.DIRECT_EVAL);
1315:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1316:       assertEquals(1, Node.DECR_FLAG);
1317:       assertEquals(54, Node.SLASH_V);
1318:       assertEquals(57, Node.LAST_PROP);
1319:       assertEquals(32, Node.INCRDECR_PROP);
1320:       assertEquals(46, Node.IS_NAMESPACE);
1321:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1322:       assertEquals(57, Node.REFLECTED_OBJECT);
1323:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1324:       assertEquals(52, Node.LENGTH);
1325:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1326:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1327:       assertEquals(37, Node.OPT_ARG_NAME);
1328:       assertEquals(48, Node.DIRECTIVES);
1329:       assertEquals(56, Node.CHANGE_TIME);
1330:       assertEquals(12, Node.COLUMN_BITS);
1331:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1332:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1333:       assertEquals(4095, Node.COLUMN_MASK);
1334:       assertEquals(36, Node.QUOTED_PROP);
1335:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1336:       assertEquals(43, Node.IS_CONSTANT_NAME);
1337:       assertEquals(53, Node.INPUT_ID);
1338:       assertEquals(8, Node.FLAG_NO_THROWS);
1339:       assertEquals(39, Node.EMPTY_BLOCK);
1340:       assertEquals(55, Node.INFERRED_FUNCTION);
1341:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1342:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1343:       assertEquals(29, Node.JSDOC_INFO_PROP);
1344:       assertEquals(50, Node.FREE_CALL);
1345:       assertEquals(47, Node.IS_DISPATCHER);
1346:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1347:       assertEquals(40, Node.ORIGINALNAME_PROP);
1348:       assertEquals(2, Node.POST_FLAG);
1349:       assertEquals(40, Node.ORIGINALNAME_PROP);
1350:       assertEquals(50, Node.FREE_CALL);
1351:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1352:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1353:       assertEquals(57, Node.REFLECTED_OBJECT);
1354:       assertEquals(54, Node.SLASH_V);
1355:       assertEquals(48, Node.DIRECTIVES);
1356:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1357:       assertEquals(1, Node.DECR_FLAG);
1358:       assertEquals(4095, Node.COLUMN_MASK);
1359:       assertEquals(46, Node.IS_NAMESPACE);
1360:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1361:       assertEquals(12, Node.COLUMN_BITS);
1362:       assertEquals(32, Node.INCRDECR_PROP);
1363:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1364:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1365:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1366:       assertEquals(56, Node.CHANGE_TIME);
1367:       assertEquals(47, Node.IS_DISPATCHER);
1368:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1369:       assertEquals(37, Node.OPT_ARG_NAME);
1370:       assertEquals(2, Node.POST_FLAG);
1371:       assertEquals(43, Node.IS_CONSTANT_NAME);
1372:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1373:       assertEquals(55, Node.INFERRED_FUNCTION);
1374:       assertEquals(49, Node.DIRECT_EVAL);
1375:       assertEquals(30, Node.VAR_ARGS_NAME);
1376:       assertEquals(36, Node.QUOTED_PROP);
1377:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1378:       assertEquals(52, Node.LENGTH);
1379:       assertEquals(8, Node.FLAG_NO_THROWS);
1380:       assertEquals(57, Node.LAST_PROP);
1381:       assertEquals(29, Node.JSDOC_INFO_PROP);
1382:       assertEquals(53, Node.INPUT_ID);
1383:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1384:       assertEquals(39, Node.EMPTY_BLOCK);
1385:       
1386:       node2.setIsSyntheticBlock(true);
1387:       assertFalse(node2.equals((Object)node1));
1388:       assertFalse(node2.equals((Object)node0));
1389:       assertNotSame(node2, node0);
1390:       assertFalse(node2.isNE());
1391:       assertFalse(node2.isIf());
1392:       assertFalse(node2.isEmpty());
1393:       assertFalse(node2.isDelProp());
1394:       assertFalse(node2.isIn());
1395:       assertFalse(node2.isDebugger());
1396:       assertFalse(node2.isGetterDef());
1397:       assertFalse(node2.isSwitch());
1398:       assertFalse(node2.isFunction());
1399:       assertFalse(node2.isInc());
1400:       assertFalse(node2.isDefaultCase());
1401:       assertFalse(node2.isArrayLit());
1402:       assertFalse(node2.isThrow());
1403:       assertFalse(node2.isFalse());
1404:       assertEquals(0, node2.getChildCount());
1405:       assertFalse(node2.isThis());
1406:       assertFalse(node2.isSetterDef());
1407:       assertFalse(node2.isParamList());
1408:       assertFalse(node2.isStringKey());
1409:       assertEquals((-1), node2.getCharno());
1410:       assertTrue(node2.isName());
1411:       assertFalse(node2.isScript());
1412:       assertFalse(node2.isRegExp());
1413:       assertFalse(node2.isTry());
1414:       assertFalse(node2.hasOneChild());
1415:       assertFalse(node2.isCase());
1416:       assertFalse(node2.isHook());
1417:       assertFalse(node2.hasMoreThanOneChild());
1418:       assertFalse(node2.isInstanceOf());
1419:       assertFalse(node2.isCatch());
1420:       assertFalse(node2.isFor());
1421:       assertFalse(node2.isWith());
1422:       assertFalse(node2.isBlock());
1423:       assertFalse(node2.isTypeOf());
1424:       assertFalse(node2.isNumber());
1425:       assertFalse(node2.isLabelName());
1426:       assertFalse(node2.isAssignAdd());
1427:       assertFalse(node2.isGetElem());
1428:       assertEquals((-1), node2.getLineno());
1429:       assertFalse(node2.isOr());
1430:       assertEquals((-1), node2.getSourcePosition());
1431:       assertFalse(node2.isAdd());
1432:       assertFalse(node2.isDo());
1433:       assertFalse(node2.isNew());
1434:       assertFalse(node2.isVar());
1435:       assertFalse(node2.isCast());
1436:       assertFalse(node2.isContinue());
1437:       assertFalse(node2.isLabel());
1438:       assertEquals(38, node2.getType());
1439:       assertFalse(node2.isNull());
1440:       assertFalse(node2.isBreak());
1441:       assertFalse(node2.isGetProp());
1442:       assertFalse(node2.isAnd());
1443:       assertFalse(node2.isNot());
1444:       assertFalse(node2.isObjectLit());
1445:       assertFalse(node2.isExprResult());
1446:       assertFalse(node2.isTrue());
1447:       assertFalse(node2.isWhile());
1448:       assertFalse(node2.isString());
1449:       assertFalse(node2.isVoid());
1450:       assertFalse(node2.isCall());
1451:       assertFalse(node2.isAssign());
1452:       assertFalse(node2.isReturn());
1453:       assertFalse(node2.hasChildren());
1454:       assertFalse(node2.isDec());
1455:       assertFalse(node2.isComma());
1456:       assertEquals(8, Node.FLAG_NO_THROWS);
1457:       assertEquals(39, Node.EMPTY_BLOCK);
1458:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1459:       assertEquals(50, Node.FREE_CALL);
1460:       assertEquals(40, Node.ORIGINALNAME_PROP);
1461:       assertEquals(4095, Node.COLUMN_MASK);
1462:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1463:       assertEquals(48, Node.DIRECTIVES);
1464:       assertEquals(54, Node.SLASH_V);
1465:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1466:       assertEquals(43, Node.IS_CONSTANT_NAME);
1467:       assertEquals(12, Node.COLUMN_BITS);
1468:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1469:       assertEquals(32, Node.INCRDECR_PROP);
1470:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1471:       assertEquals(1, Node.DECR_FLAG);
1472:       assertEquals(37, Node.OPT_ARG_NAME);
1473:       
1474:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(131072);
1475:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1476:       assertEquals(131072, node_SideEffectFlags0.valueOf());
1477:       
1478:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
1479:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1480:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1481:       assertEquals(0, node_SideEffectFlags0.valueOf());
1482:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1483:       assertEquals(0, node_SideEffectFlags1.valueOf());
1484:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1485:       
1486:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
1487:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1488:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1489:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1490:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1491:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1492:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1493:       assertEquals(0, node_SideEffectFlags0.valueOf());
1494:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1495:       assertEquals(0, node_SideEffectFlags1.valueOf());
1496:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1497:       assertEquals(0, node_SideEffectFlags2.valueOf());
1498:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1499:       
1500:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
1501:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1502:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1503:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1504:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1505:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1506:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1507:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1508:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1509:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1510:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1511:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1512:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1513:       assertEquals(0, node_SideEffectFlags0.valueOf());
1514:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1515:       assertEquals(0, node_SideEffectFlags1.valueOf());
1516:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1517:       assertEquals(0, node_SideEffectFlags2.valueOf());
1518:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1519:       assertEquals(0, node_SideEffectFlags3.valueOf());
1520:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1521:       
1522:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesGlobalState();
1523:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1524:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1525:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1526:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1527:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1528:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1529:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1530:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1531:       assertEquals(0, node_SideEffectFlags0.valueOf());
1532:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1533:       assertEquals(0, node_SideEffectFlags4.valueOf());
1534:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
1535:       
1536:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setAllFlags();
1537:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1538:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1539:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1540:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1541:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1542:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
1543:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
1544:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
1545:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
1546:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
1547:       assertEquals(0, node_SideEffectFlags0.valueOf());
1548:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1549:       assertEquals(0, node_SideEffectFlags5.valueOf());
1550:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
1551:       
1552:       Node node3 = new Node(224, node2, node1);
1553:       assertFalse(node3.equals((Object)node1));
1554:       assertFalse(node3.equals((Object)node0));
1555:       assertFalse(node3.equals((Object)node2));
1556:       assertFalse(node0.equals((Object)node2));
1557:       assertFalse(node0.equals((Object)node1));
1558:       assertFalse(node1.equals((Object)node2));
1559:       assertFalse(node1.equals((Object)node0));
1560:       assertFalse(node2.equals((Object)node1));
1561:       assertFalse(node2.equals((Object)node0));
1562:       assertFalse(node3.isExprResult());
1563:       assertEquals(224, node3.getType());
1564:       assertFalse(node3.isNot());
1565:       assertFalse(node3.isGetElem());
1566:       assertFalse(node3.isWith());
1567:       assertFalse(node3.isCast());
1568:       assertFalse(node3.isAnd());
1569:       assertFalse(node3.isInstanceOf());
1570:       assertFalse(node3.isLabelName());
1571:       assertFalse(node3.isGetProp());
1572:       assertFalse(node3.isThis());
1573:       assertFalse(node3.isDec());
1574:       assertFalse(node3.isTypeOf());
1575:       assertFalse(node3.isNumber());
1576:       assertFalse(node3.isReturn());
1577:       assertFalse(node3.isAssign());
1578:       assertFalse(node3.isComma());
1579:       assertEquals((-1), node3.getSourcePosition());
1580:       assertFalse(node3.isObjectLit());
1581:       assertFalse(node3.isWhile());
1582:       assertFalse(node3.isScript());
1583:       assertFalse(node3.hasOneChild());
1584:       assertEquals((-1), node3.getCharno());
1585:       assertFalse(node3.isAdd());
1586:       assertFalse(node3.isSwitch());
1587:       assertFalse(node3.isStringKey());
1588:       assertFalse(node3.isName());
1589:       assertFalse(node3.isCall());
1590:       assertFalse(node3.isBreak());
1591:       assertTrue(node3.hasMoreThanOneChild());
1592:       assertFalse(node3.isAssignAdd());
1593:       assertFalse(node3.isNull());
1594:       assertFalse(node3.isOr());
1595:       assertFalse(node3.isLabel());
1596:       assertFalse(node3.isVar());
1597:       assertFalse(node3.isEmpty());
1598:       assertFalse(node3.isDefaultCase());
1599:       assertFalse(node3.isDo());
1600:       assertFalse(node3.isNew());
1601:       assertFalse(node3.isVoid());
1602:       assertFalse(node3.isFunction());
1603:       assertFalse(node3.isTrue());
1604:       assertFalse(node3.isRegExp());
1605:       assertFalse(node3.isDebugger());
1606:       assertFalse(node3.isCatch());
1607:       assertFalse(node3.isIf());
1608:       assertFalse(node3.isDelProp());
1609:       assertFalse(node3.isArrayLit());
1610:       assertTrue(node3.hasChildren());
1611:       assertFalse(node3.isParamList());
1612:       assertFalse(node3.isGetterDef());
1613:       assertFalse(node3.isFor());
1614:       assertFalse(node3.isString());
1615:       assertFalse(node3.isTry());
1616:       assertFalse(node3.isCase());
1617:       assertFalse(node3.isBlock());
1618:       assertFalse(node3.isInc());
1619:       assertFalse(node3.isHook());
1620:       assertFalse(node3.isContinue());
1621:       assertFalse(node3.isFalse());
1622:       assertEquals((-1), node3.getLineno());
1623:       assertFalse(node3.isNE());
1624:       assertFalse(node3.isIn());
1625:       assertEquals(2, node3.getChildCount());
1626:       assertFalse(node3.isThrow());
1627:       assertFalse(node3.isSetterDef());
1628:       assertFalse(node0.isNot());
1629:       assertFalse(node0.isScript());
1630:       assertFalse(node0.isInstanceOf());
1631:       assertFalse(node0.isObjectLit());
1632:       assertFalse(node0.isWith());
1633:       assertFalse(node0.isComma());
1634:       assertFalse(node0.isThis());
1635:       assertFalse(node0.isGetProp());
1636:       assertFalse(node0.hasOneChild());
1637:       assertFalse(node0.isLabelName());
1638:       assertFalse(node0.isThrow());
1639:       assertEquals((-1), node0.getSourcePosition());
1640:       assertFalse(node0.isCast());
1641:       assertFalse(node0.isNumber());
1642:       assertFalse(node0.isFalse());
1643:       assertEquals((-1), node0.getCharno());
1644:       assertFalse(node0.isAnd());
1645:       assertFalse(node0.isSwitch());
1646:       assertFalse(node0.isCase());
1647:       assertFalse(node0.isContinue());
1648:       assertFalse(node0.hasMoreThanOneChild());
1649:       assertFalse(node0.isIn());
1650:       assertFalse(node0.isBlock());
1651:       assertTrue(node0.isString());
1652:       assertFalse(node0.isInc());
1653:       assertFalse(node0.isHook());
1654:       assertFalse(node0.isFor());
1655:       assertEquals((-1), node0.getLineno());
1656:       assertFalse(node0.isNE());
1657:       assertFalse(node0.isIf());
1658:       assertEquals(40, node0.getType());
1659:       assertFalse(node0.isRegExp());
1660:       assertEquals(0, node0.getChildCount());
1661:       assertFalse(node0.isCatch());
1662:       assertFalse(node0.isFunction());
1663:       assertFalse(node0.isTry());
1664:       assertFalse(node0.isSetterDef());
1665:       assertFalse(node0.isDefaultCase());
1666:       assertFalse(node0.isStringKey());
1667:       assertFalse(node0.isGetterDef());
1668:       assertFalse(node0.isDebugger());
1669:       assertFalse(node0.isArrayLit());
1670:       assertFalse(node0.isParamList());
1671:       assertFalse(node0.isDo());
1672:       assertFalse(node0.isNew());
1673:       assertFalse(node0.isAdd());
1674:       assertFalse(node0.isReturn());
1675:       assertFalse(node0.isLabel());
1676:       assertFalse(node0.isVar());
1677:       assertFalse(node0.isWhile());
1678:       assertFalse(node0.isAssignAdd());
1679:       assertFalse(node0.isGetElem());
1680:       assertFalse(node0.isName());
1681:       assertFalse(node0.isAssign());
1682:       assertFalse(node0.isEmpty());
1683:       assertFalse(node0.isCall());
1684:       assertFalse(node0.isBreak());
1685:       assertFalse(node0.hasChildren());
1686:       assertFalse(node0.isTypeOf());
1687:       assertFalse(node0.isDec());
1688:       assertFalse(node0.isOr());
1689:       assertFalse(node0.isVoid());
1690:       assertFalse(node0.isExprResult());
1691:       assertFalse(node0.isTrue());
1692:       assertFalse(node0.isNull());
1693:       assertFalse(node0.isDelProp());
1694:       assertFalse(node1.isArrayLit());
1695:       assertFalse(node1.isEmpty());
1696:       assertFalse(node1.isTry());
1697:       assertFalse(node1.isNE());
1698:       assertEquals(2, node1.getCharno());
1699:       assertFalse(node1.isDelProp());
1700:       assertFalse(node1.isVoid());
1701:       assertFalse(node1.isGetterDef());
1702:       assertFalse(node1.isIf());
1703:       assertFalse(node1.isDebugger());
1704:       assertFalse(node1.isTrue());
1705:       assertFalse(node1.isIn());
1706:       assertFalse(node1.isSetterDef());
1707:       assertFalse(node1.isDefaultCase());
1708:       assertFalse(node1.isFunction());
1709:       assertFalse(node1.isVar());
1710:       assertFalse(node1.isFalse());
1711:       assertFalse(node1.isAdd());
1712:       assertFalse(node1.isName());
1713:       assertFalse(node1.isNew());
1714:       assertFalse(node1.isBreak());
1715:       assertFalse(node1.isCall());
1716:       assertFalse(node1.isNull());
1717:       assertFalse(node1.isString());
1718:       assertFalse(node1.isObjectLit());
1719:       assertFalse(node1.isGetProp());
1720:       assertFalse(node1.isTypeOf());
1721:       assertFalse(node1.isDec());
1722:       assertFalse(node1.isComma());
1723:       assertFalse(node1.isAssign());
1724:       assertFalse(node1.isWhile());
1725:       assertFalse(node1.isReturn());
1726:       assertTrue(node1.hasOneChild());
1727:       assertFalse(node1.isCast());
1728:       assertEquals(217090, node1.getSourcePosition());
1729:       assertFalse(node1.isLabelName());
1730:       assertFalse(node1.isExprResult());
1731:       assertFalse(node1.isGetElem());
1732:       assertFalse(node1.isScript());
1733:       assertFalse(node1.isNumber());
1734:       assertFalse(node1.isNot());
1735:       assertFalse(node1.isOr());
1736:       assertFalse(node1.isAnd());
1737:       assertFalse(node1.isContinue());
1738:       assertFalse(node1.isDo());
1739:       assertFalse(node1.isLabel());
1740:       assertFalse(node1.isAssignAdd());
1741:       assertFalse(node1.isThrow());
1742:       assertEquals(9, node1.getType());
1743:       assertFalse(node1.isInc());
1744:       assertFalse(node1.isParamList());
1745:       assertEquals(53, node1.getLineno());
1746:       assertFalse(node1.isSwitch());
1747:       assertFalse(node1.isStringKey());
1748:       assertFalse(node1.isInstanceOf());
1749:       assertFalse(node1.isCatch());
1750:       assertFalse(node1.hasMoreThanOneChild());
1751:       assertTrue(node1.hasChildren());
1752:       assertFalse(node1.isCase());
1753:       assertFalse(node1.isRegExp());
1754:       assertFalse(node1.isWith());
1755:       assertFalse(node1.isFor());
1756:       assertEquals(1, node1.getChildCount());
1757:       assertFalse(node1.isHook());
1758:       assertFalse(node1.isThis());
1759:       assertFalse(node1.isBlock());
1760:       assertFalse(node2.isNE());
1761:       assertFalse(node2.isIf());
1762:       assertFalse(node2.isEmpty());
1763:       assertFalse(node2.isDelProp());
1764:       assertFalse(node2.isIn());
1765:       assertFalse(node2.isDebugger());
1766:       assertFalse(node2.isGetterDef());
1767:       assertFalse(node2.isSwitch());
1768:       assertFalse(node2.isFunction());
1769:       assertFalse(node2.isInc());
1770:       assertFalse(node2.isDefaultCase());
1771:       assertFalse(node2.isArrayLit());
1772:       assertFalse(node2.isThrow());
1773:       assertFalse(node2.isFalse());
1774:       assertEquals(0, node2.getChildCount());
1775:       assertFalse(node2.isThis());
1776:       assertFalse(node2.isSetterDef());
1777:       assertFalse(node2.isParamList());
1778:       assertFalse(node2.isStringKey());
1779:       assertEquals((-1), node2.getCharno());
1780:       assertTrue(node2.isName());
1781:       assertFalse(node2.isScript());
1782:       assertFalse(node2.isRegExp());
1783:       assertFalse(node2.isTry());
1784:       assertFalse(node2.hasOneChild());
1785:       assertFalse(node2.isCase());
1786:       assertFalse(node2.isHook());
1787:       assertFalse(node2.hasMoreThanOneChild());
1788:       assertFalse(node2.isInstanceOf());
1789:       assertFalse(node2.isCatch());
1790:       assertFalse(node2.isFor());
1791:       assertFalse(node2.isWith());
1792:       assertFalse(node2.isBlock());
1793:       assertFalse(node2.isTypeOf());
1794:       assertFalse(node2.isNumber());
1795:       assertFalse(node2.isLabelName());
1796:       assertFalse(node2.isAssignAdd());
1797:       assertFalse(node2.isGetElem());
1798:       assertEquals((-1), node2.getLineno());
1799:       assertFalse(node2.isOr());
1800:       assertEquals((-1), node2.getSourcePosition());
1801:       assertFalse(node2.isAdd());
1802:       assertFalse(node2.isDo());
1803:       assertFalse(node2.isNew());
1804:       assertFalse(node2.isVar());
1805:       assertFalse(node2.isCast());
1806:       assertFalse(node2.isContinue());
1807:       assertFalse(node2.isLabel());
1808:       assertEquals(38, node2.getType());
1809:       assertFalse(node2.isNull());
1810:       assertFalse(node2.isBreak());
1811:       assertFalse(node2.isGetProp());
1812:       assertFalse(node2.isAnd());
1813:       assertFalse(node2.isNot());
1814:       assertFalse(node2.isObjectLit());
1815:       assertFalse(node2.isExprResult());
1816:       assertFalse(node2.isTrue());
1817:       assertFalse(node2.isWhile());
1818:       assertFalse(node2.isString());
1819:       assertFalse(node2.isVoid());
1820:       assertFalse(node2.isCall());
1821:       assertFalse(node2.isAssign());
1822:       assertFalse(node2.isReturn());
1823:       assertFalse(node2.hasChildren());
1824:       assertFalse(node2.isDec());
1825:       assertFalse(node2.isComma());
1826:       
1827:       node3.setSourceEncodedPositionForTree(105);
1828:       assertFalse(node3.equals((Object)node1));
1829:       assertFalse(node3.equals((Object)node0));
1830:       assertFalse(node3.equals((Object)node2));
1831:       assertFalse(node0.equals((Object)node2));
1832:       assertFalse(node0.equals((Object)node1));
1833:       assertFalse(node0.equals((Object)node3));
1834:       assertFalse(node1.equals((Object)node2));
1835:       assertFalse(node1.equals((Object)node3));
1836:       assertFalse(node1.equals((Object)node0));
1837:       assertFalse(node2.equals((Object)node1));
1838:       assertFalse(node2.equals((Object)node3));
1839:       assertFalse(node2.equals((Object)node0));
1840:       assertNotSame(node3, node1);
1841:       assertNotSame(node0, node2);
1842:       assertNotSame(node1, node3);
1843:       assertNotSame(node2, node0);
1844:       assertFalse(node3.isExprResult());
1845:       assertEquals(224, node3.getType());
1846:       assertFalse(node3.isNot());
1847:       assertFalse(node3.isGetElem());
1848:       assertFalse(node3.isWith());
1849:       assertFalse(node3.isCast());
1850:       assertFalse(node3.isAnd());
1851:       assertFalse(node3.isInstanceOf());
1852:       assertFalse(node3.isLabelName());
1853:       assertFalse(node3.isGetProp());
1854:       assertFalse(node3.isThis());
1855:       assertFalse(node3.isDec());
1856:       assertFalse(node3.isTypeOf());
1857:       assertFalse(node3.isNumber());
1858:       assertFalse(node3.isReturn());
1859:       assertFalse(node3.isAssign());
1860:       assertFalse(node3.isComma());
1861:       assertFalse(node3.isObjectLit());
1862:       assertFalse(node3.isWhile());
1863:       assertFalse(node3.isScript());
1864:       assertFalse(node3.hasOneChild());
1865:       assertFalse(node3.isAdd());
1866:       assertFalse(node3.isSwitch());
1867:       assertFalse(node3.isStringKey());
1868:       assertFalse(node3.isName());
1869:       assertFalse(node3.isCall());
1870:       assertFalse(node3.isBreak());
1871:       assertTrue(node3.hasMoreThanOneChild());
1872:       assertFalse(node3.isAssignAdd());
1873:       assertFalse(node3.isNull());
1874:       assertFalse(node3.isOr());
1875:       assertFalse(node3.isLabel());
1876:       assertFalse(node3.isVar());
1877:       assertFalse(node3.isEmpty());
1878:       assertFalse(node3.isDefaultCase());
1879:       assertFalse(node3.isDo());
1880:       assertFalse(node3.isNew());
1881:       assertFalse(node3.isVoid());
1882:       assertFalse(node3.isFunction());
1883:       assertFalse(node3.isTrue());
1884:       assertFalse(node3.isRegExp());
1885:       assertFalse(node3.isDebugger());
1886:       assertEquals(105, node3.getCharno());
1887:       assertFalse(node3.isCatch());
1888:       assertFalse(node3.isIf());
1889:       assertFalse(node3.isDelProp());
1890:       assertEquals(0, node3.getLineno());
1891:       assertFalse(node3.isArrayLit());
1892:       assertTrue(node3.hasChildren());
1893:       assertFalse(node3.isParamList());
1894:       assertFalse(node3.isGetterDef());
1895:       assertFalse(node3.isFor());
1896:       assertFalse(node3.isString());
1897:       assertFalse(node3.isTry());
1898:       assertFalse(node3.isCase());
1899:       assertFalse(node3.isBlock());
1900:       assertFalse(node3.isInc());
1901:       assertFalse(node3.isHook());
1902:       assertFalse(node3.isContinue());
1903:       assertFalse(node3.isFalse());
1904:       assertEquals(105, node3.getSourcePosition());
1905:       assertFalse(node3.isNE());
1906:       assertFalse(node3.isIn());
1907:       assertEquals(2, node3.getChildCount());
1908:       assertFalse(node3.isThrow());
1909:       assertFalse(node3.isSetterDef());
1910:       assertFalse(node0.isNot());
1911:       assertFalse(node0.isScript());
1912:       assertFalse(node0.isInstanceOf());
1913:       assertFalse(node0.isObjectLit());
1914:       assertFalse(node0.isWith());
1915:       assertFalse(node0.isComma());
1916:       assertFalse(node0.isThis());
1917:       assertFalse(node0.isGetProp());
1918:       assertFalse(node0.hasOneChild());
1919:       assertFalse(node0.isLabelName());
1920:       assertFalse(node0.isThrow());
1921:       assertFalse(node0.isCast());
1922:       assertFalse(node0.isNumber());
1923:       assertFalse(node0.isFalse());
1924:       assertFalse(node0.isAnd());
1925:       assertFalse(node0.isSwitch());
1926:       assertFalse(node0.isCase());
1927:       assertFalse(node0.isContinue());
1928:       assertFalse(node0.hasMoreThanOneChild());
1929:       assertFalse(node0.isIn());
1930:       assertFalse(node0.isBlock());
1931:       assertTrue(node0.isString());
1932:       assertFalse(node0.isInc());
1933:       assertFalse(node0.isHook());
1934:       assertFalse(node0.isFor());
1935:       assertEquals(105, node0.getSourcePosition());
1936:       assertFalse(node0.isNE());
1937:       assertFalse(node0.isIf());
1938:       assertEquals(40, node0.getType());
1939:       assertEquals(105, node0.getCharno());
1940:       assertFalse(node0.isRegExp());
1941:       assertEquals(0, node0.getChildCount());
1942:       assertFalse(node0.isCatch());
1943:       assertFalse(node0.isFunction());
1944:       assertFalse(node0.isTry());
1945:       assertFalse(node0.isSetterDef());
1946:       assertFalse(node0.isDefaultCase());
1947:       assertFalse(node0.isStringKey());
1948:       assertFalse(node0.isGetterDef());
1949:       assertFalse(node0.isDebugger());
1950:       assertEquals(0, node0.getLineno());
1951:       assertFalse(node0.isArrayLit());
1952:       assertFalse(node0.isParamList());
1953:       assertFalse(node0.isDo());
1954:       assertFalse(node0.isNew());
1955:       assertFalse(node0.isAdd());
1956:       assertFalse(node0.isReturn());
1957:       assertFalse(node0.isLabel());
1958:       assertFalse(node0.isVar());
1959:       assertFalse(node0.isWhile());
1960:       assertFalse(node0.isAssignAdd());
1961:       assertFalse(node0.isGetElem());
1962:       assertFalse(node0.isName());
1963:       assertFalse(node0.isAssign());
1964:       assertFalse(node0.isEmpty());
1965:       assertFalse(node0.isCall());
1966:       assertFalse(node0.isBreak());
1967:       assertFalse(node0.hasChildren());
1968:       assertFalse(node0.isTypeOf());
1969:       assertFalse(node0.isDec());
1970:       assertFalse(node0.isOr());
1971:       assertFalse(node0.isVoid());
1972:       assertFalse(node0.isExprResult());
1973:       assertFalse(node0.isTrue());
1974:       assertFalse(node0.isNull());
1975:       assertFalse(node0.isDelProp());
1976:       assertFalse(node1.isArrayLit());
1977:       assertFalse(node1.isEmpty());
1978:       assertFalse(node1.isTry());
1979:       assertFalse(node1.isNE());
1980:       assertFalse(node1.isDelProp());
1981:       assertFalse(node1.isVoid());
1982:       assertFalse(node1.isGetterDef());
1983:       assertFalse(node1.isIf());
1984:       assertFalse(node1.isDebugger());
1985:       assertFalse(node1.isTrue());
1986:       assertFalse(node1.isIn());
1987:       assertEquals(0, node1.getLineno());
1988:       assertFalse(node1.isSetterDef());
1989:       assertFalse(node1.isDefaultCase());
1990:       assertFalse(node1.isFunction());
1991:       assertFalse(node1.isVar());
1992:       assertFalse(node1.isFalse());
1993:       assertFalse(node1.isAdd());
1994:       assertFalse(node1.isName());
1995:       assertFalse(node1.isNew());
1996:       assertFalse(node1.isBreak());
1997:       assertFalse(node1.isCall());
1998:       assertFalse(node1.isNull());
1999:       assertFalse(node1.isString());
2000:       assertEquals(105, node1.getCharno());
2001:       assertFalse(node1.isObjectLit());
2002:       assertFalse(node1.isGetProp());
2003:       assertFalse(node1.isTypeOf());
2004:       assertFalse(node1.isDec());
2005:       assertFalse(node1.isComma());
2006:       assertFalse(node1.isAssign());
2007:       assertFalse(node1.isWhile());
2008:       assertFalse(node1.isReturn());
2009:       assertTrue(node1.hasOneChild());
2010:       assertFalse(node1.isCast());
2011:       assertFalse(node1.isLabelName());
2012:       assertFalse(node1.isExprResult());
2013:       assertFalse(node1.isGetElem());
2014:       assertFalse(node1.isScript());
2015:       assertFalse(node1.isNumber());
2016:       assertFalse(node1.isNot());
2017:       assertFalse(node1.isOr());
2018:       assertFalse(node1.isAnd());
2019:       assertFalse(node1.isContinue());
2020:       assertFalse(node1.isDo());
2021:       assertFalse(node1.isLabel());
2022:       assertFalse(node1.isAssignAdd());
2023:       assertFalse(node1.isThrow());
2024:       assertEquals(9, node1.getType());
2025:       assertFalse(node1.isInc());
2026:       assertEquals(105, node1.getSourcePosition());
2027:       assertFalse(node1.isParamList());
2028:       assertFalse(node1.isSwitch());
2029:       assertFalse(node1.isStringKey());
2030:       assertFalse(node1.isInstanceOf());
2031:       assertFalse(node1.isCatch());
2032:       assertFalse(node1.hasMoreThanOneChild());
2033:       assertTrue(node1.hasChildren());
2034:       assertFalse(node1.isCase());
2035:       assertFalse(node1.isRegExp());
2036:       assertFalse(node1.isWith());
2037:       assertFalse(node1.isFor());
2038:       assertEquals(1, node1.getChildCount());
2039:       assertFalse(node1.isHook());
2040:       assertFalse(node1.isThis());
2041:       assertFalse(node1.isBlock());
2042:       assertFalse(node2.isNE());
2043:       assertFalse(node2.isIf());
2044:       assertFalse(node2.isEmpty());
2045:       assertFalse(node2.isDelProp());
2046:       assertFalse(node2.isIn());
2047:       assertFalse(node2.isDebugger());
2048:       assertFalse(node2.isGetterDef());
2049:       assertFalse(node2.isSwitch());
2050:       assertFalse(node2.isFunction());
2051:       assertFalse(node2.isInc());
2052:       assertFalse(node2.isDefaultCase());
2053:       assertFalse(node2.isArrayLit());
2054:       assertFalse(node2.isThrow());
2055:       assertFalse(node2.isFalse());
2056:       assertEquals(0, node2.getChildCount());
2057:       assertFalse(node2.isThis());
2058:       assertFalse(node2.isSetterDef());
2059:       assertFalse(node2.isParamList());
2060:       assertFalse(node2.isStringKey());
2061:       assertTrue(node2.isName());
2062:       assertFalse(node2.isScript());
2063:       assertFalse(node2.isRegExp());
2064:       assertFalse(node2.isTry());
2065:       assertEquals(105, node2.getSourcePosition());
2066:       assertFalse(node2.hasOneChild());
2067:       assertFalse(node2.isCase());
2068:       assertFalse(node2.isHook());
2069:       assertFalse(node2.hasMoreThanOneChild());
2070:       assertFalse(node2.isInstanceOf());
2071:       assertFalse(node2.isCatch());
2072:       assertFalse(node2.isFor());
2073:       assertFalse(node2.isWith());
2074:       assertFalse(node2.isBlock());
2075:       assertFalse(node2.isTypeOf());
2076:       assertFalse(node2.isNumber());
2077:       assertFalse(node2.isLabelName());
2078:       assertFalse(node2.isAssignAdd());
2079:       assertFalse(node2.isGetElem());
2080:       assertFalse(node2.isOr());
2081:       assertFalse(node2.isAdd());
2082:       assertFalse(node2.isDo());
2083:       assertFalse(node2.isNew());
2084:       assertFalse(node2.isVar());
2085:       assertFalse(node2.isCast());
2086:       assertFalse(node2.isContinue());
2087:       assertFalse(node2.isLabel());
2088:       assertEquals(38, node2.getType());
2089:       assertFalse(node2.isNull());
2090:       assertEquals(0, node2.getLineno());
2091:       assertFalse(node2.isBreak());
2092:       assertFalse(node2.isGetProp());
2093:       assertFalse(node2.isAnd());
2094:       assertFalse(node2.isNot());
2095:       assertFalse(node2.isObjectLit());
2096:       assertFalse(node2.isExprResult());
2097:       assertFalse(node2.isTrue());
2098:       assertFalse(node2.isWhile());
2099:       assertFalse(node2.isString());
2100:       assertFalse(node2.isVoid());
2101:       assertEquals(105, node2.getCharno());
2102:       assertFalse(node2.isCall());
2103:       assertFalse(node2.isAssign());
2104:       assertFalse(node2.isReturn());
2105:       assertFalse(node2.hasChildren());
2106:       assertFalse(node2.isDec());
2107:       assertFalse(node2.isComma());
2108:       
2109:       Node node4 = Node.newNumber((double) 47, 31, (-3036));
2110:       assertFalse(node4.equals((Object)node1));
2111:       assertFalse(node4.equals((Object)node3));
2112:       assertFalse(node4.equals((Object)node0));
2113:       assertFalse(node4.equals((Object)node2));
2114:       assertFalse(node4.isExprResult());
2115:       assertFalse(node4.isScript());
2116:       assertFalse(node4.isCast());
2117:       assertFalse(node4.isGetElem());
2118:       assertFalse(node4.isInstanceOf());
2119:       assertFalse(node4.isAssign());
2120:       assertFalse(node4.isDec());
2121:       assertFalse(node4.isTypeOf());
2122:       assertFalse(node4.isWith());
2123:       assertFalse(node4.isComma());
2124:       assertFalse(node4.isThis());
2125:       assertEquals((-1), node4.getSourcePosition());
2126:       assertFalse(node4.hasChildren());
2127:       assertFalse(node4.isGetProp());
2128:       assertFalse(node4.isReturn());
2129:       assertFalse(node4.isLabelName());
2130:       assertFalse(node4.isAnd());
2131:       assertFalse(node4.isObjectLit());
2132:       assertFalse(node4.hasOneChild());
2133:       assertFalse(node4.isNot());
2134:       assertFalse(node4.isNew());
2135:       assertFalse(node4.isAdd());
2136:       assertEquals((-1), node4.getCharno());
2137:       assertFalse(node4.isWhile());
2138:       assertFalse(node4.isDo());
2139:       assertFalse(node4.isSwitch());
2140:       assertFalse(node4.isCall());
2141:       assertFalse(node4.isVar());
2142:       assertFalse(node4.isNull());
2143:       assertFalse(node4.isBreak());
2144:       assertFalse(node4.isLabel());
2145:       assertFalse(node4.isDelProp());
2146:       assertFalse(node4.isName());
2147:       assertFalse(node4.isAssignAdd());
2148:       assertFalse(node4.isOr());
2149:       assertFalse(node4.isEmpty());
2150:       assertFalse(node4.isFunction());
2151:       assertFalse(node4.isDebugger());
2152:       assertFalse(node4.isTrue());
2153:       assertFalse(node4.isVoid());
2154:       assertFalse(node4.isTry());
2155:       assertFalse(node4.isDefaultCase());
2156:       assertFalse(node4.isCatch());
2157:       assertFalse(node4.isArrayLit());
2158:       assertFalse(node4.isFor());
2159:       assertEquals(0, node4.getChildCount());
2160:       assertFalse(node4.isRegExp());
2161:       assertFalse(node4.isParamList());
2162:       assertTrue(node4.isNumber());
2163:       assertFalse(node4.isStringKey());
2164:       assertFalse(node4.isCase());
2165:       assertFalse(node4.isGetterDef());
2166:       assertFalse(node4.isString());
2167:       assertFalse(node4.isInc());
2168:       assertFalse(node4.isBlock());
2169:       assertFalse(node4.isThrow());
2170:       assertFalse(node4.isHook());
2171:       assertEquals(39, node4.getType());
2172:       assertFalse(node4.isContinue());
2173:       assertFalse(node4.hasMoreThanOneChild());
2174:       assertFalse(node4.isFalse());
2175:       assertFalse(node4.isNE());
2176:       assertFalse(node4.isSetterDef());
2177:       assertEquals((-1), node4.getLineno());
2178:       assertFalse(node4.isIf());
2179:       assertFalse(node4.isIn());
2180:       
2181:       int int0 = node1.getIndexOfChild(node4);
2182:       assertFalse(node0.equals((Object)node2));
2183:       assertFalse(node0.equals((Object)node4));
2184:       assertFalse(node0.equals((Object)node1));
2185:       assertFalse(node0.equals((Object)node3));
2186:       assertFalse(node4.equals((Object)node1));
2187:       assertFalse(node4.equals((Object)node3));
2188:       assertFalse(node4.equals((Object)node0));
2189:       assertFalse(node4.equals((Object)node2));
2190:       assertFalse(node1.equals((Object)node2));
2191:       assertFalse(node1.equals((Object)node3));
2192:       assertFalse(node1.equals((Object)node4));
2193:       assertFalse(node1.equals((Object)node0));
2194:       assertEquals((-1), int0);
2195:       assertNotSame(node0, node2);
2196:       assertNotSame(node1, node3);
2197:       assertFalse(node0.isNot());
2198:       assertFalse(node0.isScript());
2199:       assertFalse(node0.isInstanceOf());
2200:       assertFalse(node0.isObjectLit());
2201:       assertFalse(node0.isWith());
2202:       assertFalse(node0.isComma());
2203:       assertFalse(node0.isThis());
2204:       assertFalse(node0.isGetProp());
2205:       assertFalse(node0.hasOneChild());
2206:       assertFalse(node0.isLabelName());
2207:       assertFalse(node0.isThrow());
2208:       assertFalse(node0.isCast());
2209:       assertFalse(node0.isNumber());
2210:       assertFalse(node0.isFalse());
2211:       assertFalse(node0.isAnd());
2212:       assertFalse(node0.isSwitch());
2213:       assertFalse(node0.isCase());
2214:       assertFalse(node0.isContinue());
2215:       assertFalse(node0.hasMoreThanOneChild());
2216:       assertFalse(node0.isIn());
2217:       assertFalse(node0.isBlock());
2218:       assertTrue(node0.isString());
2219:       assertFalse(node0.isInc());
2220:       assertFalse(node0.isHook());
2221:       assertFalse(node0.isFor());
2222:       assertEquals(105, node0.getSourcePosition());
2223:       assertFalse(node0.isNE());
2224:       assertFalse(node0.isIf());
2225:       assertEquals(40, node0.getType());
2226:       assertEquals(105, node0.getCharno());
2227:       assertFalse(node0.isRegExp());
2228:       assertEquals(0, node0.getChildCount());
2229:       assertFalse(node0.isCatch());
2230:       assertFalse(node0.isFunction());
2231:       assertFalse(node0.isTry());
2232:       assertFalse(node0.isSetterDef());
2233:       assertFalse(node0.isDefaultCase());
2234:       assertFalse(node0.isStringKey());
2235:       assertFalse(node0.isGetterDef());
2236:       assertFalse(node0.isDebugger());
2237:       assertEquals(0, node0.getLineno());
2238:       assertFalse(node0.isArrayLit());
2239:       assertFalse(node0.isParamList());
2240:       assertFalse(node0.isDo());
2241:       assertFalse(node0.isNew());
2242:       assertFalse(node0.isAdd());
2243:       assertFalse(node0.isReturn());
2244:       assertFalse(node0.isLabel());
2245:       assertFalse(node0.isVar());
2246:       assertFalse(node0.isWhile());
2247:       assertFalse(node0.isAssignAdd());
2248:       assertFalse(node0.isGetElem());
2249:       assertFalse(node0.isName());
2250:       assertFalse(node0.isAssign());
2251:       assertFalse(node0.isEmpty());
2252:       assertFalse(node0.isCall());
2253:       assertFalse(node0.isBreak());
2254:       assertFalse(node0.hasChildren());
2255:       assertFalse(node0.isTypeOf());
2256:       assertFalse(node0.isDec());
2257:       assertFalse(node0.isOr());
2258:       assertFalse(node0.isVoid());
2259:       assertFalse(node0.isExprResult());
2260:       assertFalse(node0.isTrue());
2261:       assertFalse(node0.isNull());
2262:       assertFalse(node0.isDelProp());
2263:       assertFalse(node4.isExprResult());
2264:       assertFalse(node4.isScript());
2265:       assertFalse(node4.isCast());
2266:       assertFalse(node4.isGetElem());
2267:       assertFalse(node4.isInstanceOf());
2268:       assertFalse(node4.isAssign());
2269:       assertFalse(node4.isDec());
2270:       assertFalse(node4.isTypeOf());
2271:       assertFalse(node4.isWith());
2272:       assertFalse(node4.isComma());
2273:       assertFalse(node4.isThis());
2274:       assertEquals((-1), node4.getSourcePosition());
2275:       assertFalse(node4.hasChildren());
2276:       assertFalse(node4.isGetProp());
2277:       assertFalse(node4.isReturn());
2278:       assertFalse(node4.isLabelName());
2279:       assertFalse(node4.isAnd());
2280:       assertFalse(node4.isObjectLit());
2281:       assertFalse(node4.hasOneChild());
2282:       assertFalse(node4.isNot());
2283:       assertFalse(node4.isNew());
2284:       assertFalse(node4.isAdd());
2285:       assertEquals((-1), node4.getCharno());
2286:       assertFalse(node4.isWhile());
2287:       assertFalse(node4.isDo());
2288:       assertFalse(node4.isSwitch());
2289:       assertFalse(node4.isCall());
2290:       assertFalse(node4.isVar());
2291:       assertFalse(node4.isNull());
2292:       assertFalse(node4.isBreak());
2293:       assertFalse(node4.isLabel());
2294:       assertFalse(node4.isDelProp());
2295:       assertFalse(node4.isName());
2296:       assertFalse(node4.isAssignAdd());
2297:       assertFalse(node4.isOr());
2298:       assertFalse(node4.isEmpty());
2299:       assertFalse(node4.isFunction());
2300:       assertFalse(node4.isDebugger());
2301:       assertFalse(node4.isTrue());
2302:       assertFalse(node4.isVoid());
2303:       assertFalse(node4.isTry());
2304:       assertFalse(node4.isDefaultCase());
2305:       assertFalse(node4.isCatch());
2306:       assertFalse(node4.isArrayLit());
2307:       assertFalse(node4.isFor());
2308:       assertEquals(0, node4.getChildCount());
2309:       assertFalse(node4.isRegExp());
2310:       assertFalse(node4.isParamList());
2311:       assertTrue(node4.isNumber());
2312:       assertFalse(node4.isStringKey());
2313:       assertFalse(node4.isCase());
2314:       assertFalse(node4.isGetterDef());
2315:       assertFalse(node4.isString());
2316:       assertFalse(node4.isInc());
2317:       assertFalse(node4.isBlock());
2318:       assertFalse(node4.isThrow());
2319:       assertFalse(node4.isHook());
2320:       assertEquals(39, node4.getType());
2321:       assertFalse(node4.isContinue());
2322:       assertFalse(node4.hasMoreThanOneChild());
2323:       assertFalse(node4.isFalse());
2324:       assertFalse(node4.isNE());
2325:       assertFalse(node4.isSetterDef());
2326:       assertEquals((-1), node4.getLineno());
2327:       assertFalse(node4.isIf());
2328:       assertFalse(node4.isIn());
2329:       assertFalse(node1.isArrayLit());
2330:       assertFalse(node1.isEmpty());
2331:       assertFalse(node1.isTry());
2332:       assertFalse(node1.isNE());
2333:       assertFalse(node1.isDelProp());
2334:       assertFalse(node1.isVoid());
2335:       assertFalse(node1.isGetterDef());
2336:       assertFalse(node1.isIf());
2337:       assertFalse(node1.isDebugger());
2338:       assertFalse(node1.isTrue());
2339:       assertFalse(node1.isIn());
2340:       assertEquals(0, node1.getLineno());
2341:       assertFalse(node1.isSetterDef());
2342:       assertFalse(node1.isDefaultCase());
2343:       assertFalse(node1.isFunction());
2344:       assertFalse(node1.isVar());
2345:       assertFalse(node1.isFalse());
2346:       assertFalse(node1.isAdd());
2347:       assertFalse(node1.isName());
2348:       assertFalse(node1.isNew());
2349:       assertFalse(node1.isBreak());
2350:       assertFalse(node1.isCall());
2351:       assertFalse(node1.isNull());
2352:       assertFalse(node1.isString());
2353:       assertEquals(105, node1.getCharno());
2354:       assertFalse(node1.isObjectLit());
2355:       assertFalse(node1.isGetProp());
2356:       assertFalse(node1.isTypeOf());
2357:       assertFalse(node1.isDec());
2358:       assertFalse(node1.isComma());
2359:       assertFalse(node1.isAssign());
2360:       assertFalse(node1.isWhile());
2361:       assertFalse(node1.isReturn());
2362:       assertTrue(node1.hasOneChild());
2363:       assertFalse(node1.isCast());
2364:       assertFalse(node1.isLabelName());
2365:       assertFalse(node1.isExprResult());
2366:       assertFalse(node1.isGetElem());
2367:       assertFalse(node1.isScript());
2368:       assertFalse(node1.isNumber());
2369:       assertFalse(node1.isNot());
2370:       assertFalse(node1.isOr());
2371:       assertFalse(node1.isAnd());
2372:       assertFalse(node1.isContinue());
2373:       assertFalse(node1.isDo());
2374:       assertFalse(node1.isLabel());
2375:       assertFalse(node1.isAssignAdd());
2376:       assertFalse(node1.isThrow());
2377:       assertEquals(9, node1.getType());
2378:       assertFalse(node1.isInc());
2379:       assertEquals(105, node1.getSourcePosition());
2380:       assertFalse(node1.isParamList());
2381:       assertFalse(node1.isSwitch());
2382:       assertFalse(node1.isStringKey());
2383:       assertFalse(node1.isInstanceOf());
2384:       assertFalse(node1.isCatch());
2385:       assertFalse(node1.hasMoreThanOneChild());
2386:       assertTrue(node1.hasChildren());
2387:       assertFalse(node1.isCase());
2388:       assertFalse(node1.isRegExp());
2389:       assertFalse(node1.isWith());
2390:       assertFalse(node1.isFor());
2391:       assertEquals(1, node1.getChildCount());
2392:       assertFalse(node1.isHook());
2393:       assertFalse(node1.isThis());
2394:       assertFalse(node1.isBlock());
2395:       
2396:       Iterable<Node> iterable0 = node4.children();
2397:       assertFalse(node4.equals((Object)node1));
2398:       assertFalse(node4.equals((Object)node3));
2399:       assertFalse(node4.equals((Object)node0));
2400:       assertFalse(node4.equals((Object)node2));
2401:       assertFalse(iterable0.contains(node1));
2402:       assertFalse(node4.isExprResult());
2403:       assertFalse(node4.isScript());
2404:       assertFalse(node4.isCast());
2405:       assertFalse(node4.isGetElem());
2406:       assertFalse(node4.isInstanceOf());
2407:       assertFalse(node4.isAssign());
2408:       assertFalse(node4.isDec());
2409:       assertFalse(node4.isTypeOf());
2410:       assertFalse(node4.isWith());
2411:       assertFalse(node4.isComma());
2412:       assertFalse(node4.isThis());
2413:       assertEquals((-1), node4.getSourcePosition());
2414:       assertFalse(node4.hasChildren());
2415:       assertFalse(node4.isGetProp());
2416:       assertFalse(node4.isReturn());
2417:       assertFalse(node4.isLabelName());
2418:       assertFalse(node4.isAnd());
2419:       assertFalse(node4.isObjectLit());
2420:       assertFalse(node4.hasOneChild());
2421:       assertFalse(node4.isNot());
2422:       assertFalse(node4.isNew());
2423:       assertFalse(node4.isAdd());
2424:       assertEquals((-1), node4.getCharno());
2425:       assertFalse(node4.isWhile());
2426:       assertFalse(node4.isDo());
2427:       assertFalse(node4.isSwitch());
2428:       assertFalse(node4.isCall());
2429:       assertFalse(node4.isVar());
2430:       assertFalse(node4.isNull());
2431:       assertFalse(node4.isBreak());
2432:       assertFalse(node4.isLabel());
2433:       assertFalse(node4.isDelProp());
2434:       assertFalse(node4.isName());
2435:       assertFalse(node4.isAssignAdd());
2436:       assertFalse(node4.isOr());
2437:       assertFalse(node4.isEmpty());
2438:       assertFalse(node4.isFunction());
2439:       assertFalse(node4.isDebugger());
2440:       assertFalse(node4.isTrue());
2441:       assertFalse(node4.isVoid());
2442:       assertFalse(node4.isTry());
2443:       assertFalse(node4.isDefaultCase());
2444:       assertFalse(node4.isCatch());
2445:       assertFalse(node4.isArrayLit());
2446:       assertFalse(node4.isFor());
2447:       assertEquals(0, node4.getChildCount());
2448:       assertFalse(node4.isRegExp());
2449:       assertFalse(node4.isParamList());
2450:       assertTrue(node4.isNumber());
2451:       assertFalse(node4.isStringKey());
2452:       assertFalse(node4.isCase());
2453:       assertFalse(node4.isGetterDef());
2454:       assertFalse(node4.isString());
2455:       assertFalse(node4.isInc());
2456:       assertFalse(node4.isBlock());
2457:       assertFalse(node4.isThrow());
2458:       assertFalse(node4.isHook());
2459:       assertEquals(39, node4.getType());
2460:       assertFalse(node4.isContinue());
2461:       assertFalse(node4.hasMoreThanOneChild());
2462:       assertFalse(node4.isFalse());
2463:       assertFalse(node4.isNE());
2464:       assertFalse(node4.isSetterDef());
2465:       assertEquals((-1), node4.getLineno());
2466:       assertFalse(node4.isIf());
2467:       assertFalse(node4.isIn());
2468:       
2469:       node2.getDirectives();
2470:       assertFalse(node2.equals((Object)node1));
2471:       assertFalse(node2.equals((Object)node3));
2472:       assertFalse(node2.equals((Object)node0));
2473:       assertFalse(node2.equals((Object)node4));
2474:       assertNotSame(node2, node0);
2475:       assertFalse(node2.isNE());
2476:       assertFalse(node2.isIf());
2477:       assertFalse(node2.isEmpty());
2478:       assertFalse(node2.isDelProp());
2479:       assertFalse(node2.isIn());
2480:       assertFalse(node2.isDebugger());
2481:       assertFalse(node2.isGetterDef());
2482:       assertFalse(node2.isSwitch());
2483:       assertFalse(node2.isFunction());
2484:       assertFalse(node2.isInc());
2485:       assertFalse(node2.isDefaultCase());
2486:       assertFalse(node2.isArrayLit());
2487:       assertFalse(node2.isThrow());
2488:       assertFalse(node2.isFalse());
2489:       assertEquals(0, node2.getChildCount());
2490:       assertFalse(node2.isThis());
2491:       assertFalse(node2.isSetterDef());
2492:       assertFalse(node2.isParamList());
2493:       assertFalse(node2.isStringKey());
2494:       assertTrue(node2.isName());
2495:       assertFalse(node2.isScript());
2496:       assertFalse(node2.isRegExp());
2497:       assertFalse(node2.isTry());
2498:       assertEquals(105, node2.getSourcePosition());
2499:       assertFalse(node2.hasOneChild());
2500:       assertFalse(node2.isCase());
2501:       assertFalse(node2.isHook());
2502:       assertFalse(node2.hasMoreThanOneChild());
2503:       assertFalse(node2.isInstanceOf());
2504:       assertFalse(node2.isCatch());
2505:       assertFalse(node2.isFor());
2506:       assertFalse(node2.isWith());
2507:       assertFalse(node2.isBlock());
2508:       assertFalse(node2.isTypeOf());
2509:       assertFalse(node2.isNumber());
2510:       assertFalse(node2.isLabelName());
2511:       assertFalse(node2.isAssignAdd());
2512:       assertFalse(node2.isGetElem());
2513:       assertFalse(node2.isOr());
2514:       assertFalse(node2.isAdd());
2515:       assertFalse(node2.isDo());
2516:       assertFalse(node2.isNew());
2517:       assertFalse(node2.isVar());
2518:       assertFalse(node2.isCast());
2519:       assertFalse(node2.isContinue());
2520:       assertFalse(node2.isLabel());
2521:       assertEquals(38, node2.getType());
2522:       assertFalse(node2.isNull());
2523:       assertEquals(0, node2.getLineno());
2524:       assertFalse(node2.isBreak());
2525:       assertFalse(node2.isGetProp());
2526:       assertFalse(node2.isAnd());
2527:       assertFalse(node2.isNot());
2528:       assertFalse(node2.isObjectLit());
2529:       assertFalse(node2.isExprResult());
2530:       assertFalse(node2.isTrue());
2531:       assertFalse(node2.isWhile());
2532:       assertFalse(node2.isString());
2533:       assertFalse(node2.isVoid());
2534:       assertEquals(105, node2.getCharno());
2535:       assertFalse(node2.isCall());
2536:       assertFalse(node2.isAssign());
2537:       assertFalse(node2.isReturn());
2538:       assertFalse(node2.hasChildren());
2539:       assertFalse(node2.isDec());
2540:       assertFalse(node2.isComma());
2541:   }
2542: }
RegularFileObject[/tmp/EvoSuite_169_1628159306588/com/google/javascript/rhino/Node_169_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:27 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_169_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_169_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
71:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_169_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.SimpleErrorReporter",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.JSDocInfo",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.javascript.rhino.JSTypeExpression",
342:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
343:       "com.google.common.collect.Sets",
344:       "com.google.common.base.Objects",
345:       "com.google.javascript.rhino.InputId",
346:       "com.google.javascript.rhino.jstype.TemplatizedType",
347:       "com.google.common.collect.AbstractIndexedListIterator",
348:       "com.google.common.collect.Iterators$11",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.common.collect.Iterables",
351:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
352:       "com.google.javascript.rhino.jstype.NamedType",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.javascript.rhino.jstype.TernaryValue",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.common.collect.FluentIterable",
358:       "com.google.common.collect.Iterables$2",
359:       "com.google.common.collect.TransformedIterator",
360:       "com.google.common.collect.Iterables$3",
361:       "com.google.common.collect.Iterators$5",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.common.collect.AbstractMultimap$Values",
364:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
365:       "com.google.common.collect.AbstractMapBasedMultimap$1",
366:       "com.google.common.collect.Multimaps$Entries",
367:       "com.google.common.collect.AbstractMultimap$Entries",
368:       "com.google.common.collect.AbstractMapBasedMultimap$2"
369:     );
370:   }
371: }

[MASTER] 10:28:27.340 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(".");
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(40, node0.getType());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);

node0.getProp(4095);
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(40, node0.getType());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);

boolean boolean0 = node0.isVoid();
assertFalse(boolean0);
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(40, node0.getType());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);

Node node1 = new Node(49, node0, node0, node0, node0, 53, 2);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(40, node0.getType());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertEquals(2, node1.getCharno());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertTrue(node1.isThrow());
assertFalse(node1.isVar());
assertFalse(node1.isFalse());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals(49, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCast());
assertEquals(217090, node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertEquals(53, node1.getLineno());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

node1.setWasEmptyNode(true);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(40, node0.getType());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertEquals(2, node1.getCharno());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertTrue(node1.isThrow());
assertFalse(node1.isVar());
assertFalse(node1.isFalse());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals(49, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCast());
assertEquals(217090, node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertEquals(53, node1.getLineno());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean1 = node1.isVarArgs();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(40, node0.getType());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertEquals(2, node1.getCharno());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertTrue(node1.isThrow());
assertFalse(node1.isVar());
assertFalse(node1.isFalse());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertEquals(49, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCast());
assertEquals(217090, node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertEquals(53, node1.getLineno());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

Node node2 = Node.newString(38, ".");
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node2, node0);
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isIn());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertTrue(node2.isName());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isLabel());
assertEquals(38, node2.getType());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);

boolean boolean2 = node2.wasEmptyNode();
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);
assertNotSame(node2, node0);
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isIn());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertTrue(node2.isName());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isLabel());
assertEquals(38, node2.getType());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);

node1.setType(9);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotSame(node0, node2);
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(40, node0.getType());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertEquals(2, node1.getCharno());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isFalse());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCast());
assertEquals(217090, node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertEquals(9, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertEquals(53, node1.getLineno());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

node2.setIsSyntheticBlock(true);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node2, node0);
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isIn());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertTrue(node2.isName());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isLabel());
assertEquals(38, node2.getType());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(131072);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(131072, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());

Node node3 = new Node(224, node2, node1);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.isExprResult());
assertEquals(224, node3.getType());
assertFalse(node3.isNot());
assertFalse(node3.isGetElem());
assertFalse(node3.isWith());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNumber());
assertFalse(node3.isReturn());
assertFalse(node3.isAssign());
assertFalse(node3.isComma());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isObjectLit());
assertFalse(node3.isWhile());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isAdd());
assertFalse(node3.isSwitch());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.isBreak());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNull());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isVar());
assertFalse(node3.isEmpty());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isVoid());
assertFalse(node3.isFunction());
assertFalse(node3.isTrue());
assertFalse(node3.isRegExp());
assertFalse(node3.isDebugger());
assertFalse(node3.isCatch());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isArrayLit());
assertTrue(node3.hasChildren());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isString());
assertFalse(node3.isTry());
assertFalse(node3.isCase());
assertFalse(node3.isBlock());
assertFalse(node3.isInc());
assertFalse(node3.isHook());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isThrow());
assertFalse(node3.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(40, node0.getType());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertEquals(2, node1.getCharno());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isFalse());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCast());
assertEquals(217090, node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertEquals(9, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertEquals(53, node1.getLineno());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isIn());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertTrue(node2.isName());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isLabel());
assertEquals(38, node2.getType());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isComma());

node3.setSourceEncodedPositionForTree(105);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertNotSame(node3, node1);
assertNotSame(node0, node2);
assertNotSame(node1, node3);
assertNotSame(node2, node0);
assertFalse(node3.isExprResult());
assertEquals(224, node3.getType());
assertFalse(node3.isNot());
assertFalse(node3.isGetElem());
assertFalse(node3.isWith());
assertFalse(node3.isCast());
assertFalse(node3.isAnd());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNumber());
assertFalse(node3.isReturn());
assertFalse(node3.isAssign());
assertFalse(node3.isComma());
assertFalse(node3.isObjectLit());
assertFalse(node3.isWhile());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isAdd());
assertFalse(node3.isSwitch());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.isBreak());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNull());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isVar());
assertFalse(node3.isEmpty());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isVoid());
assertFalse(node3.isFunction());
assertFalse(node3.isTrue());
assertFalse(node3.isRegExp());
assertFalse(node3.isDebugger());
assertEquals(105, node3.getCharno());
assertFalse(node3.isCatch());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertEquals(0, node3.getLineno());
assertFalse(node3.isArrayLit());
assertTrue(node3.hasChildren());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isString());
assertFalse(node3.isTry());
assertFalse(node3.isCase());
assertFalse(node3.isBlock());
assertFalse(node3.isInc());
assertFalse(node3.isHook());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertEquals(105, node3.getSourcePosition());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isThrow());
assertFalse(node3.isSetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals(105, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(40, node0.getType());
assertEquals(105, node0.getCharno());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isIn());
assertEquals(0, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isFalse());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertEquals(105, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertEquals(9, node1.getType());
assertFalse(node1.isInc());
assertEquals(105, node1.getSourcePosition());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isIn());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertTrue(node2.isName());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertEquals(105, node2.getSourcePosition());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isLabel());
assertEquals(38, node2.getType());
assertFalse(node2.isNull());
assertEquals(0, node2.getLineno());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isVoid());
assertEquals(105, node2.getCharno());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isComma());

Node node4 = Node.newNumber((double) 47, 31, (-3036));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.isExprResult());
assertFalse(node4.isScript());
assertFalse(node4.isCast());
assertFalse(node4.isGetElem());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.isTypeOf());
assertFalse(node4.isWith());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.hasChildren());
assertFalse(node4.isGetProp());
assertFalse(node4.isReturn());
assertFalse(node4.isLabelName());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.hasOneChild());
assertFalse(node4.isNot());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isWhile());
assertFalse(node4.isDo());
assertFalse(node4.isSwitch());
assertFalse(node4.isCall());
assertFalse(node4.isVar());
assertFalse(node4.isNull());
assertFalse(node4.isBreak());
assertFalse(node4.isLabel());
assertFalse(node4.isDelProp());
assertFalse(node4.isName());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isOr());
assertFalse(node4.isEmpty());
assertFalse(node4.isFunction());
assertFalse(node4.isDebugger());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertFalse(node4.isTry());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isCatch());
assertFalse(node4.isArrayLit());
assertFalse(node4.isFor());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isRegExp());
assertFalse(node4.isParamList());
assertTrue(node4.isNumber());
assertFalse(node4.isStringKey());
assertFalse(node4.isCase());
assertFalse(node4.isGetterDef());
assertFalse(node4.isString());
assertFalse(node4.isInc());
assertFalse(node4.isBlock());
assertFalse(node4.isThrow());
assertFalse(node4.isHook());
assertEquals(39, node4.getType());
assertFalse(node4.isContinue());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isFalse());
assertFalse(node4.isNE());
assertFalse(node4.isSetterDef());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isIf());
assertFalse(node4.isIn());

int int0 = node1.getIndexOfChild(node4);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertEquals((-1), int0);
assertNotSame(node0, node2);
assertNotSame(node1, node3);
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals(105, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals(40, node0.getType());
assertEquals(105, node0.getCharno());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDelProp());
assertFalse(node4.isExprResult());
assertFalse(node4.isScript());
assertFalse(node4.isCast());
assertFalse(node4.isGetElem());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.isTypeOf());
assertFalse(node4.isWith());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.hasChildren());
assertFalse(node4.isGetProp());
assertFalse(node4.isReturn());
assertFalse(node4.isLabelName());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.hasOneChild());
assertFalse(node4.isNot());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isWhile());
assertFalse(node4.isDo());
assertFalse(node4.isSwitch());
assertFalse(node4.isCall());
assertFalse(node4.isVar());
assertFalse(node4.isNull());
assertFalse(node4.isBreak());
assertFalse(node4.isLabel());
assertFalse(node4.isDelProp());
assertFalse(node4.isName());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isOr());
assertFalse(node4.isEmpty());
assertFalse(node4.isFunction());
assertFalse(node4.isDebugger());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertFalse(node4.isTry());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isCatch());
assertFalse(node4.isArrayLit());
assertFalse(node4.isFor());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isRegExp());
assertFalse(node4.isParamList());
assertTrue(node4.isNumber());
assertFalse(node4.isStringKey());
assertFalse(node4.isCase());
assertFalse(node4.isGetterDef());
assertFalse(node4.isString());
assertFalse(node4.isInc());
assertFalse(node4.isBlock());
assertFalse(node4.isThrow());
assertFalse(node4.isHook());
assertEquals(39, node4.getType());
assertFalse(node4.isContinue());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isFalse());
assertFalse(node4.isNE());
assertFalse(node4.isSetterDef());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isIf());
assertFalse(node4.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isIn());
assertEquals(0, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isVar());
assertFalse(node1.isFalse());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isString());
assertEquals(105, node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertEquals(9, node1.getType());
assertFalse(node1.isInc());
assertEquals(105, node1.getSourcePosition());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());

Iterable<Node> iterable0 = node4.children();
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(iterable0.contains(node1));
assertFalse(node4.isExprResult());
assertFalse(node4.isScript());
assertFalse(node4.isCast());
assertFalse(node4.isGetElem());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.isTypeOf());
assertFalse(node4.isWith());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.hasChildren());
assertFalse(node4.isGetProp());
assertFalse(node4.isReturn());
assertFalse(node4.isLabelName());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.hasOneChild());
assertFalse(node4.isNot());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isWhile());
assertFalse(node4.isDo());
assertFalse(node4.isSwitch());
assertFalse(node4.isCall());
assertFalse(node4.isVar());
assertFalse(node4.isNull());
assertFalse(node4.isBreak());
assertFalse(node4.isLabel());
assertFalse(node4.isDelProp());
assertFalse(node4.isName());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isOr());
assertFalse(node4.isEmpty());
assertFalse(node4.isFunction());
assertFalse(node4.isDebugger());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertFalse(node4.isTry());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isCatch());
assertFalse(node4.isArrayLit());
assertFalse(node4.isFor());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isRegExp());
assertFalse(node4.isParamList());
assertTrue(node4.isNumber());
assertFalse(node4.isStringKey());
assertFalse(node4.isCase());
assertFalse(node4.isGetterDef());
assertFalse(node4.isString());
assertFalse(node4.isInc());
assertFalse(node4.isBlock());
assertFalse(node4.isThrow());
assertFalse(node4.isHook());
assertEquals(39, node4.getType());
assertFalse(node4.isContinue());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isFalse());
assertFalse(node4.isNE());
assertFalse(node4.isSetterDef());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isIf());
assertFalse(node4.isIn());

node2.getDirectives();
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertNotSame(node2, node0);
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isIn());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertTrue(node2.isName());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertEquals(105, node2.getSourcePosition());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isGetElem());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isLabel());
assertEquals(38, node2.getType());
assertFalse(node2.isNull());
assertEquals(0, node2.getLineno());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isVoid());
assertEquals(105, node2.getCharno());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isComma());


[MASTER] 10:28:31.173 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_186_1628159310880/com/google/javascript/rhino/Node_186_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_186_1628159310880/com/google/javascript/rhino/Node_186_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:31.173 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:31.173 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:31.174 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 564
[MASTER] 10:28:31.175 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_186_1628159310880/com/google/javascript/rhino/Node_186_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:30 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.ErrorReporter;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import java.util.List;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_186_tmp__ESTest extends Node_186_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
26:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
27:       assertNotNull(jSTypeRegistry0);
28:       
29:       JSType[] jSTypeArray0 = new JSType[0];
30:       Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
31:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
32:       assertFalse(node0.isInstanceOf());
33:       assertFalse(node0.isGetProp());
34:       assertFalse(node0.isComma());
35:       assertFalse(node0.isThis());
36:       assertEquals(83, node0.getType());
37:       assertFalse(node0.isObjectLit());
38:       assertTrue(node0.isParamList());
39:       assertFalse(node0.isThrow());
40:       assertFalse(node0.isScript());
41:       assertFalse(node0.isCast());
42:       assertEquals((-1), node0.getCharno());
43:       assertFalse(node0.isFalse());
44:       assertFalse(node0.isNot());
45:       assertFalse(node0.isSwitch());
46:       assertFalse(node0.isAnd());
47:       assertFalse(node0.isLabelName());
48:       assertEquals((-1), node0.getLineno());
49:       assertFalse(node0.hasMoreThanOneChild());
50:       assertFalse(node0.isContinue());
51:       assertFalse(node0.isNumber());
52:       assertFalse(node0.isIn());
53:       assertFalse(node0.isGetterDef());
54:       assertFalse(node0.isCase());
55:       assertFalse(node0.isFor());
56:       assertFalse(node0.isInc());
57:       assertFalse(node0.hasOneChild());
58:       assertFalse(node0.isHook());
59:       assertFalse(node0.isBlock());
60:       assertFalse(node0.isRegExp());
61:       assertFalse(node0.isWith());
62:       assertFalse(node0.isNE());
63:       assertFalse(node0.isIf());
64:       assertFalse(node0.isCatch());
65:       assertEquals(0, node0.getChildCount());
66:       assertFalse(node0.isSetterDef());
67:       assertFalse(node0.isDefaultCase());
68:       assertFalse(node0.isTry());
69:       assertFalse(node0.isVar());
70:       assertFalse(node0.isFunction());
71:       assertFalse(node0.isDebugger());
72:       assertFalse(node0.isStringKey());
73:       assertFalse(node0.isArrayLit());
74:       assertFalse(node0.isReturn());
75:       assertFalse(node0.isOr());
76:       assertFalse(node0.isAssignAdd());
77:       assertFalse(node0.isLabel());
78:       assertEquals((-1), node0.getSourcePosition());
79:       assertFalse(node0.isDec());
80:       assertFalse(node0.isTypeOf());
81:       assertFalse(node0.isAssign());
82:       assertFalse(node0.isDo());
83:       assertFalse(node0.hasChildren());
84:       assertFalse(node0.isWhile());
85:       assertFalse(node0.isString());
86:       assertFalse(node0.isEmpty());
87:       assertFalse(node0.isNew());
88:       assertFalse(node0.isExprResult());
89:       assertFalse(node0.isAdd());
90:       assertFalse(node0.isTrue());
91:       assertFalse(node0.isBreak());
92:       assertFalse(node0.isGetElem());
93:       assertFalse(node0.isNull());
94:       assertFalse(node0.isCall());
95:       assertFalse(node0.isDelProp());
96:       assertFalse(node0.isVoid());
97:       assertFalse(node0.isName());
98:       assertEquals(51, Node.STATIC_SOURCE_FILE);
99:       assertEquals(12, Node.COLUMN_BITS);
100:       assertEquals(46, Node.IS_NAMESPACE);
101:       assertEquals(1, Node.DECR_FLAG);
102:       assertEquals(37, Node.OPT_ARG_NAME);
103:       assertEquals(49, Node.DIRECT_EVAL);
104:       assertEquals(32, Node.INCRDECR_PROP);
105:       assertEquals(15, Node.NO_SIDE_EFFECTS);
106:       assertEquals(56, Node.CHANGE_TIME);
107:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
108:       assertEquals(29, Node.JSDOC_INFO_PROP);
109:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
110:       assertEquals(52, Node.LENGTH);
111:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
112:       assertEquals(57, Node.REFLECTED_OBJECT);
113:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
114:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
115:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
116:       assertEquals(4095, Node.COLUMN_MASK);
117:       assertEquals(55, Node.INFERRED_FUNCTION);
118:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
119:       assertEquals(48, Node.DIRECTIVES);
120:       assertEquals(43, Node.IS_CONSTANT_NAME);
121:       assertEquals(36, Node.QUOTED_PROP);
122:       assertEquals(39, Node.EMPTY_BLOCK);
123:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
124:       assertEquals(8, Node.FLAG_NO_THROWS);
125:       assertEquals(50, Node.FREE_CALL);
126:       assertEquals(40, Node.ORIGINALNAME_PROP);
127:       assertEquals(53, Node.INPUT_ID);
128:       assertEquals(54, Node.SLASH_V);
129:       assertEquals(57, Node.LAST_PROP);
130:       assertEquals(47, Node.IS_DISPATCHER);
131:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
132:       assertEquals(2, Node.POST_FLAG);
133:       assertEquals(30, Node.VAR_ARGS_NAME);
134:       assertNotNull(node0);
135:       assertEquals(0, jSTypeArray0.length);
136:       
137:       int int0 = 37;
138:       Node node1 = Node.newString(53, "}`tya", 37, 777);
139:       assertFalse(node1.equals((Object)node0));
140:       assertFalse(node1.isScript());
141:       assertEquals(152329, node1.getSourcePosition());
142:       assertFalse(node1.isNot());
143:       assertFalse(node1.isAnd());
144:       assertFalse(node1.isInstanceOf());
145:       assertFalse(node1.isExprResult());
146:       assertFalse(node1.isGetElem());
147:       assertFalse(node1.isWith());
148:       assertFalse(node1.isCast());
149:       assertFalse(node1.hasChildren());
150:       assertFalse(node1.isDec());
151:       assertFalse(node1.isNumber());
152:       assertFalse(node1.isTypeOf());
153:       assertFalse(node1.isAssign());
154:       assertFalse(node1.isLabelName());
155:       assertFalse(node1.isComma());
156:       assertFalse(node1.isThis());
157:       assertFalse(node1.hasOneChild());
158:       assertFalse(node1.isGetProp());
159:       assertFalse(node1.isObjectLit());
160:       assertFalse(node1.isCase());
161:       assertFalse(node1.isBlock());
162:       assertFalse(node1.isHook());
163:       assertEquals(777, node1.getCharno());
164:       assertFalse(node1.isFalse());
165:       assertFalse(node1.hasMoreThanOneChild());
166:       assertFalse(node1.isContinue());
167:       assertFalse(node1.isIf());
168:       assertEquals(37, node1.getLineno());
169:       assertFalse(node1.isSetterDef());
170:       assertFalse(node1.isThrow());
171:       assertFalse(node1.isNE());
172:       assertFalse(node1.isIn());
173:       assertFalse(node1.isInc());
174:       assertFalse(node1.isDefaultCase());
175:       assertFalse(node1.isRegExp());
176:       assertFalse(node1.isDebugger());
177:       assertFalse(node1.isVoid());
178:       assertFalse(node1.isTrue());
179:       assertEquals(0, node1.getChildCount());
180:       assertFalse(node1.isArrayLit());
181:       assertFalse(node1.isFunction());
182:       assertFalse(node1.isCatch());
183:       assertEquals(53, node1.getType());
184:       assertFalse(node1.isGetterDef());
185:       assertFalse(node1.isStringKey());
186:       assertFalse(node1.isFor());
187:       assertFalse(node1.isParamList());
188:       assertFalse(node1.isTry());
189:       assertFalse(node1.isString());
190:       assertFalse(node1.isDo());
191:       assertFalse(node1.isSwitch());
192:       assertFalse(node1.isWhile());
193:       assertFalse(node1.isReturn());
194:       assertFalse(node1.isLabel());
195:       assertFalse(node1.isCall());
196:       assertFalse(node1.isBreak());
197:       assertFalse(node1.isDelProp());
198:       assertFalse(node1.isNull());
199:       assertFalse(node1.isName());
200:       assertFalse(node1.isVar());
201:       assertFalse(node1.isAssignAdd());
202:       assertFalse(node1.isOr());
203:       assertFalse(node1.isNew());
204:       assertFalse(node1.isAdd());
205:       assertFalse(node1.isEmpty());
206:       assertEquals(15, Node.NO_SIDE_EFFECTS);
207:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
208:       assertEquals(30, Node.VAR_ARGS_NAME);
209:       assertEquals(52, Node.LENGTH);
210:       assertEquals(12, Node.COLUMN_BITS);
211:       assertEquals(32, Node.INCRDECR_PROP);
212:       assertEquals(1, Node.DECR_FLAG);
213:       assertEquals(57, Node.LAST_PROP);
214:       assertEquals(8, Node.FLAG_NO_THROWS);
215:       assertEquals(39, Node.EMPTY_BLOCK);
216:       assertEquals(48, Node.DIRECTIVES);
217:       assertEquals(37, Node.OPT_ARG_NAME);
218:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
219:       assertEquals(29, Node.JSDOC_INFO_PROP);
220:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
221:       assertEquals(57, Node.REFLECTED_OBJECT);
222:       assertEquals(49, Node.DIRECT_EVAL);
223:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
224:       assertEquals(56, Node.CHANGE_TIME);
225:       assertEquals(36, Node.QUOTED_PROP);
226:       assertEquals(53, Node.INPUT_ID);
227:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
228:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
229:       assertEquals(55, Node.INFERRED_FUNCTION);
230:       assertEquals(4095, Node.COLUMN_MASK);
231:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
232:       assertEquals(2, Node.POST_FLAG);
233:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
234:       assertEquals(47, Node.IS_DISPATCHER);
235:       assertEquals(50, Node.FREE_CALL);
236:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
237:       assertEquals(40, Node.ORIGINALNAME_PROP);
238:       assertEquals(51, Node.STATIC_SOURCE_FILE);
239:       assertEquals(46, Node.IS_NAMESPACE);
240:       assertEquals(54, Node.SLASH_V);
241:       assertEquals(43, Node.IS_CONSTANT_NAME);
242:       assertNotNull(node1);
243:       
244:       boolean boolean0 = node0.isQualifiedName();
245:       assertFalse(node0.equals((Object)node1));
246:       assertFalse(boolean0);
247:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
248:       assertFalse(node0.isInstanceOf());
249:       assertFalse(node0.isGetProp());
250:       assertFalse(node0.isComma());
251:       assertFalse(node0.isThis());
252:       assertEquals(83, node0.getType());
253:       assertFalse(node0.isObjectLit());
254:       assertTrue(node0.isParamList());
255:       assertFalse(node0.isThrow());
256:       assertFalse(node0.isScript());
257:       assertFalse(node0.isCast());
258:       assertEquals((-1), node0.getCharno());
259:       assertFalse(node0.isFalse());
260:       assertFalse(node0.isNot());
261:       assertFalse(node0.isSwitch());
262:       assertFalse(node0.isAnd());
263:       assertFalse(node0.isLabelName());
264:       assertEquals((-1), node0.getLineno());
265:       assertFalse(node0.hasMoreThanOneChild());
266:       assertFalse(node0.isContinue());
267:       assertFalse(node0.isNumber());
268:       assertFalse(node0.isIn());
269:       assertFalse(node0.isGetterDef());
270:       assertFalse(node0.isCase());
271:       assertFalse(node0.isFor());
272:       assertFalse(node0.isInc());
273:       assertFalse(node0.hasOneChild());
274:       assertFalse(node0.isHook());
275:       assertFalse(node0.isBlock());
276:       assertFalse(node0.isRegExp());
277:       assertFalse(node0.isWith());
278:       assertFalse(node0.isNE());
279:       assertFalse(node0.isIf());
280:       assertFalse(node0.isCatch());
281:       assertEquals(0, node0.getChildCount());
282:       assertFalse(node0.isSetterDef());
283:       assertFalse(node0.isDefaultCase());
284:       assertFalse(node0.isTry());
285:       assertFalse(node0.isVar());
286:       assertFalse(node0.isFunction());
287:       assertFalse(node0.isDebugger());
288:       assertFalse(node0.isStringKey());
289:       assertFalse(node0.isArrayLit());
290:       assertFalse(node0.isReturn());
291:       assertFalse(node0.isOr());
292:       assertFalse(node0.isAssignAdd());
293:       assertFalse(node0.isLabel());
294:       assertEquals((-1), node0.getSourcePosition());
295:       assertFalse(node0.isDec());
296:       assertFalse(node0.isTypeOf());
297:       assertFalse(node0.isAssign());
298:       assertFalse(node0.isDo());
299:       assertFalse(node0.hasChildren());
300:       assertFalse(node0.isWhile());
301:       assertFalse(node0.isString());
302:       assertFalse(node0.isEmpty());
303:       assertFalse(node0.isNew());
304:       assertFalse(node0.isExprResult());
305:       assertFalse(node0.isAdd());
306:       assertFalse(node0.isTrue());
307:       assertFalse(node0.isBreak());
308:       assertFalse(node0.isGetElem());
309:       assertFalse(node0.isNull());
310:       assertFalse(node0.isCall());
311:       assertFalse(node0.isDelProp());
312:       assertFalse(node0.isVoid());
313:       assertFalse(node0.isName());
314:       assertEquals(51, Node.STATIC_SOURCE_FILE);
315:       assertEquals(12, Node.COLUMN_BITS);
316:       assertEquals(46, Node.IS_NAMESPACE);
317:       assertEquals(1, Node.DECR_FLAG);
318:       assertEquals(37, Node.OPT_ARG_NAME);
319:       assertEquals(49, Node.DIRECT_EVAL);
320:       assertEquals(32, Node.INCRDECR_PROP);
321:       assertEquals(15, Node.NO_SIDE_EFFECTS);
322:       assertEquals(56, Node.CHANGE_TIME);
323:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
324:       assertEquals(29, Node.JSDOC_INFO_PROP);
325:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
326:       assertEquals(52, Node.LENGTH);
327:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
328:       assertEquals(57, Node.REFLECTED_OBJECT);
329:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
330:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
331:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
332:       assertEquals(4095, Node.COLUMN_MASK);
333:       assertEquals(55, Node.INFERRED_FUNCTION);
334:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
335:       assertEquals(48, Node.DIRECTIVES);
336:       assertEquals(43, Node.IS_CONSTANT_NAME);
337:       assertEquals(36, Node.QUOTED_PROP);
338:       assertEquals(39, Node.EMPTY_BLOCK);
339:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
340:       assertEquals(8, Node.FLAG_NO_THROWS);
341:       assertEquals(50, Node.FREE_CALL);
342:       assertEquals(40, Node.ORIGINALNAME_PROP);
343:       assertEquals(53, Node.INPUT_ID);
344:       assertEquals(54, Node.SLASH_V);
345:       assertEquals(57, Node.LAST_PROP);
346:       assertEquals(47, Node.IS_DISPATCHER);
347:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
348:       assertEquals(2, Node.POST_FLAG);
349:       assertEquals(30, Node.VAR_ARGS_NAME);
350:       assertEquals(0, jSTypeArray0.length);
351:       
352:       node1.addChildToBack(node0);
353:       assertFalse(node0.equals((Object)node1));
354:       assertFalse(node1.equals((Object)node0));
355:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
356:       assertFalse(node0.isInstanceOf());
357:       assertFalse(node0.isGetProp());
358:       assertFalse(node0.isComma());
359:       assertFalse(node0.isThis());
360:       assertEquals(83, node0.getType());
361:       assertFalse(node0.isObjectLit());
362:       assertTrue(node0.isParamList());
363:       assertFalse(node0.isThrow());
364:       assertFalse(node0.isScript());
365:       assertFalse(node0.isCast());
366:       assertEquals((-1), node0.getCharno());
367:       assertFalse(node0.isFalse());
368:       assertFalse(node0.isNot());
369:       assertFalse(node0.isSwitch());
370:       assertFalse(node0.isAnd());
371:       assertFalse(node0.isLabelName());
372:       assertEquals((-1), node0.getLineno());
373:       assertFalse(node0.hasMoreThanOneChild());
374:       assertFalse(node0.isContinue());
375:       assertFalse(node0.isNumber());
376:       assertFalse(node0.isIn());
377:       assertFalse(node0.isGetterDef());
378:       assertFalse(node0.isCase());
379:       assertFalse(node0.isFor());
380:       assertFalse(node0.isInc());
381:       assertFalse(node0.hasOneChild());
382:       assertFalse(node0.isHook());
383:       assertFalse(node0.isBlock());
384:       assertFalse(node0.isRegExp());
385:       assertFalse(node0.isWith());
386:       assertFalse(node0.isNE());
387:       assertFalse(node0.isIf());
388:       assertFalse(node0.isCatch());
389:       assertEquals(0, node0.getChildCount());
390:       assertFalse(node0.isSetterDef());
391:       assertFalse(node0.isDefaultCase());
392:       assertFalse(node0.isTry());
393:       assertFalse(node0.isVar());
394:       assertFalse(node0.isFunction());
395:       assertFalse(node0.isDebugger());
396:       assertFalse(node0.isStringKey());
397:       assertFalse(node0.isArrayLit());
398:       assertFalse(node0.isReturn());
399:       assertFalse(node0.isOr());
400:       assertFalse(node0.isAssignAdd());
401:       assertFalse(node0.isLabel());
402:       assertEquals((-1), node0.getSourcePosition());
403:       assertFalse(node0.isDec());
404:       assertFalse(node0.isTypeOf());
405:       assertFalse(node0.isAssign());
406:       assertFalse(node0.isDo());
407:       assertFalse(node0.hasChildren());
408:       assertFalse(node0.isWhile());
409:       assertFalse(node0.isString());
410:       assertFalse(node0.isEmpty());
411:       assertFalse(node0.isNew());
412:       assertFalse(node0.isExprResult());
413:       assertFalse(node0.isAdd());
414:       assertFalse(node0.isTrue());
415:       assertFalse(node0.isBreak());
416:       assertFalse(node0.isGetElem());
417:       assertFalse(node0.isNull());
418:       assertFalse(node0.isCall());
419:       assertFalse(node0.isDelProp());
420:       assertFalse(node0.isVoid());
421:       assertFalse(node0.isName());
422:       assertFalse(node1.isScript());
423:       assertEquals(152329, node1.getSourcePosition());
424:       assertFalse(node1.isNot());
425:       assertFalse(node1.isAnd());
426:       assertFalse(node1.isInstanceOf());
427:       assertFalse(node1.isExprResult());
428:       assertFalse(node1.isGetElem());
429:       assertFalse(node1.isWith());
430:       assertFalse(node1.isCast());
431:       assertFalse(node1.isDec());
432:       assertFalse(node1.isNumber());
433:       assertFalse(node1.isTypeOf());
434:       assertFalse(node1.isAssign());
435:       assertFalse(node1.isLabelName());
436:       assertFalse(node1.isComma());
437:       assertFalse(node1.isThis());
438:       assertFalse(node1.isGetProp());
439:       assertFalse(node1.isObjectLit());
440:       assertFalse(node1.isCase());
441:       assertFalse(node1.isBlock());
442:       assertFalse(node1.isHook());
443:       assertEquals(777, node1.getCharno());
444:       assertEquals(1, node1.getChildCount());
445:       assertFalse(node1.isFalse());
446:       assertTrue(node1.hasChildren());
447:       assertFalse(node1.hasMoreThanOneChild());
448:       assertFalse(node1.isContinue());
449:       assertFalse(node1.isIf());
450:       assertEquals(37, node1.getLineno());
451:       assertFalse(node1.isSetterDef());
452:       assertFalse(node1.isThrow());
453:       assertFalse(node1.isNE());
454:       assertFalse(node1.isIn());
455:       assertFalse(node1.isInc());
456:       assertFalse(node1.isDefaultCase());
457:       assertFalse(node1.isRegExp());
458:       assertFalse(node1.isDebugger());
459:       assertFalse(node1.isVoid());
460:       assertFalse(node1.isTrue());
461:       assertFalse(node1.isArrayLit());
462:       assertFalse(node1.isFunction());
463:       assertFalse(node1.isCatch());
464:       assertEquals(53, node1.getType());
465:       assertTrue(node1.hasOneChild());
466:       assertFalse(node1.isGetterDef());
467:       assertFalse(node1.isStringKey());
468:       assertFalse(node1.isFor());
469:       assertFalse(node1.isParamList());
470:       assertFalse(node1.isTry());
471:       assertFalse(node1.isString());
472:       assertFalse(node1.isDo());
473:       assertFalse(node1.isSwitch());
474:       assertFalse(node1.isWhile());
475:       assertFalse(node1.isReturn());
476:       assertFalse(node1.isLabel());
477:       assertFalse(node1.isCall());
478:       assertFalse(node1.isBreak());
479:       assertFalse(node1.isDelProp());
480:       assertFalse(node1.isNull());
481:       assertFalse(node1.isName());
482:       assertFalse(node1.isVar());
483:       assertFalse(node1.isAssignAdd());
484:       assertFalse(node1.isOr());
485:       assertFalse(node1.isNew());
486:       assertFalse(node1.isAdd());
487:       assertFalse(node1.isEmpty());
488:       assertEquals(51, Node.STATIC_SOURCE_FILE);
489:       assertEquals(12, Node.COLUMN_BITS);
490:       assertEquals(46, Node.IS_NAMESPACE);
491:       assertEquals(1, Node.DECR_FLAG);
492:       assertEquals(37, Node.OPT_ARG_NAME);
493:       assertEquals(49, Node.DIRECT_EVAL);
494:       assertEquals(32, Node.INCRDECR_PROP);
495:       assertEquals(15, Node.NO_SIDE_EFFECTS);
496:       assertEquals(56, Node.CHANGE_TIME);
497:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
498:       assertEquals(29, Node.JSDOC_INFO_PROP);
499:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
500:       assertEquals(52, Node.LENGTH);
501:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
502:       assertEquals(57, Node.REFLECTED_OBJECT);
503:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
504:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
505:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
506:       assertEquals(4095, Node.COLUMN_MASK);
507:       assertEquals(55, Node.INFERRED_FUNCTION);
508:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
509:       assertEquals(48, Node.DIRECTIVES);
510:       assertEquals(43, Node.IS_CONSTANT_NAME);
511:       assertEquals(36, Node.QUOTED_PROP);
512:       assertEquals(39, Node.EMPTY_BLOCK);
513:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
514:       assertEquals(8, Node.FLAG_NO_THROWS);
515:       assertEquals(50, Node.FREE_CALL);
516:       assertEquals(40, Node.ORIGINALNAME_PROP);
517:       assertEquals(53, Node.INPUT_ID);
518:       assertEquals(54, Node.SLASH_V);
519:       assertEquals(57, Node.LAST_PROP);
520:       assertEquals(47, Node.IS_DISPATCHER);
521:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
522:       assertEquals(2, Node.POST_FLAG);
523:       assertEquals(30, Node.VAR_ARGS_NAME);
524:       assertEquals(15, Node.NO_SIDE_EFFECTS);
525:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
526:       assertEquals(30, Node.VAR_ARGS_NAME);
527:       assertEquals(52, Node.LENGTH);
528:       assertEquals(12, Node.COLUMN_BITS);
529:       assertEquals(32, Node.INCRDECR_PROP);
530:       assertEquals(1, Node.DECR_FLAG);
531:       assertEquals(57, Node.LAST_PROP);
532:       assertEquals(8, Node.FLAG_NO_THROWS);
533:       assertEquals(39, Node.EMPTY_BLOCK);
534:       assertEquals(48, Node.DIRECTIVES);
535:       assertEquals(37, Node.OPT_ARG_NAME);
536:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
537:       assertEquals(29, Node.JSDOC_INFO_PROP);
538:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
539:       assertEquals(57, Node.REFLECTED_OBJECT);
540:       assertEquals(49, Node.DIRECT_EVAL);
541:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
542:       assertEquals(56, Node.CHANGE_TIME);
543:       assertEquals(36, Node.QUOTED_PROP);
544:       assertEquals(53, Node.INPUT_ID);
545:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
546:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
547:       assertEquals(55, Node.INFERRED_FUNCTION);
548:       assertEquals(4095, Node.COLUMN_MASK);
549:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
550:       assertEquals(2, Node.POST_FLAG);
551:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
552:       assertEquals(47, Node.IS_DISPATCHER);
553:       assertEquals(50, Node.FREE_CALL);
554:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
555:       assertEquals(40, Node.ORIGINALNAME_PROP);
556:       assertEquals(51, Node.STATIC_SOURCE_FILE);
557:       assertEquals(46, Node.IS_NAMESPACE);
558:       assertEquals(54, Node.SLASH_V);
559:       assertEquals(43, Node.IS_CONSTANT_NAME);
560:       assertEquals(0, jSTypeArray0.length);
561:       
562:       Iterable<Node> iterable0 = node0.children();
563:       assertFalse(node0.equals((Object)node1));
564:       assertFalse(iterable0.contains(node0));
565:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
566:       assertFalse(node0.isInstanceOf());
567:       assertFalse(node0.isGetProp());
568:       assertFalse(node0.isComma());
569:       assertFalse(node0.isThis());
570:       assertEquals(83, node0.getType());
571:       assertFalse(node0.isObjectLit());
572:       assertTrue(node0.isParamList());
573:       assertFalse(node0.isThrow());
574:       assertFalse(node0.isScript());
575:       assertFalse(node0.isCast());
576:       assertEquals((-1), node0.getCharno());
577:       assertFalse(node0.isFalse());
578:       assertFalse(node0.isNot());
579:       assertFalse(node0.isSwitch());
580:       assertFalse(node0.isAnd());
581:       assertFalse(node0.isLabelName());
582:       assertEquals((-1), node0.getLineno());
583:       assertFalse(node0.hasMoreThanOneChild());
584:       assertFalse(node0.isContinue());
585:       assertFalse(node0.isNumber());
586:       assertFalse(node0.isIn());
587:       assertFalse(node0.isGetterDef());
588:       assertFalse(node0.isCase());
589:       assertFalse(node0.isFor());
590:       assertFalse(node0.isInc());
591:       assertFalse(node0.hasOneChild());
592:       assertFalse(node0.isHook());
593:       assertFalse(node0.isBlock());
594:       assertFalse(node0.isRegExp());
595:       assertFalse(node0.isWith());
596:       assertFalse(node0.isNE());
597:       assertFalse(node0.isIf());
598:       assertFalse(node0.isCatch());
599:       assertEquals(0, node0.getChildCount());
600:       assertFalse(node0.isSetterDef());
601:       assertFalse(node0.isDefaultCase());
602:       assertFalse(node0.isTry());
603:       assertFalse(node0.isVar());
604:       assertFalse(node0.isFunction());
605:       assertFalse(node0.isDebugger());
606:       assertFalse(node0.isStringKey());
607:       assertFalse(node0.isArrayLit());
608:       assertFalse(node0.isReturn());
609:       assertFalse(node0.isOr());
610:       assertFalse(node0.isAssignAdd());
611:       assertFalse(node0.isLabel());
612:       assertEquals((-1), node0.getSourcePosition());
613:       assertFalse(node0.isDec());
614:       assertFalse(node0.isTypeOf());
615:       assertFalse(node0.isAssign());
616:       assertFalse(node0.isDo());
617:       assertFalse(node0.hasChildren());
618:       assertFalse(node0.isWhile());
619:       assertFalse(node0.isString());
620:       assertFalse(node0.isEmpty());
621:       assertFalse(node0.isNew());
622:       assertFalse(node0.isExprResult());
623:       assertFalse(node0.isAdd());
624:       assertFalse(node0.isTrue());
625:       assertFalse(node0.isBreak());
626:       assertFalse(node0.isGetElem());
627:       assertFalse(node0.isNull());
628:       assertFalse(node0.isCall());
629:       assertFalse(node0.isDelProp());
630:       assertFalse(node0.isVoid());
631:       assertFalse(node0.isName());
632:       assertEquals(51, Node.STATIC_SOURCE_FILE);
633:       assertEquals(12, Node.COLUMN_BITS);
634:       assertEquals(46, Node.IS_NAMESPACE);
635:       assertEquals(1, Node.DECR_FLAG);
636:       assertEquals(37, Node.OPT_ARG_NAME);
637:       assertEquals(49, Node.DIRECT_EVAL);
638:       assertEquals(32, Node.INCRDECR_PROP);
639:       assertEquals(15, Node.NO_SIDE_EFFECTS);
640:       assertEquals(56, Node.CHANGE_TIME);
641:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
642:       assertEquals(29, Node.JSDOC_INFO_PROP);
643:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
644:       assertEquals(52, Node.LENGTH);
645:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
646:       assertEquals(57, Node.REFLECTED_OBJECT);
647:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
648:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
649:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
650:       assertEquals(4095, Node.COLUMN_MASK);
651:       assertEquals(55, Node.INFERRED_FUNCTION);
652:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
653:       assertEquals(48, Node.DIRECTIVES);
654:       assertEquals(43, Node.IS_CONSTANT_NAME);
655:       assertEquals(36, Node.QUOTED_PROP);
656:       assertEquals(39, Node.EMPTY_BLOCK);
657:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
658:       assertEquals(8, Node.FLAG_NO_THROWS);
659:       assertEquals(50, Node.FREE_CALL);
660:       assertEquals(40, Node.ORIGINALNAME_PROP);
661:       assertEquals(53, Node.INPUT_ID);
662:       assertEquals(54, Node.SLASH_V);
663:       assertEquals(57, Node.LAST_PROP);
664:       assertEquals(47, Node.IS_DISPATCHER);
665:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
666:       assertEquals(2, Node.POST_FLAG);
667:       assertEquals(30, Node.VAR_ARGS_NAME);
668:       assertNotNull(iterable0);
669:       assertEquals(0, jSTypeArray0.length);
670:       
671:       Node node2 = node1.srcrefTree(node0);
672:       assertFalse(node0.equals((Object)node1));
673:       assertFalse(node1.equals((Object)node0));
674:       assertFalse(node2.equals((Object)node0));
675:       assertSame(node1, node2);
676:       assertSame(node2, node1);
677:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
678:       assertFalse(node0.isInstanceOf());
679:       assertFalse(node0.isGetProp());
680:       assertFalse(node0.isComma());
681:       assertFalse(node0.isThis());
682:       assertEquals(83, node0.getType());
683:       assertFalse(node0.isObjectLit());
684:       assertTrue(node0.isParamList());
685:       assertFalse(node0.isThrow());
686:       assertFalse(node0.isScript());
687:       assertFalse(node0.isCast());
688:       assertEquals((-1), node0.getCharno());
689:       assertFalse(node0.isFalse());
690:       assertFalse(node0.isNot());
691:       assertFalse(node0.isSwitch());
692:       assertFalse(node0.isAnd());
693:       assertFalse(node0.isLabelName());
694:       assertEquals((-1), node0.getLineno());
695:       assertFalse(node0.hasMoreThanOneChild());
696:       assertFalse(node0.isContinue());
697:       assertFalse(node0.isNumber());
698:       assertFalse(node0.isIn());
699:       assertFalse(node0.isGetterDef());
700:       assertFalse(node0.isCase());
701:       assertFalse(node0.isFor());
702:       assertFalse(node0.isInc());
703:       assertFalse(node0.hasOneChild());
704:       assertFalse(node0.isHook());
705:       assertFalse(node0.isBlock());
706:       assertFalse(node0.isRegExp());
707:       assertFalse(node0.isWith());
708:       assertFalse(node0.isNE());
709:       assertFalse(node0.isIf());
710:       assertFalse(node0.isCatch());
711:       assertEquals(0, node0.getChildCount());
712:       assertFalse(node0.isSetterDef());
713:       assertFalse(node0.isDefaultCase());
714:       assertFalse(node0.isTry());
715:       assertFalse(node0.isVar());
716:       assertFalse(node0.isFunction());
717:       assertFalse(node0.isDebugger());
718:       assertFalse(node0.isStringKey());
719:       assertFalse(node0.isArrayLit());
720:       assertFalse(node0.isReturn());
721:       assertFalse(node0.isOr());
722:       assertFalse(node0.isAssignAdd());
723:       assertFalse(node0.isLabel());
724:       assertEquals((-1), node0.getSourcePosition());
725:       assertFalse(node0.isDec());
726:       assertFalse(node0.isTypeOf());
727:       assertFalse(node0.isAssign());
728:       assertFalse(node0.isDo());
729:       assertFalse(node0.hasChildren());
730:       assertFalse(node0.isWhile());
731:       assertFalse(node0.isString());
732:       assertFalse(node0.isEmpty());
733:       assertFalse(node0.isNew());
734:       assertFalse(node0.isExprResult());
735:       assertFalse(node0.isAdd());
736:       assertFalse(node0.isTrue());
737:       assertFalse(node0.isBreak());
738:       assertFalse(node0.isGetElem());
739:       assertFalse(node0.isNull());
740:       assertFalse(node0.isCall());
741:       assertFalse(node0.isDelProp());
742:       assertFalse(node0.isVoid());
743:       assertFalse(node0.isName());
744:       assertFalse(node1.isScript());
745:       assertFalse(node1.isNot());
746:       assertFalse(node1.isAnd());
747:       assertFalse(node1.isInstanceOf());
748:       assertFalse(node1.isExprResult());
749:       assertFalse(node1.isGetElem());
750:       assertFalse(node1.isWith());
751:       assertFalse(node1.isCast());
752:       assertFalse(node1.isDec());
753:       assertFalse(node1.isNumber());
754:       assertFalse(node1.isTypeOf());
755:       assertFalse(node1.isAssign());
756:       assertFalse(node1.isLabelName());
757:       assertFalse(node1.isComma());
758:       assertEquals((-1), node1.getSourcePosition());
759:       assertFalse(node1.isThis());
760:       assertFalse(node1.isGetProp());
761:       assertFalse(node1.isObjectLit());
762:       assertFalse(node1.isCase());
763:       assertFalse(node1.isBlock());
764:       assertFalse(node1.isHook());
765:       assertEquals((-1), node1.getLineno());
766:       assertEquals(1, node1.getChildCount());
767:       assertFalse(node1.isFalse());
768:       assertTrue(node1.hasChildren());
769:       assertFalse(node1.hasMoreThanOneChild());
770:       assertFalse(node1.isContinue());
771:       assertFalse(node1.isIf());
772:       assertFalse(node1.isSetterDef());
773:       assertFalse(node1.isThrow());
774:       assertFalse(node1.isNE());
775:       assertFalse(node1.isIn());
776:       assertFalse(node1.isInc());
777:       assertFalse(node1.isDefaultCase());
778:       assertFalse(node1.isRegExp());
779:       assertFalse(node1.isDebugger());
780:       assertFalse(node1.isVoid());
781:       assertFalse(node1.isTrue());
782:       assertFalse(node1.isArrayLit());
783:       assertFalse(node1.isFunction());
784:       assertFalse(node1.isCatch());
785:       assertEquals(53, node1.getType());
786:       assertTrue(node1.hasOneChild());
787:       assertFalse(node1.isGetterDef());
788:       assertFalse(node1.isStringKey());
789:       assertFalse(node1.isFor());
790:       assertFalse(node1.isParamList());
791:       assertFalse(node1.isTry());
792:       assertFalse(node1.isString());
793:       assertFalse(node1.isDo());
794:       assertEquals((-1), node1.getCharno());
795:       assertFalse(node1.isSwitch());
796:       assertFalse(node1.isWhile());
797:       assertFalse(node1.isReturn());
798:       assertFalse(node1.isLabel());
799:       assertFalse(node1.isCall());
800:       assertFalse(node1.isBreak());
801:       assertFalse(node1.isDelProp());
802:       assertFalse(node1.isNull());
803:       assertFalse(node1.isName());
804:       assertFalse(node1.isVar());
805:       assertFalse(node1.isAssignAdd());
806:       assertFalse(node1.isOr());
807:       assertFalse(node1.isNew());
808:       assertFalse(node1.isAdd());
809:       assertFalse(node1.isEmpty());
810:       assertFalse(node2.isLabel());
811:       assertEquals((-1), node2.getSourcePosition());
812:       assertFalse(node2.isReturn());
813:       assertFalse(node2.isDec());
814:       assertFalse(node2.isAssign());
815:       assertFalse(node2.isTypeOf());
816:       assertFalse(node2.isOr());
817:       assertFalse(node2.isNumber());
818:       assertFalse(node2.hasMoreThanOneChild());
819:       assertFalse(node2.isContinue());
820:       assertFalse(node2.isCast());
821:       assertFalse(node2.isGetElem());
822:       assertEquals((-1), node2.getLineno());
823:       assertFalse(node2.isLabelName());
824:       assertFalse(node2.isNew());
825:       assertFalse(node2.isAdd());
826:       assertFalse(node2.isVar());
827:       assertFalse(node2.isDo());
828:       assertFalse(node2.isAssignAdd());
829:       assertFalse(node2.isComma());
830:       assertFalse(node2.isNull());
831:       assertFalse(node2.isGetProp());
832:       assertFalse(node2.isFalse());
833:       assertFalse(node2.isAnd());
834:       assertFalse(node2.isObjectLit());
835:       assertFalse(node2.isCall());
836:       assertFalse(node2.isBreak());
837:       assertFalse(node2.isName());
838:       assertFalse(node2.isExprResult());
839:       assertFalse(node2.isDebugger());
840:       assertFalse(node2.isVoid());
841:       assertFalse(node2.isString());
842:       assertFalse(node2.isNot());
843:       assertTrue(node2.hasOneChild());
844:       assertFalse(node2.isWhile());
845:       assertTrue(node2.hasChildren());
846:       assertFalse(node2.isNE());
847:       assertEquals(1, node2.getChildCount());
848:       assertFalse(node2.isGetterDef());
849:       assertFalse(node2.isIn());
850:       assertEquals(53, node2.getType());
851:       assertFalse(node2.isArrayLit());
852:       assertFalse(node2.isDelProp());
853:       assertFalse(node2.isIf());
854:       assertFalse(node2.isSwitch());
855:       assertFalse(node2.isTrue());
856:       assertFalse(node2.isInc());
857:       assertFalse(node2.isFunction());
858:       assertFalse(node2.isThrow());
859:       assertFalse(node2.isEmpty());
860:       assertFalse(node2.isDefaultCase());
861:       assertFalse(node2.isParamList());
862:       assertFalse(node2.isThis());
863:       assertFalse(node2.isSetterDef());
864:       assertFalse(node2.isInstanceOf());
865:       assertFalse(node2.isCatch());
866:       assertFalse(node2.isStringKey());
867:       assertEquals((-1), node2.getCharno());
868:       assertFalse(node2.isScript());
869:       assertFalse(node2.isBlock());
870:       assertFalse(node2.isRegExp());
871:       assertFalse(node2.isWith());
872:       assertFalse(node2.isCase());
873:       assertFalse(node2.isFor());
874:       assertFalse(node2.isHook());
875:       assertFalse(node2.isTry());
876:       assertEquals(51, Node.STATIC_SOURCE_FILE);
877:       assertEquals(12, Node.COLUMN_BITS);
878:       assertEquals(46, Node.IS_NAMESPACE);
879:       assertEquals(1, Node.DECR_FLAG);
880:       assertEquals(37, Node.OPT_ARG_NAME);
881:       assertEquals(49, Node.DIRECT_EVAL);
882:       assertEquals(32, Node.INCRDECR_PROP);
883:       assertEquals(15, Node.NO_SIDE_EFFECTS);
884:       assertEquals(56, Node.CHANGE_TIME);
885:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
886:       assertEquals(29, Node.JSDOC_INFO_PROP);
887:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
888:       assertEquals(52, Node.LENGTH);
889:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
890:       assertEquals(57, Node.REFLECTED_OBJECT);
891:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
892:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
893:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
894:       assertEquals(4095, Node.COLUMN_MASK);
895:       assertEquals(55, Node.INFERRED_FUNCTION);
896:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
897:       assertEquals(48, Node.DIRECTIVES);
898:       assertEquals(43, Node.IS_CONSTANT_NAME);
899:       assertEquals(36, Node.QUOTED_PROP);
900:       assertEquals(39, Node.EMPTY_BLOCK);
901:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
902:       assertEquals(8, Node.FLAG_NO_THROWS);
903:       assertEquals(50, Node.FREE_CALL);
904:       assertEquals(40, Node.ORIGINALNAME_PROP);
905:       assertEquals(53, Node.INPUT_ID);
906:       assertEquals(54, Node.SLASH_V);
907:       assertEquals(57, Node.LAST_PROP);
908:       assertEquals(47, Node.IS_DISPATCHER);
909:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
910:       assertEquals(2, Node.POST_FLAG);
911:       assertEquals(30, Node.VAR_ARGS_NAME);
912:       assertEquals(15, Node.NO_SIDE_EFFECTS);
913:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
914:       assertEquals(30, Node.VAR_ARGS_NAME);
915:       assertEquals(52, Node.LENGTH);
916:       assertEquals(12, Node.COLUMN_BITS);
917:       assertEquals(32, Node.INCRDECR_PROP);
918:       assertEquals(1, Node.DECR_FLAG);
919:       assertEquals(57, Node.LAST_PROP);
920:       assertEquals(8, Node.FLAG_NO_THROWS);
921:       assertEquals(39, Node.EMPTY_BLOCK);
922:       assertEquals(48, Node.DIRECTIVES);
923:       assertEquals(37, Node.OPT_ARG_NAME);
924:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
925:       assertEquals(29, Node.JSDOC_INFO_PROP);
926:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
927:       assertEquals(57, Node.REFLECTED_OBJECT);
928:       assertEquals(49, Node.DIRECT_EVAL);
929:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
930:       assertEquals(56, Node.CHANGE_TIME);
931:       assertEquals(36, Node.QUOTED_PROP);
932:       assertEquals(53, Node.INPUT_ID);
933:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
934:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
935:       assertEquals(55, Node.INFERRED_FUNCTION);
936:       assertEquals(4095, Node.COLUMN_MASK);
937:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
938:       assertEquals(2, Node.POST_FLAG);
939:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
940:       assertEquals(47, Node.IS_DISPATCHER);
941:       assertEquals(50, Node.FREE_CALL);
942:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
943:       assertEquals(40, Node.ORIGINALNAME_PROP);
944:       assertEquals(51, Node.STATIC_SOURCE_FILE);
945:       assertEquals(46, Node.IS_NAMESPACE);
946:       assertEquals(54, Node.SLASH_V);
947:       assertEquals(43, Node.IS_CONSTANT_NAME);
948:       assertEquals(48, Node.DIRECTIVES);
949:       assertEquals(39, Node.EMPTY_BLOCK);
950:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
951:       assertEquals(40, Node.ORIGINALNAME_PROP);
952:       assertEquals(4095, Node.COLUMN_MASK);
953:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
954:       assertEquals(54, Node.SLASH_V);
955:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
956:       assertEquals(43, Node.IS_CONSTANT_NAME);
957:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
958:       assertEquals(50, Node.FREE_CALL);
959:       assertEquals(1, Node.DECR_FLAG);
960:       assertEquals(51, Node.STATIC_SOURCE_FILE);
961:       assertEquals(37, Node.OPT_ARG_NAME);
962:       assertEquals(46, Node.IS_NAMESPACE);
963:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
964:       assertEquals(12, Node.COLUMN_BITS);
965:       assertEquals(56, Node.CHANGE_TIME);
966:       assertEquals(32, Node.INCRDECR_PROP);
967:       assertEquals(49, Node.DIRECT_EVAL);
968:       assertEquals(30, Node.VAR_ARGS_NAME);
969:       assertEquals(47, Node.IS_DISPATCHER);
970:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
971:       assertEquals(2, Node.POST_FLAG);
972:       assertEquals(53, Node.INPUT_ID);
973:       assertEquals(57, Node.REFLECTED_OBJECT);
974:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
975:       assertEquals(57, Node.LAST_PROP);
976:       assertEquals(29, Node.JSDOC_INFO_PROP);
977:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
978:       assertEquals(15, Node.NO_SIDE_EFFECTS);
979:       assertEquals(36, Node.QUOTED_PROP);
980:       assertEquals(55, Node.INFERRED_FUNCTION);
981:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
982:       assertEquals(52, Node.LENGTH);
983:       assertEquals(8, Node.FLAG_NO_THROWS);
984:       assertNotNull(node2);
985:       assertEquals(0, jSTypeArray0.length);
986:       
987:       node0.addChildrenToFront(node1);
988:       assertFalse(node0.equals((Object)node2));
989:       assertFalse(node0.equals((Object)node1));
990:       assertFalse(node1.equals((Object)node0));
991:       assertSame(node1, node2);
992:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
993:       assertFalse(node0.isInstanceOf());
994:       assertFalse(node0.isGetProp());
995:       assertFalse(node0.isComma());
996:       assertFalse(node0.isThis());
997:       assertEquals(83, node0.getType());
998:       assertFalse(node0.isObjectLit());
999:       assertTrue(node0.isParamList());
1000:       assertFalse(node0.isThrow());
1001:       assertFalse(node0.isScript());
1002:       assertFalse(node0.isCast());
1003:       assertEquals((-1), node0.getCharno());
1004:       assertFalse(node0.isFalse());
1005:       assertFalse(node0.isNot());
1006:       assertFalse(node0.isSwitch());
1007:       assertFalse(node0.isAnd());
1008:       assertFalse(node0.isLabelName());
1009:       assertEquals((-1), node0.getLineno());
1010:       assertEquals(1, node0.getChildCount());
1011:       assertTrue(node0.hasChildren());
1012:       assertFalse(node0.hasMoreThanOneChild());
1013:       assertFalse(node0.isContinue());
1014:       assertFalse(node0.isNumber());
1015:       assertFalse(node0.isIn());
1016:       assertFalse(node0.isGetterDef());
1017:       assertFalse(node0.isCase());
1018:       assertFalse(node0.isFor());
1019:       assertFalse(node0.isInc());
1020:       assertFalse(node0.isHook());
1021:       assertFalse(node0.isBlock());
1022:       assertFalse(node0.isRegExp());
1023:       assertFalse(node0.isWith());
1024:       assertFalse(node0.isNE());
1025:       assertFalse(node0.isIf());
1026:       assertFalse(node0.isCatch());
1027:       assertFalse(node0.isSetterDef());
1028:       assertFalse(node0.isDefaultCase());
1029:       assertFalse(node0.isTry());
1030:       assertFalse(node0.isVar());
1031:       assertFalse(node0.isFunction());
1032:       assertFalse(node0.isDebugger());
1033:       assertFalse(node0.isStringKey());
1034:       assertFalse(node0.isArrayLit());
1035:       assertFalse(node0.isReturn());
1036:       assertFalse(node0.isOr());
1037:       assertFalse(node0.isAssignAdd());
1038:       assertFalse(node0.isLabel());
1039:       assertEquals((-1), node0.getSourcePosition());
1040:       assertFalse(node0.isDec());
1041:       assertFalse(node0.isTypeOf());
1042:       assertFalse(node0.isAssign());
1043:       assertTrue(node0.hasOneChild());
1044:       assertFalse(node0.isDo());
1045:       assertFalse(node0.isWhile());
1046:       assertFalse(node0.isString());
1047:       assertFalse(node0.isEmpty());
1048:       assertFalse(node0.isNew());
1049:       assertFalse(node0.isExprResult());
1050:       assertFalse(node0.isAdd());
1051:       assertFalse(node0.isTrue());
1052:       assertFalse(node0.isBreak());
1053:       assertFalse(node0.isGetElem());
1054:       assertFalse(node0.isNull());
1055:       assertFalse(node0.isCall());
1056:       assertFalse(node0.isDelProp());
1057:       assertFalse(node0.isVoid());
1058:       assertFalse(node0.isName());
1059:       assertFalse(node1.isScript());
1060:       assertFalse(node1.isNot());
1061:       assertFalse(node1.isAnd());
1062:       assertFalse(node1.isInstanceOf());
1063:       assertFalse(node1.isExprResult());
1064:       assertFalse(node1.isGetElem());
1065:       assertFalse(node1.isWith());
1066:       assertFalse(node1.isCast());
1067:       assertFalse(node1.isDec());
1068:       assertFalse(node1.isNumber());
1069:       assertFalse(node1.isTypeOf());
1070:       assertFalse(node1.isAssign());
1071:       assertFalse(node1.isLabelName());
1072:       assertFalse(node1.isComma());
1073:       assertEquals((-1), node1.getSourcePosition());
1074:       assertFalse(node1.isThis());
1075:       assertFalse(node1.isGetProp());
1076:       assertFalse(node1.isObjectLit());
1077:       assertFalse(node1.isCase());
1078:       assertFalse(node1.isBlock());
1079:       assertFalse(node1.isHook());
1080:       assertEquals((-1), node1.getLineno());
1081:       assertEquals(1, node1.getChildCount());
1082:       assertFalse(node1.isFalse());
1083:       assertTrue(node1.hasChildren());
1084:       assertFalse(node1.hasMoreThanOneChild());
1085:       assertFalse(node1.isContinue());
1086:       assertFalse(node1.isIf());
1087:       assertFalse(node1.isSetterDef());
1088:       assertFalse(node1.isThrow());
1089:       assertFalse(node1.isNE());
1090:       assertFalse(node1.isIn());
1091:       assertFalse(node1.isInc());
1092:       assertFalse(node1.isDefaultCase());
1093:       assertFalse(node1.isRegExp());
1094:       assertFalse(node1.isDebugger());
1095:       assertFalse(node1.isVoid());
1096:       assertFalse(node1.isTrue());
1097:       assertFalse(node1.isArrayLit());
1098:       assertFalse(node1.isFunction());
1099:       assertFalse(node1.isCatch());
1100:       assertEquals(53, node1.getType());
1101:       assertTrue(node1.hasOneChild());
1102:       assertFalse(node1.isGetterDef());
1103:       assertFalse(node1.isStringKey());
1104:       assertFalse(node1.isFor());
1105:       assertFalse(node1.isParamList());
1106:       assertFalse(node1.isTry());
1107:       assertFalse(node1.isString());
1108:       assertFalse(node1.isDo());
1109:       assertEquals((-1), node1.getCharno());
1110:       assertFalse(node1.isSwitch());
1111:       assertFalse(node1.isWhile());
1112:       assertFalse(node1.isReturn());
1113:       assertFalse(node1.isLabel());
1114:       assertFalse(node1.isCall());
1115:       assertFalse(node1.isBreak());
1116:       assertFalse(node1.isDelProp());
1117:       assertFalse(node1.isNull());
1118:       assertFalse(node1.isName());
1119:       assertFalse(node1.isVar());
1120:       assertFalse(node1.isAssignAdd());
1121:       assertFalse(node1.isOr());
1122:       assertFalse(node1.isNew());
1123:       assertFalse(node1.isAdd());
1124:       assertFalse(node1.isEmpty());
1125:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1126:       assertEquals(12, Node.COLUMN_BITS);
1127:       assertEquals(46, Node.IS_NAMESPACE);
1128:       assertEquals(1, Node.DECR_FLAG);
1129:       assertEquals(37, Node.OPT_ARG_NAME);
1130:       assertEquals(49, Node.DIRECT_EVAL);
1131:       assertEquals(32, Node.INCRDECR_PROP);
1132:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1133:       assertEquals(56, Node.CHANGE_TIME);
1134:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1135:       assertEquals(29, Node.JSDOC_INFO_PROP);
1136:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1137:       assertEquals(52, Node.LENGTH);
1138:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1139:       assertEquals(57, Node.REFLECTED_OBJECT);
1140:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1141:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1142:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1143:       assertEquals(4095, Node.COLUMN_MASK);
1144:       assertEquals(55, Node.INFERRED_FUNCTION);
1145:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1146:       assertEquals(48, Node.DIRECTIVES);
1147:       assertEquals(43, Node.IS_CONSTANT_NAME);
1148:       assertEquals(36, Node.QUOTED_PROP);
1149:       assertEquals(39, Node.EMPTY_BLOCK);
1150:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1151:       assertEquals(8, Node.FLAG_NO_THROWS);
1152:       assertEquals(50, Node.FREE_CALL);
1153:       assertEquals(40, Node.ORIGINALNAME_PROP);
1154:       assertEquals(53, Node.INPUT_ID);
1155:       assertEquals(54, Node.SLASH_V);
1156:       assertEquals(57, Node.LAST_PROP);
1157:       assertEquals(47, Node.IS_DISPATCHER);
1158:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1159:       assertEquals(2, Node.POST_FLAG);
1160:       assertEquals(30, Node.VAR_ARGS_NAME);
1161:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1162:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1163:       assertEquals(30, Node.VAR_ARGS_NAME);
1164:       assertEquals(52, Node.LENGTH);
1165:       assertEquals(12, Node.COLUMN_BITS);
1166:       assertEquals(32, Node.INCRDECR_PROP);
1167:       assertEquals(1, Node.DECR_FLAG);
1168:       assertEquals(57, Node.LAST_PROP);
1169:       assertEquals(8, Node.FLAG_NO_THROWS);
1170:       assertEquals(39, Node.EMPTY_BLOCK);
1171:       assertEquals(48, Node.DIRECTIVES);
1172:       assertEquals(37, Node.OPT_ARG_NAME);
1173:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1174:       assertEquals(29, Node.JSDOC_INFO_PROP);
1175:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1176:       assertEquals(57, Node.REFLECTED_OBJECT);
1177:       assertEquals(49, Node.DIRECT_EVAL);
1178:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1179:       assertEquals(56, Node.CHANGE_TIME);
1180:       assertEquals(36, Node.QUOTED_PROP);
1181:       assertEquals(53, Node.INPUT_ID);
1182:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1183:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1184:       assertEquals(55, Node.INFERRED_FUNCTION);
1185:       assertEquals(4095, Node.COLUMN_MASK);
1186:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1187:       assertEquals(2, Node.POST_FLAG);
1188:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1189:       assertEquals(47, Node.IS_DISPATCHER);
1190:       assertEquals(50, Node.FREE_CALL);
1191:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1192:       assertEquals(40, Node.ORIGINALNAME_PROP);
1193:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1194:       assertEquals(46, Node.IS_NAMESPACE);
1195:       assertEquals(54, Node.SLASH_V);
1196:       assertEquals(43, Node.IS_CONSTANT_NAME);
1197:       assertEquals(0, jSTypeArray0.length);
1198:       
1199:       String string0 = node1.getString();
1200:       assertFalse(node1.equals((Object)node0));
1201:       assertEquals("}`tya", string0);
1202:       assertSame(node1, node2);
1203:       assertFalse(node1.isScript());
1204:       assertFalse(node1.isNot());
1205:       assertFalse(node1.isAnd());
1206:       assertFalse(node1.isInstanceOf());
1207:       assertFalse(node1.isExprResult());
1208:       assertFalse(node1.isGetElem());
1209:       assertFalse(node1.isWith());
1210:       assertFalse(node1.isCast());
1211:       assertFalse(node1.isDec());
1212:       assertFalse(node1.isNumber());
1213:       assertFalse(node1.isTypeOf());
1214:       assertFalse(node1.isAssign());
1215:       assertFalse(node1.isLabelName());
1216:       assertFalse(node1.isComma());
1217:       assertEquals((-1), node1.getSourcePosition());
1218:       assertFalse(node1.isThis());
1219:       assertFalse(node1.isGetProp());
1220:       assertFalse(node1.isObjectLit());
1221:       assertFalse(node1.isCase());
1222:       assertFalse(node1.isBlock());
1223:       assertFalse(node1.isHook());
1224:       assertEquals((-1), node1.getLineno());
1225:       assertEquals(1, node1.getChildCount());
1226:       assertFalse(node1.isFalse());
1227:       assertTrue(node1.hasChildren());
1228:       assertFalse(node1.hasMoreThanOneChild());
1229:       assertFalse(node1.isContinue());
1230:       assertFalse(node1.isIf());
1231:       assertFalse(node1.isSetterDef());
1232:       assertFalse(node1.isThrow());
1233:       assertFalse(node1.isNE());
1234:       assertFalse(node1.isIn());
1235:       assertFalse(node1.isInc());
1236:       assertFalse(node1.isDefaultCase());
1237:       assertFalse(node1.isRegExp());
1238:       assertFalse(node1.isDebugger());
1239:       assertFalse(node1.isVoid());
1240:       assertFalse(node1.isTrue());
1241:       assertFalse(node1.isArrayLit());
1242:       assertFalse(node1.isFunction());
1243:       assertFalse(node1.isCatch());
1244:       assertEquals(53, node1.getType());
1245:       assertTrue(node1.hasOneChild());
1246:       assertFalse(node1.isGetterDef());
1247:       assertFalse(node1.isStringKey());
1248:       assertFalse(node1.isFor());
1249:       assertFalse(node1.isParamList());
1250:       assertFalse(node1.isTry());
1251:       assertFalse(node1.isString());
1252:       assertFalse(node1.isDo());
1253:       assertEquals((-1), node1.getCharno());
1254:       assertFalse(node1.isSwitch());
1255:       assertFalse(node1.isWhile());
1256:       assertFalse(node1.isReturn());
1257:       assertFalse(node1.isLabel());
1258:       assertFalse(node1.isCall());
1259:       assertFalse(node1.isBreak());
1260:       assertFalse(node1.isDelProp());
1261:       assertFalse(node1.isNull());
1262:       assertFalse(node1.isName());
1263:       assertFalse(node1.isVar());
1264:       assertFalse(node1.isAssignAdd());
1265:       assertFalse(node1.isOr());
1266:       assertFalse(node1.isNew());
1267:       assertFalse(node1.isAdd());
1268:       assertFalse(node1.isEmpty());
1269:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1270:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1271:       assertEquals(30, Node.VAR_ARGS_NAME);
1272:       assertEquals(52, Node.LENGTH);
1273:       assertEquals(12, Node.COLUMN_BITS);
1274:       assertEquals(32, Node.INCRDECR_PROP);
1275:       assertEquals(1, Node.DECR_FLAG);
1276:       assertEquals(57, Node.LAST_PROP);
1277:       assertEquals(8, Node.FLAG_NO_THROWS);
1278:       assertEquals(39, Node.EMPTY_BLOCK);
1279:       assertEquals(48, Node.DIRECTIVES);
1280:       assertEquals(37, Node.OPT_ARG_NAME);
1281:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1282:       assertEquals(29, Node.JSDOC_INFO_PROP);
1283:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1284:       assertEquals(57, Node.REFLECTED_OBJECT);
1285:       assertEquals(49, Node.DIRECT_EVAL);
1286:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1287:       assertEquals(56, Node.CHANGE_TIME);
1288:       assertEquals(36, Node.QUOTED_PROP);
1289:       assertEquals(53, Node.INPUT_ID);
1290:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1291:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1292:       assertEquals(55, Node.INFERRED_FUNCTION);
1293:       assertEquals(4095, Node.COLUMN_MASK);
1294:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1295:       assertEquals(2, Node.POST_FLAG);
1296:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1297:       assertEquals(47, Node.IS_DISPATCHER);
1298:       assertEquals(50, Node.FREE_CALL);
1299:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1300:       assertEquals(40, Node.ORIGINALNAME_PROP);
1301:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1302:       assertEquals(46, Node.IS_NAMESPACE);
1303:       assertEquals(54, Node.SLASH_V);
1304:       assertEquals(43, Node.IS_CONSTANT_NAME);
1305:       assertNotNull(string0);
1306:       
1307:       Node node3 = node0.getLastChild();
1308:       assertFalse(node0.equals((Object)node2));
1309:       assertFalse(node0.equals((Object)node1));
1310:       assertFalse(node3.equals((Object)node0));
1311:       assertSame(node3, node2);
1312:       assertSame(node3, node1);
1313:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1314:       assertFalse(node0.isInstanceOf());
1315:       assertFalse(node0.isGetProp());
1316:       assertFalse(node0.isComma());
1317:       assertFalse(node0.isThis());
1318:       assertEquals(83, node0.getType());
1319:       assertFalse(node0.isObjectLit());
1320:       assertTrue(node0.isParamList());
1321:       assertFalse(node0.isThrow());
1322:       assertFalse(node0.isScript());
1323:       assertFalse(node0.isCast());
1324:       assertEquals((-1), node0.getCharno());
1325:       assertFalse(node0.isFalse());
1326:       assertFalse(node0.isNot());
1327:       assertFalse(node0.isSwitch());
1328:       assertFalse(node0.isAnd());
1329:       assertFalse(node0.isLabelName());
1330:       assertEquals((-1), node0.getLineno());
1331:       assertEquals(1, node0.getChildCount());
1332:       assertTrue(node0.hasChildren());
1333:       assertFalse(node0.hasMoreThanOneChild());
1334:       assertFalse(node0.isContinue());
1335:       assertFalse(node0.isNumber());
1336:       assertFalse(node0.isIn());
1337:       assertFalse(node0.isGetterDef());
1338:       assertFalse(node0.isCase());
1339:       assertFalse(node0.isFor());
1340:       assertFalse(node0.isInc());
1341:       assertFalse(node0.isHook());
1342:       assertFalse(node0.isBlock());
1343:       assertFalse(node0.isRegExp());
1344:       assertFalse(node0.isWith());
1345:       assertFalse(node0.isNE());
1346:       assertFalse(node0.isIf());
1347:       assertFalse(node0.isCatch());
1348:       assertFalse(node0.isSetterDef());
1349:       assertFalse(node0.isDefaultCase());
1350:       assertFalse(node0.isTry());
1351:       assertFalse(node0.isVar());
1352:       assertFalse(node0.isFunction());
1353:       assertFalse(node0.isDebugger());
1354:       assertFalse(node0.isStringKey());
1355:       assertFalse(node0.isArrayLit());
1356:       assertFalse(node0.isReturn());
1357:       assertFalse(node0.isOr());
1358:       assertFalse(node0.isAssignAdd());
1359:       assertFalse(node0.isLabel());
1360:       assertEquals((-1), node0.getSourcePosition());
1361:       assertFalse(node0.isDec());
1362:       assertFalse(node0.isTypeOf());
1363:       assertFalse(node0.isAssign());
1364:       assertTrue(node0.hasOneChild());
1365:       assertFalse(node0.isDo());
1366:       assertFalse(node0.isWhile());
1367:       assertFalse(node0.isString());
1368:       assertFalse(node0.isEmpty());
1369:       assertFalse(node0.isNew());
1370:       assertFalse(node0.isExprResult());
1371:       assertFalse(node0.isAdd());
1372:       assertFalse(node0.isTrue());
1373:       assertFalse(node0.isBreak());
1374:       assertFalse(node0.isGetElem());
1375:       assertFalse(node0.isNull());
1376:       assertFalse(node0.isCall());
1377:       assertFalse(node0.isDelProp());
1378:       assertFalse(node0.isVoid());
1379:       assertFalse(node0.isName());
1380:       assertFalse(node3.isWith());
1381:       assertFalse(node3.isExprResult());
1382:       assertFalse(node3.isScript());
1383:       assertFalse(node3.isCast());
1384:       assertFalse(node3.isAssign());
1385:       assertEquals((-1), node3.getSourcePosition());
1386:       assertFalse(node3.isNumber());
1387:       assertFalse(node3.isLabelName());
1388:       assertFalse(node3.isGetProp());
1389:       assertFalse(node3.isAnd());
1390:       assertFalse(node3.isObjectLit());
1391:       assertFalse(node3.isNot());
1392:       assertFalse(node3.isSwitch());
1393:       assertFalse(node3.isDo());
1394:       assertFalse(node3.isNew());
1395:       assertFalse(node3.isString());
1396:       assertFalse(node3.isAdd());
1397:       assertFalse(node3.isReturn());
1398:       assertFalse(node3.isAssignAdd());
1399:       assertFalse(node3.isLabel());
1400:       assertFalse(node3.isWhile());
1401:       assertFalse(node3.isVar());
1402:       assertFalse(node3.isComma());
1403:       assertFalse(node3.isDec());
1404:       assertFalse(node3.isTypeOf());
1405:       assertFalse(node3.isDelProp());
1406:       assertFalse(node3.isBreak());
1407:       assertFalse(node3.isGetElem());
1408:       assertFalse(node3.isEmpty());
1409:       assertFalse(node3.isCall());
1410:       assertFalse(node3.isName());
1411:       assertFalse(node3.isOr());
1412:       assertFalse(node3.isTrue());
1413:       assertFalse(node3.isNull());
1414:       assertFalse(node3.isDebugger());
1415:       assertFalse(node3.isDefaultCase());
1416:       assertFalse(node3.isRegExp());
1417:       assertFalse(node3.isFunction());
1418:       assertFalse(node3.isVoid());
1419:       assertFalse(node3.isTry());
1420:       assertFalse(node3.isCatch());
1421:       assertTrue(node3.hasOneChild());
1422:       assertFalse(node3.isFor());
1423:       assertFalse(node3.isParamList());
1424:       assertEquals(53, node3.getType());
1425:       assertFalse(node3.isGetterDef());
1426:       assertFalse(node3.isArrayLit());
1427:       assertFalse(node3.isStringKey());
1428:       assertEquals((-1), node3.getCharno());
1429:       assertFalse(node3.isCase());
1430:       assertFalse(node3.isInc());
1431:       assertFalse(node3.hasMoreThanOneChild());
1432:       assertFalse(node3.isContinue());
1433:       assertFalse(node3.isFalse());
1434:       assertEquals(1, node3.getChildCount());
1435:       assertFalse(node3.isHook());
1436:       assertFalse(node3.isThrow());
1437:       assertFalse(node3.isBlock());
1438:       assertFalse(node3.isThis());
1439:       assertFalse(node3.isNE());
1440:       assertFalse(node3.isSetterDef());
1441:       assertFalse(node3.isIf());
1442:       assertTrue(node3.hasChildren());
1443:       assertEquals((-1), node3.getLineno());
1444:       assertFalse(node3.isInstanceOf());
1445:       assertFalse(node3.isIn());
1446:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1447:       assertEquals(12, Node.COLUMN_BITS);
1448:       assertEquals(46, Node.IS_NAMESPACE);
1449:       assertEquals(1, Node.DECR_FLAG);
1450:       assertEquals(37, Node.OPT_ARG_NAME);
1451:       assertEquals(49, Node.DIRECT_EVAL);
1452:       assertEquals(32, Node.INCRDECR_PROP);
1453:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1454:       assertEquals(56, Node.CHANGE_TIME);
1455:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1456:       assertEquals(29, Node.JSDOC_INFO_PROP);
1457:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1458:       assertEquals(52, Node.LENGTH);
1459:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1460:       assertEquals(57, Node.REFLECTED_OBJECT);
1461:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1462:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1463:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1464:       assertEquals(4095, Node.COLUMN_MASK);
1465:       assertEquals(55, Node.INFERRED_FUNCTION);
1466:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1467:       assertEquals(48, Node.DIRECTIVES);
1468:       assertEquals(43, Node.IS_CONSTANT_NAME);
1469:       assertEquals(36, Node.QUOTED_PROP);
1470:       assertEquals(39, Node.EMPTY_BLOCK);
1471:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1472:       assertEquals(8, Node.FLAG_NO_THROWS);
1473:       assertEquals(50, Node.FREE_CALL);
1474:       assertEquals(40, Node.ORIGINALNAME_PROP);
1475:       assertEquals(53, Node.INPUT_ID);
1476:       assertEquals(54, Node.SLASH_V);
1477:       assertEquals(57, Node.LAST_PROP);
1478:       assertEquals(47, Node.IS_DISPATCHER);
1479:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1480:       assertEquals(2, Node.POST_FLAG);
1481:       assertEquals(30, Node.VAR_ARGS_NAME);
1482:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1483:       assertEquals(54, Node.SLASH_V);
1484:       assertEquals(52, Node.LENGTH);
1485:       assertEquals(57, Node.LAST_PROP);
1486:       assertEquals(57, Node.REFLECTED_OBJECT);
1487:       assertEquals(1, Node.DECR_FLAG);
1488:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1489:       assertEquals(50, Node.FREE_CALL);
1490:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1491:       assertEquals(39, Node.EMPTY_BLOCK);
1492:       assertEquals(48, Node.DIRECTIVES);
1493:       assertEquals(37, Node.OPT_ARG_NAME);
1494:       assertEquals(8, Node.FLAG_NO_THROWS);
1495:       assertEquals(32, Node.INCRDECR_PROP);
1496:       assertEquals(56, Node.CHANGE_TIME);
1497:       assertEquals(12, Node.COLUMN_BITS);
1498:       assertEquals(49, Node.DIRECT_EVAL);
1499:       assertEquals(4095, Node.COLUMN_MASK);
1500:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1501:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1502:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1503:       assertEquals(43, Node.IS_CONSTANT_NAME);
1504:       assertEquals(36, Node.QUOTED_PROP);
1505:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1506:       assertEquals(55, Node.INFERRED_FUNCTION);
1507:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1508:       assertEquals(29, Node.JSDOC_INFO_PROP);
1509:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1510:       assertEquals(53, Node.INPUT_ID);
1511:       assertEquals(2, Node.POST_FLAG);
1512:       assertEquals(46, Node.IS_NAMESPACE);
1513:       assertEquals(47, Node.IS_DISPATCHER);
1514:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1515:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1516:       assertEquals(30, Node.VAR_ARGS_NAME);
1517:       assertEquals(40, Node.ORIGINALNAME_PROP);
1518:       assertNotNull(node3);
1519:       assertEquals(0, jSTypeArray0.length);
1520:       
1521:       boolean boolean1 = node3.isQuotedString();
1522:       assertFalse(node0.equals((Object)node2));
1523:       assertFalse(node0.equals((Object)node1));
1524:       assertFalse(node0.equals((Object)node3));
1525:       assertFalse(node3.equals((Object)node0));
1526:       assertTrue(boolean1 == boolean0);
1527:       assertFalse(boolean1);
1528:       assertSame(node3, node2);
1529:       assertSame(node3, node1);
1530:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1531:       assertFalse(node0.isInstanceOf());
1532:       assertFalse(node0.isGetProp());
1533:       assertFalse(node0.isComma());
1534:       assertFalse(node0.isThis());
1535:       assertEquals(83, node0.getType());
1536:       assertFalse(node0.isObjectLit());
1537:       assertTrue(node0.isParamList());
1538:       assertFalse(node0.isThrow());
1539:       assertFalse(node0.isScript());
1540:       assertFalse(node0.isCast());
1541:       assertEquals((-1), node0.getCharno());
1542:       assertFalse(node0.isFalse());
1543:       assertFalse(node0.isNot());
1544:       assertFalse(node0.isSwitch());
1545:       assertFalse(node0.isAnd());
1546:       assertFalse(node0.isLabelName());
1547:       assertEquals((-1), node0.getLineno());
1548:       assertEquals(1, node0.getChildCount());
1549:       assertTrue(node0.hasChildren());
1550:       assertFalse(node0.hasMoreThanOneChild());
1551:       assertFalse(node0.isContinue());
1552:       assertFalse(node0.isNumber());
1553:       assertFalse(node0.isIn());
1554:       assertFalse(node0.isGetterDef());
1555:       assertFalse(node0.isCase());
1556:       assertFalse(node0.isFor());
1557:       assertFalse(node0.isInc());
1558:       assertFalse(node0.isHook());
1559:       assertFalse(node0.isBlock());
1560:       assertFalse(node0.isRegExp());
1561:       assertFalse(node0.isWith());
1562:       assertFalse(node0.isNE());
1563:       assertFalse(node0.isIf());
1564:       assertFalse(node0.isCatch());
1565:       assertFalse(node0.isSetterDef());
1566:       assertFalse(node0.isDefaultCase());
1567:       assertFalse(node0.isTry());
1568:       assertFalse(node0.isVar());
1569:       assertFalse(node0.isFunction());
1570:       assertFalse(node0.isDebugger());
1571:       assertFalse(node0.isStringKey());
1572:       assertFalse(node0.isArrayLit());
1573:       assertFalse(node0.isReturn());
1574:       assertFalse(node0.isOr());
1575:       assertFalse(node0.isAssignAdd());
1576:       assertFalse(node0.isLabel());
1577:       assertEquals((-1), node0.getSourcePosition());
1578:       assertFalse(node0.isDec());
1579:       assertFalse(node0.isTypeOf());
1580:       assertFalse(node0.isAssign());
1581:       assertTrue(node0.hasOneChild());
1582:       assertFalse(node0.isDo());
1583:       assertFalse(node0.isWhile());
1584:       assertFalse(node0.isString());
1585:       assertFalse(node0.isEmpty());
1586:       assertFalse(node0.isNew());
1587:       assertFalse(node0.isExprResult());
1588:       assertFalse(node0.isAdd());
1589:       assertFalse(node0.isTrue());
1590:       assertFalse(node0.isBreak());
1591:       assertFalse(node0.isGetElem());
1592:       assertFalse(node0.isNull());
1593:       assertFalse(node0.isCall());
1594:       assertFalse(node0.isDelProp());
1595:       assertFalse(node0.isVoid());
1596:       assertFalse(node0.isName());
1597:       assertFalse(node3.isWith());
1598:       assertFalse(node3.isExprResult());
1599:       assertFalse(node3.isScript());
1600:       assertFalse(node3.isCast());
1601:       assertFalse(node3.isAssign());
1602:       assertEquals((-1), node3.getSourcePosition());
1603:       assertFalse(node3.isNumber());
1604:       assertFalse(node3.isLabelName());
1605:       assertFalse(node3.isGetProp());
1606:       assertFalse(node3.isAnd());
1607:       assertFalse(node3.isObjectLit());
1608:       assertFalse(node3.isNot());
1609:       assertFalse(node3.isSwitch());
1610:       assertFalse(node3.isDo());
1611:       assertFalse(node3.isNew());
1612:       assertFalse(node3.isString());
1613:       assertFalse(node3.isAdd());
1614:       assertFalse(node3.isReturn());
1615:       assertFalse(node3.isAssignAdd());
1616:       assertFalse(node3.isLabel());
1617:       assertFalse(node3.isWhile());
1618:       assertFalse(node3.isVar());
1619:       assertFalse(node3.isComma());
1620:       assertFalse(node3.isDec());
1621:       assertFalse(node3.isTypeOf());
1622:       assertFalse(node3.isDelProp());
1623:       assertFalse(node3.isBreak());
1624:       assertFalse(node3.isGetElem());
1625:       assertFalse(node3.isEmpty());
1626:       assertFalse(node3.isCall());
1627:       assertFalse(node3.isName());
1628:       assertFalse(node3.isOr());
1629:       assertFalse(node3.isTrue());
1630:       assertFalse(node3.isNull());
1631:       assertFalse(node3.isDebugger());
1632:       assertFalse(node3.isDefaultCase());
1633:       assertFalse(node3.isRegExp());
1634:       assertFalse(node3.isFunction());
1635:       assertFalse(node3.isVoid());
1636:       assertFalse(node3.isTry());
1637:       assertFalse(node3.isCatch());
1638:       assertTrue(node3.hasOneChild());
1639:       assertFalse(node3.isFor());
1640:       assertFalse(node3.isParamList());
1641:       assertEquals(53, node3.getType());
1642:       assertFalse(node3.isGetterDef());
1643:       assertFalse(node3.isArrayLit());
1644:       assertFalse(node3.isStringKey());
1645:       assertEquals((-1), node3.getCharno());
1646:       assertFalse(node3.isCase());
1647:       assertFalse(node3.isInc());
1648:       assertFalse(node3.hasMoreThanOneChild());
1649:       assertFalse(node3.isContinue());
1650:       assertFalse(node3.isFalse());
1651:       assertEquals(1, node3.getChildCount());
1652:       assertFalse(node3.isHook());
1653:       assertFalse(node3.isThrow());
1654:       assertFalse(node3.isBlock());
1655:       assertFalse(node3.isThis());
1656:       assertFalse(node3.isNE());
1657:       assertFalse(node3.isSetterDef());
1658:       assertFalse(node3.isIf());
1659:       assertTrue(node3.hasChildren());
1660:       assertEquals((-1), node3.getLineno());
1661:       assertFalse(node3.isInstanceOf());
1662:       assertFalse(node3.isIn());
1663:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1664:       assertEquals(12, Node.COLUMN_BITS);
1665:       assertEquals(46, Node.IS_NAMESPACE);
1666:       assertEquals(1, Node.DECR_FLAG);
1667:       assertEquals(37, Node.OPT_ARG_NAME);
1668:       assertEquals(49, Node.DIRECT_EVAL);
1669:       assertEquals(32, Node.INCRDECR_PROP);
1670:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1671:       assertEquals(56, Node.CHANGE_TIME);
1672:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1673:       assertEquals(29, Node.JSDOC_INFO_PROP);
1674:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1675:       assertEquals(52, Node.LENGTH);
1676:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1677:       assertEquals(57, Node.REFLECTED_OBJECT);
1678:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1679:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1680:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1681:       assertEquals(4095, Node.COLUMN_MASK);
1682:       assertEquals(55, Node.INFERRED_FUNCTION);
1683:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1684:       assertEquals(48, Node.DIRECTIVES);
1685:       assertEquals(43, Node.IS_CONSTANT_NAME);
1686:       assertEquals(36, Node.QUOTED_PROP);
1687:       assertEquals(39, Node.EMPTY_BLOCK);
1688:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1689:       assertEquals(8, Node.FLAG_NO_THROWS);
1690:       assertEquals(50, Node.FREE_CALL);
1691:       assertEquals(40, Node.ORIGINALNAME_PROP);
1692:       assertEquals(53, Node.INPUT_ID);
1693:       assertEquals(54, Node.SLASH_V);
1694:       assertEquals(57, Node.LAST_PROP);
1695:       assertEquals(47, Node.IS_DISPATCHER);
1696:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1697:       assertEquals(2, Node.POST_FLAG);
1698:       assertEquals(30, Node.VAR_ARGS_NAME);
1699:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1700:       assertEquals(54, Node.SLASH_V);
1701:       assertEquals(52, Node.LENGTH);
1702:       assertEquals(57, Node.LAST_PROP);
1703:       assertEquals(57, Node.REFLECTED_OBJECT);
1704:       assertEquals(1, Node.DECR_FLAG);
1705:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1706:       assertEquals(50, Node.FREE_CALL);
1707:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1708:       assertEquals(39, Node.EMPTY_BLOCK);
1709:       assertEquals(48, Node.DIRECTIVES);
1710:       assertEquals(37, Node.OPT_ARG_NAME);
1711:       assertEquals(8, Node.FLAG_NO_THROWS);
1712:       assertEquals(32, Node.INCRDECR_PROP);
1713:       assertEquals(56, Node.CHANGE_TIME);
1714:       assertEquals(12, Node.COLUMN_BITS);
1715:       assertEquals(49, Node.DIRECT_EVAL);
1716:       assertEquals(4095, Node.COLUMN_MASK);
1717:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1718:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1719:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1720:       assertEquals(43, Node.IS_CONSTANT_NAME);
1721:       assertEquals(36, Node.QUOTED_PROP);
1722:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1723:       assertEquals(55, Node.INFERRED_FUNCTION);
1724:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1725:       assertEquals(29, Node.JSDOC_INFO_PROP);
1726:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1727:       assertEquals(53, Node.INPUT_ID);
1728:       assertEquals(2, Node.POST_FLAG);
1729:       assertEquals(46, Node.IS_NAMESPACE);
1730:       assertEquals(47, Node.IS_DISPATCHER);
1731:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1732:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1733:       assertEquals(30, Node.VAR_ARGS_NAME);
1734:       assertEquals(40, Node.ORIGINALNAME_PROP);
1735:       assertEquals(0, jSTypeArray0.length);
1736:       
1737:       boolean boolean2 = node0.isBreak();
1738:       assertFalse(node0.equals((Object)node2));
1739:       assertFalse(node0.equals((Object)node1));
1740:       assertFalse(node0.equals((Object)node3));
1741:       assertTrue(boolean2 == boolean1);
1742:       assertTrue(boolean2 == boolean0);
1743:       assertFalse(boolean2);
1744:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1745:       assertFalse(node0.isInstanceOf());
1746:       assertFalse(node0.isGetProp());
1747:       assertFalse(node0.isComma());
1748:       assertFalse(node0.isThis());
1749:       assertEquals(83, node0.getType());
1750:       assertFalse(node0.isObjectLit());
1751:       assertTrue(node0.isParamList());
1752:       assertFalse(node0.isThrow());
1753:       assertFalse(node0.isScript());
1754:       assertFalse(node0.isCast());
1755:       assertEquals((-1), node0.getCharno());
1756:       assertFalse(node0.isFalse());
1757:       assertFalse(node0.isNot());
1758:       assertFalse(node0.isSwitch());
1759:       assertFalse(node0.isAnd());
1760:       assertFalse(node0.isLabelName());
1761:       assertEquals((-1), node0.getLineno());
1762:       assertEquals(1, node0.getChildCount());
1763:       assertTrue(node0.hasChildren());
1764:       assertFalse(node0.hasMoreThanOneChild());
1765:       assertFalse(node0.isContinue());
1766:       assertFalse(node0.isNumber());
1767:       assertFalse(node0.isIn());
1768:       assertFalse(node0.isGetterDef());
1769:       assertFalse(node0.isCase());
1770:       assertFalse(node0.isFor());
1771:       assertFalse(node0.isInc());
1772:       assertFalse(node0.isHook());
1773:       assertFalse(node0.isBlock());
1774:       assertFalse(node0.isRegExp());
1775:       assertFalse(node0.isWith());
1776:       assertFalse(node0.isNE());
1777:       assertFalse(node0.isIf());
1778:       assertFalse(node0.isCatch());
1779:       assertFalse(node0.isSetterDef());
1780:       assertFalse(node0.isDefaultCase());
1781:       assertFalse(node0.isTry());
1782:       assertFalse(node0.isVar());
1783:       assertFalse(node0.isFunction());
1784:       assertFalse(node0.isDebugger());
1785:       assertFalse(node0.isStringKey());
1786:       assertFalse(node0.isArrayLit());
1787:       assertFalse(node0.isReturn());
1788:       assertFalse(node0.isOr());
1789:       assertFalse(node0.isAssignAdd());
1790:       assertFalse(node0.isLabel());
1791:       assertEquals((-1), node0.getSourcePosition());
1792:       assertFalse(node0.isDec());
1793:       assertFalse(node0.isTypeOf());
1794:       assertFalse(node0.isAssign());
1795:       assertTrue(node0.hasOneChild());
1796:       assertFalse(node0.isDo());
1797:       assertFalse(node0.isWhile());
1798:       assertFalse(node0.isString());
1799:       assertFalse(node0.isEmpty());
1800:       assertFalse(node0.isNew());
1801:       assertFalse(node0.isExprResult());
1802:       assertFalse(node0.isAdd());
1803:       assertFalse(node0.isTrue());
1804:       assertFalse(node0.isBreak());
1805:       assertFalse(node0.isGetElem());
1806:       assertFalse(node0.isNull());
1807:       assertFalse(node0.isCall());
1808:       assertFalse(node0.isDelProp());
1809:       assertFalse(node0.isVoid());
1810:       assertFalse(node0.isName());
1811:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1812:       assertEquals(12, Node.COLUMN_BITS);
1813:       assertEquals(46, Node.IS_NAMESPACE);
1814:       assertEquals(1, Node.DECR_FLAG);
1815:       assertEquals(37, Node.OPT_ARG_NAME);
1816:       assertEquals(49, Node.DIRECT_EVAL);
1817:       assertEquals(32, Node.INCRDECR_PROP);
1818:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1819:       assertEquals(56, Node.CHANGE_TIME);
1820:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1821:       assertEquals(29, Node.JSDOC_INFO_PROP);
1822:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1823:       assertEquals(52, Node.LENGTH);
1824:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1825:       assertEquals(57, Node.REFLECTED_OBJECT);
1826:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1827:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1828:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1829:       assertEquals(4095, Node.COLUMN_MASK);
1830:       assertEquals(55, Node.INFERRED_FUNCTION);
1831:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1832:       assertEquals(48, Node.DIRECTIVES);
1833:       assertEquals(43, Node.IS_CONSTANT_NAME);
1834:       assertEquals(36, Node.QUOTED_PROP);
1835:       assertEquals(39, Node.EMPTY_BLOCK);
1836:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1837:       assertEquals(8, Node.FLAG_NO_THROWS);
1838:       assertEquals(50, Node.FREE_CALL);
1839:       assertEquals(40, Node.ORIGINALNAME_PROP);
1840:       assertEquals(53, Node.INPUT_ID);
1841:       assertEquals(54, Node.SLASH_V);
1842:       assertEquals(57, Node.LAST_PROP);
1843:       assertEquals(47, Node.IS_DISPATCHER);
1844:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1845:       assertEquals(2, Node.POST_FLAG);
1846:       assertEquals(30, Node.VAR_ARGS_NAME);
1847:       assertEquals(0, jSTypeArray0.length);
1848:       
1849:       int int1 = (-1682);
1850:       int int2 = 131072;
1851:       // Undeclared exception!
1852:       try { 
1853:         node2.checkTreeEquals(node0);
1854:         fail("Expecting exception: IllegalStateException");
1855:       
1856:       } catch(IllegalStateException e) {
1857:          //
1858:          // 53
1859:          //
1860:          verifyException("com.google.javascript.rhino.Token", e);
1861:       }
1862:   }
1863: }
RegularFileObject[/tmp/EvoSuite_186_1628159310880/com/google/javascript/rhino/Node_186_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:31 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_186_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_186_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
71:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.common.collect.AbstractIndexedListIterator",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_186_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.SimpleErrorReporter",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.JSDocInfo",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.javascript.rhino.JSTypeExpression",
342:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
343:       "com.google.common.collect.Sets",
344:       "com.google.common.base.Objects",
345:       "com.google.javascript.rhino.InputId",
346:       "com.google.javascript.rhino.jstype.TemplatizedType",
347:       "com.google.common.collect.AbstractIndexedListIterator",
348:       "com.google.common.collect.Iterators$11",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.common.collect.Iterables",
351:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
352:       "com.google.javascript.rhino.jstype.NamedType",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.javascript.rhino.jstype.TernaryValue",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.common.collect.FluentIterable",
358:       "com.google.common.collect.Iterables$2",
359:       "com.google.common.collect.TransformedIterator",
360:       "com.google.common.collect.Iterables$3",
361:       "com.google.common.collect.Iterators$5",
362:       "com.google.javascript.rhino.jstype.JSType$TypePair",
363:       "com.google.common.collect.AbstractMultimap$Values",
364:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
365:       "com.google.common.collect.AbstractMapBasedMultimap$1",
366:       "com.google.common.collect.Multimaps$Entries",
367:       "com.google.common.collect.AbstractMultimap$Entries",
368:       "com.google.common.collect.AbstractMapBasedMultimap$2"
369:     );
370:   }
371: }

[MASTER] 10:28:31.297 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

JSType[] jSTypeArray0 = new JSType[0];
Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(83, node0.getType());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node0);
assertEquals(0, jSTypeArray0.length);

int int0 = 37;
Node node1 = Node.newString(53, "}`tya", 37, 777);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isScript());
assertEquals(152329, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals(777, node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isIf());
assertEquals(37, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertEquals(53, node1.getType());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isParamList());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(node1);

boolean boolean0 = node0.isQualifiedName();
assertFalse(node0.equals((Object)node1));
assertFalse(boolean0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(83, node0.getType());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, jSTypeArray0.length);

node1.addChildToBack(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(83, node0.getType());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node1.isScript());
assertEquals(152329, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals(777, node1.getCharno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFalse());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isIf());
assertEquals(37, node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertEquals(53, node1.getType());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isParamList());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, jSTypeArray0.length);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node0));
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(83, node0.getType());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(iterable0);
assertEquals(0, jSTypeArray0.length);

Node node2 = node1.srcrefTree(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertSame(node1, node2);
assertSame(node2, node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(83, node0.getType());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals((-1), node1.getLineno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFalse());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertEquals(53, node1.getType());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isParamList());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isGetProp());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isExprResult());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertTrue(node2.hasOneChild());
assertFalse(node2.isWhile());
assertTrue(node2.hasChildren());
assertFalse(node2.isNE());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertEquals(53, node2.getType());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isSwitch());
assertFalse(node2.isTrue());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isTry());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotNull(node2);
assertEquals(0, jSTypeArray0.length);

node0.addChildrenToFront(node1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertSame(node1, node2);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(83, node0.getType());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertEquals(1, node0.getChildCount());
assertTrue(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertTrue(node0.hasOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals((-1), node1.getLineno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFalse());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertEquals(53, node1.getType());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isParamList());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, jSTypeArray0.length);

String string0 = node1.getString();
assertFalse(node1.equals((Object)node0));
assertEquals("}`tya", string0);
assertSame(node1, node2);
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals((-1), node1.getLineno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFalse());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isIf());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertEquals(53, node1.getType());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isParamList());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(string0);

Node node3 = node0.getLastChild();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertSame(node3, node2);
assertSame(node3, node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(83, node0.getType());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertEquals(1, node0.getChildCount());
assertTrue(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertTrue(node0.hasOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node3.isWith());
assertFalse(node3.isExprResult());
assertFalse(node3.isScript());
assertFalse(node3.isCast());
assertFalse(node3.isAssign());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNumber());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetProp());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isSwitch());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isString());
assertFalse(node3.isAdd());
assertFalse(node3.isReturn());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isWhile());
assertFalse(node3.isVar());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isEmpty());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isOr());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isDebugger());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isVoid());
assertFalse(node3.isTry());
assertFalse(node3.isCatch());
assertTrue(node3.hasOneChild());
assertFalse(node3.isFor());
assertFalse(node3.isParamList());
assertEquals(53, node3.getType());
assertFalse(node3.isGetterDef());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isHook());
assertFalse(node3.isThrow());
assertFalse(node3.isBlock());
assertFalse(node3.isThis());
assertFalse(node3.isNE());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIf());
assertTrue(node3.hasChildren());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isIn());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node3);
assertEquals(0, jSTypeArray0.length);

boolean boolean1 = node3.isQuotedString();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node3.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertSame(node3, node2);
assertSame(node3, node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(83, node0.getType());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertEquals(1, node0.getChildCount());
assertTrue(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertTrue(node0.hasOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node3.isWith());
assertFalse(node3.isExprResult());
assertFalse(node3.isScript());
assertFalse(node3.isCast());
assertFalse(node3.isAssign());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNumber());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetProp());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isSwitch());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isString());
assertFalse(node3.isAdd());
assertFalse(node3.isReturn());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isWhile());
assertFalse(node3.isVar());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isEmpty());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isOr());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isDebugger());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isVoid());
assertFalse(node3.isTry());
assertFalse(node3.isCatch());
assertTrue(node3.hasOneChild());
assertFalse(node3.isFor());
assertFalse(node3.isParamList());
assertEquals(53, node3.getType());
assertFalse(node3.isGetterDef());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isHook());
assertFalse(node3.isThrow());
assertFalse(node3.isBlock());
assertFalse(node3.isThis());
assertFalse(node3.isNE());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIf());
assertTrue(node3.hasChildren());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isIn());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, jSTypeArray0.length);

boolean boolean2 = node0.isBreak();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertEquals(83, node0.getType());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertEquals(1, node0.getChildCount());
assertTrue(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertTrue(node0.hasOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, jSTypeArray0.length);

int int1 = (-1682);
int int2 = 131072;
node2.checkTreeEquals(node0);

[MASTER] 10:28:53.275 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:53.579 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:53.833 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:54.085 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:54.327 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:54.516 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:54.789 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:55.037 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:55.229 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:55.425 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:55.628 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:55.810 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:56.025 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:56.203 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:56.442 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:56.644 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:56.908 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:57.137 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:58.005 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:58.216 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:58.436 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:58.658 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/14
* Done!

* Computation finished
