* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 3864
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2984270459
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:44:59.127 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:45:00.848 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 17:45:01.550 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - true
[MASTER] 17:45:01.574 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 3555: com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V:972 - ReplaceComparisonOperator == -> -2
[MASTER] 17:47:39.663 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 605s and 459 generations, 219222 statements, best individual has fitness: 2858.0
* Minimizing test suite
[MASTER] 17:56:24.933 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 801
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 603
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 109
* Number of covered goals: 109
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 530
* Number of covered goals: 460
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 4536
* Number of covered goals: 2234
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 79%
* Total number of goals: 714
* Number of covered goals: 567
* Generated 780 tests with total length 11238
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:57:44.297 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7609833333333333% of time used, but only 33/780 tests minimized), falling back to using all assertions
[MASTER] 17:57:58.971 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 9%
* Compiling and checking tests
[MASTER] 17:58:12.470 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 13 seconds more than allowed.
[MASTER] 17:58:32.308 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_112_1629223112239/com/google/javascript/rhino/Node_112_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_112_1629223112239/com/google/javascript/rhino/Node_112_tmp__ESTest_scaffolding.java]]
[MASTER] 17:58:32.308 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:32.308 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:32.310 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 298
[MASTER] 17:58:32.312 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_112_1629223112239/com/google/javascript/rhino/Node_112_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:58:32 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_112_tmp__ESTest extends Node_112_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("{MkUd");
21:       assertFalse(node0.isIn());
22:       assertFalse(node0.isGetterDef());
23:       assertFalse(node0.isSwitch());
24:       assertFalse(node0.isNE());
25:       assertFalse(node0.isArrayLit());
26:       assertFalse(node0.isIf());
27:       assertFalse(node0.isDelProp());
28:       assertFalse(node0.isTry());
29:       assertFalse(node0.isHook());
30:       assertFalse(node0.isDebugger());
31:       assertEquals((-1), node0.getCharno());
32:       assertFalse(node0.isRegExp());
33:       assertFalse(node0.isCase());
34:       assertFalse(node0.isFor());
35:       assertFalse(node0.isInstanceOf());
36:       assertFalse(node0.isGetProp());
37:       assertFalse(node0.isThis());
38:       assertFalse(node0.isCatch());
39:       assertFalse(node0.isObjectLit());
40:       assertFalse(node0.isNot());
41:       assertFalse(node0.isWith());
42:       assertFalse(node0.isAnd());
43:       assertFalse(node0.isInc());
44:       assertFalse(node0.isCast());
45:       assertFalse(node0.isFalse());
46:       assertFalse(node0.isFunction());
47:       assertFalse(node0.isThrow());
48:       assertEquals(40, node0.getType());
49:       assertFalse(node0.isSetterDef());
50:       assertFalse(node0.isReturn());
51:       assertFalse(node0.isOr());
52:       assertFalse(node0.isAssignAdd());
53:       assertEquals((-1), node0.getLineno());
54:       assertFalse(node0.isLabel());
55:       assertFalse(node0.hasMoreThanOneChild());
56:       assertFalse(node0.isContinue());
57:       assertEquals((-1), node0.getSourcePosition());
58:       assertFalse(node0.isDec());
59:       assertFalse(node0.isNumber());
60:       assertFalse(node0.isTypeOf());
61:       assertFalse(node0.isLabelName());
62:       assertFalse(node0.isGetElem());
63:       assertFalse(node0.isBlock());
64:       assertFalse(node0.isExprResult());
65:       assertFalse(node0.isAssign());
66:       assertFalse(node0.isWhile());
67:       assertFalse(node0.hasChildren());
68:       assertFalse(node0.isScript());
69:       assertFalse(node0.hasOneChild());
70:       assertTrue(node0.isString());
71:       assertFalse(node0.isComma());
72:       assertEquals(0, node0.getChildCount());
73:       assertFalse(node0.isBreak());
74:       assertFalse(node0.isStringKey());
75:       assertFalse(node0.isCall());
76:       assertFalse(node0.isNull());
77:       assertFalse(node0.isParamList());
78:       assertFalse(node0.isName());
79:       assertFalse(node0.isVoid());
80:       assertFalse(node0.isNew());
81:       assertFalse(node0.isAdd());
82:       assertFalse(node0.isTrue());
83:       assertFalse(node0.isDo());
84:       assertFalse(node0.isEmpty());
85:       assertFalse(node0.isVar());
86:       assertFalse(node0.isDefaultCase());
87:       assertNotNull(node0);
88:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
89:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
90:       assertEquals(29, Node.JSDOC_INFO_PROP);
91:       assertEquals(37, Node.OPT_ARG_NAME);
92:       assertEquals(47, Node.IS_DISPATCHER);
93:       assertEquals(2, Node.POST_FLAG);
94:       assertEquals(55, Node.INFERRED_FUNCTION);
95:       assertEquals(4095, Node.COLUMN_MASK);
96:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
97:       assertEquals(48, Node.DIRECTIVES);
98:       assertEquals(57, Node.LAST_PROP);
99:       assertEquals(49, Node.DIRECT_EVAL);
100:       assertEquals(8, Node.FLAG_NO_THROWS);
101:       assertEquals(39, Node.EMPTY_BLOCK);
102:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
103:       assertEquals(36, Node.QUOTED_PROP);
104:       assertEquals(56, Node.CHANGE_TIME);
105:       assertEquals(15, Node.NO_SIDE_EFFECTS);
106:       assertEquals(53, Node.INPUT_ID);
107:       assertEquals(52, Node.LENGTH);
108:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
109:       assertEquals(57, Node.REFLECTED_OBJECT);
110:       assertEquals(40, Node.ORIGINALNAME_PROP);
111:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
112:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
113:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
114:       assertEquals(30, Node.VAR_ARGS_NAME);
115:       assertEquals(12, Node.COLUMN_BITS);
116:       assertEquals(46, Node.IS_NAMESPACE);
117:       assertEquals(1, Node.DECR_FLAG);
118:       assertEquals(32, Node.INCRDECR_PROP);
119:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
120:       assertEquals(43, Node.IS_CONSTANT_NAME);
121:       assertEquals(54, Node.SLASH_V);
122:       assertEquals(51, Node.STATIC_SOURCE_FILE);
123:       assertEquals(50, Node.FREE_CALL);
124:       
125:       boolean boolean0 = node0.isQualifiedName();
126:       assertFalse(boolean0);
127:       assertFalse(node0.isIn());
128:       assertFalse(node0.isGetterDef());
129:       assertFalse(node0.isSwitch());
130:       assertFalse(node0.isNE());
131:       assertFalse(node0.isArrayLit());
132:       assertFalse(node0.isIf());
133:       assertFalse(node0.isDelProp());
134:       assertFalse(node0.isTry());
135:       assertFalse(node0.isHook());
136:       assertFalse(node0.isDebugger());
137:       assertEquals((-1), node0.getCharno());
138:       assertFalse(node0.isRegExp());
139:       assertFalse(node0.isCase());
140:       assertFalse(node0.isFor());
141:       assertFalse(node0.isInstanceOf());
142:       assertFalse(node0.isGetProp());
143:       assertFalse(node0.isThis());
144:       assertFalse(node0.isCatch());
145:       assertFalse(node0.isObjectLit());
146:       assertFalse(node0.isNot());
147:       assertFalse(node0.isWith());
148:       assertFalse(node0.isAnd());
149:       assertFalse(node0.isInc());
150:       assertFalse(node0.isCast());
151:       assertFalse(node0.isFalse());
152:       assertFalse(node0.isFunction());
153:       assertFalse(node0.isThrow());
154:       assertEquals(40, node0.getType());
155:       assertFalse(node0.isSetterDef());
156:       assertFalse(node0.isReturn());
157:       assertFalse(node0.isOr());
158:       assertFalse(node0.isAssignAdd());
159:       assertEquals((-1), node0.getLineno());
160:       assertFalse(node0.isLabel());
161:       assertFalse(node0.hasMoreThanOneChild());
162:       assertFalse(node0.isContinue());
163:       assertEquals((-1), node0.getSourcePosition());
164:       assertFalse(node0.isDec());
165:       assertFalse(node0.isNumber());
166:       assertFalse(node0.isTypeOf());
167:       assertFalse(node0.isLabelName());
168:       assertFalse(node0.isGetElem());
169:       assertFalse(node0.isBlock());
170:       assertFalse(node0.isExprResult());
171:       assertFalse(node0.isAssign());
172:       assertFalse(node0.isWhile());
173:       assertFalse(node0.hasChildren());
174:       assertFalse(node0.isScript());
175:       assertFalse(node0.hasOneChild());
176:       assertTrue(node0.isString());
177:       assertFalse(node0.isComma());
178:       assertEquals(0, node0.getChildCount());
179:       assertFalse(node0.isBreak());
180:       assertFalse(node0.isStringKey());
181:       assertFalse(node0.isCall());
182:       assertFalse(node0.isNull());
183:       assertFalse(node0.isParamList());
184:       assertFalse(node0.isName());
185:       assertFalse(node0.isVoid());
186:       assertFalse(node0.isNew());
187:       assertFalse(node0.isAdd());
188:       assertFalse(node0.isTrue());
189:       assertFalse(node0.isDo());
190:       assertFalse(node0.isEmpty());
191:       assertFalse(node0.isVar());
192:       assertFalse(node0.isDefaultCase());
193:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
194:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
195:       assertEquals(29, Node.JSDOC_INFO_PROP);
196:       assertEquals(37, Node.OPT_ARG_NAME);
197:       assertEquals(47, Node.IS_DISPATCHER);
198:       assertEquals(2, Node.POST_FLAG);
199:       assertEquals(55, Node.INFERRED_FUNCTION);
200:       assertEquals(4095, Node.COLUMN_MASK);
201:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
202:       assertEquals(48, Node.DIRECTIVES);
203:       assertEquals(57, Node.LAST_PROP);
204:       assertEquals(49, Node.DIRECT_EVAL);
205:       assertEquals(8, Node.FLAG_NO_THROWS);
206:       assertEquals(39, Node.EMPTY_BLOCK);
207:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
208:       assertEquals(36, Node.QUOTED_PROP);
209:       assertEquals(56, Node.CHANGE_TIME);
210:       assertEquals(15, Node.NO_SIDE_EFFECTS);
211:       assertEquals(53, Node.INPUT_ID);
212:       assertEquals(52, Node.LENGTH);
213:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
214:       assertEquals(57, Node.REFLECTED_OBJECT);
215:       assertEquals(40, Node.ORIGINALNAME_PROP);
216:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
217:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
218:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
219:       assertEquals(30, Node.VAR_ARGS_NAME);
220:       assertEquals(12, Node.COLUMN_BITS);
221:       assertEquals(46, Node.IS_NAMESPACE);
222:       assertEquals(1, Node.DECR_FLAG);
223:       assertEquals(32, Node.INCRDECR_PROP);
224:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
225:       assertEquals(43, Node.IS_CONSTANT_NAME);
226:       assertEquals(54, Node.SLASH_V);
227:       assertEquals(51, Node.STATIC_SOURCE_FILE);
228:       assertEquals(50, Node.FREE_CALL);
229:       
230:       Iterable<Node> iterable0 = node0.children();
231:       assertFalse(node0.isIn());
232:       assertFalse(node0.isGetterDef());
233:       assertFalse(node0.isSwitch());
234:       assertFalse(node0.isNE());
235:       assertFalse(node0.isArrayLit());
236:       assertFalse(node0.isIf());
237:       assertFalse(node0.isDelProp());
238:       assertFalse(node0.isTry());
239:       assertFalse(node0.isHook());
240:       assertFalse(node0.isDebugger());
241:       assertEquals((-1), node0.getCharno());
242:       assertFalse(node0.isRegExp());
243:       assertFalse(node0.isCase());
244:       assertFalse(node0.isFor());
245:       assertFalse(node0.isInstanceOf());
246:       assertFalse(node0.isGetProp());
247:       assertFalse(node0.isThis());
248:       assertFalse(node0.isCatch());
249:       assertFalse(node0.isObjectLit());
250:       assertFalse(node0.isNot());
251:       assertFalse(node0.isWith());
252:       assertFalse(node0.isAnd());
253:       assertFalse(node0.isInc());
254:       assertFalse(node0.isCast());
255:       assertFalse(node0.isFalse());
256:       assertFalse(node0.isFunction());
257:       assertFalse(node0.isThrow());
258:       assertEquals(40, node0.getType());
259:       assertFalse(node0.isSetterDef());
260:       assertFalse(node0.isReturn());
261:       assertFalse(node0.isOr());
262:       assertFalse(node0.isAssignAdd());
263:       assertEquals((-1), node0.getLineno());
264:       assertFalse(node0.isLabel());
265:       assertFalse(node0.hasMoreThanOneChild());
266:       assertFalse(node0.isContinue());
267:       assertEquals((-1), node0.getSourcePosition());
268:       assertFalse(node0.isDec());
269:       assertFalse(node0.isNumber());
270:       assertFalse(node0.isTypeOf());
271:       assertFalse(node0.isLabelName());
272:       assertFalse(node0.isGetElem());
273:       assertFalse(node0.isBlock());
274:       assertFalse(node0.isExprResult());
275:       assertFalse(node0.isAssign());
276:       assertFalse(node0.isWhile());
277:       assertFalse(node0.hasChildren());
278:       assertFalse(node0.isScript());
279:       assertFalse(node0.hasOneChild());
280:       assertTrue(node0.isString());
281:       assertFalse(node0.isComma());
282:       assertEquals(0, node0.getChildCount());
283:       assertFalse(node0.isBreak());
284:       assertFalse(node0.isStringKey());
285:       assertFalse(node0.isCall());
286:       assertFalse(node0.isNull());
287:       assertFalse(node0.isParamList());
288:       assertFalse(node0.isName());
289:       assertFalse(node0.isVoid());
290:       assertFalse(node0.isNew());
291:       assertFalse(node0.isAdd());
292:       assertFalse(node0.isTrue());
293:       assertFalse(node0.isDo());
294:       assertFalse(node0.isEmpty());
295:       assertFalse(node0.isVar());
296:       assertFalse(node0.isDefaultCase());
297:       assertNotNull(iterable0);
298:       assertFalse(iterable0.contains(node0));
299:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
300:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
301:       assertEquals(29, Node.JSDOC_INFO_PROP);
302:       assertEquals(37, Node.OPT_ARG_NAME);
303:       assertEquals(47, Node.IS_DISPATCHER);
304:       assertEquals(2, Node.POST_FLAG);
305:       assertEquals(55, Node.INFERRED_FUNCTION);
306:       assertEquals(4095, Node.COLUMN_MASK);
307:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
308:       assertEquals(48, Node.DIRECTIVES);
309:       assertEquals(57, Node.LAST_PROP);
310:       assertEquals(49, Node.DIRECT_EVAL);
311:       assertEquals(8, Node.FLAG_NO_THROWS);
312:       assertEquals(39, Node.EMPTY_BLOCK);
313:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
314:       assertEquals(36, Node.QUOTED_PROP);
315:       assertEquals(56, Node.CHANGE_TIME);
316:       assertEquals(15, Node.NO_SIDE_EFFECTS);
317:       assertEquals(53, Node.INPUT_ID);
318:       assertEquals(52, Node.LENGTH);
319:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
320:       assertEquals(57, Node.REFLECTED_OBJECT);
321:       assertEquals(40, Node.ORIGINALNAME_PROP);
322:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
323:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
324:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
325:       assertEquals(30, Node.VAR_ARGS_NAME);
326:       assertEquals(12, Node.COLUMN_BITS);
327:       assertEquals(46, Node.IS_NAMESPACE);
328:       assertEquals(1, Node.DECR_FLAG);
329:       assertEquals(32, Node.INCRDECR_PROP);
330:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
331:       assertEquals(43, Node.IS_CONSTANT_NAME);
332:       assertEquals(54, Node.SLASH_V);
333:       assertEquals(51, Node.STATIC_SOURCE_FILE);
334:       assertEquals(50, Node.FREE_CALL);
335:       
336:       node0.setString("{MkUd");
337:       assertFalse(node0.isIn());
338:       assertFalse(node0.isGetterDef());
339:       assertFalse(node0.isSwitch());
340:       assertFalse(node0.isNE());
341:       assertFalse(node0.isArrayLit());
342:       assertFalse(node0.isIf());
343:       assertFalse(node0.isDelProp());
344:       assertFalse(node0.isTry());
345:       assertFalse(node0.isHook());
346:       assertFalse(node0.isDebugger());
347:       assertEquals((-1), node0.getCharno());
348:       assertFalse(node0.isRegExp());
349:       assertFalse(node0.isCase());
350:       assertFalse(node0.isFor());
351:       assertFalse(node0.isInstanceOf());
352:       assertFalse(node0.isGetProp());
353:       assertFalse(node0.isThis());
354:       assertFalse(node0.isCatch());
355:       assertFalse(node0.isObjectLit());
356:       assertFalse(node0.isNot());
357:       assertFalse(node0.isWith());
358:       assertFalse(node0.isAnd());
359:       assertFalse(node0.isInc());
360:       assertFalse(node0.isCast());
361:       assertFalse(node0.isFalse());
362:       assertFalse(node0.isFunction());
363:       assertFalse(node0.isThrow());
364:       assertEquals(40, node0.getType());
365:       assertFalse(node0.isSetterDef());
366:       assertFalse(node0.isReturn());
367:       assertFalse(node0.isOr());
368:       assertFalse(node0.isAssignAdd());
369:       assertEquals((-1), node0.getLineno());
370:       assertFalse(node0.isLabel());
371:       assertFalse(node0.hasMoreThanOneChild());
372:       assertFalse(node0.isContinue());
373:       assertEquals((-1), node0.getSourcePosition());
374:       assertFalse(node0.isDec());
375:       assertFalse(node0.isNumber());
376:       assertFalse(node0.isTypeOf());
377:       assertFalse(node0.isLabelName());
378:       assertFalse(node0.isGetElem());
379:       assertFalse(node0.isBlock());
380:       assertFalse(node0.isExprResult());
381:       assertFalse(node0.isAssign());
382:       assertFalse(node0.isWhile());
383:       assertFalse(node0.hasChildren());
384:       assertFalse(node0.isScript());
385:       assertFalse(node0.hasOneChild());
386:       assertTrue(node0.isString());
387:       assertFalse(node0.isComma());
388:       assertEquals(0, node0.getChildCount());
389:       assertFalse(node0.isBreak());
390:       assertFalse(node0.isStringKey());
391:       assertFalse(node0.isCall());
392:       assertFalse(node0.isNull());
393:       assertFalse(node0.isParamList());
394:       assertFalse(node0.isName());
395:       assertFalse(node0.isVoid());
396:       assertFalse(node0.isNew());
397:       assertFalse(node0.isAdd());
398:       assertFalse(node0.isTrue());
399:       assertFalse(node0.isDo());
400:       assertFalse(node0.isEmpty());
401:       assertFalse(node0.isVar());
402:       assertFalse(node0.isDefaultCase());
403:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
404:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
405:       assertEquals(29, Node.JSDOC_INFO_PROP);
406:       assertEquals(37, Node.OPT_ARG_NAME);
407:       assertEquals(47, Node.IS_DISPATCHER);
408:       assertEquals(2, Node.POST_FLAG);
409:       assertEquals(55, Node.INFERRED_FUNCTION);
410:       assertEquals(4095, Node.COLUMN_MASK);
411:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
412:       assertEquals(48, Node.DIRECTIVES);
413:       assertEquals(57, Node.LAST_PROP);
414:       assertEquals(49, Node.DIRECT_EVAL);
415:       assertEquals(8, Node.FLAG_NO_THROWS);
416:       assertEquals(39, Node.EMPTY_BLOCK);
417:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
418:       assertEquals(36, Node.QUOTED_PROP);
419:       assertEquals(56, Node.CHANGE_TIME);
420:       assertEquals(15, Node.NO_SIDE_EFFECTS);
421:       assertEquals(53, Node.INPUT_ID);
422:       assertEquals(52, Node.LENGTH);
423:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
424:       assertEquals(57, Node.REFLECTED_OBJECT);
425:       assertEquals(40, Node.ORIGINALNAME_PROP);
426:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
427:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
428:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
429:       assertEquals(30, Node.VAR_ARGS_NAME);
430:       assertEquals(12, Node.COLUMN_BITS);
431:       assertEquals(46, Node.IS_NAMESPACE);
432:       assertEquals(1, Node.DECR_FLAG);
433:       assertEquals(32, Node.INCRDECR_PROP);
434:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
435:       assertEquals(43, Node.IS_CONSTANT_NAME);
436:       assertEquals(54, Node.SLASH_V);
437:       assertEquals(51, Node.STATIC_SOURCE_FILE);
438:       assertEquals(50, Node.FREE_CALL);
439:       
440:       node0.setVarArgs(false);
441:       assertFalse(node0.isIn());
442:       assertFalse(node0.isGetterDef());
443:       assertFalse(node0.isSwitch());
444:       assertFalse(node0.isNE());
445:       assertFalse(node0.isArrayLit());
446:       assertFalse(node0.isIf());
447:       assertFalse(node0.isDelProp());
448:       assertFalse(node0.isTry());
449:       assertFalse(node0.isHook());
450:       assertFalse(node0.isDebugger());
451:       assertEquals((-1), node0.getCharno());
452:       assertFalse(node0.isRegExp());
453:       assertFalse(node0.isCase());
454:       assertFalse(node0.isFor());
455:       assertFalse(node0.isInstanceOf());
456:       assertFalse(node0.isGetProp());
457:       assertFalse(node0.isThis());
458:       assertFalse(node0.isCatch());
459:       assertFalse(node0.isObjectLit());
460:       assertFalse(node0.isNot());
461:       assertFalse(node0.isWith());
462:       assertFalse(node0.isAnd());
463:       assertFalse(node0.isInc());
464:       assertFalse(node0.isCast());
465:       assertFalse(node0.isFalse());
466:       assertFalse(node0.isFunction());
467:       assertFalse(node0.isThrow());
468:       assertEquals(40, node0.getType());
469:       assertFalse(node0.isSetterDef());
470:       assertFalse(node0.isReturn());
471:       assertFalse(node0.isOr());
472:       assertFalse(node0.isAssignAdd());
473:       assertEquals((-1), node0.getLineno());
474:       assertFalse(node0.isLabel());
475:       assertFalse(node0.hasMoreThanOneChild());
476:       assertFalse(node0.isContinue());
477:       assertEquals((-1), node0.getSourcePosition());
478:       assertFalse(node0.isDec());
479:       assertFalse(node0.isNumber());
480:       assertFalse(node0.isTypeOf());
481:       assertFalse(node0.isLabelName());
482:       assertFalse(node0.isGetElem());
483:       assertFalse(node0.isBlock());
484:       assertFalse(node0.isExprResult());
485:       assertFalse(node0.isAssign());
486:       assertFalse(node0.isWhile());
487:       assertFalse(node0.hasChildren());
488:       assertFalse(node0.isScript());
489:       assertFalse(node0.hasOneChild());
490:       assertTrue(node0.isString());
491:       assertFalse(node0.isComma());
492:       assertEquals(0, node0.getChildCount());
493:       assertFalse(node0.isBreak());
494:       assertFalse(node0.isStringKey());
495:       assertFalse(node0.isCall());
496:       assertFalse(node0.isNull());
497:       assertFalse(node0.isParamList());
498:       assertFalse(node0.isName());
499:       assertFalse(node0.isVoid());
500:       assertFalse(node0.isNew());
501:       assertFalse(node0.isAdd());
502:       assertFalse(node0.isTrue());
503:       assertFalse(node0.isDo());
504:       assertFalse(node0.isEmpty());
505:       assertFalse(node0.isVar());
506:       assertFalse(node0.isDefaultCase());
507:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
508:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
509:       assertEquals(29, Node.JSDOC_INFO_PROP);
510:       assertEquals(37, Node.OPT_ARG_NAME);
511:       assertEquals(47, Node.IS_DISPATCHER);
512:       assertEquals(2, Node.POST_FLAG);
513:       assertEquals(55, Node.INFERRED_FUNCTION);
514:       assertEquals(4095, Node.COLUMN_MASK);
515:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
516:       assertEquals(48, Node.DIRECTIVES);
517:       assertEquals(57, Node.LAST_PROP);
518:       assertEquals(49, Node.DIRECT_EVAL);
519:       assertEquals(8, Node.FLAG_NO_THROWS);
520:       assertEquals(39, Node.EMPTY_BLOCK);
521:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
522:       assertEquals(36, Node.QUOTED_PROP);
523:       assertEquals(56, Node.CHANGE_TIME);
524:       assertEquals(15, Node.NO_SIDE_EFFECTS);
525:       assertEquals(53, Node.INPUT_ID);
526:       assertEquals(52, Node.LENGTH);
527:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
528:       assertEquals(57, Node.REFLECTED_OBJECT);
529:       assertEquals(40, Node.ORIGINALNAME_PROP);
530:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
531:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
532:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
533:       assertEquals(30, Node.VAR_ARGS_NAME);
534:       assertEquals(12, Node.COLUMN_BITS);
535:       assertEquals(46, Node.IS_NAMESPACE);
536:       assertEquals(1, Node.DECR_FLAG);
537:       assertEquals(32, Node.INCRDECR_PROP);
538:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
539:       assertEquals(43, Node.IS_CONSTANT_NAME);
540:       assertEquals(54, Node.SLASH_V);
541:       assertEquals(51, Node.STATIC_SOURCE_FILE);
542:       assertEquals(50, Node.FREE_CALL);
543:       
544:       boolean boolean1 = node0.isFalse();
545:       assertFalse(boolean1);
546:       assertTrue(boolean1 == boolean0);
547:       assertFalse(node0.isIn());
548:       assertFalse(node0.isGetterDef());
549:       assertFalse(node0.isSwitch());
550:       assertFalse(node0.isNE());
551:       assertFalse(node0.isArrayLit());
552:       assertFalse(node0.isIf());
553:       assertFalse(node0.isDelProp());
554:       assertFalse(node0.isTry());
555:       assertFalse(node0.isHook());
556:       assertFalse(node0.isDebugger());
557:       assertEquals((-1), node0.getCharno());
558:       assertFalse(node0.isRegExp());
559:       assertFalse(node0.isCase());
560:       assertFalse(node0.isFor());
561:       assertFalse(node0.isInstanceOf());
562:       assertFalse(node0.isGetProp());
563:       assertFalse(node0.isThis());
564:       assertFalse(node0.isCatch());
565:       assertFalse(node0.isObjectLit());
566:       assertFalse(node0.isNot());
567:       assertFalse(node0.isWith());
568:       assertFalse(node0.isAnd());
569:       assertFalse(node0.isInc());
570:       assertFalse(node0.isCast());
571:       assertFalse(node0.isFalse());
572:       assertFalse(node0.isFunction());
573:       assertFalse(node0.isThrow());
574:       assertEquals(40, node0.getType());
575:       assertFalse(node0.isSetterDef());
576:       assertFalse(node0.isReturn());
577:       assertFalse(node0.isOr());
578:       assertFalse(node0.isAssignAdd());
579:       assertEquals((-1), node0.getLineno());
580:       assertFalse(node0.isLabel());
581:       assertFalse(node0.hasMoreThanOneChild());
582:       assertFalse(node0.isContinue());
583:       assertEquals((-1), node0.getSourcePosition());
584:       assertFalse(node0.isDec());
585:       assertFalse(node0.isNumber());
586:       assertFalse(node0.isTypeOf());
587:       assertFalse(node0.isLabelName());
588:       assertFalse(node0.isGetElem());
589:       assertFalse(node0.isBlock());
590:       assertFalse(node0.isExprResult());
591:       assertFalse(node0.isAssign());
592:       assertFalse(node0.isWhile());
593:       assertFalse(node0.hasChildren());
594:       assertFalse(node0.isScript());
595:       assertFalse(node0.hasOneChild());
596:       assertTrue(node0.isString());
597:       assertFalse(node0.isComma());
598:       assertEquals(0, node0.getChildCount());
599:       assertFalse(node0.isBreak());
600:       assertFalse(node0.isStringKey());
601:       assertFalse(node0.isCall());
602:       assertFalse(node0.isNull());
603:       assertFalse(node0.isParamList());
604:       assertFalse(node0.isName());
605:       assertFalse(node0.isVoid());
606:       assertFalse(node0.isNew());
607:       assertFalse(node0.isAdd());
608:       assertFalse(node0.isTrue());
609:       assertFalse(node0.isDo());
610:       assertFalse(node0.isEmpty());
611:       assertFalse(node0.isVar());
612:       assertFalse(node0.isDefaultCase());
613:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
614:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
615:       assertEquals(29, Node.JSDOC_INFO_PROP);
616:       assertEquals(37, Node.OPT_ARG_NAME);
617:       assertEquals(47, Node.IS_DISPATCHER);
618:       assertEquals(2, Node.POST_FLAG);
619:       assertEquals(55, Node.INFERRED_FUNCTION);
620:       assertEquals(4095, Node.COLUMN_MASK);
621:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
622:       assertEquals(48, Node.DIRECTIVES);
623:       assertEquals(57, Node.LAST_PROP);
624:       assertEquals(49, Node.DIRECT_EVAL);
625:       assertEquals(8, Node.FLAG_NO_THROWS);
626:       assertEquals(39, Node.EMPTY_BLOCK);
627:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
628:       assertEquals(36, Node.QUOTED_PROP);
629:       assertEquals(56, Node.CHANGE_TIME);
630:       assertEquals(15, Node.NO_SIDE_EFFECTS);
631:       assertEquals(53, Node.INPUT_ID);
632:       assertEquals(52, Node.LENGTH);
633:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
634:       assertEquals(57, Node.REFLECTED_OBJECT);
635:       assertEquals(40, Node.ORIGINALNAME_PROP);
636:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
637:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
638:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
639:       assertEquals(30, Node.VAR_ARGS_NAME);
640:       assertEquals(12, Node.COLUMN_BITS);
641:       assertEquals(46, Node.IS_NAMESPACE);
642:       assertEquals(1, Node.DECR_FLAG);
643:       assertEquals(32, Node.INCRDECR_PROP);
644:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
645:       assertEquals(43, Node.IS_CONSTANT_NAME);
646:       assertEquals(54, Node.SLASH_V);
647:       assertEquals(51, Node.STATIC_SOURCE_FILE);
648:       assertEquals(50, Node.FREE_CALL);
649:       
650:       boolean boolean2 = node0.isNumber();
651:       assertFalse(boolean2);
652:       assertTrue(boolean2 == boolean0);
653:       assertTrue(boolean2 == boolean1);
654:       assertFalse(node0.isIn());
655:       assertFalse(node0.isGetterDef());
656:       assertFalse(node0.isSwitch());
657:       assertFalse(node0.isNE());
658:       assertFalse(node0.isArrayLit());
659:       assertFalse(node0.isIf());
660:       assertFalse(node0.isDelProp());
661:       assertFalse(node0.isTry());
662:       assertFalse(node0.isHook());
663:       assertFalse(node0.isDebugger());
664:       assertEquals((-1), node0.getCharno());
665:       assertFalse(node0.isRegExp());
666:       assertFalse(node0.isCase());
667:       assertFalse(node0.isFor());
668:       assertFalse(node0.isInstanceOf());
669:       assertFalse(node0.isGetProp());
670:       assertFalse(node0.isThis());
671:       assertFalse(node0.isCatch());
672:       assertFalse(node0.isObjectLit());
673:       assertFalse(node0.isNot());
674:       assertFalse(node0.isWith());
675:       assertFalse(node0.isAnd());
676:       assertFalse(node0.isInc());
677:       assertFalse(node0.isCast());
678:       assertFalse(node0.isFalse());
679:       assertFalse(node0.isFunction());
680:       assertFalse(node0.isThrow());
681:       assertEquals(40, node0.getType());
682:       assertFalse(node0.isSetterDef());
683:       assertFalse(node0.isReturn());
684:       assertFalse(node0.isOr());
685:       assertFalse(node0.isAssignAdd());
686:       assertEquals((-1), node0.getLineno());
687:       assertFalse(node0.isLabel());
688:       assertFalse(node0.hasMoreThanOneChild());
689:       assertFalse(node0.isContinue());
690:       assertEquals((-1), node0.getSourcePosition());
691:       assertFalse(node0.isDec());
692:       assertFalse(node0.isNumber());
693:       assertFalse(node0.isTypeOf());
694:       assertFalse(node0.isLabelName());
695:       assertFalse(node0.isGetElem());
696:       assertFalse(node0.isBlock());
697:       assertFalse(node0.isExprResult());
698:       assertFalse(node0.isAssign());
699:       assertFalse(node0.isWhile());
700:       assertFalse(node0.hasChildren());
701:       assertFalse(node0.isScript());
702:       assertFalse(node0.hasOneChild());
703:       assertTrue(node0.isString());
704:       assertFalse(node0.isComma());
705:       assertEquals(0, node0.getChildCount());
706:       assertFalse(node0.isBreak());
707:       assertFalse(node0.isStringKey());
708:       assertFalse(node0.isCall());
709:       assertFalse(node0.isNull());
710:       assertFalse(node0.isParamList());
711:       assertFalse(node0.isName());
712:       assertFalse(node0.isVoid());
713:       assertFalse(node0.isNew());
714:       assertFalse(node0.isAdd());
715:       assertFalse(node0.isTrue());
716:       assertFalse(node0.isDo());
717:       assertFalse(node0.isEmpty());
718:       assertFalse(node0.isVar());
719:       assertFalse(node0.isDefaultCase());
720:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
721:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
722:       assertEquals(29, Node.JSDOC_INFO_PROP);
723:       assertEquals(37, Node.OPT_ARG_NAME);
724:       assertEquals(47, Node.IS_DISPATCHER);
725:       assertEquals(2, Node.POST_FLAG);
726:       assertEquals(55, Node.INFERRED_FUNCTION);
727:       assertEquals(4095, Node.COLUMN_MASK);
728:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
729:       assertEquals(48, Node.DIRECTIVES);
730:       assertEquals(57, Node.LAST_PROP);
731:       assertEquals(49, Node.DIRECT_EVAL);
732:       assertEquals(8, Node.FLAG_NO_THROWS);
733:       assertEquals(39, Node.EMPTY_BLOCK);
734:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
735:       assertEquals(36, Node.QUOTED_PROP);
736:       assertEquals(56, Node.CHANGE_TIME);
737:       assertEquals(15, Node.NO_SIDE_EFFECTS);
738:       assertEquals(53, Node.INPUT_ID);
739:       assertEquals(52, Node.LENGTH);
740:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
741:       assertEquals(57, Node.REFLECTED_OBJECT);
742:       assertEquals(40, Node.ORIGINALNAME_PROP);
743:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
744:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
745:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
746:       assertEquals(30, Node.VAR_ARGS_NAME);
747:       assertEquals(12, Node.COLUMN_BITS);
748:       assertEquals(46, Node.IS_NAMESPACE);
749:       assertEquals(1, Node.DECR_FLAG);
750:       assertEquals(32, Node.INCRDECR_PROP);
751:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
752:       assertEquals(43, Node.IS_CONSTANT_NAME);
753:       assertEquals(54, Node.SLASH_V);
754:       assertEquals(51, Node.STATIC_SOURCE_FILE);
755:       assertEquals(50, Node.FREE_CALL);
756:   }
757: }
RegularFileObject[/tmp/EvoSuite_112_1629223112239/com/google/javascript/rhino/Node_112_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:58:32 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_112_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_112_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_112_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.javascript.rhino.SimpleErrorReporter",
330:       "com.google.javascript.rhino.jstype.EnumType",
331:       "com.google.javascript.rhino.jstype.EnumElementType",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
334:       "com.google.javascript.rhino.JSTypeExpression",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.InputId",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.common.collect.AbstractIndexedListIterator",
341:       "com.google.common.collect.Iterators$11",
342:       "com.google.javascript.rhino.Node$AncestorIterable$1",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
350:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
351:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
352:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
353:       "com.google.common.collect.Iterables",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
356:       "com.google.common.collect.ImmutableSet",
357:       "com.google.common.collect.EmptyImmutableSet",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.javascript.rhino.jstype.NamedType",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.JSDocInfo$Marker",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.Platform"
368:     );
369:   }
370: }

[MASTER] 17:58:32.324 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("{MkUd");
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertNotNull(node0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

boolean boolean0 = node0.isQualifiedName();
assertFalse(boolean0);
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

node0.setString("{MkUd");
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

node0.setVarArgs(false);
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

boolean boolean1 = node0.isFalse();
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

boolean boolean2 = node0.isNumber();
assertFalse(boolean2);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);


[MASTER] 17:58:35.872 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_131_1629223115704/com/google/javascript/rhino/Node_131_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_131_1629223115704/com/google/javascript/rhino/Node_131_tmp__ESTest_scaffolding.java]]
[MASTER] 17:58:35.872 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:35.872 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:35.873 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 612
[MASTER] 17:58:35.874 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_131_1629223115704/com/google/javascript/rhino/Node_131_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:58:35 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_131_tmp__ESTest extends Node_131_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("H");
21:       assertFalse(node0.isGetterDef());
22:       assertFalse(node0.isDelProp());
23:       assertFalse(node0.isFor());
24:       assertFalse(node0.isEmpty());
25:       assertFalse(node0.isNE());
26:       assertFalse(node0.isIf());
27:       assertFalse(node0.isDebugger());
28:       assertFalse(node0.isIn());
29:       assertEquals(40, node0.getType());
30:       assertFalse(node0.isInc());
31:       assertFalse(node0.isSwitch());
32:       assertFalse(node0.isDefaultCase());
33:       assertEquals(0, node0.getChildCount());
34:       assertFalse(node0.isArrayLit());
35:       assertFalse(node0.isFalse());
36:       assertFalse(node0.isFunction());
37:       assertFalse(node0.isBreak());
38:       assertFalse(node0.isNull());
39:       assertFalse(node0.isName());
40:       assertFalse(node0.isAdd());
41:       assertFalse(node0.isGetProp());
42:       assertFalse(node0.isObjectLit());
43:       assertFalse(node0.isNot());
44:       assertFalse(node0.isWhile());
45:       assertFalse(node0.isTrue());
46:       assertFalse(node0.isVoid());
47:       assertFalse(node0.isReturn());
48:       assertFalse(node0.isCall());
49:       assertFalse(node0.isExprResult());
50:       assertFalse(node0.isComma());
51:       assertFalse(node0.isTypeOf());
52:       assertFalse(node0.hasChildren());
53:       assertFalse(node0.isDec());
54:       assertFalse(node0.isAssign());
55:       assertEquals((-1), node0.getSourcePosition());
56:       assertFalse(node0.isGetElem());
57:       assertFalse(node0.isLabelName());
58:       assertFalse(node0.isAssignAdd());
59:       assertFalse(node0.hasOneChild());
60:       assertFalse(node0.isOr());
61:       assertFalse(node0.isNumber());
62:       assertFalse(node0.isDo());
63:       assertFalse(node0.isAnd());
64:       assertFalse(node0.isNew());
65:       assertFalse(node0.isVar());
66:       assertFalse(node0.isLabel());
67:       assertFalse(node0.isContinue());
68:       assertFalse(node0.isCast());
69:       assertFalse(node0.isThis());
70:       assertFalse(node0.isSetterDef());
71:       assertFalse(node0.isParamList());
72:       assertFalse(node0.isThrow());
73:       assertFalse(node0.isStringKey());
74:       assertEquals((-1), node0.getCharno());
75:       assertFalse(node0.isScript());
76:       assertFalse(node0.isCase());
77:       assertTrue(node0.isString());
78:       assertFalse(node0.isTry());
79:       assertFalse(node0.isInstanceOf());
80:       assertEquals((-1), node0.getLineno());
81:       assertFalse(node0.isBlock());
82:       assertFalse(node0.isHook());
83:       assertFalse(node0.isCatch());
84:       assertFalse(node0.isRegExp());
85:       assertFalse(node0.isWith());
86:       assertFalse(node0.hasMoreThanOneChild());
87:       assertNotNull(node0);
88:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
89:       assertEquals(53, Node.INPUT_ID);
90:       assertEquals(36, Node.QUOTED_PROP);
91:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
92:       assertEquals(43, Node.IS_CONSTANT_NAME);
93:       assertEquals(56, Node.CHANGE_TIME);
94:       assertEquals(37, Node.OPT_ARG_NAME);
95:       assertEquals(48, Node.DIRECTIVES);
96:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
97:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
98:       assertEquals(51, Node.STATIC_SOURCE_FILE);
99:       assertEquals(50, Node.FREE_CALL);
100:       assertEquals(4095, Node.COLUMN_MASK);
101:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
102:       assertEquals(1, Node.DECR_FLAG);
103:       assertEquals(12, Node.COLUMN_BITS);
104:       assertEquals(32, Node.INCRDECR_PROP);
105:       assertEquals(54, Node.SLASH_V);
106:       assertEquals(15, Node.NO_SIDE_EFFECTS);
107:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
108:       assertEquals(30, Node.VAR_ARGS_NAME);
109:       assertEquals(52, Node.LENGTH);
110:       assertEquals(40, Node.ORIGINALNAME_PROP);
111:       assertEquals(57, Node.REFLECTED_OBJECT);
112:       assertEquals(46, Node.IS_NAMESPACE);
113:       assertEquals(49, Node.DIRECT_EVAL);
114:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
115:       assertEquals(39, Node.EMPTY_BLOCK);
116:       assertEquals(47, Node.IS_DISPATCHER);
117:       assertEquals(2, Node.POST_FLAG);
118:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
119:       assertEquals(8, Node.FLAG_NO_THROWS);
120:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
121:       assertEquals(55, Node.INFERRED_FUNCTION);
122:       assertEquals(29, Node.JSDOC_INFO_PROP);
123:       assertEquals(57, Node.LAST_PROP);
124:       
125:       Object object0 = node0.getProp(4095);
126:       assertFalse(node0.isGetterDef());
127:       assertFalse(node0.isDelProp());
128:       assertFalse(node0.isFor());
129:       assertFalse(node0.isEmpty());
130:       assertFalse(node0.isNE());
131:       assertFalse(node0.isIf());
132:       assertFalse(node0.isDebugger());
133:       assertFalse(node0.isIn());
134:       assertEquals(40, node0.getType());
135:       assertFalse(node0.isInc());
136:       assertFalse(node0.isSwitch());
137:       assertFalse(node0.isDefaultCase());
138:       assertEquals(0, node0.getChildCount());
139:       assertFalse(node0.isArrayLit());
140:       assertFalse(node0.isFalse());
141:       assertFalse(node0.isFunction());
142:       assertFalse(node0.isBreak());
143:       assertFalse(node0.isNull());
144:       assertFalse(node0.isName());
145:       assertFalse(node0.isAdd());
146:       assertFalse(node0.isGetProp());
147:       assertFalse(node0.isObjectLit());
148:       assertFalse(node0.isNot());
149:       assertFalse(node0.isWhile());
150:       assertFalse(node0.isTrue());
151:       assertFalse(node0.isVoid());
152:       assertFalse(node0.isReturn());
153:       assertFalse(node0.isCall());
154:       assertFalse(node0.isExprResult());
155:       assertFalse(node0.isComma());
156:       assertFalse(node0.isTypeOf());
157:       assertFalse(node0.hasChildren());
158:       assertFalse(node0.isDec());
159:       assertFalse(node0.isAssign());
160:       assertEquals((-1), node0.getSourcePosition());
161:       assertFalse(node0.isGetElem());
162:       assertFalse(node0.isLabelName());
163:       assertFalse(node0.isAssignAdd());
164:       assertFalse(node0.hasOneChild());
165:       assertFalse(node0.isOr());
166:       assertFalse(node0.isNumber());
167:       assertFalse(node0.isDo());
168:       assertFalse(node0.isAnd());
169:       assertFalse(node0.isNew());
170:       assertFalse(node0.isVar());
171:       assertFalse(node0.isLabel());
172:       assertFalse(node0.isContinue());
173:       assertFalse(node0.isCast());
174:       assertFalse(node0.isThis());
175:       assertFalse(node0.isSetterDef());
176:       assertFalse(node0.isParamList());
177:       assertFalse(node0.isThrow());
178:       assertFalse(node0.isStringKey());
179:       assertEquals((-1), node0.getCharno());
180:       assertFalse(node0.isScript());
181:       assertFalse(node0.isCase());
182:       assertTrue(node0.isString());
183:       assertFalse(node0.isTry());
184:       assertFalse(node0.isInstanceOf());
185:       assertEquals((-1), node0.getLineno());
186:       assertFalse(node0.isBlock());
187:       assertFalse(node0.isHook());
188:       assertFalse(node0.isCatch());
189:       assertFalse(node0.isRegExp());
190:       assertFalse(node0.isWith());
191:       assertFalse(node0.hasMoreThanOneChild());
192:       assertNull(object0);
193:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
194:       assertEquals(53, Node.INPUT_ID);
195:       assertEquals(36, Node.QUOTED_PROP);
196:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
197:       assertEquals(43, Node.IS_CONSTANT_NAME);
198:       assertEquals(56, Node.CHANGE_TIME);
199:       assertEquals(37, Node.OPT_ARG_NAME);
200:       assertEquals(48, Node.DIRECTIVES);
201:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
202:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
203:       assertEquals(51, Node.STATIC_SOURCE_FILE);
204:       assertEquals(50, Node.FREE_CALL);
205:       assertEquals(4095, Node.COLUMN_MASK);
206:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
207:       assertEquals(1, Node.DECR_FLAG);
208:       assertEquals(12, Node.COLUMN_BITS);
209:       assertEquals(32, Node.INCRDECR_PROP);
210:       assertEquals(54, Node.SLASH_V);
211:       assertEquals(15, Node.NO_SIDE_EFFECTS);
212:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
213:       assertEquals(30, Node.VAR_ARGS_NAME);
214:       assertEquals(52, Node.LENGTH);
215:       assertEquals(40, Node.ORIGINALNAME_PROP);
216:       assertEquals(57, Node.REFLECTED_OBJECT);
217:       assertEquals(46, Node.IS_NAMESPACE);
218:       assertEquals(49, Node.DIRECT_EVAL);
219:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
220:       assertEquals(39, Node.EMPTY_BLOCK);
221:       assertEquals(47, Node.IS_DISPATCHER);
222:       assertEquals(2, Node.POST_FLAG);
223:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
224:       assertEquals(8, Node.FLAG_NO_THROWS);
225:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
226:       assertEquals(55, Node.INFERRED_FUNCTION);
227:       assertEquals(29, Node.JSDOC_INFO_PROP);
228:       assertEquals(57, Node.LAST_PROP);
229:       
230:       boolean boolean0 = node0.isVoid();
231:       assertFalse(boolean0);
232:       assertFalse(node0.isGetterDef());
233:       assertFalse(node0.isDelProp());
234:       assertFalse(node0.isFor());
235:       assertFalse(node0.isEmpty());
236:       assertFalse(node0.isNE());
237:       assertFalse(node0.isIf());
238:       assertFalse(node0.isDebugger());
239:       assertFalse(node0.isIn());
240:       assertEquals(40, node0.getType());
241:       assertFalse(node0.isInc());
242:       assertFalse(node0.isSwitch());
243:       assertFalse(node0.isDefaultCase());
244:       assertEquals(0, node0.getChildCount());
245:       assertFalse(node0.isArrayLit());
246:       assertFalse(node0.isFalse());
247:       assertFalse(node0.isFunction());
248:       assertFalse(node0.isBreak());
249:       assertFalse(node0.isNull());
250:       assertFalse(node0.isName());
251:       assertFalse(node0.isAdd());
252:       assertFalse(node0.isGetProp());
253:       assertFalse(node0.isObjectLit());
254:       assertFalse(node0.isNot());
255:       assertFalse(node0.isWhile());
256:       assertFalse(node0.isTrue());
257:       assertFalse(node0.isVoid());
258:       assertFalse(node0.isReturn());
259:       assertFalse(node0.isCall());
260:       assertFalse(node0.isExprResult());
261:       assertFalse(node0.isComma());
262:       assertFalse(node0.isTypeOf());
263:       assertFalse(node0.hasChildren());
264:       assertFalse(node0.isDec());
265:       assertFalse(node0.isAssign());
266:       assertEquals((-1), node0.getSourcePosition());
267:       assertFalse(node0.isGetElem());
268:       assertFalse(node0.isLabelName());
269:       assertFalse(node0.isAssignAdd());
270:       assertFalse(node0.hasOneChild());
271:       assertFalse(node0.isOr());
272:       assertFalse(node0.isNumber());
273:       assertFalse(node0.isDo());
274:       assertFalse(node0.isAnd());
275:       assertFalse(node0.isNew());
276:       assertFalse(node0.isVar());
277:       assertFalse(node0.isLabel());
278:       assertFalse(node0.isContinue());
279:       assertFalse(node0.isCast());
280:       assertFalse(node0.isThis());
281:       assertFalse(node0.isSetterDef());
282:       assertFalse(node0.isParamList());
283:       assertFalse(node0.isThrow());
284:       assertFalse(node0.isStringKey());
285:       assertEquals((-1), node0.getCharno());
286:       assertFalse(node0.isScript());
287:       assertFalse(node0.isCase());
288:       assertTrue(node0.isString());
289:       assertFalse(node0.isTry());
290:       assertFalse(node0.isInstanceOf());
291:       assertEquals((-1), node0.getLineno());
292:       assertFalse(node0.isBlock());
293:       assertFalse(node0.isHook());
294:       assertFalse(node0.isCatch());
295:       assertFalse(node0.isRegExp());
296:       assertFalse(node0.isWith());
297:       assertFalse(node0.hasMoreThanOneChild());
298:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
299:       assertEquals(53, Node.INPUT_ID);
300:       assertEquals(36, Node.QUOTED_PROP);
301:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
302:       assertEquals(43, Node.IS_CONSTANT_NAME);
303:       assertEquals(56, Node.CHANGE_TIME);
304:       assertEquals(37, Node.OPT_ARG_NAME);
305:       assertEquals(48, Node.DIRECTIVES);
306:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
307:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
308:       assertEquals(51, Node.STATIC_SOURCE_FILE);
309:       assertEquals(50, Node.FREE_CALL);
310:       assertEquals(4095, Node.COLUMN_MASK);
311:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
312:       assertEquals(1, Node.DECR_FLAG);
313:       assertEquals(12, Node.COLUMN_BITS);
314:       assertEquals(32, Node.INCRDECR_PROP);
315:       assertEquals(54, Node.SLASH_V);
316:       assertEquals(15, Node.NO_SIDE_EFFECTS);
317:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
318:       assertEquals(30, Node.VAR_ARGS_NAME);
319:       assertEquals(52, Node.LENGTH);
320:       assertEquals(40, Node.ORIGINALNAME_PROP);
321:       assertEquals(57, Node.REFLECTED_OBJECT);
322:       assertEquals(46, Node.IS_NAMESPACE);
323:       assertEquals(49, Node.DIRECT_EVAL);
324:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
325:       assertEquals(39, Node.EMPTY_BLOCK);
326:       assertEquals(47, Node.IS_DISPATCHER);
327:       assertEquals(2, Node.POST_FLAG);
328:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
329:       assertEquals(8, Node.FLAG_NO_THROWS);
330:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
331:       assertEquals(55, Node.INFERRED_FUNCTION);
332:       assertEquals(29, Node.JSDOC_INFO_PROP);
333:       assertEquals(57, Node.LAST_PROP);
334:       
335:       Node node1 = new Node(43, node0, node0);
336:       assertFalse(node1.equals((Object)node0));
337:       assertFalse(node0.isGetterDef());
338:       assertFalse(node0.isDelProp());
339:       assertFalse(node0.isFor());
340:       assertFalse(node0.isEmpty());
341:       assertFalse(node0.isNE());
342:       assertFalse(node0.isIf());
343:       assertFalse(node0.isDebugger());
344:       assertFalse(node0.isIn());
345:       assertEquals(40, node0.getType());
346:       assertFalse(node0.isInc());
347:       assertFalse(node0.isSwitch());
348:       assertFalse(node0.isDefaultCase());
349:       assertEquals(0, node0.getChildCount());
350:       assertFalse(node0.isArrayLit());
351:       assertFalse(node0.isFalse());
352:       assertFalse(node0.isFunction());
353:       assertFalse(node0.isBreak());
354:       assertFalse(node0.isNull());
355:       assertFalse(node0.isName());
356:       assertFalse(node0.isAdd());
357:       assertFalse(node0.isGetProp());
358:       assertFalse(node0.isObjectLit());
359:       assertFalse(node0.isNot());
360:       assertFalse(node0.isWhile());
361:       assertFalse(node0.isTrue());
362:       assertFalse(node0.isVoid());
363:       assertFalse(node0.isReturn());
364:       assertFalse(node0.isCall());
365:       assertFalse(node0.isExprResult());
366:       assertFalse(node0.isComma());
367:       assertFalse(node0.isTypeOf());
368:       assertFalse(node0.hasChildren());
369:       assertFalse(node0.isDec());
370:       assertFalse(node0.isAssign());
371:       assertEquals((-1), node0.getSourcePosition());
372:       assertFalse(node0.isGetElem());
373:       assertFalse(node0.isLabelName());
374:       assertFalse(node0.isAssignAdd());
375:       assertFalse(node0.hasOneChild());
376:       assertFalse(node0.isOr());
377:       assertFalse(node0.isNumber());
378:       assertFalse(node0.isDo());
379:       assertFalse(node0.isAnd());
380:       assertFalse(node0.isNew());
381:       assertFalse(node0.isVar());
382:       assertFalse(node0.isLabel());
383:       assertFalse(node0.isContinue());
384:       assertFalse(node0.isCast());
385:       assertFalse(node0.isThis());
386:       assertFalse(node0.isSetterDef());
387:       assertFalse(node0.isParamList());
388:       assertFalse(node0.isThrow());
389:       assertFalse(node0.isStringKey());
390:       assertEquals((-1), node0.getCharno());
391:       assertFalse(node0.isScript());
392:       assertFalse(node0.isCase());
393:       assertTrue(node0.isString());
394:       assertFalse(node0.isTry());
395:       assertFalse(node0.isInstanceOf());
396:       assertEquals((-1), node0.getLineno());
397:       assertFalse(node0.isBlock());
398:       assertFalse(node0.isHook());
399:       assertFalse(node0.isCatch());
400:       assertFalse(node0.isRegExp());
401:       assertFalse(node0.isWith());
402:       assertFalse(node0.hasMoreThanOneChild());
403:       assertFalse(node1.isGetProp());
404:       assertFalse(node1.isComma());
405:       assertFalse(node1.isThis());
406:       assertFalse(node1.isAnd());
407:       assertFalse(node1.isWith());
408:       assertFalse(node1.isInstanceOf());
409:       assertFalse(node1.isBreak());
410:       assertFalse(node1.isExprResult());
411:       assertEquals((-1), node1.getCharno());
412:       assertFalse(node1.isSwitch());
413:       assertFalse(node1.isHook());
414:       assertFalse(node1.isCase());
415:       assertFalse(node1.isNot());
416:       assertFalse(node1.isObjectLit());
417:       assertFalse(node1.isNumber());
418:       assertFalse(node1.isString());
419:       assertFalse(node1.isScript());
420:       assertFalse(node1.isLabel());
421:       assertFalse(node1.isAssignAdd());
422:       assertFalse(node1.isTypeOf());
423:       assertFalse(node1.isOr());
424:       assertFalse(node1.isDec());
425:       assertFalse(node1.isReturn());
426:       assertTrue(node1.hasOneChild());
427:       assertFalse(node1.isGetElem());
428:       assertFalse(node1.isAssign());
429:       assertFalse(node1.isLabelName());
430:       assertFalse(node1.isDelProp());
431:       assertFalse(node1.isArrayLit());
432:       assertFalse(node1.isNew());
433:       assertFalse(node1.isVoid());
434:       assertFalse(node1.isDefaultCase());
435:       assertFalse(node1.isTrue());
436:       assertFalse(node1.isVar());
437:       assertFalse(node1.isDo());
438:       assertFalse(node1.isAdd());
439:       assertFalse(node1.isEmpty());
440:       assertTrue(node1.isFalse());
441:       assertFalse(node1.isNull());
442:       assertFalse(node1.isParamList());
443:       assertFalse(node1.isStringKey());
444:       assertFalse(node1.isName());
445:       assertFalse(node1.isCall());
446:       assertFalse(node1.isCatch());
447:       assertFalse(node1.isBlock());
448:       assertFalse(node1.isDebugger());
449:       assertFalse(node1.isRegExp());
450:       assertFalse(node1.isTry());
451:       assertFalse(node1.isWhile());
452:       assertFalse(node1.isGetterDef());
453:       assertEquals((-1), node1.getLineno());
454:       assertEquals(1, node1.getChildCount());
455:       assertEquals((-1), node1.getSourcePosition());
456:       assertFalse(node1.isIf());
457:       assertEquals(43, node1.getType());
458:       assertFalse(node1.isFor());
459:       assertFalse(node1.isNE());
460:       assertFalse(node1.isContinue());
461:       assertFalse(node1.hasMoreThanOneChild());
462:       assertFalse(node1.isCast());
463:       assertTrue(node1.hasChildren());
464:       assertFalse(node1.isFunction());
465:       assertFalse(node1.isThrow());
466:       assertFalse(node1.isIn());
467:       assertFalse(node1.isSetterDef());
468:       assertFalse(node1.isInc());
469:       assertNotNull(node1);
470:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
471:       assertEquals(53, Node.INPUT_ID);
472:       assertEquals(36, Node.QUOTED_PROP);
473:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
474:       assertEquals(43, Node.IS_CONSTANT_NAME);
475:       assertEquals(56, Node.CHANGE_TIME);
476:       assertEquals(37, Node.OPT_ARG_NAME);
477:       assertEquals(48, Node.DIRECTIVES);
478:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
479:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
480:       assertEquals(51, Node.STATIC_SOURCE_FILE);
481:       assertEquals(50, Node.FREE_CALL);
482:       assertEquals(4095, Node.COLUMN_MASK);
483:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
484:       assertEquals(1, Node.DECR_FLAG);
485:       assertEquals(12, Node.COLUMN_BITS);
486:       assertEquals(32, Node.INCRDECR_PROP);
487:       assertEquals(54, Node.SLASH_V);
488:       assertEquals(15, Node.NO_SIDE_EFFECTS);
489:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
490:       assertEquals(30, Node.VAR_ARGS_NAME);
491:       assertEquals(52, Node.LENGTH);
492:       assertEquals(40, Node.ORIGINALNAME_PROP);
493:       assertEquals(57, Node.REFLECTED_OBJECT);
494:       assertEquals(46, Node.IS_NAMESPACE);
495:       assertEquals(49, Node.DIRECT_EVAL);
496:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
497:       assertEquals(39, Node.EMPTY_BLOCK);
498:       assertEquals(47, Node.IS_DISPATCHER);
499:       assertEquals(2, Node.POST_FLAG);
500:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
501:       assertEquals(8, Node.FLAG_NO_THROWS);
502:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
503:       assertEquals(55, Node.INFERRED_FUNCTION);
504:       assertEquals(29, Node.JSDOC_INFO_PROP);
505:       assertEquals(57, Node.LAST_PROP);
506:       assertEquals(57, Node.REFLECTED_OBJECT);
507:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
508:       assertEquals(52, Node.LENGTH);
509:       assertEquals(40, Node.ORIGINALNAME_PROP);
510:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
511:       assertEquals(15, Node.NO_SIDE_EFFECTS);
512:       assertEquals(57, Node.LAST_PROP);
513:       assertEquals(30, Node.VAR_ARGS_NAME);
514:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
515:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
516:       assertEquals(12, Node.COLUMN_BITS);
517:       assertEquals(4095, Node.COLUMN_MASK);
518:       assertEquals(39, Node.EMPTY_BLOCK);
519:       assertEquals(55, Node.INFERRED_FUNCTION);
520:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
521:       assertEquals(56, Node.CHANGE_TIME);
522:       assertEquals(36, Node.QUOTED_PROP);
523:       assertEquals(37, Node.OPT_ARG_NAME);
524:       assertEquals(8, Node.FLAG_NO_THROWS);
525:       assertEquals(48, Node.DIRECTIVES);
526:       assertEquals(49, Node.DIRECT_EVAL);
527:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
528:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
529:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
530:       assertEquals(53, Node.INPUT_ID);
531:       assertEquals(29, Node.JSDOC_INFO_PROP);
532:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
533:       assertEquals(47, Node.IS_DISPATCHER);
534:       assertEquals(2, Node.POST_FLAG);
535:       assertEquals(51, Node.STATIC_SOURCE_FILE);
536:       assertEquals(32, Node.INCRDECR_PROP);
537:       assertEquals(1, Node.DECR_FLAG);
538:       assertEquals(43, Node.IS_CONSTANT_NAME);
539:       assertEquals(50, Node.FREE_CALL);
540:       assertEquals(46, Node.IS_NAMESPACE);
541:       assertEquals(54, Node.SLASH_V);
542:       
543:       Iterable<Node> iterable0 = node0.children();
544:       assertFalse(node0.equals((Object)node1));
545:       assertFalse(node0.isGetterDef());
546:       assertFalse(node0.isDelProp());
547:       assertFalse(node0.isFor());
548:       assertFalse(node0.isEmpty());
549:       assertFalse(node0.isNE());
550:       assertFalse(node0.isIf());
551:       assertFalse(node0.isDebugger());
552:       assertFalse(node0.isIn());
553:       assertEquals(40, node0.getType());
554:       assertFalse(node0.isInc());
555:       assertFalse(node0.isSwitch());
556:       assertFalse(node0.isDefaultCase());
557:       assertEquals(0, node0.getChildCount());
558:       assertFalse(node0.isArrayLit());
559:       assertFalse(node0.isFalse());
560:       assertFalse(node0.isFunction());
561:       assertFalse(node0.isBreak());
562:       assertFalse(node0.isNull());
563:       assertFalse(node0.isName());
564:       assertFalse(node0.isAdd());
565:       assertFalse(node0.isGetProp());
566:       assertFalse(node0.isObjectLit());
567:       assertFalse(node0.isNot());
568:       assertFalse(node0.isWhile());
569:       assertFalse(node0.isTrue());
570:       assertFalse(node0.isVoid());
571:       assertFalse(node0.isReturn());
572:       assertFalse(node0.isCall());
573:       assertFalse(node0.isExprResult());
574:       assertFalse(node0.isComma());
575:       assertFalse(node0.isTypeOf());
576:       assertFalse(node0.hasChildren());
577:       assertFalse(node0.isDec());
578:       assertFalse(node0.isAssign());
579:       assertEquals((-1), node0.getSourcePosition());
580:       assertFalse(node0.isGetElem());
581:       assertFalse(node0.isLabelName());
582:       assertFalse(node0.isAssignAdd());
583:       assertFalse(node0.hasOneChild());
584:       assertFalse(node0.isOr());
585:       assertFalse(node0.isNumber());
586:       assertFalse(node0.isDo());
587:       assertFalse(node0.isAnd());
588:       assertFalse(node0.isNew());
589:       assertFalse(node0.isVar());
590:       assertFalse(node0.isLabel());
591:       assertFalse(node0.isContinue());
592:       assertFalse(node0.isCast());
593:       assertFalse(node0.isThis());
594:       assertFalse(node0.isSetterDef());
595:       assertFalse(node0.isParamList());
596:       assertFalse(node0.isThrow());
597:       assertFalse(node0.isStringKey());
598:       assertEquals((-1), node0.getCharno());
599:       assertFalse(node0.isScript());
600:       assertFalse(node0.isCase());
601:       assertTrue(node0.isString());
602:       assertFalse(node0.isTry());
603:       assertFalse(node0.isInstanceOf());
604:       assertEquals((-1), node0.getLineno());
605:       assertFalse(node0.isBlock());
606:       assertFalse(node0.isHook());
607:       assertFalse(node0.isCatch());
608:       assertFalse(node0.isRegExp());
609:       assertFalse(node0.isWith());
610:       assertFalse(node0.hasMoreThanOneChild());
611:       assertNotNull(iterable0);
612:       assertFalse(iterable0.contains(node0));
613:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
614:       assertEquals(53, Node.INPUT_ID);
615:       assertEquals(36, Node.QUOTED_PROP);
616:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
617:       assertEquals(43, Node.IS_CONSTANT_NAME);
618:       assertEquals(56, Node.CHANGE_TIME);
619:       assertEquals(37, Node.OPT_ARG_NAME);
620:       assertEquals(48, Node.DIRECTIVES);
621:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
622:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
623:       assertEquals(51, Node.STATIC_SOURCE_FILE);
624:       assertEquals(50, Node.FREE_CALL);
625:       assertEquals(4095, Node.COLUMN_MASK);
626:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
627:       assertEquals(1, Node.DECR_FLAG);
628:       assertEquals(12, Node.COLUMN_BITS);
629:       assertEquals(32, Node.INCRDECR_PROP);
630:       assertEquals(54, Node.SLASH_V);
631:       assertEquals(15, Node.NO_SIDE_EFFECTS);
632:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
633:       assertEquals(30, Node.VAR_ARGS_NAME);
634:       assertEquals(52, Node.LENGTH);
635:       assertEquals(40, Node.ORIGINALNAME_PROP);
636:       assertEquals(57, Node.REFLECTED_OBJECT);
637:       assertEquals(46, Node.IS_NAMESPACE);
638:       assertEquals(49, Node.DIRECT_EVAL);
639:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
640:       assertEquals(39, Node.EMPTY_BLOCK);
641:       assertEquals(47, Node.IS_DISPATCHER);
642:       assertEquals(2, Node.POST_FLAG);
643:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
644:       assertEquals(8, Node.FLAG_NO_THROWS);
645:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
646:       assertEquals(55, Node.INFERRED_FUNCTION);
647:       assertEquals(29, Node.JSDOC_INFO_PROP);
648:       assertEquals(57, Node.LAST_PROP);
649:       
650:       node0.setString("");
651:       assertFalse(node0.equals((Object)node1));
652:       assertFalse(node0.isGetterDef());
653:       assertFalse(node0.isDelProp());
654:       assertFalse(node0.isFor());
655:       assertFalse(node0.isEmpty());
656:       assertFalse(node0.isNE());
657:       assertFalse(node0.isIf());
658:       assertFalse(node0.isDebugger());
659:       assertFalse(node0.isIn());
660:       assertEquals(40, node0.getType());
661:       assertFalse(node0.isInc());
662:       assertFalse(node0.isSwitch());
663:       assertFalse(node0.isDefaultCase());
664:       assertEquals(0, node0.getChildCount());
665:       assertFalse(node0.isArrayLit());
666:       assertFalse(node0.isFalse());
667:       assertFalse(node0.isFunction());
668:       assertFalse(node0.isBreak());
669:       assertFalse(node0.isNull());
670:       assertFalse(node0.isName());
671:       assertFalse(node0.isAdd());
672:       assertFalse(node0.isGetProp());
673:       assertFalse(node0.isObjectLit());
674:       assertFalse(node0.isNot());
675:       assertFalse(node0.isWhile());
676:       assertFalse(node0.isTrue());
677:       assertFalse(node0.isVoid());
678:       assertFalse(node0.isReturn());
679:       assertFalse(node0.isCall());
680:       assertFalse(node0.isExprResult());
681:       assertFalse(node0.isComma());
682:       assertFalse(node0.isTypeOf());
683:       assertFalse(node0.hasChildren());
684:       assertFalse(node0.isDec());
685:       assertFalse(node0.isAssign());
686:       assertEquals((-1), node0.getSourcePosition());
687:       assertFalse(node0.isGetElem());
688:       assertFalse(node0.isLabelName());
689:       assertFalse(node0.isAssignAdd());
690:       assertFalse(node0.hasOneChild());
691:       assertFalse(node0.isOr());
692:       assertFalse(node0.isNumber());
693:       assertFalse(node0.isDo());
694:       assertFalse(node0.isAnd());
695:       assertFalse(node0.isNew());
696:       assertFalse(node0.isVar());
697:       assertFalse(node0.isLabel());
698:       assertFalse(node0.isContinue());
699:       assertFalse(node0.isCast());
700:       assertFalse(node0.isThis());
701:       assertFalse(node0.isSetterDef());
702:       assertFalse(node0.isParamList());
703:       assertFalse(node0.isThrow());
704:       assertFalse(node0.isStringKey());
705:       assertEquals((-1), node0.getCharno());
706:       assertFalse(node0.isScript());
707:       assertFalse(node0.isCase());
708:       assertTrue(node0.isString());
709:       assertFalse(node0.isTry());
710:       assertFalse(node0.isInstanceOf());
711:       assertEquals((-1), node0.getLineno());
712:       assertFalse(node0.isBlock());
713:       assertFalse(node0.isHook());
714:       assertFalse(node0.isCatch());
715:       assertFalse(node0.isRegExp());
716:       assertFalse(node0.isWith());
717:       assertFalse(node0.hasMoreThanOneChild());
718:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
719:       assertEquals(53, Node.INPUT_ID);
720:       assertEquals(36, Node.QUOTED_PROP);
721:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
722:       assertEquals(43, Node.IS_CONSTANT_NAME);
723:       assertEquals(56, Node.CHANGE_TIME);
724:       assertEquals(37, Node.OPT_ARG_NAME);
725:       assertEquals(48, Node.DIRECTIVES);
726:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
727:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
728:       assertEquals(51, Node.STATIC_SOURCE_FILE);
729:       assertEquals(50, Node.FREE_CALL);
730:       assertEquals(4095, Node.COLUMN_MASK);
731:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
732:       assertEquals(1, Node.DECR_FLAG);
733:       assertEquals(12, Node.COLUMN_BITS);
734:       assertEquals(32, Node.INCRDECR_PROP);
735:       assertEquals(54, Node.SLASH_V);
736:       assertEquals(15, Node.NO_SIDE_EFFECTS);
737:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
738:       assertEquals(30, Node.VAR_ARGS_NAME);
739:       assertEquals(52, Node.LENGTH);
740:       assertEquals(40, Node.ORIGINALNAME_PROP);
741:       assertEquals(57, Node.REFLECTED_OBJECT);
742:       assertEquals(46, Node.IS_NAMESPACE);
743:       assertEquals(49, Node.DIRECT_EVAL);
744:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
745:       assertEquals(39, Node.EMPTY_BLOCK);
746:       assertEquals(47, Node.IS_DISPATCHER);
747:       assertEquals(2, Node.POST_FLAG);
748:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
749:       assertEquals(8, Node.FLAG_NO_THROWS);
750:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
751:       assertEquals(55, Node.INFERRED_FUNCTION);
752:       assertEquals(29, Node.JSDOC_INFO_PROP);
753:       assertEquals(57, Node.LAST_PROP);
754:       
755:       boolean boolean1 = node1.isFalse();
756:       assertTrue(boolean1);
757:       assertFalse(node0.equals((Object)node1));
758:       assertFalse(node1.equals((Object)node0));
759:       assertFalse(boolean1 == boolean0);
760:       assertFalse(node0.isGetterDef());
761:       assertFalse(node0.isDelProp());
762:       assertFalse(node0.isFor());
763:       assertFalse(node0.isEmpty());
764:       assertFalse(node0.isNE());
765:       assertFalse(node0.isIf());
766:       assertFalse(node0.isDebugger());
767:       assertFalse(node0.isIn());
768:       assertEquals(40, node0.getType());
769:       assertFalse(node0.isInc());
770:       assertFalse(node0.isSwitch());
771:       assertFalse(node0.isDefaultCase());
772:       assertEquals(0, node0.getChildCount());
773:       assertFalse(node0.isArrayLit());
774:       assertFalse(node0.isFalse());
775:       assertFalse(node0.isFunction());
776:       assertFalse(node0.isBreak());
777:       assertFalse(node0.isNull());
778:       assertFalse(node0.isName());
779:       assertFalse(node0.isAdd());
780:       assertFalse(node0.isGetProp());
781:       assertFalse(node0.isObjectLit());
782:       assertFalse(node0.isNot());
783:       assertFalse(node0.isWhile());
784:       assertFalse(node0.isTrue());
785:       assertFalse(node0.isVoid());
786:       assertFalse(node0.isReturn());
787:       assertFalse(node0.isCall());
788:       assertFalse(node0.isExprResult());
789:       assertFalse(node0.isComma());
790:       assertFalse(node0.isTypeOf());
791:       assertFalse(node0.hasChildren());
792:       assertFalse(node0.isDec());
793:       assertFalse(node0.isAssign());
794:       assertEquals((-1), node0.getSourcePosition());
795:       assertFalse(node0.isGetElem());
796:       assertFalse(node0.isLabelName());
797:       assertFalse(node0.isAssignAdd());
798:       assertFalse(node0.hasOneChild());
799:       assertFalse(node0.isOr());
800:       assertFalse(node0.isNumber());
801:       assertFalse(node0.isDo());
802:       assertFalse(node0.isAnd());
803:       assertFalse(node0.isNew());
804:       assertFalse(node0.isVar());
805:       assertFalse(node0.isLabel());
806:       assertFalse(node0.isContinue());
807:       assertFalse(node0.isCast());
808:       assertFalse(node0.isThis());
809:       assertFalse(node0.isSetterDef());
810:       assertFalse(node0.isParamList());
811:       assertFalse(node0.isThrow());
812:       assertFalse(node0.isStringKey());
813:       assertEquals((-1), node0.getCharno());
814:       assertFalse(node0.isScript());
815:       assertFalse(node0.isCase());
816:       assertTrue(node0.isString());
817:       assertFalse(node0.isTry());
818:       assertFalse(node0.isInstanceOf());
819:       assertEquals((-1), node0.getLineno());
820:       assertFalse(node0.isBlock());
821:       assertFalse(node0.isHook());
822:       assertFalse(node0.isCatch());
823:       assertFalse(node0.isRegExp());
824:       assertFalse(node0.isWith());
825:       assertFalse(node0.hasMoreThanOneChild());
826:       assertFalse(node1.isGetProp());
827:       assertFalse(node1.isComma());
828:       assertFalse(node1.isThis());
829:       assertFalse(node1.isAnd());
830:       assertFalse(node1.isWith());
831:       assertFalse(node1.isInstanceOf());
832:       assertFalse(node1.isBreak());
833:       assertFalse(node1.isExprResult());
834:       assertEquals((-1), node1.getCharno());
835:       assertFalse(node1.isSwitch());
836:       assertFalse(node1.isHook());
837:       assertFalse(node1.isCase());
838:       assertFalse(node1.isNot());
839:       assertFalse(node1.isObjectLit());
840:       assertFalse(node1.isNumber());
841:       assertFalse(node1.isString());
842:       assertFalse(node1.isScript());
843:       assertFalse(node1.isLabel());
844:       assertFalse(node1.isAssignAdd());
845:       assertFalse(node1.isTypeOf());
846:       assertFalse(node1.isOr());
847:       assertFalse(node1.isDec());
848:       assertFalse(node1.isReturn());
849:       assertTrue(node1.hasOneChild());
850:       assertFalse(node1.isGetElem());
851:       assertFalse(node1.isAssign());
852:       assertFalse(node1.isLabelName());
853:       assertFalse(node1.isDelProp());
854:       assertFalse(node1.isArrayLit());
855:       assertFalse(node1.isNew());
856:       assertFalse(node1.isVoid());
857:       assertFalse(node1.isDefaultCase());
858:       assertFalse(node1.isTrue());
859:       assertFalse(node1.isVar());
860:       assertFalse(node1.isDo());
861:       assertFalse(node1.isAdd());
862:       assertFalse(node1.isEmpty());
863:       assertTrue(node1.isFalse());
864:       assertFalse(node1.isNull());
865:       assertFalse(node1.isParamList());
866:       assertFalse(node1.isStringKey());
867:       assertFalse(node1.isName());
868:       assertFalse(node1.isCall());
869:       assertFalse(node1.isCatch());
870:       assertFalse(node1.isBlock());
871:       assertFalse(node1.isDebugger());
872:       assertFalse(node1.isRegExp());
873:       assertFalse(node1.isTry());
874:       assertFalse(node1.isWhile());
875:       assertFalse(node1.isGetterDef());
876:       assertEquals((-1), node1.getLineno());
877:       assertEquals(1, node1.getChildCount());
878:       assertEquals((-1), node1.getSourcePosition());
879:       assertFalse(node1.isIf());
880:       assertEquals(43, node1.getType());
881:       assertFalse(node1.isFor());
882:       assertFalse(node1.isNE());
883:       assertFalse(node1.isContinue());
884:       assertFalse(node1.hasMoreThanOneChild());
885:       assertFalse(node1.isCast());
886:       assertTrue(node1.hasChildren());
887:       assertFalse(node1.isFunction());
888:       assertFalse(node1.isThrow());
889:       assertFalse(node1.isIn());
890:       assertFalse(node1.isSetterDef());
891:       assertFalse(node1.isInc());
892:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
893:       assertEquals(53, Node.INPUT_ID);
894:       assertEquals(36, Node.QUOTED_PROP);
895:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
896:       assertEquals(43, Node.IS_CONSTANT_NAME);
897:       assertEquals(56, Node.CHANGE_TIME);
898:       assertEquals(37, Node.OPT_ARG_NAME);
899:       assertEquals(48, Node.DIRECTIVES);
900:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
901:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
902:       assertEquals(51, Node.STATIC_SOURCE_FILE);
903:       assertEquals(50, Node.FREE_CALL);
904:       assertEquals(4095, Node.COLUMN_MASK);
905:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
906:       assertEquals(1, Node.DECR_FLAG);
907:       assertEquals(12, Node.COLUMN_BITS);
908:       assertEquals(32, Node.INCRDECR_PROP);
909:       assertEquals(54, Node.SLASH_V);
910:       assertEquals(15, Node.NO_SIDE_EFFECTS);
911:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
912:       assertEquals(30, Node.VAR_ARGS_NAME);
913:       assertEquals(52, Node.LENGTH);
914:       assertEquals(40, Node.ORIGINALNAME_PROP);
915:       assertEquals(57, Node.REFLECTED_OBJECT);
916:       assertEquals(46, Node.IS_NAMESPACE);
917:       assertEquals(49, Node.DIRECT_EVAL);
918:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
919:       assertEquals(39, Node.EMPTY_BLOCK);
920:       assertEquals(47, Node.IS_DISPATCHER);
921:       assertEquals(2, Node.POST_FLAG);
922:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
923:       assertEquals(8, Node.FLAG_NO_THROWS);
924:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
925:       assertEquals(55, Node.INFERRED_FUNCTION);
926:       assertEquals(29, Node.JSDOC_INFO_PROP);
927:       assertEquals(57, Node.LAST_PROP);
928:       assertEquals(57, Node.REFLECTED_OBJECT);
929:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
930:       assertEquals(52, Node.LENGTH);
931:       assertEquals(40, Node.ORIGINALNAME_PROP);
932:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
933:       assertEquals(15, Node.NO_SIDE_EFFECTS);
934:       assertEquals(57, Node.LAST_PROP);
935:       assertEquals(30, Node.VAR_ARGS_NAME);
936:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
937:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
938:       assertEquals(12, Node.COLUMN_BITS);
939:       assertEquals(4095, Node.COLUMN_MASK);
940:       assertEquals(39, Node.EMPTY_BLOCK);
941:       assertEquals(55, Node.INFERRED_FUNCTION);
942:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
943:       assertEquals(56, Node.CHANGE_TIME);
944:       assertEquals(36, Node.QUOTED_PROP);
945:       assertEquals(37, Node.OPT_ARG_NAME);
946:       assertEquals(8, Node.FLAG_NO_THROWS);
947:       assertEquals(48, Node.DIRECTIVES);
948:       assertEquals(49, Node.DIRECT_EVAL);
949:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
950:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
951:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
952:       assertEquals(53, Node.INPUT_ID);
953:       assertEquals(29, Node.JSDOC_INFO_PROP);
954:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
955:       assertEquals(47, Node.IS_DISPATCHER);
956:       assertEquals(2, Node.POST_FLAG);
957:       assertEquals(51, Node.STATIC_SOURCE_FILE);
958:       assertEquals(32, Node.INCRDECR_PROP);
959:       assertEquals(1, Node.DECR_FLAG);
960:       assertEquals(43, Node.IS_CONSTANT_NAME);
961:       assertEquals(50, Node.FREE_CALL);
962:       assertEquals(46, Node.IS_NAMESPACE);
963:       assertEquals(54, Node.SLASH_V);
964:       
965:       boolean boolean2 = node0.isNumber();
966:       assertFalse(boolean2);
967:       assertFalse(node0.equals((Object)node1));
968:       assertFalse(boolean2 == boolean1);
969:       assertTrue(boolean2 == boolean0);
970:       assertFalse(node0.isGetterDef());
971:       assertFalse(node0.isDelProp());
972:       assertFalse(node0.isFor());
973:       assertFalse(node0.isEmpty());
974:       assertFalse(node0.isNE());
975:       assertFalse(node0.isIf());
976:       assertFalse(node0.isDebugger());
977:       assertFalse(node0.isIn());
978:       assertEquals(40, node0.getType());
979:       assertFalse(node0.isInc());
980:       assertFalse(node0.isSwitch());
981:       assertFalse(node0.isDefaultCase());
982:       assertEquals(0, node0.getChildCount());
983:       assertFalse(node0.isArrayLit());
984:       assertFalse(node0.isFalse());
985:       assertFalse(node0.isFunction());
986:       assertFalse(node0.isBreak());
987:       assertFalse(node0.isNull());
988:       assertFalse(node0.isName());
989:       assertFalse(node0.isAdd());
990:       assertFalse(node0.isGetProp());
991:       assertFalse(node0.isObjectLit());
992:       assertFalse(node0.isNot());
993:       assertFalse(node0.isWhile());
994:       assertFalse(node0.isTrue());
995:       assertFalse(node0.isVoid());
996:       assertFalse(node0.isReturn());
997:       assertFalse(node0.isCall());
998:       assertFalse(node0.isExprResult());
999:       assertFalse(node0.isComma());
1000:       assertFalse(node0.isTypeOf());
1001:       assertFalse(node0.hasChildren());
1002:       assertFalse(node0.isDec());
1003:       assertFalse(node0.isAssign());
1004:       assertEquals((-1), node0.getSourcePosition());
1005:       assertFalse(node0.isGetElem());
1006:       assertFalse(node0.isLabelName());
1007:       assertFalse(node0.isAssignAdd());
1008:       assertFalse(node0.hasOneChild());
1009:       assertFalse(node0.isOr());
1010:       assertFalse(node0.isNumber());
1011:       assertFalse(node0.isDo());
1012:       assertFalse(node0.isAnd());
1013:       assertFalse(node0.isNew());
1014:       assertFalse(node0.isVar());
1015:       assertFalse(node0.isLabel());
1016:       assertFalse(node0.isContinue());
1017:       assertFalse(node0.isCast());
1018:       assertFalse(node0.isThis());
1019:       assertFalse(node0.isSetterDef());
1020:       assertFalse(node0.isParamList());
1021:       assertFalse(node0.isThrow());
1022:       assertFalse(node0.isStringKey());
1023:       assertEquals((-1), node0.getCharno());
1024:       assertFalse(node0.isScript());
1025:       assertFalse(node0.isCase());
1026:       assertTrue(node0.isString());
1027:       assertFalse(node0.isTry());
1028:       assertFalse(node0.isInstanceOf());
1029:       assertEquals((-1), node0.getLineno());
1030:       assertFalse(node0.isBlock());
1031:       assertFalse(node0.isHook());
1032:       assertFalse(node0.isCatch());
1033:       assertFalse(node0.isRegExp());
1034:       assertFalse(node0.isWith());
1035:       assertFalse(node0.hasMoreThanOneChild());
1036:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1037:       assertEquals(53, Node.INPUT_ID);
1038:       assertEquals(36, Node.QUOTED_PROP);
1039:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1040:       assertEquals(43, Node.IS_CONSTANT_NAME);
1041:       assertEquals(56, Node.CHANGE_TIME);
1042:       assertEquals(37, Node.OPT_ARG_NAME);
1043:       assertEquals(48, Node.DIRECTIVES);
1044:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1045:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1046:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1047:       assertEquals(50, Node.FREE_CALL);
1048:       assertEquals(4095, Node.COLUMN_MASK);
1049:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1050:       assertEquals(1, Node.DECR_FLAG);
1051:       assertEquals(12, Node.COLUMN_BITS);
1052:       assertEquals(32, Node.INCRDECR_PROP);
1053:       assertEquals(54, Node.SLASH_V);
1054:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1055:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1056:       assertEquals(30, Node.VAR_ARGS_NAME);
1057:       assertEquals(52, Node.LENGTH);
1058:       assertEquals(40, Node.ORIGINALNAME_PROP);
1059:       assertEquals(57, Node.REFLECTED_OBJECT);
1060:       assertEquals(46, Node.IS_NAMESPACE);
1061:       assertEquals(49, Node.DIRECT_EVAL);
1062:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1063:       assertEquals(39, Node.EMPTY_BLOCK);
1064:       assertEquals(47, Node.IS_DISPATCHER);
1065:       assertEquals(2, Node.POST_FLAG);
1066:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1067:       assertEquals(8, Node.FLAG_NO_THROWS);
1068:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1069:       assertEquals(55, Node.INFERRED_FUNCTION);
1070:       assertEquals(29, Node.JSDOC_INFO_PROP);
1071:       assertEquals(57, Node.LAST_PROP);
1072:   }
1073: }
RegularFileObject[/tmp/EvoSuite_131_1629223115704/com/google/javascript/rhino/Node_131_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:58:35 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_131_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_131_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_131_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
261:       "com.google.common.base.Joiner",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.jstype.ArrowType",
313:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
314:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
315:       "com.google.javascript.rhino.jstype.InstanceObjectType",
316:       "com.google.javascript.rhino.jstype.Property",
317:       "com.google.common.collect.Lists",
318:       "com.google.javascript.rhino.jstype.NoObjectType",
319:       "com.google.javascript.rhino.jstype.NoType",
320:       "com.google.javascript.rhino.jstype.NoResolvedType",
321:       "com.google.common.collect.SingletonImmutableList",
322:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
323:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
324:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
325:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
326:       "com.google.javascript.rhino.jstype.UnionType",
327:       "com.google.javascript.rhino.jstype.FunctionBuilder",
328:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
329:       "com.google.javascript.rhino.SimpleErrorReporter",
330:       "com.google.javascript.rhino.jstype.EnumType",
331:       "com.google.javascript.rhino.jstype.EnumElementType",
332:       "com.google.javascript.rhino.JSDocInfo",
333:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
334:       "com.google.javascript.rhino.JSTypeExpression",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.InputId",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.common.collect.AbstractIndexedListIterator",
341:       "com.google.common.collect.Iterators$11",
342:       "com.google.javascript.rhino.Node$AncestorIterable$1",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
350:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
351:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
352:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
353:       "com.google.common.collect.Iterables",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
356:       "com.google.common.collect.ImmutableSet",
357:       "com.google.common.collect.EmptyImmutableSet",
358:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
359:       "com.google.javascript.rhino.jstype.NamedType",
360:       "com.google.javascript.rhino.jstype.TernaryValue",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.JSDocInfo$Marker",
366:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
367:       "com.google.common.collect.Platform"
368:     );
369:   }
370: }

[MASTER] 17:58:35.900 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("H");
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertNotNull(node0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);

Object object0 = node0.getProp(4095);
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertNull(object0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);

boolean boolean0 = node0.isVoid();
assertFalse(boolean0);
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);

Node node1 = new Node(43, node0, node0);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertTrue(node1.isFalse());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getLineno());
assertEquals(1, node1.getChildCount());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertEquals(43, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertTrue(node1.hasChildren());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertNotNull(node1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);

node0.setString("");
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);

boolean boolean1 = node1.isFalse();
assertTrue(boolean1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isTypeOf());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertTrue(node1.isFalse());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getLineno());
assertEquals(1, node1.getChildCount());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isIf());
assertEquals(43, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertTrue(node1.hasChildren());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

boolean boolean2 = node0.isNumber();
assertFalse(boolean2);
assertFalse(node0.equals((Object)node1));
assertFalse(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);


[MASTER] 17:59:01.699 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:02.125 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:02.488 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:02.837 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:03.145 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:04.525 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:04.876 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:05.193 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:05.425 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:05.660 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:05.927 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:06.148 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:06.448 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:06.851 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:07.071 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:07.373 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:07.647 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:08.063 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:08.437 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:08.833 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:09.427 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:09.479 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/14
* Done!

* Computation finished
