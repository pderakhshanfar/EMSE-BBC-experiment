* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 8152
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 1395637921
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:49:00.594 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:53:56.215 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 605s and 338 generations, 163679 statements, best individual has fitness: 3086.0
* Minimizing test suite
[MASTER] 18:00:24.518 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 795
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 85%
* Total number of goals: 714
* Number of covered goals: 606
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 103
* Number of covered goals: 103
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 84%
* Total number of goals: 530
* Number of covered goals: 446
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 45%
* Total number of goals: 4536
* Number of covered goals: 2026
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 79%
* Total number of goals: 714
* Number of covered goals: 562
* Generated 718 tests with total length 10002
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:01:30.024 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.67575% of time used, but only 44/718 tests minimized), falling back to using all assertions
[MASTER] 18:01:49.560 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 18:01:59.572 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 10 seconds more than allowed.
[MASTER] 18:02:17.206 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_97_1629223337072/com/google/javascript/rhino/Node_97_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_97_1629223337072/com/google/javascript/rhino/Node_97_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:17.206 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:17.206 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:17.210 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 518
[MASTER] 18:02:17.211 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_97_1629223337072/com/google/javascript/rhino/Node_97_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:17 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.EnumElementType;
14: import com.google.javascript.rhino.jstype.EnumType;
15: import com.google.javascript.rhino.jstype.FunctionType;
16: import com.google.javascript.rhino.jstype.JSType;
17: import com.google.javascript.rhino.jstype.JSTypeRegistry;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class Node_97_tmp__ESTest extends Node_97_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       Node node0 = Node.newString("");
28:       assertFalse(node0.isWith());
29:       assertFalse(node0.isNot());
30:       assertFalse(node0.isExprResult());
31:       assertFalse(node0.isScript());
32:       assertFalse(node0.isObjectLit());
33:       assertFalse(node0.isAnd());
34:       assertFalse(node0.isDec());
35:       assertFalse(node0.isTypeOf());
36:       assertFalse(node0.isNumber());
37:       assertEquals((-1), node0.getSourcePosition());
38:       assertFalse(node0.isBreak());
39:       assertFalse(node0.hasChildren());
40:       assertFalse(node0.isComma());
41:       assertFalse(node0.isAssign());
42:       assertFalse(node0.isGetElem());
43:       assertFalse(node0.isGetProp());
44:       assertFalse(node0.isInstanceOf());
45:       assertFalse(node0.hasOneChild());
46:       assertFalse(node0.isHook());
47:       assertFalse(node0.hasMoreThanOneChild());
48:       assertFalse(node0.isWhile());
49:       assertFalse(node0.isThis());
50:       assertFalse(node0.isReturn());
51:       assertFalse(node0.isSwitch());
52:       assertFalse(node0.isDo());
53:       assertFalse(node0.isCase());
54:       assertFalse(node0.isNew());
55:       assertFalse(node0.isAdd());
56:       assertFalse(node0.isOr());
57:       assertFalse(node0.isStringKey());
58:       assertFalse(node0.isName());
59:       assertEquals((-1), node0.getCharno());
60:       assertFalse(node0.isNull());
61:       assertFalse(node0.isLabelName());
62:       assertFalse(node0.isEmpty());
63:       assertEquals(0, node0.getChildCount());
64:       assertFalse(node0.isLabel());
65:       assertFalse(node0.isAssignAdd());
66:       assertFalse(node0.isVar());
67:       assertFalse(node0.isDefaultCase());
68:       assertFalse(node0.isFunction());
69:       assertFalse(node0.isRegExp());
70:       assertFalse(node0.isVoid());
71:       assertFalse(node0.isCatch());
72:       assertFalse(node0.isArrayLit());
73:       assertFalse(node0.isDebugger());
74:       assertFalse(node0.isTrue());
75:       assertFalse(node0.isParamList());
76:       assertFalse(node0.isIf());
77:       assertFalse(node0.isDelProp());
78:       assertFalse(node0.isGetterDef());
79:       assertFalse(node0.isCall());
80:       assertFalse(node0.isTry());
81:       assertFalse(node0.isBlock());
82:       assertTrue(node0.isString());
83:       assertFalse(node0.isFor());
84:       assertFalse(node0.isContinue());
85:       assertFalse(node0.isInc());
86:       assertFalse(node0.isIn());
87:       assertEquals((-1), node0.getLineno());
88:       assertFalse(node0.isNE());
89:       assertFalse(node0.isFalse());
90:       assertFalse(node0.isSetterDef());
91:       assertFalse(node0.isCast());
92:       assertEquals(40, node0.getType());
93:       assertFalse(node0.isThrow());
94:       assertNotNull(node0);
95:       assertEquals(30, Node.VAR_ARGS_NAME);
96:       assertEquals(49, Node.DIRECT_EVAL);
97:       assertEquals(57, Node.LAST_PROP);
98:       assertEquals(1, Node.DECR_FLAG);
99:       assertEquals(51, Node.STATIC_SOURCE_FILE);
100:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
101:       assertEquals(54, Node.SLASH_V);
102:       assertEquals(12, Node.COLUMN_BITS);
103:       assertEquals(46, Node.IS_NAMESPACE);
104:       assertEquals(37, Node.OPT_ARG_NAME);
105:       assertEquals(40, Node.ORIGINALNAME_PROP);
106:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
107:       assertEquals(29, Node.JSDOC_INFO_PROP);
108:       assertEquals(2, Node.POST_FLAG);
109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
110:       assertEquals(56, Node.CHANGE_TIME);
111:       assertEquals(47, Node.IS_DISPATCHER);
112:       assertEquals(57, Node.REFLECTED_OBJECT);
113:       assertEquals(52, Node.LENGTH);
114:       assertEquals(55, Node.INFERRED_FUNCTION);
115:       assertEquals(8, Node.FLAG_NO_THROWS);
116:       assertEquals(39, Node.EMPTY_BLOCK);
117:       assertEquals(15, Node.NO_SIDE_EFFECTS);
118:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
119:       assertEquals(53, Node.INPUT_ID);
120:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
121:       assertEquals(43, Node.IS_CONSTANT_NAME);
122:       assertEquals(36, Node.QUOTED_PROP);
123:       assertEquals(48, Node.DIRECTIVES);
124:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
125:       assertEquals(4095, Node.COLUMN_MASK);
126:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
127:       assertEquals(50, Node.FREE_CALL);
128:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
129:       assertEquals(32, Node.INCRDECR_PROP);
130:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
131:       
132:       Node node1 = Node.newNumber(1.0, 46, 4095);
133:       assertFalse(node1.isInstanceOf());
134:       assertFalse(node1.isObjectLit());
135:       assertFalse(node1.isThis());
136:       assertFalse(node1.isComma());
137:       assertFalse(node1.isWith());
138:       assertFalse(node1.isFalse());
139:       assertFalse(node1.isAnd());
140:       assertFalse(node1.isExprResult());
141:       assertFalse(node1.isBreak());
142:       assertEquals(4095, node1.getCharno());
143:       assertFalse(node1.isHook());
144:       assertFalse(node1.isNot());
145:       assertFalse(node1.isString());
146:       assertFalse(node1.isScript());
147:       assertFalse(node1.isGetProp());
148:       assertFalse(node1.isCase());
149:       assertTrue(node1.isNumber());
150:       assertFalse(node1.hasOneChild());
151:       assertFalse(node1.isIn());
152:       assertFalse(node1.hasMoreThanOneChild());
153:       assertFalse(node1.isNE());
154:       assertFalse(node1.isContinue());
155:       assertFalse(node1.isIf());
156:       assertFalse(node1.isCast());
157:       assertFalse(node1.isFunction());
158:       assertFalse(node1.isThrow());
159:       assertFalse(node1.isInc());
160:       assertFalse(node1.isSetterDef());
161:       assertEquals(192511, node1.getSourcePosition());
162:       assertFalse(node1.isParamList());
163:       assertFalse(node1.isNull());
164:       assertEquals(0, node1.getChildCount());
165:       assertFalse(node1.isName());
166:       assertFalse(node1.isCatch());
167:       assertFalse(node1.isStringKey());
168:       assertFalse(node1.isCall());
169:       assertFalse(node1.isVoid());
170:       assertFalse(node1.isTry());
171:       assertFalse(node1.isBlock());
172:       assertFalse(node1.isRegExp());
173:       assertFalse(node1.isDebugger());
174:       assertFalse(node1.isFor());
175:       assertEquals(39, node1.getType());
176:       assertFalse(node1.isWhile());
177:       assertEquals(46, node1.getLineno());
178:       assertFalse(node1.isOr());
179:       assertFalse(node1.isLabel());
180:       assertFalse(node1.isAssignAdd());
181:       assertFalse(node1.isReturn());
182:       assertFalse(node1.isTypeOf());
183:       assertFalse(node1.isGetterDef());
184:       assertFalse(node1.hasChildren());
185:       assertFalse(node1.isDec());
186:       assertFalse(node1.isLabelName());
187:       assertFalse(node1.isAssign());
188:       assertFalse(node1.isGetElem());
189:       assertFalse(node1.isArrayLit());
190:       assertFalse(node1.isSwitch());
191:       assertFalse(node1.isDelProp());
192:       assertFalse(node1.isAdd());
193:       assertFalse(node1.isVar());
194:       assertFalse(node1.isTrue());
195:       assertFalse(node1.isEmpty());
196:       assertFalse(node1.isDo());
197:       assertFalse(node1.isDefaultCase());
198:       assertFalse(node1.isNew());
199:       assertNotNull(node1);
200:       assertFalse(node1.equals((Object)node0));
201:       assertEquals(37, Node.OPT_ARG_NAME);
202:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
203:       assertEquals(56, Node.CHANGE_TIME);
204:       assertEquals(32, Node.INCRDECR_PROP);
205:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
206:       assertEquals(12, Node.COLUMN_BITS);
207:       assertEquals(47, Node.IS_DISPATCHER);
208:       assertEquals(2, Node.POST_FLAG);
209:       assertEquals(30, Node.VAR_ARGS_NAME);
210:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
211:       assertEquals(53, Node.INPUT_ID);
212:       assertEquals(15, Node.NO_SIDE_EFFECTS);
213:       assertEquals(57, Node.LAST_PROP);
214:       assertEquals(49, Node.DIRECT_EVAL);
215:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
216:       assertEquals(29, Node.JSDOC_INFO_PROP);
217:       assertEquals(57, Node.REFLECTED_OBJECT);
218:       assertEquals(55, Node.INFERRED_FUNCTION);
219:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
220:       assertEquals(52, Node.LENGTH);
221:       assertEquals(36, Node.QUOTED_PROP);
222:       assertEquals(8, Node.FLAG_NO_THROWS);
223:       assertEquals(39, Node.EMPTY_BLOCK);
224:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
225:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
226:       assertEquals(48, Node.DIRECTIVES);
227:       assertEquals(40, Node.ORIGINALNAME_PROP);
228:       assertEquals(4095, Node.COLUMN_MASK);
229:       assertEquals(54, Node.SLASH_V);
230:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
231:       assertEquals(43, Node.IS_CONSTANT_NAME);
232:       assertEquals(1, Node.DECR_FLAG);
233:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
234:       assertEquals(46, Node.IS_NAMESPACE);
235:       assertEquals(51, Node.STATIC_SOURCE_FILE);
236:       assertEquals(50, Node.FREE_CALL);
237:       
238:       node0.removeProp(0);
239:       assertFalse(node0.isWith());
240:       assertFalse(node0.isNot());
241:       assertFalse(node0.isExprResult());
242:       assertFalse(node0.isScript());
243:       assertFalse(node0.isObjectLit());
244:       assertFalse(node0.isAnd());
245:       assertFalse(node0.isDec());
246:       assertFalse(node0.isTypeOf());
247:       assertFalse(node0.isNumber());
248:       assertEquals((-1), node0.getSourcePosition());
249:       assertFalse(node0.isBreak());
250:       assertFalse(node0.hasChildren());
251:       assertFalse(node0.isComma());
252:       assertFalse(node0.isAssign());
253:       assertFalse(node0.isGetElem());
254:       assertFalse(node0.isGetProp());
255:       assertFalse(node0.isInstanceOf());
256:       assertFalse(node0.hasOneChild());
257:       assertFalse(node0.isHook());
258:       assertFalse(node0.hasMoreThanOneChild());
259:       assertFalse(node0.isWhile());
260:       assertFalse(node0.isThis());
261:       assertFalse(node0.isReturn());
262:       assertFalse(node0.isSwitch());
263:       assertFalse(node0.isDo());
264:       assertFalse(node0.isCase());
265:       assertFalse(node0.isNew());
266:       assertFalse(node0.isAdd());
267:       assertFalse(node0.isOr());
268:       assertFalse(node0.isStringKey());
269:       assertFalse(node0.isName());
270:       assertEquals((-1), node0.getCharno());
271:       assertFalse(node0.isNull());
272:       assertFalse(node0.isLabelName());
273:       assertFalse(node0.isEmpty());
274:       assertEquals(0, node0.getChildCount());
275:       assertFalse(node0.isLabel());
276:       assertFalse(node0.isAssignAdd());
277:       assertFalse(node0.isVar());
278:       assertFalse(node0.isDefaultCase());
279:       assertFalse(node0.isFunction());
280:       assertFalse(node0.isRegExp());
281:       assertFalse(node0.isVoid());
282:       assertFalse(node0.isCatch());
283:       assertFalse(node0.isArrayLit());
284:       assertFalse(node0.isDebugger());
285:       assertFalse(node0.isTrue());
286:       assertFalse(node0.isParamList());
287:       assertFalse(node0.isIf());
288:       assertFalse(node0.isDelProp());
289:       assertFalse(node0.isGetterDef());
290:       assertFalse(node0.isCall());
291:       assertFalse(node0.isTry());
292:       assertFalse(node0.isBlock());
293:       assertTrue(node0.isString());
294:       assertFalse(node0.isFor());
295:       assertFalse(node0.isContinue());
296:       assertFalse(node0.isInc());
297:       assertFalse(node0.isIn());
298:       assertEquals((-1), node0.getLineno());
299:       assertFalse(node0.isNE());
300:       assertFalse(node0.isFalse());
301:       assertFalse(node0.isSetterDef());
302:       assertFalse(node0.isCast());
303:       assertEquals(40, node0.getType());
304:       assertFalse(node0.isThrow());
305:       assertFalse(node0.equals((Object)node1));
306:       assertEquals(30, Node.VAR_ARGS_NAME);
307:       assertEquals(49, Node.DIRECT_EVAL);
308:       assertEquals(57, Node.LAST_PROP);
309:       assertEquals(1, Node.DECR_FLAG);
310:       assertEquals(51, Node.STATIC_SOURCE_FILE);
311:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
312:       assertEquals(54, Node.SLASH_V);
313:       assertEquals(12, Node.COLUMN_BITS);
314:       assertEquals(46, Node.IS_NAMESPACE);
315:       assertEquals(37, Node.OPT_ARG_NAME);
316:       assertEquals(40, Node.ORIGINALNAME_PROP);
317:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
318:       assertEquals(29, Node.JSDOC_INFO_PROP);
319:       assertEquals(2, Node.POST_FLAG);
320:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
321:       assertEquals(56, Node.CHANGE_TIME);
322:       assertEquals(47, Node.IS_DISPATCHER);
323:       assertEquals(57, Node.REFLECTED_OBJECT);
324:       assertEquals(52, Node.LENGTH);
325:       assertEquals(55, Node.INFERRED_FUNCTION);
326:       assertEquals(8, Node.FLAG_NO_THROWS);
327:       assertEquals(39, Node.EMPTY_BLOCK);
328:       assertEquals(15, Node.NO_SIDE_EFFECTS);
329:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
330:       assertEquals(53, Node.INPUT_ID);
331:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
332:       assertEquals(43, Node.IS_CONSTANT_NAME);
333:       assertEquals(36, Node.QUOTED_PROP);
334:       assertEquals(48, Node.DIRECTIVES);
335:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
336:       assertEquals(4095, Node.COLUMN_MASK);
337:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
338:       assertEquals(50, Node.FREE_CALL);
339:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
340:       assertEquals(32, Node.INCRDECR_PROP);
341:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
342:       
343:       int int0 = node0.getChangeTime();
344:       assertFalse(node0.isWith());
345:       assertFalse(node0.isNot());
346:       assertFalse(node0.isExprResult());
347:       assertFalse(node0.isScript());
348:       assertFalse(node0.isObjectLit());
349:       assertFalse(node0.isAnd());
350:       assertFalse(node0.isDec());
351:       assertFalse(node0.isTypeOf());
352:       assertFalse(node0.isNumber());
353:       assertEquals((-1), node0.getSourcePosition());
354:       assertFalse(node0.isBreak());
355:       assertFalse(node0.hasChildren());
356:       assertFalse(node0.isComma());
357:       assertFalse(node0.isAssign());
358:       assertFalse(node0.isGetElem());
359:       assertFalse(node0.isGetProp());
360:       assertFalse(node0.isInstanceOf());
361:       assertFalse(node0.hasOneChild());
362:       assertFalse(node0.isHook());
363:       assertFalse(node0.hasMoreThanOneChild());
364:       assertFalse(node0.isWhile());
365:       assertFalse(node0.isThis());
366:       assertFalse(node0.isReturn());
367:       assertFalse(node0.isSwitch());
368:       assertFalse(node0.isDo());
369:       assertFalse(node0.isCase());
370:       assertFalse(node0.isNew());
371:       assertFalse(node0.isAdd());
372:       assertFalse(node0.isOr());
373:       assertFalse(node0.isStringKey());
374:       assertFalse(node0.isName());
375:       assertEquals((-1), node0.getCharno());
376:       assertFalse(node0.isNull());
377:       assertFalse(node0.isLabelName());
378:       assertFalse(node0.isEmpty());
379:       assertEquals(0, node0.getChildCount());
380:       assertFalse(node0.isLabel());
381:       assertFalse(node0.isAssignAdd());
382:       assertFalse(node0.isVar());
383:       assertFalse(node0.isDefaultCase());
384:       assertFalse(node0.isFunction());
385:       assertFalse(node0.isRegExp());
386:       assertFalse(node0.isVoid());
387:       assertFalse(node0.isCatch());
388:       assertFalse(node0.isArrayLit());
389:       assertFalse(node0.isDebugger());
390:       assertFalse(node0.isTrue());
391:       assertFalse(node0.isParamList());
392:       assertFalse(node0.isIf());
393:       assertFalse(node0.isDelProp());
394:       assertFalse(node0.isGetterDef());
395:       assertFalse(node0.isCall());
396:       assertFalse(node0.isTry());
397:       assertFalse(node0.isBlock());
398:       assertTrue(node0.isString());
399:       assertFalse(node0.isFor());
400:       assertFalse(node0.isContinue());
401:       assertFalse(node0.isInc());
402:       assertFalse(node0.isIn());
403:       assertEquals((-1), node0.getLineno());
404:       assertFalse(node0.isNE());
405:       assertFalse(node0.isFalse());
406:       assertFalse(node0.isSetterDef());
407:       assertFalse(node0.isCast());
408:       assertEquals(40, node0.getType());
409:       assertFalse(node0.isThrow());
410:       assertEquals(0, int0);
411:       assertFalse(node0.equals((Object)node1));
412:       assertEquals(30, Node.VAR_ARGS_NAME);
413:       assertEquals(49, Node.DIRECT_EVAL);
414:       assertEquals(57, Node.LAST_PROP);
415:       assertEquals(1, Node.DECR_FLAG);
416:       assertEquals(51, Node.STATIC_SOURCE_FILE);
417:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
418:       assertEquals(54, Node.SLASH_V);
419:       assertEquals(12, Node.COLUMN_BITS);
420:       assertEquals(46, Node.IS_NAMESPACE);
421:       assertEquals(37, Node.OPT_ARG_NAME);
422:       assertEquals(40, Node.ORIGINALNAME_PROP);
423:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
424:       assertEquals(29, Node.JSDOC_INFO_PROP);
425:       assertEquals(2, Node.POST_FLAG);
426:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
427:       assertEquals(56, Node.CHANGE_TIME);
428:       assertEquals(47, Node.IS_DISPATCHER);
429:       assertEquals(57, Node.REFLECTED_OBJECT);
430:       assertEquals(52, Node.LENGTH);
431:       assertEquals(55, Node.INFERRED_FUNCTION);
432:       assertEquals(8, Node.FLAG_NO_THROWS);
433:       assertEquals(39, Node.EMPTY_BLOCK);
434:       assertEquals(15, Node.NO_SIDE_EFFECTS);
435:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
436:       assertEquals(53, Node.INPUT_ID);
437:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
438:       assertEquals(43, Node.IS_CONSTANT_NAME);
439:       assertEquals(36, Node.QUOTED_PROP);
440:       assertEquals(48, Node.DIRECTIVES);
441:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
442:       assertEquals(4095, Node.COLUMN_MASK);
443:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
444:       assertEquals(50, Node.FREE_CALL);
445:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
446:       assertEquals(32, Node.INCRDECR_PROP);
447:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
448:       
449:       Iterable<Node> iterable0 = node1.children();
450:       assertFalse(node1.isInstanceOf());
451:       assertFalse(node1.isObjectLit());
452:       assertFalse(node1.isThis());
453:       assertFalse(node1.isComma());
454:       assertFalse(node1.isWith());
455:       assertFalse(node1.isFalse());
456:       assertFalse(node1.isAnd());
457:       assertFalse(node1.isExprResult());
458:       assertFalse(node1.isBreak());
459:       assertEquals(4095, node1.getCharno());
460:       assertFalse(node1.isHook());
461:       assertFalse(node1.isNot());
462:       assertFalse(node1.isString());
463:       assertFalse(node1.isScript());
464:       assertFalse(node1.isGetProp());
465:       assertFalse(node1.isCase());
466:       assertTrue(node1.isNumber());
467:       assertFalse(node1.hasOneChild());
468:       assertFalse(node1.isIn());
469:       assertFalse(node1.hasMoreThanOneChild());
470:       assertFalse(node1.isNE());
471:       assertFalse(node1.isContinue());
472:       assertFalse(node1.isIf());
473:       assertFalse(node1.isCast());
474:       assertFalse(node1.isFunction());
475:       assertFalse(node1.isThrow());
476:       assertFalse(node1.isInc());
477:       assertFalse(node1.isSetterDef());
478:       assertEquals(192511, node1.getSourcePosition());
479:       assertFalse(node1.isParamList());
480:       assertFalse(node1.isNull());
481:       assertEquals(0, node1.getChildCount());
482:       assertFalse(node1.isName());
483:       assertFalse(node1.isCatch());
484:       assertFalse(node1.isStringKey());
485:       assertFalse(node1.isCall());
486:       assertFalse(node1.isVoid());
487:       assertFalse(node1.isTry());
488:       assertFalse(node1.isBlock());
489:       assertFalse(node1.isRegExp());
490:       assertFalse(node1.isDebugger());
491:       assertFalse(node1.isFor());
492:       assertEquals(39, node1.getType());
493:       assertFalse(node1.isWhile());
494:       assertEquals(46, node1.getLineno());
495:       assertFalse(node1.isOr());
496:       assertFalse(node1.isLabel());
497:       assertFalse(node1.isAssignAdd());
498:       assertFalse(node1.isReturn());
499:       assertFalse(node1.isTypeOf());
500:       assertFalse(node1.isGetterDef());
501:       assertFalse(node1.hasChildren());
502:       assertFalse(node1.isDec());
503:       assertFalse(node1.isLabelName());
504:       assertFalse(node1.isAssign());
505:       assertFalse(node1.isGetElem());
506:       assertFalse(node1.isArrayLit());
507:       assertFalse(node1.isSwitch());
508:       assertFalse(node1.isDelProp());
509:       assertFalse(node1.isAdd());
510:       assertFalse(node1.isVar());
511:       assertFalse(node1.isTrue());
512:       assertFalse(node1.isEmpty());
513:       assertFalse(node1.isDo());
514:       assertFalse(node1.isDefaultCase());
515:       assertFalse(node1.isNew());
516:       assertNotNull(iterable0);
517:       assertFalse(node1.equals((Object)node0));
518:       assertFalse(iterable0.contains(node0));
519:       assertEquals(37, Node.OPT_ARG_NAME);
520:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
521:       assertEquals(56, Node.CHANGE_TIME);
522:       assertEquals(32, Node.INCRDECR_PROP);
523:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
524:       assertEquals(12, Node.COLUMN_BITS);
525:       assertEquals(47, Node.IS_DISPATCHER);
526:       assertEquals(2, Node.POST_FLAG);
527:       assertEquals(30, Node.VAR_ARGS_NAME);
528:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
529:       assertEquals(53, Node.INPUT_ID);
530:       assertEquals(15, Node.NO_SIDE_EFFECTS);
531:       assertEquals(57, Node.LAST_PROP);
532:       assertEquals(49, Node.DIRECT_EVAL);
533:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
534:       assertEquals(29, Node.JSDOC_INFO_PROP);
535:       assertEquals(57, Node.REFLECTED_OBJECT);
536:       assertEquals(55, Node.INFERRED_FUNCTION);
537:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
538:       assertEquals(52, Node.LENGTH);
539:       assertEquals(36, Node.QUOTED_PROP);
540:       assertEquals(8, Node.FLAG_NO_THROWS);
541:       assertEquals(39, Node.EMPTY_BLOCK);
542:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
543:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
544:       assertEquals(48, Node.DIRECTIVES);
545:       assertEquals(40, Node.ORIGINALNAME_PROP);
546:       assertEquals(4095, Node.COLUMN_MASK);
547:       assertEquals(54, Node.SLASH_V);
548:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
549:       assertEquals(43, Node.IS_CONSTANT_NAME);
550:       assertEquals(1, Node.DECR_FLAG);
551:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
552:       assertEquals(46, Node.IS_NAMESPACE);
553:       assertEquals(51, Node.STATIC_SOURCE_FILE);
554:       assertEquals(50, Node.FREE_CALL);
555:       
556:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
557:       assertNotNull(simpleErrorReporter0);
558:       
559:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
560:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
561:       assertNotNull(jSTypeRegistry0);
562:       
563:       JSType[] jSTypeArray0 = new JSType[1];
564:       // Undeclared exception!
565:       try { 
566:         jSTypeRegistry0.createEnumType((String) null, node1, (JSType) null);
567:         fail("Expecting exception: NullPointerException");
568:       
569:       } catch(NullPointerException e) {
570:          //
571:          // no message in exception (getMessage() returned null)
572:          //
573:          verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
574:       }
575:   }
576: }
RegularFileObject[/tmp/EvoSuite_97_1629223337072/com/google/javascript/rhino/Node_97_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:17 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_97_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_97_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.common.collect.AbstractMapBasedMultimap$1",
120:       "com.google.common.collect.AbstractMapBasedMultimap$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.common.collect.AbstractMultimap$Values",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMultimap$Entries",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.Multimaps$Entries",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_97_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.SimpleErrorReporter",
268:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
269:       "com.google.common.base.Joiner",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
299:       "com.google.javascript.rhino.jstype.JSType$1",
300:       "com.google.javascript.rhino.jstype.JSType",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.JSDocInfo",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.jstype.JSType$TypePair",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.base.Objects",
350:       "com.google.javascript.rhino.jstype.TemplatizedType",
351:       "com.google.javascript.rhino.InputId",
352:       "com.google.javascript.rhino.jstype.NamedType",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.common.collect.AbstractIndexedListIterator",
357:       "com.google.common.collect.Iterators$11",
358:       "com.google.common.collect.ImmutableSet",
359:       "com.google.common.collect.EmptyImmutableSet",
360:       "com.google.common.collect.Platform",
361:       "com.google.common.collect.Iterables",
362:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
365:       "com.google.javascript.rhino.JSDocInfo$Marker",
366:       "com.google.common.collect.Iterators$12",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
371:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
372:     );
373:   }
374: }

[MASTER] 18:02:17.220 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertNotNull(node0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node node1 = Node.newNumber(1.0, 46, 4095);
assertFalse(node1.isInstanceOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNE());
assertFalse(node1.isContinue());
assertFalse(node1.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertEquals(192511, node1.getSourcePosition());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertEquals(46, node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetterDef());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

node0.removeProp(0);
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.equals((Object)node1));
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

int int0 = node0.getChangeTime();
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertEquals(0, int0);
assertFalse(node0.equals((Object)node1));
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.isInstanceOf());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertEquals(4095, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNE());
assertFalse(node1.isContinue());
assertFalse(node1.isIf());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertEquals(192511, node1.getSourcePosition());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertEquals(46, node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetterDef());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node0));
assertFalse(iterable0.contains(node0));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

JSType[] jSTypeArray0 = new JSType[1];
jSTypeRegistry0.createEnumType((String) null, node1, (JSType) null);

[MASTER] 18:02:19.101 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_109_1629223339010/com/google/javascript/rhino/Node_109_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_109_1629223339010/com/google/javascript/rhino/Node_109_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:19.101 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:19.101 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:19.102 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 371
[MASTER] 18:02:19.103 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_109_1629223339010/com/google/javascript/rhino/Node_109_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:19 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSType;
13: import com.google.javascript.rhino.jstype.JSTypeNative;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_109_tmp__ESTest extends Node_109_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
25:       assertNotNull(simpleErrorReporter0);
26:       
27:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
28:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
29:       assertNotNull(jSTypeRegistry0);
30:       
31:       JSType[] jSTypeArray0 = new JSType[0];
32:       Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
33:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
34:       assertFalse(node0.isHook());
35:       assertFalse(node0.isFalse());
36:       assertFalse(node0.isInc());
37:       assertFalse(node0.isBreak());
38:       assertFalse(node0.isString());
39:       assertFalse(node0.isSwitch());
40:       assertEquals(83, node0.getType());
41:       assertEquals((-1), node0.getCharno());
42:       assertFalse(node0.isInstanceOf());
43:       assertTrue(node0.isParamList());
44:       assertFalse(node0.isObjectLit());
45:       assertFalse(node0.isGetProp());
46:       assertFalse(node0.isCase());
47:       assertFalse(node0.isWith());
48:       assertFalse(node0.isComma());
49:       assertFalse(node0.isFor());
50:       assertFalse(node0.isThis());
51:       assertFalse(node0.hasOneChild());
52:       assertFalse(node0.isArrayLit());
53:       assertFalse(node0.isTry());
54:       assertFalse(node0.isVoid());
55:       assertFalse(node0.isEmpty());
56:       assertFalse(node0.isScript());
57:       assertFalse(node0.isExprResult());
58:       assertFalse(node0.isGetElem());
59:       assertFalse(node0.isNumber());
60:       assertFalse(node0.isLabelName());
61:       assertFalse(node0.isDelProp());
62:       assertFalse(node0.isGetterDef());
63:       assertFalse(node0.isTrue());
64:       assertEquals(0, node0.getChildCount());
65:       assertFalse(node0.isOr());
66:       assertFalse(node0.isAssignAdd());
67:       assertFalse(node0.isDefaultCase());
68:       assertFalse(node0.isDo());
69:       assertFalse(node0.isLabel());
70:       assertFalse(node0.isVar());
71:       assertFalse(node0.isNew());
72:       assertFalse(node0.isCall());
73:       assertFalse(node0.isAdd());
74:       assertFalse(node0.isName());
75:       assertFalse(node0.isStringKey());
76:       assertFalse(node0.isNull());
77:       assertEquals((-1), node0.getLineno());
78:       assertFalse(node0.hasMoreThanOneChild());
79:       assertFalse(node0.isCatch());
80:       assertFalse(node0.hasChildren());
81:       assertFalse(node0.isDec());
82:       assertFalse(node0.isWhile());
83:       assertFalse(node0.isAssign());
84:       assertFalse(node0.isRegExp());
85:       assertFalse(node0.isTypeOf());
86:       assertFalse(node0.isBlock());
87:       assertFalse(node0.isReturn());
88:       assertFalse(node0.isCast());
89:       assertFalse(node0.isIf());
90:       assertEquals((-1), node0.getSourcePosition());
91:       assertFalse(node0.isNot());
92:       assertFalse(node0.isDebugger());
93:       assertFalse(node0.isAnd());
94:       assertFalse(node0.isNE());
95:       assertFalse(node0.isIn());
96:       assertFalse(node0.isContinue());
97:       assertFalse(node0.isSetterDef());
98:       assertFalse(node0.isFunction());
99:       assertFalse(node0.isThrow());
100:       assertNotNull(node0);
101:       assertEquals(0, jSTypeArray0.length);
102:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
103:       assertEquals(43, Node.IS_CONSTANT_NAME);
104:       assertEquals(36, Node.QUOTED_PROP);
105:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
106:       assertEquals(4095, Node.COLUMN_MASK);
107:       assertEquals(37, Node.OPT_ARG_NAME);
108:       assertEquals(48, Node.DIRECTIVES);
109:       assertEquals(8, Node.FLAG_NO_THROWS);
110:       assertEquals(2, Node.POST_FLAG);
111:       assertEquals(56, Node.CHANGE_TIME);
112:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
113:       assertEquals(47, Node.IS_DISPATCHER);
114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
115:       assertEquals(29, Node.JSDOC_INFO_PROP);
116:       assertEquals(57, Node.LAST_PROP);
117:       assertEquals(55, Node.INFERRED_FUNCTION);
118:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
119:       assertEquals(15, Node.NO_SIDE_EFFECTS);
120:       assertEquals(39, Node.EMPTY_BLOCK);
121:       assertEquals(53, Node.INPUT_ID);
122:       assertEquals(52, Node.LENGTH);
123:       assertEquals(54, Node.SLASH_V);
124:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
125:       assertEquals(57, Node.REFLECTED_OBJECT);
126:       assertEquals(49, Node.DIRECT_EVAL);
127:       assertEquals(30, Node.VAR_ARGS_NAME);
128:       assertEquals(40, Node.ORIGINALNAME_PROP);
129:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
130:       assertEquals(32, Node.INCRDECR_PROP);
131:       assertEquals(12, Node.COLUMN_BITS);
132:       assertEquals(51, Node.STATIC_SOURCE_FILE);
133:       assertEquals(46, Node.IS_NAMESPACE);
134:       assertEquals(50, Node.FREE_CALL);
135:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
136:       assertEquals(1, Node.DECR_FLAG);
137:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
138:       
139:       boolean boolean0 = node0.isBreak();
140:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
141:       assertFalse(node0.isHook());
142:       assertFalse(node0.isFalse());
143:       assertFalse(node0.isInc());
144:       assertFalse(node0.isBreak());
145:       assertFalse(node0.isString());
146:       assertFalse(node0.isSwitch());
147:       assertEquals(83, node0.getType());
148:       assertEquals((-1), node0.getCharno());
149:       assertFalse(node0.isInstanceOf());
150:       assertTrue(node0.isParamList());
151:       assertFalse(node0.isObjectLit());
152:       assertFalse(node0.isGetProp());
153:       assertFalse(node0.isCase());
154:       assertFalse(node0.isWith());
155:       assertFalse(node0.isComma());
156:       assertFalse(node0.isFor());
157:       assertFalse(node0.isThis());
158:       assertFalse(node0.hasOneChild());
159:       assertFalse(node0.isArrayLit());
160:       assertFalse(node0.isTry());
161:       assertFalse(node0.isVoid());
162:       assertFalse(node0.isEmpty());
163:       assertFalse(node0.isScript());
164:       assertFalse(node0.isExprResult());
165:       assertFalse(node0.isGetElem());
166:       assertFalse(node0.isNumber());
167:       assertFalse(node0.isLabelName());
168:       assertFalse(node0.isDelProp());
169:       assertFalse(node0.isGetterDef());
170:       assertFalse(node0.isTrue());
171:       assertEquals(0, node0.getChildCount());
172:       assertFalse(node0.isOr());
173:       assertFalse(node0.isAssignAdd());
174:       assertFalse(node0.isDefaultCase());
175:       assertFalse(node0.isDo());
176:       assertFalse(node0.isLabel());
177:       assertFalse(node0.isVar());
178:       assertFalse(node0.isNew());
179:       assertFalse(node0.isCall());
180:       assertFalse(node0.isAdd());
181:       assertFalse(node0.isName());
182:       assertFalse(node0.isStringKey());
183:       assertFalse(node0.isNull());
184:       assertEquals((-1), node0.getLineno());
185:       assertFalse(node0.hasMoreThanOneChild());
186:       assertFalse(node0.isCatch());
187:       assertFalse(node0.hasChildren());
188:       assertFalse(node0.isDec());
189:       assertFalse(node0.isWhile());
190:       assertFalse(node0.isAssign());
191:       assertFalse(node0.isRegExp());
192:       assertFalse(node0.isTypeOf());
193:       assertFalse(node0.isBlock());
194:       assertFalse(node0.isReturn());
195:       assertFalse(node0.isCast());
196:       assertFalse(node0.isIf());
197:       assertEquals((-1), node0.getSourcePosition());
198:       assertFalse(node0.isNot());
199:       assertFalse(node0.isDebugger());
200:       assertFalse(node0.isAnd());
201:       assertFalse(node0.isNE());
202:       assertFalse(node0.isIn());
203:       assertFalse(node0.isContinue());
204:       assertFalse(node0.isSetterDef());
205:       assertFalse(node0.isFunction());
206:       assertFalse(node0.isThrow());
207:       assertFalse(boolean0);
208:       assertEquals(0, jSTypeArray0.length);
209:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
210:       assertEquals(43, Node.IS_CONSTANT_NAME);
211:       assertEquals(36, Node.QUOTED_PROP);
212:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
213:       assertEquals(4095, Node.COLUMN_MASK);
214:       assertEquals(37, Node.OPT_ARG_NAME);
215:       assertEquals(48, Node.DIRECTIVES);
216:       assertEquals(8, Node.FLAG_NO_THROWS);
217:       assertEquals(2, Node.POST_FLAG);
218:       assertEquals(56, Node.CHANGE_TIME);
219:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
220:       assertEquals(47, Node.IS_DISPATCHER);
221:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
222:       assertEquals(29, Node.JSDOC_INFO_PROP);
223:       assertEquals(57, Node.LAST_PROP);
224:       assertEquals(55, Node.INFERRED_FUNCTION);
225:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
226:       assertEquals(15, Node.NO_SIDE_EFFECTS);
227:       assertEquals(39, Node.EMPTY_BLOCK);
228:       assertEquals(53, Node.INPUT_ID);
229:       assertEquals(52, Node.LENGTH);
230:       assertEquals(54, Node.SLASH_V);
231:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
232:       assertEquals(57, Node.REFLECTED_OBJECT);
233:       assertEquals(49, Node.DIRECT_EVAL);
234:       assertEquals(30, Node.VAR_ARGS_NAME);
235:       assertEquals(40, Node.ORIGINALNAME_PROP);
236:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
237:       assertEquals(32, Node.INCRDECR_PROP);
238:       assertEquals(12, Node.COLUMN_BITS);
239:       assertEquals(51, Node.STATIC_SOURCE_FILE);
240:       assertEquals(46, Node.IS_NAMESPACE);
241:       assertEquals(50, Node.FREE_CALL);
242:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
243:       assertEquals(1, Node.DECR_FLAG);
244:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
245:       
246:       JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
247:       JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_FUNCTION_TYPE;
248:       jSTypeNativeArray0[0] = jSTypeNative0;
249:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
250:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
251:       assertEquals(16, node_SideEffectFlags0.valueOf());
252:       assertNotNull(node_SideEffectFlags0);
253:       
254:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
255:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
256:       assertEquals(16, node_SideEffectFlags0.valueOf());
257:       assertEquals(16, node_SideEffectFlags1.valueOf());
258:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
259:       assertNotNull(node_SideEffectFlags1);
260:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
261:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
262:       
263:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
264:       assertEquals(0, node_SideEffectFlags0.valueOf());
265:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
266:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
267:       assertEquals(0, node_SideEffectFlags1.valueOf());
268:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
269:       assertEquals(0, node_SideEffectFlags2.valueOf());
270:       assertNotNull(node_SideEffectFlags2);
271:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
272:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
273:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
274:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
275:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
276:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
277:       
278:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
279:       assertEquals(0, node_SideEffectFlags0.valueOf());
280:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
281:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
282:       assertEquals(0, node_SideEffectFlags1.valueOf());
283:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
284:       assertEquals(0, node_SideEffectFlags2.valueOf());
285:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
286:       assertEquals(0, node_SideEffectFlags3.valueOf());
287:       assertNotNull(node_SideEffectFlags3);
288:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
289:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
290:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
291:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
292:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
293:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
294:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
295:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
296:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
297:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
298:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
299:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
300:       
301:       Iterable<Node> iterable0 = node0.children();
302:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
303:       assertFalse(node0.isHook());
304:       assertFalse(node0.isFalse());
305:       assertFalse(node0.isInc());
306:       assertFalse(node0.isBreak());
307:       assertFalse(node0.isString());
308:       assertFalse(node0.isSwitch());
309:       assertEquals(83, node0.getType());
310:       assertEquals((-1), node0.getCharno());
311:       assertFalse(node0.isInstanceOf());
312:       assertTrue(node0.isParamList());
313:       assertFalse(node0.isObjectLit());
314:       assertFalse(node0.isGetProp());
315:       assertFalse(node0.isCase());
316:       assertFalse(node0.isWith());
317:       assertFalse(node0.isComma());
318:       assertFalse(node0.isFor());
319:       assertFalse(node0.isThis());
320:       assertFalse(node0.hasOneChild());
321:       assertFalse(node0.isArrayLit());
322:       assertFalse(node0.isTry());
323:       assertFalse(node0.isVoid());
324:       assertFalse(node0.isEmpty());
325:       assertFalse(node0.isScript());
326:       assertFalse(node0.isExprResult());
327:       assertFalse(node0.isGetElem());
328:       assertFalse(node0.isNumber());
329:       assertFalse(node0.isLabelName());
330:       assertFalse(node0.isDelProp());
331:       assertFalse(node0.isGetterDef());
332:       assertFalse(node0.isTrue());
333:       assertEquals(0, node0.getChildCount());
334:       assertFalse(node0.isOr());
335:       assertFalse(node0.isAssignAdd());
336:       assertFalse(node0.isDefaultCase());
337:       assertFalse(node0.isDo());
338:       assertFalse(node0.isLabel());
339:       assertFalse(node0.isVar());
340:       assertFalse(node0.isNew());
341:       assertFalse(node0.isCall());
342:       assertFalse(node0.isAdd());
343:       assertFalse(node0.isName());
344:       assertFalse(node0.isStringKey());
345:       assertFalse(node0.isNull());
346:       assertEquals((-1), node0.getLineno());
347:       assertFalse(node0.hasMoreThanOneChild());
348:       assertFalse(node0.isCatch());
349:       assertFalse(node0.hasChildren());
350:       assertFalse(node0.isDec());
351:       assertFalse(node0.isWhile());
352:       assertFalse(node0.isAssign());
353:       assertFalse(node0.isRegExp());
354:       assertFalse(node0.isTypeOf());
355:       assertFalse(node0.isBlock());
356:       assertFalse(node0.isReturn());
357:       assertFalse(node0.isCast());
358:       assertFalse(node0.isIf());
359:       assertEquals((-1), node0.getSourcePosition());
360:       assertFalse(node0.isNot());
361:       assertFalse(node0.isDebugger());
362:       assertFalse(node0.isAnd());
363:       assertFalse(node0.isNE());
364:       assertFalse(node0.isIn());
365:       assertFalse(node0.isContinue());
366:       assertFalse(node0.isSetterDef());
367:       assertFalse(node0.isFunction());
368:       assertFalse(node0.isThrow());
369:       assertNotNull(iterable0);
370:       assertEquals(0, jSTypeArray0.length);
371:       assertFalse(iterable0.contains(node0));
372:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
373:       assertEquals(43, Node.IS_CONSTANT_NAME);
374:       assertEquals(36, Node.QUOTED_PROP);
375:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
376:       assertEquals(4095, Node.COLUMN_MASK);
377:       assertEquals(37, Node.OPT_ARG_NAME);
378:       assertEquals(48, Node.DIRECTIVES);
379:       assertEquals(8, Node.FLAG_NO_THROWS);
380:       assertEquals(2, Node.POST_FLAG);
381:       assertEquals(56, Node.CHANGE_TIME);
382:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
383:       assertEquals(47, Node.IS_DISPATCHER);
384:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
385:       assertEquals(29, Node.JSDOC_INFO_PROP);
386:       assertEquals(57, Node.LAST_PROP);
387:       assertEquals(55, Node.INFERRED_FUNCTION);
388:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
389:       assertEquals(15, Node.NO_SIDE_EFFECTS);
390:       assertEquals(39, Node.EMPTY_BLOCK);
391:       assertEquals(53, Node.INPUT_ID);
392:       assertEquals(52, Node.LENGTH);
393:       assertEquals(54, Node.SLASH_V);
394:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
395:       assertEquals(57, Node.REFLECTED_OBJECT);
396:       assertEquals(49, Node.DIRECT_EVAL);
397:       assertEquals(30, Node.VAR_ARGS_NAME);
398:       assertEquals(40, Node.ORIGINALNAME_PROP);
399:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
400:       assertEquals(32, Node.INCRDECR_PROP);
401:       assertEquals(12, Node.COLUMN_BITS);
402:       assertEquals(51, Node.STATIC_SOURCE_FILE);
403:       assertEquals(46, Node.IS_NAMESPACE);
404:       assertEquals(50, Node.FREE_CALL);
405:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
406:       assertEquals(1, Node.DECR_FLAG);
407:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
408:       
409:       Node node1 = new Node(48, 39, 65535);
410:       assertFalse(node1.isFor());
411:       assertFalse(node1.isEmpty());
412:       assertFalse(node1.isGetterDef());
413:       assertFalse(node1.isTry());
414:       assertEquals(163839, node1.getSourcePosition());
415:       assertFalse(node1.isDefaultCase());
416:       assertFalse(node1.isCase());
417:       assertEquals(4095, node1.getCharno());
418:       assertEquals(0, node1.getChildCount());
419:       assertFalse(node1.isFunction());
420:       assertFalse(node1.isString());
421:       assertFalse(node1.isDebugger());
422:       assertFalse(node1.isArrayLit());
423:       assertFalse(node1.isParamList());
424:       assertFalse(node1.isSwitch());
425:       assertFalse(node1.isName());
426:       assertEquals(39, node1.getLineno());
427:       assertFalse(node1.isCall());
428:       assertFalse(node1.isBreak());
429:       assertFalse(node1.isComma());
430:       assertFalse(node1.isAdd());
431:       assertFalse(node1.isNew());
432:       assertFalse(node1.isGetProp());
433:       assertFalse(node1.isVar());
434:       assertFalse(node1.isWhile());
435:       assertFalse(node1.isDo());
436:       assertFalse(node1.isOr());
437:       assertFalse(node1.isTrue());
438:       assertFalse(node1.isExprResult());
439:       assertFalse(node1.isNull());
440:       assertFalse(node1.isVoid());
441:       assertFalse(node1.isDelProp());
442:       assertFalse(node1.isLabelName());
443:       assertFalse(node1.isAssign());
444:       assertFalse(node1.hasChildren());
445:       assertFalse(node1.isGetElem());
446:       assertFalse(node1.isTypeOf());
447:       assertFalse(node1.isCast());
448:       assertFalse(node1.isDec());
449:       assertFalse(node1.isNumber());
450:       assertFalse(node1.isLabel());
451:       assertFalse(node1.isReturn());
452:       assertFalse(node1.hasOneChild());
453:       assertFalse(node1.isAssignAdd());
454:       assertFalse(node1.isNot());
455:       assertFalse(node1.isScript());
456:       assertFalse(node1.isObjectLit());
457:       assertFalse(node1.isContinue());
458:       assertFalse(node1.isAnd());
459:       assertFalse(node1.isStringKey());
460:       assertFalse(node1.isThrow());
461:       assertFalse(node1.isFalse());
462:       assertFalse(node1.isBlock());
463:       assertEquals(48, node1.getType());
464:       assertFalse(node1.isInc());
465:       assertFalse(node1.isThis());
466:       assertFalse(node1.isHook());
467:       assertFalse(node1.isSetterDef());
468:       assertFalse(node1.isRegExp());
469:       assertFalse(node1.isCatch());
470:       assertFalse(node1.isInstanceOf());
471:       assertFalse(node1.isWith());
472:       assertFalse(node1.hasMoreThanOneChild());
473:       assertFalse(node1.isIn());
474:       assertFalse(node1.isNE());
475:       assertFalse(node1.isIf());
476:       assertNotNull(node1);
477:       assertFalse(node1.equals((Object)node0));
478:       assertEquals(40, Node.ORIGINALNAME_PROP);
479:       assertEquals(57, Node.REFLECTED_OBJECT);
480:       assertEquals(8, Node.FLAG_NO_THROWS);
481:       assertEquals(39, Node.EMPTY_BLOCK);
482:       assertEquals(54, Node.SLASH_V);
483:       assertEquals(15, Node.NO_SIDE_EFFECTS);
484:       assertEquals(52, Node.LENGTH);
485:       assertEquals(50, Node.FREE_CALL);
486:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
487:       assertEquals(12, Node.COLUMN_BITS);
488:       assertEquals(1, Node.DECR_FLAG);
489:       assertEquals(49, Node.DIRECT_EVAL);
490:       assertEquals(32, Node.INCRDECR_PROP);
491:       assertEquals(37, Node.OPT_ARG_NAME);
492:       assertEquals(48, Node.DIRECTIVES);
493:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
494:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
495:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
496:       assertEquals(4095, Node.COLUMN_MASK);
497:       assertEquals(56, Node.CHANGE_TIME);
498:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
499:       assertEquals(36, Node.QUOTED_PROP);
500:       assertEquals(53, Node.INPUT_ID);
501:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
502:       assertEquals(29, Node.JSDOC_INFO_PROP);
503:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
504:       assertEquals(55, Node.INFERRED_FUNCTION);
505:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
506:       assertEquals(51, Node.STATIC_SOURCE_FILE);
507:       assertEquals(46, Node.IS_NAMESPACE);
508:       assertEquals(43, Node.IS_CONSTANT_NAME);
509:       assertEquals(57, Node.LAST_PROP);
510:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
511:       assertEquals(2, Node.POST_FLAG);
512:       assertEquals(47, Node.IS_DISPATCHER);
513:       assertEquals(30, Node.VAR_ARGS_NAME);
514:       
515:       int int0 = node1.getChangeTime();
516:       assertFalse(node1.isFor());
517:       assertFalse(node1.isEmpty());
518:       assertFalse(node1.isGetterDef());
519:       assertFalse(node1.isTry());
520:       assertEquals(163839, node1.getSourcePosition());
521:       assertFalse(node1.isDefaultCase());
522:       assertFalse(node1.isCase());
523:       assertEquals(4095, node1.getCharno());
524:       assertEquals(0, node1.getChildCount());
525:       assertFalse(node1.isFunction());
526:       assertFalse(node1.isString());
527:       assertFalse(node1.isDebugger());
528:       assertFalse(node1.isArrayLit());
529:       assertFalse(node1.isParamList());
530:       assertFalse(node1.isSwitch());
531:       assertFalse(node1.isName());
532:       assertEquals(39, node1.getLineno());
533:       assertFalse(node1.isCall());
534:       assertFalse(node1.isBreak());
535:       assertFalse(node1.isComma());
536:       assertFalse(node1.isAdd());
537:       assertFalse(node1.isNew());
538:       assertFalse(node1.isGetProp());
539:       assertFalse(node1.isVar());
540:       assertFalse(node1.isWhile());
541:       assertFalse(node1.isDo());
542:       assertFalse(node1.isOr());
543:       assertFalse(node1.isTrue());
544:       assertFalse(node1.isExprResult());
545:       assertFalse(node1.isNull());
546:       assertFalse(node1.isVoid());
547:       assertFalse(node1.isDelProp());
548:       assertFalse(node1.isLabelName());
549:       assertFalse(node1.isAssign());
550:       assertFalse(node1.hasChildren());
551:       assertFalse(node1.isGetElem());
552:       assertFalse(node1.isTypeOf());
553:       assertFalse(node1.isCast());
554:       assertFalse(node1.isDec());
555:       assertFalse(node1.isNumber());
556:       assertFalse(node1.isLabel());
557:       assertFalse(node1.isReturn());
558:       assertFalse(node1.hasOneChild());
559:       assertFalse(node1.isAssignAdd());
560:       assertFalse(node1.isNot());
561:       assertFalse(node1.isScript());
562:       assertFalse(node1.isObjectLit());
563:       assertFalse(node1.isContinue());
564:       assertFalse(node1.isAnd());
565:       assertFalse(node1.isStringKey());
566:       assertFalse(node1.isThrow());
567:       assertFalse(node1.isFalse());
568:       assertFalse(node1.isBlock());
569:       assertEquals(48, node1.getType());
570:       assertFalse(node1.isInc());
571:       assertFalse(node1.isThis());
572:       assertFalse(node1.isHook());
573:       assertFalse(node1.isSetterDef());
574:       assertFalse(node1.isRegExp());
575:       assertFalse(node1.isCatch());
576:       assertFalse(node1.isInstanceOf());
577:       assertFalse(node1.isWith());
578:       assertFalse(node1.hasMoreThanOneChild());
579:       assertFalse(node1.isIn());
580:       assertFalse(node1.isNE());
581:       assertFalse(node1.isIf());
582:       assertEquals(0, int0);
583:       assertNotSame(node1, node0);
584:       assertFalse(node1.equals((Object)node0));
585:       assertEquals(40, Node.ORIGINALNAME_PROP);
586:       assertEquals(57, Node.REFLECTED_OBJECT);
587:       assertEquals(8, Node.FLAG_NO_THROWS);
588:       assertEquals(39, Node.EMPTY_BLOCK);
589:       assertEquals(54, Node.SLASH_V);
590:       assertEquals(15, Node.NO_SIDE_EFFECTS);
591:       assertEquals(52, Node.LENGTH);
592:       assertEquals(50, Node.FREE_CALL);
593:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
594:       assertEquals(12, Node.COLUMN_BITS);
595:       assertEquals(1, Node.DECR_FLAG);
596:       assertEquals(49, Node.DIRECT_EVAL);
597:       assertEquals(32, Node.INCRDECR_PROP);
598:       assertEquals(37, Node.OPT_ARG_NAME);
599:       assertEquals(48, Node.DIRECTIVES);
600:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
601:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
602:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
603:       assertEquals(4095, Node.COLUMN_MASK);
604:       assertEquals(56, Node.CHANGE_TIME);
605:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
606:       assertEquals(36, Node.QUOTED_PROP);
607:       assertEquals(53, Node.INPUT_ID);
608:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
609:       assertEquals(29, Node.JSDOC_INFO_PROP);
610:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
611:       assertEquals(55, Node.INFERRED_FUNCTION);
612:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
613:       assertEquals(51, Node.STATIC_SOURCE_FILE);
614:       assertEquals(46, Node.IS_NAMESPACE);
615:       assertEquals(43, Node.IS_CONSTANT_NAME);
616:       assertEquals(57, Node.LAST_PROP);
617:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
618:       assertEquals(2, Node.POST_FLAG);
619:       assertEquals(47, Node.IS_DISPATCHER);
620:       assertEquals(30, Node.VAR_ARGS_NAME);
621:       
622:       Node node2 = node1.useSourceInfoIfMissingFrom(node0);
623:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
624:       assertFalse(node0.isHook());
625:       assertFalse(node0.isFalse());
626:       assertFalse(node0.isInc());
627:       assertFalse(node0.isBreak());
628:       assertFalse(node0.isString());
629:       assertFalse(node0.isSwitch());
630:       assertEquals(83, node0.getType());
631:       assertEquals((-1), node0.getCharno());
632:       assertFalse(node0.isInstanceOf());
633:       assertTrue(node0.isParamList());
634:       assertFalse(node0.isObjectLit());
635:       assertFalse(node0.isGetProp());
636:       assertFalse(node0.isCase());
637:       assertFalse(node0.isWith());
638:       assertFalse(node0.isComma());
639:       assertFalse(node0.isFor());
640:       assertFalse(node0.isThis());
641:       assertFalse(node0.hasOneChild());
642:       assertFalse(node0.isArrayLit());
643:       assertFalse(node0.isTry());
644:       assertFalse(node0.isVoid());
645:       assertFalse(node0.isEmpty());
646:       assertFalse(node0.isScript());
647:       assertFalse(node0.isExprResult());
648:       assertFalse(node0.isGetElem());
649:       assertFalse(node0.isNumber());
650:       assertFalse(node0.isLabelName());
651:       assertFalse(node0.isDelProp());
652:       assertFalse(node0.isGetterDef());
653:       assertFalse(node0.isTrue());
654:       assertEquals(0, node0.getChildCount());
655:       assertFalse(node0.isOr());
656:       assertFalse(node0.isAssignAdd());
657:       assertFalse(node0.isDefaultCase());
658:       assertFalse(node0.isDo());
659:       assertFalse(node0.isLabel());
660:       assertFalse(node0.isVar());
661:       assertFalse(node0.isNew());
662:       assertFalse(node0.isCall());
663:       assertFalse(node0.isAdd());
664:       assertFalse(node0.isName());
665:       assertFalse(node0.isStringKey());
666:       assertFalse(node0.isNull());
667:       assertEquals((-1), node0.getLineno());
668:       assertFalse(node0.hasMoreThanOneChild());
669:       assertFalse(node0.isCatch());
670:       assertFalse(node0.hasChildren());
671:       assertFalse(node0.isDec());
672:       assertFalse(node0.isWhile());
673:       assertFalse(node0.isAssign());
674:       assertFalse(node0.isRegExp());
675:       assertFalse(node0.isTypeOf());
676:       assertFalse(node0.isBlock());
677:       assertFalse(node0.isReturn());
678:       assertFalse(node0.isCast());
679:       assertFalse(node0.isIf());
680:       assertEquals((-1), node0.getSourcePosition());
681:       assertFalse(node0.isNot());
682:       assertFalse(node0.isDebugger());
683:       assertFalse(node0.isAnd());
684:       assertFalse(node0.isNE());
685:       assertFalse(node0.isIn());
686:       assertFalse(node0.isContinue());
687:       assertFalse(node0.isSetterDef());
688:       assertFalse(node0.isFunction());
689:       assertFalse(node0.isThrow());
690:       assertFalse(node1.isFor());
691:       assertFalse(node1.isEmpty());
692:       assertFalse(node1.isGetterDef());
693:       assertFalse(node1.isTry());
694:       assertFalse(node1.isDefaultCase());
695:       assertFalse(node1.isCase());
696:       assertEquals(0, node1.getChildCount());
697:       assertFalse(node1.isFunction());
698:       assertFalse(node1.isString());
699:       assertFalse(node1.isDebugger());
700:       assertEquals((-1), node1.getCharno());
701:       assertFalse(node1.isArrayLit());
702:       assertFalse(node1.isParamList());
703:       assertFalse(node1.isSwitch());
704:       assertFalse(node1.isName());
705:       assertFalse(node1.isCall());
706:       assertFalse(node1.isBreak());
707:       assertFalse(node1.isComma());
708:       assertFalse(node1.isAdd());
709:       assertFalse(node1.isNew());
710:       assertFalse(node1.isGetProp());
711:       assertFalse(node1.isVar());
712:       assertFalse(node1.isWhile());
713:       assertFalse(node1.isDo());
714:       assertFalse(node1.isOr());
715:       assertFalse(node1.isTrue());
716:       assertFalse(node1.isExprResult());
717:       assertFalse(node1.isNull());
718:       assertFalse(node1.isVoid());
719:       assertFalse(node1.isDelProp());
720:       assertFalse(node1.isLabelName());
721:       assertFalse(node1.isAssign());
722:       assertFalse(node1.hasChildren());
723:       assertFalse(node1.isGetElem());
724:       assertFalse(node1.isTypeOf());
725:       assertEquals((-1), node1.getSourcePosition());
726:       assertFalse(node1.isCast());
727:       assertFalse(node1.isDec());
728:       assertFalse(node1.isNumber());
729:       assertFalse(node1.isLabel());
730:       assertFalse(node1.isReturn());
731:       assertFalse(node1.hasOneChild());
732:       assertFalse(node1.isAssignAdd());
733:       assertFalse(node1.isNot());
734:       assertFalse(node1.isScript());
735:       assertFalse(node1.isObjectLit());
736:       assertFalse(node1.isContinue());
737:       assertFalse(node1.isAnd());
738:       assertFalse(node1.isStringKey());
739:       assertFalse(node1.isThrow());
740:       assertFalse(node1.isFalse());
741:       assertFalse(node1.isBlock());
742:       assertEquals(48, node1.getType());
743:       assertFalse(node1.isInc());
744:       assertFalse(node1.isThis());
745:       assertFalse(node1.isHook());
746:       assertFalse(node1.isSetterDef());
747:       assertFalse(node1.isRegExp());
748:       assertFalse(node1.isCatch());
749:       assertFalse(node1.isInstanceOf());
750:       assertFalse(node1.isWith());
751:       assertFalse(node1.hasMoreThanOneChild());
752:       assertFalse(node1.isIn());
753:       assertEquals((-1), node1.getLineno());
754:       assertFalse(node1.isNE());
755:       assertFalse(node1.isIf());
756:       assertFalse(node2.isFor());
757:       assertFalse(node2.isEmpty());
758:       assertFalse(node2.isIf());
759:       assertFalse(node2.isNE());
760:       assertFalse(node2.isGetterDef());
761:       assertFalse(node2.isArrayLit());
762:       assertFalse(node2.isVoid());
763:       assertFalse(node2.isDelProp());
764:       assertFalse(node2.isDefaultCase());
765:       assertFalse(node2.isTrue());
766:       assertFalse(node2.isFunction());
767:       assertEquals(0, node2.getChildCount());
768:       assertEquals(48, node2.getType());
769:       assertFalse(node2.isIn());
770:       assertFalse(node2.isInc());
771:       assertFalse(node2.isSetterDef());
772:       assertFalse(node2.isName());
773:       assertFalse(node2.isFalse());
774:       assertFalse(node2.isThrow());
775:       assertFalse(node2.isNull());
776:       assertFalse(node2.isComma());
777:       assertFalse(node2.isCall());
778:       assertFalse(node2.isBreak());
779:       assertFalse(node2.isNot());
780:       assertFalse(node2.isAnd());
781:       assertFalse(node2.isWhile());
782:       assertFalse(node2.isString());
783:       assertFalse(node2.isDebugger());
784:       assertFalse(node2.isObjectLit());
785:       assertFalse(node2.isReturn());
786:       assertFalse(node2.isGetProp());
787:       assertFalse(node2.isLabelName());
788:       assertFalse(node2.isAssign());
789:       assertFalse(node2.isGetElem());
790:       assertFalse(node2.isTypeOf());
791:       assertFalse(node2.isNumber());
792:       assertFalse(node2.hasChildren());
793:       assertFalse(node2.isDec());
794:       assertEquals((-1), node2.getSourcePosition());
795:       assertFalse(node2.isCast());
796:       assertFalse(node2.isExprResult());
797:       assertEquals((-1), node2.getLineno());
798:       assertFalse(node2.isDo());
799:       assertFalse(node2.isContinue());
800:       assertFalse(node2.isOr());
801:       assertFalse(node2.isLabel());
802:       assertFalse(node2.isAdd());
803:       assertFalse(node2.isAssignAdd());
804:       assertFalse(node2.isNew());
805:       assertFalse(node2.isStringKey());
806:       assertFalse(node2.isVar());
807:       assertFalse(node2.isThis());
808:       assertFalse(node2.isHook());
809:       assertFalse(node2.isParamList());
810:       assertFalse(node2.isInstanceOf());
811:       assertFalse(node2.isSwitch());
812:       assertFalse(node2.isWith());
813:       assertFalse(node2.isCatch());
814:       assertFalse(node2.isRegExp());
815:       assertFalse(node2.hasMoreThanOneChild());
816:       assertEquals((-1), node2.getCharno());
817:       assertFalse(node2.isTry());
818:       assertFalse(node2.isBlock());
819:       assertFalse(node2.isScript());
820:       assertFalse(node2.isCase());
821:       assertFalse(node2.hasOneChild());
822:       assertNotNull(node2);
823:       assertNotSame(node0, node1);
824:       assertNotSame(node0, node2);
825:       assertNotSame(node1, node0);
826:       assertSame(node1, node2);
827:       assertNotSame(node2, node0);
828:       assertSame(node2, node1);
829:       assertEquals(0, jSTypeArray0.length);
830:       assertFalse(node0.equals((Object)node1));
831:       assertFalse(node1.equals((Object)node0));
832:       assertFalse(node2.equals((Object)node0));
833:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
834:       assertEquals(43, Node.IS_CONSTANT_NAME);
835:       assertEquals(36, Node.QUOTED_PROP);
836:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
837:       assertEquals(4095, Node.COLUMN_MASK);
838:       assertEquals(37, Node.OPT_ARG_NAME);
839:       assertEquals(48, Node.DIRECTIVES);
840:       assertEquals(8, Node.FLAG_NO_THROWS);
841:       assertEquals(2, Node.POST_FLAG);
842:       assertEquals(56, Node.CHANGE_TIME);
843:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
844:       assertEquals(47, Node.IS_DISPATCHER);
845:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
846:       assertEquals(29, Node.JSDOC_INFO_PROP);
847:       assertEquals(57, Node.LAST_PROP);
848:       assertEquals(55, Node.INFERRED_FUNCTION);
849:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
850:       assertEquals(15, Node.NO_SIDE_EFFECTS);
851:       assertEquals(39, Node.EMPTY_BLOCK);
852:       assertEquals(53, Node.INPUT_ID);
853:       assertEquals(52, Node.LENGTH);
854:       assertEquals(54, Node.SLASH_V);
855:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
856:       assertEquals(57, Node.REFLECTED_OBJECT);
857:       assertEquals(49, Node.DIRECT_EVAL);
858:       assertEquals(30, Node.VAR_ARGS_NAME);
859:       assertEquals(40, Node.ORIGINALNAME_PROP);
860:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
861:       assertEquals(32, Node.INCRDECR_PROP);
862:       assertEquals(12, Node.COLUMN_BITS);
863:       assertEquals(51, Node.STATIC_SOURCE_FILE);
864:       assertEquals(46, Node.IS_NAMESPACE);
865:       assertEquals(50, Node.FREE_CALL);
866:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
867:       assertEquals(1, Node.DECR_FLAG);
868:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
869:       assertEquals(40, Node.ORIGINALNAME_PROP);
870:       assertEquals(57, Node.REFLECTED_OBJECT);
871:       assertEquals(8, Node.FLAG_NO_THROWS);
872:       assertEquals(39, Node.EMPTY_BLOCK);
873:       assertEquals(54, Node.SLASH_V);
874:       assertEquals(15, Node.NO_SIDE_EFFECTS);
875:       assertEquals(52, Node.LENGTH);
876:       assertEquals(50, Node.FREE_CALL);
877:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
878:       assertEquals(12, Node.COLUMN_BITS);
879:       assertEquals(1, Node.DECR_FLAG);
880:       assertEquals(49, Node.DIRECT_EVAL);
881:       assertEquals(32, Node.INCRDECR_PROP);
882:       assertEquals(37, Node.OPT_ARG_NAME);
883:       assertEquals(48, Node.DIRECTIVES);
884:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
885:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
886:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
887:       assertEquals(4095, Node.COLUMN_MASK);
888:       assertEquals(56, Node.CHANGE_TIME);
889:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
890:       assertEquals(36, Node.QUOTED_PROP);
891:       assertEquals(53, Node.INPUT_ID);
892:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
893:       assertEquals(29, Node.JSDOC_INFO_PROP);
894:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
895:       assertEquals(55, Node.INFERRED_FUNCTION);
896:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
897:       assertEquals(51, Node.STATIC_SOURCE_FILE);
898:       assertEquals(46, Node.IS_NAMESPACE);
899:       assertEquals(43, Node.IS_CONSTANT_NAME);
900:       assertEquals(57, Node.LAST_PROP);
901:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
902:       assertEquals(2, Node.POST_FLAG);
903:       assertEquals(47, Node.IS_DISPATCHER);
904:       assertEquals(30, Node.VAR_ARGS_NAME);
905:       assertEquals(40, Node.ORIGINALNAME_PROP);
906:       assertEquals(57, Node.REFLECTED_OBJECT);
907:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
908:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
909:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
910:       assertEquals(30, Node.VAR_ARGS_NAME);
911:       assertEquals(12, Node.COLUMN_BITS);
912:       assertEquals(32, Node.INCRDECR_PROP);
913:       assertEquals(1, Node.DECR_FLAG);
914:       assertEquals(54, Node.SLASH_V);
915:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
916:       assertEquals(43, Node.IS_CONSTANT_NAME);
917:       assertEquals(46, Node.IS_NAMESPACE);
918:       assertEquals(51, Node.STATIC_SOURCE_FILE);
919:       assertEquals(50, Node.FREE_CALL);
920:       assertEquals(29, Node.JSDOC_INFO_PROP);
921:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
922:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
923:       assertEquals(37, Node.OPT_ARG_NAME);
924:       assertEquals(47, Node.IS_DISPATCHER);
925:       assertEquals(2, Node.POST_FLAG);
926:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
927:       assertEquals(4095, Node.COLUMN_MASK);
928:       assertEquals(55, Node.INFERRED_FUNCTION);
929:       assertEquals(15, Node.NO_SIDE_EFFECTS);
930:       assertEquals(57, Node.LAST_PROP);
931:       assertEquals(49, Node.DIRECT_EVAL);
932:       assertEquals(48, Node.DIRECTIVES);
933:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
934:       assertEquals(8, Node.FLAG_NO_THROWS);
935:       assertEquals(39, Node.EMPTY_BLOCK);
936:       assertEquals(53, Node.INPUT_ID);
937:       assertEquals(56, Node.CHANGE_TIME);
938:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
939:       assertEquals(52, Node.LENGTH);
940:       assertEquals(36, Node.QUOTED_PROP);
941:   }
942: }
RegularFileObject[/tmp/EvoSuite_109_1629223339010/com/google/javascript/rhino/Node_109_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:19 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_109_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_109_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.common.collect.AbstractMapBasedMultimap$1",
120:       "com.google.common.collect.AbstractMapBasedMultimap$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.common.collect.AbstractMultimap$Values",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMultimap$Entries",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.Multimaps$Entries",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_109_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.SimpleErrorReporter",
268:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
269:       "com.google.common.base.Joiner",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
299:       "com.google.javascript.rhino.jstype.JSType$1",
300:       "com.google.javascript.rhino.jstype.JSType",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.JSDocInfo",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.jstype.JSType$TypePair",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.base.Objects",
350:       "com.google.javascript.rhino.jstype.TemplatizedType",
351:       "com.google.javascript.rhino.InputId",
352:       "com.google.javascript.rhino.jstype.NamedType",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.common.collect.AbstractIndexedListIterator",
357:       "com.google.common.collect.Iterators$11",
358:       "com.google.common.collect.ImmutableSet",
359:       "com.google.common.collect.EmptyImmutableSet",
360:       "com.google.common.collect.Platform",
361:       "com.google.common.collect.Iterables",
362:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
365:       "com.google.javascript.rhino.JSDocInfo$Marker",
366:       "com.google.common.collect.Iterators$12",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
371:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
372:     );
373:   }
374: }

[MASTER] 18:02:19.125 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

JSType[] jSTypeArray0 = new JSType[0];
Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals(83, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertNotNull(node0);
assertEquals(0, jSTypeArray0.length);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean0 = node0.isBreak();
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals(83, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(boolean0);
assertEquals(0, jSTypeArray0.length);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_FUNCTION_TYPE;
jSTypeNativeArray0[0] = jSTypeNative0;
Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(16, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(16, node_SideEffectFlags0.valueOf());
assertEquals(16, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertNotNull(node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertNotNull(node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);

Iterable<Node> iterable0 = node0.children();
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals(83, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertNotNull(iterable0);
assertEquals(0, jSTypeArray0.length);
assertFalse(iterable0.contains(node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node node1 = new Node(48, 39, 65535);
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertEquals(163839, node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCase());
assertEquals(4095, node1.getCharno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isName());
assertEquals(39, node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isGetProp());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertEquals(48, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isSetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);

int int0 = node1.getChangeTime();
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertEquals(163839, node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCase());
assertEquals(4095, node1.getCharno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isName());
assertEquals(39, node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isGetProp());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertEquals(48, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isSetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals(0, int0);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);

Node node2 = node1.useSourceInfoIfMissingFrom(node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals(83, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isGetProp());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBlock());
assertEquals(48, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isSetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertEquals(0, node2.getChildCount());
assertEquals(48, node2.getType());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isParamList());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSwitch());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertNotNull(node2);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node1, node0);
assertSame(node1, node2);
assertNotSame(node2, node0);
assertSame(node2, node1);
assertEquals(0, jSTypeArray0.length);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);


[MASTER] 18:02:25.748 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_144_1629223345240/com/google/javascript/rhino/Node_144_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_144_1629223345240/com/google/javascript/rhino/Node_144_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:25.749 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:25.749 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:25.754 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1809
[MASTER] 18:02:25.755 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable1 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2175
[MASTER] 18:02:25.757 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_144_1629223345240/com/google/javascript/rhino/Node_144_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:25 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.evosuite.runtime.testdata.EvoSuiteFile;
14: import org.evosuite.runtime.testdata.FileSystemHandling;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_144_tmp__ESTest extends Node_144_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       byte[] byteArray0 = new byte[4];
23:       byteArray0[0] = (byte)0;
24:       byteArray0[1] = (byte)69;
25:       byteArray0[2] = (byte)4;
26:       byteArray0[3] = (byte)24;
27:       boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
28:       assertFalse(boolean0);
29:       assertArrayEquals(new byte[] {(byte)0, (byte)69, (byte)4, (byte)24}, byteArray0);
30:       assertEquals(4, byteArray0.length);
31:       
32:       Node node0 = Node.newString((-3322), "Jzh", (-4946), (-4946));
33:       assertFalse(node0.isInstanceOf());
34:       assertFalse(node0.isBreak());
35:       assertFalse(node0.isGetProp());
36:       assertFalse(node0.isNot());
37:       assertFalse(node0.isAnd());
38:       assertFalse(node0.isObjectLit());
39:       assertFalse(node0.isScript());
40:       assertFalse(node0.isExprResult());
41:       assertFalse(node0.hasOneChild());
42:       assertFalse(node0.isWith());
43:       assertFalse(node0.isAssign());
44:       assertFalse(node0.isGetElem());
45:       assertFalse(node0.isThis());
46:       assertFalse(node0.isTypeOf());
47:       assertFalse(node0.hasChildren());
48:       assertFalse(node0.isDec());
49:       assertFalse(node0.isHook());
50:       assertFalse(node0.isComma());
51:       assertFalse(node0.isReturn());
52:       assertFalse(node0.isIn());
53:       assertEquals((-1), node0.getLineno());
54:       assertFalse(node0.isIf());
55:       assertFalse(node0.isString());
56:       assertFalse(node0.isNE());
57:       assertEquals((-1), node0.getSourcePosition());
58:       assertFalse(node0.isCast());
59:       assertFalse(node0.isInc());
60:       assertFalse(node0.isFalse());
61:       assertFalse(node0.isThrow());
62:       assertFalse(node0.isContinue());
63:       assertFalse(node0.isFunction());
64:       assertFalse(node0.isParamList());
65:       assertFalse(node0.isCatch());
66:       assertFalse(node0.isSetterDef());
67:       assertFalse(node0.isName());
68:       assertFalse(node0.isStringKey());
69:       assertFalse(node0.isTrue());
70:       assertFalse(node0.isNull());
71:       assertFalse(node0.isDebugger());
72:       assertFalse(node0.isTry());
73:       assertFalse(node0.isBlock());
74:       assertFalse(node0.isCall());
75:       assertFalse(node0.isVoid());
76:       assertFalse(node0.isFor());
77:       assertFalse(node0.isWhile());
78:       assertFalse(node0.hasMoreThanOneChild());
79:       assertFalse(node0.isRegExp());
80:       assertEquals((-3322), node0.getType());
81:       assertFalse(node0.isOr());
82:       assertFalse(node0.isLabel());
83:       assertFalse(node0.isAssignAdd());
84:       assertFalse(node0.isCase());
85:       assertFalse(node0.isEmpty());
86:       assertFalse(node0.isLabelName());
87:       assertFalse(node0.isDelProp());
88:       assertFalse(node0.isGetterDef());
89:       assertFalse(node0.isNumber());
90:       assertEquals((-1), node0.getCharno());
91:       assertFalse(node0.isAdd());
92:       assertFalse(node0.isSwitch());
93:       assertFalse(node0.isArrayLit());
94:       assertFalse(node0.isNew());
95:       assertFalse(node0.isDo());
96:       assertFalse(node0.isDefaultCase());
97:       assertFalse(node0.isVar());
98:       assertEquals(0, node0.getChildCount());
99:       assertNotNull(node0);
100:       assertEquals(37, Node.OPT_ARG_NAME);
101:       assertEquals(56, Node.CHANGE_TIME);
102:       assertEquals(46, Node.IS_NAMESPACE);
103:       assertEquals(47, Node.IS_DISPATCHER);
104:       assertEquals(2, Node.POST_FLAG);
105:       assertEquals(51, Node.STATIC_SOURCE_FILE);
106:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
107:       assertEquals(49, Node.DIRECT_EVAL);
108:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
109:       assertEquals(53, Node.INPUT_ID);
110:       assertEquals(52, Node.LENGTH);
111:       assertEquals(57, Node.REFLECTED_OBJECT);
112:       assertEquals(36, Node.QUOTED_PROP);
113:       assertEquals(30, Node.VAR_ARGS_NAME);
114:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
115:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
116:       assertEquals(29, Node.JSDOC_INFO_PROP);
117:       assertEquals(55, Node.INFERRED_FUNCTION);
118:       assertEquals(15, Node.NO_SIDE_EFFECTS);
119:       assertEquals(57, Node.LAST_PROP);
120:       assertEquals(8, Node.FLAG_NO_THROWS);
121:       assertEquals(39, Node.EMPTY_BLOCK);
122:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
123:       assertEquals(50, Node.FREE_CALL);
124:       assertEquals(40, Node.ORIGINALNAME_PROP);
125:       assertEquals(4095, Node.COLUMN_MASK);
126:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
127:       assertEquals(48, Node.DIRECTIVES);
128:       assertEquals(54, Node.SLASH_V);
129:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
130:       assertEquals(43, Node.IS_CONSTANT_NAME);
131:       assertEquals(12, Node.COLUMN_BITS);
132:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
133:       assertEquals(32, Node.INCRDECR_PROP);
134:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
135:       assertEquals(1, Node.DECR_FLAG);
136:       
137:       Node node1 = Node.newNumber((double) 1);
138:       assertFalse(node1.isContinue());
139:       assertFalse(node1.hasMoreThanOneChild());
140:       assertFalse(node1.isDo());
141:       assertEquals((-1), node1.getLineno());
142:       assertFalse(node1.isNew());
143:       assertFalse(node1.isTypeOf());
144:       assertFalse(node1.isDec());
145:       assertFalse(node1.isWhile());
146:       assertFalse(node1.isReturn());
147:       assertFalse(node1.isLabel());
148:       assertFalse(node1.isAssignAdd());
149:       assertFalse(node1.hasChildren());
150:       assertEquals(39, node1.getType());
151:       assertFalse(node1.isBlock());
152:       assertFalse(node1.isVar());
153:       assertFalse(node1.hasOneChild());
154:       assertFalse(node1.isLabelName());
155:       assertFalse(node1.isCast());
156:       assertFalse(node1.isParamList());
157:       assertEquals((-1), node1.getSourcePosition());
158:       assertFalse(node1.isStringKey());
159:       assertFalse(node1.isObjectLit());
160:       assertFalse(node1.isNot());
161:       assertEquals(0, node1.getChildCount());
162:       assertFalse(node1.isComma());
163:       assertFalse(node1.isGetProp());
164:       assertFalse(node1.isDefaultCase());
165:       assertFalse(node1.isCall());
166:       assertFalse(node1.isName());
167:       assertFalse(node1.isAssign());
168:       assertFalse(node1.isBreak());
169:       assertFalse(node1.isAdd());
170:       assertFalse(node1.isGetElem());
171:       assertFalse(node1.isEmpty());
172:       assertFalse(node1.isTrue());
173:       assertFalse(node1.isExprResult());
174:       assertFalse(node1.isVoid());
175:       assertFalse(node1.isOr());
176:       assertFalse(node1.isDelProp());
177:       assertFalse(node1.isNull());
178:       assertFalse(node1.isCase());
179:       assertTrue(node1.isNumber());
180:       assertFalse(node1.isString());
181:       assertFalse(node1.isIn());
182:       assertFalse(node1.isInc());
183:       assertFalse(node1.isFor());
184:       assertFalse(node1.isHook());
185:       assertFalse(node1.isFalse());
186:       assertFalse(node1.isArrayLit());
187:       assertFalse(node1.isDebugger());
188:       assertFalse(node1.isSwitch());
189:       assertEquals((-1), node1.getCharno());
190:       assertFalse(node1.isGetterDef());
191:       assertFalse(node1.isAnd());
192:       assertFalse(node1.isWith());
193:       assertFalse(node1.isScript());
194:       assertFalse(node1.isInstanceOf());
195:       assertFalse(node1.isCatch());
196:       assertFalse(node1.isFunction());
197:       assertFalse(node1.isThis());
198:       assertFalse(node1.isSetterDef());
199:       assertFalse(node1.isRegExp());
200:       assertFalse(node1.isTry());
201:       assertFalse(node1.isThrow());
202:       assertFalse(node1.isIf());
203:       assertFalse(node1.isNE());
204:       assertNotNull(node1);
205:       assertFalse(node1.equals((Object)node0));
206:       assertEquals(4095, Node.COLUMN_MASK);
207:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
208:       assertEquals(36, Node.QUOTED_PROP);
209:       assertEquals(8, Node.FLAG_NO_THROWS);
210:       assertEquals(50, Node.FREE_CALL);
211:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
212:       assertEquals(55, Node.INFERRED_FUNCTION);
213:       assertEquals(39, Node.EMPTY_BLOCK);
214:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
215:       assertEquals(53, Node.INPUT_ID);
216:       assertEquals(57, Node.REFLECTED_OBJECT);
217:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
218:       assertEquals(52, Node.LENGTH);
219:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
220:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
221:       assertEquals(56, Node.CHANGE_TIME);
222:       assertEquals(49, Node.DIRECT_EVAL);
223:       assertEquals(48, Node.DIRECTIVES);
224:       assertEquals(37, Node.OPT_ARG_NAME);
225:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
226:       assertEquals(51, Node.STATIC_SOURCE_FILE);
227:       assertEquals(32, Node.INCRDECR_PROP);
228:       assertEquals(12, Node.COLUMN_BITS);
229:       assertEquals(46, Node.IS_NAMESPACE);
230:       assertEquals(15, Node.NO_SIDE_EFFECTS);
231:       assertEquals(57, Node.LAST_PROP);
232:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
233:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
234:       assertEquals(1, Node.DECR_FLAG);
235:       assertEquals(29, Node.JSDOC_INFO_PROP);
236:       assertEquals(54, Node.SLASH_V);
237:       assertEquals(43, Node.IS_CONSTANT_NAME);
238:       assertEquals(47, Node.IS_DISPATCHER);
239:       assertEquals(30, Node.VAR_ARGS_NAME);
240:       assertEquals(2, Node.POST_FLAG);
241:       assertEquals(40, Node.ORIGINALNAME_PROP);
242:       
243:       Node node2 = node0.copyInformationFrom(node1);
244:       assertFalse(node0.isInstanceOf());
245:       assertFalse(node0.isBreak());
246:       assertFalse(node0.isGetProp());
247:       assertFalse(node0.isNot());
248:       assertFalse(node0.isAnd());
249:       assertFalse(node0.isObjectLit());
250:       assertFalse(node0.isScript());
251:       assertFalse(node0.isExprResult());
252:       assertFalse(node0.hasOneChild());
253:       assertFalse(node0.isWith());
254:       assertFalse(node0.isAssign());
255:       assertFalse(node0.isGetElem());
256:       assertFalse(node0.isThis());
257:       assertFalse(node0.isTypeOf());
258:       assertFalse(node0.hasChildren());
259:       assertFalse(node0.isDec());
260:       assertFalse(node0.isHook());
261:       assertFalse(node0.isComma());
262:       assertFalse(node0.isReturn());
263:       assertFalse(node0.isIn());
264:       assertEquals((-1), node0.getLineno());
265:       assertFalse(node0.isIf());
266:       assertFalse(node0.isString());
267:       assertFalse(node0.isNE());
268:       assertEquals((-1), node0.getSourcePosition());
269:       assertFalse(node0.isCast());
270:       assertFalse(node0.isInc());
271:       assertFalse(node0.isFalse());
272:       assertFalse(node0.isThrow());
273:       assertFalse(node0.isContinue());
274:       assertFalse(node0.isFunction());
275:       assertFalse(node0.isParamList());
276:       assertFalse(node0.isCatch());
277:       assertFalse(node0.isSetterDef());
278:       assertFalse(node0.isName());
279:       assertFalse(node0.isStringKey());
280:       assertFalse(node0.isTrue());
281:       assertFalse(node0.isNull());
282:       assertFalse(node0.isDebugger());
283:       assertFalse(node0.isTry());
284:       assertFalse(node0.isBlock());
285:       assertFalse(node0.isCall());
286:       assertFalse(node0.isVoid());
287:       assertFalse(node0.isFor());
288:       assertFalse(node0.isWhile());
289:       assertFalse(node0.hasMoreThanOneChild());
290:       assertFalse(node0.isRegExp());
291:       assertEquals((-3322), node0.getType());
292:       assertFalse(node0.isOr());
293:       assertFalse(node0.isLabel());
294:       assertFalse(node0.isAssignAdd());
295:       assertFalse(node0.isCase());
296:       assertFalse(node0.isEmpty());
297:       assertFalse(node0.isLabelName());
298:       assertFalse(node0.isDelProp());
299:       assertFalse(node0.isGetterDef());
300:       assertFalse(node0.isNumber());
301:       assertEquals((-1), node0.getCharno());
302:       assertFalse(node0.isAdd());
303:       assertFalse(node0.isSwitch());
304:       assertFalse(node0.isArrayLit());
305:       assertFalse(node0.isNew());
306:       assertFalse(node0.isDo());
307:       assertFalse(node0.isDefaultCase());
308:       assertFalse(node0.isVar());
309:       assertEquals(0, node0.getChildCount());
310:       assertFalse(node1.isContinue());
311:       assertFalse(node1.hasMoreThanOneChild());
312:       assertFalse(node1.isDo());
313:       assertEquals((-1), node1.getLineno());
314:       assertFalse(node1.isNew());
315:       assertFalse(node1.isTypeOf());
316:       assertFalse(node1.isDec());
317:       assertFalse(node1.isWhile());
318:       assertFalse(node1.isReturn());
319:       assertFalse(node1.isLabel());
320:       assertFalse(node1.isAssignAdd());
321:       assertFalse(node1.hasChildren());
322:       assertEquals(39, node1.getType());
323:       assertFalse(node1.isBlock());
324:       assertFalse(node1.isVar());
325:       assertFalse(node1.hasOneChild());
326:       assertFalse(node1.isLabelName());
327:       assertFalse(node1.isCast());
328:       assertFalse(node1.isParamList());
329:       assertEquals((-1), node1.getSourcePosition());
330:       assertFalse(node1.isStringKey());
331:       assertFalse(node1.isObjectLit());
332:       assertFalse(node1.isNot());
333:       assertEquals(0, node1.getChildCount());
334:       assertFalse(node1.isComma());
335:       assertFalse(node1.isGetProp());
336:       assertFalse(node1.isDefaultCase());
337:       assertFalse(node1.isCall());
338:       assertFalse(node1.isName());
339:       assertFalse(node1.isAssign());
340:       assertFalse(node1.isBreak());
341:       assertFalse(node1.isAdd());
342:       assertFalse(node1.isGetElem());
343:       assertFalse(node1.isEmpty());
344:       assertFalse(node1.isTrue());
345:       assertFalse(node1.isExprResult());
346:       assertFalse(node1.isVoid());
347:       assertFalse(node1.isOr());
348:       assertFalse(node1.isDelProp());
349:       assertFalse(node1.isNull());
350:       assertFalse(node1.isCase());
351:       assertTrue(node1.isNumber());
352:       assertFalse(node1.isString());
353:       assertFalse(node1.isIn());
354:       assertFalse(node1.isInc());
355:       assertFalse(node1.isFor());
356:       assertFalse(node1.isHook());
357:       assertFalse(node1.isFalse());
358:       assertFalse(node1.isArrayLit());
359:       assertFalse(node1.isDebugger());
360:       assertFalse(node1.isSwitch());
361:       assertEquals((-1), node1.getCharno());
362:       assertFalse(node1.isGetterDef());
363:       assertFalse(node1.isAnd());
364:       assertFalse(node1.isWith());
365:       assertFalse(node1.isScript());
366:       assertFalse(node1.isInstanceOf());
367:       assertFalse(node1.isCatch());
368:       assertFalse(node1.isFunction());
369:       assertFalse(node1.isThis());
370:       assertFalse(node1.isSetterDef());
371:       assertFalse(node1.isRegExp());
372:       assertFalse(node1.isTry());
373:       assertFalse(node1.isThrow());
374:       assertFalse(node1.isIf());
375:       assertFalse(node1.isNE());
376:       assertFalse(node2.isTypeOf());
377:       assertFalse(node2.isNumber());
378:       assertEquals((-1), node2.getSourcePosition());
379:       assertFalse(node2.isDec());
380:       assertFalse(node2.hasChildren());
381:       assertFalse(node2.isLabelName());
382:       assertFalse(node2.isAssignAdd());
383:       assertFalse(node2.hasOneChild());
384:       assertFalse(node2.isOr());
385:       assertFalse(node2.isNew());
386:       assertFalse(node2.isDo());
387:       assertFalse(node2.isAnd());
388:       assertFalse(node2.isVar());
389:       assertFalse(node2.isCast());
390:       assertFalse(node2.isLabel());
391:       assertFalse(node2.isContinue());
392:       assertFalse(node2.isThis());
393:       assertFalse(node2.isSetterDef());
394:       assertFalse(node2.isStringKey());
395:       assertFalse(node2.isThrow());
396:       assertFalse(node2.isParamList());
397:       assertFalse(node2.isRegExp());
398:       assertEquals((-3322), node2.getType());
399:       assertFalse(node2.isScript());
400:       assertFalse(node2.isBlock());
401:       assertFalse(node2.isCase());
402:       assertFalse(node2.isTry());
403:       assertFalse(node2.isInstanceOf());
404:       assertFalse(node2.isHook());
405:       assertFalse(node2.isCatch());
406:       assertEquals((-1), node2.getLineno());
407:       assertFalse(node2.isWith());
408:       assertFalse(node2.hasMoreThanOneChild());
409:       assertFalse(node2.isGetterDef());
410:       assertFalse(node2.isNE());
411:       assertFalse(node2.isFor());
412:       assertFalse(node2.isDelProp());
413:       assertFalse(node2.isIf());
414:       assertFalse(node2.isEmpty());
415:       assertFalse(node2.isString());
416:       assertFalse(node2.isIn());
417:       assertFalse(node2.isDebugger());
418:       assertFalse(node2.isInc());
419:       assertEquals((-1), node2.getCharno());
420:       assertFalse(node2.isDefaultCase());
421:       assertFalse(node2.isSwitch());
422:       assertFalse(node2.isArrayLit());
423:       assertEquals(0, node2.getChildCount());
424:       assertFalse(node2.isFalse());
425:       assertFalse(node2.isFunction());
426:       assertFalse(node2.isNull());
427:       assertFalse(node2.isComma());
428:       assertFalse(node2.isBreak());
429:       assertFalse(node2.isGetProp());
430:       assertFalse(node2.isName());
431:       assertFalse(node2.isAdd());
432:       assertFalse(node2.isNot());
433:       assertFalse(node2.isObjectLit());
434:       assertFalse(node2.isTrue());
435:       assertFalse(node2.isExprResult());
436:       assertFalse(node2.isVoid());
437:       assertFalse(node2.isWhile());
438:       assertFalse(node2.isCall());
439:       assertFalse(node2.isReturn());
440:       assertFalse(node2.isGetElem());
441:       assertFalse(node2.isAssign());
442:       assertNotNull(node2);
443:       assertSame(node0, node2);
444:       assertSame(node2, node0);
445:       assertFalse(node0.equals((Object)node1));
446:       assertFalse(node1.equals((Object)node0));
447:       assertFalse(node2.equals((Object)node1));
448:       assertEquals(37, Node.OPT_ARG_NAME);
449:       assertEquals(56, Node.CHANGE_TIME);
450:       assertEquals(46, Node.IS_NAMESPACE);
451:       assertEquals(47, Node.IS_DISPATCHER);
452:       assertEquals(2, Node.POST_FLAG);
453:       assertEquals(51, Node.STATIC_SOURCE_FILE);
454:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
455:       assertEquals(49, Node.DIRECT_EVAL);
456:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
457:       assertEquals(53, Node.INPUT_ID);
458:       assertEquals(52, Node.LENGTH);
459:       assertEquals(57, Node.REFLECTED_OBJECT);
460:       assertEquals(36, Node.QUOTED_PROP);
461:       assertEquals(30, Node.VAR_ARGS_NAME);
462:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
463:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
464:       assertEquals(29, Node.JSDOC_INFO_PROP);
465:       assertEquals(55, Node.INFERRED_FUNCTION);
466:       assertEquals(15, Node.NO_SIDE_EFFECTS);
467:       assertEquals(57, Node.LAST_PROP);
468:       assertEquals(8, Node.FLAG_NO_THROWS);
469:       assertEquals(39, Node.EMPTY_BLOCK);
470:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
471:       assertEquals(50, Node.FREE_CALL);
472:       assertEquals(40, Node.ORIGINALNAME_PROP);
473:       assertEquals(4095, Node.COLUMN_MASK);
474:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
475:       assertEquals(48, Node.DIRECTIVES);
476:       assertEquals(54, Node.SLASH_V);
477:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
478:       assertEquals(43, Node.IS_CONSTANT_NAME);
479:       assertEquals(12, Node.COLUMN_BITS);
480:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
481:       assertEquals(32, Node.INCRDECR_PROP);
482:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
483:       assertEquals(1, Node.DECR_FLAG);
484:       assertEquals(4095, Node.COLUMN_MASK);
485:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
486:       assertEquals(36, Node.QUOTED_PROP);
487:       assertEquals(8, Node.FLAG_NO_THROWS);
488:       assertEquals(50, Node.FREE_CALL);
489:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
490:       assertEquals(55, Node.INFERRED_FUNCTION);
491:       assertEquals(39, Node.EMPTY_BLOCK);
492:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
493:       assertEquals(53, Node.INPUT_ID);
494:       assertEquals(57, Node.REFLECTED_OBJECT);
495:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
496:       assertEquals(52, Node.LENGTH);
497:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
498:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
499:       assertEquals(56, Node.CHANGE_TIME);
500:       assertEquals(49, Node.DIRECT_EVAL);
501:       assertEquals(48, Node.DIRECTIVES);
502:       assertEquals(37, Node.OPT_ARG_NAME);
503:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
504:       assertEquals(51, Node.STATIC_SOURCE_FILE);
505:       assertEquals(32, Node.INCRDECR_PROP);
506:       assertEquals(12, Node.COLUMN_BITS);
507:       assertEquals(46, Node.IS_NAMESPACE);
508:       assertEquals(15, Node.NO_SIDE_EFFECTS);
509:       assertEquals(57, Node.LAST_PROP);
510:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
511:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
512:       assertEquals(1, Node.DECR_FLAG);
513:       assertEquals(29, Node.JSDOC_INFO_PROP);
514:       assertEquals(54, Node.SLASH_V);
515:       assertEquals(43, Node.IS_CONSTANT_NAME);
516:       assertEquals(47, Node.IS_DISPATCHER);
517:       assertEquals(30, Node.VAR_ARGS_NAME);
518:       assertEquals(2, Node.POST_FLAG);
519:       assertEquals(40, Node.ORIGINALNAME_PROP);
520:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
521:       assertEquals(50, Node.FREE_CALL);
522:       assertEquals(8, Node.FLAG_NO_THROWS);
523:       assertEquals(39, Node.EMPTY_BLOCK);
524:       assertEquals(40, Node.ORIGINALNAME_PROP);
525:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
526:       assertEquals(52, Node.LENGTH);
527:       assertEquals(48, Node.DIRECTIVES);
528:       assertEquals(57, Node.REFLECTED_OBJECT);
529:       assertEquals(54, Node.SLASH_V);
530:       assertEquals(49, Node.DIRECT_EVAL);
531:       assertEquals(1, Node.DECR_FLAG);
532:       assertEquals(4095, Node.COLUMN_MASK);
533:       assertEquals(32, Node.INCRDECR_PROP);
534:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
535:       assertEquals(12, Node.COLUMN_BITS);
536:       assertEquals(29, Node.JSDOC_INFO_PROP);
537:       assertEquals(47, Node.IS_DISPATCHER);
538:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
539:       assertEquals(2, Node.POST_FLAG);
540:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
541:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
542:       assertEquals(46, Node.IS_NAMESPACE);
543:       assertEquals(51, Node.STATIC_SOURCE_FILE);
544:       assertEquals(37, Node.OPT_ARG_NAME);
545:       assertEquals(43, Node.IS_CONSTANT_NAME);
546:       assertEquals(56, Node.CHANGE_TIME);
547:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
548:       assertEquals(30, Node.VAR_ARGS_NAME);
549:       assertEquals(15, Node.NO_SIDE_EFFECTS);
550:       assertEquals(36, Node.QUOTED_PROP);
551:       assertEquals(55, Node.INFERRED_FUNCTION);
552:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
553:       assertEquals(53, Node.INPUT_ID);
554:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
555:       assertEquals(57, Node.LAST_PROP);
556:       
557:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
558:       assertFalse(node1.isContinue());
559:       assertFalse(node1.hasMoreThanOneChild());
560:       assertFalse(node1.isDo());
561:       assertEquals((-1), node1.getLineno());
562:       assertFalse(node1.isNew());
563:       assertFalse(node1.isTypeOf());
564:       assertFalse(node1.isDec());
565:       assertFalse(node1.isWhile());
566:       assertFalse(node1.isReturn());
567:       assertFalse(node1.isLabel());
568:       assertFalse(node1.isAssignAdd());
569:       assertFalse(node1.hasChildren());
570:       assertEquals(39, node1.getType());
571:       assertFalse(node1.isBlock());
572:       assertFalse(node1.isVar());
573:       assertFalse(node1.hasOneChild());
574:       assertFalse(node1.isLabelName());
575:       assertFalse(node1.isCast());
576:       assertFalse(node1.isParamList());
577:       assertEquals((-1), node1.getSourcePosition());
578:       assertFalse(node1.isStringKey());
579:       assertFalse(node1.isObjectLit());
580:       assertFalse(node1.isNot());
581:       assertEquals(0, node1.getChildCount());
582:       assertFalse(node1.isComma());
583:       assertFalse(node1.isGetProp());
584:       assertFalse(node1.isDefaultCase());
585:       assertFalse(node1.isCall());
586:       assertFalse(node1.isName());
587:       assertFalse(node1.isAssign());
588:       assertFalse(node1.isBreak());
589:       assertFalse(node1.isAdd());
590:       assertFalse(node1.isGetElem());
591:       assertFalse(node1.isEmpty());
592:       assertFalse(node1.isTrue());
593:       assertFalse(node1.isExprResult());
594:       assertFalse(node1.isVoid());
595:       assertFalse(node1.isOr());
596:       assertFalse(node1.isDelProp());
597:       assertFalse(node1.isNull());
598:       assertFalse(node1.isCase());
599:       assertTrue(node1.isNumber());
600:       assertFalse(node1.isString());
601:       assertFalse(node1.isIn());
602:       assertFalse(node1.isInc());
603:       assertFalse(node1.isFor());
604:       assertFalse(node1.isHook());
605:       assertFalse(node1.isFalse());
606:       assertFalse(node1.isArrayLit());
607:       assertFalse(node1.isDebugger());
608:       assertFalse(node1.isSwitch());
609:       assertEquals((-1), node1.getCharno());
610:       assertFalse(node1.isGetterDef());
611:       assertFalse(node1.isAnd());
612:       assertFalse(node1.isWith());
613:       assertFalse(node1.isScript());
614:       assertFalse(node1.isInstanceOf());
615:       assertFalse(node1.isCatch());
616:       assertFalse(node1.isFunction());
617:       assertFalse(node1.isThis());
618:       assertFalse(node1.isSetterDef());
619:       assertFalse(node1.isRegExp());
620:       assertFalse(node1.isTry());
621:       assertFalse(node1.isThrow());
622:       assertFalse(node1.isIf());
623:       assertFalse(node1.isNE());
624:       assertNotNull(node_FileLevelJsDocBuilder0);
625:       assertFalse(node1.equals((Object)node0));
626:       assertFalse(node1.equals((Object)node2));
627:       assertEquals(4095, Node.COLUMN_MASK);
628:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
629:       assertEquals(36, Node.QUOTED_PROP);
630:       assertEquals(8, Node.FLAG_NO_THROWS);
631:       assertEquals(50, Node.FREE_CALL);
632:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
633:       assertEquals(55, Node.INFERRED_FUNCTION);
634:       assertEquals(39, Node.EMPTY_BLOCK);
635:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
636:       assertEquals(53, Node.INPUT_ID);
637:       assertEquals(57, Node.REFLECTED_OBJECT);
638:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
639:       assertEquals(52, Node.LENGTH);
640:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
641:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
642:       assertEquals(56, Node.CHANGE_TIME);
643:       assertEquals(49, Node.DIRECT_EVAL);
644:       assertEquals(48, Node.DIRECTIVES);
645:       assertEquals(37, Node.OPT_ARG_NAME);
646:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
647:       assertEquals(51, Node.STATIC_SOURCE_FILE);
648:       assertEquals(32, Node.INCRDECR_PROP);
649:       assertEquals(12, Node.COLUMN_BITS);
650:       assertEquals(46, Node.IS_NAMESPACE);
651:       assertEquals(15, Node.NO_SIDE_EFFECTS);
652:       assertEquals(57, Node.LAST_PROP);
653:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
654:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
655:       assertEquals(1, Node.DECR_FLAG);
656:       assertEquals(29, Node.JSDOC_INFO_PROP);
657:       assertEquals(54, Node.SLASH_V);
658:       assertEquals(43, Node.IS_CONSTANT_NAME);
659:       assertEquals(47, Node.IS_DISPATCHER);
660:       assertEquals(30, Node.VAR_ARGS_NAME);
661:       assertEquals(2, Node.POST_FLAG);
662:       assertEquals(40, Node.ORIGINALNAME_PROP);
663:       
664:       node0.setLineno((byte)0);
665:       assertFalse(node0.isInstanceOf());
666:       assertFalse(node0.isBreak());
667:       assertFalse(node0.isGetProp());
668:       assertFalse(node0.isNot());
669:       assertFalse(node0.isAnd());
670:       assertEquals(0, node0.getCharno());
671:       assertFalse(node0.isObjectLit());
672:       assertFalse(node0.isScript());
673:       assertFalse(node0.isExprResult());
674:       assertFalse(node0.hasOneChild());
675:       assertFalse(node0.isWith());
676:       assertFalse(node0.isAssign());
677:       assertFalse(node0.isGetElem());
678:       assertFalse(node0.isThis());
679:       assertFalse(node0.isTypeOf());
680:       assertFalse(node0.hasChildren());
681:       assertFalse(node0.isDec());
682:       assertFalse(node0.isHook());
683:       assertFalse(node0.isComma());
684:       assertFalse(node0.isReturn());
685:       assertFalse(node0.isIn());
686:       assertFalse(node0.isIf());
687:       assertFalse(node0.isString());
688:       assertFalse(node0.isNE());
689:       assertFalse(node0.isCast());
690:       assertFalse(node0.isInc());
691:       assertFalse(node0.isFalse());
692:       assertFalse(node0.isThrow());
693:       assertFalse(node0.isContinue());
694:       assertFalse(node0.isFunction());
695:       assertEquals(0, node0.getLineno());
696:       assertFalse(node0.isParamList());
697:       assertFalse(node0.isCatch());
698:       assertFalse(node0.isSetterDef());
699:       assertFalse(node0.isName());
700:       assertFalse(node0.isStringKey());
701:       assertFalse(node0.isTrue());
702:       assertFalse(node0.isNull());
703:       assertEquals(0, node0.getSourcePosition());
704:       assertFalse(node0.isDebugger());
705:       assertFalse(node0.isTry());
706:       assertFalse(node0.isBlock());
707:       assertFalse(node0.isCall());
708:       assertFalse(node0.isVoid());
709:       assertFalse(node0.isFor());
710:       assertFalse(node0.isWhile());
711:       assertFalse(node0.hasMoreThanOneChild());
712:       assertFalse(node0.isRegExp());
713:       assertEquals((-3322), node0.getType());
714:       assertFalse(node0.isOr());
715:       assertFalse(node0.isLabel());
716:       assertFalse(node0.isAssignAdd());
717:       assertFalse(node0.isCase());
718:       assertFalse(node0.isEmpty());
719:       assertFalse(node0.isLabelName());
720:       assertFalse(node0.isDelProp());
721:       assertFalse(node0.isGetterDef());
722:       assertFalse(node0.isNumber());
723:       assertFalse(node0.isAdd());
724:       assertFalse(node0.isSwitch());
725:       assertFalse(node0.isArrayLit());
726:       assertFalse(node0.isNew());
727:       assertFalse(node0.isDo());
728:       assertFalse(node0.isDefaultCase());
729:       assertFalse(node0.isVar());
730:       assertEquals(0, node0.getChildCount());
731:       assertSame(node0, node2);
732:       assertFalse(node0.equals((Object)node1));
733:       assertEquals(37, Node.OPT_ARG_NAME);
734:       assertEquals(56, Node.CHANGE_TIME);
735:       assertEquals(46, Node.IS_NAMESPACE);
736:       assertEquals(47, Node.IS_DISPATCHER);
737:       assertEquals(2, Node.POST_FLAG);
738:       assertEquals(51, Node.STATIC_SOURCE_FILE);
739:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
740:       assertEquals(49, Node.DIRECT_EVAL);
741:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
742:       assertEquals(53, Node.INPUT_ID);
743:       assertEquals(52, Node.LENGTH);
744:       assertEquals(57, Node.REFLECTED_OBJECT);
745:       assertEquals(36, Node.QUOTED_PROP);
746:       assertEquals(30, Node.VAR_ARGS_NAME);
747:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
748:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
749:       assertEquals(29, Node.JSDOC_INFO_PROP);
750:       assertEquals(55, Node.INFERRED_FUNCTION);
751:       assertEquals(15, Node.NO_SIDE_EFFECTS);
752:       assertEquals(57, Node.LAST_PROP);
753:       assertEquals(8, Node.FLAG_NO_THROWS);
754:       assertEquals(39, Node.EMPTY_BLOCK);
755:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
756:       assertEquals(50, Node.FREE_CALL);
757:       assertEquals(40, Node.ORIGINALNAME_PROP);
758:       assertEquals(4095, Node.COLUMN_MASK);
759:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
760:       assertEquals(48, Node.DIRECTIVES);
761:       assertEquals(54, Node.SLASH_V);
762:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
763:       assertEquals(43, Node.IS_CONSTANT_NAME);
764:       assertEquals(12, Node.COLUMN_BITS);
765:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
766:       assertEquals(32, Node.INCRDECR_PROP);
767:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
768:       assertEquals(1, Node.DECR_FLAG);
769:       
770:       boolean boolean1 = node1.isFromExterns();
771:       assertFalse(node1.isContinue());
772:       assertFalse(node1.hasMoreThanOneChild());
773:       assertFalse(node1.isDo());
774:       assertEquals((-1), node1.getLineno());
775:       assertFalse(node1.isNew());
776:       assertFalse(node1.isTypeOf());
777:       assertFalse(node1.isDec());
778:       assertFalse(node1.isWhile());
779:       assertFalse(node1.isReturn());
780:       assertFalse(node1.isLabel());
781:       assertFalse(node1.isAssignAdd());
782:       assertFalse(node1.hasChildren());
783:       assertEquals(39, node1.getType());
784:       assertFalse(node1.isBlock());
785:       assertFalse(node1.isVar());
786:       assertFalse(node1.hasOneChild());
787:       assertFalse(node1.isLabelName());
788:       assertFalse(node1.isCast());
789:       assertFalse(node1.isParamList());
790:       assertEquals((-1), node1.getSourcePosition());
791:       assertFalse(node1.isStringKey());
792:       assertFalse(node1.isObjectLit());
793:       assertFalse(node1.isNot());
794:       assertEquals(0, node1.getChildCount());
795:       assertFalse(node1.isComma());
796:       assertFalse(node1.isGetProp());
797:       assertFalse(node1.isDefaultCase());
798:       assertFalse(node1.isCall());
799:       assertFalse(node1.isName());
800:       assertFalse(node1.isAssign());
801:       assertFalse(node1.isBreak());
802:       assertFalse(node1.isAdd());
803:       assertFalse(node1.isGetElem());
804:       assertFalse(node1.isEmpty());
805:       assertFalse(node1.isTrue());
806:       assertFalse(node1.isExprResult());
807:       assertFalse(node1.isVoid());
808:       assertFalse(node1.isOr());
809:       assertFalse(node1.isDelProp());
810:       assertFalse(node1.isNull());
811:       assertFalse(node1.isCase());
812:       assertTrue(node1.isNumber());
813:       assertFalse(node1.isString());
814:       assertFalse(node1.isIn());
815:       assertFalse(node1.isInc());
816:       assertFalse(node1.isFor());
817:       assertFalse(node1.isHook());
818:       assertFalse(node1.isFalse());
819:       assertFalse(node1.isArrayLit());
820:       assertFalse(node1.isDebugger());
821:       assertFalse(node1.isSwitch());
822:       assertEquals((-1), node1.getCharno());
823:       assertFalse(node1.isGetterDef());
824:       assertFalse(node1.isAnd());
825:       assertFalse(node1.isWith());
826:       assertFalse(node1.isScript());
827:       assertFalse(node1.isInstanceOf());
828:       assertFalse(node1.isCatch());
829:       assertFalse(node1.isFunction());
830:       assertFalse(node1.isThis());
831:       assertFalse(node1.isSetterDef());
832:       assertFalse(node1.isRegExp());
833:       assertFalse(node1.isTry());
834:       assertFalse(node1.isThrow());
835:       assertFalse(node1.isIf());
836:       assertFalse(node1.isNE());
837:       assertFalse(boolean1);
838:       assertFalse(node1.equals((Object)node0));
839:       assertFalse(node1.equals((Object)node2));
840:       assertTrue(boolean1 == boolean0);
841:       assertEquals(4095, Node.COLUMN_MASK);
842:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
843:       assertEquals(36, Node.QUOTED_PROP);
844:       assertEquals(8, Node.FLAG_NO_THROWS);
845:       assertEquals(50, Node.FREE_CALL);
846:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
847:       assertEquals(55, Node.INFERRED_FUNCTION);
848:       assertEquals(39, Node.EMPTY_BLOCK);
849:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
850:       assertEquals(53, Node.INPUT_ID);
851:       assertEquals(57, Node.REFLECTED_OBJECT);
852:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
853:       assertEquals(52, Node.LENGTH);
854:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
855:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
856:       assertEquals(56, Node.CHANGE_TIME);
857:       assertEquals(49, Node.DIRECT_EVAL);
858:       assertEquals(48, Node.DIRECTIVES);
859:       assertEquals(37, Node.OPT_ARG_NAME);
860:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
861:       assertEquals(51, Node.STATIC_SOURCE_FILE);
862:       assertEquals(32, Node.INCRDECR_PROP);
863:       assertEquals(12, Node.COLUMN_BITS);
864:       assertEquals(46, Node.IS_NAMESPACE);
865:       assertEquals(15, Node.NO_SIDE_EFFECTS);
866:       assertEquals(57, Node.LAST_PROP);
867:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
868:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
869:       assertEquals(1, Node.DECR_FLAG);
870:       assertEquals(29, Node.JSDOC_INFO_PROP);
871:       assertEquals(54, Node.SLASH_V);
872:       assertEquals(43, Node.IS_CONSTANT_NAME);
873:       assertEquals(47, Node.IS_DISPATCHER);
874:       assertEquals(30, Node.VAR_ARGS_NAME);
875:       assertEquals(2, Node.POST_FLAG);
876:       assertEquals(40, Node.ORIGINALNAME_PROP);
877:       
878:       double double0 = node1.getDouble();
879:       assertFalse(node1.isContinue());
880:       assertFalse(node1.hasMoreThanOneChild());
881:       assertFalse(node1.isDo());
882:       assertEquals((-1), node1.getLineno());
883:       assertFalse(node1.isNew());
884:       assertFalse(node1.isTypeOf());
885:       assertFalse(node1.isDec());
886:       assertFalse(node1.isWhile());
887:       assertFalse(node1.isReturn());
888:       assertFalse(node1.isLabel());
889:       assertFalse(node1.isAssignAdd());
890:       assertFalse(node1.hasChildren());
891:       assertEquals(39, node1.getType());
892:       assertFalse(node1.isBlock());
893:       assertFalse(node1.isVar());
894:       assertFalse(node1.hasOneChild());
895:       assertFalse(node1.isLabelName());
896:       assertFalse(node1.isCast());
897:       assertFalse(node1.isParamList());
898:       assertEquals((-1), node1.getSourcePosition());
899:       assertFalse(node1.isStringKey());
900:       assertFalse(node1.isObjectLit());
901:       assertFalse(node1.isNot());
902:       assertEquals(0, node1.getChildCount());
903:       assertFalse(node1.isComma());
904:       assertFalse(node1.isGetProp());
905:       assertFalse(node1.isDefaultCase());
906:       assertFalse(node1.isCall());
907:       assertFalse(node1.isName());
908:       assertFalse(node1.isAssign());
909:       assertFalse(node1.isBreak());
910:       assertFalse(node1.isAdd());
911:       assertFalse(node1.isGetElem());
912:       assertFalse(node1.isEmpty());
913:       assertFalse(node1.isTrue());
914:       assertFalse(node1.isExprResult());
915:       assertFalse(node1.isVoid());
916:       assertFalse(node1.isOr());
917:       assertFalse(node1.isDelProp());
918:       assertFalse(node1.isNull());
919:       assertFalse(node1.isCase());
920:       assertTrue(node1.isNumber());
921:       assertFalse(node1.isString());
922:       assertFalse(node1.isIn());
923:       assertFalse(node1.isInc());
924:       assertFalse(node1.isFor());
925:       assertFalse(node1.isHook());
926:       assertFalse(node1.isFalse());
927:       assertFalse(node1.isArrayLit());
928:       assertFalse(node1.isDebugger());
929:       assertFalse(node1.isSwitch());
930:       assertEquals((-1), node1.getCharno());
931:       assertFalse(node1.isGetterDef());
932:       assertFalse(node1.isAnd());
933:       assertFalse(node1.isWith());
934:       assertFalse(node1.isScript());
935:       assertFalse(node1.isInstanceOf());
936:       assertFalse(node1.isCatch());
937:       assertFalse(node1.isFunction());
938:       assertFalse(node1.isThis());
939:       assertFalse(node1.isSetterDef());
940:       assertFalse(node1.isRegExp());
941:       assertFalse(node1.isTry());
942:       assertFalse(node1.isThrow());
943:       assertFalse(node1.isIf());
944:       assertFalse(node1.isNE());
945:       assertEquals(1.0, double0, 0.01);
946:       assertFalse(node1.equals((Object)node0));
947:       assertFalse(node1.equals((Object)node2));
948:       assertEquals(4095, Node.COLUMN_MASK);
949:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
950:       assertEquals(36, Node.QUOTED_PROP);
951:       assertEquals(8, Node.FLAG_NO_THROWS);
952:       assertEquals(50, Node.FREE_CALL);
953:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
954:       assertEquals(55, Node.INFERRED_FUNCTION);
955:       assertEquals(39, Node.EMPTY_BLOCK);
956:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
957:       assertEquals(53, Node.INPUT_ID);
958:       assertEquals(57, Node.REFLECTED_OBJECT);
959:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
960:       assertEquals(52, Node.LENGTH);
961:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
962:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
963:       assertEquals(56, Node.CHANGE_TIME);
964:       assertEquals(49, Node.DIRECT_EVAL);
965:       assertEquals(48, Node.DIRECTIVES);
966:       assertEquals(37, Node.OPT_ARG_NAME);
967:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
968:       assertEquals(51, Node.STATIC_SOURCE_FILE);
969:       assertEquals(32, Node.INCRDECR_PROP);
970:       assertEquals(12, Node.COLUMN_BITS);
971:       assertEquals(46, Node.IS_NAMESPACE);
972:       assertEquals(15, Node.NO_SIDE_EFFECTS);
973:       assertEquals(57, Node.LAST_PROP);
974:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
975:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
976:       assertEquals(1, Node.DECR_FLAG);
977:       assertEquals(29, Node.JSDOC_INFO_PROP);
978:       assertEquals(54, Node.SLASH_V);
979:       assertEquals(43, Node.IS_CONSTANT_NAME);
980:       assertEquals(47, Node.IS_DISPATCHER);
981:       assertEquals(30, Node.VAR_ARGS_NAME);
982:       assertEquals(2, Node.POST_FLAG);
983:       assertEquals(40, Node.ORIGINALNAME_PROP);
984:       
985:       Node node3 = node0.copyInformationFrom(node1);
986:       assertFalse(node0.isInstanceOf());
987:       assertFalse(node0.isBreak());
988:       assertFalse(node0.isGetProp());
989:       assertFalse(node0.isNot());
990:       assertFalse(node0.isAnd());
991:       assertFalse(node0.isObjectLit());
992:       assertFalse(node0.isScript());
993:       assertFalse(node0.isExprResult());
994:       assertFalse(node0.hasOneChild());
995:       assertFalse(node0.isWith());
996:       assertFalse(node0.isAssign());
997:       assertFalse(node0.isGetElem());
998:       assertFalse(node0.isThis());
999:       assertFalse(node0.isTypeOf());
1000:       assertFalse(node0.hasChildren());
1001:       assertFalse(node0.isDec());
1002:       assertFalse(node0.isHook());
1003:       assertFalse(node0.isComma());
1004:       assertFalse(node0.isReturn());
1005:       assertFalse(node0.isIn());
1006:       assertEquals((-1), node0.getLineno());
1007:       assertFalse(node0.isIf());
1008:       assertFalse(node0.isString());
1009:       assertFalse(node0.isNE());
1010:       assertEquals((-1), node0.getSourcePosition());
1011:       assertFalse(node0.isCast());
1012:       assertFalse(node0.isInc());
1013:       assertFalse(node0.isFalse());
1014:       assertFalse(node0.isThrow());
1015:       assertFalse(node0.isContinue());
1016:       assertFalse(node0.isFunction());
1017:       assertFalse(node0.isParamList());
1018:       assertFalse(node0.isCatch());
1019:       assertFalse(node0.isSetterDef());
1020:       assertFalse(node0.isName());
1021:       assertFalse(node0.isStringKey());
1022:       assertFalse(node0.isTrue());
1023:       assertFalse(node0.isNull());
1024:       assertFalse(node0.isDebugger());
1025:       assertFalse(node0.isTry());
1026:       assertFalse(node0.isBlock());
1027:       assertFalse(node0.isCall());
1028:       assertFalse(node0.isVoid());
1029:       assertFalse(node0.isFor());
1030:       assertFalse(node0.isWhile());
1031:       assertFalse(node0.hasMoreThanOneChild());
1032:       assertFalse(node0.isRegExp());
1033:       assertEquals((-3322), node0.getType());
1034:       assertFalse(node0.isOr());
1035:       assertFalse(node0.isLabel());
1036:       assertFalse(node0.isAssignAdd());
1037:       assertFalse(node0.isCase());
1038:       assertFalse(node0.isEmpty());
1039:       assertFalse(node0.isLabelName());
1040:       assertFalse(node0.isDelProp());
1041:       assertFalse(node0.isGetterDef());
1042:       assertFalse(node0.isNumber());
1043:       assertEquals((-1), node0.getCharno());
1044:       assertFalse(node0.isAdd());
1045:       assertFalse(node0.isSwitch());
1046:       assertFalse(node0.isArrayLit());
1047:       assertFalse(node0.isNew());
1048:       assertFalse(node0.isDo());
1049:       assertFalse(node0.isDefaultCase());
1050:       assertFalse(node0.isVar());
1051:       assertEquals(0, node0.getChildCount());
1052:       assertFalse(node1.isContinue());
1053:       assertFalse(node1.hasMoreThanOneChild());
1054:       assertFalse(node1.isDo());
1055:       assertEquals((-1), node1.getLineno());
1056:       assertFalse(node1.isNew());
1057:       assertFalse(node1.isTypeOf());
1058:       assertFalse(node1.isDec());
1059:       assertFalse(node1.isWhile());
1060:       assertFalse(node1.isReturn());
1061:       assertFalse(node1.isLabel());
1062:       assertFalse(node1.isAssignAdd());
1063:       assertFalse(node1.hasChildren());
1064:       assertEquals(39, node1.getType());
1065:       assertFalse(node1.isBlock());
1066:       assertFalse(node1.isVar());
1067:       assertFalse(node1.hasOneChild());
1068:       assertFalse(node1.isLabelName());
1069:       assertFalse(node1.isCast());
1070:       assertFalse(node1.isParamList());
1071:       assertEquals((-1), node1.getSourcePosition());
1072:       assertFalse(node1.isStringKey());
1073:       assertFalse(node1.isObjectLit());
1074:       assertFalse(node1.isNot());
1075:       assertEquals(0, node1.getChildCount());
1076:       assertFalse(node1.isComma());
1077:       assertFalse(node1.isGetProp());
1078:       assertFalse(node1.isDefaultCase());
1079:       assertFalse(node1.isCall());
1080:       assertFalse(node1.isName());
1081:       assertFalse(node1.isAssign());
1082:       assertFalse(node1.isBreak());
1083:       assertFalse(node1.isAdd());
1084:       assertFalse(node1.isGetElem());
1085:       assertFalse(node1.isEmpty());
1086:       assertFalse(node1.isTrue());
1087:       assertFalse(node1.isExprResult());
1088:       assertFalse(node1.isVoid());
1089:       assertFalse(node1.isOr());
1090:       assertFalse(node1.isDelProp());
1091:       assertFalse(node1.isNull());
1092:       assertFalse(node1.isCase());
1093:       assertTrue(node1.isNumber());
1094:       assertFalse(node1.isString());
1095:       assertFalse(node1.isIn());
1096:       assertFalse(node1.isInc());
1097:       assertFalse(node1.isFor());
1098:       assertFalse(node1.isHook());
1099:       assertFalse(node1.isFalse());
1100:       assertFalse(node1.isArrayLit());
1101:       assertFalse(node1.isDebugger());
1102:       assertFalse(node1.isSwitch());
1103:       assertEquals((-1), node1.getCharno());
1104:       assertFalse(node1.isGetterDef());
1105:       assertFalse(node1.isAnd());
1106:       assertFalse(node1.isWith());
1107:       assertFalse(node1.isScript());
1108:       assertFalse(node1.isInstanceOf());
1109:       assertFalse(node1.isCatch());
1110:       assertFalse(node1.isFunction());
1111:       assertFalse(node1.isThis());
1112:       assertFalse(node1.isSetterDef());
1113:       assertFalse(node1.isRegExp());
1114:       assertFalse(node1.isTry());
1115:       assertFalse(node1.isThrow());
1116:       assertFalse(node1.isIf());
1117:       assertFalse(node1.isNE());
1118:       assertFalse(node3.hasMoreThanOneChild());
1119:       assertFalse(node3.isAssignAdd());
1120:       assertFalse(node3.isContinue());
1121:       assertFalse(node3.isDo());
1122:       assertEquals((-1), node3.getLineno());
1123:       assertFalse(node3.isDec());
1124:       assertEquals((-3322), node3.getType());
1125:       assertFalse(node3.isTypeOf());
1126:       assertFalse(node3.isWhile());
1127:       assertFalse(node3.isBlock());
1128:       assertFalse(node3.isAssign());
1129:       assertFalse(node3.isReturn());
1130:       assertFalse(node3.isLabel());
1131:       assertFalse(node3.hasChildren());
1132:       assertFalse(node3.isVar());
1133:       assertFalse(node3.isNew());
1134:       assertFalse(node3.isGetElem());
1135:       assertFalse(node3.isCall());
1136:       assertFalse(node3.isName());
1137:       assertFalse(node3.isAdd());
1138:       assertFalse(node3.isExprResult());
1139:       assertFalse(node3.isNull());
1140:       assertFalse(node3.isOr());
1141:       assertFalse(node3.isAnd());
1142:       assertFalse(node3.isGetProp());
1143:       assertFalse(node3.isSetterDef());
1144:       assertFalse(node3.isFunction());
1145:       assertFalse(node3.isFalse());
1146:       assertFalse(node3.isThrow());
1147:       assertFalse(node3.isComma());
1148:       assertFalse(node3.isCast());
1149:       assertFalse(node3.isString());
1150:       assertFalse(node3.isObjectLit());
1151:       assertFalse(node3.isNot());
1152:       assertFalse(node3.isDebugger());
1153:       assertEquals((-1), node3.getSourcePosition());
1154:       assertFalse(node3.isIn());
1155:       assertFalse(node3.isCase());
1156:       assertFalse(node3.isFor());
1157:       assertFalse(node3.isVoid());
1158:       assertFalse(node3.isEmpty());
1159:       assertFalse(node3.isInc());
1160:       assertFalse(node3.isBreak());
1161:       assertFalse(node3.isIf());
1162:       assertFalse(node3.isDelProp());
1163:       assertFalse(node3.isNE());
1164:       assertFalse(node3.isTrue());
1165:       assertFalse(node3.isInstanceOf());
1166:       assertEquals(0, node3.getChildCount());
1167:       assertFalse(node3.isCatch());
1168:       assertFalse(node3.isDefaultCase());
1169:       assertFalse(node3.isRegExp());
1170:       assertFalse(node3.isWith());
1171:       assertFalse(node3.isThis());
1172:       assertFalse(node3.hasOneChild());
1173:       assertFalse(node3.isHook());
1174:       assertFalse(node3.isTry());
1175:       assertFalse(node3.isLabelName());
1176:       assertFalse(node3.isArrayLit());
1177:       assertFalse(node3.isNumber());
1178:       assertFalse(node3.isGetterDef());
1179:       assertFalse(node3.isScript());
1180:       assertFalse(node3.isSwitch());
1181:       assertFalse(node3.isParamList());
1182:       assertFalse(node3.isStringKey());
1183:       assertEquals((-1), node3.getCharno());
1184:       assertNotNull(node3);
1185:       assertSame(node0, node2);
1186:       assertSame(node0, node3);
1187:       assertSame(node3, node2);
1188:       assertSame(node3, node0);
1189:       assertFalse(node0.equals((Object)node1));
1190:       assertFalse(node1.equals((Object)node0));
1191:       assertFalse(node1.equals((Object)node2));
1192:       assertFalse(node3.equals((Object)node1));
1193:       assertEquals(37, Node.OPT_ARG_NAME);
1194:       assertEquals(56, Node.CHANGE_TIME);
1195:       assertEquals(46, Node.IS_NAMESPACE);
1196:       assertEquals(47, Node.IS_DISPATCHER);
1197:       assertEquals(2, Node.POST_FLAG);
1198:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1199:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1200:       assertEquals(49, Node.DIRECT_EVAL);
1201:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1202:       assertEquals(53, Node.INPUT_ID);
1203:       assertEquals(52, Node.LENGTH);
1204:       assertEquals(57, Node.REFLECTED_OBJECT);
1205:       assertEquals(36, Node.QUOTED_PROP);
1206:       assertEquals(30, Node.VAR_ARGS_NAME);
1207:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1208:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1209:       assertEquals(29, Node.JSDOC_INFO_PROP);
1210:       assertEquals(55, Node.INFERRED_FUNCTION);
1211:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1212:       assertEquals(57, Node.LAST_PROP);
1213:       assertEquals(8, Node.FLAG_NO_THROWS);
1214:       assertEquals(39, Node.EMPTY_BLOCK);
1215:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1216:       assertEquals(50, Node.FREE_CALL);
1217:       assertEquals(40, Node.ORIGINALNAME_PROP);
1218:       assertEquals(4095, Node.COLUMN_MASK);
1219:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1220:       assertEquals(48, Node.DIRECTIVES);
1221:       assertEquals(54, Node.SLASH_V);
1222:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1223:       assertEquals(43, Node.IS_CONSTANT_NAME);
1224:       assertEquals(12, Node.COLUMN_BITS);
1225:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1226:       assertEquals(32, Node.INCRDECR_PROP);
1227:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1228:       assertEquals(1, Node.DECR_FLAG);
1229:       assertEquals(4095, Node.COLUMN_MASK);
1230:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1231:       assertEquals(36, Node.QUOTED_PROP);
1232:       assertEquals(8, Node.FLAG_NO_THROWS);
1233:       assertEquals(50, Node.FREE_CALL);
1234:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1235:       assertEquals(55, Node.INFERRED_FUNCTION);
1236:       assertEquals(39, Node.EMPTY_BLOCK);
1237:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1238:       assertEquals(53, Node.INPUT_ID);
1239:       assertEquals(57, Node.REFLECTED_OBJECT);
1240:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1241:       assertEquals(52, Node.LENGTH);
1242:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1243:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1244:       assertEquals(56, Node.CHANGE_TIME);
1245:       assertEquals(49, Node.DIRECT_EVAL);
1246:       assertEquals(48, Node.DIRECTIVES);
1247:       assertEquals(37, Node.OPT_ARG_NAME);
1248:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1249:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1250:       assertEquals(32, Node.INCRDECR_PROP);
1251:       assertEquals(12, Node.COLUMN_BITS);
1252:       assertEquals(46, Node.IS_NAMESPACE);
1253:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1254:       assertEquals(57, Node.LAST_PROP);
1255:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1256:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1257:       assertEquals(1, Node.DECR_FLAG);
1258:       assertEquals(29, Node.JSDOC_INFO_PROP);
1259:       assertEquals(54, Node.SLASH_V);
1260:       assertEquals(43, Node.IS_CONSTANT_NAME);
1261:       assertEquals(47, Node.IS_DISPATCHER);
1262:       assertEquals(30, Node.VAR_ARGS_NAME);
1263:       assertEquals(2, Node.POST_FLAG);
1264:       assertEquals(40, Node.ORIGINALNAME_PROP);
1265:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1266:       assertEquals(4095, Node.COLUMN_MASK);
1267:       assertEquals(8, Node.FLAG_NO_THROWS);
1268:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1269:       assertEquals(50, Node.FREE_CALL);
1270:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1271:       assertEquals(55, Node.INFERRED_FUNCTION);
1272:       assertEquals(39, Node.EMPTY_BLOCK);
1273:       assertEquals(54, Node.SLASH_V);
1274:       assertEquals(30, Node.VAR_ARGS_NAME);
1275:       assertEquals(43, Node.IS_CONSTANT_NAME);
1276:       assertEquals(40, Node.ORIGINALNAME_PROP);
1277:       assertEquals(46, Node.IS_NAMESPACE);
1278:       assertEquals(2, Node.POST_FLAG);
1279:       assertEquals(12, Node.COLUMN_BITS);
1280:       assertEquals(47, Node.IS_DISPATCHER);
1281:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1282:       assertEquals(29, Node.JSDOC_INFO_PROP);
1283:       assertEquals(57, Node.LAST_PROP);
1284:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1285:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1286:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1287:       assertEquals(32, Node.INCRDECR_PROP);
1288:       assertEquals(1, Node.DECR_FLAG);
1289:       assertEquals(52, Node.LENGTH);
1290:       assertEquals(53, Node.INPUT_ID);
1291:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1292:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1293:       assertEquals(57, Node.REFLECTED_OBJECT);
1294:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1295:       assertEquals(36, Node.QUOTED_PROP);
1296:       assertEquals(49, Node.DIRECT_EVAL);
1297:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1298:       assertEquals(56, Node.CHANGE_TIME);
1299:       assertEquals(48, Node.DIRECTIVES);
1300:       assertEquals(37, Node.OPT_ARG_NAME);
1301:       
1302:       boolean boolean2 = node2.isQualifiedName();
1303:       assertFalse(node0.isInstanceOf());
1304:       assertFalse(node0.isBreak());
1305:       assertFalse(node0.isGetProp());
1306:       assertFalse(node0.isNot());
1307:       assertFalse(node0.isAnd());
1308:       assertFalse(node0.isObjectLit());
1309:       assertFalse(node0.isScript());
1310:       assertFalse(node0.isExprResult());
1311:       assertFalse(node0.hasOneChild());
1312:       assertFalse(node0.isWith());
1313:       assertFalse(node0.isAssign());
1314:       assertFalse(node0.isGetElem());
1315:       assertFalse(node0.isThis());
1316:       assertFalse(node0.isTypeOf());
1317:       assertFalse(node0.hasChildren());
1318:       assertFalse(node0.isDec());
1319:       assertFalse(node0.isHook());
1320:       assertFalse(node0.isComma());
1321:       assertFalse(node0.isReturn());
1322:       assertFalse(node0.isIn());
1323:       assertEquals((-1), node0.getLineno());
1324:       assertFalse(node0.isIf());
1325:       assertFalse(node0.isString());
1326:       assertFalse(node0.isNE());
1327:       assertEquals((-1), node0.getSourcePosition());
1328:       assertFalse(node0.isCast());
1329:       assertFalse(node0.isInc());
1330:       assertFalse(node0.isFalse());
1331:       assertFalse(node0.isThrow());
1332:       assertFalse(node0.isContinue());
1333:       assertFalse(node0.isFunction());
1334:       assertFalse(node0.isParamList());
1335:       assertFalse(node0.isCatch());
1336:       assertFalse(node0.isSetterDef());
1337:       assertFalse(node0.isName());
1338:       assertFalse(node0.isStringKey());
1339:       assertFalse(node0.isTrue());
1340:       assertFalse(node0.isNull());
1341:       assertFalse(node0.isDebugger());
1342:       assertFalse(node0.isTry());
1343:       assertFalse(node0.isBlock());
1344:       assertFalse(node0.isCall());
1345:       assertFalse(node0.isVoid());
1346:       assertFalse(node0.isFor());
1347:       assertFalse(node0.isWhile());
1348:       assertFalse(node0.hasMoreThanOneChild());
1349:       assertFalse(node0.isRegExp());
1350:       assertEquals((-3322), node0.getType());
1351:       assertFalse(node0.isOr());
1352:       assertFalse(node0.isLabel());
1353:       assertFalse(node0.isAssignAdd());
1354:       assertFalse(node0.isCase());
1355:       assertFalse(node0.isEmpty());
1356:       assertFalse(node0.isLabelName());
1357:       assertFalse(node0.isDelProp());
1358:       assertFalse(node0.isGetterDef());
1359:       assertFalse(node0.isNumber());
1360:       assertEquals((-1), node0.getCharno());
1361:       assertFalse(node0.isAdd());
1362:       assertFalse(node0.isSwitch());
1363:       assertFalse(node0.isArrayLit());
1364:       assertFalse(node0.isNew());
1365:       assertFalse(node0.isDo());
1366:       assertFalse(node0.isDefaultCase());
1367:       assertFalse(node0.isVar());
1368:       assertEquals(0, node0.getChildCount());
1369:       assertFalse(node1.isContinue());
1370:       assertFalse(node1.hasMoreThanOneChild());
1371:       assertFalse(node1.isDo());
1372:       assertEquals((-1), node1.getLineno());
1373:       assertFalse(node1.isNew());
1374:       assertFalse(node1.isTypeOf());
1375:       assertFalse(node1.isDec());
1376:       assertFalse(node1.isWhile());
1377:       assertFalse(node1.isReturn());
1378:       assertFalse(node1.isLabel());
1379:       assertFalse(node1.isAssignAdd());
1380:       assertFalse(node1.hasChildren());
1381:       assertEquals(39, node1.getType());
1382:       assertFalse(node1.isBlock());
1383:       assertFalse(node1.isVar());
1384:       assertFalse(node1.hasOneChild());
1385:       assertFalse(node1.isLabelName());
1386:       assertFalse(node1.isCast());
1387:       assertFalse(node1.isParamList());
1388:       assertEquals((-1), node1.getSourcePosition());
1389:       assertFalse(node1.isStringKey());
1390:       assertFalse(node1.isObjectLit());
1391:       assertFalse(node1.isNot());
1392:       assertEquals(0, node1.getChildCount());
1393:       assertFalse(node1.isComma());
1394:       assertFalse(node1.isGetProp());
1395:       assertFalse(node1.isDefaultCase());
1396:       assertFalse(node1.isCall());
1397:       assertFalse(node1.isName());
1398:       assertFalse(node1.isAssign());
1399:       assertFalse(node1.isBreak());
1400:       assertFalse(node1.isAdd());
1401:       assertFalse(node1.isGetElem());
1402:       assertFalse(node1.isEmpty());
1403:       assertFalse(node1.isTrue());
1404:       assertFalse(node1.isExprResult());
1405:       assertFalse(node1.isVoid());
1406:       assertFalse(node1.isOr());
1407:       assertFalse(node1.isDelProp());
1408:       assertFalse(node1.isNull());
1409:       assertFalse(node1.isCase());
1410:       assertTrue(node1.isNumber());
1411:       assertFalse(node1.isString());
1412:       assertFalse(node1.isIn());
1413:       assertFalse(node1.isInc());
1414:       assertFalse(node1.isFor());
1415:       assertFalse(node1.isHook());
1416:       assertFalse(node1.isFalse());
1417:       assertFalse(node1.isArrayLit());
1418:       assertFalse(node1.isDebugger());
1419:       assertFalse(node1.isSwitch());
1420:       assertEquals((-1), node1.getCharno());
1421:       assertFalse(node1.isGetterDef());
1422:       assertFalse(node1.isAnd());
1423:       assertFalse(node1.isWith());
1424:       assertFalse(node1.isScript());
1425:       assertFalse(node1.isInstanceOf());
1426:       assertFalse(node1.isCatch());
1427:       assertFalse(node1.isFunction());
1428:       assertFalse(node1.isThis());
1429:       assertFalse(node1.isSetterDef());
1430:       assertFalse(node1.isRegExp());
1431:       assertFalse(node1.isTry());
1432:       assertFalse(node1.isThrow());
1433:       assertFalse(node1.isIf());
1434:       assertFalse(node1.isNE());
1435:       assertFalse(node2.isTypeOf());
1436:       assertFalse(node2.isNumber());
1437:       assertEquals((-1), node2.getSourcePosition());
1438:       assertFalse(node2.isDec());
1439:       assertFalse(node2.hasChildren());
1440:       assertFalse(node2.isLabelName());
1441:       assertFalse(node2.isAssignAdd());
1442:       assertFalse(node2.hasOneChild());
1443:       assertFalse(node2.isOr());
1444:       assertFalse(node2.isNew());
1445:       assertFalse(node2.isDo());
1446:       assertFalse(node2.isAnd());
1447:       assertFalse(node2.isVar());
1448:       assertFalse(node2.isCast());
1449:       assertFalse(node2.isLabel());
1450:       assertFalse(node2.isContinue());
1451:       assertFalse(node2.isThis());
1452:       assertFalse(node2.isSetterDef());
1453:       assertFalse(node2.isStringKey());
1454:       assertFalse(node2.isThrow());
1455:       assertFalse(node2.isParamList());
1456:       assertFalse(node2.isRegExp());
1457:       assertEquals((-3322), node2.getType());
1458:       assertFalse(node2.isScript());
1459:       assertFalse(node2.isBlock());
1460:       assertFalse(node2.isCase());
1461:       assertFalse(node2.isTry());
1462:       assertFalse(node2.isInstanceOf());
1463:       assertFalse(node2.isHook());
1464:       assertFalse(node2.isCatch());
1465:       assertEquals((-1), node2.getLineno());
1466:       assertFalse(node2.isWith());
1467:       assertFalse(node2.hasMoreThanOneChild());
1468:       assertFalse(node2.isGetterDef());
1469:       assertFalse(node2.isNE());
1470:       assertFalse(node2.isFor());
1471:       assertFalse(node2.isDelProp());
1472:       assertFalse(node2.isIf());
1473:       assertFalse(node2.isEmpty());
1474:       assertFalse(node2.isString());
1475:       assertFalse(node2.isIn());
1476:       assertFalse(node2.isDebugger());
1477:       assertFalse(node2.isInc());
1478:       assertEquals((-1), node2.getCharno());
1479:       assertFalse(node2.isDefaultCase());
1480:       assertFalse(node2.isSwitch());
1481:       assertFalse(node2.isArrayLit());
1482:       assertEquals(0, node2.getChildCount());
1483:       assertFalse(node2.isFalse());
1484:       assertFalse(node2.isFunction());
1485:       assertFalse(node2.isNull());
1486:       assertFalse(node2.isComma());
1487:       assertFalse(node2.isBreak());
1488:       assertFalse(node2.isGetProp());
1489:       assertFalse(node2.isName());
1490:       assertFalse(node2.isAdd());
1491:       assertFalse(node2.isNot());
1492:       assertFalse(node2.isObjectLit());
1493:       assertFalse(node2.isTrue());
1494:       assertFalse(node2.isExprResult());
1495:       assertFalse(node2.isVoid());
1496:       assertFalse(node2.isWhile());
1497:       assertFalse(node2.isCall());
1498:       assertFalse(node2.isReturn());
1499:       assertFalse(node2.isGetElem());
1500:       assertFalse(node2.isAssign());
1501:       assertFalse(boolean2);
1502:       assertSame(node0, node2);
1503:       assertSame(node0, node3);
1504:       assertSame(node2, node0);
1505:       assertSame(node2, node3);
1506:       assertFalse(node0.equals((Object)node1));
1507:       assertFalse(node1.equals((Object)node0));
1508:       assertFalse(node1.equals((Object)node2));
1509:       assertFalse(node1.equals((Object)node3));
1510:       assertFalse(node2.equals((Object)node1));
1511:       assertTrue(boolean2 == boolean0);
1512:       assertTrue(boolean2 == boolean1);
1513:       assertEquals(37, Node.OPT_ARG_NAME);
1514:       assertEquals(56, Node.CHANGE_TIME);
1515:       assertEquals(46, Node.IS_NAMESPACE);
1516:       assertEquals(47, Node.IS_DISPATCHER);
1517:       assertEquals(2, Node.POST_FLAG);
1518:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1519:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1520:       assertEquals(49, Node.DIRECT_EVAL);
1521:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1522:       assertEquals(53, Node.INPUT_ID);
1523:       assertEquals(52, Node.LENGTH);
1524:       assertEquals(57, Node.REFLECTED_OBJECT);
1525:       assertEquals(36, Node.QUOTED_PROP);
1526:       assertEquals(30, Node.VAR_ARGS_NAME);
1527:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1528:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1529:       assertEquals(29, Node.JSDOC_INFO_PROP);
1530:       assertEquals(55, Node.INFERRED_FUNCTION);
1531:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1532:       assertEquals(57, Node.LAST_PROP);
1533:       assertEquals(8, Node.FLAG_NO_THROWS);
1534:       assertEquals(39, Node.EMPTY_BLOCK);
1535:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1536:       assertEquals(50, Node.FREE_CALL);
1537:       assertEquals(40, Node.ORIGINALNAME_PROP);
1538:       assertEquals(4095, Node.COLUMN_MASK);
1539:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1540:       assertEquals(48, Node.DIRECTIVES);
1541:       assertEquals(54, Node.SLASH_V);
1542:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1543:       assertEquals(43, Node.IS_CONSTANT_NAME);
1544:       assertEquals(12, Node.COLUMN_BITS);
1545:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1546:       assertEquals(32, Node.INCRDECR_PROP);
1547:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1548:       assertEquals(1, Node.DECR_FLAG);
1549:       assertEquals(4095, Node.COLUMN_MASK);
1550:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1551:       assertEquals(36, Node.QUOTED_PROP);
1552:       assertEquals(8, Node.FLAG_NO_THROWS);
1553:       assertEquals(50, Node.FREE_CALL);
1554:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1555:       assertEquals(55, Node.INFERRED_FUNCTION);
1556:       assertEquals(39, Node.EMPTY_BLOCK);
1557:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1558:       assertEquals(53, Node.INPUT_ID);
1559:       assertEquals(57, Node.REFLECTED_OBJECT);
1560:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1561:       assertEquals(52, Node.LENGTH);
1562:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1563:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1564:       assertEquals(56, Node.CHANGE_TIME);
1565:       assertEquals(49, Node.DIRECT_EVAL);
1566:       assertEquals(48, Node.DIRECTIVES);
1567:       assertEquals(37, Node.OPT_ARG_NAME);
1568:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1569:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1570:       assertEquals(32, Node.INCRDECR_PROP);
1571:       assertEquals(12, Node.COLUMN_BITS);
1572:       assertEquals(46, Node.IS_NAMESPACE);
1573:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1574:       assertEquals(57, Node.LAST_PROP);
1575:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1576:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1577:       assertEquals(1, Node.DECR_FLAG);
1578:       assertEquals(29, Node.JSDOC_INFO_PROP);
1579:       assertEquals(54, Node.SLASH_V);
1580:       assertEquals(43, Node.IS_CONSTANT_NAME);
1581:       assertEquals(47, Node.IS_DISPATCHER);
1582:       assertEquals(30, Node.VAR_ARGS_NAME);
1583:       assertEquals(2, Node.POST_FLAG);
1584:       assertEquals(40, Node.ORIGINALNAME_PROP);
1585:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1586:       assertEquals(50, Node.FREE_CALL);
1587:       assertEquals(8, Node.FLAG_NO_THROWS);
1588:       assertEquals(39, Node.EMPTY_BLOCK);
1589:       assertEquals(40, Node.ORIGINALNAME_PROP);
1590:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1591:       assertEquals(52, Node.LENGTH);
1592:       assertEquals(48, Node.DIRECTIVES);
1593:       assertEquals(57, Node.REFLECTED_OBJECT);
1594:       assertEquals(54, Node.SLASH_V);
1595:       assertEquals(49, Node.DIRECT_EVAL);
1596:       assertEquals(1, Node.DECR_FLAG);
1597:       assertEquals(4095, Node.COLUMN_MASK);
1598:       assertEquals(32, Node.INCRDECR_PROP);
1599:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1600:       assertEquals(12, Node.COLUMN_BITS);
1601:       assertEquals(29, Node.JSDOC_INFO_PROP);
1602:       assertEquals(47, Node.IS_DISPATCHER);
1603:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1604:       assertEquals(2, Node.POST_FLAG);
1605:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1606:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1607:       assertEquals(46, Node.IS_NAMESPACE);
1608:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1609:       assertEquals(37, Node.OPT_ARG_NAME);
1610:       assertEquals(43, Node.IS_CONSTANT_NAME);
1611:       assertEquals(56, Node.CHANGE_TIME);
1612:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1613:       assertEquals(30, Node.VAR_ARGS_NAME);
1614:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1615:       assertEquals(36, Node.QUOTED_PROP);
1616:       assertEquals(55, Node.INFERRED_FUNCTION);
1617:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1618:       assertEquals(53, Node.INPUT_ID);
1619:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1620:       assertEquals(57, Node.LAST_PROP);
1621:       
1622:       Node node4 = Node.newString(0, "com.google.javascript.rhino.Node$NodeMismatch");
1623:       assertFalse(node4.isVoid());
1624:       assertFalse(node4.isTrue());
1625:       assertFalse(node4.isFunction());
1626:       assertFalse(node4.isDefaultCase());
1627:       assertFalse(node4.isTry());
1628:       assertFalse(node4.isArrayLit());
1629:       assertFalse(node4.isCatch());
1630:       assertFalse(node4.isFor());
1631:       assertEquals(0, node4.getChildCount());
1632:       assertFalse(node4.isRegExp());
1633:       assertFalse(node4.isSetterDef());
1634:       assertFalse(node4.isNE());
1635:       assertFalse(node4.isIf());
1636:       assertFalse(node4.isDelProp());
1637:       assertFalse(node4.isName());
1638:       assertFalse(node4.isEmpty());
1639:       assertFalse(node4.isIn());
1640:       assertFalse(node4.isNull());
1641:       assertEquals((-1), node4.getCharno());
1642:       assertFalse(node4.isBlock());
1643:       assertFalse(node4.isAdd());
1644:       assertFalse(node4.isSwitch());
1645:       assertFalse(node4.isDo());
1646:       assertFalse(node4.isCase());
1647:       assertFalse(node4.isNew());
1648:       assertFalse(node4.isVar());
1649:       assertFalse(node4.hasMoreThanOneChild());
1650:       assertFalse(node4.isHook());
1651:       assertFalse(node4.isLabel());
1652:       assertFalse(node4.isThis());
1653:       assertFalse(node4.isParamList());
1654:       assertFalse(node4.isLabelName());
1655:       assertFalse(node4.isStringKey());
1656:       assertFalse(node4.isGetterDef());
1657:       assertFalse(node4.isNumber());
1658:       assertFalse(node4.isExprResult());
1659:       assertFalse(node4.isScript());
1660:       assertFalse(node4.hasOneChild());
1661:       assertFalse(node4.isGetElem());
1662:       assertFalse(node4.isWith());
1663:       assertFalse(node4.isCast());
1664:       assertFalse(node4.isInstanceOf());
1665:       assertFalse(node4.hasChildren());
1666:       assertFalse(node4.isTypeOf());
1667:       assertFalse(node4.isAssign());
1668:       assertFalse(node4.isDec());
1669:       assertFalse(node4.isAssignAdd());
1670:       assertFalse(node4.isBreak());
1671:       assertEquals((-1), node4.getLineno());
1672:       assertFalse(node4.isOr());
1673:       assertFalse(node4.isInc());
1674:       assertEquals(0, node4.getType());
1675:       assertFalse(node4.isContinue());
1676:       assertFalse(node4.isThrow());
1677:       assertFalse(node4.isCall());
1678:       assertFalse(node4.isFalse());
1679:       assertFalse(node4.isWhile());
1680:       assertFalse(node4.isReturn());
1681:       assertFalse(node4.isComma());
1682:       assertFalse(node4.isGetProp());
1683:       assertFalse(node4.isAnd());
1684:       assertFalse(node4.isObjectLit());
1685:       assertFalse(node4.isString());
1686:       assertFalse(node4.isNot());
1687:       assertFalse(node4.isDebugger());
1688:       assertEquals((-1), node4.getSourcePosition());
1689:       assertNotNull(node4);
1690:       assertNotSame(node4, node2);
1691:       assertNotSame(node4, node0);
1692:       assertNotSame(node4, node3);
1693:       assertFalse(node4.equals((Object)node2));
1694:       assertFalse(node4.equals((Object)node0));
1695:       assertFalse(node4.equals((Object)node3));
1696:       assertFalse(node4.equals((Object)node1));
1697:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1698:       assertEquals(57, Node.LAST_PROP);
1699:       assertEquals(54, Node.SLASH_V);
1700:       assertEquals(52, Node.LENGTH);
1701:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1702:       assertEquals(30, Node.VAR_ARGS_NAME);
1703:       assertEquals(12, Node.COLUMN_BITS);
1704:       assertEquals(32, Node.INCRDECR_PROP);
1705:       assertEquals(1, Node.DECR_FLAG);
1706:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1707:       assertEquals(47, Node.IS_DISPATCHER);
1708:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1709:       assertEquals(50, Node.FREE_CALL);
1710:       assertEquals(2, Node.POST_FLAG);
1711:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1712:       assertEquals(40, Node.ORIGINALNAME_PROP);
1713:       assertEquals(46, Node.IS_NAMESPACE);
1714:       assertEquals(43, Node.IS_CONSTANT_NAME);
1715:       assertEquals(36, Node.QUOTED_PROP);
1716:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1717:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1718:       assertEquals(55, Node.INFERRED_FUNCTION);
1719:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1720:       assertEquals(29, Node.JSDOC_INFO_PROP);
1721:       assertEquals(53, Node.INPUT_ID);
1722:       assertEquals(8, Node.FLAG_NO_THROWS);
1723:       assertEquals(39, Node.EMPTY_BLOCK);
1724:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1725:       assertEquals(56, Node.CHANGE_TIME);
1726:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1727:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1728:       assertEquals(4095, Node.COLUMN_MASK);
1729:       assertEquals(57, Node.REFLECTED_OBJECT);
1730:       assertEquals(49, Node.DIRECT_EVAL);
1731:       assertEquals(37, Node.OPT_ARG_NAME);
1732:       assertEquals(48, Node.DIRECTIVES);
1733:       
1734:       Iterable<Node> iterable0 = node4.children();
1735:       assertFalse(node4.isVoid());
1736:       assertFalse(node4.isTrue());
1737:       assertFalse(node4.isFunction());
1738:       assertFalse(node4.isDefaultCase());
1739:       assertFalse(node4.isTry());
1740:       assertFalse(node4.isArrayLit());
1741:       assertFalse(node4.isCatch());
1742:       assertFalse(node4.isFor());
1743:       assertEquals(0, node4.getChildCount());
1744:       assertFalse(node4.isRegExp());
1745:       assertFalse(node4.isSetterDef());
1746:       assertFalse(node4.isNE());
1747:       assertFalse(node4.isIf());
1748:       assertFalse(node4.isDelProp());
1749:       assertFalse(node4.isName());
1750:       assertFalse(node4.isEmpty());
1751:       assertFalse(node4.isIn());
1752:       assertFalse(node4.isNull());
1753:       assertEquals((-1), node4.getCharno());
1754:       assertFalse(node4.isBlock());
1755:       assertFalse(node4.isAdd());
1756:       assertFalse(node4.isSwitch());
1757:       assertFalse(node4.isDo());
1758:       assertFalse(node4.isCase());
1759:       assertFalse(node4.isNew());
1760:       assertFalse(node4.isVar());
1761:       assertFalse(node4.hasMoreThanOneChild());
1762:       assertFalse(node4.isHook());
1763:       assertFalse(node4.isLabel());
1764:       assertFalse(node4.isThis());
1765:       assertFalse(node4.isParamList());
1766:       assertFalse(node4.isLabelName());
1767:       assertFalse(node4.isStringKey());
1768:       assertFalse(node4.isGetterDef());
1769:       assertFalse(node4.isNumber());
1770:       assertFalse(node4.isExprResult());
1771:       assertFalse(node4.isScript());
1772:       assertFalse(node4.hasOneChild());
1773:       assertFalse(node4.isGetElem());
1774:       assertFalse(node4.isWith());
1775:       assertFalse(node4.isCast());
1776:       assertFalse(node4.isInstanceOf());
1777:       assertFalse(node4.hasChildren());
1778:       assertFalse(node4.isTypeOf());
1779:       assertFalse(node4.isAssign());
1780:       assertFalse(node4.isDec());
1781:       assertFalse(node4.isAssignAdd());
1782:       assertFalse(node4.isBreak());
1783:       assertEquals((-1), node4.getLineno());
1784:       assertFalse(node4.isOr());
1785:       assertFalse(node4.isInc());
1786:       assertEquals(0, node4.getType());
1787:       assertFalse(node4.isContinue());
1788:       assertFalse(node4.isThrow());
1789:       assertFalse(node4.isCall());
1790:       assertFalse(node4.isFalse());
1791:       assertFalse(node4.isWhile());
1792:       assertFalse(node4.isReturn());
1793:       assertFalse(node4.isComma());
1794:       assertFalse(node4.isGetProp());
1795:       assertFalse(node4.isAnd());
1796:       assertFalse(node4.isObjectLit());
1797:       assertFalse(node4.isString());
1798:       assertFalse(node4.isNot());
1799:       assertFalse(node4.isDebugger());
1800:       assertEquals((-1), node4.getSourcePosition());
1801:       assertNotNull(iterable0);
1802:       assertNotSame(node4, node2);
1803:       assertNotSame(node4, node0);
1804:       assertNotSame(node4, node3);
1805:       assertFalse(node4.equals((Object)node2));
1806:       assertFalse(node4.equals((Object)node0));
1807:       assertFalse(node4.equals((Object)node3));
1808:       assertFalse(node4.equals((Object)node1));
1809:       assertFalse(iterable0.contains(node4));
1810:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1811:       assertEquals(57, Node.LAST_PROP);
1812:       assertEquals(54, Node.SLASH_V);
1813:       assertEquals(52, Node.LENGTH);
1814:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1815:       assertEquals(30, Node.VAR_ARGS_NAME);
1816:       assertEquals(12, Node.COLUMN_BITS);
1817:       assertEquals(32, Node.INCRDECR_PROP);
1818:       assertEquals(1, Node.DECR_FLAG);
1819:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1820:       assertEquals(47, Node.IS_DISPATCHER);
1821:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1822:       assertEquals(50, Node.FREE_CALL);
1823:       assertEquals(2, Node.POST_FLAG);
1824:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1825:       assertEquals(40, Node.ORIGINALNAME_PROP);
1826:       assertEquals(46, Node.IS_NAMESPACE);
1827:       assertEquals(43, Node.IS_CONSTANT_NAME);
1828:       assertEquals(36, Node.QUOTED_PROP);
1829:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1830:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1831:       assertEquals(55, Node.INFERRED_FUNCTION);
1832:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1833:       assertEquals(29, Node.JSDOC_INFO_PROP);
1834:       assertEquals(53, Node.INPUT_ID);
1835:       assertEquals(8, Node.FLAG_NO_THROWS);
1836:       assertEquals(39, Node.EMPTY_BLOCK);
1837:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1838:       assertEquals(56, Node.CHANGE_TIME);
1839:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1840:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1841:       assertEquals(4095, Node.COLUMN_MASK);
1842:       assertEquals(57, Node.REFLECTED_OBJECT);
1843:       assertEquals(49, Node.DIRECT_EVAL);
1844:       assertEquals(37, Node.OPT_ARG_NAME);
1845:       assertEquals(48, Node.DIRECTIVES);
1846:       
1847:       boolean boolean3 = node0.isQuotedString();
1848:       assertFalse(node0.isInstanceOf());
1849:       assertFalse(node0.isBreak());
1850:       assertFalse(node0.isGetProp());
1851:       assertFalse(node0.isNot());
1852:       assertFalse(node0.isAnd());
1853:       assertFalse(node0.isObjectLit());
1854:       assertFalse(node0.isScript());
1855:       assertFalse(node0.isExprResult());
1856:       assertFalse(node0.hasOneChild());
1857:       assertFalse(node0.isWith());
1858:       assertFalse(node0.isAssign());
1859:       assertFalse(node0.isGetElem());
1860:       assertFalse(node0.isThis());
1861:       assertFalse(node0.isTypeOf());
1862:       assertFalse(node0.hasChildren());
1863:       assertFalse(node0.isDec());
1864:       assertFalse(node0.isHook());
1865:       assertFalse(node0.isComma());
1866:       assertFalse(node0.isReturn());
1867:       assertFalse(node0.isIn());
1868:       assertEquals((-1), node0.getLineno());
1869:       assertFalse(node0.isIf());
1870:       assertFalse(node0.isString());
1871:       assertFalse(node0.isNE());
1872:       assertEquals((-1), node0.getSourcePosition());
1873:       assertFalse(node0.isCast());
1874:       assertFalse(node0.isInc());
1875:       assertFalse(node0.isFalse());
1876:       assertFalse(node0.isThrow());
1877:       assertFalse(node0.isContinue());
1878:       assertFalse(node0.isFunction());
1879:       assertFalse(node0.isParamList());
1880:       assertFalse(node0.isCatch());
1881:       assertFalse(node0.isSetterDef());
1882:       assertFalse(node0.isName());
1883:       assertFalse(node0.isStringKey());
1884:       assertFalse(node0.isTrue());
1885:       assertFalse(node0.isNull());
1886:       assertFalse(node0.isDebugger());
1887:       assertFalse(node0.isTry());
1888:       assertFalse(node0.isBlock());
1889:       assertFalse(node0.isCall());
1890:       assertFalse(node0.isVoid());
1891:       assertFalse(node0.isFor());
1892:       assertFalse(node0.isWhile());
1893:       assertFalse(node0.hasMoreThanOneChild());
1894:       assertFalse(node0.isRegExp());
1895:       assertEquals((-3322), node0.getType());
1896:       assertFalse(node0.isOr());
1897:       assertFalse(node0.isLabel());
1898:       assertFalse(node0.isAssignAdd());
1899:       assertFalse(node0.isCase());
1900:       assertFalse(node0.isEmpty());
1901:       assertFalse(node0.isLabelName());
1902:       assertFalse(node0.isDelProp());
1903:       assertFalse(node0.isGetterDef());
1904:       assertFalse(node0.isNumber());
1905:       assertEquals((-1), node0.getCharno());
1906:       assertFalse(node0.isAdd());
1907:       assertFalse(node0.isSwitch());
1908:       assertFalse(node0.isArrayLit());
1909:       assertFalse(node0.isNew());
1910:       assertFalse(node0.isDo());
1911:       assertFalse(node0.isDefaultCase());
1912:       assertFalse(node0.isVar());
1913:       assertEquals(0, node0.getChildCount());
1914:       assertFalse(boolean3);
1915:       assertNotSame(node0, node4);
1916:       assertSame(node0, node2);
1917:       assertSame(node0, node3);
1918:       assertTrue(boolean3 == boolean1);
1919:       assertTrue(boolean3 == boolean0);
1920:       assertTrue(boolean3 == boolean2);
1921:       assertFalse(node0.equals((Object)node1));
1922:       assertFalse(node0.equals((Object)node4));
1923:       assertEquals(37, Node.OPT_ARG_NAME);
1924:       assertEquals(56, Node.CHANGE_TIME);
1925:       assertEquals(46, Node.IS_NAMESPACE);
1926:       assertEquals(47, Node.IS_DISPATCHER);
1927:       assertEquals(2, Node.POST_FLAG);
1928:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1929:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1930:       assertEquals(49, Node.DIRECT_EVAL);
1931:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1932:       assertEquals(53, Node.INPUT_ID);
1933:       assertEquals(52, Node.LENGTH);
1934:       assertEquals(57, Node.REFLECTED_OBJECT);
1935:       assertEquals(36, Node.QUOTED_PROP);
1936:       assertEquals(30, Node.VAR_ARGS_NAME);
1937:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1938:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1939:       assertEquals(29, Node.JSDOC_INFO_PROP);
1940:       assertEquals(55, Node.INFERRED_FUNCTION);
1941:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1942:       assertEquals(57, Node.LAST_PROP);
1943:       assertEquals(8, Node.FLAG_NO_THROWS);
1944:       assertEquals(39, Node.EMPTY_BLOCK);
1945:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1946:       assertEquals(50, Node.FREE_CALL);
1947:       assertEquals(40, Node.ORIGINALNAME_PROP);
1948:       assertEquals(4095, Node.COLUMN_MASK);
1949:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1950:       assertEquals(48, Node.DIRECTIVES);
1951:       assertEquals(54, Node.SLASH_V);
1952:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1953:       assertEquals(43, Node.IS_CONSTANT_NAME);
1954:       assertEquals(12, Node.COLUMN_BITS);
1955:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1956:       assertEquals(32, Node.INCRDECR_PROP);
1957:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1958:       assertEquals(1, Node.DECR_FLAG);
1959:       
1960:       Iterable<Node> iterable1 = node2.children();
1961:       assertFalse(node0.isInstanceOf());
1962:       assertFalse(node0.isBreak());
1963:       assertFalse(node0.isGetProp());
1964:       assertFalse(node0.isNot());
1965:       assertFalse(node0.isAnd());
1966:       assertFalse(node0.isObjectLit());
1967:       assertFalse(node0.isScript());
1968:       assertFalse(node0.isExprResult());
1969:       assertFalse(node0.hasOneChild());
1970:       assertFalse(node0.isWith());
1971:       assertFalse(node0.isAssign());
1972:       assertFalse(node0.isGetElem());
1973:       assertFalse(node0.isThis());
1974:       assertFalse(node0.isTypeOf());
1975:       assertFalse(node0.hasChildren());
1976:       assertFalse(node0.isDec());
1977:       assertFalse(node0.isHook());
1978:       assertFalse(node0.isComma());
1979:       assertFalse(node0.isReturn());
1980:       assertFalse(node0.isIn());
1981:       assertEquals((-1), node0.getLineno());
1982:       assertFalse(node0.isIf());
1983:       assertFalse(node0.isString());
1984:       assertFalse(node0.isNE());
1985:       assertEquals((-1), node0.getSourcePosition());
1986:       assertFalse(node0.isCast());
1987:       assertFalse(node0.isInc());
1988:       assertFalse(node0.isFalse());
1989:       assertFalse(node0.isThrow());
1990:       assertFalse(node0.isContinue());
1991:       assertFalse(node0.isFunction());
1992:       assertFalse(node0.isParamList());
1993:       assertFalse(node0.isCatch());
1994:       assertFalse(node0.isSetterDef());
1995:       assertFalse(node0.isName());
1996:       assertFalse(node0.isStringKey());
1997:       assertFalse(node0.isTrue());
1998:       assertFalse(node0.isNull());
1999:       assertFalse(node0.isDebugger());
2000:       assertFalse(node0.isTry());
2001:       assertFalse(node0.isBlock());
2002:       assertFalse(node0.isCall());
2003:       assertFalse(node0.isVoid());
2004:       assertFalse(node0.isFor());
2005:       assertFalse(node0.isWhile());
2006:       assertFalse(node0.hasMoreThanOneChild());
2007:       assertFalse(node0.isRegExp());
2008:       assertEquals((-3322), node0.getType());
2009:       assertFalse(node0.isOr());
2010:       assertFalse(node0.isLabel());
2011:       assertFalse(node0.isAssignAdd());
2012:       assertFalse(node0.isCase());
2013:       assertFalse(node0.isEmpty());
2014:       assertFalse(node0.isLabelName());
2015:       assertFalse(node0.isDelProp());
2016:       assertFalse(node0.isGetterDef());
2017:       assertFalse(node0.isNumber());
2018:       assertEquals((-1), node0.getCharno());
2019:       assertFalse(node0.isAdd());
2020:       assertFalse(node0.isSwitch());
2021:       assertFalse(node0.isArrayLit());
2022:       assertFalse(node0.isNew());
2023:       assertFalse(node0.isDo());
2024:       assertFalse(node0.isDefaultCase());
2025:       assertFalse(node0.isVar());
2026:       assertEquals(0, node0.getChildCount());
2027:       assertFalse(node1.isContinue());
2028:       assertFalse(node1.hasMoreThanOneChild());
2029:       assertFalse(node1.isDo());
2030:       assertEquals((-1), node1.getLineno());
2031:       assertFalse(node1.isNew());
2032:       assertFalse(node1.isTypeOf());
2033:       assertFalse(node1.isDec());
2034:       assertFalse(node1.isWhile());
2035:       assertFalse(node1.isReturn());
2036:       assertFalse(node1.isLabel());
2037:       assertFalse(node1.isAssignAdd());
2038:       assertFalse(node1.hasChildren());
2039:       assertEquals(39, node1.getType());
2040:       assertFalse(node1.isBlock());
2041:       assertFalse(node1.isVar());
2042:       assertFalse(node1.hasOneChild());
2043:       assertFalse(node1.isLabelName());
2044:       assertFalse(node1.isCast());
2045:       assertFalse(node1.isParamList());
2046:       assertEquals((-1), node1.getSourcePosition());
2047:       assertFalse(node1.isStringKey());
2048:       assertFalse(node1.isObjectLit());
2049:       assertFalse(node1.isNot());
2050:       assertEquals(0, node1.getChildCount());
2051:       assertFalse(node1.isComma());
2052:       assertFalse(node1.isGetProp());
2053:       assertFalse(node1.isDefaultCase());
2054:       assertFalse(node1.isCall());
2055:       assertFalse(node1.isName());
2056:       assertFalse(node1.isAssign());
2057:       assertFalse(node1.isBreak());
2058:       assertFalse(node1.isAdd());
2059:       assertFalse(node1.isGetElem());
2060:       assertFalse(node1.isEmpty());
2061:       assertFalse(node1.isTrue());
2062:       assertFalse(node1.isExprResult());
2063:       assertFalse(node1.isVoid());
2064:       assertFalse(node1.isOr());
2065:       assertFalse(node1.isDelProp());
2066:       assertFalse(node1.isNull());
2067:       assertFalse(node1.isCase());
2068:       assertTrue(node1.isNumber());
2069:       assertFalse(node1.isString());
2070:       assertFalse(node1.isIn());
2071:       assertFalse(node1.isInc());
2072:       assertFalse(node1.isFor());
2073:       assertFalse(node1.isHook());
2074:       assertFalse(node1.isFalse());
2075:       assertFalse(node1.isArrayLit());
2076:       assertFalse(node1.isDebugger());
2077:       assertFalse(node1.isSwitch());
2078:       assertEquals((-1), node1.getCharno());
2079:       assertFalse(node1.isGetterDef());
2080:       assertFalse(node1.isAnd());
2081:       assertFalse(node1.isWith());
2082:       assertFalse(node1.isScript());
2083:       assertFalse(node1.isInstanceOf());
2084:       assertFalse(node1.isCatch());
2085:       assertFalse(node1.isFunction());
2086:       assertFalse(node1.isThis());
2087:       assertFalse(node1.isSetterDef());
2088:       assertFalse(node1.isRegExp());
2089:       assertFalse(node1.isTry());
2090:       assertFalse(node1.isThrow());
2091:       assertFalse(node1.isIf());
2092:       assertFalse(node1.isNE());
2093:       assertFalse(node2.isTypeOf());
2094:       assertFalse(node2.isNumber());
2095:       assertEquals((-1), node2.getSourcePosition());
2096:       assertFalse(node2.isDec());
2097:       assertFalse(node2.hasChildren());
2098:       assertFalse(node2.isLabelName());
2099:       assertFalse(node2.isAssignAdd());
2100:       assertFalse(node2.hasOneChild());
2101:       assertFalse(node2.isOr());
2102:       assertFalse(node2.isNew());
2103:       assertFalse(node2.isDo());
2104:       assertFalse(node2.isAnd());
2105:       assertFalse(node2.isVar());
2106:       assertFalse(node2.isCast());
2107:       assertFalse(node2.isLabel());
2108:       assertFalse(node2.isContinue());
2109:       assertFalse(node2.isThis());
2110:       assertFalse(node2.isSetterDef());
2111:       assertFalse(node2.isStringKey());
2112:       assertFalse(node2.isThrow());
2113:       assertFalse(node2.isParamList());
2114:       assertFalse(node2.isRegExp());
2115:       assertEquals((-3322), node2.getType());
2116:       assertFalse(node2.isScript());
2117:       assertFalse(node2.isBlock());
2118:       assertFalse(node2.isCase());
2119:       assertFalse(node2.isTry());
2120:       assertFalse(node2.isInstanceOf());
2121:       assertFalse(node2.isHook());
2122:       assertFalse(node2.isCatch());
2123:       assertEquals((-1), node2.getLineno());
2124:       assertFalse(node2.isWith());
2125:       assertFalse(node2.hasMoreThanOneChild());
2126:       assertFalse(node2.isGetterDef());
2127:       assertFalse(node2.isNE());
2128:       assertFalse(node2.isFor());
2129:       assertFalse(node2.isDelProp());
2130:       assertFalse(node2.isIf());
2131:       assertFalse(node2.isEmpty());
2132:       assertFalse(node2.isString());
2133:       assertFalse(node2.isIn());
2134:       assertFalse(node2.isDebugger());
2135:       assertFalse(node2.isInc());
2136:       assertEquals((-1), node2.getCharno());
2137:       assertFalse(node2.isDefaultCase());
2138:       assertFalse(node2.isSwitch());
2139:       assertFalse(node2.isArrayLit());
2140:       assertEquals(0, node2.getChildCount());
2141:       assertFalse(node2.isFalse());
2142:       assertFalse(node2.isFunction());
2143:       assertFalse(node2.isNull());
2144:       assertFalse(node2.isComma());
2145:       assertFalse(node2.isBreak());
2146:       assertFalse(node2.isGetProp());
2147:       assertFalse(node2.isName());
2148:       assertFalse(node2.isAdd());
2149:       assertFalse(node2.isNot());
2150:       assertFalse(node2.isObjectLit());
2151:       assertFalse(node2.isTrue());
2152:       assertFalse(node2.isExprResult());
2153:       assertFalse(node2.isVoid());
2154:       assertFalse(node2.isWhile());
2155:       assertFalse(node2.isCall());
2156:       assertFalse(node2.isReturn());
2157:       assertFalse(node2.isGetElem());
2158:       assertFalse(node2.isAssign());
2159:       assertNotNull(iterable1);
2160:       assertSame(iterable1, iterable0);
2161:       assertNotSame(node0, node4);
2162:       assertSame(node0, node2);
2163:       assertSame(node0, node3);
2164:       assertNotSame(node2, node4);
2165:       assertSame(node2, node0);
2166:       assertSame(node2, node3);
2167:       assertFalse(node0.equals((Object)node1));
2168:       assertFalse(node0.equals((Object)node4));
2169:       assertFalse(node1.equals((Object)node0));
2170:       assertFalse(node1.equals((Object)node2));
2171:       assertFalse(node1.equals((Object)node3));
2172:       assertFalse(node1.equals((Object)node4));
2173:       assertFalse(node2.equals((Object)node4));
2174:       assertFalse(node2.equals((Object)node1));
2175:       assertFalse(iterable1.contains(node4));
2176:       assertEquals(37, Node.OPT_ARG_NAME);
2177:       assertEquals(56, Node.CHANGE_TIME);
2178:       assertEquals(46, Node.IS_NAMESPACE);
2179:       assertEquals(47, Node.IS_DISPATCHER);
2180:       assertEquals(2, Node.POST_FLAG);
2181:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2182:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2183:       assertEquals(49, Node.DIRECT_EVAL);
2184:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2185:       assertEquals(53, Node.INPUT_ID);
2186:       assertEquals(52, Node.LENGTH);
2187:       assertEquals(57, Node.REFLECTED_OBJECT);
2188:       assertEquals(36, Node.QUOTED_PROP);
2189:       assertEquals(30, Node.VAR_ARGS_NAME);
2190:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2191:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2192:       assertEquals(29, Node.JSDOC_INFO_PROP);
2193:       assertEquals(55, Node.INFERRED_FUNCTION);
2194:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2195:       assertEquals(57, Node.LAST_PROP);
2196:       assertEquals(8, Node.FLAG_NO_THROWS);
2197:       assertEquals(39, Node.EMPTY_BLOCK);
2198:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2199:       assertEquals(50, Node.FREE_CALL);
2200:       assertEquals(40, Node.ORIGINALNAME_PROP);
2201:       assertEquals(4095, Node.COLUMN_MASK);
2202:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2203:       assertEquals(48, Node.DIRECTIVES);
2204:       assertEquals(54, Node.SLASH_V);
2205:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2206:       assertEquals(43, Node.IS_CONSTANT_NAME);
2207:       assertEquals(12, Node.COLUMN_BITS);
2208:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2209:       assertEquals(32, Node.INCRDECR_PROP);
2210:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2211:       assertEquals(1, Node.DECR_FLAG);
2212:       assertEquals(4095, Node.COLUMN_MASK);
2213:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2214:       assertEquals(36, Node.QUOTED_PROP);
2215:       assertEquals(8, Node.FLAG_NO_THROWS);
2216:       assertEquals(50, Node.FREE_CALL);
2217:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2218:       assertEquals(55, Node.INFERRED_FUNCTION);
2219:       assertEquals(39, Node.EMPTY_BLOCK);
2220:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2221:       assertEquals(53, Node.INPUT_ID);
2222:       assertEquals(57, Node.REFLECTED_OBJECT);
2223:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2224:       assertEquals(52, Node.LENGTH);
2225:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2226:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2227:       assertEquals(56, Node.CHANGE_TIME);
2228:       assertEquals(49, Node.DIRECT_EVAL);
2229:       assertEquals(48, Node.DIRECTIVES);
2230:       assertEquals(37, Node.OPT_ARG_NAME);
2231:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2232:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2233:       assertEquals(32, Node.INCRDECR_PROP);
2234:       assertEquals(12, Node.COLUMN_BITS);
2235:       assertEquals(46, Node.IS_NAMESPACE);
2236:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2237:       assertEquals(57, Node.LAST_PROP);
2238:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2239:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2240:       assertEquals(1, Node.DECR_FLAG);
2241:       assertEquals(29, Node.JSDOC_INFO_PROP);
2242:       assertEquals(54, Node.SLASH_V);
2243:       assertEquals(43, Node.IS_CONSTANT_NAME);
2244:       assertEquals(47, Node.IS_DISPATCHER);
2245:       assertEquals(30, Node.VAR_ARGS_NAME);
2246:       assertEquals(2, Node.POST_FLAG);
2247:       assertEquals(40, Node.ORIGINALNAME_PROP);
2248:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2249:       assertEquals(50, Node.FREE_CALL);
2250:       assertEquals(8, Node.FLAG_NO_THROWS);
2251:       assertEquals(39, Node.EMPTY_BLOCK);
2252:       assertEquals(40, Node.ORIGINALNAME_PROP);
2253:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2254:       assertEquals(52, Node.LENGTH);
2255:       assertEquals(48, Node.DIRECTIVES);
2256:       assertEquals(57, Node.REFLECTED_OBJECT);
2257:       assertEquals(54, Node.SLASH_V);
2258:       assertEquals(49, Node.DIRECT_EVAL);
2259:       assertEquals(1, Node.DECR_FLAG);
2260:       assertEquals(4095, Node.COLUMN_MASK);
2261:       assertEquals(32, Node.INCRDECR_PROP);
2262:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2263:       assertEquals(12, Node.COLUMN_BITS);
2264:       assertEquals(29, Node.JSDOC_INFO_PROP);
2265:       assertEquals(47, Node.IS_DISPATCHER);
2266:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2267:       assertEquals(2, Node.POST_FLAG);
2268:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2269:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2270:       assertEquals(46, Node.IS_NAMESPACE);
2271:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2272:       assertEquals(37, Node.OPT_ARG_NAME);
2273:       assertEquals(43, Node.IS_CONSTANT_NAME);
2274:       assertEquals(56, Node.CHANGE_TIME);
2275:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2276:       assertEquals(30, Node.VAR_ARGS_NAME);
2277:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2278:       assertEquals(36, Node.QUOTED_PROP);
2279:       assertEquals(55, Node.INFERRED_FUNCTION);
2280:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2281:       assertEquals(53, Node.INPUT_ID);
2282:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2283:       assertEquals(57, Node.LAST_PROP);
2284:       
2285:       int int0 = node1.getLength();
2286:       assertFalse(node1.isContinue());
2287:       assertFalse(node1.hasMoreThanOneChild());
2288:       assertFalse(node1.isDo());
2289:       assertEquals((-1), node1.getLineno());
2290:       assertFalse(node1.isNew());
2291:       assertFalse(node1.isTypeOf());
2292:       assertFalse(node1.isDec());
2293:       assertFalse(node1.isWhile());
2294:       assertFalse(node1.isReturn());
2295:       assertFalse(node1.isLabel());
2296:       assertFalse(node1.isAssignAdd());
2297:       assertFalse(node1.hasChildren());
2298:       assertEquals(39, node1.getType());
2299:       assertFalse(node1.isBlock());
2300:       assertFalse(node1.isVar());
2301:       assertFalse(node1.hasOneChild());
2302:       assertFalse(node1.isLabelName());
2303:       assertFalse(node1.isCast());
2304:       assertFalse(node1.isParamList());
2305:       assertEquals((-1), node1.getSourcePosition());
2306:       assertFalse(node1.isStringKey());
2307:       assertFalse(node1.isObjectLit());
2308:       assertFalse(node1.isNot());
2309:       assertEquals(0, node1.getChildCount());
2310:       assertFalse(node1.isComma());
2311:       assertFalse(node1.isGetProp());
2312:       assertFalse(node1.isDefaultCase());
2313:       assertFalse(node1.isCall());
2314:       assertFalse(node1.isName());
2315:       assertFalse(node1.isAssign());
2316:       assertFalse(node1.isBreak());
2317:       assertFalse(node1.isAdd());
2318:       assertFalse(node1.isGetElem());
2319:       assertFalse(node1.isEmpty());
2320:       assertFalse(node1.isTrue());
2321:       assertFalse(node1.isExprResult());
2322:       assertFalse(node1.isVoid());
2323:       assertFalse(node1.isOr());
2324:       assertFalse(node1.isDelProp());
2325:       assertFalse(node1.isNull());
2326:       assertFalse(node1.isCase());
2327:       assertTrue(node1.isNumber());
2328:       assertFalse(node1.isString());
2329:       assertFalse(node1.isIn());
2330:       assertFalse(node1.isInc());
2331:       assertFalse(node1.isFor());
2332:       assertFalse(node1.isHook());
2333:       assertFalse(node1.isFalse());
2334:       assertFalse(node1.isArrayLit());
2335:       assertFalse(node1.isDebugger());
2336:       assertFalse(node1.isSwitch());
2337:       assertEquals((-1), node1.getCharno());
2338:       assertFalse(node1.isGetterDef());
2339:       assertFalse(node1.isAnd());
2340:       assertFalse(node1.isWith());
2341:       assertFalse(node1.isScript());
2342:       assertFalse(node1.isInstanceOf());
2343:       assertFalse(node1.isCatch());
2344:       assertFalse(node1.isFunction());
2345:       assertFalse(node1.isThis());
2346:       assertFalse(node1.isSetterDef());
2347:       assertFalse(node1.isRegExp());
2348:       assertFalse(node1.isTry());
2349:       assertFalse(node1.isThrow());
2350:       assertFalse(node1.isIf());
2351:       assertFalse(node1.isNE());
2352:       assertEquals(0, int0);
2353:       assertFalse(node1.equals((Object)node0));
2354:       assertFalse(node1.equals((Object)node2));
2355:       assertFalse(node1.equals((Object)node3));
2356:       assertFalse(node1.equals((Object)node4));
2357:       assertEquals(4095, Node.COLUMN_MASK);
2358:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2359:       assertEquals(36, Node.QUOTED_PROP);
2360:       assertEquals(8, Node.FLAG_NO_THROWS);
2361:       assertEquals(50, Node.FREE_CALL);
2362:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2363:       assertEquals(55, Node.INFERRED_FUNCTION);
2364:       assertEquals(39, Node.EMPTY_BLOCK);
2365:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2366:       assertEquals(53, Node.INPUT_ID);
2367:       assertEquals(57, Node.REFLECTED_OBJECT);
2368:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2369:       assertEquals(52, Node.LENGTH);
2370:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2371:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2372:       assertEquals(56, Node.CHANGE_TIME);
2373:       assertEquals(49, Node.DIRECT_EVAL);
2374:       assertEquals(48, Node.DIRECTIVES);
2375:       assertEquals(37, Node.OPT_ARG_NAME);
2376:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2377:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2378:       assertEquals(32, Node.INCRDECR_PROP);
2379:       assertEquals(12, Node.COLUMN_BITS);
2380:       assertEquals(46, Node.IS_NAMESPACE);
2381:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2382:       assertEquals(57, Node.LAST_PROP);
2383:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2384:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2385:       assertEquals(1, Node.DECR_FLAG);
2386:       assertEquals(29, Node.JSDOC_INFO_PROP);
2387:       assertEquals(54, Node.SLASH_V);
2388:       assertEquals(43, Node.IS_CONSTANT_NAME);
2389:       assertEquals(47, Node.IS_DISPATCHER);
2390:       assertEquals(30, Node.VAR_ARGS_NAME);
2391:       assertEquals(2, Node.POST_FLAG);
2392:       assertEquals(40, Node.ORIGINALNAME_PROP);
2393:       
2394:       boolean boolean4 = node4.isQualifiedName();
2395:       assertFalse(node4.isVoid());
2396:       assertFalse(node4.isTrue());
2397:       assertFalse(node4.isFunction());
2398:       assertFalse(node4.isDefaultCase());
2399:       assertFalse(node4.isTry());
2400:       assertFalse(node4.isArrayLit());
2401:       assertFalse(node4.isCatch());
2402:       assertFalse(node4.isFor());
2403:       assertEquals(0, node4.getChildCount());
2404:       assertFalse(node4.isRegExp());
2405:       assertFalse(node4.isSetterDef());
2406:       assertFalse(node4.isNE());
2407:       assertFalse(node4.isIf());
2408:       assertFalse(node4.isDelProp());
2409:       assertFalse(node4.isName());
2410:       assertFalse(node4.isEmpty());
2411:       assertFalse(node4.isIn());
2412:       assertFalse(node4.isNull());
2413:       assertEquals((-1), node4.getCharno());
2414:       assertFalse(node4.isBlock());
2415:       assertFalse(node4.isAdd());
2416:       assertFalse(node4.isSwitch());
2417:       assertFalse(node4.isDo());
2418:       assertFalse(node4.isCase());
2419:       assertFalse(node4.isNew());
2420:       assertFalse(node4.isVar());
2421:       assertFalse(node4.hasMoreThanOneChild());
2422:       assertFalse(node4.isHook());
2423:       assertFalse(node4.isLabel());
2424:       assertFalse(node4.isThis());
2425:       assertFalse(node4.isParamList());
2426:       assertFalse(node4.isLabelName());
2427:       assertFalse(node4.isStringKey());
2428:       assertFalse(node4.isGetterDef());
2429:       assertFalse(node4.isNumber());
2430:       assertFalse(node4.isExprResult());
2431:       assertFalse(node4.isScript());
2432:       assertFalse(node4.hasOneChild());
2433:       assertFalse(node4.isGetElem());
2434:       assertFalse(node4.isWith());
2435:       assertFalse(node4.isCast());
2436:       assertFalse(node4.isInstanceOf());
2437:       assertFalse(node4.hasChildren());
2438:       assertFalse(node4.isTypeOf());
2439:       assertFalse(node4.isAssign());
2440:       assertFalse(node4.isDec());
2441:       assertFalse(node4.isAssignAdd());
2442:       assertFalse(node4.isBreak());
2443:       assertEquals((-1), node4.getLineno());
2444:       assertFalse(node4.isOr());
2445:       assertFalse(node4.isInc());
2446:       assertEquals(0, node4.getType());
2447:       assertFalse(node4.isContinue());
2448:       assertFalse(node4.isThrow());
2449:       assertFalse(node4.isCall());
2450:       assertFalse(node4.isFalse());
2451:       assertFalse(node4.isWhile());
2452:       assertFalse(node4.isReturn());
2453:       assertFalse(node4.isComma());
2454:       assertFalse(node4.isGetProp());
2455:       assertFalse(node4.isAnd());
2456:       assertFalse(node4.isObjectLit());
2457:       assertFalse(node4.isString());
2458:       assertFalse(node4.isNot());
2459:       assertFalse(node4.isDebugger());
2460:       assertEquals((-1), node4.getSourcePosition());
2461:       assertFalse(boolean4);
2462:       assertNotSame(node4, node2);
2463:       assertNotSame(node4, node0);
2464:       assertNotSame(node4, node3);
2465:       assertTrue(boolean4 == boolean2);
2466:       assertTrue(boolean4 == boolean0);
2467:       assertTrue(boolean4 == boolean1);
2468:       assertTrue(boolean4 == boolean3);
2469:       assertFalse(node4.equals((Object)node2));
2470:       assertFalse(node4.equals((Object)node0));
2471:       assertFalse(node4.equals((Object)node3));
2472:       assertFalse(node4.equals((Object)node1));
2473:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2474:       assertEquals(57, Node.LAST_PROP);
2475:       assertEquals(54, Node.SLASH_V);
2476:       assertEquals(52, Node.LENGTH);
2477:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2478:       assertEquals(30, Node.VAR_ARGS_NAME);
2479:       assertEquals(12, Node.COLUMN_BITS);
2480:       assertEquals(32, Node.INCRDECR_PROP);
2481:       assertEquals(1, Node.DECR_FLAG);
2482:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2483:       assertEquals(47, Node.IS_DISPATCHER);
2484:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2485:       assertEquals(50, Node.FREE_CALL);
2486:       assertEquals(2, Node.POST_FLAG);
2487:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2488:       assertEquals(40, Node.ORIGINALNAME_PROP);
2489:       assertEquals(46, Node.IS_NAMESPACE);
2490:       assertEquals(43, Node.IS_CONSTANT_NAME);
2491:       assertEquals(36, Node.QUOTED_PROP);
2492:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2493:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2494:       assertEquals(55, Node.INFERRED_FUNCTION);
2495:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2496:       assertEquals(29, Node.JSDOC_INFO_PROP);
2497:       assertEquals(53, Node.INPUT_ID);
2498:       assertEquals(8, Node.FLAG_NO_THROWS);
2499:       assertEquals(39, Node.EMPTY_BLOCK);
2500:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2501:       assertEquals(56, Node.CHANGE_TIME);
2502:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2503:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2504:       assertEquals(4095, Node.COLUMN_MASK);
2505:       assertEquals(57, Node.REFLECTED_OBJECT);
2506:       assertEquals(49, Node.DIRECT_EVAL);
2507:       assertEquals(37, Node.OPT_ARG_NAME);
2508:       assertEquals(48, Node.DIRECTIVES);
2509:   }
2510: }
RegularFileObject[/tmp/EvoSuite_144_1629223345240/com/google/javascript/rhino/Node_144_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:25 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_144_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_144_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.common.collect.AbstractMapBasedMultimap$1",
120:       "com.google.common.collect.AbstractMapBasedMultimap$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.common.collect.AbstractMultimap$Values",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMultimap$Entries",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.Multimaps$Entries",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_144_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.SimpleErrorReporter",
268:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
269:       "com.google.common.base.Joiner",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
299:       "com.google.javascript.rhino.jstype.JSType$1",
300:       "com.google.javascript.rhino.jstype.JSType",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.JSDocInfo",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.jstype.JSType$TypePair",
343:       "com.google.common.collect.AbstractMultimap$Values",
344:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
345:       "com.google.common.collect.AbstractMapBasedMultimap$1",
346:       "com.google.common.collect.Multimaps$Entries",
347:       "com.google.common.collect.AbstractMultimap$Entries",
348:       "com.google.common.collect.AbstractMapBasedMultimap$2",
349:       "com.google.common.base.Objects",
350:       "com.google.javascript.rhino.jstype.TemplatizedType",
351:       "com.google.javascript.rhino.InputId",
352:       "com.google.javascript.rhino.jstype.NamedType",
353:       "com.google.javascript.rhino.Node$AncestorIterable$1",
354:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.common.collect.AbstractIndexedListIterator",
357:       "com.google.common.collect.Iterators$11",
358:       "com.google.common.collect.ImmutableSet",
359:       "com.google.common.collect.EmptyImmutableSet",
360:       "com.google.common.collect.Platform",
361:       "com.google.common.collect.Iterables",
362:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
365:       "com.google.javascript.rhino.JSDocInfo$Marker",
366:       "com.google.common.collect.Iterators$12",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
371:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
372:     );
373:   }
374: }

[MASTER] 18:02:25.982 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
byte[] byteArray0 = new byte[4];
byteArray0[0] = (byte)0;
byteArray0[1] = (byte)69;
byteArray0[2] = (byte)4;
byteArray0[3] = (byte)24;
boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertFalse(boolean0);
assertArrayEquals(new byte[] {(byte)0, (byte)69, (byte)4, (byte)24}, byteArray0);
assertEquals(4, byteArray0.length);

Node node0 = Node.newString((-3322), "Jzh", (-4946), (-4946));
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isString());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertEquals((-3322), node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertNotNull(node0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);

Node node1 = Node.newNumber((double) 1);
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNew());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node2 = node0.copyInformationFrom(node1);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isString());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertEquals((-3322), node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNew());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAnd());
assertFalse(node2.isVar());
assertFalse(node2.isCast());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isParamList());
assertFalse(node2.isRegExp());
assertEquals((-3322), node2.getType());
assertFalse(node2.isScript());
assertFalse(node2.isBlock());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isCatch());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isDebugger());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isReturn());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertNotNull(node2);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNew());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

node0.setLineno((byte)0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertEquals(0, node0.getCharno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isString());
assertFalse(node0.isNE());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertEquals(0, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertEquals((-3322), node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);

boolean boolean1 = node1.isFromExterns();
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNew());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(boolean1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean1 == boolean0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

double double0 = node1.getDouble();
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNew());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(1.0, double0, 0.01);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node3 = node0.copyInformationFrom(node1);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isString());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertEquals((-3322), node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNew());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isContinue());
assertFalse(node3.isDo());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isDec());
assertEquals((-3322), node3.getType());
assertFalse(node3.isTypeOf());
assertFalse(node3.isWhile());
assertFalse(node3.isBlock());
assertFalse(node3.isAssign());
assertFalse(node3.isReturn());
assertFalse(node3.isLabel());
assertFalse(node3.hasChildren());
assertFalse(node3.isVar());
assertFalse(node3.isNew());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isAdd());
assertFalse(node3.isExprResult());
assertFalse(node3.isNull());
assertFalse(node3.isOr());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFunction());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isComma());
assertFalse(node3.isCast());
assertFalse(node3.isString());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isIn());
assertFalse(node3.isCase());
assertFalse(node3.isFor());
assertFalse(node3.isVoid());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isBreak());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isNE());
assertFalse(node3.isTrue());
assertFalse(node3.isInstanceOf());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCatch());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isRegExp());
assertFalse(node3.isWith());
assertFalse(node3.isThis());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isTry());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isScript());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertEquals((-1), node3.getCharno());
assertNotNull(node3);
assertSame(node0, node2);
assertSame(node0, node3);
assertSame(node3, node2);
assertSame(node3, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);

boolean boolean2 = node2.isQualifiedName();
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isString());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertEquals((-3322), node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNew());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAnd());
assertFalse(node2.isVar());
assertFalse(node2.isCast());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isParamList());
assertFalse(node2.isRegExp());
assertEquals((-3322), node2.getType());
assertFalse(node2.isScript());
assertFalse(node2.isBlock());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isCatch());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isDebugger());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isReturn());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(boolean2);
assertSame(node0, node2);
assertSame(node0, node3);
assertSame(node2, node0);
assertSame(node2, node3);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);

Node node4 = Node.newString(0, "com.google.javascript.rhino.Node$NodeMismatch");
assertFalse(node4.isVoid());
assertFalse(node4.isTrue());
assertFalse(node4.isFunction());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isTry());
assertFalse(node4.isArrayLit());
assertFalse(node4.isCatch());
assertFalse(node4.isFor());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isRegExp());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isDelProp());
assertFalse(node4.isName());
assertFalse(node4.isEmpty());
assertFalse(node4.isIn());
assertFalse(node4.isNull());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isBlock());
assertFalse(node4.isAdd());
assertFalse(node4.isSwitch());
assertFalse(node4.isDo());
assertFalse(node4.isCase());
assertFalse(node4.isNew());
assertFalse(node4.isVar());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isHook());
assertFalse(node4.isLabel());
assertFalse(node4.isThis());
assertFalse(node4.isParamList());
assertFalse(node4.isLabelName());
assertFalse(node4.isStringKey());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isExprResult());
assertFalse(node4.isScript());
assertFalse(node4.hasOneChild());
assertFalse(node4.isGetElem());
assertFalse(node4.isWith());
assertFalse(node4.isCast());
assertFalse(node4.isInstanceOf());
assertFalse(node4.hasChildren());
assertFalse(node4.isTypeOf());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isBreak());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isOr());
assertFalse(node4.isInc());
assertEquals(0, node4.getType());
assertFalse(node4.isContinue());
assertFalse(node4.isThrow());
assertFalse(node4.isCall());
assertFalse(node4.isFalse());
assertFalse(node4.isWhile());
assertFalse(node4.isReturn());
assertFalse(node4.isComma());
assertFalse(node4.isGetProp());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isString());
assertFalse(node4.isNot());
assertFalse(node4.isDebugger());
assertEquals((-1), node4.getSourcePosition());
assertNotNull(node4);
assertNotSame(node4, node2);
assertNotSame(node4, node0);
assertNotSame(node4, node3);
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

Iterable<Node> iterable0 = node4.children();
assertFalse(node4.isVoid());
assertFalse(node4.isTrue());
assertFalse(node4.isFunction());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isTry());
assertFalse(node4.isArrayLit());
assertFalse(node4.isCatch());
assertFalse(node4.isFor());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isRegExp());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isDelProp());
assertFalse(node4.isName());
assertFalse(node4.isEmpty());
assertFalse(node4.isIn());
assertFalse(node4.isNull());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isBlock());
assertFalse(node4.isAdd());
assertFalse(node4.isSwitch());
assertFalse(node4.isDo());
assertFalse(node4.isCase());
assertFalse(node4.isNew());
assertFalse(node4.isVar());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isHook());
assertFalse(node4.isLabel());
assertFalse(node4.isThis());
assertFalse(node4.isParamList());
assertFalse(node4.isLabelName());
assertFalse(node4.isStringKey());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isExprResult());
assertFalse(node4.isScript());
assertFalse(node4.hasOneChild());
assertFalse(node4.isGetElem());
assertFalse(node4.isWith());
assertFalse(node4.isCast());
assertFalse(node4.isInstanceOf());
assertFalse(node4.hasChildren());
assertFalse(node4.isTypeOf());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isBreak());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isOr());
assertFalse(node4.isInc());
assertEquals(0, node4.getType());
assertFalse(node4.isContinue());
assertFalse(node4.isThrow());
assertFalse(node4.isCall());
assertFalse(node4.isFalse());
assertFalse(node4.isWhile());
assertFalse(node4.isReturn());
assertFalse(node4.isComma());
assertFalse(node4.isGetProp());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isString());
assertFalse(node4.isNot());
assertFalse(node4.isDebugger());
assertEquals((-1), node4.getSourcePosition());
assertNotNull(iterable0);
assertNotSame(node4, node2);
assertNotSame(node4, node0);
assertNotSame(node4, node3);
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(iterable0.contains(node4));
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

boolean boolean3 = node0.isQuotedString();
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isString());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertEquals((-3322), node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(boolean3);
assertNotSame(node0, node4);
assertSame(node0, node2);
assertSame(node0, node3);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);

Iterable<Node> iterable1 = node2.children();
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isString());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertEquals((-3322), node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNew());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isAnd());
assertFalse(node2.isVar());
assertFalse(node2.isCast());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isParamList());
assertFalse(node2.isRegExp());
assertEquals((-3322), node2.getType());
assertFalse(node2.isScript());
assertFalse(node2.isBlock());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isCatch());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isString());
assertFalse(node2.isIn());
assertFalse(node2.isDebugger());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isReturn());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertNotNull(iterable1);
assertSame(iterable1, iterable0);
assertNotSame(node0, node4);
assertSame(node0, node2);
assertSame(node0, node3);
assertNotSame(node2, node4);
assertSame(node2, node0);
assertSame(node2, node3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node1));
assertFalse(iterable1.contains(node4));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);

int int0 = node1.getLength();
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isNew());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(0, int0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean4 = node4.isQualifiedName();
assertFalse(node4.isVoid());
assertFalse(node4.isTrue());
assertFalse(node4.isFunction());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isTry());
assertFalse(node4.isArrayLit());
assertFalse(node4.isCatch());
assertFalse(node4.isFor());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isRegExp());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isDelProp());
assertFalse(node4.isName());
assertFalse(node4.isEmpty());
assertFalse(node4.isIn());
assertFalse(node4.isNull());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isBlock());
assertFalse(node4.isAdd());
assertFalse(node4.isSwitch());
assertFalse(node4.isDo());
assertFalse(node4.isCase());
assertFalse(node4.isNew());
assertFalse(node4.isVar());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isHook());
assertFalse(node4.isLabel());
assertFalse(node4.isThis());
assertFalse(node4.isParamList());
assertFalse(node4.isLabelName());
assertFalse(node4.isStringKey());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isExprResult());
assertFalse(node4.isScript());
assertFalse(node4.hasOneChild());
assertFalse(node4.isGetElem());
assertFalse(node4.isWith());
assertFalse(node4.isCast());
assertFalse(node4.isInstanceOf());
assertFalse(node4.hasChildren());
assertFalse(node4.isTypeOf());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isBreak());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isOr());
assertFalse(node4.isInc());
assertEquals(0, node4.getType());
assertFalse(node4.isContinue());
assertFalse(node4.isThrow());
assertFalse(node4.isCall());
assertFalse(node4.isFalse());
assertFalse(node4.isWhile());
assertFalse(node4.isReturn());
assertFalse(node4.isComma());
assertFalse(node4.isGetProp());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isString());
assertFalse(node4.isNot());
assertFalse(node4.isDebugger());
assertEquals((-1), node4.getSourcePosition());
assertFalse(boolean4);
assertNotSame(node4, node2);
assertNotSame(node4, node0);
assertNotSame(node4, node3);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);


[MASTER] 18:02:50.429 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:50.798 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:51.225 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:51.533 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:51.794 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:52.055 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/22
* Done!

* Computation finished
