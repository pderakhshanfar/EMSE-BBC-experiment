* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 8152
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 1395637921
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:43:57.803 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:49:59.886 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:52:06.701 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 300
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 963
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 963
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 116
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 963
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 963
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 963
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 2929
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 179
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 2271
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 3723
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 1665
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 8
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 564
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 6017
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 564
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 963
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 564
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 963
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 3311
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 564
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 5041
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 212
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 496
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 13317
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 564
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 698: 300
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 233
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 1092
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 2110
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 3993
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 25
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 2110
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 1946
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 15715
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 4737
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 5208
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 300
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 125
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 7685
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 1946
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 2785
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - false: 2600
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 54
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 12187
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 1086
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 15431
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 9300
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 2600
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 1946
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 1498
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 113
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 178
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 99
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 1498
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 3307
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 7814
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1168: 1092
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 6447
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1169: 1092
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 10691
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 343
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 827
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 2098
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 2855
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - true: 242
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 501
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 827
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 4737
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1164: 1092
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 2449
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1165: 1092
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 4050
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 678
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - false: 300
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 17
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: root-Branch: 395
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 149
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 346
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - true: 105
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 346
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 3704
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 4918
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 1373
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 44
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 44
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 1645
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1473: 2600
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 664
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 12439
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 22413
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 1354
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 125
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 13503
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 44
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 24
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 24
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 24
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 882
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 827
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 19572
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 1221
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 10161
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 4035
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 882
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 23646
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 2600
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 5105
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 22115
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - true: 60
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 7823
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 599
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 7084
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 79497
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 1498
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 12833
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 3824
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 492: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 212
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 4128
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 250
Number of times BBC is called for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: root-Branch: 125
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 382
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 2523
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 739
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 494: 42
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 5961
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 1221
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 1221
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 300
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 75
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 377
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 15799
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 227
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 1221
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.isOptionalArg()Z: root-Branch: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 24953
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 3819
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 44
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 343
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 1221
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 104
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 1546
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 44
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: root-Branch: 395
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 346
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 8
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 7053
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 42215
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 931
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: Line 2161: 599
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 7685
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 23646
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 11451
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 4914
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 10295
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 952
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 1796
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 4737
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 300
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 6
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 212
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 138
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 1221
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 36985
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 2600
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 3772
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 10161
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 8493
Number of times BBC is called for com.google.javascript.rhino.Node.getCharno()I: Line 1144: 395
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: Line 1839: 300
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 9885
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 13496
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 125
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 892
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 1134
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 36899
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 4554
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 27486
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 882
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 882
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - false: 599
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 23646
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 10040
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2026: 44
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 42215
Number of times BBC is called for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: root-Branch: 963
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 1643
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - true: 300
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 79497
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 23646
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 3414
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 13092
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 21891
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 92
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 212
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 18261
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - false: 15
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1177: 125
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1176: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 1796
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 4564
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 3414
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 2600
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 4967
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 1736
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 1946
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 907
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 2110
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 179
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 44
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 705
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 79497
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 12162
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 705
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 3317
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 1854
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 1092
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 1295
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 1092
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 285
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 353
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1039: 40
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 1643
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 3801
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 44
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1033: 40
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 44
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1034: 40
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 3928
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 1738
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: Line 2135: 125
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 2241
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 125
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - true: 11296
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 433
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 33
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 150
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - false: 14683
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 827
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 3648
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 16875
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 3978
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 24326
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - true: 8
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 3648
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1895: 705
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1894: 705
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 4829
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 1796
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 13092
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 2010
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 1180
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 8893
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 300
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: Line 2403: 1643
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 931
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 563
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1099: 395
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 14240
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 1946
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 1536
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 1946
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 4564
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 4564
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 1946
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 1822
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 12889
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 1946
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1100: 395
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 212
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 1946
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 1946
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 395
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 304
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 596: 4564
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: root-Branch: 1643
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 3374
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 2704
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 4564
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - false: 300
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 2383
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 4564
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 4564
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 1946
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 4564
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 2383
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 22167
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 2383
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 2730
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 2383
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 2469
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 3760
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 1221
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 150
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 4084
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 6588
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - false: 199
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1732: 395
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 2271
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 14547
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 1360
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 6742
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 1580
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 4744
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1720: 395
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 1221
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1721: 395
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: Line 1616: 300
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 4737
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 300
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 5096
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 490
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 1498
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - true: 5259
Number of times BBC is called for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: Line 546: 125
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 2069
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 827
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 1134
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 1405
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 23646
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 1677
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 827
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 3072
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 20537
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 395
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 2578
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 7665
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 395
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 8
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 1372
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 1197
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 149
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1582: 2776
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - true: 599
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 924
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 212
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 1221
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 15775
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 14148
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 1742
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: Line 2351: 212
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch: 300
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 1092
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 233
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 10469
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 19512
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - false: 212
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 25585
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 1498
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 2970
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 164
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 433
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 1221
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 4
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 11950
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 490
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 5842
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 705
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - false: 2
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 13092
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 4872
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 2190
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 1092
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 12523
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 392
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 1375
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 5183
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 8240
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 738
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 5183
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 1092
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 940
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 19512
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 1221
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 9885
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 1360
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 9885
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 9885
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 11312
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 363
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 9885
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 12805
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 9885
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 9885
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 2271
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 4918
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 8
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 17
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 705
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 691
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 6211
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 6211
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 25
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 1643
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1017: 40
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 15316
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1025: 40
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: root-Branch: 705
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 2190
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 9458
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 22167
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 143
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 125
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 4813
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1646: 705
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 1665
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1647: 705
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 212
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 395
Number of times BBC is called for com.google.javascript.rhino.Node.getCharno()I: root-Branch: 395
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 540
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 779
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 4619
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 6344
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 395
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1103: 4026
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 395
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 599
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1650: 705
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: Line 2084: 44
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 151
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1104: 4026
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 5465
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 300
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: Line 2085: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 178
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: root-Branch: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 300
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 192
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 4095
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 60
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 1160
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 15829
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 5096
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 16796
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 5096
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 300
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1634: 5096
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 1792
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 2137
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 4390
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 963
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - false: 4026
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 2069
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 705
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 12251
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - true: 2
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - false: 395
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 118
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 5084
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 564
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 6741
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 212
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 44
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: Line 214: 1643
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 105
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 2881
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 872
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 5345
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 34759
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 490
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 13940
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 2144
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 705
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 29088
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 29088
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 4563
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 5183
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 1944
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: Line 2147: 963
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 1796
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 10551
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: root-Branch: 3475
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 490
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 1360
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 4627
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 6000
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 22378
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 490
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 2271
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 148
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 90
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 705
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 705
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 4143
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 232
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 705
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 515
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 229
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - false: 42
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 13420
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 458
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1137: 827
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 5448
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1136: 827
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 2993
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 938
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 242
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 179
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;II)V: I11 Branch 285 IF_ACMPNE L202 - false: 367
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 72
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 29088
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 5465
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 4187
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 29088
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 29088
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 29088
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 8258
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 2394
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 22796
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 29088
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 2536
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 29088
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 22796
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 22796
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 29541
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 963
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1706: 395
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 2600
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 346
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 51
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1703: 395
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 346
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 11979
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1709: 395
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1708: 395
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1707: 395
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1713: 395
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1712: 395
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: Line 1132: 3475
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 11979
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 19130
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 23646
Number of times BBC is called for com.google.javascript.rhino.Node.isOptionalArg()Z: Line 1935: 125
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 19235
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - true: 395
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: root-Branch: 1498
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 660: 395
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 395
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 662: 395
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 3565
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 10344
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: Line 1951: 1498
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 34164
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 827
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 1221
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 212
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 10989
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 4923
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: Line 889: 599
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 16867
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 26197
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 1221
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 4747
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 1580
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 12889
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 2271
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 12889
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 4362
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 183
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 15832
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 2600
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 1445
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 212
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 1360
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 1858
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 1696
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 4675
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 212
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 2926
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 5
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 599
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 564
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 16998
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 827
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 4248
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 300
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 493
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 22382
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 2383
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 1221
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 16874
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 490
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 22382
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 26357
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 212
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 119
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 4923
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 10468
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 739
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 4564
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 837: 212
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 4564
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 125
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 838: 212
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 2271
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: root-Branch: 125
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 22378
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 79497
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 2271
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: root-Branch: 827
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 44
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 44
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 4564
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 44
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 44
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 44
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 1327
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 1221
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 636
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 1180
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 125
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 599
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 11445
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 2351
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 79497
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - false: 100
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 8179
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 1946
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 125
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - true: 5
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 212
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 1221
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 1498
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 2409
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 5843
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 2840
Number of times BBC is called in total: 4833580
* Search finished after 604s and 478 generations, 225013 statements, best individual has fitness: 2902.0
* Minimizing test suite
[MASTER] 10:55:16.300 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 797
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 714
* Number of covered goals: 613
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 99
* Number of covered goals: 99
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 86%
* Total number of goals: 530
* Number of covered goals: 456
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 48%
* Total number of goals: 4536
* Number of covered goals: 2178
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 80%
* Total number of goals: 714
* Number of covered goals: 573
* Generated 722 tests with total length 10150
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:56:17.688 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6790666666666667% of time used, but only 38/722 tests minimized), falling back to using all assertions
[MASTER] 10:56:36.991 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 10:56:44.102 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 7 seconds more than allowed.
[MASTER] 10:56:50.425 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_64_1628161010381/com/google/javascript/rhino/Node_64_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_64_1628161010381/com/google/javascript/rhino/Node_64_tmp__ESTest_scaffolding.java]]
[MASTER] 10:56:50.425 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:56:50.425 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:56:50.429 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 211
[MASTER] 10:56:50.431 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_64_1628161010381/com/google/javascript/rhino/Node_64_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:56:50 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.EvoSuiteFile;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_64_tmp__ESTest extends Node_64_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       byte[] byteArray0 = new byte[9];
25:       byteArray0[0] = (byte)2;
26:       byteArray0[1] = (byte)8;
27:       byteArray0[2] = (byte)77;
28:       byteArray0[3] = (byte)83;
29:       byteArray0[4] = (byte)42;
30:       byteArray0[5] = (byte)2;
31:       byteArray0[6] = (byte) (-111);
32:       byteArray0[7] = (byte) (-13);
33:       byteArray0[8] = (byte)29;
34:       boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
35:       assertEquals(9, byteArray0.length);
36:       assertArrayEquals(new byte[] {(byte)2, (byte)8, (byte)77, (byte)83, (byte)42, (byte)2, (byte) (-111), (byte) (-13), (byte)29}, byteArray0);
37:       assertFalse(boolean0);
38:       
39:       Node node0 = Node.newNumber(212.95590524080998);
40:       assertFalse(node0.isCatch());
41:       assertFalse(node0.isDefaultCase());
42:       assertFalse(node0.isFunction());
43:       assertEquals(0, node0.getChildCount());
44:       assertFalse(node0.isRegExp());
45:       assertFalse(node0.isFor());
46:       assertFalse(node0.isStringKey());
47:       assertFalse(node0.isTry());
48:       assertFalse(node0.isArrayLit());
49:       assertFalse(node0.isDebugger());
50:       assertFalse(node0.isParamList());
51:       assertFalse(node0.isGetterDef());
52:       assertFalse(node0.isWhile());
53:       assertFalse(node0.isDo());
54:       assertTrue(node0.isNumber());
55:       assertFalse(node0.isAssignAdd());
56:       assertFalse(node0.hasChildren());
57:       assertFalse(node0.isReturn());
58:       assertFalse(node0.isLabel());
59:       assertFalse(node0.isTypeOf());
60:       assertFalse(node0.isAssign());
61:       assertFalse(node0.isDec());
62:       assertFalse(node0.isCall());
63:       assertFalse(node0.isGetElem());
64:       assertFalse(node0.isEmpty());
65:       assertFalse(node0.isVar());
66:       assertFalse(node0.isBreak());
67:       assertFalse(node0.isDelProp());
68:       assertFalse(node0.isName());
69:       assertFalse(node0.isNew());
70:       assertFalse(node0.isVoid());
71:       assertFalse(node0.isTrue());
72:       assertFalse(node0.isAdd());
73:       assertFalse(node0.isNull());
74:       assertFalse(node0.isOr());
75:       assertFalse(node0.isAnd());
76:       assertFalse(node0.isObjectLit());
77:       assertFalse(node0.isInstanceOf());
78:       assertFalse(node0.isExprResult());
79:       assertFalse(node0.isThis());
80:       assertFalse(node0.isWith());
81:       assertFalse(node0.isComma());
82:       assertFalse(node0.isFalse());
83:       assertFalse(node0.isCast());
84:       assertFalse(node0.isLabelName());
85:       assertFalse(node0.hasOneChild());
86:       assertFalse(node0.isGetProp());
87:       assertEquals((-1), node0.getCharno());
88:       assertFalse(node0.isSwitch());
89:       assertFalse(node0.isScript());
90:       assertFalse(node0.isString());
91:       assertFalse(node0.isNot());
92:       assertEquals((-1), node0.getSourcePosition());
93:       assertFalse(node0.isContinue());
94:       assertFalse(node0.hasMoreThanOneChild());
95:       assertFalse(node0.isCase());
96:       assertEquals((-1), node0.getLineno());
97:       assertFalse(node0.isBlock());
98:       assertFalse(node0.isHook());
99:       assertEquals(39, node0.getType());
100:       assertFalse(node0.isThrow());
101:       assertFalse(node0.isIf());
102:       assertFalse(node0.isSetterDef());
103:       assertFalse(node0.isInc());
104:       assertFalse(node0.isNE());
105:       assertFalse(node0.isIn());
106:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
107:       assertEquals(54, Node.SLASH_V);
108:       assertEquals(52, Node.LENGTH);
109:       assertEquals(57, Node.LAST_PROP);
110:       assertEquals(57, Node.REFLECTED_OBJECT);
111:       assertEquals(30, Node.VAR_ARGS_NAME);
112:       assertEquals(49, Node.DIRECT_EVAL);
113:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
114:       assertEquals(40, Node.ORIGINALNAME_PROP);
115:       assertEquals(48, Node.DIRECTIVES);
116:       assertEquals(37, Node.OPT_ARG_NAME);
117:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
118:       assertEquals(2, Node.POST_FLAG);
119:       assertEquals(8, Node.FLAG_NO_THROWS);
120:       assertEquals(47, Node.IS_DISPATCHER);
121:       assertEquals(56, Node.CHANGE_TIME);
122:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
123:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
124:       assertEquals(15, Node.NO_SIDE_EFFECTS);
125:       assertEquals(55, Node.INFERRED_FUNCTION);
126:       assertEquals(29, Node.JSDOC_INFO_PROP);
127:       assertEquals(39, Node.EMPTY_BLOCK);
128:       assertEquals(53, Node.INPUT_ID);
129:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
130:       assertEquals(43, Node.IS_CONSTANT_NAME);
131:       assertEquals(36, Node.QUOTED_PROP);
132:       assertEquals(4095, Node.COLUMN_MASK);
133:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
134:       assertEquals(46, Node.IS_NAMESPACE);
135:       assertEquals(51, Node.STATIC_SOURCE_FILE);
136:       assertEquals(12, Node.COLUMN_BITS);
137:       assertEquals(1, Node.DECR_FLAG);
138:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
139:       assertEquals(50, Node.FREE_CALL);
140:       assertEquals(32, Node.INCRDECR_PROP);
141:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
142:       assertNotNull(node0);
143:       
144:       Iterable<Node> iterable0 = node0.children();
145:       assertFalse(node0.isCatch());
146:       assertFalse(node0.isDefaultCase());
147:       assertFalse(node0.isFunction());
148:       assertEquals(0, node0.getChildCount());
149:       assertFalse(node0.isRegExp());
150:       assertFalse(node0.isFor());
151:       assertFalse(node0.isStringKey());
152:       assertFalse(node0.isTry());
153:       assertFalse(node0.isArrayLit());
154:       assertFalse(node0.isDebugger());
155:       assertFalse(node0.isParamList());
156:       assertFalse(node0.isGetterDef());
157:       assertFalse(node0.isWhile());
158:       assertFalse(node0.isDo());
159:       assertTrue(node0.isNumber());
160:       assertFalse(node0.isAssignAdd());
161:       assertFalse(node0.hasChildren());
162:       assertFalse(node0.isReturn());
163:       assertFalse(node0.isLabel());
164:       assertFalse(node0.isTypeOf());
165:       assertFalse(node0.isAssign());
166:       assertFalse(node0.isDec());
167:       assertFalse(node0.isCall());
168:       assertFalse(node0.isGetElem());
169:       assertFalse(node0.isEmpty());
170:       assertFalse(node0.isVar());
171:       assertFalse(node0.isBreak());
172:       assertFalse(node0.isDelProp());
173:       assertFalse(node0.isName());
174:       assertFalse(node0.isNew());
175:       assertFalse(node0.isVoid());
176:       assertFalse(node0.isTrue());
177:       assertFalse(node0.isAdd());
178:       assertFalse(node0.isNull());
179:       assertFalse(node0.isOr());
180:       assertFalse(node0.isAnd());
181:       assertFalse(node0.isObjectLit());
182:       assertFalse(node0.isInstanceOf());
183:       assertFalse(node0.isExprResult());
184:       assertFalse(node0.isThis());
185:       assertFalse(node0.isWith());
186:       assertFalse(node0.isComma());
187:       assertFalse(node0.isFalse());
188:       assertFalse(node0.isCast());
189:       assertFalse(node0.isLabelName());
190:       assertFalse(node0.hasOneChild());
191:       assertFalse(node0.isGetProp());
192:       assertEquals((-1), node0.getCharno());
193:       assertFalse(node0.isSwitch());
194:       assertFalse(node0.isScript());
195:       assertFalse(node0.isString());
196:       assertFalse(node0.isNot());
197:       assertEquals((-1), node0.getSourcePosition());
198:       assertFalse(node0.isContinue());
199:       assertFalse(node0.hasMoreThanOneChild());
200:       assertFalse(node0.isCase());
201:       assertEquals((-1), node0.getLineno());
202:       assertFalse(node0.isBlock());
203:       assertFalse(node0.isHook());
204:       assertEquals(39, node0.getType());
205:       assertFalse(node0.isThrow());
206:       assertFalse(node0.isIf());
207:       assertFalse(node0.isSetterDef());
208:       assertFalse(node0.isInc());
209:       assertFalse(node0.isNE());
210:       assertFalse(node0.isIn());
211:       assertFalse(iterable0.contains(node0));
212:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
213:       assertEquals(54, Node.SLASH_V);
214:       assertEquals(52, Node.LENGTH);
215:       assertEquals(57, Node.LAST_PROP);
216:       assertEquals(57, Node.REFLECTED_OBJECT);
217:       assertEquals(30, Node.VAR_ARGS_NAME);
218:       assertEquals(49, Node.DIRECT_EVAL);
219:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
220:       assertEquals(40, Node.ORIGINALNAME_PROP);
221:       assertEquals(48, Node.DIRECTIVES);
222:       assertEquals(37, Node.OPT_ARG_NAME);
223:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
224:       assertEquals(2, Node.POST_FLAG);
225:       assertEquals(8, Node.FLAG_NO_THROWS);
226:       assertEquals(47, Node.IS_DISPATCHER);
227:       assertEquals(56, Node.CHANGE_TIME);
228:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
229:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
230:       assertEquals(15, Node.NO_SIDE_EFFECTS);
231:       assertEquals(55, Node.INFERRED_FUNCTION);
232:       assertEquals(29, Node.JSDOC_INFO_PROP);
233:       assertEquals(39, Node.EMPTY_BLOCK);
234:       assertEquals(53, Node.INPUT_ID);
235:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
236:       assertEquals(43, Node.IS_CONSTANT_NAME);
237:       assertEquals(36, Node.QUOTED_PROP);
238:       assertEquals(4095, Node.COLUMN_MASK);
239:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
240:       assertEquals(46, Node.IS_NAMESPACE);
241:       assertEquals(51, Node.STATIC_SOURCE_FILE);
242:       assertEquals(12, Node.COLUMN_BITS);
243:       assertEquals(1, Node.DECR_FLAG);
244:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
245:       assertEquals(50, Node.FREE_CALL);
246:       assertEquals(32, Node.INCRDECR_PROP);
247:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
248:       assertNotNull(iterable0);
249:       
250:       Node node1 = Node.newNumber((double) 43, 27591, (-2726));
251:       assertFalse(node1.equals((Object)node0));
252:       assertFalse(node1.isIn());
253:       assertTrue(node1.isNumber());
254:       assertFalse(node1.isCase());
255:       assertFalse(node1.isDelProp());
256:       assertFalse(node1.isGetterDef());
257:       assertFalse(node1.isIf());
258:       assertFalse(node1.isSwitch());
259:       assertFalse(node1.isEmpty());
260:       assertFalse(node1.isNE());
261:       assertFalse(node1.isString());
262:       assertEquals((-1), node1.getCharno());
263:       assertFalse(node1.isHook());
264:       assertFalse(node1.isVoid());
265:       assertFalse(node1.isTry());
266:       assertFalse(node1.isBreak());
267:       assertFalse(node1.isFor());
268:       assertFalse(node1.isThis());
269:       assertFalse(node1.isRegExp());
270:       assertFalse(node1.isComma());
271:       assertEquals(0, node1.getChildCount());
272:       assertFalse(node1.isNull());
273:       assertFalse(node1.isScript());
274:       assertFalse(node1.isStringKey());
275:       assertFalse(node1.isParamList());
276:       assertFalse(node1.isTrue());
277:       assertFalse(node1.isAdd());
278:       assertFalse(node1.isVar());
279:       assertFalse(node1.isLabelName());
280:       assertFalse(node1.isArrayLit());
281:       assertFalse(node1.isNew());
282:       assertFalse(node1.isDefaultCase());
283:       assertFalse(node1.isLabel());
284:       assertFalse(node1.isReturn());
285:       assertFalse(node1.isAssignAdd());
286:       assertFalse(node1.isDo());
287:       assertEquals((-1), node1.getLineno());
288:       assertFalse(node1.isOr());
289:       assertEquals((-1), node1.getSourcePosition());
290:       assertFalse(node1.isCall());
291:       assertFalse(node1.isExprResult());
292:       assertFalse(node1.isGetElem());
293:       assertFalse(node1.isName());
294:       assertFalse(node1.hasOneChild());
295:       assertFalse(node1.hasChildren());
296:       assertFalse(node1.isWith());
297:       assertFalse(node1.isTypeOf());
298:       assertFalse(node1.isWhile());
299:       assertFalse(node1.hasMoreThanOneChild());
300:       assertFalse(node1.isBlock());
301:       assertFalse(node1.isAssign());
302:       assertEquals(39, node1.getType());
303:       assertFalse(node1.isDec());
304:       assertFalse(node1.isInstanceOf());
305:       assertFalse(node1.isCatch());
306:       assertFalse(node1.isGetProp());
307:       assertFalse(node1.isAnd());
308:       assertFalse(node1.isSetterDef());
309:       assertFalse(node1.isObjectLit());
310:       assertFalse(node1.isDebugger());
311:       assertFalse(node1.isNot());
312:       assertFalse(node1.isCast());
313:       assertFalse(node1.isInc());
314:       assertFalse(node1.isThrow());
315:       assertFalse(node1.isContinue());
316:       assertFalse(node1.isFalse());
317:       assertFalse(node1.isFunction());
318:       assertEquals(43, Node.IS_CONSTANT_NAME);
319:       assertEquals(36, Node.QUOTED_PROP);
320:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
321:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
322:       assertEquals(55, Node.INFERRED_FUNCTION);
323:       assertEquals(29, Node.JSDOC_INFO_PROP);
324:       assertEquals(39, Node.EMPTY_BLOCK);
325:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
326:       assertEquals(53, Node.INPUT_ID);
327:       assertEquals(47, Node.IS_DISPATCHER);
328:       assertEquals(2, Node.POST_FLAG);
329:       assertEquals(50, Node.FREE_CALL);
330:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
331:       assertEquals(46, Node.IS_NAMESPACE);
332:       assertEquals(40, Node.ORIGINALNAME_PROP);
333:       assertEquals(15, Node.NO_SIDE_EFFECTS);
334:       assertEquals(57, Node.LAST_PROP);
335:       assertEquals(30, Node.VAR_ARGS_NAME);
336:       assertEquals(49, Node.DIRECT_EVAL);
337:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
338:       assertEquals(54, Node.SLASH_V);
339:       assertEquals(12, Node.COLUMN_BITS);
340:       assertEquals(51, Node.STATIC_SOURCE_FILE);
341:       assertEquals(52, Node.LENGTH);
342:       assertEquals(32, Node.INCRDECR_PROP);
343:       assertEquals(1, Node.DECR_FLAG);
344:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
345:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
346:       assertEquals(56, Node.CHANGE_TIME);
347:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
348:       assertEquals(8, Node.FLAG_NO_THROWS);
349:       assertEquals(57, Node.REFLECTED_OBJECT);
350:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
351:       assertEquals(4095, Node.COLUMN_MASK);
352:       assertEquals(48, Node.DIRECTIVES);
353:       assertEquals(37, Node.OPT_ARG_NAME);
354:       assertNotNull(node1);
355:       assertNotSame(node1, node0);
356:       
357:       InputId inputId0 = new InputId("");
358:       assertEquals("", inputId0.getIdName());
359:       assertNotNull(inputId0);
360:       
361:       node0.setInputId(inputId0);
362:       assertFalse(node0.equals((Object)node1));
363:       assertFalse(node0.isCatch());
364:       assertFalse(node0.isDefaultCase());
365:       assertFalse(node0.isFunction());
366:       assertEquals(0, node0.getChildCount());
367:       assertFalse(node0.isRegExp());
368:       assertFalse(node0.isFor());
369:       assertFalse(node0.isStringKey());
370:       assertFalse(node0.isTry());
371:       assertFalse(node0.isArrayLit());
372:       assertFalse(node0.isDebugger());
373:       assertFalse(node0.isParamList());
374:       assertFalse(node0.isGetterDef());
375:       assertFalse(node0.isWhile());
376:       assertFalse(node0.isDo());
377:       assertTrue(node0.isNumber());
378:       assertFalse(node0.isAssignAdd());
379:       assertFalse(node0.hasChildren());
380:       assertFalse(node0.isReturn());
381:       assertFalse(node0.isLabel());
382:       assertFalse(node0.isTypeOf());
383:       assertFalse(node0.isAssign());
384:       assertFalse(node0.isDec());
385:       assertFalse(node0.isCall());
386:       assertFalse(node0.isGetElem());
387:       assertFalse(node0.isEmpty());
388:       assertFalse(node0.isVar());
389:       assertFalse(node0.isBreak());
390:       assertFalse(node0.isDelProp());
391:       assertFalse(node0.isName());
392:       assertFalse(node0.isNew());
393:       assertFalse(node0.isVoid());
394:       assertFalse(node0.isTrue());
395:       assertFalse(node0.isAdd());
396:       assertFalse(node0.isNull());
397:       assertFalse(node0.isOr());
398:       assertFalse(node0.isAnd());
399:       assertFalse(node0.isObjectLit());
400:       assertFalse(node0.isInstanceOf());
401:       assertFalse(node0.isExprResult());
402:       assertFalse(node0.isThis());
403:       assertFalse(node0.isWith());
404:       assertFalse(node0.isComma());
405:       assertFalse(node0.isFalse());
406:       assertFalse(node0.isCast());
407:       assertFalse(node0.isLabelName());
408:       assertFalse(node0.hasOneChild());
409:       assertFalse(node0.isGetProp());
410:       assertEquals((-1), node0.getCharno());
411:       assertFalse(node0.isSwitch());
412:       assertFalse(node0.isScript());
413:       assertFalse(node0.isString());
414:       assertFalse(node0.isNot());
415:       assertEquals((-1), node0.getSourcePosition());
416:       assertFalse(node0.isContinue());
417:       assertFalse(node0.hasMoreThanOneChild());
418:       assertFalse(node0.isCase());
419:       assertEquals((-1), node0.getLineno());
420:       assertFalse(node0.isBlock());
421:       assertFalse(node0.isHook());
422:       assertEquals(39, node0.getType());
423:       assertFalse(node0.isThrow());
424:       assertFalse(node0.isIf());
425:       assertFalse(node0.isSetterDef());
426:       assertFalse(node0.isInc());
427:       assertFalse(node0.isNE());
428:       assertFalse(node0.isIn());
429:       assertEquals("", inputId0.getIdName());
430:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
431:       assertEquals(54, Node.SLASH_V);
432:       assertEquals(52, Node.LENGTH);
433:       assertEquals(57, Node.LAST_PROP);
434:       assertEquals(57, Node.REFLECTED_OBJECT);
435:       assertEquals(30, Node.VAR_ARGS_NAME);
436:       assertEquals(49, Node.DIRECT_EVAL);
437:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
438:       assertEquals(40, Node.ORIGINALNAME_PROP);
439:       assertEquals(48, Node.DIRECTIVES);
440:       assertEquals(37, Node.OPT_ARG_NAME);
441:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
442:       assertEquals(2, Node.POST_FLAG);
443:       assertEquals(8, Node.FLAG_NO_THROWS);
444:       assertEquals(47, Node.IS_DISPATCHER);
445:       assertEquals(56, Node.CHANGE_TIME);
446:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
447:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
448:       assertEquals(15, Node.NO_SIDE_EFFECTS);
449:       assertEquals(55, Node.INFERRED_FUNCTION);
450:       assertEquals(29, Node.JSDOC_INFO_PROP);
451:       assertEquals(39, Node.EMPTY_BLOCK);
452:       assertEquals(53, Node.INPUT_ID);
453:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
454:       assertEquals(43, Node.IS_CONSTANT_NAME);
455:       assertEquals(36, Node.QUOTED_PROP);
456:       assertEquals(4095, Node.COLUMN_MASK);
457:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
458:       assertEquals(46, Node.IS_NAMESPACE);
459:       assertEquals(51, Node.STATIC_SOURCE_FILE);
460:       assertEquals(12, Node.COLUMN_BITS);
461:       assertEquals(1, Node.DECR_FLAG);
462:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
463:       assertEquals(50, Node.FREE_CALL);
464:       assertEquals(32, Node.INCRDECR_PROP);
465:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
466:       assertNotSame(node0, node1);
467:       
468:       try { 
469:         node0.setString("dtI{(8ziEtvqZr");
470:         fail("Expecting exception: UnsupportedOperationException");
471:       
472:       } catch(UnsupportedOperationException e) {
473:          //
474:          // NUMBER 212.95590524080998 [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] is not a string node
475:          //
476:          verifyException("com.google.javascript.rhino.Node", e);
477:       }
478:   }
479: }
RegularFileObject[/tmp/EvoSuite_64_1628161010381/com/google/javascript/rhino/Node_64_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:56:50 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_64_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_64_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.common.collect.AbstractMapBasedMultimap$1",
119:       "com.google.common.collect.AbstractMapBasedMultimap$2",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.common.collect.AbstractMultimap$Values",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMultimap$Entries",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.Multimaps$Entries",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.common.collect.ImmutableList",
230:       "com.google.common.collect.SingletonImmutableBiMap",
231:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
232:       "com.google.javascript.rhino.jstype.StringType",
233:       "com.google.javascript.rhino.Node$AbstractPropListItem",
234:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
235:       "com.google.javascript.rhino.jstype.TemplatizedType",
236:       "com.google.javascript.rhino.jstype.Visitor",
237:       "com.google.javascript.rhino.jstype.NoResolvedType",
238:       "com.google.javascript.rhino.jstype.JSTypeNative",
239:       "com.google.javascript.rhino.jstype.AllType",
240:       "com.google.common.collect.Maps",
241:       "com.google.common.collect.SetMultimap",
242:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
243:       "com.google.common.collect.Maps$EntryTransformer",
244:       "com.google.javascript.rhino.JSTypeExpression",
245:       "com.google.common.collect.Iterators$MergingIterator"
246:     );
247:   } 
248: 
249:   private static void resetClasses() {
250:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_64_tmp__ESTest_scaffolding.class.getClassLoader()); 
251: 
252:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
253:       "com.google.javascript.rhino.Node",
254:       "com.google.javascript.rhino.Node$NumberNode",
255:       "com.google.javascript.rhino.Node$StringNode",
256:       "com.google.javascript.rhino.Node$AbstractPropListItem",
257:       "com.google.javascript.rhino.Node$ObjectPropListItem",
258:       "com.google.javascript.rhino.Node$IntPropListItem",
259:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
260:       "com.google.javascript.rhino.Node$AncestorIterable",
261:       "com.google.javascript.rhino.Node$NodeMismatch",
262:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
263:       "com.google.javascript.rhino.Node$SideEffectFlags",
264:       "com.google.javascript.rhino.Token",
265:       "com.google.common.base.Preconditions",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.JSDocInfo",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.jstype.JSType$TypePair",
342:       "com.google.common.collect.AbstractMultimap$Values",
343:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
344:       "com.google.common.collect.AbstractMapBasedMultimap$1",
345:       "com.google.common.collect.Multimaps$Entries",
346:       "com.google.common.collect.AbstractMultimap$Entries",
347:       "com.google.common.collect.AbstractMapBasedMultimap$2",
348:       "com.google.common.base.Objects",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.InputId",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.common.collect.Iterables",
355:       "com.google.common.collect.AbstractIndexedListIterator",
356:       "com.google.common.collect.Iterators$11",
357:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
358:       "com.google.common.collect.Iterators$12",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
360:       "com.google.common.collect.Platform",
361:       "com.google.javascript.rhino.Node$AncestorIterable$1",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.javascript.rhino.jstype.NamespaceType",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.javascript.rhino.JSTypeExpression",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
371:       "com.google.javascript.rhino.jstype.JSType$2"
372:     );
373:   }
374: }

[MASTER] 10:56:50.445 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
byte[] byteArray0 = new byte[9];
byteArray0[0] = (byte)2;
byteArray0[1] = (byte)8;
byteArray0[2] = (byte)77;
byteArray0[3] = (byte)83;
byteArray0[4] = (byte)42;
byteArray0[5] = (byte)2;
byteArray0[6] = (byte) (-111);
byteArray0[7] = (byte) (-13);
byteArray0[8] = (byte)29;
boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertEquals(9, byteArray0.length);
assertArrayEquals(new byte[] {(byte)2, (byte)8, (byte)77, (byte)83, (byte)42, (byte)2, (byte) (-111), (byte) (-13), (byte)29}, byteArray0);
assertFalse(boolean0);

Node node0 = Node.newNumber(212.95590524080998);
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(iterable0.contains(node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(iterable0);

Node node1 = Node.newNumber((double) 43, 27591, (-2726));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isBreak());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isScript());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isAssign());
assertEquals(39, node1.getType());
assertFalse(node1.isDec());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotNull(node1);
assertNotSame(node1, node0);

InputId inputId0 = new InputId("");
assertEquals("", inputId0.getIdName());
assertNotNull(inputId0);

node0.setInputId(inputId0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(39, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertEquals("", inputId0.getIdName());
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotSame(node0, node1);

node0.setString("dtI{(8ziEtvqZr");

[MASTER] 10:56:51.437 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_70_1628161011371/com/google/javascript/rhino/Node_70_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_70_1628161011371/com/google/javascript/rhino/Node_70_tmp__ESTest_scaffolding.java]]
[MASTER] 10:56:51.437 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:56:51.437 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:56:51.437 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 211
[MASTER] 10:56:51.438 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_70_1628161011371/com/google/javascript/rhino/Node_70_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:56:51 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.StaticSourceFile;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.EvoSuiteFile;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_70_tmp__ESTest extends Node_70_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       byte[] byteArray0 = new byte[9];
25:       byteArray0[0] = (byte)2;
26:       byteArray0[1] = (byte)8;
27:       byteArray0[2] = (byte)77;
28:       byteArray0[3] = (byte)83;
29:       byteArray0[4] = (byte)42;
30:       byteArray0[5] = (byte)2;
31:       byteArray0[6] = (byte)42;
32:       byteArray0[7] = (byte) (-13);
33:       byteArray0[8] = (byte)29;
34:       boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
35:       assertEquals(9, byteArray0.length);
36:       assertArrayEquals(new byte[] {(byte)2, (byte)8, (byte)77, (byte)83, (byte)42, (byte)2, (byte)42, (byte) (-13), (byte)29}, byteArray0);
37:       assertFalse(boolean0);
38:       
39:       Node node0 = Node.newNumber(212.95590524080998);
40:       assertFalse(node0.isIn());
41:       assertTrue(node0.isNumber());
42:       assertFalse(node0.isCase());
43:       assertFalse(node0.isFor());
44:       assertFalse(node0.isEmpty());
45:       assertFalse(node0.isVoid());
46:       assertFalse(node0.isInc());
47:       assertFalse(node0.isBreak());
48:       assertFalse(node0.isIf());
49:       assertFalse(node0.isDelProp());
50:       assertFalse(node0.isNE());
51:       assertFalse(node0.isTrue());
52:       assertFalse(node0.isInstanceOf());
53:       assertEquals(0, node0.getChildCount());
54:       assertFalse(node0.isCatch());
55:       assertFalse(node0.isDefaultCase());
56:       assertFalse(node0.isRegExp());
57:       assertFalse(node0.isWith());
58:       assertFalse(node0.isThis());
59:       assertFalse(node0.isHook());
60:       assertFalse(node0.hasOneChild());
61:       assertFalse(node0.isTry());
62:       assertFalse(node0.isLabelName());
63:       assertFalse(node0.isArrayLit());
64:       assertFalse(node0.isScript());
65:       assertFalse(node0.isGetterDef());
66:       assertFalse(node0.isSwitch());
67:       assertFalse(node0.isParamList());
68:       assertFalse(node0.isStringKey());
69:       assertEquals((-1), node0.getCharno());
70:       assertFalse(node0.isAssignAdd());
71:       assertFalse(node0.hasMoreThanOneChild());
72:       assertFalse(node0.isContinue());
73:       assertEquals((-1), node0.getLineno());
74:       assertFalse(node0.isDo());
75:       assertFalse(node0.isDec());
76:       assertFalse(node0.hasChildren());
77:       assertFalse(node0.isTypeOf());
78:       assertFalse(node0.isWhile());
79:       assertFalse(node0.isBlock());
80:       assertFalse(node0.isAssign());
81:       assertFalse(node0.isReturn());
82:       assertEquals(39, node0.getType());
83:       assertFalse(node0.isLabel());
84:       assertFalse(node0.isVar());
85:       assertFalse(node0.isGetElem());
86:       assertFalse(node0.isCall());
87:       assertFalse(node0.isExprResult());
88:       assertFalse(node0.isAdd());
89:       assertFalse(node0.isName());
90:       assertFalse(node0.isNew());
91:       assertFalse(node0.isNull());
92:       assertFalse(node0.isOr());
93:       assertFalse(node0.isAnd());
94:       assertFalse(node0.isGetProp());
95:       assertFalse(node0.isSetterDef());
96:       assertFalse(node0.isFalse());
97:       assertFalse(node0.isThrow());
98:       assertFalse(node0.isFunction());
99:       assertFalse(node0.isComma());
100:       assertFalse(node0.isCast());
101:       assertFalse(node0.isString());
102:       assertFalse(node0.isObjectLit());
103:       assertFalse(node0.isNot());
104:       assertEquals((-1), node0.getSourcePosition());
105:       assertFalse(node0.isDebugger());
106:       assertEquals(43, Node.IS_CONSTANT_NAME);
107:       assertEquals(36, Node.QUOTED_PROP);
108:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
109:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
110:       assertEquals(4095, Node.COLUMN_MASK);
111:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
112:       assertEquals(50, Node.FREE_CALL);
113:       assertEquals(46, Node.IS_NAMESPACE);
114:       assertEquals(51, Node.STATIC_SOURCE_FILE);
115:       assertEquals(32, Node.INCRDECR_PROP);
116:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
117:       assertEquals(1, Node.DECR_FLAG);
118:       assertEquals(15, Node.NO_SIDE_EFFECTS);
119:       assertEquals(57, Node.LAST_PROP);
120:       assertEquals(30, Node.VAR_ARGS_NAME);
121:       assertEquals(49, Node.DIRECT_EVAL);
122:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
123:       assertEquals(12, Node.COLUMN_BITS);
124:       assertEquals(54, Node.SLASH_V);
125:       assertEquals(37, Node.OPT_ARG_NAME);
126:       assertEquals(40, Node.ORIGINALNAME_PROP);
127:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
128:       assertEquals(56, Node.CHANGE_TIME);
129:       assertEquals(47, Node.IS_DISPATCHER);
130:       assertEquals(8, Node.FLAG_NO_THROWS);
131:       assertEquals(2, Node.POST_FLAG);
132:       assertEquals(48, Node.DIRECTIVES);
133:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
134:       assertEquals(57, Node.REFLECTED_OBJECT);
135:       assertEquals(52, Node.LENGTH);
136:       assertEquals(53, Node.INPUT_ID);
137:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
138:       assertEquals(55, Node.INFERRED_FUNCTION);
139:       assertEquals(39, Node.EMPTY_BLOCK);
140:       assertEquals(29, Node.JSDOC_INFO_PROP);
141:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
142:       assertNotNull(node0);
143:       
144:       Iterable<Node> iterable0 = node0.children();
145:       assertFalse(node0.isIn());
146:       assertTrue(node0.isNumber());
147:       assertFalse(node0.isCase());
148:       assertFalse(node0.isFor());
149:       assertFalse(node0.isEmpty());
150:       assertFalse(node0.isVoid());
151:       assertFalse(node0.isInc());
152:       assertFalse(node0.isBreak());
153:       assertFalse(node0.isIf());
154:       assertFalse(node0.isDelProp());
155:       assertFalse(node0.isNE());
156:       assertFalse(node0.isTrue());
157:       assertFalse(node0.isInstanceOf());
158:       assertEquals(0, node0.getChildCount());
159:       assertFalse(node0.isCatch());
160:       assertFalse(node0.isDefaultCase());
161:       assertFalse(node0.isRegExp());
162:       assertFalse(node0.isWith());
163:       assertFalse(node0.isThis());
164:       assertFalse(node0.isHook());
165:       assertFalse(node0.hasOneChild());
166:       assertFalse(node0.isTry());
167:       assertFalse(node0.isLabelName());
168:       assertFalse(node0.isArrayLit());
169:       assertFalse(node0.isScript());
170:       assertFalse(node0.isGetterDef());
171:       assertFalse(node0.isSwitch());
172:       assertFalse(node0.isParamList());
173:       assertFalse(node0.isStringKey());
174:       assertEquals((-1), node0.getCharno());
175:       assertFalse(node0.isAssignAdd());
176:       assertFalse(node0.hasMoreThanOneChild());
177:       assertFalse(node0.isContinue());
178:       assertEquals((-1), node0.getLineno());
179:       assertFalse(node0.isDo());
180:       assertFalse(node0.isDec());
181:       assertFalse(node0.hasChildren());
182:       assertFalse(node0.isTypeOf());
183:       assertFalse(node0.isWhile());
184:       assertFalse(node0.isBlock());
185:       assertFalse(node0.isAssign());
186:       assertFalse(node0.isReturn());
187:       assertEquals(39, node0.getType());
188:       assertFalse(node0.isLabel());
189:       assertFalse(node0.isVar());
190:       assertFalse(node0.isGetElem());
191:       assertFalse(node0.isCall());
192:       assertFalse(node0.isExprResult());
193:       assertFalse(node0.isAdd());
194:       assertFalse(node0.isName());
195:       assertFalse(node0.isNew());
196:       assertFalse(node0.isNull());
197:       assertFalse(node0.isOr());
198:       assertFalse(node0.isAnd());
199:       assertFalse(node0.isGetProp());
200:       assertFalse(node0.isSetterDef());
201:       assertFalse(node0.isFalse());
202:       assertFalse(node0.isThrow());
203:       assertFalse(node0.isFunction());
204:       assertFalse(node0.isComma());
205:       assertFalse(node0.isCast());
206:       assertFalse(node0.isString());
207:       assertFalse(node0.isObjectLit());
208:       assertFalse(node0.isNot());
209:       assertEquals((-1), node0.getSourcePosition());
210:       assertFalse(node0.isDebugger());
211:       assertFalse(iterable0.contains(node0));
212:       assertEquals(43, Node.IS_CONSTANT_NAME);
213:       assertEquals(36, Node.QUOTED_PROP);
214:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
215:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
216:       assertEquals(4095, Node.COLUMN_MASK);
217:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
218:       assertEquals(50, Node.FREE_CALL);
219:       assertEquals(46, Node.IS_NAMESPACE);
220:       assertEquals(51, Node.STATIC_SOURCE_FILE);
221:       assertEquals(32, Node.INCRDECR_PROP);
222:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
223:       assertEquals(1, Node.DECR_FLAG);
224:       assertEquals(15, Node.NO_SIDE_EFFECTS);
225:       assertEquals(57, Node.LAST_PROP);
226:       assertEquals(30, Node.VAR_ARGS_NAME);
227:       assertEquals(49, Node.DIRECT_EVAL);
228:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
229:       assertEquals(12, Node.COLUMN_BITS);
230:       assertEquals(54, Node.SLASH_V);
231:       assertEquals(37, Node.OPT_ARG_NAME);
232:       assertEquals(40, Node.ORIGINALNAME_PROP);
233:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
234:       assertEquals(56, Node.CHANGE_TIME);
235:       assertEquals(47, Node.IS_DISPATCHER);
236:       assertEquals(8, Node.FLAG_NO_THROWS);
237:       assertEquals(2, Node.POST_FLAG);
238:       assertEquals(48, Node.DIRECTIVES);
239:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
240:       assertEquals(57, Node.REFLECTED_OBJECT);
241:       assertEquals(52, Node.LENGTH);
242:       assertEquals(53, Node.INPUT_ID);
243:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
244:       assertEquals(55, Node.INFERRED_FUNCTION);
245:       assertEquals(39, Node.EMPTY_BLOCK);
246:       assertEquals(29, Node.JSDOC_INFO_PROP);
247:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
248:       assertNotNull(iterable0);
249:       
250:       Node node1 = Node.newNumber((double) 43, 27591, (-2726));
251:       assertFalse(node1.equals((Object)node0));
252:       assertEquals((-1), node1.getLineno());
253:       assertFalse(node1.isOr());
254:       assertFalse(node1.isReturn());
255:       assertFalse(node1.isLabel());
256:       assertFalse(node1.isAssignAdd());
257:       assertFalse(node1.isWhile());
258:       assertFalse(node1.isDec());
259:       assertFalse(node1.isTypeOf());
260:       assertFalse(node1.isAssign());
261:       assertEquals(39, node1.getType());
262:       assertFalse(node1.hasChildren());
263:       assertFalse(node1.isGetElem());
264:       assertFalse(node1.isCast());
265:       assertFalse(node1.hasMoreThanOneChild());
266:       assertFalse(node1.isContinue());
267:       assertFalse(node1.hasOneChild());
268:       assertFalse(node1.isStringKey());
269:       assertFalse(node1.isLabelName());
270:       assertFalse(node1.isBlock());
271:       assertFalse(node1.isScript());
272:       assertEquals((-1), node1.getSourcePosition());
273:       assertFalse(node1.isObjectLit());
274:       assertFalse(node1.isNot());
275:       assertFalse(node1.isInstanceOf());
276:       assertFalse(node1.isAnd());
277:       assertFalse(node1.isRegExp());
278:       assertFalse(node1.isThis());
279:       assertFalse(node1.isFalse());
280:       assertFalse(node1.isWith());
281:       assertFalse(node1.isCatch());
282:       assertFalse(node1.isFunction());
283:       assertFalse(node1.isThrow());
284:       assertFalse(node1.isSetterDef());
285:       assertFalse(node1.isInc());
286:       assertFalse(node1.isIn());
287:       assertTrue(node1.isNumber());
288:       assertFalse(node1.isNE());
289:       assertFalse(node1.isIf());
290:       assertFalse(node1.isDelProp());
291:       assertFalse(node1.isHook());
292:       assertFalse(node1.isArrayLit());
293:       assertFalse(node1.isTry());
294:       assertFalse(node1.isFor());
295:       assertFalse(node1.isSwitch());
296:       assertFalse(node1.isGetterDef());
297:       assertEquals((-1), node1.getCharno());
298:       assertFalse(node1.isDebugger());
299:       assertFalse(node1.isCase());
300:       assertFalse(node1.isGetProp());
301:       assertFalse(node1.isString());
302:       assertEquals(0, node1.getChildCount());
303:       assertFalse(node1.isParamList());
304:       assertFalse(node1.isComma());
305:       assertFalse(node1.isBreak());
306:       assertFalse(node1.isCall());
307:       assertFalse(node1.isExprResult());
308:       assertFalse(node1.isVar());
309:       assertFalse(node1.isNew());
310:       assertFalse(node1.isVoid());
311:       assertFalse(node1.isName());
312:       assertFalse(node1.isTrue());
313:       assertFalse(node1.isDefaultCase());
314:       assertFalse(node1.isNull());
315:       assertFalse(node1.isDo());
316:       assertFalse(node1.isEmpty());
317:       assertFalse(node1.isAdd());
318:       assertEquals(43, Node.IS_CONSTANT_NAME);
319:       assertEquals(36, Node.QUOTED_PROP);
320:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
321:       assertEquals(4095, Node.COLUMN_MASK);
322:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
323:       assertEquals(48, Node.DIRECTIVES);
324:       assertEquals(56, Node.CHANGE_TIME);
325:       assertEquals(47, Node.IS_DISPATCHER);
326:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
327:       assertEquals(39, Node.EMPTY_BLOCK);
328:       assertEquals(29, Node.JSDOC_INFO_PROP);
329:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
330:       assertEquals(8, Node.FLAG_NO_THROWS);
331:       assertEquals(2, Node.POST_FLAG);
332:       assertEquals(55, Node.INFERRED_FUNCTION);
333:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
334:       assertEquals(53, Node.INPUT_ID);
335:       assertEquals(15, Node.NO_SIDE_EFFECTS);
336:       assertEquals(57, Node.LAST_PROP);
337:       assertEquals(54, Node.SLASH_V);
338:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
339:       assertEquals(52, Node.LENGTH);
340:       assertEquals(30, Node.VAR_ARGS_NAME);
341:       assertEquals(51, Node.STATIC_SOURCE_FILE);
342:       assertEquals(57, Node.REFLECTED_OBJECT);
343:       assertEquals(40, Node.ORIGINALNAME_PROP);
344:       assertEquals(46, Node.IS_NAMESPACE);
345:       assertEquals(37, Node.OPT_ARG_NAME);
346:       assertEquals(49, Node.DIRECT_EVAL);
347:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
348:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
349:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
350:       assertEquals(50, Node.FREE_CALL);
351:       assertEquals(12, Node.COLUMN_BITS);
352:       assertEquals(1, Node.DECR_FLAG);
353:       assertEquals(32, Node.INCRDECR_PROP);
354:       assertNotNull(node1);
355:       assertNotSame(node1, node0);
356:       
357:       InputId inputId0 = new InputId("");
358:       assertEquals("", inputId0.getIdName());
359:       assertNotNull(inputId0);
360:       
361:       node0.setInputId(inputId0);
362:       assertFalse(node0.equals((Object)node1));
363:       assertFalse(node0.isIn());
364:       assertTrue(node0.isNumber());
365:       assertFalse(node0.isCase());
366:       assertFalse(node0.isFor());
367:       assertFalse(node0.isEmpty());
368:       assertFalse(node0.isVoid());
369:       assertFalse(node0.isInc());
370:       assertFalse(node0.isBreak());
371:       assertFalse(node0.isIf());
372:       assertFalse(node0.isDelProp());
373:       assertFalse(node0.isNE());
374:       assertFalse(node0.isTrue());
375:       assertFalse(node0.isInstanceOf());
376:       assertEquals(0, node0.getChildCount());
377:       assertFalse(node0.isCatch());
378:       assertFalse(node0.isDefaultCase());
379:       assertFalse(node0.isRegExp());
380:       assertFalse(node0.isWith());
381:       assertFalse(node0.isThis());
382:       assertFalse(node0.isHook());
383:       assertFalse(node0.hasOneChild());
384:       assertFalse(node0.isTry());
385:       assertFalse(node0.isLabelName());
386:       assertFalse(node0.isArrayLit());
387:       assertFalse(node0.isScript());
388:       assertFalse(node0.isGetterDef());
389:       assertFalse(node0.isSwitch());
390:       assertFalse(node0.isParamList());
391:       assertFalse(node0.isStringKey());
392:       assertEquals((-1), node0.getCharno());
393:       assertFalse(node0.isAssignAdd());
394:       assertFalse(node0.hasMoreThanOneChild());
395:       assertFalse(node0.isContinue());
396:       assertEquals((-1), node0.getLineno());
397:       assertFalse(node0.isDo());
398:       assertFalse(node0.isDec());
399:       assertFalse(node0.hasChildren());
400:       assertFalse(node0.isTypeOf());
401:       assertFalse(node0.isWhile());
402:       assertFalse(node0.isBlock());
403:       assertFalse(node0.isAssign());
404:       assertFalse(node0.isReturn());
405:       assertEquals(39, node0.getType());
406:       assertFalse(node0.isLabel());
407:       assertFalse(node0.isVar());
408:       assertFalse(node0.isGetElem());
409:       assertFalse(node0.isCall());
410:       assertFalse(node0.isExprResult());
411:       assertFalse(node0.isAdd());
412:       assertFalse(node0.isName());
413:       assertFalse(node0.isNew());
414:       assertFalse(node0.isNull());
415:       assertFalse(node0.isOr());
416:       assertFalse(node0.isAnd());
417:       assertFalse(node0.isGetProp());
418:       assertFalse(node0.isSetterDef());
419:       assertFalse(node0.isFalse());
420:       assertFalse(node0.isThrow());
421:       assertFalse(node0.isFunction());
422:       assertFalse(node0.isComma());
423:       assertFalse(node0.isCast());
424:       assertFalse(node0.isString());
425:       assertFalse(node0.isObjectLit());
426:       assertFalse(node0.isNot());
427:       assertEquals((-1), node0.getSourcePosition());
428:       assertFalse(node0.isDebugger());
429:       assertEquals("", inputId0.getIdName());
430:       assertEquals(43, Node.IS_CONSTANT_NAME);
431:       assertEquals(36, Node.QUOTED_PROP);
432:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
433:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
434:       assertEquals(4095, Node.COLUMN_MASK);
435:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
436:       assertEquals(50, Node.FREE_CALL);
437:       assertEquals(46, Node.IS_NAMESPACE);
438:       assertEquals(51, Node.STATIC_SOURCE_FILE);
439:       assertEquals(32, Node.INCRDECR_PROP);
440:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
441:       assertEquals(1, Node.DECR_FLAG);
442:       assertEquals(15, Node.NO_SIDE_EFFECTS);
443:       assertEquals(57, Node.LAST_PROP);
444:       assertEquals(30, Node.VAR_ARGS_NAME);
445:       assertEquals(49, Node.DIRECT_EVAL);
446:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
447:       assertEquals(12, Node.COLUMN_BITS);
448:       assertEquals(54, Node.SLASH_V);
449:       assertEquals(37, Node.OPT_ARG_NAME);
450:       assertEquals(40, Node.ORIGINALNAME_PROP);
451:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
452:       assertEquals(56, Node.CHANGE_TIME);
453:       assertEquals(47, Node.IS_DISPATCHER);
454:       assertEquals(8, Node.FLAG_NO_THROWS);
455:       assertEquals(2, Node.POST_FLAG);
456:       assertEquals(48, Node.DIRECTIVES);
457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
458:       assertEquals(57, Node.REFLECTED_OBJECT);
459:       assertEquals(52, Node.LENGTH);
460:       assertEquals(53, Node.INPUT_ID);
461:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
462:       assertEquals(55, Node.INFERRED_FUNCTION);
463:       assertEquals(39, Node.EMPTY_BLOCK);
464:       assertEquals(29, Node.JSDOC_INFO_PROP);
465:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
466:       assertNotSame(node0, node1);
467:       
468:       boolean boolean1 = node0.isCatch();
469:       assertTrue(boolean1 == boolean0);
470:       assertFalse(node0.equals((Object)node1));
471:       assertFalse(node0.isIn());
472:       assertTrue(node0.isNumber());
473:       assertFalse(node0.isCase());
474:       assertFalse(node0.isFor());
475:       assertFalse(node0.isEmpty());
476:       assertFalse(node0.isVoid());
477:       assertFalse(node0.isInc());
478:       assertFalse(node0.isBreak());
479:       assertFalse(node0.isIf());
480:       assertFalse(node0.isDelProp());
481:       assertFalse(node0.isNE());
482:       assertFalse(node0.isTrue());
483:       assertFalse(node0.isInstanceOf());
484:       assertEquals(0, node0.getChildCount());
485:       assertFalse(node0.isCatch());
486:       assertFalse(node0.isDefaultCase());
487:       assertFalse(node0.isRegExp());
488:       assertFalse(node0.isWith());
489:       assertFalse(node0.isThis());
490:       assertFalse(node0.isHook());
491:       assertFalse(node0.hasOneChild());
492:       assertFalse(node0.isTry());
493:       assertFalse(node0.isLabelName());
494:       assertFalse(node0.isArrayLit());
495:       assertFalse(node0.isScript());
496:       assertFalse(node0.isGetterDef());
497:       assertFalse(node0.isSwitch());
498:       assertFalse(node0.isParamList());
499:       assertFalse(node0.isStringKey());
500:       assertEquals((-1), node0.getCharno());
501:       assertFalse(node0.isAssignAdd());
502:       assertFalse(node0.hasMoreThanOneChild());
503:       assertFalse(node0.isContinue());
504:       assertEquals((-1), node0.getLineno());
505:       assertFalse(node0.isDo());
506:       assertFalse(node0.isDec());
507:       assertFalse(node0.hasChildren());
508:       assertFalse(node0.isTypeOf());
509:       assertFalse(node0.isWhile());
510:       assertFalse(node0.isBlock());
511:       assertFalse(node0.isAssign());
512:       assertFalse(node0.isReturn());
513:       assertEquals(39, node0.getType());
514:       assertFalse(node0.isLabel());
515:       assertFalse(node0.isVar());
516:       assertFalse(node0.isGetElem());
517:       assertFalse(node0.isCall());
518:       assertFalse(node0.isExprResult());
519:       assertFalse(node0.isAdd());
520:       assertFalse(node0.isName());
521:       assertFalse(node0.isNew());
522:       assertFalse(node0.isNull());
523:       assertFalse(node0.isOr());
524:       assertFalse(node0.isAnd());
525:       assertFalse(node0.isGetProp());
526:       assertFalse(node0.isSetterDef());
527:       assertFalse(node0.isFalse());
528:       assertFalse(node0.isThrow());
529:       assertFalse(node0.isFunction());
530:       assertFalse(node0.isComma());
531:       assertFalse(node0.isCast());
532:       assertFalse(node0.isString());
533:       assertFalse(node0.isObjectLit());
534:       assertFalse(node0.isNot());
535:       assertEquals((-1), node0.getSourcePosition());
536:       assertFalse(node0.isDebugger());
537:       assertEquals(43, Node.IS_CONSTANT_NAME);
538:       assertEquals(36, Node.QUOTED_PROP);
539:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
540:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
541:       assertEquals(4095, Node.COLUMN_MASK);
542:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
543:       assertEquals(50, Node.FREE_CALL);
544:       assertEquals(46, Node.IS_NAMESPACE);
545:       assertEquals(51, Node.STATIC_SOURCE_FILE);
546:       assertEquals(32, Node.INCRDECR_PROP);
547:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
548:       assertEquals(1, Node.DECR_FLAG);
549:       assertEquals(15, Node.NO_SIDE_EFFECTS);
550:       assertEquals(57, Node.LAST_PROP);
551:       assertEquals(30, Node.VAR_ARGS_NAME);
552:       assertEquals(49, Node.DIRECT_EVAL);
553:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
554:       assertEquals(12, Node.COLUMN_BITS);
555:       assertEquals(54, Node.SLASH_V);
556:       assertEquals(37, Node.OPT_ARG_NAME);
557:       assertEquals(40, Node.ORIGINALNAME_PROP);
558:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
559:       assertEquals(56, Node.CHANGE_TIME);
560:       assertEquals(47, Node.IS_DISPATCHER);
561:       assertEquals(8, Node.FLAG_NO_THROWS);
562:       assertEquals(2, Node.POST_FLAG);
563:       assertEquals(48, Node.DIRECTIVES);
564:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
565:       assertEquals(57, Node.REFLECTED_OBJECT);
566:       assertEquals(52, Node.LENGTH);
567:       assertEquals(53, Node.INPUT_ID);
568:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
569:       assertEquals(55, Node.INFERRED_FUNCTION);
570:       assertEquals(39, Node.EMPTY_BLOCK);
571:       assertEquals(29, Node.JSDOC_INFO_PROP);
572:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
573:       assertNotSame(node0, node1);
574:       assertFalse(boolean1);
575:       
576:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
577:       assertFalse(node0.equals((Object)node1));
578:       assertFalse(node0.isIn());
579:       assertTrue(node0.isNumber());
580:       assertFalse(node0.isCase());
581:       assertFalse(node0.isFor());
582:       assertFalse(node0.isEmpty());
583:       assertFalse(node0.isVoid());
584:       assertFalse(node0.isInc());
585:       assertFalse(node0.isBreak());
586:       assertFalse(node0.isIf());
587:       assertFalse(node0.isDelProp());
588:       assertFalse(node0.isNE());
589:       assertFalse(node0.isTrue());
590:       assertFalse(node0.isInstanceOf());
591:       assertEquals(0, node0.getChildCount());
592:       assertFalse(node0.isCatch());
593:       assertFalse(node0.isDefaultCase());
594:       assertFalse(node0.isRegExp());
595:       assertFalse(node0.isWith());
596:       assertFalse(node0.isThis());
597:       assertFalse(node0.isHook());
598:       assertFalse(node0.hasOneChild());
599:       assertFalse(node0.isTry());
600:       assertFalse(node0.isLabelName());
601:       assertFalse(node0.isArrayLit());
602:       assertFalse(node0.isScript());
603:       assertFalse(node0.isGetterDef());
604:       assertFalse(node0.isSwitch());
605:       assertFalse(node0.isParamList());
606:       assertFalse(node0.isStringKey());
607:       assertEquals((-1), node0.getCharno());
608:       assertFalse(node0.isAssignAdd());
609:       assertFalse(node0.hasMoreThanOneChild());
610:       assertFalse(node0.isContinue());
611:       assertEquals((-1), node0.getLineno());
612:       assertFalse(node0.isDo());
613:       assertFalse(node0.isDec());
614:       assertFalse(node0.hasChildren());
615:       assertFalse(node0.isTypeOf());
616:       assertFalse(node0.isWhile());
617:       assertFalse(node0.isBlock());
618:       assertFalse(node0.isAssign());
619:       assertFalse(node0.isReturn());
620:       assertEquals(39, node0.getType());
621:       assertFalse(node0.isLabel());
622:       assertFalse(node0.isVar());
623:       assertFalse(node0.isGetElem());
624:       assertFalse(node0.isCall());
625:       assertFalse(node0.isExprResult());
626:       assertFalse(node0.isAdd());
627:       assertFalse(node0.isName());
628:       assertFalse(node0.isNew());
629:       assertFalse(node0.isNull());
630:       assertFalse(node0.isOr());
631:       assertFalse(node0.isAnd());
632:       assertFalse(node0.isGetProp());
633:       assertFalse(node0.isSetterDef());
634:       assertFalse(node0.isFalse());
635:       assertFalse(node0.isThrow());
636:       assertFalse(node0.isFunction());
637:       assertFalse(node0.isComma());
638:       assertFalse(node0.isCast());
639:       assertFalse(node0.isString());
640:       assertFalse(node0.isObjectLit());
641:       assertFalse(node0.isNot());
642:       assertEquals((-1), node0.getSourcePosition());
643:       assertFalse(node0.isDebugger());
644:       assertEquals(43, Node.IS_CONSTANT_NAME);
645:       assertEquals(36, Node.QUOTED_PROP);
646:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
647:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
648:       assertEquals(4095, Node.COLUMN_MASK);
649:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
650:       assertEquals(50, Node.FREE_CALL);
651:       assertEquals(46, Node.IS_NAMESPACE);
652:       assertEquals(51, Node.STATIC_SOURCE_FILE);
653:       assertEquals(32, Node.INCRDECR_PROP);
654:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
655:       assertEquals(1, Node.DECR_FLAG);
656:       assertEquals(15, Node.NO_SIDE_EFFECTS);
657:       assertEquals(57, Node.LAST_PROP);
658:       assertEquals(30, Node.VAR_ARGS_NAME);
659:       assertEquals(49, Node.DIRECT_EVAL);
660:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
661:       assertEquals(12, Node.COLUMN_BITS);
662:       assertEquals(54, Node.SLASH_V);
663:       assertEquals(37, Node.OPT_ARG_NAME);
664:       assertEquals(40, Node.ORIGINALNAME_PROP);
665:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
666:       assertEquals(56, Node.CHANGE_TIME);
667:       assertEquals(47, Node.IS_DISPATCHER);
668:       assertEquals(8, Node.FLAG_NO_THROWS);
669:       assertEquals(2, Node.POST_FLAG);
670:       assertEquals(48, Node.DIRECTIVES);
671:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
672:       assertEquals(57, Node.REFLECTED_OBJECT);
673:       assertEquals(52, Node.LENGTH);
674:       assertEquals(53, Node.INPUT_ID);
675:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
676:       assertEquals(55, Node.INFERRED_FUNCTION);
677:       assertEquals(39, Node.EMPTY_BLOCK);
678:       assertEquals(29, Node.JSDOC_INFO_PROP);
679:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
680:       assertNull(staticSourceFile0);
681:       assertNotSame(node0, node1);
682:       
683:       boolean boolean2 = node0.isAnd();
684:       assertTrue(boolean2 == boolean0);
685:       assertTrue(boolean2 == boolean1);
686:       assertFalse(node0.equals((Object)node1));
687:       assertFalse(node0.isIn());
688:       assertTrue(node0.isNumber());
689:       assertFalse(node0.isCase());
690:       assertFalse(node0.isFor());
691:       assertFalse(node0.isEmpty());
692:       assertFalse(node0.isVoid());
693:       assertFalse(node0.isInc());
694:       assertFalse(node0.isBreak());
695:       assertFalse(node0.isIf());
696:       assertFalse(node0.isDelProp());
697:       assertFalse(node0.isNE());
698:       assertFalse(node0.isTrue());
699:       assertFalse(node0.isInstanceOf());
700:       assertEquals(0, node0.getChildCount());
701:       assertFalse(node0.isCatch());
702:       assertFalse(node0.isDefaultCase());
703:       assertFalse(node0.isRegExp());
704:       assertFalse(node0.isWith());
705:       assertFalse(node0.isThis());
706:       assertFalse(node0.isHook());
707:       assertFalse(node0.hasOneChild());
708:       assertFalse(node0.isTry());
709:       assertFalse(node0.isLabelName());
710:       assertFalse(node0.isArrayLit());
711:       assertFalse(node0.isScript());
712:       assertFalse(node0.isGetterDef());
713:       assertFalse(node0.isSwitch());
714:       assertFalse(node0.isParamList());
715:       assertFalse(node0.isStringKey());
716:       assertEquals((-1), node0.getCharno());
717:       assertFalse(node0.isAssignAdd());
718:       assertFalse(node0.hasMoreThanOneChild());
719:       assertFalse(node0.isContinue());
720:       assertEquals((-1), node0.getLineno());
721:       assertFalse(node0.isDo());
722:       assertFalse(node0.isDec());
723:       assertFalse(node0.hasChildren());
724:       assertFalse(node0.isTypeOf());
725:       assertFalse(node0.isWhile());
726:       assertFalse(node0.isBlock());
727:       assertFalse(node0.isAssign());
728:       assertFalse(node0.isReturn());
729:       assertEquals(39, node0.getType());
730:       assertFalse(node0.isLabel());
731:       assertFalse(node0.isVar());
732:       assertFalse(node0.isGetElem());
733:       assertFalse(node0.isCall());
734:       assertFalse(node0.isExprResult());
735:       assertFalse(node0.isAdd());
736:       assertFalse(node0.isName());
737:       assertFalse(node0.isNew());
738:       assertFalse(node0.isNull());
739:       assertFalse(node0.isOr());
740:       assertFalse(node0.isAnd());
741:       assertFalse(node0.isGetProp());
742:       assertFalse(node0.isSetterDef());
743:       assertFalse(node0.isFalse());
744:       assertFalse(node0.isThrow());
745:       assertFalse(node0.isFunction());
746:       assertFalse(node0.isComma());
747:       assertFalse(node0.isCast());
748:       assertFalse(node0.isString());
749:       assertFalse(node0.isObjectLit());
750:       assertFalse(node0.isNot());
751:       assertEquals((-1), node0.getSourcePosition());
752:       assertFalse(node0.isDebugger());
753:       assertEquals(43, Node.IS_CONSTANT_NAME);
754:       assertEquals(36, Node.QUOTED_PROP);
755:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
756:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
757:       assertEquals(4095, Node.COLUMN_MASK);
758:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
759:       assertEquals(50, Node.FREE_CALL);
760:       assertEquals(46, Node.IS_NAMESPACE);
761:       assertEquals(51, Node.STATIC_SOURCE_FILE);
762:       assertEquals(32, Node.INCRDECR_PROP);
763:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
764:       assertEquals(1, Node.DECR_FLAG);
765:       assertEquals(15, Node.NO_SIDE_EFFECTS);
766:       assertEquals(57, Node.LAST_PROP);
767:       assertEquals(30, Node.VAR_ARGS_NAME);
768:       assertEquals(49, Node.DIRECT_EVAL);
769:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
770:       assertEquals(12, Node.COLUMN_BITS);
771:       assertEquals(54, Node.SLASH_V);
772:       assertEquals(37, Node.OPT_ARG_NAME);
773:       assertEquals(40, Node.ORIGINALNAME_PROP);
774:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
775:       assertEquals(56, Node.CHANGE_TIME);
776:       assertEquals(47, Node.IS_DISPATCHER);
777:       assertEquals(8, Node.FLAG_NO_THROWS);
778:       assertEquals(2, Node.POST_FLAG);
779:       assertEquals(48, Node.DIRECTIVES);
780:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
781:       assertEquals(57, Node.REFLECTED_OBJECT);
782:       assertEquals(52, Node.LENGTH);
783:       assertEquals(53, Node.INPUT_ID);
784:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
785:       assertEquals(55, Node.INFERRED_FUNCTION);
786:       assertEquals(39, Node.EMPTY_BLOCK);
787:       assertEquals(29, Node.JSDOC_INFO_PROP);
788:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
789:       assertNotSame(node0, node1);
790:       assertFalse(boolean2);
791:       
792:       boolean boolean3 = node0.isCast();
793:       assertTrue(boolean3 == boolean1);
794:       assertTrue(boolean3 == boolean0);
795:       assertTrue(boolean3 == boolean2);
796:       assertFalse(node0.equals((Object)node1));
797:       assertFalse(node0.isIn());
798:       assertTrue(node0.isNumber());
799:       assertFalse(node0.isCase());
800:       assertFalse(node0.isFor());
801:       assertFalse(node0.isEmpty());
802:       assertFalse(node0.isVoid());
803:       assertFalse(node0.isInc());
804:       assertFalse(node0.isBreak());
805:       assertFalse(node0.isIf());
806:       assertFalse(node0.isDelProp());
807:       assertFalse(node0.isNE());
808:       assertFalse(node0.isTrue());
809:       assertFalse(node0.isInstanceOf());
810:       assertEquals(0, node0.getChildCount());
811:       assertFalse(node0.isCatch());
812:       assertFalse(node0.isDefaultCase());
813:       assertFalse(node0.isRegExp());
814:       assertFalse(node0.isWith());
815:       assertFalse(node0.isThis());
816:       assertFalse(node0.isHook());
817:       assertFalse(node0.hasOneChild());
818:       assertFalse(node0.isTry());
819:       assertFalse(node0.isLabelName());
820:       assertFalse(node0.isArrayLit());
821:       assertFalse(node0.isScript());
822:       assertFalse(node0.isGetterDef());
823:       assertFalse(node0.isSwitch());
824:       assertFalse(node0.isParamList());
825:       assertFalse(node0.isStringKey());
826:       assertEquals((-1), node0.getCharno());
827:       assertFalse(node0.isAssignAdd());
828:       assertFalse(node0.hasMoreThanOneChild());
829:       assertFalse(node0.isContinue());
830:       assertEquals((-1), node0.getLineno());
831:       assertFalse(node0.isDo());
832:       assertFalse(node0.isDec());
833:       assertFalse(node0.hasChildren());
834:       assertFalse(node0.isTypeOf());
835:       assertFalse(node0.isWhile());
836:       assertFalse(node0.isBlock());
837:       assertFalse(node0.isAssign());
838:       assertFalse(node0.isReturn());
839:       assertEquals(39, node0.getType());
840:       assertFalse(node0.isLabel());
841:       assertFalse(node0.isVar());
842:       assertFalse(node0.isGetElem());
843:       assertFalse(node0.isCall());
844:       assertFalse(node0.isExprResult());
845:       assertFalse(node0.isAdd());
846:       assertFalse(node0.isName());
847:       assertFalse(node0.isNew());
848:       assertFalse(node0.isNull());
849:       assertFalse(node0.isOr());
850:       assertFalse(node0.isAnd());
851:       assertFalse(node0.isGetProp());
852:       assertFalse(node0.isSetterDef());
853:       assertFalse(node0.isFalse());
854:       assertFalse(node0.isThrow());
855:       assertFalse(node0.isFunction());
856:       assertFalse(node0.isComma());
857:       assertFalse(node0.isCast());
858:       assertFalse(node0.isString());
859:       assertFalse(node0.isObjectLit());
860:       assertFalse(node0.isNot());
861:       assertEquals((-1), node0.getSourcePosition());
862:       assertFalse(node0.isDebugger());
863:       assertEquals(43, Node.IS_CONSTANT_NAME);
864:       assertEquals(36, Node.QUOTED_PROP);
865:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
866:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
867:       assertEquals(4095, Node.COLUMN_MASK);
868:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
869:       assertEquals(50, Node.FREE_CALL);
870:       assertEquals(46, Node.IS_NAMESPACE);
871:       assertEquals(51, Node.STATIC_SOURCE_FILE);
872:       assertEquals(32, Node.INCRDECR_PROP);
873:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
874:       assertEquals(1, Node.DECR_FLAG);
875:       assertEquals(15, Node.NO_SIDE_EFFECTS);
876:       assertEquals(57, Node.LAST_PROP);
877:       assertEquals(30, Node.VAR_ARGS_NAME);
878:       assertEquals(49, Node.DIRECT_EVAL);
879:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
880:       assertEquals(12, Node.COLUMN_BITS);
881:       assertEquals(54, Node.SLASH_V);
882:       assertEquals(37, Node.OPT_ARG_NAME);
883:       assertEquals(40, Node.ORIGINALNAME_PROP);
884:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
885:       assertEquals(56, Node.CHANGE_TIME);
886:       assertEquals(47, Node.IS_DISPATCHER);
887:       assertEquals(8, Node.FLAG_NO_THROWS);
888:       assertEquals(2, Node.POST_FLAG);
889:       assertEquals(48, Node.DIRECTIVES);
890:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
891:       assertEquals(57, Node.REFLECTED_OBJECT);
892:       assertEquals(52, Node.LENGTH);
893:       assertEquals(53, Node.INPUT_ID);
894:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
895:       assertEquals(55, Node.INFERRED_FUNCTION);
896:       assertEquals(39, Node.EMPTY_BLOCK);
897:       assertEquals(29, Node.JSDOC_INFO_PROP);
898:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
899:       assertNotSame(node0, node1);
900:       assertFalse(boolean3);
901:       
902:       boolean boolean4 = node1.isOnlyModifiesArgumentsCall();
903:       assertTrue(boolean4 == boolean0);
904:       assertTrue(boolean4 == boolean3);
905:       assertTrue(boolean4 == boolean2);
906:       assertTrue(boolean4 == boolean1);
907:       assertFalse(node1.equals((Object)node0));
908:       assertEquals((-1), node1.getLineno());
909:       assertFalse(node1.isOr());
910:       assertFalse(node1.isReturn());
911:       assertFalse(node1.isLabel());
912:       assertFalse(node1.isAssignAdd());
913:       assertFalse(node1.isWhile());
914:       assertFalse(node1.isDec());
915:       assertFalse(node1.isTypeOf());
916:       assertFalse(node1.isAssign());
917:       assertEquals(39, node1.getType());
918:       assertFalse(node1.hasChildren());
919:       assertFalse(node1.isGetElem());
920:       assertFalse(node1.isCast());
921:       assertFalse(node1.hasMoreThanOneChild());
922:       assertFalse(node1.isContinue());
923:       assertFalse(node1.hasOneChild());
924:       assertFalse(node1.isStringKey());
925:       assertFalse(node1.isLabelName());
926:       assertFalse(node1.isBlock());
927:       assertFalse(node1.isScript());
928:       assertEquals((-1), node1.getSourcePosition());
929:       assertFalse(node1.isObjectLit());
930:       assertFalse(node1.isNot());
931:       assertFalse(node1.isInstanceOf());
932:       assertFalse(node1.isAnd());
933:       assertFalse(node1.isRegExp());
934:       assertFalse(node1.isThis());
935:       assertFalse(node1.isFalse());
936:       assertFalse(node1.isWith());
937:       assertFalse(node1.isCatch());
938:       assertFalse(node1.isFunction());
939:       assertFalse(node1.isThrow());
940:       assertFalse(node1.isSetterDef());
941:       assertFalse(node1.isInc());
942:       assertFalse(node1.isIn());
943:       assertTrue(node1.isNumber());
944:       assertFalse(node1.isNE());
945:       assertFalse(node1.isIf());
946:       assertFalse(node1.isDelProp());
947:       assertFalse(node1.isHook());
948:       assertFalse(node1.isArrayLit());
949:       assertFalse(node1.isTry());
950:       assertFalse(node1.isFor());
951:       assertFalse(node1.isSwitch());
952:       assertFalse(node1.isGetterDef());
953:       assertEquals((-1), node1.getCharno());
954:       assertFalse(node1.isDebugger());
955:       assertFalse(node1.isCase());
956:       assertFalse(node1.isGetProp());
957:       assertFalse(node1.isString());
958:       assertEquals(0, node1.getChildCount());
959:       assertFalse(node1.isParamList());
960:       assertFalse(node1.isComma());
961:       assertFalse(node1.isBreak());
962:       assertFalse(node1.isCall());
963:       assertFalse(node1.isExprResult());
964:       assertFalse(node1.isVar());
965:       assertFalse(node1.isNew());
966:       assertFalse(node1.isVoid());
967:       assertFalse(node1.isName());
968:       assertFalse(node1.isTrue());
969:       assertFalse(node1.isDefaultCase());
970:       assertFalse(node1.isNull());
971:       assertFalse(node1.isDo());
972:       assertFalse(node1.isEmpty());
973:       assertFalse(node1.isAdd());
974:       assertEquals(43, Node.IS_CONSTANT_NAME);
975:       assertEquals(36, Node.QUOTED_PROP);
976:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
977:       assertEquals(4095, Node.COLUMN_MASK);
978:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
979:       assertEquals(48, Node.DIRECTIVES);
980:       assertEquals(56, Node.CHANGE_TIME);
981:       assertEquals(47, Node.IS_DISPATCHER);
982:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
983:       assertEquals(39, Node.EMPTY_BLOCK);
984:       assertEquals(29, Node.JSDOC_INFO_PROP);
985:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
986:       assertEquals(8, Node.FLAG_NO_THROWS);
987:       assertEquals(2, Node.POST_FLAG);
988:       assertEquals(55, Node.INFERRED_FUNCTION);
989:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
990:       assertEquals(53, Node.INPUT_ID);
991:       assertEquals(15, Node.NO_SIDE_EFFECTS);
992:       assertEquals(57, Node.LAST_PROP);
993:       assertEquals(54, Node.SLASH_V);
994:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
995:       assertEquals(52, Node.LENGTH);
996:       assertEquals(30, Node.VAR_ARGS_NAME);
997:       assertEquals(51, Node.STATIC_SOURCE_FILE);
998:       assertEquals(57, Node.REFLECTED_OBJECT);
999:       assertEquals(40, Node.ORIGINALNAME_PROP);
1000:       assertEquals(46, Node.IS_NAMESPACE);
1001:       assertEquals(37, Node.OPT_ARG_NAME);
1002:       assertEquals(49, Node.DIRECT_EVAL);
1003:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1004:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1005:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1006:       assertEquals(50, Node.FREE_CALL);
1007:       assertEquals(12, Node.COLUMN_BITS);
1008:       assertEquals(1, Node.DECR_FLAG);
1009:       assertEquals(32, Node.INCRDECR_PROP);
1010:       assertNotSame(node1, node0);
1011:       assertFalse(boolean4);
1012:   }
1013: }
RegularFileObject[/tmp/EvoSuite_70_1628161011371/com/google/javascript/rhino/Node_70_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:56:51 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_70_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_70_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.common.collect.AbstractMapBasedMultimap$1",
119:       "com.google.common.collect.AbstractMapBasedMultimap$2",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.common.collect.AbstractMultimap$Values",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMultimap$Entries",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.Multimaps$Entries",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.common.collect.ImmutableList",
230:       "com.google.common.collect.SingletonImmutableBiMap",
231:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
232:       "com.google.javascript.rhino.jstype.StringType",
233:       "com.google.javascript.rhino.Node$AbstractPropListItem",
234:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
235:       "com.google.javascript.rhino.jstype.TemplatizedType",
236:       "com.google.javascript.rhino.jstype.Visitor",
237:       "com.google.javascript.rhino.jstype.NoResolvedType",
238:       "com.google.javascript.rhino.jstype.JSTypeNative",
239:       "com.google.javascript.rhino.jstype.AllType",
240:       "com.google.common.collect.Maps",
241:       "com.google.common.collect.SetMultimap",
242:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
243:       "com.google.common.collect.Maps$EntryTransformer",
244:       "com.google.javascript.rhino.JSTypeExpression",
245:       "com.google.common.collect.Iterators$MergingIterator"
246:     );
247:   } 
248: 
249:   private static void resetClasses() {
250:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_70_tmp__ESTest_scaffolding.class.getClassLoader()); 
251: 
252:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
253:       "com.google.javascript.rhino.Node",
254:       "com.google.javascript.rhino.Node$NumberNode",
255:       "com.google.javascript.rhino.Node$StringNode",
256:       "com.google.javascript.rhino.Node$AbstractPropListItem",
257:       "com.google.javascript.rhino.Node$ObjectPropListItem",
258:       "com.google.javascript.rhino.Node$IntPropListItem",
259:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
260:       "com.google.javascript.rhino.Node$AncestorIterable",
261:       "com.google.javascript.rhino.Node$NodeMismatch",
262:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
263:       "com.google.javascript.rhino.Node$SideEffectFlags",
264:       "com.google.javascript.rhino.Token",
265:       "com.google.common.base.Preconditions",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.JSDocInfo",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.jstype.JSType$TypePair",
342:       "com.google.common.collect.AbstractMultimap$Values",
343:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
344:       "com.google.common.collect.AbstractMapBasedMultimap$1",
345:       "com.google.common.collect.Multimaps$Entries",
346:       "com.google.common.collect.AbstractMultimap$Entries",
347:       "com.google.common.collect.AbstractMapBasedMultimap$2",
348:       "com.google.common.base.Objects",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.InputId",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.common.collect.Iterables",
355:       "com.google.common.collect.AbstractIndexedListIterator",
356:       "com.google.common.collect.Iterators$11",
357:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
358:       "com.google.common.collect.Iterators$12",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
360:       "com.google.common.collect.Platform",
361:       "com.google.javascript.rhino.Node$AncestorIterable$1",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.javascript.rhino.jstype.NamespaceType",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.javascript.rhino.JSTypeExpression",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
371:       "com.google.javascript.rhino.jstype.JSType$2"
372:     );
373:   }
374: }

[MASTER] 10:56:51.478 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
byte[] byteArray0 = new byte[9];
byteArray0[0] = (byte)2;
byteArray0[1] = (byte)8;
byteArray0[2] = (byte)77;
byteArray0[3] = (byte)83;
byteArray0[4] = (byte)42;
byteArray0[5] = (byte)2;
byteArray0[6] = (byte)42;
byteArray0[7] = (byte) (-13);
byteArray0[8] = (byte)29;
boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertEquals(9, byteArray0.length);
assertArrayEquals(new byte[] {(byte)2, (byte)8, (byte)77, (byte)83, (byte)42, (byte)2, (byte)42, (byte) (-13), (byte)29}, byteArray0);
assertFalse(boolean0);

Node node0 = Node.newNumber(212.95590524080998);
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(iterable0.contains(node0));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotNull(iterable0);

Node node1 = Node.newNumber((double) 43, 27591, (-2726));
assertFalse(node1.equals((Object)node0));
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertEquals(39, node1.getType());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.hasOneChild());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isHook());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertNotNull(node1);
assertNotSame(node1, node0);

InputId inputId0 = new InputId("");
assertEquals("", inputId0.getIdName());
assertNotNull(inputId0);

node0.setInputId(inputId0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals("", inputId0.getIdName());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotSame(node0, node1);

boolean boolean1 = node0.isCatch();
assertTrue(boolean1 == boolean0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotSame(node0, node1);
assertFalse(boolean1);

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNull(staticSourceFile0);
assertNotSame(node0, node1);

boolean boolean2 = node0.isAnd();
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotSame(node0, node1);
assertFalse(boolean2);

boolean boolean3 = node0.isCast();
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isCast());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotSame(node0, node1);
assertFalse(boolean3);

boolean boolean4 = node1.isOnlyModifiesArgumentsCall();
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertFalse(node1.equals((Object)node0));
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertEquals(39, node1.getType());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.hasOneChild());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isHook());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertNotSame(node1, node0);
assertFalse(boolean4);


[MASTER] 10:56:51.661 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_72_1628161011539/com/google/javascript/rhino/Node_72_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_72_1628161011539/com/google/javascript/rhino/Node_72_tmp__ESTest_scaffolding.java]]
[MASTER] 10:56:51.661 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:56:51.661 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:56:51.662 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 211
[MASTER] 10:56:51.663 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_72_1628161011539/com/google/javascript/rhino/Node_72_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:56:51 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.StaticSourceFile;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.EvoSuiteFile;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_72_tmp__ESTest extends Node_72_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       byte[] byteArray0 = new byte[9];
25:       byteArray0[0] = (byte)2;
26:       byteArray0[1] = (byte)8;
27:       byteArray0[2] = (byte)77;
28:       byteArray0[3] = (byte)83;
29:       byteArray0[4] = (byte)42;
30:       byteArray0[5] = (byte)2;
31:       byteArray0[6] = (byte) (-111);
32:       byteArray0[7] = (byte) (-13);
33:       byteArray0[8] = (byte)29;
34:       boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
35:       assertEquals(9, byteArray0.length);
36:       assertArrayEquals(new byte[] {(byte)2, (byte)8, (byte)77, (byte)83, (byte)42, (byte)2, (byte) (-111), (byte) (-13), (byte)29}, byteArray0);
37:       assertFalse(boolean0);
38:       
39:       Node node0 = Node.newNumber(212.95590524080998);
40:       assertFalse(node0.isVar());
41:       assertFalse(node0.isCall());
42:       assertFalse(node0.isStringKey());
43:       assertFalse(node0.isAdd());
44:       assertFalse(node0.isName());
45:       assertFalse(node0.isNew());
46:       assertFalse(node0.isNull());
47:       assertFalse(node0.isSetterDef());
48:       assertFalse(node0.isParamList());
49:       assertFalse(node0.hasMoreThanOneChild());
50:       assertFalse(node0.isCatch());
51:       assertEquals((-1), node0.getLineno());
52:       assertFalse(node0.isTypeOf());
53:       assertFalse(node0.isRegExp());
54:       assertFalse(node0.isWhile());
55:       assertFalse(node0.isAssign());
56:       assertEquals(39, node0.getType());
57:       assertFalse(node0.isReturn());
58:       assertFalse(node0.isBlock());
59:       assertFalse(node0.hasChildren());
60:       assertFalse(node0.isDec());
61:       assertFalse(node0.isCast());
62:       assertFalse(node0.isNE());
63:       assertFalse(node0.isIf());
64:       assertFalse(node0.isNot());
65:       assertFalse(node0.isDebugger());
66:       assertEquals((-1), node0.getSourcePosition());
67:       assertFalse(node0.isAnd());
68:       assertFalse(node0.isIn());
69:       assertFalse(node0.isContinue());
70:       assertFalse(node0.isFunction());
71:       assertFalse(node0.isFalse());
72:       assertFalse(node0.isHook());
73:       assertFalse(node0.isThrow());
74:       assertFalse(node0.isBreak());
75:       assertFalse(node0.isSwitch());
76:       assertFalse(node0.isInc());
77:       assertFalse(node0.isString());
78:       assertEquals((-1), node0.getCharno());
79:       assertFalse(node0.isObjectLit());
80:       assertFalse(node0.isInstanceOf());
81:       assertFalse(node0.isGetProp());
82:       assertTrue(node0.isNumber());
83:       assertFalse(node0.isCase());
84:       assertFalse(node0.isThis());
85:       assertFalse(node0.isExprResult());
86:       assertFalse(node0.isWith());
87:       assertFalse(node0.isFor());
88:       assertFalse(node0.isComma());
89:       assertFalse(node0.isArrayLit());
90:       assertFalse(node0.isLabelName());
91:       assertFalse(node0.isEmpty());
92:       assertFalse(node0.isTry());
93:       assertFalse(node0.isGetElem());
94:       assertFalse(node0.isVoid());
95:       assertFalse(node0.isDelProp());
96:       assertFalse(node0.hasOneChild());
97:       assertFalse(node0.isScript());
98:       assertFalse(node0.isTrue());
99:       assertFalse(node0.isOr());
100:       assertFalse(node0.isGetterDef());
101:       assertFalse(node0.isAssignAdd());
102:       assertFalse(node0.isDo());
103:       assertFalse(node0.isDefaultCase());
104:       assertFalse(node0.isLabel());
105:       assertEquals(0, node0.getChildCount());
106:       assertEquals(2, Node.POST_FLAG);
107:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
108:       assertEquals(37, Node.OPT_ARG_NAME);
109:       assertEquals(56, Node.CHANGE_TIME);
110:       assertEquals(47, Node.IS_DISPATCHER);
111:       assertEquals(12, Node.COLUMN_BITS);
112:       assertEquals(46, Node.IS_NAMESPACE);
113:       assertEquals(51, Node.STATIC_SOURCE_FILE);
114:       assertEquals(1, Node.DECR_FLAG);
115:       assertEquals(32, Node.INCRDECR_PROP);
116:       assertEquals(29, Node.JSDOC_INFO_PROP);
117:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
118:       assertEquals(15, Node.NO_SIDE_EFFECTS);
119:       assertEquals(53, Node.INPUT_ID);
120:       assertEquals(43, Node.IS_CONSTANT_NAME);
121:       assertEquals(57, Node.LAST_PROP);
122:       assertEquals(30, Node.VAR_ARGS_NAME);
123:       assertEquals(54, Node.SLASH_V);
124:       assertEquals(40, Node.ORIGINALNAME_PROP);
125:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
126:       assertEquals(8, Node.FLAG_NO_THROWS);
127:       assertEquals(39, Node.EMPTY_BLOCK);
128:       assertEquals(48, Node.DIRECTIVES);
129:       assertEquals(55, Node.INFERRED_FUNCTION);
130:       assertEquals(50, Node.FREE_CALL);
131:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
132:       assertEquals(52, Node.LENGTH);
133:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
134:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
135:       assertEquals(36, Node.QUOTED_PROP);
136:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
137:       assertEquals(57, Node.REFLECTED_OBJECT);
138:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
139:       assertEquals(4095, Node.COLUMN_MASK);
140:       assertEquals(49, Node.DIRECT_EVAL);
141:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
142:       assertNotNull(node0);
143:       
144:       Iterable<Node> iterable0 = node0.children();
145:       assertFalse(node0.isVar());
146:       assertFalse(node0.isCall());
147:       assertFalse(node0.isStringKey());
148:       assertFalse(node0.isAdd());
149:       assertFalse(node0.isName());
150:       assertFalse(node0.isNew());
151:       assertFalse(node0.isNull());
152:       assertFalse(node0.isSetterDef());
153:       assertFalse(node0.isParamList());
154:       assertFalse(node0.hasMoreThanOneChild());
155:       assertFalse(node0.isCatch());
156:       assertEquals((-1), node0.getLineno());
157:       assertFalse(node0.isTypeOf());
158:       assertFalse(node0.isRegExp());
159:       assertFalse(node0.isWhile());
160:       assertFalse(node0.isAssign());
161:       assertEquals(39, node0.getType());
162:       assertFalse(node0.isReturn());
163:       assertFalse(node0.isBlock());
164:       assertFalse(node0.hasChildren());
165:       assertFalse(node0.isDec());
166:       assertFalse(node0.isCast());
167:       assertFalse(node0.isNE());
168:       assertFalse(node0.isIf());
169:       assertFalse(node0.isNot());
170:       assertFalse(node0.isDebugger());
171:       assertEquals((-1), node0.getSourcePosition());
172:       assertFalse(node0.isAnd());
173:       assertFalse(node0.isIn());
174:       assertFalse(node0.isContinue());
175:       assertFalse(node0.isFunction());
176:       assertFalse(node0.isFalse());
177:       assertFalse(node0.isHook());
178:       assertFalse(node0.isThrow());
179:       assertFalse(node0.isBreak());
180:       assertFalse(node0.isSwitch());
181:       assertFalse(node0.isInc());
182:       assertFalse(node0.isString());
183:       assertEquals((-1), node0.getCharno());
184:       assertFalse(node0.isObjectLit());
185:       assertFalse(node0.isInstanceOf());
186:       assertFalse(node0.isGetProp());
187:       assertTrue(node0.isNumber());
188:       assertFalse(node0.isCase());
189:       assertFalse(node0.isThis());
190:       assertFalse(node0.isExprResult());
191:       assertFalse(node0.isWith());
192:       assertFalse(node0.isFor());
193:       assertFalse(node0.isComma());
194:       assertFalse(node0.isArrayLit());
195:       assertFalse(node0.isLabelName());
196:       assertFalse(node0.isEmpty());
197:       assertFalse(node0.isTry());
198:       assertFalse(node0.isGetElem());
199:       assertFalse(node0.isVoid());
200:       assertFalse(node0.isDelProp());
201:       assertFalse(node0.hasOneChild());
202:       assertFalse(node0.isScript());
203:       assertFalse(node0.isTrue());
204:       assertFalse(node0.isOr());
205:       assertFalse(node0.isGetterDef());
206:       assertFalse(node0.isAssignAdd());
207:       assertFalse(node0.isDo());
208:       assertFalse(node0.isDefaultCase());
209:       assertFalse(node0.isLabel());
210:       assertEquals(0, node0.getChildCount());
211:       assertFalse(iterable0.contains(node0));
212:       assertEquals(2, Node.POST_FLAG);
213:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
214:       assertEquals(37, Node.OPT_ARG_NAME);
215:       assertEquals(56, Node.CHANGE_TIME);
216:       assertEquals(47, Node.IS_DISPATCHER);
217:       assertEquals(12, Node.COLUMN_BITS);
218:       assertEquals(46, Node.IS_NAMESPACE);
219:       assertEquals(51, Node.STATIC_SOURCE_FILE);
220:       assertEquals(1, Node.DECR_FLAG);
221:       assertEquals(32, Node.INCRDECR_PROP);
222:       assertEquals(29, Node.JSDOC_INFO_PROP);
223:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
224:       assertEquals(15, Node.NO_SIDE_EFFECTS);
225:       assertEquals(53, Node.INPUT_ID);
226:       assertEquals(43, Node.IS_CONSTANT_NAME);
227:       assertEquals(57, Node.LAST_PROP);
228:       assertEquals(30, Node.VAR_ARGS_NAME);
229:       assertEquals(54, Node.SLASH_V);
230:       assertEquals(40, Node.ORIGINALNAME_PROP);
231:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
232:       assertEquals(8, Node.FLAG_NO_THROWS);
233:       assertEquals(39, Node.EMPTY_BLOCK);
234:       assertEquals(48, Node.DIRECTIVES);
235:       assertEquals(55, Node.INFERRED_FUNCTION);
236:       assertEquals(50, Node.FREE_CALL);
237:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
238:       assertEquals(52, Node.LENGTH);
239:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
240:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
241:       assertEquals(36, Node.QUOTED_PROP);
242:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
243:       assertEquals(57, Node.REFLECTED_OBJECT);
244:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
245:       assertEquals(4095, Node.COLUMN_MASK);
246:       assertEquals(49, Node.DIRECT_EVAL);
247:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
248:       assertNotNull(iterable0);
249:       
250:       Node node1 = Node.newNumber((double) 43, 27591, (-2726));
251:       assertFalse(node1.equals((Object)node0));
252:       assertFalse(node1.isContinue());
253:       assertEquals(39, node1.getType());
254:       assertFalse(node1.isOr());
255:       assertFalse(node1.hasMoreThanOneChild());
256:       assertFalse(node1.isNew());
257:       assertFalse(node1.isLabel());
258:       assertFalse(node1.isAdd());
259:       assertFalse(node1.isReturn());
260:       assertFalse(node1.isBlock());
261:       assertFalse(node1.isWhile());
262:       assertFalse(node1.isAssignAdd());
263:       assertFalse(node1.isDo());
264:       assertFalse(node1.isCall());
265:       assertFalse(node1.isGetElem());
266:       assertFalse(node1.hasChildren());
267:       assertFalse(node1.isDec());
268:       assertFalse(node1.isAssign());
269:       assertFalse(node1.isTypeOf());
270:       assertFalse(node1.isExprResult());
271:       assertFalse(node1.isNull());
272:       assertEquals((-1), node1.getLineno());
273:       assertFalse(node1.isName());
274:       assertFalse(node1.isCatch());
275:       assertEquals(0, node1.getChildCount());
276:       assertFalse(node1.isInstanceOf());
277:       assertFalse(node1.isRegExp());
278:       assertFalse(node1.isWith());
279:       assertFalse(node1.isScript());
280:       assertFalse(node1.isThis());
281:       assertFalse(node1.isDefaultCase());
282:       assertFalse(node1.hasOneChild());
283:       assertFalse(node1.isTry());
284:       assertFalse(node1.isStringKey());
285:       assertFalse(node1.isVar());
286:       assertFalse(node1.isArrayLit());
287:       assertFalse(node1.isGetterDef());
288:       assertEquals((-1), node1.getCharno());
289:       assertFalse(node1.isParamList());
290:       assertFalse(node1.isLabelName());
291:       assertFalse(node1.isSwitch());
292:       assertFalse(node1.isCase());
293:       assertFalse(node1.isIn());
294:       assertFalse(node1.isString());
295:       assertFalse(node1.isInc());
296:       assertTrue(node1.isNumber());
297:       assertFalse(node1.isEmpty());
298:       assertFalse(node1.isFor());
299:       assertFalse(node1.isHook());
300:       assertFalse(node1.isVoid());
301:       assertFalse(node1.isNE());
302:       assertFalse(node1.isTrue());
303:       assertFalse(node1.isBreak());
304:       assertFalse(node1.isDelProp());
305:       assertFalse(node1.isIf());
306:       assertFalse(node1.isAnd());
307:       assertFalse(node1.isObjectLit());
308:       assertFalse(node1.isNot());
309:       assertFalse(node1.isFunction());
310:       assertFalse(node1.isGetProp());
311:       assertFalse(node1.isComma());
312:       assertFalse(node1.isSetterDef());
313:       assertFalse(node1.isThrow());
314:       assertFalse(node1.isCast());
315:       assertEquals((-1), node1.getSourcePosition());
316:       assertFalse(node1.isFalse());
317:       assertFalse(node1.isDebugger());
318:       assertEquals(53, Node.INPUT_ID);
319:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
320:       assertEquals(43, Node.IS_CONSTANT_NAME);
321:       assertEquals(4095, Node.COLUMN_MASK);
322:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
323:       assertEquals(47, Node.IS_DISPATCHER);
324:       assertEquals(2, Node.POST_FLAG);
325:       assertEquals(32, Node.INCRDECR_PROP);
326:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
327:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
328:       assertEquals(46, Node.IS_NAMESPACE);
329:       assertEquals(50, Node.FREE_CALL);
330:       assertEquals(51, Node.STATIC_SOURCE_FILE);
331:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
332:       assertEquals(54, Node.SLASH_V);
333:       assertEquals(52, Node.LENGTH);
334:       assertEquals(15, Node.NO_SIDE_EFFECTS);
335:       assertEquals(57, Node.LAST_PROP);
336:       assertEquals(49, Node.DIRECT_EVAL);
337:       assertEquals(1, Node.DECR_FLAG);
338:       assertEquals(40, Node.ORIGINALNAME_PROP);
339:       assertEquals(12, Node.COLUMN_BITS);
340:       assertEquals(30, Node.VAR_ARGS_NAME);
341:       assertEquals(48, Node.DIRECTIVES);
342:       assertEquals(8, Node.FLAG_NO_THROWS);
343:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
344:       assertEquals(56, Node.CHANGE_TIME);
345:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
346:       assertEquals(39, Node.EMPTY_BLOCK);
347:       assertEquals(37, Node.OPT_ARG_NAME);
348:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
349:       assertEquals(55, Node.INFERRED_FUNCTION);
350:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
351:       assertEquals(29, Node.JSDOC_INFO_PROP);
352:       assertEquals(57, Node.REFLECTED_OBJECT);
353:       assertEquals(36, Node.QUOTED_PROP);
354:       assertNotNull(node1);
355:       assertNotSame(node1, node0);
356:       
357:       Node node2 = new Node(47, node0, node1, node0);
358:       assertFalse(node0.equals((Object)node1));
359:       assertFalse(node1.equals((Object)node0));
360:       assertFalse(node2.equals((Object)node1));
361:       assertFalse(node2.equals((Object)node0));
362:       assertFalse(node0.isVar());
363:       assertFalse(node0.isCall());
364:       assertFalse(node0.isStringKey());
365:       assertFalse(node0.isAdd());
366:       assertFalse(node0.isName());
367:       assertFalse(node0.isNew());
368:       assertFalse(node0.isNull());
369:       assertFalse(node0.isSetterDef());
370:       assertFalse(node0.isParamList());
371:       assertFalse(node0.hasMoreThanOneChild());
372:       assertFalse(node0.isCatch());
373:       assertEquals((-1), node0.getLineno());
374:       assertFalse(node0.isTypeOf());
375:       assertFalse(node0.isRegExp());
376:       assertFalse(node0.isWhile());
377:       assertFalse(node0.isAssign());
378:       assertEquals(39, node0.getType());
379:       assertFalse(node0.isReturn());
380:       assertFalse(node0.isBlock());
381:       assertFalse(node0.hasChildren());
382:       assertFalse(node0.isDec());
383:       assertFalse(node0.isCast());
384:       assertFalse(node0.isNE());
385:       assertFalse(node0.isIf());
386:       assertFalse(node0.isNot());
387:       assertFalse(node0.isDebugger());
388:       assertEquals((-1), node0.getSourcePosition());
389:       assertFalse(node0.isAnd());
390:       assertFalse(node0.isIn());
391:       assertFalse(node0.isContinue());
392:       assertFalse(node0.isFunction());
393:       assertFalse(node0.isFalse());
394:       assertFalse(node0.isHook());
395:       assertFalse(node0.isThrow());
396:       assertFalse(node0.isBreak());
397:       assertFalse(node0.isSwitch());
398:       assertFalse(node0.isInc());
399:       assertFalse(node0.isString());
400:       assertEquals((-1), node0.getCharno());
401:       assertFalse(node0.isObjectLit());
402:       assertFalse(node0.isInstanceOf());
403:       assertFalse(node0.isGetProp());
404:       assertTrue(node0.isNumber());
405:       assertFalse(node0.isCase());
406:       assertFalse(node0.isThis());
407:       assertFalse(node0.isExprResult());
408:       assertFalse(node0.isWith());
409:       assertFalse(node0.isFor());
410:       assertFalse(node0.isComma());
411:       assertFalse(node0.isArrayLit());
412:       assertFalse(node0.isLabelName());
413:       assertFalse(node0.isEmpty());
414:       assertFalse(node0.isTry());
415:       assertFalse(node0.isGetElem());
416:       assertFalse(node0.isVoid());
417:       assertFalse(node0.isDelProp());
418:       assertFalse(node0.hasOneChild());
419:       assertFalse(node0.isScript());
420:       assertFalse(node0.isTrue());
421:       assertFalse(node0.isOr());
422:       assertFalse(node0.isGetterDef());
423:       assertFalse(node0.isAssignAdd());
424:       assertFalse(node0.isDo());
425:       assertFalse(node0.isDefaultCase());
426:       assertFalse(node0.isLabel());
427:       assertEquals(0, node0.getChildCount());
428:       assertFalse(node1.isContinue());
429:       assertEquals(39, node1.getType());
430:       assertFalse(node1.isOr());
431:       assertFalse(node1.hasMoreThanOneChild());
432:       assertFalse(node1.isNew());
433:       assertFalse(node1.isLabel());
434:       assertFalse(node1.isAdd());
435:       assertFalse(node1.isReturn());
436:       assertFalse(node1.isBlock());
437:       assertFalse(node1.isWhile());
438:       assertFalse(node1.isAssignAdd());
439:       assertFalse(node1.isDo());
440:       assertFalse(node1.isCall());
441:       assertFalse(node1.isGetElem());
442:       assertFalse(node1.hasChildren());
443:       assertFalse(node1.isDec());
444:       assertFalse(node1.isAssign());
445:       assertFalse(node1.isTypeOf());
446:       assertFalse(node1.isExprResult());
447:       assertFalse(node1.isNull());
448:       assertEquals((-1), node1.getLineno());
449:       assertFalse(node1.isName());
450:       assertFalse(node1.isCatch());
451:       assertEquals(0, node1.getChildCount());
452:       assertFalse(node1.isInstanceOf());
453:       assertFalse(node1.isRegExp());
454:       assertFalse(node1.isWith());
455:       assertFalse(node1.isScript());
456:       assertFalse(node1.isThis());
457:       assertFalse(node1.isDefaultCase());
458:       assertFalse(node1.hasOneChild());
459:       assertFalse(node1.isTry());
460:       assertFalse(node1.isStringKey());
461:       assertFalse(node1.isVar());
462:       assertFalse(node1.isArrayLit());
463:       assertFalse(node1.isGetterDef());
464:       assertEquals((-1), node1.getCharno());
465:       assertFalse(node1.isParamList());
466:       assertFalse(node1.isLabelName());
467:       assertFalse(node1.isSwitch());
468:       assertFalse(node1.isCase());
469:       assertFalse(node1.isIn());
470:       assertFalse(node1.isString());
471:       assertFalse(node1.isInc());
472:       assertTrue(node1.isNumber());
473:       assertFalse(node1.isEmpty());
474:       assertFalse(node1.isFor());
475:       assertFalse(node1.isHook());
476:       assertFalse(node1.isVoid());
477:       assertFalse(node1.isNE());
478:       assertFalse(node1.isTrue());
479:       assertFalse(node1.isBreak());
480:       assertFalse(node1.isDelProp());
481:       assertFalse(node1.isIf());
482:       assertFalse(node1.isAnd());
483:       assertFalse(node1.isObjectLit());
484:       assertFalse(node1.isNot());
485:       assertFalse(node1.isFunction());
486:       assertFalse(node1.isGetProp());
487:       assertFalse(node1.isComma());
488:       assertFalse(node1.isSetterDef());
489:       assertFalse(node1.isThrow());
490:       assertFalse(node1.isCast());
491:       assertEquals((-1), node1.getSourcePosition());
492:       assertFalse(node1.isFalse());
493:       assertFalse(node1.isDebugger());
494:       assertFalse(node2.isLabel());
495:       assertFalse(node2.isAssignAdd());
496:       assertFalse(node2.isOr());
497:       assertEquals(47, node2.getType());
498:       assertFalse(node2.isReturn());
499:       assertEquals((-1), node2.getLineno());
500:       assertFalse(node2.isLabelName());
501:       assertFalse(node2.isNumber());
502:       assertEquals((-1), node2.getSourcePosition());
503:       assertFalse(node2.isAdd());
504:       assertFalse(node2.isCast());
505:       assertFalse(node2.isNew());
506:       assertFalse(node2.isDo());
507:       assertFalse(node2.isContinue());
508:       assertFalse(node2.isVar());
509:       assertFalse(node2.isGetProp());
510:       assertFalse(node2.isBreak());
511:       assertFalse(node2.isNot());
512:       assertFalse(node2.isName());
513:       assertFalse(node2.isAnd());
514:       assertFalse(node2.isNull());
515:       assertFalse(node2.isTrue());
516:       assertFalse(node2.isObjectLit());
517:       assertFalse(node2.isDebugger());
518:       assertFalse(node2.isCall());
519:       assertFalse(node2.isExprResult());
520:       assertFalse(node2.isVoid());
521:       assertTrue(node2.isRegExp());
522:       assertFalse(node2.isAssign());
523:       assertTrue(node2.hasOneChild());
524:       assertFalse(node2.isGetElem());
525:       assertFalse(node2.isWhile());
526:       assertFalse(node2.isTypeOf());
527:       assertFalse(node2.isComma());
528:       assertFalse(node2.isDec());
529:       assertTrue(node2.hasChildren());
530:       assertFalse(node2.isIn());
531:       assertFalse(node2.isDelProp());
532:       assertFalse(node2.isCase());
533:       assertFalse(node2.isEmpty());
534:       assertFalse(node2.isIf());
535:       assertFalse(node2.isString());
536:       assertFalse(node2.isNE());
537:       assertEquals((-1), node2.getCharno());
538:       assertFalse(node2.isGetterDef());
539:       assertFalse(node2.isArrayLit());
540:       assertFalse(node2.isSwitch());
541:       assertFalse(node2.isInc());
542:       assertFalse(node2.isFalse());
543:       assertFalse(node2.isThrow());
544:       assertFalse(node2.isDefaultCase());
545:       assertFalse(node2.isFunction());
546:       assertFalse(node2.isInstanceOf());
547:       assertFalse(node2.isParamList());
548:       assertFalse(node2.isSetterDef());
549:       assertFalse(node2.isStringKey());
550:       assertFalse(node2.isTry());
551:       assertFalse(node2.isBlock());
552:       assertFalse(node2.isScript());
553:       assertFalse(node2.isFor());
554:       assertFalse(node2.isWith());
555:       assertFalse(node2.isCatch());
556:       assertFalse(node2.isHook());
557:       assertFalse(node2.isThis());
558:       assertFalse(node2.hasMoreThanOneChild());
559:       assertEquals(1, node2.getChildCount());
560:       assertEquals(2, Node.POST_FLAG);
561:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
562:       assertEquals(37, Node.OPT_ARG_NAME);
563:       assertEquals(56, Node.CHANGE_TIME);
564:       assertEquals(47, Node.IS_DISPATCHER);
565:       assertEquals(12, Node.COLUMN_BITS);
566:       assertEquals(46, Node.IS_NAMESPACE);
567:       assertEquals(51, Node.STATIC_SOURCE_FILE);
568:       assertEquals(1, Node.DECR_FLAG);
569:       assertEquals(32, Node.INCRDECR_PROP);
570:       assertEquals(29, Node.JSDOC_INFO_PROP);
571:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
572:       assertEquals(15, Node.NO_SIDE_EFFECTS);
573:       assertEquals(53, Node.INPUT_ID);
574:       assertEquals(43, Node.IS_CONSTANT_NAME);
575:       assertEquals(57, Node.LAST_PROP);
576:       assertEquals(30, Node.VAR_ARGS_NAME);
577:       assertEquals(54, Node.SLASH_V);
578:       assertEquals(40, Node.ORIGINALNAME_PROP);
579:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
580:       assertEquals(8, Node.FLAG_NO_THROWS);
581:       assertEquals(39, Node.EMPTY_BLOCK);
582:       assertEquals(48, Node.DIRECTIVES);
583:       assertEquals(55, Node.INFERRED_FUNCTION);
584:       assertEquals(50, Node.FREE_CALL);
585:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
586:       assertEquals(52, Node.LENGTH);
587:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
588:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
589:       assertEquals(36, Node.QUOTED_PROP);
590:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
591:       assertEquals(57, Node.REFLECTED_OBJECT);
592:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
593:       assertEquals(4095, Node.COLUMN_MASK);
594:       assertEquals(49, Node.DIRECT_EVAL);
595:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
596:       assertEquals(53, Node.INPUT_ID);
597:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
598:       assertEquals(43, Node.IS_CONSTANT_NAME);
599:       assertEquals(4095, Node.COLUMN_MASK);
600:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
601:       assertEquals(47, Node.IS_DISPATCHER);
602:       assertEquals(2, Node.POST_FLAG);
603:       assertEquals(32, Node.INCRDECR_PROP);
604:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
605:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
606:       assertEquals(46, Node.IS_NAMESPACE);
607:       assertEquals(50, Node.FREE_CALL);
608:       assertEquals(51, Node.STATIC_SOURCE_FILE);
609:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
610:       assertEquals(54, Node.SLASH_V);
611:       assertEquals(52, Node.LENGTH);
612:       assertEquals(15, Node.NO_SIDE_EFFECTS);
613:       assertEquals(57, Node.LAST_PROP);
614:       assertEquals(49, Node.DIRECT_EVAL);
615:       assertEquals(1, Node.DECR_FLAG);
616:       assertEquals(40, Node.ORIGINALNAME_PROP);
617:       assertEquals(12, Node.COLUMN_BITS);
618:       assertEquals(30, Node.VAR_ARGS_NAME);
619:       assertEquals(48, Node.DIRECTIVES);
620:       assertEquals(8, Node.FLAG_NO_THROWS);
621:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
622:       assertEquals(56, Node.CHANGE_TIME);
623:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
624:       assertEquals(39, Node.EMPTY_BLOCK);
625:       assertEquals(37, Node.OPT_ARG_NAME);
626:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
627:       assertEquals(55, Node.INFERRED_FUNCTION);
628:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
629:       assertEquals(29, Node.JSDOC_INFO_PROP);
630:       assertEquals(57, Node.REFLECTED_OBJECT);
631:       assertEquals(36, Node.QUOTED_PROP);
632:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
633:       assertEquals(43, Node.IS_CONSTANT_NAME);
634:       assertEquals(36, Node.QUOTED_PROP);
635:       assertEquals(8, Node.FLAG_NO_THROWS);
636:       assertEquals(55, Node.INFERRED_FUNCTION);
637:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
638:       assertEquals(39, Node.EMPTY_BLOCK);
639:       assertEquals(53, Node.INPUT_ID);
640:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
641:       assertEquals(29, Node.JSDOC_INFO_PROP);
642:       assertEquals(56, Node.CHANGE_TIME);
643:       assertEquals(57, Node.REFLECTED_OBJECT);
644:       assertEquals(48, Node.DIRECTIVES);
645:       assertEquals(4095, Node.COLUMN_MASK);
646:       assertEquals(37, Node.OPT_ARG_NAME);
647:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
648:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
649:       assertEquals(30, Node.VAR_ARGS_NAME);
650:       assertEquals(49, Node.DIRECT_EVAL);
651:       assertEquals(57, Node.LAST_PROP);
652:       assertEquals(1, Node.DECR_FLAG);
653:       assertEquals(51, Node.STATIC_SOURCE_FILE);
654:       assertEquals(46, Node.IS_NAMESPACE);
655:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
656:       assertEquals(54, Node.SLASH_V);
657:       assertEquals(12, Node.COLUMN_BITS);
658:       assertEquals(52, Node.LENGTH);
659:       assertEquals(32, Node.INCRDECR_PROP);
660:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
661:       assertEquals(15, Node.NO_SIDE_EFFECTS);
662:       assertEquals(50, Node.FREE_CALL);
663:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
664:       assertEquals(2, Node.POST_FLAG);
665:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
666:       assertEquals(47, Node.IS_DISPATCHER);
667:       assertEquals(40, Node.ORIGINALNAME_PROP);
668:       assertNotNull(node2);
669:       
670:       boolean boolean1 = node2.hasOneChild();
671:       assertFalse(node0.equals((Object)node1));
672:       assertFalse(node0.equals((Object)node2));
673:       assertFalse(node1.equals((Object)node2));
674:       assertFalse(node1.equals((Object)node0));
675:       assertFalse(node2.equals((Object)node1));
676:       assertFalse(node2.equals((Object)node0));
677:       assertFalse(boolean1 == boolean0);
678:       assertFalse(node0.isVar());
679:       assertFalse(node0.isCall());
680:       assertFalse(node0.isStringKey());
681:       assertFalse(node0.isAdd());
682:       assertFalse(node0.isName());
683:       assertFalse(node0.isNew());
684:       assertFalse(node0.isNull());
685:       assertFalse(node0.isSetterDef());
686:       assertFalse(node0.isParamList());
687:       assertFalse(node0.hasMoreThanOneChild());
688:       assertFalse(node0.isCatch());
689:       assertEquals((-1), node0.getLineno());
690:       assertFalse(node0.isTypeOf());
691:       assertFalse(node0.isRegExp());
692:       assertFalse(node0.isWhile());
693:       assertFalse(node0.isAssign());
694:       assertEquals(39, node0.getType());
695:       assertFalse(node0.isReturn());
696:       assertFalse(node0.isBlock());
697:       assertFalse(node0.hasChildren());
698:       assertFalse(node0.isDec());
699:       assertFalse(node0.isCast());
700:       assertFalse(node0.isNE());
701:       assertFalse(node0.isIf());
702:       assertFalse(node0.isNot());
703:       assertFalse(node0.isDebugger());
704:       assertEquals((-1), node0.getSourcePosition());
705:       assertFalse(node0.isAnd());
706:       assertFalse(node0.isIn());
707:       assertFalse(node0.isContinue());
708:       assertFalse(node0.isFunction());
709:       assertFalse(node0.isFalse());
710:       assertFalse(node0.isHook());
711:       assertFalse(node0.isThrow());
712:       assertFalse(node0.isBreak());
713:       assertFalse(node0.isSwitch());
714:       assertFalse(node0.isInc());
715:       assertFalse(node0.isString());
716:       assertEquals((-1), node0.getCharno());
717:       assertFalse(node0.isObjectLit());
718:       assertFalse(node0.isInstanceOf());
719:       assertFalse(node0.isGetProp());
720:       assertTrue(node0.isNumber());
721:       assertFalse(node0.isCase());
722:       assertFalse(node0.isThis());
723:       assertFalse(node0.isExprResult());
724:       assertFalse(node0.isWith());
725:       assertFalse(node0.isFor());
726:       assertFalse(node0.isComma());
727:       assertFalse(node0.isArrayLit());
728:       assertFalse(node0.isLabelName());
729:       assertFalse(node0.isEmpty());
730:       assertFalse(node0.isTry());
731:       assertFalse(node0.isGetElem());
732:       assertFalse(node0.isVoid());
733:       assertFalse(node0.isDelProp());
734:       assertFalse(node0.hasOneChild());
735:       assertFalse(node0.isScript());
736:       assertFalse(node0.isTrue());
737:       assertFalse(node0.isOr());
738:       assertFalse(node0.isGetterDef());
739:       assertFalse(node0.isAssignAdd());
740:       assertFalse(node0.isDo());
741:       assertFalse(node0.isDefaultCase());
742:       assertFalse(node0.isLabel());
743:       assertEquals(0, node0.getChildCount());
744:       assertFalse(node1.isContinue());
745:       assertEquals(39, node1.getType());
746:       assertFalse(node1.isOr());
747:       assertFalse(node1.hasMoreThanOneChild());
748:       assertFalse(node1.isNew());
749:       assertFalse(node1.isLabel());
750:       assertFalse(node1.isAdd());
751:       assertFalse(node1.isReturn());
752:       assertFalse(node1.isBlock());
753:       assertFalse(node1.isWhile());
754:       assertFalse(node1.isAssignAdd());
755:       assertFalse(node1.isDo());
756:       assertFalse(node1.isCall());
757:       assertFalse(node1.isGetElem());
758:       assertFalse(node1.hasChildren());
759:       assertFalse(node1.isDec());
760:       assertFalse(node1.isAssign());
761:       assertFalse(node1.isTypeOf());
762:       assertFalse(node1.isExprResult());
763:       assertFalse(node1.isNull());
764:       assertEquals((-1), node1.getLineno());
765:       assertFalse(node1.isName());
766:       assertFalse(node1.isCatch());
767:       assertEquals(0, node1.getChildCount());
768:       assertFalse(node1.isInstanceOf());
769:       assertFalse(node1.isRegExp());
770:       assertFalse(node1.isWith());
771:       assertFalse(node1.isScript());
772:       assertFalse(node1.isThis());
773:       assertFalse(node1.isDefaultCase());
774:       assertFalse(node1.hasOneChild());
775:       assertFalse(node1.isTry());
776:       assertFalse(node1.isStringKey());
777:       assertFalse(node1.isVar());
778:       assertFalse(node1.isArrayLit());
779:       assertFalse(node1.isGetterDef());
780:       assertEquals((-1), node1.getCharno());
781:       assertFalse(node1.isParamList());
782:       assertFalse(node1.isLabelName());
783:       assertFalse(node1.isSwitch());
784:       assertFalse(node1.isCase());
785:       assertFalse(node1.isIn());
786:       assertFalse(node1.isString());
787:       assertFalse(node1.isInc());
788:       assertTrue(node1.isNumber());
789:       assertFalse(node1.isEmpty());
790:       assertFalse(node1.isFor());
791:       assertFalse(node1.isHook());
792:       assertFalse(node1.isVoid());
793:       assertFalse(node1.isNE());
794:       assertFalse(node1.isTrue());
795:       assertFalse(node1.isBreak());
796:       assertFalse(node1.isDelProp());
797:       assertFalse(node1.isIf());
798:       assertFalse(node1.isAnd());
799:       assertFalse(node1.isObjectLit());
800:       assertFalse(node1.isNot());
801:       assertFalse(node1.isFunction());
802:       assertFalse(node1.isGetProp());
803:       assertFalse(node1.isComma());
804:       assertFalse(node1.isSetterDef());
805:       assertFalse(node1.isThrow());
806:       assertFalse(node1.isCast());
807:       assertEquals((-1), node1.getSourcePosition());
808:       assertFalse(node1.isFalse());
809:       assertFalse(node1.isDebugger());
810:       assertFalse(node2.isLabel());
811:       assertFalse(node2.isAssignAdd());
812:       assertFalse(node2.isOr());
813:       assertEquals(47, node2.getType());
814:       assertFalse(node2.isReturn());
815:       assertEquals((-1), node2.getLineno());
816:       assertFalse(node2.isLabelName());
817:       assertFalse(node2.isNumber());
818:       assertEquals((-1), node2.getSourcePosition());
819:       assertFalse(node2.isAdd());
820:       assertFalse(node2.isCast());
821:       assertFalse(node2.isNew());
822:       assertFalse(node2.isDo());
823:       assertFalse(node2.isContinue());
824:       assertFalse(node2.isVar());
825:       assertFalse(node2.isGetProp());
826:       assertFalse(node2.isBreak());
827:       assertFalse(node2.isNot());
828:       assertFalse(node2.isName());
829:       assertFalse(node2.isAnd());
830:       assertFalse(node2.isNull());
831:       assertFalse(node2.isTrue());
832:       assertFalse(node2.isObjectLit());
833:       assertFalse(node2.isDebugger());
834:       assertFalse(node2.isCall());
835:       assertFalse(node2.isExprResult());
836:       assertFalse(node2.isVoid());
837:       assertTrue(node2.isRegExp());
838:       assertFalse(node2.isAssign());
839:       assertTrue(node2.hasOneChild());
840:       assertFalse(node2.isGetElem());
841:       assertFalse(node2.isWhile());
842:       assertFalse(node2.isTypeOf());
843:       assertFalse(node2.isComma());
844:       assertFalse(node2.isDec());
845:       assertTrue(node2.hasChildren());
846:       assertFalse(node2.isIn());
847:       assertFalse(node2.isDelProp());
848:       assertFalse(node2.isCase());
849:       assertFalse(node2.isEmpty());
850:       assertFalse(node2.isIf());
851:       assertFalse(node2.isString());
852:       assertFalse(node2.isNE());
853:       assertEquals((-1), node2.getCharno());
854:       assertFalse(node2.isGetterDef());
855:       assertFalse(node2.isArrayLit());
856:       assertFalse(node2.isSwitch());
857:       assertFalse(node2.isInc());
858:       assertFalse(node2.isFalse());
859:       assertFalse(node2.isThrow());
860:       assertFalse(node2.isDefaultCase());
861:       assertFalse(node2.isFunction());
862:       assertFalse(node2.isInstanceOf());
863:       assertFalse(node2.isParamList());
864:       assertFalse(node2.isSetterDef());
865:       assertFalse(node2.isStringKey());
866:       assertFalse(node2.isTry());
867:       assertFalse(node2.isBlock());
868:       assertFalse(node2.isScript());
869:       assertFalse(node2.isFor());
870:       assertFalse(node2.isWith());
871:       assertFalse(node2.isCatch());
872:       assertFalse(node2.isHook());
873:       assertFalse(node2.isThis());
874:       assertFalse(node2.hasMoreThanOneChild());
875:       assertEquals(1, node2.getChildCount());
876:       assertEquals(2, Node.POST_FLAG);
877:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
878:       assertEquals(37, Node.OPT_ARG_NAME);
879:       assertEquals(56, Node.CHANGE_TIME);
880:       assertEquals(47, Node.IS_DISPATCHER);
881:       assertEquals(12, Node.COLUMN_BITS);
882:       assertEquals(46, Node.IS_NAMESPACE);
883:       assertEquals(51, Node.STATIC_SOURCE_FILE);
884:       assertEquals(1, Node.DECR_FLAG);
885:       assertEquals(32, Node.INCRDECR_PROP);
886:       assertEquals(29, Node.JSDOC_INFO_PROP);
887:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
888:       assertEquals(15, Node.NO_SIDE_EFFECTS);
889:       assertEquals(53, Node.INPUT_ID);
890:       assertEquals(43, Node.IS_CONSTANT_NAME);
891:       assertEquals(57, Node.LAST_PROP);
892:       assertEquals(30, Node.VAR_ARGS_NAME);
893:       assertEquals(54, Node.SLASH_V);
894:       assertEquals(40, Node.ORIGINALNAME_PROP);
895:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
896:       assertEquals(8, Node.FLAG_NO_THROWS);
897:       assertEquals(39, Node.EMPTY_BLOCK);
898:       assertEquals(48, Node.DIRECTIVES);
899:       assertEquals(55, Node.INFERRED_FUNCTION);
900:       assertEquals(50, Node.FREE_CALL);
901:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
902:       assertEquals(52, Node.LENGTH);
903:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
904:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
905:       assertEquals(36, Node.QUOTED_PROP);
906:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
907:       assertEquals(57, Node.REFLECTED_OBJECT);
908:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
909:       assertEquals(4095, Node.COLUMN_MASK);
910:       assertEquals(49, Node.DIRECT_EVAL);
911:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
912:       assertEquals(53, Node.INPUT_ID);
913:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
914:       assertEquals(43, Node.IS_CONSTANT_NAME);
915:       assertEquals(4095, Node.COLUMN_MASK);
916:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
917:       assertEquals(47, Node.IS_DISPATCHER);
918:       assertEquals(2, Node.POST_FLAG);
919:       assertEquals(32, Node.INCRDECR_PROP);
920:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
921:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
922:       assertEquals(46, Node.IS_NAMESPACE);
923:       assertEquals(50, Node.FREE_CALL);
924:       assertEquals(51, Node.STATIC_SOURCE_FILE);
925:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
926:       assertEquals(54, Node.SLASH_V);
927:       assertEquals(52, Node.LENGTH);
928:       assertEquals(15, Node.NO_SIDE_EFFECTS);
929:       assertEquals(57, Node.LAST_PROP);
930:       assertEquals(49, Node.DIRECT_EVAL);
931:       assertEquals(1, Node.DECR_FLAG);
932:       assertEquals(40, Node.ORIGINALNAME_PROP);
933:       assertEquals(12, Node.COLUMN_BITS);
934:       assertEquals(30, Node.VAR_ARGS_NAME);
935:       assertEquals(48, Node.DIRECTIVES);
936:       assertEquals(8, Node.FLAG_NO_THROWS);
937:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
938:       assertEquals(56, Node.CHANGE_TIME);
939:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
940:       assertEquals(39, Node.EMPTY_BLOCK);
941:       assertEquals(37, Node.OPT_ARG_NAME);
942:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
943:       assertEquals(55, Node.INFERRED_FUNCTION);
944:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
945:       assertEquals(29, Node.JSDOC_INFO_PROP);
946:       assertEquals(57, Node.REFLECTED_OBJECT);
947:       assertEquals(36, Node.QUOTED_PROP);
948:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
949:       assertEquals(43, Node.IS_CONSTANT_NAME);
950:       assertEquals(36, Node.QUOTED_PROP);
951:       assertEquals(8, Node.FLAG_NO_THROWS);
952:       assertEquals(55, Node.INFERRED_FUNCTION);
953:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
954:       assertEquals(39, Node.EMPTY_BLOCK);
955:       assertEquals(53, Node.INPUT_ID);
956:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
957:       assertEquals(29, Node.JSDOC_INFO_PROP);
958:       assertEquals(56, Node.CHANGE_TIME);
959:       assertEquals(57, Node.REFLECTED_OBJECT);
960:       assertEquals(48, Node.DIRECTIVES);
961:       assertEquals(4095, Node.COLUMN_MASK);
962:       assertEquals(37, Node.OPT_ARG_NAME);
963:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
964:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
965:       assertEquals(30, Node.VAR_ARGS_NAME);
966:       assertEquals(49, Node.DIRECT_EVAL);
967:       assertEquals(57, Node.LAST_PROP);
968:       assertEquals(1, Node.DECR_FLAG);
969:       assertEquals(51, Node.STATIC_SOURCE_FILE);
970:       assertEquals(46, Node.IS_NAMESPACE);
971:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
972:       assertEquals(54, Node.SLASH_V);
973:       assertEquals(12, Node.COLUMN_BITS);
974:       assertEquals(52, Node.LENGTH);
975:       assertEquals(32, Node.INCRDECR_PROP);
976:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
977:       assertEquals(15, Node.NO_SIDE_EFFECTS);
978:       assertEquals(50, Node.FREE_CALL);
979:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
980:       assertEquals(2, Node.POST_FLAG);
981:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
982:       assertEquals(47, Node.IS_DISPATCHER);
983:       assertEquals(40, Node.ORIGINALNAME_PROP);
984:       assertNotSame(node0, node1);
985:       assertNotSame(node1, node0);
986:       assertTrue(boolean1);
987:       
988:       StaticSourceFile staticSourceFile0 = node2.getStaticSourceFile();
989:       assertFalse(node0.equals((Object)node1));
990:       assertFalse(node0.equals((Object)node2));
991:       assertFalse(node1.equals((Object)node2));
992:       assertFalse(node1.equals((Object)node0));
993:       assertFalse(node2.equals((Object)node1));
994:       assertFalse(node2.equals((Object)node0));
995:       assertFalse(node0.isVar());
996:       assertFalse(node0.isCall());
997:       assertFalse(node0.isStringKey());
998:       assertFalse(node0.isAdd());
999:       assertFalse(node0.isName());
1000:       assertFalse(node0.isNew());
1001:       assertFalse(node0.isNull());
1002:       assertFalse(node0.isSetterDef());
1003:       assertFalse(node0.isParamList());
1004:       assertFalse(node0.hasMoreThanOneChild());
1005:       assertFalse(node0.isCatch());
1006:       assertEquals((-1), node0.getLineno());
1007:       assertFalse(node0.isTypeOf());
1008:       assertFalse(node0.isRegExp());
1009:       assertFalse(node0.isWhile());
1010:       assertFalse(node0.isAssign());
1011:       assertEquals(39, node0.getType());
1012:       assertFalse(node0.isReturn());
1013:       assertFalse(node0.isBlock());
1014:       assertFalse(node0.hasChildren());
1015:       assertFalse(node0.isDec());
1016:       assertFalse(node0.isCast());
1017:       assertFalse(node0.isNE());
1018:       assertFalse(node0.isIf());
1019:       assertFalse(node0.isNot());
1020:       assertFalse(node0.isDebugger());
1021:       assertEquals((-1), node0.getSourcePosition());
1022:       assertFalse(node0.isAnd());
1023:       assertFalse(node0.isIn());
1024:       assertFalse(node0.isContinue());
1025:       assertFalse(node0.isFunction());
1026:       assertFalse(node0.isFalse());
1027:       assertFalse(node0.isHook());
1028:       assertFalse(node0.isThrow());
1029:       assertFalse(node0.isBreak());
1030:       assertFalse(node0.isSwitch());
1031:       assertFalse(node0.isInc());
1032:       assertFalse(node0.isString());
1033:       assertEquals((-1), node0.getCharno());
1034:       assertFalse(node0.isObjectLit());
1035:       assertFalse(node0.isInstanceOf());
1036:       assertFalse(node0.isGetProp());
1037:       assertTrue(node0.isNumber());
1038:       assertFalse(node0.isCase());
1039:       assertFalse(node0.isThis());
1040:       assertFalse(node0.isExprResult());
1041:       assertFalse(node0.isWith());
1042:       assertFalse(node0.isFor());
1043:       assertFalse(node0.isComma());
1044:       assertFalse(node0.isArrayLit());
1045:       assertFalse(node0.isLabelName());
1046:       assertFalse(node0.isEmpty());
1047:       assertFalse(node0.isTry());
1048:       assertFalse(node0.isGetElem());
1049:       assertFalse(node0.isVoid());
1050:       assertFalse(node0.isDelProp());
1051:       assertFalse(node0.hasOneChild());
1052:       assertFalse(node0.isScript());
1053:       assertFalse(node0.isTrue());
1054:       assertFalse(node0.isOr());
1055:       assertFalse(node0.isGetterDef());
1056:       assertFalse(node0.isAssignAdd());
1057:       assertFalse(node0.isDo());
1058:       assertFalse(node0.isDefaultCase());
1059:       assertFalse(node0.isLabel());
1060:       assertEquals(0, node0.getChildCount());
1061:       assertFalse(node1.isContinue());
1062:       assertEquals(39, node1.getType());
1063:       assertFalse(node1.isOr());
1064:       assertFalse(node1.hasMoreThanOneChild());
1065:       assertFalse(node1.isNew());
1066:       assertFalse(node1.isLabel());
1067:       assertFalse(node1.isAdd());
1068:       assertFalse(node1.isReturn());
1069:       assertFalse(node1.isBlock());
1070:       assertFalse(node1.isWhile());
1071:       assertFalse(node1.isAssignAdd());
1072:       assertFalse(node1.isDo());
1073:       assertFalse(node1.isCall());
1074:       assertFalse(node1.isGetElem());
1075:       assertFalse(node1.hasChildren());
1076:       assertFalse(node1.isDec());
1077:       assertFalse(node1.isAssign());
1078:       assertFalse(node1.isTypeOf());
1079:       assertFalse(node1.isExprResult());
1080:       assertFalse(node1.isNull());
1081:       assertEquals((-1), node1.getLineno());
1082:       assertFalse(node1.isName());
1083:       assertFalse(node1.isCatch());
1084:       assertEquals(0, node1.getChildCount());
1085:       assertFalse(node1.isInstanceOf());
1086:       assertFalse(node1.isRegExp());
1087:       assertFalse(node1.isWith());
1088:       assertFalse(node1.isScript());
1089:       assertFalse(node1.isThis());
1090:       assertFalse(node1.isDefaultCase());
1091:       assertFalse(node1.hasOneChild());
1092:       assertFalse(node1.isTry());
1093:       assertFalse(node1.isStringKey());
1094:       assertFalse(node1.isVar());
1095:       assertFalse(node1.isArrayLit());
1096:       assertFalse(node1.isGetterDef());
1097:       assertEquals((-1), node1.getCharno());
1098:       assertFalse(node1.isParamList());
1099:       assertFalse(node1.isLabelName());
1100:       assertFalse(node1.isSwitch());
1101:       assertFalse(node1.isCase());
1102:       assertFalse(node1.isIn());
1103:       assertFalse(node1.isString());
1104:       assertFalse(node1.isInc());
1105:       assertTrue(node1.isNumber());
1106:       assertFalse(node1.isEmpty());
1107:       assertFalse(node1.isFor());
1108:       assertFalse(node1.isHook());
1109:       assertFalse(node1.isVoid());
1110:       assertFalse(node1.isNE());
1111:       assertFalse(node1.isTrue());
1112:       assertFalse(node1.isBreak());
1113:       assertFalse(node1.isDelProp());
1114:       assertFalse(node1.isIf());
1115:       assertFalse(node1.isAnd());
1116:       assertFalse(node1.isObjectLit());
1117:       assertFalse(node1.isNot());
1118:       assertFalse(node1.isFunction());
1119:       assertFalse(node1.isGetProp());
1120:       assertFalse(node1.isComma());
1121:       assertFalse(node1.isSetterDef());
1122:       assertFalse(node1.isThrow());
1123:       assertFalse(node1.isCast());
1124:       assertEquals((-1), node1.getSourcePosition());
1125:       assertFalse(node1.isFalse());
1126:       assertFalse(node1.isDebugger());
1127:       assertFalse(node2.isLabel());
1128:       assertFalse(node2.isAssignAdd());
1129:       assertFalse(node2.isOr());
1130:       assertEquals(47, node2.getType());
1131:       assertFalse(node2.isReturn());
1132:       assertEquals((-1), node2.getLineno());
1133:       assertFalse(node2.isLabelName());
1134:       assertFalse(node2.isNumber());
1135:       assertEquals((-1), node2.getSourcePosition());
1136:       assertFalse(node2.isAdd());
1137:       assertFalse(node2.isCast());
1138:       assertFalse(node2.isNew());
1139:       assertFalse(node2.isDo());
1140:       assertFalse(node2.isContinue());
1141:       assertFalse(node2.isVar());
1142:       assertFalse(node2.isGetProp());
1143:       assertFalse(node2.isBreak());
1144:       assertFalse(node2.isNot());
1145:       assertFalse(node2.isName());
1146:       assertFalse(node2.isAnd());
1147:       assertFalse(node2.isNull());
1148:       assertFalse(node2.isTrue());
1149:       assertFalse(node2.isObjectLit());
1150:       assertFalse(node2.isDebugger());
1151:       assertFalse(node2.isCall());
1152:       assertFalse(node2.isExprResult());
1153:       assertFalse(node2.isVoid());
1154:       assertTrue(node2.isRegExp());
1155:       assertFalse(node2.isAssign());
1156:       assertTrue(node2.hasOneChild());
1157:       assertFalse(node2.isGetElem());
1158:       assertFalse(node2.isWhile());
1159:       assertFalse(node2.isTypeOf());
1160:       assertFalse(node2.isComma());
1161:       assertFalse(node2.isDec());
1162:       assertTrue(node2.hasChildren());
1163:       assertFalse(node2.isIn());
1164:       assertFalse(node2.isDelProp());
1165:       assertFalse(node2.isCase());
1166:       assertFalse(node2.isEmpty());
1167:       assertFalse(node2.isIf());
1168:       assertFalse(node2.isString());
1169:       assertFalse(node2.isNE());
1170:       assertEquals((-1), node2.getCharno());
1171:       assertFalse(node2.isGetterDef());
1172:       assertFalse(node2.isArrayLit());
1173:       assertFalse(node2.isSwitch());
1174:       assertFalse(node2.isInc());
1175:       assertFalse(node2.isFalse());
1176:       assertFalse(node2.isThrow());
1177:       assertFalse(node2.isDefaultCase());
1178:       assertFalse(node2.isFunction());
1179:       assertFalse(node2.isInstanceOf());
1180:       assertFalse(node2.isParamList());
1181:       assertFalse(node2.isSetterDef());
1182:       assertFalse(node2.isStringKey());
1183:       assertFalse(node2.isTry());
1184:       assertFalse(node2.isBlock());
1185:       assertFalse(node2.isScript());
1186:       assertFalse(node2.isFor());
1187:       assertFalse(node2.isWith());
1188:       assertFalse(node2.isCatch());
1189:       assertFalse(node2.isHook());
1190:       assertFalse(node2.isThis());
1191:       assertFalse(node2.hasMoreThanOneChild());
1192:       assertEquals(1, node2.getChildCount());
1193:       assertEquals(2, Node.POST_FLAG);
1194:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1195:       assertEquals(37, Node.OPT_ARG_NAME);
1196:       assertEquals(56, Node.CHANGE_TIME);
1197:       assertEquals(47, Node.IS_DISPATCHER);
1198:       assertEquals(12, Node.COLUMN_BITS);
1199:       assertEquals(46, Node.IS_NAMESPACE);
1200:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1201:       assertEquals(1, Node.DECR_FLAG);
1202:       assertEquals(32, Node.INCRDECR_PROP);
1203:       assertEquals(29, Node.JSDOC_INFO_PROP);
1204:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1205:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1206:       assertEquals(53, Node.INPUT_ID);
1207:       assertEquals(43, Node.IS_CONSTANT_NAME);
1208:       assertEquals(57, Node.LAST_PROP);
1209:       assertEquals(30, Node.VAR_ARGS_NAME);
1210:       assertEquals(54, Node.SLASH_V);
1211:       assertEquals(40, Node.ORIGINALNAME_PROP);
1212:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1213:       assertEquals(8, Node.FLAG_NO_THROWS);
1214:       assertEquals(39, Node.EMPTY_BLOCK);
1215:       assertEquals(48, Node.DIRECTIVES);
1216:       assertEquals(55, Node.INFERRED_FUNCTION);
1217:       assertEquals(50, Node.FREE_CALL);
1218:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1219:       assertEquals(52, Node.LENGTH);
1220:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1221:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1222:       assertEquals(36, Node.QUOTED_PROP);
1223:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1224:       assertEquals(57, Node.REFLECTED_OBJECT);
1225:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1226:       assertEquals(4095, Node.COLUMN_MASK);
1227:       assertEquals(49, Node.DIRECT_EVAL);
1228:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1229:       assertEquals(53, Node.INPUT_ID);
1230:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1231:       assertEquals(43, Node.IS_CONSTANT_NAME);
1232:       assertEquals(4095, Node.COLUMN_MASK);
1233:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1234:       assertEquals(47, Node.IS_DISPATCHER);
1235:       assertEquals(2, Node.POST_FLAG);
1236:       assertEquals(32, Node.INCRDECR_PROP);
1237:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1238:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1239:       assertEquals(46, Node.IS_NAMESPACE);
1240:       assertEquals(50, Node.FREE_CALL);
1241:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1242:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1243:       assertEquals(54, Node.SLASH_V);
1244:       assertEquals(52, Node.LENGTH);
1245:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1246:       assertEquals(57, Node.LAST_PROP);
1247:       assertEquals(49, Node.DIRECT_EVAL);
1248:       assertEquals(1, Node.DECR_FLAG);
1249:       assertEquals(40, Node.ORIGINALNAME_PROP);
1250:       assertEquals(12, Node.COLUMN_BITS);
1251:       assertEquals(30, Node.VAR_ARGS_NAME);
1252:       assertEquals(48, Node.DIRECTIVES);
1253:       assertEquals(8, Node.FLAG_NO_THROWS);
1254:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1255:       assertEquals(56, Node.CHANGE_TIME);
1256:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1257:       assertEquals(39, Node.EMPTY_BLOCK);
1258:       assertEquals(37, Node.OPT_ARG_NAME);
1259:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1260:       assertEquals(55, Node.INFERRED_FUNCTION);
1261:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1262:       assertEquals(29, Node.JSDOC_INFO_PROP);
1263:       assertEquals(57, Node.REFLECTED_OBJECT);
1264:       assertEquals(36, Node.QUOTED_PROP);
1265:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1266:       assertEquals(43, Node.IS_CONSTANT_NAME);
1267:       assertEquals(36, Node.QUOTED_PROP);
1268:       assertEquals(8, Node.FLAG_NO_THROWS);
1269:       assertEquals(55, Node.INFERRED_FUNCTION);
1270:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1271:       assertEquals(39, Node.EMPTY_BLOCK);
1272:       assertEquals(53, Node.INPUT_ID);
1273:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1274:       assertEquals(29, Node.JSDOC_INFO_PROP);
1275:       assertEquals(56, Node.CHANGE_TIME);
1276:       assertEquals(57, Node.REFLECTED_OBJECT);
1277:       assertEquals(48, Node.DIRECTIVES);
1278:       assertEquals(4095, Node.COLUMN_MASK);
1279:       assertEquals(37, Node.OPT_ARG_NAME);
1280:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1281:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1282:       assertEquals(30, Node.VAR_ARGS_NAME);
1283:       assertEquals(49, Node.DIRECT_EVAL);
1284:       assertEquals(57, Node.LAST_PROP);
1285:       assertEquals(1, Node.DECR_FLAG);
1286:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1287:       assertEquals(46, Node.IS_NAMESPACE);
1288:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1289:       assertEquals(54, Node.SLASH_V);
1290:       assertEquals(12, Node.COLUMN_BITS);
1291:       assertEquals(52, Node.LENGTH);
1292:       assertEquals(32, Node.INCRDECR_PROP);
1293:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1294:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1295:       assertEquals(50, Node.FREE_CALL);
1296:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1297:       assertEquals(2, Node.POST_FLAG);
1298:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1299:       assertEquals(47, Node.IS_DISPATCHER);
1300:       assertEquals(40, Node.ORIGINALNAME_PROP);
1301:       assertNull(staticSourceFile0);
1302:       assertNotSame(node0, node1);
1303:       assertNotSame(node1, node0);
1304:       
1305:       boolean boolean2 = node0.isThis();
1306:       assertTrue(boolean2 == boolean0);
1307:       assertFalse(boolean2 == boolean1);
1308:       assertFalse(node0.equals((Object)node1));
1309:       assertFalse(node0.equals((Object)node2));
1310:       assertFalse(node0.isVar());
1311:       assertFalse(node0.isCall());
1312:       assertFalse(node0.isStringKey());
1313:       assertFalse(node0.isAdd());
1314:       assertFalse(node0.isName());
1315:       assertFalse(node0.isNew());
1316:       assertFalse(node0.isNull());
1317:       assertFalse(node0.isSetterDef());
1318:       assertFalse(node0.isParamList());
1319:       assertFalse(node0.hasMoreThanOneChild());
1320:       assertFalse(node0.isCatch());
1321:       assertEquals((-1), node0.getLineno());
1322:       assertFalse(node0.isTypeOf());
1323:       assertFalse(node0.isRegExp());
1324:       assertFalse(node0.isWhile());
1325:       assertFalse(node0.isAssign());
1326:       assertEquals(39, node0.getType());
1327:       assertFalse(node0.isReturn());
1328:       assertFalse(node0.isBlock());
1329:       assertFalse(node0.hasChildren());
1330:       assertFalse(node0.isDec());
1331:       assertFalse(node0.isCast());
1332:       assertFalse(node0.isNE());
1333:       assertFalse(node0.isIf());
1334:       assertFalse(node0.isNot());
1335:       assertFalse(node0.isDebugger());
1336:       assertEquals((-1), node0.getSourcePosition());
1337:       assertFalse(node0.isAnd());
1338:       assertFalse(node0.isIn());
1339:       assertFalse(node0.isContinue());
1340:       assertFalse(node0.isFunction());
1341:       assertFalse(node0.isFalse());
1342:       assertFalse(node0.isHook());
1343:       assertFalse(node0.isThrow());
1344:       assertFalse(node0.isBreak());
1345:       assertFalse(node0.isSwitch());
1346:       assertFalse(node0.isInc());
1347:       assertFalse(node0.isString());
1348:       assertEquals((-1), node0.getCharno());
1349:       assertFalse(node0.isObjectLit());
1350:       assertFalse(node0.isInstanceOf());
1351:       assertFalse(node0.isGetProp());
1352:       assertTrue(node0.isNumber());
1353:       assertFalse(node0.isCase());
1354:       assertFalse(node0.isThis());
1355:       assertFalse(node0.isExprResult());
1356:       assertFalse(node0.isWith());
1357:       assertFalse(node0.isFor());
1358:       assertFalse(node0.isComma());
1359:       assertFalse(node0.isArrayLit());
1360:       assertFalse(node0.isLabelName());
1361:       assertFalse(node0.isEmpty());
1362:       assertFalse(node0.isTry());
1363:       assertFalse(node0.isGetElem());
1364:       assertFalse(node0.isVoid());
1365:       assertFalse(node0.isDelProp());
1366:       assertFalse(node0.hasOneChild());
1367:       assertFalse(node0.isScript());
1368:       assertFalse(node0.isTrue());
1369:       assertFalse(node0.isOr());
1370:       assertFalse(node0.isGetterDef());
1371:       assertFalse(node0.isAssignAdd());
1372:       assertFalse(node0.isDo());
1373:       assertFalse(node0.isDefaultCase());
1374:       assertFalse(node0.isLabel());
1375:       assertEquals(0, node0.getChildCount());
1376:       assertEquals(2, Node.POST_FLAG);
1377:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1378:       assertEquals(37, Node.OPT_ARG_NAME);
1379:       assertEquals(56, Node.CHANGE_TIME);
1380:       assertEquals(47, Node.IS_DISPATCHER);
1381:       assertEquals(12, Node.COLUMN_BITS);
1382:       assertEquals(46, Node.IS_NAMESPACE);
1383:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1384:       assertEquals(1, Node.DECR_FLAG);
1385:       assertEquals(32, Node.INCRDECR_PROP);
1386:       assertEquals(29, Node.JSDOC_INFO_PROP);
1387:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1388:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1389:       assertEquals(53, Node.INPUT_ID);
1390:       assertEquals(43, Node.IS_CONSTANT_NAME);
1391:       assertEquals(57, Node.LAST_PROP);
1392:       assertEquals(30, Node.VAR_ARGS_NAME);
1393:       assertEquals(54, Node.SLASH_V);
1394:       assertEquals(40, Node.ORIGINALNAME_PROP);
1395:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1396:       assertEquals(8, Node.FLAG_NO_THROWS);
1397:       assertEquals(39, Node.EMPTY_BLOCK);
1398:       assertEquals(48, Node.DIRECTIVES);
1399:       assertEquals(55, Node.INFERRED_FUNCTION);
1400:       assertEquals(50, Node.FREE_CALL);
1401:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1402:       assertEquals(52, Node.LENGTH);
1403:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1404:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1405:       assertEquals(36, Node.QUOTED_PROP);
1406:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1407:       assertEquals(57, Node.REFLECTED_OBJECT);
1408:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1409:       assertEquals(4095, Node.COLUMN_MASK);
1410:       assertEquals(49, Node.DIRECT_EVAL);
1411:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1412:       assertNotSame(node0, node1);
1413:       assertFalse(boolean2);
1414:       
1415:       Node node3 = null;
1416:       try {
1417:         node3 = new Node(53, node0, node2, node2, node0, 4, 88);
1418:         fail("Expecting exception: IllegalArgumentException");
1419:       
1420:       } catch(IllegalArgumentException e) {
1421:          //
1422:          // no message in exception (getMessage() returned null)
1423:          //
1424:          verifyException("com.google.common.base.Preconditions", e);
1425:       }
1426:   }
1427: }
RegularFileObject[/tmp/EvoSuite_72_1628161011539/com/google/javascript/rhino/Node_72_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:56:51 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_72_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_72_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.common.collect.AbstractMapBasedMultimap$1",
119:       "com.google.common.collect.AbstractMapBasedMultimap$2",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.common.collect.AbstractMultimap$Values",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMultimap$Entries",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.Multimaps$Entries",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.common.collect.ImmutableList",
230:       "com.google.common.collect.SingletonImmutableBiMap",
231:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
232:       "com.google.javascript.rhino.jstype.StringType",
233:       "com.google.javascript.rhino.Node$AbstractPropListItem",
234:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
235:       "com.google.javascript.rhino.jstype.TemplatizedType",
236:       "com.google.javascript.rhino.jstype.Visitor",
237:       "com.google.javascript.rhino.jstype.NoResolvedType",
238:       "com.google.javascript.rhino.jstype.JSTypeNative",
239:       "com.google.javascript.rhino.jstype.AllType",
240:       "com.google.common.collect.Maps",
241:       "com.google.common.collect.SetMultimap",
242:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
243:       "com.google.common.collect.Maps$EntryTransformer",
244:       "com.google.javascript.rhino.JSTypeExpression",
245:       "com.google.common.collect.Iterators$MergingIterator"
246:     );
247:   } 
248: 
249:   private static void resetClasses() {
250:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_72_tmp__ESTest_scaffolding.class.getClassLoader()); 
251: 
252:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
253:       "com.google.javascript.rhino.Node",
254:       "com.google.javascript.rhino.Node$NumberNode",
255:       "com.google.javascript.rhino.Node$StringNode",
256:       "com.google.javascript.rhino.Node$AbstractPropListItem",
257:       "com.google.javascript.rhino.Node$ObjectPropListItem",
258:       "com.google.javascript.rhino.Node$IntPropListItem",
259:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
260:       "com.google.javascript.rhino.Node$AncestorIterable",
261:       "com.google.javascript.rhino.Node$NodeMismatch",
262:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
263:       "com.google.javascript.rhino.Node$SideEffectFlags",
264:       "com.google.javascript.rhino.Token",
265:       "com.google.common.base.Preconditions",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.JSDocInfo",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.jstype.JSType$TypePair",
342:       "com.google.common.collect.AbstractMultimap$Values",
343:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
344:       "com.google.common.collect.AbstractMapBasedMultimap$1",
345:       "com.google.common.collect.Multimaps$Entries",
346:       "com.google.common.collect.AbstractMultimap$Entries",
347:       "com.google.common.collect.AbstractMapBasedMultimap$2",
348:       "com.google.common.base.Objects",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.InputId",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.common.collect.Iterables",
355:       "com.google.common.collect.AbstractIndexedListIterator",
356:       "com.google.common.collect.Iterators$11",
357:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
358:       "com.google.common.collect.Iterators$12",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
360:       "com.google.common.collect.Platform",
361:       "com.google.javascript.rhino.Node$AncestorIterable$1",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.javascript.rhino.jstype.NamespaceType",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.javascript.rhino.JSTypeExpression",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
371:       "com.google.javascript.rhino.jstype.JSType$2"
372:     );
373:   }
374: }

[MASTER] 10:56:51.702 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
byte[] byteArray0 = new byte[9];
byteArray0[0] = (byte)2;
byteArray0[1] = (byte)8;
byteArray0[2] = (byte)77;
byteArray0[3] = (byte)83;
byteArray0[4] = (byte)42;
byteArray0[5] = (byte)2;
byteArray0[6] = (byte) (-111);
byteArray0[7] = (byte) (-13);
byteArray0[8] = (byte)29;
boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertEquals(9, byteArray0.length);
assertArrayEquals(new byte[] {(byte)2, (byte)8, (byte)77, (byte)83, (byte)42, (byte)2, (byte) (-111), (byte) (-13), (byte)29}, byteArray0);
assertFalse(boolean0);

Node node0 = Node.newNumber(212.95590524080998);
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isComma());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isComma());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(iterable0.contains(node0));
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(iterable0);

Node node1 = Node.newNumber((double) 43, 27591, (-2726));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isContinue());
assertEquals(39, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isDefaultCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isVoid());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertNotNull(node1);
assertNotSame(node1, node0);

Node node2 = new Node(47, node0, node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isComma());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isContinue());
assertEquals(39, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isDefaultCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isVoid());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertEquals(47, node2.getType());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAdd());
assertFalse(node2.isCast());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isVar());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isNot());
assertFalse(node2.isName());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertTrue(node2.isRegExp());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isWhile());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isDelProp());
assertFalse(node2.isCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isIf());
assertFalse(node2.isString());
assertFalse(node2.isNE());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(1, node2.getChildCount());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node2);

boolean boolean1 = node2.hasOneChild();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isComma());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isContinue());
assertEquals(39, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isDefaultCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isVoid());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertEquals(47, node2.getType());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAdd());
assertFalse(node2.isCast());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isVar());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isNot());
assertFalse(node2.isName());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertTrue(node2.isRegExp());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isWhile());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isDelProp());
assertFalse(node2.isCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isIf());
assertFalse(node2.isString());
assertFalse(node2.isNE());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(1, node2.getChildCount());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertTrue(boolean1);

StaticSourceFile staticSourceFile0 = node2.getStaticSourceFile();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isComma());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node1.isContinue());
assertEquals(39, node1.getType());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isDefaultCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isVoid());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertEquals(47, node2.getType());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAdd());
assertFalse(node2.isCast());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isVar());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isNot());
assertFalse(node2.isName());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertTrue(node2.isRegExp());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isWhile());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isDelProp());
assertFalse(node2.isCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isIf());
assertFalse(node2.isString());
assertFalse(node2.isNE());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(1, node2.getChildCount());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNull(staticSourceFile0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);

boolean boolean2 = node0.isThis();
assertTrue(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCast());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isComma());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotSame(node0, node1);
assertFalse(boolean2);

Node node3 = new Node(53, node0, node2, node2, node0, 4, 88);

[MASTER] 10:56:53.606 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_89_1628161013564/com/google/javascript/rhino/Node_89_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_89_1628161013564/com/google/javascript/rhino/Node_89_tmp__ESTest_scaffolding.java]]
[MASTER] 10:56:53.606 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:56:53.606 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:56:53.607 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 211
[MASTER] 10:56:53.607 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_89_1628161013564/com/google/javascript/rhino/Node_89_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:56:53 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.EvoSuiteFile;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_89_tmp__ESTest extends Node_89_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       byte[] byteArray0 = new byte[9];
25:       byteArray0[0] = (byte)2;
26:       byteArray0[1] = (byte)8;
27:       byteArray0[2] = (byte)77;
28:       byteArray0[3] = (byte)83;
29:       byteArray0[4] = (byte)42;
30:       byteArray0[5] = (byte)2;
31:       byteArray0[6] = (byte)42;
32:       byteArray0[7] = (byte) (-13);
33:       byteArray0[8] = (byte)29;
34:       boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
35:       assertEquals(9, byteArray0.length);
36:       assertArrayEquals(new byte[] {(byte)2, (byte)8, (byte)77, (byte)83, (byte)42, (byte)2, (byte)42, (byte) (-13), (byte)29}, byteArray0);
37:       assertFalse(boolean0);
38:       
39:       Node node0 = Node.newNumber(212.95590524080998);
40:       assertFalse(node0.isArrayLit());
41:       assertFalse(node0.isVoid());
42:       assertFalse(node0.isTry());
43:       assertFalse(node0.isFor());
44:       assertFalse(node0.isIf());
45:       assertFalse(node0.isGetterDef());
46:       assertFalse(node0.isNE());
47:       assertFalse(node0.isTrue());
48:       assertFalse(node0.isDebugger());
49:       assertFalse(node0.isEmpty());
50:       assertFalse(node0.isIn());
51:       assertTrue(node0.isNumber());
52:       assertFalse(node0.isCase());
53:       assertFalse(node0.isDelProp());
54:       assertFalse(node0.isRegExp());
55:       assertFalse(node0.isCatch());
56:       assertFalse(node0.isThrow());
57:       assertFalse(node0.isSetterDef());
58:       assertFalse(node0.isInc());
59:       assertFalse(node0.isGetProp());
60:       assertFalse(node0.isString());
61:       assertFalse(node0.isAnd());
62:       assertFalse(node0.isFalse());
63:       assertFalse(node0.isFunction());
64:       assertFalse(node0.isContinue());
65:       assertFalse(node0.hasOneChild());
66:       assertFalse(node0.isCast());
67:       assertFalse(node0.isLabelName());
68:       assertEquals((-1), node0.getSourcePosition());
69:       assertFalse(node0.isScript());
70:       assertFalse(node0.isObjectLit());
71:       assertFalse(node0.isNot());
72:       assertFalse(node0.isOr());
73:       assertFalse(node0.isInstanceOf());
74:       assertEquals((-1), node0.getLineno());
75:       assertFalse(node0.isReturn());
76:       assertFalse(node0.isWhile());
77:       assertFalse(node0.isTypeOf());
78:       assertFalse(node0.isDec());
79:       assertFalse(node0.isComma());
80:       assertFalse(node0.isThis());
81:       assertFalse(node0.isExprResult());
82:       assertFalse(node0.isBreak());
83:       assertFalse(node0.hasChildren());
84:       assertEquals(39, node0.getType());
85:       assertFalse(node0.isGetElem());
86:       assertFalse(node0.isAssign());
87:       assertFalse(node0.isWith());
88:       assertFalse(node0.hasMoreThanOneChild());
89:       assertFalse(node0.isHook());
90:       assertFalse(node0.isVar());
91:       assertFalse(node0.isCall());
92:       assertFalse(node0.isNew());
93:       assertFalse(node0.isName());
94:       assertFalse(node0.isStringKey());
95:       assertFalse(node0.isBlock());
96:       assertFalse(node0.isSwitch());
97:       assertFalse(node0.isNull());
98:       assertEquals((-1), node0.getCharno());
99:       assertFalse(node0.isAdd());
100:       assertEquals(0, node0.getChildCount());
101:       assertFalse(node0.isLabel());
102:       assertFalse(node0.isDo());
103:       assertFalse(node0.isParamList());
104:       assertFalse(node0.isAssignAdd());
105:       assertFalse(node0.isDefaultCase());
106:       assertEquals(39, Node.EMPTY_BLOCK);
107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
108:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
109:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
110:       assertEquals(8, Node.FLAG_NO_THROWS);
111:       assertEquals(50, Node.FREE_CALL);
112:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
113:       assertEquals(55, Node.INFERRED_FUNCTION);
114:       assertEquals(43, Node.IS_CONSTANT_NAME);
115:       assertEquals(57, Node.LAST_PROP);
116:       assertEquals(54, Node.SLASH_V);
117:       assertEquals(30, Node.VAR_ARGS_NAME);
118:       assertEquals(51, Node.STATIC_SOURCE_FILE);
119:       assertEquals(40, Node.ORIGINALNAME_PROP);
120:       assertEquals(46, Node.IS_NAMESPACE);
121:       assertEquals(56, Node.CHANGE_TIME);
122:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
123:       assertEquals(47, Node.IS_DISPATCHER);
124:       assertEquals(29, Node.JSDOC_INFO_PROP);
125:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
126:       assertEquals(2, Node.POST_FLAG);
127:       assertEquals(12, Node.COLUMN_BITS);
128:       assertEquals(53, Node.INPUT_ID);
129:       assertEquals(32, Node.INCRDECR_PROP);
130:       assertEquals(1, Node.DECR_FLAG);
131:       assertEquals(36, Node.QUOTED_PROP);
132:       assertEquals(15, Node.NO_SIDE_EFFECTS);
133:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
134:       assertEquals(52, Node.LENGTH);
135:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
136:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
137:       assertEquals(57, Node.REFLECTED_OBJECT);
138:       assertEquals(4095, Node.COLUMN_MASK);
139:       assertEquals(37, Node.OPT_ARG_NAME);
140:       assertEquals(48, Node.DIRECTIVES);
141:       assertEquals(49, Node.DIRECT_EVAL);
142:       assertNotNull(node0);
143:       
144:       Iterable<Node> iterable0 = node0.children();
145:       assertFalse(node0.isArrayLit());
146:       assertFalse(node0.isVoid());
147:       assertFalse(node0.isTry());
148:       assertFalse(node0.isFor());
149:       assertFalse(node0.isIf());
150:       assertFalse(node0.isGetterDef());
151:       assertFalse(node0.isNE());
152:       assertFalse(node0.isTrue());
153:       assertFalse(node0.isDebugger());
154:       assertFalse(node0.isEmpty());
155:       assertFalse(node0.isIn());
156:       assertTrue(node0.isNumber());
157:       assertFalse(node0.isCase());
158:       assertFalse(node0.isDelProp());
159:       assertFalse(node0.isRegExp());
160:       assertFalse(node0.isCatch());
161:       assertFalse(node0.isThrow());
162:       assertFalse(node0.isSetterDef());
163:       assertFalse(node0.isInc());
164:       assertFalse(node0.isGetProp());
165:       assertFalse(node0.isString());
166:       assertFalse(node0.isAnd());
167:       assertFalse(node0.isFalse());
168:       assertFalse(node0.isFunction());
169:       assertFalse(node0.isContinue());
170:       assertFalse(node0.hasOneChild());
171:       assertFalse(node0.isCast());
172:       assertFalse(node0.isLabelName());
173:       assertEquals((-1), node0.getSourcePosition());
174:       assertFalse(node0.isScript());
175:       assertFalse(node0.isObjectLit());
176:       assertFalse(node0.isNot());
177:       assertFalse(node0.isOr());
178:       assertFalse(node0.isInstanceOf());
179:       assertEquals((-1), node0.getLineno());
180:       assertFalse(node0.isReturn());
181:       assertFalse(node0.isWhile());
182:       assertFalse(node0.isTypeOf());
183:       assertFalse(node0.isDec());
184:       assertFalse(node0.isComma());
185:       assertFalse(node0.isThis());
186:       assertFalse(node0.isExprResult());
187:       assertFalse(node0.isBreak());
188:       assertFalse(node0.hasChildren());
189:       assertEquals(39, node0.getType());
190:       assertFalse(node0.isGetElem());
191:       assertFalse(node0.isAssign());
192:       assertFalse(node0.isWith());
193:       assertFalse(node0.hasMoreThanOneChild());
194:       assertFalse(node0.isHook());
195:       assertFalse(node0.isVar());
196:       assertFalse(node0.isCall());
197:       assertFalse(node0.isNew());
198:       assertFalse(node0.isName());
199:       assertFalse(node0.isStringKey());
200:       assertFalse(node0.isBlock());
201:       assertFalse(node0.isSwitch());
202:       assertFalse(node0.isNull());
203:       assertEquals((-1), node0.getCharno());
204:       assertFalse(node0.isAdd());
205:       assertEquals(0, node0.getChildCount());
206:       assertFalse(node0.isLabel());
207:       assertFalse(node0.isDo());
208:       assertFalse(node0.isParamList());
209:       assertFalse(node0.isAssignAdd());
210:       assertFalse(node0.isDefaultCase());
211:       assertFalse(iterable0.contains(node0));
212:       assertEquals(39, Node.EMPTY_BLOCK);
213:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
214:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
215:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
216:       assertEquals(8, Node.FLAG_NO_THROWS);
217:       assertEquals(50, Node.FREE_CALL);
218:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
219:       assertEquals(55, Node.INFERRED_FUNCTION);
220:       assertEquals(43, Node.IS_CONSTANT_NAME);
221:       assertEquals(57, Node.LAST_PROP);
222:       assertEquals(54, Node.SLASH_V);
223:       assertEquals(30, Node.VAR_ARGS_NAME);
224:       assertEquals(51, Node.STATIC_SOURCE_FILE);
225:       assertEquals(40, Node.ORIGINALNAME_PROP);
226:       assertEquals(46, Node.IS_NAMESPACE);
227:       assertEquals(56, Node.CHANGE_TIME);
228:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
229:       assertEquals(47, Node.IS_DISPATCHER);
230:       assertEquals(29, Node.JSDOC_INFO_PROP);
231:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
232:       assertEquals(2, Node.POST_FLAG);
233:       assertEquals(12, Node.COLUMN_BITS);
234:       assertEquals(53, Node.INPUT_ID);
235:       assertEquals(32, Node.INCRDECR_PROP);
236:       assertEquals(1, Node.DECR_FLAG);
237:       assertEquals(36, Node.QUOTED_PROP);
238:       assertEquals(15, Node.NO_SIDE_EFFECTS);
239:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
240:       assertEquals(52, Node.LENGTH);
241:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
242:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
243:       assertEquals(57, Node.REFLECTED_OBJECT);
244:       assertEquals(4095, Node.COLUMN_MASK);
245:       assertEquals(37, Node.OPT_ARG_NAME);
246:       assertEquals(48, Node.DIRECTIVES);
247:       assertEquals(49, Node.DIRECT_EVAL);
248:       assertNotNull(iterable0);
249:       
250:       Node node1 = Node.newNumber((double) 43, 27591, (-2726));
251:       assertFalse(node1.equals((Object)node0));
252:       assertEquals((-1), node1.getCharno());
253:       assertFalse(node1.isInc());
254:       assertFalse(node1.isSwitch());
255:       assertFalse(node1.isCase());
256:       assertFalse(node1.isString());
257:       assertFalse(node1.isIn());
258:       assertFalse(node1.isGetProp());
259:       assertFalse(node1.isThis());
260:       assertFalse(node1.isNE());
261:       assertFalse(node1.isBreak());
262:       assertFalse(node1.isDelProp());
263:       assertFalse(node1.isIf());
264:       assertTrue(node1.isNumber());
265:       assertFalse(node1.isFor());
266:       assertFalse(node1.isInstanceOf());
267:       assertFalse(node1.isWith());
268:       assertFalse(node1.isHook());
269:       assertFalse(node1.isComma());
270:       assertFalse(node1.isDebugger());
271:       assertFalse(node1.isFunction());
272:       assertFalse(node1.isAnd());
273:       assertFalse(node1.isObjectLit());
274:       assertFalse(node1.isNot());
275:       assertEquals((-1), node1.getSourcePosition());
276:       assertFalse(node1.isSetterDef());
277:       assertFalse(node1.isThrow());
278:       assertFalse(node1.isContinue());
279:       assertFalse(node1.isFalse());
280:       assertFalse(node1.isCast());
281:       assertFalse(node1.isBlock());
282:       assertFalse(node1.isAdd());
283:       assertFalse(node1.isDo());
284:       assertFalse(node1.isNew());
285:       assertFalse(node1.isName());
286:       assertFalse(node1.isStringKey());
287:       assertFalse(node1.isNull());
288:       assertFalse(node1.isOr());
289:       assertEquals((-1), node1.getLineno());
290:       assertFalse(node1.isCall());
291:       assertFalse(node1.isGetElem());
292:       assertFalse(node1.hasMoreThanOneChild());
293:       assertFalse(node1.isWhile());
294:       assertFalse(node1.isCatch());
295:       assertFalse(node1.hasChildren());
296:       assertFalse(node1.isTypeOf());
297:       assertFalse(node1.isReturn());
298:       assertFalse(node1.isAssign());
299:       assertFalse(node1.isRegExp());
300:       assertEquals(39, node1.getType());
301:       assertFalse(node1.isDec());
302:       assertFalse(node1.isVoid());
303:       assertFalse(node1.isExprResult());
304:       assertFalse(node1.isTrue());
305:       assertFalse(node1.isScript());
306:       assertFalse(node1.isDefaultCase());
307:       assertFalse(node1.isTry());
308:       assertFalse(node1.isArrayLit());
309:       assertFalse(node1.hasOneChild());
310:       assertFalse(node1.isEmpty());
311:       assertFalse(node1.isGetterDef());
312:       assertFalse(node1.isAssignAdd());
313:       assertFalse(node1.isParamList());
314:       assertFalse(node1.isLabelName());
315:       assertFalse(node1.isVar());
316:       assertEquals(0, node1.getChildCount());
317:       assertFalse(node1.isLabel());
318:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
319:       assertEquals(47, Node.IS_DISPATCHER);
320:       assertEquals(56, Node.CHANGE_TIME);
321:       assertEquals(32, Node.INCRDECR_PROP);
322:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
323:       assertEquals(29, Node.JSDOC_INFO_PROP);
324:       assertEquals(53, Node.INPUT_ID);
325:       assertEquals(30, Node.VAR_ARGS_NAME);
326:       assertEquals(57, Node.LAST_PROP);
327:       assertEquals(46, Node.IS_NAMESPACE);
328:       assertEquals(43, Node.IS_CONSTANT_NAME);
329:       assertEquals(51, Node.STATIC_SOURCE_FILE);
330:       assertEquals(54, Node.SLASH_V);
331:       assertEquals(2, Node.POST_FLAG);
332:       assertEquals(40, Node.ORIGINALNAME_PROP);
333:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
334:       assertEquals(50, Node.FREE_CALL);
335:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
336:       assertEquals(57, Node.REFLECTED_OBJECT);
337:       assertEquals(52, Node.LENGTH);
338:       assertEquals(8, Node.FLAG_NO_THROWS);
339:       assertEquals(15, Node.NO_SIDE_EFFECTS);
340:       assertEquals(55, Node.INFERRED_FUNCTION);
341:       assertEquals(39, Node.EMPTY_BLOCK);
342:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
343:       assertEquals(1, Node.DECR_FLAG);
344:       assertEquals(49, Node.DIRECT_EVAL);
345:       assertEquals(4095, Node.COLUMN_MASK);
346:       assertEquals(36, Node.QUOTED_PROP);
347:       assertEquals(12, Node.COLUMN_BITS);
348:       assertEquals(48, Node.DIRECTIVES);
349:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
350:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
351:       assertEquals(37, Node.OPT_ARG_NAME);
352:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
353:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
354:       assertNotNull(node1);
355:       assertNotSame(node1, node0);
356:       
357:       InputId inputId0 = new InputId("");
358:       assertEquals("", inputId0.getIdName());
359:       assertNotNull(inputId0);
360:       
361:       // Undeclared exception!
362:       try { 
363:         node1.removeChild(node0);
364:         fail("Expecting exception: NullPointerException");
365:       
366:       } catch(NullPointerException e) {
367:          //
368:          // no message in exception (getMessage() returned null)
369:          //
370:          verifyException("com.google.javascript.rhino.Node", e);
371:       }
372:   }
373: }
RegularFileObject[/tmp/EvoSuite_89_1628161013564/com/google/javascript/rhino/Node_89_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:56:53 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_89_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_89_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.common.collect.AbstractMapBasedMultimap$1",
119:       "com.google.common.collect.AbstractMapBasedMultimap$2",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.common.collect.AbstractMultimap$Values",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMultimap$Entries",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.Multimaps$Entries",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.common.collect.ImmutableList",
230:       "com.google.common.collect.SingletonImmutableBiMap",
231:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
232:       "com.google.javascript.rhino.jstype.StringType",
233:       "com.google.javascript.rhino.Node$AbstractPropListItem",
234:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
235:       "com.google.javascript.rhino.jstype.TemplatizedType",
236:       "com.google.javascript.rhino.jstype.Visitor",
237:       "com.google.javascript.rhino.jstype.NoResolvedType",
238:       "com.google.javascript.rhino.jstype.JSTypeNative",
239:       "com.google.javascript.rhino.jstype.AllType",
240:       "com.google.common.collect.Maps",
241:       "com.google.common.collect.SetMultimap",
242:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
243:       "com.google.common.collect.Maps$EntryTransformer",
244:       "com.google.javascript.rhino.JSTypeExpression",
245:       "com.google.common.collect.Iterators$MergingIterator"
246:     );
247:   } 
248: 
249:   private static void resetClasses() {
250:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_89_tmp__ESTest_scaffolding.class.getClassLoader()); 
251: 
252:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
253:       "com.google.javascript.rhino.Node",
254:       "com.google.javascript.rhino.Node$NumberNode",
255:       "com.google.javascript.rhino.Node$StringNode",
256:       "com.google.javascript.rhino.Node$AbstractPropListItem",
257:       "com.google.javascript.rhino.Node$ObjectPropListItem",
258:       "com.google.javascript.rhino.Node$IntPropListItem",
259:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
260:       "com.google.javascript.rhino.Node$AncestorIterable",
261:       "com.google.javascript.rhino.Node$NodeMismatch",
262:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
263:       "com.google.javascript.rhino.Node$SideEffectFlags",
264:       "com.google.javascript.rhino.Token",
265:       "com.google.common.base.Preconditions",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.JSDocInfo",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.jstype.JSType$TypePair",
342:       "com.google.common.collect.AbstractMultimap$Values",
343:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
344:       "com.google.common.collect.AbstractMapBasedMultimap$1",
345:       "com.google.common.collect.Multimaps$Entries",
346:       "com.google.common.collect.AbstractMultimap$Entries",
347:       "com.google.common.collect.AbstractMapBasedMultimap$2",
348:       "com.google.common.base.Objects",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.InputId",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.common.collect.Iterables",
355:       "com.google.common.collect.AbstractIndexedListIterator",
356:       "com.google.common.collect.Iterators$11",
357:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
358:       "com.google.common.collect.Iterators$12",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
360:       "com.google.common.collect.Platform",
361:       "com.google.javascript.rhino.Node$AncestorIterable$1",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.javascript.rhino.jstype.NamespaceType",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.javascript.rhino.JSTypeExpression",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
371:       "com.google.javascript.rhino.jstype.JSType$2"
372:     );
373:   }
374: }

[MASTER] 10:56:53.612 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
byte[] byteArray0 = new byte[9];
byteArray0[0] = (byte)2;
byteArray0[1] = (byte)8;
byteArray0[2] = (byte)77;
byteArray0[3] = (byte)83;
byteArray0[4] = (byte)42;
byteArray0[5] = (byte)2;
byteArray0[6] = (byte)42;
byteArray0[7] = (byte) (-13);
byteArray0[8] = (byte)29;
boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertEquals(9, byteArray0.length);
assertArrayEquals(new byte[] {(byte)2, (byte)8, (byte)77, (byte)83, (byte)42, (byte)2, (byte)42, (byte) (-13), (byte)29}, byteArray0);
assertFalse(boolean0);

Node node0 = Node.newNumber(212.95590524080998);
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertEquals(39, node0.getType());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertEquals(39, node0.getType());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isDo());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(iterable0.contains(node0));
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertNotNull(iterable0);

Node node1 = Node.newNumber((double) 43, 27591, (-2726));
assertFalse(node1.equals((Object)node0));
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertTrue(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isCatch());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isDec());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertNotNull(node1);
assertNotSame(node1, node0);

InputId inputId0 = new InputId("");
assertEquals("", inputId0.getIdName());
assertNotNull(inputId0);

node1.removeChild(node0);

[MASTER] 10:57:08.529 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_173_1628161028490/com/google/javascript/rhino/Node_173_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_173_1628161028490/com/google/javascript/rhino/Node_173_tmp__ESTest_scaffolding.java]]
[MASTER] 10:57:08.529 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:08.529 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:08.529 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 208
[MASTER] 10:57:08.530 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_173_1628161028490/com/google/javascript/rhino/Node_173_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:57:08 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.EvoSuiteFile;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_173_tmp__ESTest extends Node_173_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
25:       assertTrue(boolean0);
26:       
27:       byte[] byteArray0 = new byte[2];
28:       byteArray0[0] = (byte) (-111);
29:       byteArray0[1] = (byte) (-111);
30:       boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
31:       assertEquals(2, byteArray0.length);
32:       assertFalse(boolean1 == boolean0);
33:       assertArrayEquals(new byte[] {(byte) (-111), (byte) (-111)}, byteArray0);
34:       assertFalse(boolean1);
35:       
36:       Node node0 = Node.newNumber(49.0);
37:       assertFalse(node0.isNew());
38:       assertFalse(node0.isWhile());
39:       assertFalse(node0.isVar());
40:       assertEquals(39, node0.getType());
41:       assertFalse(node0.isBlock());
42:       assertFalse(node0.isDo());
43:       assertFalse(node0.isAdd());
44:       assertFalse(node0.isSetterDef());
45:       assertFalse(node0.isOr());
46:       assertFalse(node0.isTypeOf());
47:       assertFalse(node0.hasChildren());
48:       assertFalse(node0.isDec());
49:       assertFalse(node0.isReturn());
50:       assertFalse(node0.isNull());
51:       assertFalse(node0.isCatch());
52:       assertFalse(node0.isAssign());
53:       assertFalse(node0.isName());
54:       assertFalse(node0.hasMoreThanOneChild());
55:       assertEquals((-1), node0.getLineno());
56:       assertFalse(node0.isCall());
57:       assertFalse(node0.isGetElem());
58:       assertFalse(node0.isVoid());
59:       assertFalse(node0.isTry());
60:       assertFalse(node0.isRegExp());
61:       assertFalse(node0.isDefaultCase());
62:       assertFalse(node0.isTrue());
63:       assertFalse(node0.hasOneChild());
64:       assertFalse(node0.isScript());
65:       assertFalse(node0.isEmpty());
66:       assertFalse(node0.isParamList());
67:       assertFalse(node0.isAssignAdd());
68:       assertEquals(0, node0.getChildCount());
69:       assertFalse(node0.isGetterDef());
70:       assertFalse(node0.isLabel());
71:       assertFalse(node0.isStringKey());
72:       assertFalse(node0.isLabelName());
73:       assertFalse(node0.isArrayLit());
74:       assertEquals((-1), node0.getCharno());
75:       assertFalse(node0.isSwitch());
76:       assertFalse(node0.isHook());
77:       assertFalse(node0.isThrow());
78:       assertFalse(node0.isCase());
79:       assertFalse(node0.isIn());
80:       assertFalse(node0.isString());
81:       assertTrue(node0.isNumber());
82:       assertFalse(node0.isInc());
83:       assertFalse(node0.isGetProp());
84:       assertFalse(node0.isComma());
85:       assertFalse(node0.isIf());
86:       assertFalse(node0.isFor());
87:       assertFalse(node0.isNE());
88:       assertFalse(node0.isThis());
89:       assertFalse(node0.isWith());
90:       assertFalse(node0.isBreak());
91:       assertFalse(node0.isDelProp());
92:       assertFalse(node0.isInstanceOf());
93:       assertFalse(node0.isExprResult());
94:       assertFalse(node0.isDebugger());
95:       assertFalse(node0.isFunction());
96:       assertFalse(node0.isObjectLit());
97:       assertFalse(node0.isNot());
98:       assertEquals((-1), node0.getSourcePosition());
99:       assertFalse(node0.isAnd());
100:       assertFalse(node0.isContinue());
101:       assertFalse(node0.isFalse());
102:       assertFalse(node0.isCast());
103:       assertEquals(29, Node.JSDOC_INFO_PROP);
104:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
105:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
106:       assertEquals(53, Node.INPUT_ID);
107:       assertEquals(2, Node.POST_FLAG);
108:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
109:       assertEquals(47, Node.IS_DISPATCHER);
110:       assertEquals(12, Node.COLUMN_BITS);
111:       assertEquals(32, Node.INCRDECR_PROP);
112:       assertEquals(1, Node.DECR_FLAG);
113:       assertEquals(30, Node.VAR_ARGS_NAME);
114:       assertEquals(51, Node.STATIC_SOURCE_FILE);
115:       assertEquals(54, Node.SLASH_V);
116:       assertEquals(46, Node.IS_NAMESPACE);
117:       assertEquals(43, Node.IS_CONSTANT_NAME);
118:       assertEquals(40, Node.ORIGINALNAME_PROP);
119:       assertEquals(50, Node.FREE_CALL);
120:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
121:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
122:       assertEquals(52, Node.LENGTH);
123:       assertEquals(8, Node.FLAG_NO_THROWS);
124:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
125:       assertEquals(39, Node.EMPTY_BLOCK);
126:       assertEquals(57, Node.LAST_PROP);
127:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
128:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
129:       assertEquals(49, Node.DIRECT_EVAL);
130:       assertEquals(15, Node.NO_SIDE_EFFECTS);
131:       assertEquals(55, Node.INFERRED_FUNCTION);
132:       assertEquals(4095, Node.COLUMN_MASK);
133:       assertEquals(48, Node.DIRECTIVES);
134:       assertEquals(37, Node.OPT_ARG_NAME);
135:       assertEquals(36, Node.QUOTED_PROP);
136:       assertEquals(57, Node.REFLECTED_OBJECT);
137:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
138:       assertEquals(56, Node.CHANGE_TIME);
139:       assertNotNull(node0);
140:       
141:       Iterable<Node> iterable0 = node0.children();
142:       assertFalse(node0.isNew());
143:       assertFalse(node0.isWhile());
144:       assertFalse(node0.isVar());
145:       assertEquals(39, node0.getType());
146:       assertFalse(node0.isBlock());
147:       assertFalse(node0.isDo());
148:       assertFalse(node0.isAdd());
149:       assertFalse(node0.isSetterDef());
150:       assertFalse(node0.isOr());
151:       assertFalse(node0.isTypeOf());
152:       assertFalse(node0.hasChildren());
153:       assertFalse(node0.isDec());
154:       assertFalse(node0.isReturn());
155:       assertFalse(node0.isNull());
156:       assertFalse(node0.isCatch());
157:       assertFalse(node0.isAssign());
158:       assertFalse(node0.isName());
159:       assertFalse(node0.hasMoreThanOneChild());
160:       assertEquals((-1), node0.getLineno());
161:       assertFalse(node0.isCall());
162:       assertFalse(node0.isGetElem());
163:       assertFalse(node0.isVoid());
164:       assertFalse(node0.isTry());
165:       assertFalse(node0.isRegExp());
166:       assertFalse(node0.isDefaultCase());
167:       assertFalse(node0.isTrue());
168:       assertFalse(node0.hasOneChild());
169:       assertFalse(node0.isScript());
170:       assertFalse(node0.isEmpty());
171:       assertFalse(node0.isParamList());
172:       assertFalse(node0.isAssignAdd());
173:       assertEquals(0, node0.getChildCount());
174:       assertFalse(node0.isGetterDef());
175:       assertFalse(node0.isLabel());
176:       assertFalse(node0.isStringKey());
177:       assertFalse(node0.isLabelName());
178:       assertFalse(node0.isArrayLit());
179:       assertEquals((-1), node0.getCharno());
180:       assertFalse(node0.isSwitch());
181:       assertFalse(node0.isHook());
182:       assertFalse(node0.isThrow());
183:       assertFalse(node0.isCase());
184:       assertFalse(node0.isIn());
185:       assertFalse(node0.isString());
186:       assertTrue(node0.isNumber());
187:       assertFalse(node0.isInc());
188:       assertFalse(node0.isGetProp());
189:       assertFalse(node0.isComma());
190:       assertFalse(node0.isIf());
191:       assertFalse(node0.isFor());
192:       assertFalse(node0.isNE());
193:       assertFalse(node0.isThis());
194:       assertFalse(node0.isWith());
195:       assertFalse(node0.isBreak());
196:       assertFalse(node0.isDelProp());
197:       assertFalse(node0.isInstanceOf());
198:       assertFalse(node0.isExprResult());
199:       assertFalse(node0.isDebugger());
200:       assertFalse(node0.isFunction());
201:       assertFalse(node0.isObjectLit());
202:       assertFalse(node0.isNot());
203:       assertEquals((-1), node0.getSourcePosition());
204:       assertFalse(node0.isAnd());
205:       assertFalse(node0.isContinue());
206:       assertFalse(node0.isFalse());
207:       assertFalse(node0.isCast());
208:       assertFalse(iterable0.contains(node0));
209:       assertEquals(29, Node.JSDOC_INFO_PROP);
210:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
211:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
212:       assertEquals(53, Node.INPUT_ID);
213:       assertEquals(2, Node.POST_FLAG);
214:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
215:       assertEquals(47, Node.IS_DISPATCHER);
216:       assertEquals(12, Node.COLUMN_BITS);
217:       assertEquals(32, Node.INCRDECR_PROP);
218:       assertEquals(1, Node.DECR_FLAG);
219:       assertEquals(30, Node.VAR_ARGS_NAME);
220:       assertEquals(51, Node.STATIC_SOURCE_FILE);
221:       assertEquals(54, Node.SLASH_V);
222:       assertEquals(46, Node.IS_NAMESPACE);
223:       assertEquals(43, Node.IS_CONSTANT_NAME);
224:       assertEquals(40, Node.ORIGINALNAME_PROP);
225:       assertEquals(50, Node.FREE_CALL);
226:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
227:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
228:       assertEquals(52, Node.LENGTH);
229:       assertEquals(8, Node.FLAG_NO_THROWS);
230:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
231:       assertEquals(39, Node.EMPTY_BLOCK);
232:       assertEquals(57, Node.LAST_PROP);
233:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
234:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
235:       assertEquals(49, Node.DIRECT_EVAL);
236:       assertEquals(15, Node.NO_SIDE_EFFECTS);
237:       assertEquals(55, Node.INFERRED_FUNCTION);
238:       assertEquals(4095, Node.COLUMN_MASK);
239:       assertEquals(48, Node.DIRECTIVES);
240:       assertEquals(37, Node.OPT_ARG_NAME);
241:       assertEquals(36, Node.QUOTED_PROP);
242:       assertEquals(57, Node.REFLECTED_OBJECT);
243:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
244:       assertEquals(56, Node.CHANGE_TIME);
245:       assertNotNull(iterable0);
246:       
247:       Node node1 = Node.newNumber(0.0, 15, 46);
248:       assertFalse(node1.equals((Object)node0));
249:       assertFalse(node1.isGetElem());
250:       assertFalse(node1.isLabelName());
251:       assertFalse(node1.isAssign());
252:       assertFalse(node1.hasChildren());
253:       assertFalse(node1.isDec());
254:       assertFalse(node1.isTypeOf());
255:       assertFalse(node1.isCast());
256:       assertEquals(46, node1.getCharno());
257:       assertEquals(15, node1.getLineno());
258:       assertFalse(node1.isReturn());
259:       assertFalse(node1.isLabel());
260:       assertFalse(node1.hasOneChild());
261:       assertFalse(node1.isAssignAdd());
262:       assertFalse(node1.isObjectLit());
263:       assertFalse(node1.isNot());
264:       assertFalse(node1.isScript());
265:       assertFalse(node1.isContinue());
266:       assertFalse(node1.isAnd());
267:       assertFalse(node1.isFalse());
268:       assertFalse(node1.isThrow());
269:       assertFalse(node1.isStringKey());
270:       assertEquals(61486, node1.getSourcePosition());
271:       assertFalse(node1.isBlock());
272:       assertFalse(node1.isThis());
273:       assertFalse(node1.isSetterDef());
274:       assertFalse(node1.isInc());
275:       assertFalse(node1.isHook());
276:       assertEquals(39, node1.getType());
277:       assertFalse(node1.isInstanceOf());
278:       assertFalse(node1.isIn());
279:       assertFalse(node1.isRegExp());
280:       assertFalse(node1.isWith());
281:       assertFalse(node1.isCatch());
282:       assertFalse(node1.hasMoreThanOneChild());
283:       assertFalse(node1.isIf());
284:       assertFalse(node1.isNE());
285:       assertFalse(node1.isEmpty());
286:       assertFalse(node1.isFor());
287:       assertFalse(node1.isArrayLit());
288:       assertFalse(node1.isGetterDef());
289:       assertFalse(node1.isTry());
290:       assertTrue(node1.isNumber());
291:       assertFalse(node1.isDefaultCase());
292:       assertFalse(node1.isCase());
293:       assertEquals(0, node1.getChildCount());
294:       assertFalse(node1.isFunction());
295:       assertFalse(node1.isString());
296:       assertFalse(node1.isDebugger());
297:       assertFalse(node1.isSwitch());
298:       assertFalse(node1.isParamList());
299:       assertFalse(node1.isCall());
300:       assertFalse(node1.isName());
301:       assertFalse(node1.isBreak());
302:       assertFalse(node1.isGetProp());
303:       assertFalse(node1.isAdd());
304:       assertFalse(node1.isComma());
305:       assertFalse(node1.isNew());
306:       assertFalse(node1.isVar());
307:       assertFalse(node1.isWhile());
308:       assertFalse(node1.isDo());
309:       assertFalse(node1.isVoid());
310:       assertFalse(node1.isExprResult());
311:       assertFalse(node1.isTrue());
312:       assertFalse(node1.isOr());
313:       assertFalse(node1.isDelProp());
314:       assertFalse(node1.isNull());
315:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
316:       assertEquals(39, Node.EMPTY_BLOCK);
317:       assertEquals(48, Node.DIRECTIVES);
318:       assertEquals(40, Node.ORIGINALNAME_PROP);
319:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
320:       assertEquals(4095, Node.COLUMN_MASK);
321:       assertEquals(53, Node.INPUT_ID);
322:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
323:       assertEquals(15, Node.NO_SIDE_EFFECTS);
324:       assertEquals(57, Node.LAST_PROP);
325:       assertEquals(49, Node.DIRECT_EVAL);
326:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
327:       assertEquals(55, Node.INFERRED_FUNCTION);
328:       assertEquals(29, Node.JSDOC_INFO_PROP);
329:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
330:       assertEquals(36, Node.QUOTED_PROP);
331:       assertEquals(57, Node.REFLECTED_OBJECT);
332:       assertEquals(52, Node.LENGTH);
333:       assertEquals(8, Node.FLAG_NO_THROWS);
334:       assertEquals(46, Node.IS_NAMESPACE);
335:       assertEquals(56, Node.CHANGE_TIME);
336:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
337:       assertEquals(37, Node.OPT_ARG_NAME);
338:       assertEquals(32, Node.INCRDECR_PROP);
339:       assertEquals(12, Node.COLUMN_BITS);
340:       assertEquals(47, Node.IS_DISPATCHER);
341:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
342:       assertEquals(2, Node.POST_FLAG);
343:       assertEquals(30, Node.VAR_ARGS_NAME);
344:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
345:       assertEquals(54, Node.SLASH_V);
346:       assertEquals(43, Node.IS_CONSTANT_NAME);
347:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
348:       assertEquals(1, Node.DECR_FLAG);
349:       assertEquals(51, Node.STATIC_SOURCE_FILE);
350:       assertEquals(50, Node.FREE_CALL);
351:       assertNotNull(node1);
352:       assertNotSame(node1, node0);
353:       
354:       Node node2 = new Node(83, node0, node0, node0, node1);
355:       assertFalse(node0.equals((Object)node1));
356:       assertFalse(node1.equals((Object)node0));
357:       assertFalse(node2.equals((Object)node1));
358:       assertFalse(node2.equals((Object)node0));
359:       assertFalse(node0.isNew());
360:       assertFalse(node0.isWhile());
361:       assertFalse(node0.isVar());
362:       assertEquals(39, node0.getType());
363:       assertFalse(node0.isBlock());
364:       assertFalse(node0.isDo());
365:       assertFalse(node0.isAdd());
366:       assertFalse(node0.isSetterDef());
367:       assertFalse(node0.isOr());
368:       assertFalse(node0.isTypeOf());
369:       assertFalse(node0.hasChildren());
370:       assertFalse(node0.isDec());
371:       assertFalse(node0.isReturn());
372:       assertFalse(node0.isNull());
373:       assertFalse(node0.isCatch());
374:       assertFalse(node0.isAssign());
375:       assertFalse(node0.isName());
376:       assertFalse(node0.hasMoreThanOneChild());
377:       assertEquals((-1), node0.getLineno());
378:       assertFalse(node0.isCall());
379:       assertFalse(node0.isGetElem());
380:       assertFalse(node0.isVoid());
381:       assertFalse(node0.isTry());
382:       assertFalse(node0.isRegExp());
383:       assertFalse(node0.isDefaultCase());
384:       assertFalse(node0.isTrue());
385:       assertFalse(node0.hasOneChild());
386:       assertFalse(node0.isScript());
387:       assertFalse(node0.isEmpty());
388:       assertFalse(node0.isParamList());
389:       assertFalse(node0.isAssignAdd());
390:       assertEquals(0, node0.getChildCount());
391:       assertFalse(node0.isGetterDef());
392:       assertFalse(node0.isLabel());
393:       assertFalse(node0.isStringKey());
394:       assertFalse(node0.isLabelName());
395:       assertFalse(node0.isArrayLit());
396:       assertEquals((-1), node0.getCharno());
397:       assertFalse(node0.isSwitch());
398:       assertFalse(node0.isHook());
399:       assertFalse(node0.isThrow());
400:       assertFalse(node0.isCase());
401:       assertFalse(node0.isIn());
402:       assertFalse(node0.isString());
403:       assertTrue(node0.isNumber());
404:       assertFalse(node0.isInc());
405:       assertFalse(node0.isGetProp());
406:       assertFalse(node0.isComma());
407:       assertFalse(node0.isIf());
408:       assertFalse(node0.isFor());
409:       assertFalse(node0.isNE());
410:       assertFalse(node0.isThis());
411:       assertFalse(node0.isWith());
412:       assertFalse(node0.isBreak());
413:       assertFalse(node0.isDelProp());
414:       assertFalse(node0.isInstanceOf());
415:       assertFalse(node0.isExprResult());
416:       assertFalse(node0.isDebugger());
417:       assertFalse(node0.isFunction());
418:       assertFalse(node0.isObjectLit());
419:       assertFalse(node0.isNot());
420:       assertEquals((-1), node0.getSourcePosition());
421:       assertFalse(node0.isAnd());
422:       assertFalse(node0.isContinue());
423:       assertFalse(node0.isFalse());
424:       assertFalse(node0.isCast());
425:       assertFalse(node1.isGetElem());
426:       assertFalse(node1.isLabelName());
427:       assertFalse(node1.isAssign());
428:       assertFalse(node1.hasChildren());
429:       assertFalse(node1.isDec());
430:       assertFalse(node1.isTypeOf());
431:       assertFalse(node1.isCast());
432:       assertEquals(46, node1.getCharno());
433:       assertEquals(15, node1.getLineno());
434:       assertFalse(node1.isReturn());
435:       assertFalse(node1.isLabel());
436:       assertFalse(node1.hasOneChild());
437:       assertFalse(node1.isAssignAdd());
438:       assertFalse(node1.isObjectLit());
439:       assertFalse(node1.isNot());
440:       assertFalse(node1.isScript());
441:       assertFalse(node1.isContinue());
442:       assertFalse(node1.isAnd());
443:       assertFalse(node1.isFalse());
444:       assertFalse(node1.isThrow());
445:       assertFalse(node1.isStringKey());
446:       assertEquals(61486, node1.getSourcePosition());
447:       assertFalse(node1.isBlock());
448:       assertFalse(node1.isThis());
449:       assertFalse(node1.isSetterDef());
450:       assertFalse(node1.isInc());
451:       assertFalse(node1.isHook());
452:       assertEquals(39, node1.getType());
453:       assertFalse(node1.isInstanceOf());
454:       assertFalse(node1.isIn());
455:       assertFalse(node1.isRegExp());
456:       assertFalse(node1.isWith());
457:       assertFalse(node1.isCatch());
458:       assertFalse(node1.hasMoreThanOneChild());
459:       assertFalse(node1.isIf());
460:       assertFalse(node1.isNE());
461:       assertFalse(node1.isEmpty());
462:       assertFalse(node1.isFor());
463:       assertFalse(node1.isArrayLit());
464:       assertFalse(node1.isGetterDef());
465:       assertFalse(node1.isTry());
466:       assertTrue(node1.isNumber());
467:       assertFalse(node1.isDefaultCase());
468:       assertFalse(node1.isCase());
469:       assertEquals(0, node1.getChildCount());
470:       assertFalse(node1.isFunction());
471:       assertFalse(node1.isString());
472:       assertFalse(node1.isDebugger());
473:       assertFalse(node1.isSwitch());
474:       assertFalse(node1.isParamList());
475:       assertFalse(node1.isCall());
476:       assertFalse(node1.isName());
477:       assertFalse(node1.isBreak());
478:       assertFalse(node1.isGetProp());
479:       assertFalse(node1.isAdd());
480:       assertFalse(node1.isComma());
481:       assertFalse(node1.isNew());
482:       assertFalse(node1.isVar());
483:       assertFalse(node1.isWhile());
484:       assertFalse(node1.isDo());
485:       assertFalse(node1.isVoid());
486:       assertFalse(node1.isExprResult());
487:       assertFalse(node1.isTrue());
488:       assertFalse(node1.isOr());
489:       assertFalse(node1.isDelProp());
490:       assertFalse(node1.isNull());
491:       assertFalse(node2.isInstanceOf());
492:       assertTrue(node2.isParamList());
493:       assertEquals(2, node2.getChildCount());
494:       assertFalse(node2.isObjectLit());
495:       assertFalse(node2.isNot());
496:       assertFalse(node2.isWith());
497:       assertEquals(83, node2.getType());
498:       assertFalse(node2.isBreak());
499:       assertFalse(node2.isAnd());
500:       assertFalse(node2.isCast());
501:       assertFalse(node2.isFalse());
502:       assertFalse(node2.isInc());
503:       assertFalse(node2.isThrow());
504:       assertFalse(node2.isAssignAdd());
505:       assertEquals((-1), node2.getLineno());
506:       assertFalse(node2.isLabel());
507:       assertTrue(node2.hasChildren());
508:       assertFalse(node2.isIn());
509:       assertFalse(node2.isNumber());
510:       assertFalse(node2.isGetterDef());
511:       assertFalse(node2.isNE());
512:       assertEquals((-1), node2.getCharno());
513:       assertFalse(node2.isLabelName());
514:       assertFalse(node2.isSwitch());
515:       assertFalse(node2.isIf());
516:       assertFalse(node2.isHook());
517:       assertFalse(node2.hasOneChild());
518:       assertFalse(node2.isScript());
519:       assertFalse(node2.isRegExp());
520:       assertFalse(node2.isThis());
521:       assertFalse(node2.isCase());
522:       assertFalse(node2.isBlock());
523:       assertFalse(node2.isTry());
524:       assertFalse(node2.isFor());
525:       assertFalse(node2.isCatch());
526:       assertFalse(node2.isNull());
527:       assertFalse(node2.isTrue());
528:       assertFalse(node2.isDebugger());
529:       assertFalse(node2.isName());
530:       assertFalse(node2.isStringKey());
531:       assertFalse(node2.isVoid());
532:       assertFalse(node2.isVar());
533:       assertFalse(node2.isArrayLit());
534:       assertFalse(node2.isEmpty());
535:       assertFalse(node2.isAdd());
536:       assertFalse(node2.isFunction());
537:       assertFalse(node2.isSetterDef());
538:       assertFalse(node2.isNew());
539:       assertFalse(node2.isDo());
540:       assertFalse(node2.isDefaultCase());
541:       assertFalse(node2.isReturn());
542:       assertFalse(node2.isOr());
543:       assertFalse(node2.isString());
544:       assertFalse(node2.isContinue());
545:       assertEquals((-1), node2.getSourcePosition());
546:       assertTrue(node2.hasMoreThanOneChild());
547:       assertFalse(node2.isDelProp());
548:       assertFalse(node2.isCall());
549:       assertFalse(node2.isGetElem());
550:       assertFalse(node2.isAssign());
551:       assertFalse(node2.isExprResult());
552:       assertFalse(node2.isDec());
553:       assertFalse(node2.isTypeOf());
554:       assertFalse(node2.isComma());
555:       assertFalse(node2.isGetProp());
556:       assertFalse(node2.isWhile());
557:       assertEquals(29, Node.JSDOC_INFO_PROP);
558:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
559:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
560:       assertEquals(53, Node.INPUT_ID);
561:       assertEquals(2, Node.POST_FLAG);
562:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
563:       assertEquals(47, Node.IS_DISPATCHER);
564:       assertEquals(12, Node.COLUMN_BITS);
565:       assertEquals(32, Node.INCRDECR_PROP);
566:       assertEquals(1, Node.DECR_FLAG);
567:       assertEquals(30, Node.VAR_ARGS_NAME);
568:       assertEquals(51, Node.STATIC_SOURCE_FILE);
569:       assertEquals(54, Node.SLASH_V);
570:       assertEquals(46, Node.IS_NAMESPACE);
571:       assertEquals(43, Node.IS_CONSTANT_NAME);
572:       assertEquals(40, Node.ORIGINALNAME_PROP);
573:       assertEquals(50, Node.FREE_CALL);
574:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
575:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
576:       assertEquals(52, Node.LENGTH);
577:       assertEquals(8, Node.FLAG_NO_THROWS);
578:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
579:       assertEquals(39, Node.EMPTY_BLOCK);
580:       assertEquals(57, Node.LAST_PROP);
581:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
582:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
583:       assertEquals(49, Node.DIRECT_EVAL);
584:       assertEquals(15, Node.NO_SIDE_EFFECTS);
585:       assertEquals(55, Node.INFERRED_FUNCTION);
586:       assertEquals(4095, Node.COLUMN_MASK);
587:       assertEquals(48, Node.DIRECTIVES);
588:       assertEquals(37, Node.OPT_ARG_NAME);
589:       assertEquals(36, Node.QUOTED_PROP);
590:       assertEquals(57, Node.REFLECTED_OBJECT);
591:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
592:       assertEquals(56, Node.CHANGE_TIME);
593:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
594:       assertEquals(39, Node.EMPTY_BLOCK);
595:       assertEquals(48, Node.DIRECTIVES);
596:       assertEquals(40, Node.ORIGINALNAME_PROP);
597:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
598:       assertEquals(4095, Node.COLUMN_MASK);
599:       assertEquals(53, Node.INPUT_ID);
600:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
601:       assertEquals(15, Node.NO_SIDE_EFFECTS);
602:       assertEquals(57, Node.LAST_PROP);
603:       assertEquals(49, Node.DIRECT_EVAL);
604:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
605:       assertEquals(55, Node.INFERRED_FUNCTION);
606:       assertEquals(29, Node.JSDOC_INFO_PROP);
607:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
608:       assertEquals(36, Node.QUOTED_PROP);
609:       assertEquals(57, Node.REFLECTED_OBJECT);
610:       assertEquals(52, Node.LENGTH);
611:       assertEquals(8, Node.FLAG_NO_THROWS);
612:       assertEquals(46, Node.IS_NAMESPACE);
613:       assertEquals(56, Node.CHANGE_TIME);
614:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
615:       assertEquals(37, Node.OPT_ARG_NAME);
616:       assertEquals(32, Node.INCRDECR_PROP);
617:       assertEquals(12, Node.COLUMN_BITS);
618:       assertEquals(47, Node.IS_DISPATCHER);
619:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
620:       assertEquals(2, Node.POST_FLAG);
621:       assertEquals(30, Node.VAR_ARGS_NAME);
622:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
623:       assertEquals(54, Node.SLASH_V);
624:       assertEquals(43, Node.IS_CONSTANT_NAME);
625:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
626:       assertEquals(1, Node.DECR_FLAG);
627:       assertEquals(51, Node.STATIC_SOURCE_FILE);
628:       assertEquals(50, Node.FREE_CALL);
629:       assertEquals(15, Node.NO_SIDE_EFFECTS);
630:       assertEquals(57, Node.LAST_PROP);
631:       assertEquals(54, Node.SLASH_V);
632:       assertEquals(49, Node.DIRECT_EVAL);
633:       assertEquals(1, Node.DECR_FLAG);
634:       assertEquals(51, Node.STATIC_SOURCE_FILE);
635:       assertEquals(57, Node.REFLECTED_OBJECT);
636:       assertEquals(46, Node.IS_NAMESPACE);
637:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
638:       assertEquals(52, Node.LENGTH);
639:       assertEquals(50, Node.FREE_CALL);
640:       assertEquals(56, Node.CHANGE_TIME);
641:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
642:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
643:       assertEquals(37, Node.OPT_ARG_NAME);
644:       assertEquals(32, Node.INCRDECR_PROP);
645:       assertEquals(48, Node.DIRECTIVES);
646:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
647:       assertEquals(12, Node.COLUMN_BITS);
648:       assertEquals(4095, Node.COLUMN_MASK);
649:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
650:       assertEquals(43, Node.IS_CONSTANT_NAME);
651:       assertEquals(36, Node.QUOTED_PROP);
652:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
653:       assertEquals(53, Node.INPUT_ID);
654:       assertEquals(55, Node.INFERRED_FUNCTION);
655:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
656:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
657:       assertEquals(8, Node.FLAG_NO_THROWS);
658:       assertEquals(47, Node.IS_DISPATCHER);
659:       assertEquals(39, Node.EMPTY_BLOCK);
660:       assertEquals(29, Node.JSDOC_INFO_PROP);
661:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
662:       assertEquals(40, Node.ORIGINALNAME_PROP);
663:       assertEquals(2, Node.POST_FLAG);
664:       assertEquals(30, Node.VAR_ARGS_NAME);
665:       assertNotNull(node2);
666:       
667:       // Undeclared exception!
668:       try { 
669:         node2.getAncestor((-4704));
670:         fail("Expecting exception: IllegalArgumentException");
671:       
672:       } catch(IllegalArgumentException e) {
673:          //
674:          // no message in exception (getMessage() returned null)
675:          //
676:          verifyException("com.google.common.base.Preconditions", e);
677:       }
678:   }
679: }
RegularFileObject[/tmp/EvoSuite_173_1628161028490/com/google/javascript/rhino/Node_173_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:57:08 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_173_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_173_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.common.collect.AbstractMapBasedMultimap$1",
119:       "com.google.common.collect.AbstractMapBasedMultimap$2",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.common.collect.AbstractMultimap$Values",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMultimap$Entries",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.Multimaps$Entries",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.common.collect.ImmutableList",
230:       "com.google.common.collect.SingletonImmutableBiMap",
231:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
232:       "com.google.javascript.rhino.jstype.StringType",
233:       "com.google.javascript.rhino.Node$AbstractPropListItem",
234:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
235:       "com.google.javascript.rhino.jstype.TemplatizedType",
236:       "com.google.javascript.rhino.jstype.Visitor",
237:       "com.google.javascript.rhino.jstype.NoResolvedType",
238:       "com.google.javascript.rhino.jstype.JSTypeNative",
239:       "com.google.javascript.rhino.jstype.AllType",
240:       "com.google.common.collect.Maps",
241:       "com.google.common.collect.SetMultimap",
242:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
243:       "com.google.common.collect.Maps$EntryTransformer",
244:       "com.google.javascript.rhino.JSTypeExpression",
245:       "com.google.common.collect.Iterators$MergingIterator"
246:     );
247:   } 
248: 
249:   private static void resetClasses() {
250:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_173_tmp__ESTest_scaffolding.class.getClassLoader()); 
251: 
252:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
253:       "com.google.javascript.rhino.Node",
254:       "com.google.javascript.rhino.Node$NumberNode",
255:       "com.google.javascript.rhino.Node$StringNode",
256:       "com.google.javascript.rhino.Node$AbstractPropListItem",
257:       "com.google.javascript.rhino.Node$ObjectPropListItem",
258:       "com.google.javascript.rhino.Node$IntPropListItem",
259:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
260:       "com.google.javascript.rhino.Node$AncestorIterable",
261:       "com.google.javascript.rhino.Node$NodeMismatch",
262:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
263:       "com.google.javascript.rhino.Node$SideEffectFlags",
264:       "com.google.javascript.rhino.Token",
265:       "com.google.common.base.Preconditions",
266:       "com.google.javascript.rhino.SimpleErrorReporter",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.JSDocInfo",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.jstype.JSType$TypePair",
342:       "com.google.common.collect.AbstractMultimap$Values",
343:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
344:       "com.google.common.collect.AbstractMapBasedMultimap$1",
345:       "com.google.common.collect.Multimaps$Entries",
346:       "com.google.common.collect.AbstractMultimap$Entries",
347:       "com.google.common.collect.AbstractMapBasedMultimap$2",
348:       "com.google.common.base.Objects",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.javascript.rhino.InputId",
351:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.common.collect.Iterables",
355:       "com.google.common.collect.AbstractIndexedListIterator",
356:       "com.google.common.collect.Iterators$11",
357:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
358:       "com.google.common.collect.Iterators$12",
359:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
360:       "com.google.common.collect.Platform",
361:       "com.google.javascript.rhino.Node$AncestorIterable$1",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.javascript.rhino.jstype.NamespaceType",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.javascript.rhino.JSTypeExpression",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
369:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
371:       "com.google.javascript.rhino.jstype.JSType$2"
372:     );
373:   }
374: }

[MASTER] 10:57:08.539 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

byte[] byteArray0 = new byte[2];
byteArray0[0] = (byte) (-111);
byteArray0[1] = (byte) (-111);
boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertEquals(2, byteArray0.length);
assertFalse(boolean1 == boolean0);
assertArrayEquals(new byte[] {(byte) (-111), (byte) (-111)}, byteArray0);
assertFalse(boolean1);

Node node0 = Node.newNumber(49.0);
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(iterable0.contains(node0));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertNotNull(iterable0);

Node node1 = Node.newNumber(0.0, 15, 46);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertEquals(46, node1.getCharno());
assertEquals(15, node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertEquals(61486, node1.getSourcePosition());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertEquals(39, node1.getType());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertTrue(node1.isNumber());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isComma());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertNotNull(node1);
assertNotSame(node1, node0);

Node node2 = new Node(83, node0, node0, node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isVar());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertTrue(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertEquals(46, node1.getCharno());
assertEquals(15, node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isStringKey());
assertEquals(61486, node1.getSourcePosition());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertEquals(39, node1.getType());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertTrue(node1.isNumber());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isComma());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node2.isInstanceOf());
assertTrue(node2.isParamList());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertEquals(83, node2.getType());
assertFalse(node2.isBreak());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertFalse(node2.isIf());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isThis());
assertFalse(node2.isCase());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isCatch());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isVoid());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isFunction());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isString());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getSourcePosition());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isDelProp());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isExprResult());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isWhile());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node2);

node2.getAncestor((-4704));

[MASTER] 10:57:27.800 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:57:28.078 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:57:28.331 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:57:28.535 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:57:28.848 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:57:29.050 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:57:41.206 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/22
* Done!

* Computation finished
