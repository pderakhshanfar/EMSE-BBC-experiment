* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 20632
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 362527052
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:40:54.179 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:40:56.400 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V
[MASTER] 17:40:56.442 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: root-Branch in context: com.google.javascript.rhino.Node:<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V
[MASTER] 17:41:20.100 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 17:41:46.350 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
* Search finished after 605s and 589 generations, 266273 statements, best individual has fitness: 2805.0
* Minimizing test suite
[MASTER] 17:52:33.485 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 802
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 714
* Number of covered goals: 633
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 108
* Number of covered goals: 108
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 530
* Number of covered goals: 471
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 4536
* Number of covered goals: 2215
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 597
* Generated 830 tests with total length 12355
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:53:55.986 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7316333333333334% of time used, but only 34/830 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 10%
[MASTER] 17:54:12.275 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Compiling and checking tests
[MASTER] 17:54:25.205 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 13 seconds more than allowed.
[MASTER] 17:54:34.481 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_63_1629222874101/com/google/javascript/rhino/Node_63_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_63_1629222874101/com/google/javascript/rhino/Node_63_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:34.489 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:34.489 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:34.497 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 347
[MASTER] 17:54:34.499 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_63_1629222874101/com/google/javascript/rhino/Node_63_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:34 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.testdata.EvoSuiteFile;
15: import org.evosuite.runtime.testdata.FileSystemHandling;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_63_tmp__ESTest extends Node_63_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
24:       assertFalse(boolean0);
25:       
26:       boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
27:       assertFalse(boolean1);
28:       assertTrue(boolean1 == boolean0);
29:       
30:       Node node0 = Node.newString("t4`]M|KApUSxQvO}GR", 26, 13);
31:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
32:       assertEquals(43, Node.IS_CONSTANT_NAME);
33:       assertEquals(8, Node.FLAG_NO_THROWS);
34:       assertEquals(39, Node.EMPTY_BLOCK);
35:       assertEquals(53, Node.INPUT_ID);
36:       assertEquals(36, Node.QUOTED_PROP);
37:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
38:       assertEquals(55, Node.INFERRED_FUNCTION);
39:       assertEquals(40, Node.ORIGINALNAME_PROP);
40:       assertEquals(50, Node.FREE_CALL);
41:       assertEquals(47, Node.IS_DISPATCHER);
42:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
43:       assertEquals(2, Node.POST_FLAG);
44:       assertEquals(30, Node.VAR_ARGS_NAME);
45:       assertEquals(49, Node.DIRECT_EVAL);
46:       assertEquals(51, Node.STATIC_SOURCE_FILE);
47:       assertEquals(1, Node.DECR_FLAG);
48:       assertEquals(57, Node.LAST_PROP);
49:       assertEquals(32, Node.INCRDECR_PROP);
50:       assertEquals(46, Node.IS_NAMESPACE);
51:       assertEquals(12, Node.COLUMN_BITS);
52:       assertEquals(54, Node.SLASH_V);
53:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
54:       assertEquals(52, Node.LENGTH);
55:       assertEquals(15, Node.NO_SIDE_EFFECTS);
56:       assertEquals(29, Node.JSDOC_INFO_PROP);
57:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
58:       assertEquals(57, Node.REFLECTED_OBJECT);
59:       assertEquals(56, Node.CHANGE_TIME);
60:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
61:       assertEquals(48, Node.DIRECTIVES);
62:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
63:       assertEquals(37, Node.OPT_ARG_NAME);
64:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
65:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
66:       assertEquals(4095, Node.COLUMN_MASK);
67:       assertNotNull(node0);
68:       assertFalse(node0.isDo());
69:       assertFalse(node0.isBlock());
70:       assertFalse(node0.isWhile());
71:       assertFalse(node0.isOr());
72:       assertTrue(node0.isString());
73:       assertFalse(node0.isNew());
74:       assertFalse(node0.isAdd());
75:       assertFalse(node0.isNumber());
76:       assertFalse(node0.isLabelName());
77:       assertFalse(node0.isStringKey());
78:       assertFalse(node0.isLabel());
79:       assertFalse(node0.isAssignAdd());
80:       assertFalse(node0.isParamList());
81:       assertFalse(node0.isVar());
82:       assertEquals(0, node0.getChildCount());
83:       assertEquals(13, node0.getCharno());
84:       assertFalse(node0.isContinue());
85:       assertFalse(node0.isCast());
86:       assertFalse(node0.isDefaultCase());
87:       assertFalse(node0.isVoid());
88:       assertFalse(node0.isNot());
89:       assertFalse(node0.isDebugger());
90:       assertFalse(node0.isAnd());
91:       assertFalse(node0.isTrue());
92:       assertFalse(node0.isObjectLit());
93:       assertFalse(node0.isGetProp());
94:       assertFalse(node0.isEmpty());
95:       assertFalse(node0.isDec());
96:       assertFalse(node0.isBreak());
97:       assertFalse(node0.hasChildren());
98:       assertFalse(node0.isComma());
99:       assertFalse(node0.isDelProp());
100:       assertFalse(node0.isName());
101:       assertFalse(node0.isAssign());
102:       assertFalse(node0.isTypeOf());
103:       assertFalse(node0.isReturn());
104:       assertFalse(node0.isNull());
105:       assertFalse(node0.isGetElem());
106:       assertFalse(node0.isExprResult());
107:       assertFalse(node0.isCall());
108:       assertFalse(node0.isSwitch());
109:       assertEquals(26, node0.getLineno());
110:       assertFalse(node0.isIn());
111:       assertFalse(node0.isCase());
112:       assertFalse(node0.isInc());
113:       assertFalse(node0.isGetterDef());
114:       assertFalse(node0.isThrow());
115:       assertFalse(node0.isArrayLit());
116:       assertFalse(node0.isFalse());
117:       assertFalse(node0.isFunction());
118:       assertFalse(node0.isWith());
119:       assertFalse(node0.isRegExp());
120:       assertEquals(40, node0.getType());
121:       assertFalse(node0.hasOneChild());
122:       assertFalse(node0.isTry());
123:       assertFalse(node0.isSetterDef());
124:       assertFalse(node0.isScript());
125:       assertEquals(106509, node0.getSourcePosition());
126:       assertFalse(node0.isIf());
127:       assertFalse(node0.isThis());
128:       assertFalse(node0.isNE());
129:       assertFalse(node0.isFor());
130:       assertFalse(node0.isHook());
131:       assertFalse(node0.isInstanceOf());
132:       assertFalse(node0.hasMoreThanOneChild());
133:       assertFalse(node0.isCatch());
134:       
135:       node0.removeProp(13);
136:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
137:       assertEquals(43, Node.IS_CONSTANT_NAME);
138:       assertEquals(8, Node.FLAG_NO_THROWS);
139:       assertEquals(39, Node.EMPTY_BLOCK);
140:       assertEquals(53, Node.INPUT_ID);
141:       assertEquals(36, Node.QUOTED_PROP);
142:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
143:       assertEquals(55, Node.INFERRED_FUNCTION);
144:       assertEquals(40, Node.ORIGINALNAME_PROP);
145:       assertEquals(50, Node.FREE_CALL);
146:       assertEquals(47, Node.IS_DISPATCHER);
147:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
148:       assertEquals(2, Node.POST_FLAG);
149:       assertEquals(30, Node.VAR_ARGS_NAME);
150:       assertEquals(49, Node.DIRECT_EVAL);
151:       assertEquals(51, Node.STATIC_SOURCE_FILE);
152:       assertEquals(1, Node.DECR_FLAG);
153:       assertEquals(57, Node.LAST_PROP);
154:       assertEquals(32, Node.INCRDECR_PROP);
155:       assertEquals(46, Node.IS_NAMESPACE);
156:       assertEquals(12, Node.COLUMN_BITS);
157:       assertEquals(54, Node.SLASH_V);
158:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
159:       assertEquals(52, Node.LENGTH);
160:       assertEquals(15, Node.NO_SIDE_EFFECTS);
161:       assertEquals(29, Node.JSDOC_INFO_PROP);
162:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
163:       assertEquals(57, Node.REFLECTED_OBJECT);
164:       assertEquals(56, Node.CHANGE_TIME);
165:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
166:       assertEquals(48, Node.DIRECTIVES);
167:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
168:       assertEquals(37, Node.OPT_ARG_NAME);
169:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
170:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
171:       assertEquals(4095, Node.COLUMN_MASK);
172:       assertFalse(node0.isDo());
173:       assertFalse(node0.isBlock());
174:       assertFalse(node0.isWhile());
175:       assertFalse(node0.isOr());
176:       assertTrue(node0.isString());
177:       assertFalse(node0.isNew());
178:       assertFalse(node0.isAdd());
179:       assertFalse(node0.isNumber());
180:       assertFalse(node0.isLabelName());
181:       assertFalse(node0.isStringKey());
182:       assertFalse(node0.isLabel());
183:       assertFalse(node0.isAssignAdd());
184:       assertFalse(node0.isParamList());
185:       assertFalse(node0.isVar());
186:       assertEquals(0, node0.getChildCount());
187:       assertEquals(13, node0.getCharno());
188:       assertFalse(node0.isContinue());
189:       assertFalse(node0.isCast());
190:       assertFalse(node0.isDefaultCase());
191:       assertFalse(node0.isVoid());
192:       assertFalse(node0.isNot());
193:       assertFalse(node0.isDebugger());
194:       assertFalse(node0.isAnd());
195:       assertFalse(node0.isTrue());
196:       assertFalse(node0.isObjectLit());
197:       assertFalse(node0.isGetProp());
198:       assertFalse(node0.isEmpty());
199:       assertFalse(node0.isDec());
200:       assertFalse(node0.isBreak());
201:       assertFalse(node0.hasChildren());
202:       assertFalse(node0.isComma());
203:       assertFalse(node0.isDelProp());
204:       assertFalse(node0.isName());
205:       assertFalse(node0.isAssign());
206:       assertFalse(node0.isTypeOf());
207:       assertFalse(node0.isReturn());
208:       assertFalse(node0.isNull());
209:       assertFalse(node0.isGetElem());
210:       assertFalse(node0.isExprResult());
211:       assertFalse(node0.isCall());
212:       assertFalse(node0.isSwitch());
213:       assertEquals(26, node0.getLineno());
214:       assertFalse(node0.isIn());
215:       assertFalse(node0.isCase());
216:       assertFalse(node0.isInc());
217:       assertFalse(node0.isGetterDef());
218:       assertFalse(node0.isThrow());
219:       assertFalse(node0.isArrayLit());
220:       assertFalse(node0.isFalse());
221:       assertFalse(node0.isFunction());
222:       assertFalse(node0.isWith());
223:       assertFalse(node0.isRegExp());
224:       assertEquals(40, node0.getType());
225:       assertFalse(node0.hasOneChild());
226:       assertFalse(node0.isTry());
227:       assertFalse(node0.isSetterDef());
228:       assertFalse(node0.isScript());
229:       assertEquals(106509, node0.getSourcePosition());
230:       assertFalse(node0.isIf());
231:       assertFalse(node0.isThis());
232:       assertFalse(node0.isNE());
233:       assertFalse(node0.isFor());
234:       assertFalse(node0.isHook());
235:       assertFalse(node0.isInstanceOf());
236:       assertFalse(node0.hasMoreThanOneChild());
237:       assertFalse(node0.isCatch());
238:       
239:       boolean boolean2 = node0.wasEmptyNode();
240:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
241:       assertEquals(43, Node.IS_CONSTANT_NAME);
242:       assertEquals(8, Node.FLAG_NO_THROWS);
243:       assertEquals(39, Node.EMPTY_BLOCK);
244:       assertEquals(53, Node.INPUT_ID);
245:       assertEquals(36, Node.QUOTED_PROP);
246:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
247:       assertEquals(55, Node.INFERRED_FUNCTION);
248:       assertEquals(40, Node.ORIGINALNAME_PROP);
249:       assertEquals(50, Node.FREE_CALL);
250:       assertEquals(47, Node.IS_DISPATCHER);
251:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
252:       assertEquals(2, Node.POST_FLAG);
253:       assertEquals(30, Node.VAR_ARGS_NAME);
254:       assertEquals(49, Node.DIRECT_EVAL);
255:       assertEquals(51, Node.STATIC_SOURCE_FILE);
256:       assertEquals(1, Node.DECR_FLAG);
257:       assertEquals(57, Node.LAST_PROP);
258:       assertEquals(32, Node.INCRDECR_PROP);
259:       assertEquals(46, Node.IS_NAMESPACE);
260:       assertEquals(12, Node.COLUMN_BITS);
261:       assertEquals(54, Node.SLASH_V);
262:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
263:       assertEquals(52, Node.LENGTH);
264:       assertEquals(15, Node.NO_SIDE_EFFECTS);
265:       assertEquals(29, Node.JSDOC_INFO_PROP);
266:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
267:       assertEquals(57, Node.REFLECTED_OBJECT);
268:       assertEquals(56, Node.CHANGE_TIME);
269:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
270:       assertEquals(48, Node.DIRECTIVES);
271:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
272:       assertEquals(37, Node.OPT_ARG_NAME);
273:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
274:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
275:       assertEquals(4095, Node.COLUMN_MASK);
276:       assertFalse(boolean2);
277:       assertFalse(node0.isDo());
278:       assertFalse(node0.isBlock());
279:       assertFalse(node0.isWhile());
280:       assertFalse(node0.isOr());
281:       assertTrue(node0.isString());
282:       assertFalse(node0.isNew());
283:       assertFalse(node0.isAdd());
284:       assertFalse(node0.isNumber());
285:       assertFalse(node0.isLabelName());
286:       assertFalse(node0.isStringKey());
287:       assertFalse(node0.isLabel());
288:       assertFalse(node0.isAssignAdd());
289:       assertFalse(node0.isParamList());
290:       assertFalse(node0.isVar());
291:       assertEquals(0, node0.getChildCount());
292:       assertEquals(13, node0.getCharno());
293:       assertFalse(node0.isContinue());
294:       assertFalse(node0.isCast());
295:       assertFalse(node0.isDefaultCase());
296:       assertFalse(node0.isVoid());
297:       assertFalse(node0.isNot());
298:       assertFalse(node0.isDebugger());
299:       assertFalse(node0.isAnd());
300:       assertFalse(node0.isTrue());
301:       assertFalse(node0.isObjectLit());
302:       assertFalse(node0.isGetProp());
303:       assertFalse(node0.isEmpty());
304:       assertFalse(node0.isDec());
305:       assertFalse(node0.isBreak());
306:       assertFalse(node0.hasChildren());
307:       assertFalse(node0.isComma());
308:       assertFalse(node0.isDelProp());
309:       assertFalse(node0.isName());
310:       assertFalse(node0.isAssign());
311:       assertFalse(node0.isTypeOf());
312:       assertFalse(node0.isReturn());
313:       assertFalse(node0.isNull());
314:       assertFalse(node0.isGetElem());
315:       assertFalse(node0.isExprResult());
316:       assertFalse(node0.isCall());
317:       assertFalse(node0.isSwitch());
318:       assertEquals(26, node0.getLineno());
319:       assertFalse(node0.isIn());
320:       assertFalse(node0.isCase());
321:       assertFalse(node0.isInc());
322:       assertFalse(node0.isGetterDef());
323:       assertFalse(node0.isThrow());
324:       assertFalse(node0.isArrayLit());
325:       assertFalse(node0.isFalse());
326:       assertFalse(node0.isFunction());
327:       assertFalse(node0.isWith());
328:       assertFalse(node0.isRegExp());
329:       assertEquals(40, node0.getType());
330:       assertFalse(node0.hasOneChild());
331:       assertFalse(node0.isTry());
332:       assertFalse(node0.isSetterDef());
333:       assertFalse(node0.isScript());
334:       assertEquals(106509, node0.getSourcePosition());
335:       assertFalse(node0.isIf());
336:       assertFalse(node0.isThis());
337:       assertFalse(node0.isNE());
338:       assertFalse(node0.isFor());
339:       assertFalse(node0.isHook());
340:       assertFalse(node0.isInstanceOf());
341:       assertFalse(node0.hasMoreThanOneChild());
342:       assertFalse(node0.isCatch());
343:       assertTrue(boolean2 == boolean0);
344:       assertTrue(boolean2 == boolean1);
345:       
346:       Iterable<Node> iterable0 = node0.children();
347:       assertFalse(iterable0.contains(node0));
348:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
349:       assertEquals(43, Node.IS_CONSTANT_NAME);
350:       assertEquals(8, Node.FLAG_NO_THROWS);
351:       assertEquals(39, Node.EMPTY_BLOCK);
352:       assertEquals(53, Node.INPUT_ID);
353:       assertEquals(36, Node.QUOTED_PROP);
354:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
355:       assertEquals(55, Node.INFERRED_FUNCTION);
356:       assertEquals(40, Node.ORIGINALNAME_PROP);
357:       assertEquals(50, Node.FREE_CALL);
358:       assertEquals(47, Node.IS_DISPATCHER);
359:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
360:       assertEquals(2, Node.POST_FLAG);
361:       assertEquals(30, Node.VAR_ARGS_NAME);
362:       assertEquals(49, Node.DIRECT_EVAL);
363:       assertEquals(51, Node.STATIC_SOURCE_FILE);
364:       assertEquals(1, Node.DECR_FLAG);
365:       assertEquals(57, Node.LAST_PROP);
366:       assertEquals(32, Node.INCRDECR_PROP);
367:       assertEquals(46, Node.IS_NAMESPACE);
368:       assertEquals(12, Node.COLUMN_BITS);
369:       assertEquals(54, Node.SLASH_V);
370:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
371:       assertEquals(52, Node.LENGTH);
372:       assertEquals(15, Node.NO_SIDE_EFFECTS);
373:       assertEquals(29, Node.JSDOC_INFO_PROP);
374:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
375:       assertEquals(57, Node.REFLECTED_OBJECT);
376:       assertEquals(56, Node.CHANGE_TIME);
377:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
378:       assertEquals(48, Node.DIRECTIVES);
379:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
380:       assertEquals(37, Node.OPT_ARG_NAME);
381:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
382:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
383:       assertEquals(4095, Node.COLUMN_MASK);
384:       assertNotNull(iterable0);
385:       assertFalse(node0.isDo());
386:       assertFalse(node0.isBlock());
387:       assertFalse(node0.isWhile());
388:       assertFalse(node0.isOr());
389:       assertTrue(node0.isString());
390:       assertFalse(node0.isNew());
391:       assertFalse(node0.isAdd());
392:       assertFalse(node0.isNumber());
393:       assertFalse(node0.isLabelName());
394:       assertFalse(node0.isStringKey());
395:       assertFalse(node0.isLabel());
396:       assertFalse(node0.isAssignAdd());
397:       assertFalse(node0.isParamList());
398:       assertFalse(node0.isVar());
399:       assertEquals(0, node0.getChildCount());
400:       assertEquals(13, node0.getCharno());
401:       assertFalse(node0.isContinue());
402:       assertFalse(node0.isCast());
403:       assertFalse(node0.isDefaultCase());
404:       assertFalse(node0.isVoid());
405:       assertFalse(node0.isNot());
406:       assertFalse(node0.isDebugger());
407:       assertFalse(node0.isAnd());
408:       assertFalse(node0.isTrue());
409:       assertFalse(node0.isObjectLit());
410:       assertFalse(node0.isGetProp());
411:       assertFalse(node0.isEmpty());
412:       assertFalse(node0.isDec());
413:       assertFalse(node0.isBreak());
414:       assertFalse(node0.hasChildren());
415:       assertFalse(node0.isComma());
416:       assertFalse(node0.isDelProp());
417:       assertFalse(node0.isName());
418:       assertFalse(node0.isAssign());
419:       assertFalse(node0.isTypeOf());
420:       assertFalse(node0.isReturn());
421:       assertFalse(node0.isNull());
422:       assertFalse(node0.isGetElem());
423:       assertFalse(node0.isExprResult());
424:       assertFalse(node0.isCall());
425:       assertFalse(node0.isSwitch());
426:       assertEquals(26, node0.getLineno());
427:       assertFalse(node0.isIn());
428:       assertFalse(node0.isCase());
429:       assertFalse(node0.isInc());
430:       assertFalse(node0.isGetterDef());
431:       assertFalse(node0.isThrow());
432:       assertFalse(node0.isArrayLit());
433:       assertFalse(node0.isFalse());
434:       assertFalse(node0.isFunction());
435:       assertFalse(node0.isWith());
436:       assertFalse(node0.isRegExp());
437:       assertEquals(40, node0.getType());
438:       assertFalse(node0.hasOneChild());
439:       assertFalse(node0.isTry());
440:       assertFalse(node0.isSetterDef());
441:       assertFalse(node0.isScript());
442:       assertEquals(106509, node0.getSourcePosition());
443:       assertFalse(node0.isIf());
444:       assertFalse(node0.isThis());
445:       assertFalse(node0.isNE());
446:       assertFalse(node0.isFor());
447:       assertFalse(node0.isHook());
448:       assertFalse(node0.isInstanceOf());
449:       assertFalse(node0.hasMoreThanOneChild());
450:       assertFalse(node0.isCatch());
451:       
452:       boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
453:       assertFalse(boolean3);
454:       assertTrue(boolean3 == boolean0);
455:       assertTrue(boolean3 == boolean1);
456:       assertTrue(boolean3 == boolean2);
457:       
458:       node0.setType(4);
459:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
460:       assertEquals(43, Node.IS_CONSTANT_NAME);
461:       assertEquals(8, Node.FLAG_NO_THROWS);
462:       assertEquals(39, Node.EMPTY_BLOCK);
463:       assertEquals(53, Node.INPUT_ID);
464:       assertEquals(36, Node.QUOTED_PROP);
465:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
466:       assertEquals(55, Node.INFERRED_FUNCTION);
467:       assertEquals(40, Node.ORIGINALNAME_PROP);
468:       assertEquals(50, Node.FREE_CALL);
469:       assertEquals(47, Node.IS_DISPATCHER);
470:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
471:       assertEquals(2, Node.POST_FLAG);
472:       assertEquals(30, Node.VAR_ARGS_NAME);
473:       assertEquals(49, Node.DIRECT_EVAL);
474:       assertEquals(51, Node.STATIC_SOURCE_FILE);
475:       assertEquals(1, Node.DECR_FLAG);
476:       assertEquals(57, Node.LAST_PROP);
477:       assertEquals(32, Node.INCRDECR_PROP);
478:       assertEquals(46, Node.IS_NAMESPACE);
479:       assertEquals(12, Node.COLUMN_BITS);
480:       assertEquals(54, Node.SLASH_V);
481:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
482:       assertEquals(52, Node.LENGTH);
483:       assertEquals(15, Node.NO_SIDE_EFFECTS);
484:       assertEquals(29, Node.JSDOC_INFO_PROP);
485:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
486:       assertEquals(57, Node.REFLECTED_OBJECT);
487:       assertEquals(56, Node.CHANGE_TIME);
488:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
489:       assertEquals(48, Node.DIRECTIVES);
490:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
491:       assertEquals(37, Node.OPT_ARG_NAME);
492:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
493:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
494:       assertEquals(4095, Node.COLUMN_MASK);
495:       assertFalse(node0.isDo());
496:       assertFalse(node0.isBlock());
497:       assertFalse(node0.isWhile());
498:       assertFalse(node0.isOr());
499:       assertFalse(node0.isNew());
500:       assertFalse(node0.isAdd());
501:       assertFalse(node0.isNumber());
502:       assertFalse(node0.isLabelName());
503:       assertFalse(node0.isStringKey());
504:       assertFalse(node0.isLabel());
505:       assertFalse(node0.isAssignAdd());
506:       assertFalse(node0.isParamList());
507:       assertFalse(node0.isVar());
508:       assertEquals(0, node0.getChildCount());
509:       assertEquals(13, node0.getCharno());
510:       assertFalse(node0.isContinue());
511:       assertFalse(node0.isCast());
512:       assertFalse(node0.isDefaultCase());
513:       assertFalse(node0.isVoid());
514:       assertFalse(node0.isNot());
515:       assertFalse(node0.isDebugger());
516:       assertFalse(node0.isAnd());
517:       assertFalse(node0.isTrue());
518:       assertFalse(node0.isObjectLit());
519:       assertFalse(node0.isGetProp());
520:       assertFalse(node0.isEmpty());
521:       assertFalse(node0.isDec());
522:       assertFalse(node0.isBreak());
523:       assertFalse(node0.hasChildren());
524:       assertFalse(node0.isComma());
525:       assertFalse(node0.isDelProp());
526:       assertFalse(node0.isName());
527:       assertFalse(node0.isAssign());
528:       assertFalse(node0.isTypeOf());
529:       assertFalse(node0.isNull());
530:       assertFalse(node0.isGetElem());
531:       assertFalse(node0.isExprResult());
532:       assertFalse(node0.isCall());
533:       assertFalse(node0.isString());
534:       assertFalse(node0.isSwitch());
535:       assertEquals(4, node0.getType());
536:       assertEquals(26, node0.getLineno());
537:       assertFalse(node0.isIn());
538:       assertFalse(node0.isCase());
539:       assertFalse(node0.isInc());
540:       assertFalse(node0.isGetterDef());
541:       assertFalse(node0.isThrow());
542:       assertFalse(node0.isArrayLit());
543:       assertFalse(node0.isFalse());
544:       assertFalse(node0.isFunction());
545:       assertFalse(node0.isWith());
546:       assertFalse(node0.isRegExp());
547:       assertFalse(node0.hasOneChild());
548:       assertFalse(node0.isTry());
549:       assertFalse(node0.isSetterDef());
550:       assertFalse(node0.isScript());
551:       assertEquals(106509, node0.getSourcePosition());
552:       assertFalse(node0.isIf());
553:       assertFalse(node0.isThis());
554:       assertFalse(node0.isNE());
555:       assertFalse(node0.isFor());
556:       assertFalse(node0.isHook());
557:       assertFalse(node0.isInstanceOf());
558:       assertFalse(node0.hasMoreThanOneChild());
559:       assertTrue(node0.isReturn());
560:       assertFalse(node0.isCatch());
561:       
562:       boolean boolean4 = node0.isTry();
563:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
564:       assertEquals(43, Node.IS_CONSTANT_NAME);
565:       assertEquals(8, Node.FLAG_NO_THROWS);
566:       assertEquals(39, Node.EMPTY_BLOCK);
567:       assertEquals(53, Node.INPUT_ID);
568:       assertEquals(36, Node.QUOTED_PROP);
569:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
570:       assertEquals(55, Node.INFERRED_FUNCTION);
571:       assertEquals(40, Node.ORIGINALNAME_PROP);
572:       assertEquals(50, Node.FREE_CALL);
573:       assertEquals(47, Node.IS_DISPATCHER);
574:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
575:       assertEquals(2, Node.POST_FLAG);
576:       assertEquals(30, Node.VAR_ARGS_NAME);
577:       assertEquals(49, Node.DIRECT_EVAL);
578:       assertEquals(51, Node.STATIC_SOURCE_FILE);
579:       assertEquals(1, Node.DECR_FLAG);
580:       assertEquals(57, Node.LAST_PROP);
581:       assertEquals(32, Node.INCRDECR_PROP);
582:       assertEquals(46, Node.IS_NAMESPACE);
583:       assertEquals(12, Node.COLUMN_BITS);
584:       assertEquals(54, Node.SLASH_V);
585:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
586:       assertEquals(52, Node.LENGTH);
587:       assertEquals(15, Node.NO_SIDE_EFFECTS);
588:       assertEquals(29, Node.JSDOC_INFO_PROP);
589:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
590:       assertEquals(57, Node.REFLECTED_OBJECT);
591:       assertEquals(56, Node.CHANGE_TIME);
592:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
593:       assertEquals(48, Node.DIRECTIVES);
594:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
595:       assertEquals(37, Node.OPT_ARG_NAME);
596:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
597:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
598:       assertEquals(4095, Node.COLUMN_MASK);
599:       assertFalse(boolean4);
600:       assertFalse(node0.isDo());
601:       assertFalse(node0.isBlock());
602:       assertFalse(node0.isWhile());
603:       assertFalse(node0.isOr());
604:       assertFalse(node0.isNew());
605:       assertFalse(node0.isAdd());
606:       assertFalse(node0.isNumber());
607:       assertFalse(node0.isLabelName());
608:       assertFalse(node0.isStringKey());
609:       assertFalse(node0.isLabel());
610:       assertFalse(node0.isAssignAdd());
611:       assertFalse(node0.isParamList());
612:       assertFalse(node0.isVar());
613:       assertEquals(0, node0.getChildCount());
614:       assertEquals(13, node0.getCharno());
615:       assertFalse(node0.isContinue());
616:       assertFalse(node0.isCast());
617:       assertFalse(node0.isDefaultCase());
618:       assertFalse(node0.isVoid());
619:       assertFalse(node0.isNot());
620:       assertFalse(node0.isDebugger());
621:       assertFalse(node0.isAnd());
622:       assertFalse(node0.isTrue());
623:       assertFalse(node0.isObjectLit());
624:       assertFalse(node0.isGetProp());
625:       assertFalse(node0.isEmpty());
626:       assertFalse(node0.isDec());
627:       assertFalse(node0.isBreak());
628:       assertFalse(node0.hasChildren());
629:       assertFalse(node0.isComma());
630:       assertFalse(node0.isDelProp());
631:       assertFalse(node0.isName());
632:       assertFalse(node0.isAssign());
633:       assertFalse(node0.isTypeOf());
634:       assertFalse(node0.isNull());
635:       assertFalse(node0.isGetElem());
636:       assertFalse(node0.isExprResult());
637:       assertFalse(node0.isCall());
638:       assertFalse(node0.isString());
639:       assertFalse(node0.isSwitch());
640:       assertEquals(4, node0.getType());
641:       assertEquals(26, node0.getLineno());
642:       assertFalse(node0.isIn());
643:       assertFalse(node0.isCase());
644:       assertFalse(node0.isInc());
645:       assertFalse(node0.isGetterDef());
646:       assertFalse(node0.isThrow());
647:       assertFalse(node0.isArrayLit());
648:       assertFalse(node0.isFalse());
649:       assertFalse(node0.isFunction());
650:       assertFalse(node0.isWith());
651:       assertFalse(node0.isRegExp());
652:       assertFalse(node0.hasOneChild());
653:       assertFalse(node0.isTry());
654:       assertFalse(node0.isSetterDef());
655:       assertFalse(node0.isScript());
656:       assertEquals(106509, node0.getSourcePosition());
657:       assertFalse(node0.isIf());
658:       assertFalse(node0.isThis());
659:       assertFalse(node0.isNE());
660:       assertFalse(node0.isFor());
661:       assertFalse(node0.isHook());
662:       assertFalse(node0.isInstanceOf());
663:       assertFalse(node0.hasMoreThanOneChild());
664:       assertTrue(node0.isReturn());
665:       assertFalse(node0.isCatch());
666:       assertTrue(boolean4 == boolean1);
667:       assertTrue(boolean4 == boolean3);
668:       assertTrue(boolean4 == boolean2);
669:       assertTrue(boolean4 == boolean0);
670:       
671:       Node node1 = Node.newString("");
672:       assertEquals(56, Node.CHANGE_TIME);
673:       assertEquals(51, Node.STATIC_SOURCE_FILE);
674:       assertEquals(2, Node.POST_FLAG);
675:       assertEquals(12, Node.COLUMN_BITS);
676:       assertEquals(46, Node.IS_NAMESPACE);
677:       assertEquals(47, Node.IS_DISPATCHER);
678:       assertEquals(30, Node.VAR_ARGS_NAME);
679:       assertEquals(49, Node.DIRECT_EVAL);
680:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
681:       assertEquals(37, Node.OPT_ARG_NAME);
682:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
683:       assertEquals(54, Node.SLASH_V);
684:       assertEquals(43, Node.IS_CONSTANT_NAME);
685:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
686:       assertEquals(1, Node.DECR_FLAG);
687:       assertEquals(50, Node.FREE_CALL);
688:       assertEquals(32, Node.INCRDECR_PROP);
689:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
690:       assertEquals(48, Node.DIRECTIVES);
691:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
692:       assertEquals(8, Node.FLAG_NO_THROWS);
693:       assertEquals(4095, Node.COLUMN_MASK);
694:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
695:       assertEquals(40, Node.ORIGINALNAME_PROP);
696:       assertEquals(53, Node.INPUT_ID);
697:       assertEquals(52, Node.LENGTH);
698:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
699:       assertEquals(36, Node.QUOTED_PROP);
700:       assertEquals(57, Node.REFLECTED_OBJECT);
701:       assertEquals(29, Node.JSDOC_INFO_PROP);
702:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
703:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
704:       assertEquals(57, Node.LAST_PROP);
705:       assertEquals(15, Node.NO_SIDE_EFFECTS);
706:       assertEquals(55, Node.INFERRED_FUNCTION);
707:       assertEquals(39, Node.EMPTY_BLOCK);
708:       assertNotNull(node1);
709:       assertNotSame(node1, node0);
710:       assertFalse(node1.isCatch());
711:       assertEquals(40, node1.getType());
712:       assertEquals(0, node1.getChildCount());
713:       assertFalse(node1.isRegExp());
714:       assertFalse(node1.isNull());
715:       assertFalse(node1.isFunction());
716:       assertFalse(node1.isTrue());
717:       assertFalse(node1.isParamList());
718:       assertFalse(node1.isName());
719:       assertFalse(node1.isVoid());
720:       assertFalse(node1.isCall());
721:       assertFalse(node1.isStringKey());
722:       assertFalse(node1.isFor());
723:       assertFalse(node1.isBlock());
724:       assertFalse(node1.isDebugger());
725:       assertFalse(node1.isGetterDef());
726:       assertFalse(node1.isWhile());
727:       assertFalse(node1.isTry());
728:       assertTrue(node1.isString());
729:       assertFalse(node1.hasMoreThanOneChild());
730:       assertFalse(node1.isIn());
731:       assertFalse(node1.isContinue());
732:       assertFalse(node1.isNE());
733:       assertFalse(node1.isIf());
734:       assertEquals((-1), node1.getLineno());
735:       assertFalse(node1.isCast());
736:       assertFalse(node1.isThrow());
737:       assertFalse(node1.isFalse());
738:       assertFalse(node1.isSetterDef());
739:       assertFalse(node1.isInc());
740:       assertFalse(node1.isAnd());
741:       assertFalse(node1.isInstanceOf());
742:       assertFalse(node1.isNot());
743:       assertFalse(node1.isWith());
744:       assertFalse(node1.isObjectLit());
745:       assertFalse(node1.isComma());
746:       assertFalse(node1.isExprResult());
747:       assertFalse(node1.isBreak());
748:       assertFalse(node1.isHook());
749:       assertFalse(node1.isAssign());
750:       assertEquals((-1), node1.getCharno());
751:       assertFalse(node1.hasChildren());
752:       assertEquals((-1), node1.getSourcePosition());
753:       assertFalse(node1.isDec());
754:       assertFalse(node1.isScript());
755:       assertFalse(node1.isThis());
756:       assertFalse(node1.isNumber());
757:       assertFalse(node1.isGetProp());
758:       assertFalse(node1.hasOneChild());
759:       assertFalse(node1.isCase());
760:       assertFalse(node1.isLabel());
761:       assertFalse(node1.isOr());
762:       assertFalse(node1.isReturn());
763:       assertFalse(node1.isTypeOf());
764:       assertFalse(node1.isSwitch());
765:       assertFalse(node1.isLabelName());
766:       assertFalse(node1.isGetElem());
767:       assertFalse(node1.isDelProp());
768:       assertFalse(node1.isArrayLit());
769:       assertFalse(node1.isVar());
770:       assertFalse(node1.isDefaultCase());
771:       assertFalse(node1.isEmpty());
772:       assertFalse(node1.isAdd());
773:       assertFalse(node1.isDo());
774:       assertFalse(node1.isAssignAdd());
775:       assertFalse(node1.isNew());
776:       assertFalse(node1.equals((Object)node0));
777:       
778:       InputId inputId0 = node0.getInputId();
779:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
780:       assertEquals(43, Node.IS_CONSTANT_NAME);
781:       assertEquals(8, Node.FLAG_NO_THROWS);
782:       assertEquals(39, Node.EMPTY_BLOCK);
783:       assertEquals(53, Node.INPUT_ID);
784:       assertEquals(36, Node.QUOTED_PROP);
785:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
786:       assertEquals(55, Node.INFERRED_FUNCTION);
787:       assertEquals(40, Node.ORIGINALNAME_PROP);
788:       assertEquals(50, Node.FREE_CALL);
789:       assertEquals(47, Node.IS_DISPATCHER);
790:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
791:       assertEquals(2, Node.POST_FLAG);
792:       assertEquals(30, Node.VAR_ARGS_NAME);
793:       assertEquals(49, Node.DIRECT_EVAL);
794:       assertEquals(51, Node.STATIC_SOURCE_FILE);
795:       assertEquals(1, Node.DECR_FLAG);
796:       assertEquals(57, Node.LAST_PROP);
797:       assertEquals(32, Node.INCRDECR_PROP);
798:       assertEquals(46, Node.IS_NAMESPACE);
799:       assertEquals(12, Node.COLUMN_BITS);
800:       assertEquals(54, Node.SLASH_V);
801:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
802:       assertEquals(52, Node.LENGTH);
803:       assertEquals(15, Node.NO_SIDE_EFFECTS);
804:       assertEquals(29, Node.JSDOC_INFO_PROP);
805:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
806:       assertEquals(57, Node.REFLECTED_OBJECT);
807:       assertEquals(56, Node.CHANGE_TIME);
808:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
809:       assertEquals(48, Node.DIRECTIVES);
810:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
811:       assertEquals(37, Node.OPT_ARG_NAME);
812:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
813:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
814:       assertEquals(4095, Node.COLUMN_MASK);
815:       assertNull(inputId0);
816:       assertNotSame(node0, node1);
817:       assertFalse(node0.isDo());
818:       assertFalse(node0.isBlock());
819:       assertFalse(node0.isWhile());
820:       assertFalse(node0.isOr());
821:       assertFalse(node0.isNew());
822:       assertFalse(node0.isAdd());
823:       assertFalse(node0.isNumber());
824:       assertFalse(node0.isLabelName());
825:       assertFalse(node0.isStringKey());
826:       assertFalse(node0.isLabel());
827:       assertFalse(node0.isAssignAdd());
828:       assertFalse(node0.isParamList());
829:       assertFalse(node0.isVar());
830:       assertEquals(0, node0.getChildCount());
831:       assertEquals(13, node0.getCharno());
832:       assertFalse(node0.isContinue());
833:       assertFalse(node0.isCast());
834:       assertFalse(node0.isDefaultCase());
835:       assertFalse(node0.isVoid());
836:       assertFalse(node0.isNot());
837:       assertFalse(node0.isDebugger());
838:       assertFalse(node0.isAnd());
839:       assertFalse(node0.isTrue());
840:       assertFalse(node0.isObjectLit());
841:       assertFalse(node0.isGetProp());
842:       assertFalse(node0.isEmpty());
843:       assertFalse(node0.isDec());
844:       assertFalse(node0.isBreak());
845:       assertFalse(node0.hasChildren());
846:       assertFalse(node0.isComma());
847:       assertFalse(node0.isDelProp());
848:       assertFalse(node0.isName());
849:       assertFalse(node0.isAssign());
850:       assertFalse(node0.isTypeOf());
851:       assertFalse(node0.isNull());
852:       assertFalse(node0.isGetElem());
853:       assertFalse(node0.isExprResult());
854:       assertFalse(node0.isCall());
855:       assertFalse(node0.isString());
856:       assertFalse(node0.isSwitch());
857:       assertEquals(4, node0.getType());
858:       assertEquals(26, node0.getLineno());
859:       assertFalse(node0.isIn());
860:       assertFalse(node0.isCase());
861:       assertFalse(node0.isInc());
862:       assertFalse(node0.isGetterDef());
863:       assertFalse(node0.isThrow());
864:       assertFalse(node0.isArrayLit());
865:       assertFalse(node0.isFalse());
866:       assertFalse(node0.isFunction());
867:       assertFalse(node0.isWith());
868:       assertFalse(node0.isRegExp());
869:       assertFalse(node0.hasOneChild());
870:       assertFalse(node0.isTry());
871:       assertFalse(node0.isSetterDef());
872:       assertFalse(node0.isScript());
873:       assertEquals(106509, node0.getSourcePosition());
874:       assertFalse(node0.isIf());
875:       assertFalse(node0.isThis());
876:       assertFalse(node0.isNE());
877:       assertFalse(node0.isFor());
878:       assertFalse(node0.isHook());
879:       assertFalse(node0.isInstanceOf());
880:       assertFalse(node0.hasMoreThanOneChild());
881:       assertTrue(node0.isReturn());
882:       assertFalse(node0.isCatch());
883:       assertFalse(node0.equals((Object)node1));
884:       
885:       node1.detachChildren();
886:       assertEquals(56, Node.CHANGE_TIME);
887:       assertEquals(51, Node.STATIC_SOURCE_FILE);
888:       assertEquals(2, Node.POST_FLAG);
889:       assertEquals(12, Node.COLUMN_BITS);
890:       assertEquals(46, Node.IS_NAMESPACE);
891:       assertEquals(47, Node.IS_DISPATCHER);
892:       assertEquals(30, Node.VAR_ARGS_NAME);
893:       assertEquals(49, Node.DIRECT_EVAL);
894:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
895:       assertEquals(37, Node.OPT_ARG_NAME);
896:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
897:       assertEquals(54, Node.SLASH_V);
898:       assertEquals(43, Node.IS_CONSTANT_NAME);
899:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
900:       assertEquals(1, Node.DECR_FLAG);
901:       assertEquals(50, Node.FREE_CALL);
902:       assertEquals(32, Node.INCRDECR_PROP);
903:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
904:       assertEquals(48, Node.DIRECTIVES);
905:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
906:       assertEquals(8, Node.FLAG_NO_THROWS);
907:       assertEquals(4095, Node.COLUMN_MASK);
908:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
909:       assertEquals(40, Node.ORIGINALNAME_PROP);
910:       assertEquals(53, Node.INPUT_ID);
911:       assertEquals(52, Node.LENGTH);
912:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
913:       assertEquals(36, Node.QUOTED_PROP);
914:       assertEquals(57, Node.REFLECTED_OBJECT);
915:       assertEquals(29, Node.JSDOC_INFO_PROP);
916:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
917:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
918:       assertEquals(57, Node.LAST_PROP);
919:       assertEquals(15, Node.NO_SIDE_EFFECTS);
920:       assertEquals(55, Node.INFERRED_FUNCTION);
921:       assertEquals(39, Node.EMPTY_BLOCK);
922:       assertNotSame(node1, node0);
923:       assertFalse(node1.isCatch());
924:       assertEquals(40, node1.getType());
925:       assertEquals(0, node1.getChildCount());
926:       assertFalse(node1.isRegExp());
927:       assertFalse(node1.isNull());
928:       assertFalse(node1.isFunction());
929:       assertFalse(node1.isTrue());
930:       assertFalse(node1.isParamList());
931:       assertFalse(node1.isName());
932:       assertFalse(node1.isVoid());
933:       assertFalse(node1.isCall());
934:       assertFalse(node1.isStringKey());
935:       assertFalse(node1.isFor());
936:       assertFalse(node1.isBlock());
937:       assertFalse(node1.isDebugger());
938:       assertFalse(node1.isGetterDef());
939:       assertFalse(node1.isWhile());
940:       assertFalse(node1.isTry());
941:       assertTrue(node1.isString());
942:       assertFalse(node1.hasMoreThanOneChild());
943:       assertFalse(node1.isIn());
944:       assertFalse(node1.isContinue());
945:       assertFalse(node1.isNE());
946:       assertFalse(node1.isIf());
947:       assertEquals((-1), node1.getLineno());
948:       assertFalse(node1.isCast());
949:       assertFalse(node1.isThrow());
950:       assertFalse(node1.isFalse());
951:       assertFalse(node1.isSetterDef());
952:       assertFalse(node1.isInc());
953:       assertFalse(node1.isAnd());
954:       assertFalse(node1.isInstanceOf());
955:       assertFalse(node1.isNot());
956:       assertFalse(node1.isWith());
957:       assertFalse(node1.isObjectLit());
958:       assertFalse(node1.isComma());
959:       assertFalse(node1.isExprResult());
960:       assertFalse(node1.isBreak());
961:       assertFalse(node1.isHook());
962:       assertFalse(node1.isAssign());
963:       assertEquals((-1), node1.getCharno());
964:       assertFalse(node1.hasChildren());
965:       assertEquals((-1), node1.getSourcePosition());
966:       assertFalse(node1.isDec());
967:       assertFalse(node1.isScript());
968:       assertFalse(node1.isThis());
969:       assertFalse(node1.isNumber());
970:       assertFalse(node1.isGetProp());
971:       assertFalse(node1.hasOneChild());
972:       assertFalse(node1.isCase());
973:       assertFalse(node1.isLabel());
974:       assertFalse(node1.isOr());
975:       assertFalse(node1.isReturn());
976:       assertFalse(node1.isTypeOf());
977:       assertFalse(node1.isSwitch());
978:       assertFalse(node1.isLabelName());
979:       assertFalse(node1.isGetElem());
980:       assertFalse(node1.isDelProp());
981:       assertFalse(node1.isArrayLit());
982:       assertFalse(node1.isVar());
983:       assertFalse(node1.isDefaultCase());
984:       assertFalse(node1.isEmpty());
985:       assertFalse(node1.isAdd());
986:       assertFalse(node1.isDo());
987:       assertFalse(node1.isAssignAdd());
988:       assertFalse(node1.isNew());
989:       assertFalse(node1.equals((Object)node0));
990:       
991:       node1.detachChildren();
992:       assertEquals(56, Node.CHANGE_TIME);
993:       assertEquals(51, Node.STATIC_SOURCE_FILE);
994:       assertEquals(2, Node.POST_FLAG);
995:       assertEquals(12, Node.COLUMN_BITS);
996:       assertEquals(46, Node.IS_NAMESPACE);
997:       assertEquals(47, Node.IS_DISPATCHER);
998:       assertEquals(30, Node.VAR_ARGS_NAME);
999:       assertEquals(49, Node.DIRECT_EVAL);
1000:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1001:       assertEquals(37, Node.OPT_ARG_NAME);
1002:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1003:       assertEquals(54, Node.SLASH_V);
1004:       assertEquals(43, Node.IS_CONSTANT_NAME);
1005:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1006:       assertEquals(1, Node.DECR_FLAG);
1007:       assertEquals(50, Node.FREE_CALL);
1008:       assertEquals(32, Node.INCRDECR_PROP);
1009:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1010:       assertEquals(48, Node.DIRECTIVES);
1011:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1012:       assertEquals(8, Node.FLAG_NO_THROWS);
1013:       assertEquals(4095, Node.COLUMN_MASK);
1014:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1015:       assertEquals(40, Node.ORIGINALNAME_PROP);
1016:       assertEquals(53, Node.INPUT_ID);
1017:       assertEquals(52, Node.LENGTH);
1018:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1019:       assertEquals(36, Node.QUOTED_PROP);
1020:       assertEquals(57, Node.REFLECTED_OBJECT);
1021:       assertEquals(29, Node.JSDOC_INFO_PROP);
1022:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1023:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1024:       assertEquals(57, Node.LAST_PROP);
1025:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1026:       assertEquals(55, Node.INFERRED_FUNCTION);
1027:       assertEquals(39, Node.EMPTY_BLOCK);
1028:       assertNotSame(node1, node0);
1029:       assertFalse(node1.isCatch());
1030:       assertEquals(40, node1.getType());
1031:       assertEquals(0, node1.getChildCount());
1032:       assertFalse(node1.isRegExp());
1033:       assertFalse(node1.isNull());
1034:       assertFalse(node1.isFunction());
1035:       assertFalse(node1.isTrue());
1036:       assertFalse(node1.isParamList());
1037:       assertFalse(node1.isName());
1038:       assertFalse(node1.isVoid());
1039:       assertFalse(node1.isCall());
1040:       assertFalse(node1.isStringKey());
1041:       assertFalse(node1.isFor());
1042:       assertFalse(node1.isBlock());
1043:       assertFalse(node1.isDebugger());
1044:       assertFalse(node1.isGetterDef());
1045:       assertFalse(node1.isWhile());
1046:       assertFalse(node1.isTry());
1047:       assertTrue(node1.isString());
1048:       assertFalse(node1.hasMoreThanOneChild());
1049:       assertFalse(node1.isIn());
1050:       assertFalse(node1.isContinue());
1051:       assertFalse(node1.isNE());
1052:       assertFalse(node1.isIf());
1053:       assertEquals((-1), node1.getLineno());
1054:       assertFalse(node1.isCast());
1055:       assertFalse(node1.isThrow());
1056:       assertFalse(node1.isFalse());
1057:       assertFalse(node1.isSetterDef());
1058:       assertFalse(node1.isInc());
1059:       assertFalse(node1.isAnd());
1060:       assertFalse(node1.isInstanceOf());
1061:       assertFalse(node1.isNot());
1062:       assertFalse(node1.isWith());
1063:       assertFalse(node1.isObjectLit());
1064:       assertFalse(node1.isComma());
1065:       assertFalse(node1.isExprResult());
1066:       assertFalse(node1.isBreak());
1067:       assertFalse(node1.isHook());
1068:       assertFalse(node1.isAssign());
1069:       assertEquals((-1), node1.getCharno());
1070:       assertFalse(node1.hasChildren());
1071:       assertEquals((-1), node1.getSourcePosition());
1072:       assertFalse(node1.isDec());
1073:       assertFalse(node1.isScript());
1074:       assertFalse(node1.isThis());
1075:       assertFalse(node1.isNumber());
1076:       assertFalse(node1.isGetProp());
1077:       assertFalse(node1.hasOneChild());
1078:       assertFalse(node1.isCase());
1079:       assertFalse(node1.isLabel());
1080:       assertFalse(node1.isOr());
1081:       assertFalse(node1.isReturn());
1082:       assertFalse(node1.isTypeOf());
1083:       assertFalse(node1.isSwitch());
1084:       assertFalse(node1.isLabelName());
1085:       assertFalse(node1.isGetElem());
1086:       assertFalse(node1.isDelProp());
1087:       assertFalse(node1.isArrayLit());
1088:       assertFalse(node1.isVar());
1089:       assertFalse(node1.isDefaultCase());
1090:       assertFalse(node1.isEmpty());
1091:       assertFalse(node1.isAdd());
1092:       assertFalse(node1.isDo());
1093:       assertFalse(node1.isAssignAdd());
1094:       assertFalse(node1.isNew());
1095:       assertFalse(node1.equals((Object)node0));
1096:       
1097:       node0.setInputId((InputId) null);
1098:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1099:       assertEquals(43, Node.IS_CONSTANT_NAME);
1100:       assertEquals(8, Node.FLAG_NO_THROWS);
1101:       assertEquals(39, Node.EMPTY_BLOCK);
1102:       assertEquals(53, Node.INPUT_ID);
1103:       assertEquals(36, Node.QUOTED_PROP);
1104:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1105:       assertEquals(55, Node.INFERRED_FUNCTION);
1106:       assertEquals(40, Node.ORIGINALNAME_PROP);
1107:       assertEquals(50, Node.FREE_CALL);
1108:       assertEquals(47, Node.IS_DISPATCHER);
1109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1110:       assertEquals(2, Node.POST_FLAG);
1111:       assertEquals(30, Node.VAR_ARGS_NAME);
1112:       assertEquals(49, Node.DIRECT_EVAL);
1113:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1114:       assertEquals(1, Node.DECR_FLAG);
1115:       assertEquals(57, Node.LAST_PROP);
1116:       assertEquals(32, Node.INCRDECR_PROP);
1117:       assertEquals(46, Node.IS_NAMESPACE);
1118:       assertEquals(12, Node.COLUMN_BITS);
1119:       assertEquals(54, Node.SLASH_V);
1120:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1121:       assertEquals(52, Node.LENGTH);
1122:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1123:       assertEquals(29, Node.JSDOC_INFO_PROP);
1124:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1125:       assertEquals(57, Node.REFLECTED_OBJECT);
1126:       assertEquals(56, Node.CHANGE_TIME);
1127:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1128:       assertEquals(48, Node.DIRECTIVES);
1129:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1130:       assertEquals(37, Node.OPT_ARG_NAME);
1131:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1132:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1133:       assertEquals(4095, Node.COLUMN_MASK);
1134:       assertNotSame(node0, node1);
1135:       assertFalse(node0.isDo());
1136:       assertFalse(node0.isBlock());
1137:       assertFalse(node0.isWhile());
1138:       assertFalse(node0.isOr());
1139:       assertFalse(node0.isNew());
1140:       assertFalse(node0.isAdd());
1141:       assertFalse(node0.isNumber());
1142:       assertFalse(node0.isLabelName());
1143:       assertFalse(node0.isStringKey());
1144:       assertFalse(node0.isLabel());
1145:       assertFalse(node0.isAssignAdd());
1146:       assertFalse(node0.isParamList());
1147:       assertFalse(node0.isVar());
1148:       assertEquals(0, node0.getChildCount());
1149:       assertEquals(13, node0.getCharno());
1150:       assertFalse(node0.isContinue());
1151:       assertFalse(node0.isCast());
1152:       assertFalse(node0.isDefaultCase());
1153:       assertFalse(node0.isVoid());
1154:       assertFalse(node0.isNot());
1155:       assertFalse(node0.isDebugger());
1156:       assertFalse(node0.isAnd());
1157:       assertFalse(node0.isTrue());
1158:       assertFalse(node0.isObjectLit());
1159:       assertFalse(node0.isGetProp());
1160:       assertFalse(node0.isEmpty());
1161:       assertFalse(node0.isDec());
1162:       assertFalse(node0.isBreak());
1163:       assertFalse(node0.hasChildren());
1164:       assertFalse(node0.isComma());
1165:       assertFalse(node0.isDelProp());
1166:       assertFalse(node0.isName());
1167:       assertFalse(node0.isAssign());
1168:       assertFalse(node0.isTypeOf());
1169:       assertFalse(node0.isNull());
1170:       assertFalse(node0.isGetElem());
1171:       assertFalse(node0.isExprResult());
1172:       assertFalse(node0.isCall());
1173:       assertFalse(node0.isString());
1174:       assertFalse(node0.isSwitch());
1175:       assertEquals(4, node0.getType());
1176:       assertEquals(26, node0.getLineno());
1177:       assertFalse(node0.isIn());
1178:       assertFalse(node0.isCase());
1179:       assertFalse(node0.isInc());
1180:       assertFalse(node0.isGetterDef());
1181:       assertFalse(node0.isThrow());
1182:       assertFalse(node0.isArrayLit());
1183:       assertFalse(node0.isFalse());
1184:       assertFalse(node0.isFunction());
1185:       assertFalse(node0.isWith());
1186:       assertFalse(node0.isRegExp());
1187:       assertFalse(node0.hasOneChild());
1188:       assertFalse(node0.isTry());
1189:       assertFalse(node0.isSetterDef());
1190:       assertFalse(node0.isScript());
1191:       assertEquals(106509, node0.getSourcePosition());
1192:       assertFalse(node0.isIf());
1193:       assertFalse(node0.isThis());
1194:       assertFalse(node0.isNE());
1195:       assertFalse(node0.isFor());
1196:       assertFalse(node0.isHook());
1197:       assertFalse(node0.isInstanceOf());
1198:       assertFalse(node0.hasMoreThanOneChild());
1199:       assertTrue(node0.isReturn());
1200:       assertFalse(node0.isCatch());
1201:       assertFalse(node0.equals((Object)node1));
1202:       
1203:       boolean boolean5 = node1.isEquivalentTo(node0);
1204:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1205:       assertEquals(43, Node.IS_CONSTANT_NAME);
1206:       assertEquals(8, Node.FLAG_NO_THROWS);
1207:       assertEquals(39, Node.EMPTY_BLOCK);
1208:       assertEquals(53, Node.INPUT_ID);
1209:       assertEquals(36, Node.QUOTED_PROP);
1210:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1211:       assertEquals(55, Node.INFERRED_FUNCTION);
1212:       assertEquals(40, Node.ORIGINALNAME_PROP);
1213:       assertEquals(50, Node.FREE_CALL);
1214:       assertEquals(47, Node.IS_DISPATCHER);
1215:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1216:       assertEquals(2, Node.POST_FLAG);
1217:       assertEquals(30, Node.VAR_ARGS_NAME);
1218:       assertEquals(49, Node.DIRECT_EVAL);
1219:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1220:       assertEquals(1, Node.DECR_FLAG);
1221:       assertEquals(57, Node.LAST_PROP);
1222:       assertEquals(32, Node.INCRDECR_PROP);
1223:       assertEquals(46, Node.IS_NAMESPACE);
1224:       assertEquals(12, Node.COLUMN_BITS);
1225:       assertEquals(54, Node.SLASH_V);
1226:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1227:       assertEquals(52, Node.LENGTH);
1228:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1229:       assertEquals(29, Node.JSDOC_INFO_PROP);
1230:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1231:       assertEquals(57, Node.REFLECTED_OBJECT);
1232:       assertEquals(56, Node.CHANGE_TIME);
1233:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1234:       assertEquals(48, Node.DIRECTIVES);
1235:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1236:       assertEquals(37, Node.OPT_ARG_NAME);
1237:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1238:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1239:       assertEquals(4095, Node.COLUMN_MASK);
1240:       assertEquals(56, Node.CHANGE_TIME);
1241:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1242:       assertEquals(2, Node.POST_FLAG);
1243:       assertEquals(12, Node.COLUMN_BITS);
1244:       assertEquals(46, Node.IS_NAMESPACE);
1245:       assertEquals(47, Node.IS_DISPATCHER);
1246:       assertEquals(30, Node.VAR_ARGS_NAME);
1247:       assertEquals(49, Node.DIRECT_EVAL);
1248:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1249:       assertEquals(37, Node.OPT_ARG_NAME);
1250:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1251:       assertEquals(54, Node.SLASH_V);
1252:       assertEquals(43, Node.IS_CONSTANT_NAME);
1253:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1254:       assertEquals(1, Node.DECR_FLAG);
1255:       assertEquals(50, Node.FREE_CALL);
1256:       assertEquals(32, Node.INCRDECR_PROP);
1257:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1258:       assertEquals(48, Node.DIRECTIVES);
1259:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1260:       assertEquals(8, Node.FLAG_NO_THROWS);
1261:       assertEquals(4095, Node.COLUMN_MASK);
1262:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1263:       assertEquals(40, Node.ORIGINALNAME_PROP);
1264:       assertEquals(53, Node.INPUT_ID);
1265:       assertEquals(52, Node.LENGTH);
1266:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1267:       assertEquals(36, Node.QUOTED_PROP);
1268:       assertEquals(57, Node.REFLECTED_OBJECT);
1269:       assertEquals(29, Node.JSDOC_INFO_PROP);
1270:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1271:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1272:       assertEquals(57, Node.LAST_PROP);
1273:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1274:       assertEquals(55, Node.INFERRED_FUNCTION);
1275:       assertEquals(39, Node.EMPTY_BLOCK);
1276:       assertFalse(boolean5);
1277:       assertNotSame(node0, node1);
1278:       assertNotSame(node1, node0);
1279:       assertFalse(node0.isDo());
1280:       assertFalse(node0.isBlock());
1281:       assertFalse(node0.isWhile());
1282:       assertFalse(node0.isOr());
1283:       assertFalse(node0.isNew());
1284:       assertFalse(node0.isAdd());
1285:       assertFalse(node0.isNumber());
1286:       assertFalse(node0.isLabelName());
1287:       assertFalse(node0.isStringKey());
1288:       assertFalse(node0.isLabel());
1289:       assertFalse(node0.isAssignAdd());
1290:       assertFalse(node0.isParamList());
1291:       assertFalse(node0.isVar());
1292:       assertEquals(0, node0.getChildCount());
1293:       assertEquals(13, node0.getCharno());
1294:       assertFalse(node0.isContinue());
1295:       assertFalse(node0.isCast());
1296:       assertFalse(node0.isDefaultCase());
1297:       assertFalse(node0.isVoid());
1298:       assertFalse(node0.isNot());
1299:       assertFalse(node0.isDebugger());
1300:       assertFalse(node0.isAnd());
1301:       assertFalse(node0.isTrue());
1302:       assertFalse(node0.isObjectLit());
1303:       assertFalse(node0.isGetProp());
1304:       assertFalse(node0.isEmpty());
1305:       assertFalse(node0.isDec());
1306:       assertFalse(node0.isBreak());
1307:       assertFalse(node0.hasChildren());
1308:       assertFalse(node0.isComma());
1309:       assertFalse(node0.isDelProp());
1310:       assertFalse(node0.isName());
1311:       assertFalse(node0.isAssign());
1312:       assertFalse(node0.isTypeOf());
1313:       assertFalse(node0.isNull());
1314:       assertFalse(node0.isGetElem());
1315:       assertFalse(node0.isExprResult());
1316:       assertFalse(node0.isCall());
1317:       assertFalse(node0.isString());
1318:       assertFalse(node0.isSwitch());
1319:       assertEquals(4, node0.getType());
1320:       assertEquals(26, node0.getLineno());
1321:       assertFalse(node0.isIn());
1322:       assertFalse(node0.isCase());
1323:       assertFalse(node0.isInc());
1324:       assertFalse(node0.isGetterDef());
1325:       assertFalse(node0.isThrow());
1326:       assertFalse(node0.isArrayLit());
1327:       assertFalse(node0.isFalse());
1328:       assertFalse(node0.isFunction());
1329:       assertFalse(node0.isWith());
1330:       assertFalse(node0.isRegExp());
1331:       assertFalse(node0.hasOneChild());
1332:       assertFalse(node0.isTry());
1333:       assertFalse(node0.isSetterDef());
1334:       assertFalse(node0.isScript());
1335:       assertEquals(106509, node0.getSourcePosition());
1336:       assertFalse(node0.isIf());
1337:       assertFalse(node0.isThis());
1338:       assertFalse(node0.isNE());
1339:       assertFalse(node0.isFor());
1340:       assertFalse(node0.isHook());
1341:       assertFalse(node0.isInstanceOf());
1342:       assertFalse(node0.hasMoreThanOneChild());
1343:       assertTrue(node0.isReturn());
1344:       assertFalse(node0.isCatch());
1345:       assertFalse(node1.isCatch());
1346:       assertEquals(40, node1.getType());
1347:       assertEquals(0, node1.getChildCount());
1348:       assertFalse(node1.isRegExp());
1349:       assertFalse(node1.isNull());
1350:       assertFalse(node1.isFunction());
1351:       assertFalse(node1.isTrue());
1352:       assertFalse(node1.isParamList());
1353:       assertFalse(node1.isName());
1354:       assertFalse(node1.isVoid());
1355:       assertFalse(node1.isCall());
1356:       assertFalse(node1.isStringKey());
1357:       assertFalse(node1.isFor());
1358:       assertFalse(node1.isBlock());
1359:       assertFalse(node1.isDebugger());
1360:       assertFalse(node1.isGetterDef());
1361:       assertFalse(node1.isWhile());
1362:       assertFalse(node1.isTry());
1363:       assertTrue(node1.isString());
1364:       assertFalse(node1.hasMoreThanOneChild());
1365:       assertFalse(node1.isIn());
1366:       assertFalse(node1.isContinue());
1367:       assertFalse(node1.isNE());
1368:       assertFalse(node1.isIf());
1369:       assertEquals((-1), node1.getLineno());
1370:       assertFalse(node1.isCast());
1371:       assertFalse(node1.isThrow());
1372:       assertFalse(node1.isFalse());
1373:       assertFalse(node1.isSetterDef());
1374:       assertFalse(node1.isInc());
1375:       assertFalse(node1.isAnd());
1376:       assertFalse(node1.isInstanceOf());
1377:       assertFalse(node1.isNot());
1378:       assertFalse(node1.isWith());
1379:       assertFalse(node1.isObjectLit());
1380:       assertFalse(node1.isComma());
1381:       assertFalse(node1.isExprResult());
1382:       assertFalse(node1.isBreak());
1383:       assertFalse(node1.isHook());
1384:       assertFalse(node1.isAssign());
1385:       assertEquals((-1), node1.getCharno());
1386:       assertFalse(node1.hasChildren());
1387:       assertEquals((-1), node1.getSourcePosition());
1388:       assertFalse(node1.isDec());
1389:       assertFalse(node1.isScript());
1390:       assertFalse(node1.isThis());
1391:       assertFalse(node1.isNumber());
1392:       assertFalse(node1.isGetProp());
1393:       assertFalse(node1.hasOneChild());
1394:       assertFalse(node1.isCase());
1395:       assertFalse(node1.isLabel());
1396:       assertFalse(node1.isOr());
1397:       assertFalse(node1.isReturn());
1398:       assertFalse(node1.isTypeOf());
1399:       assertFalse(node1.isSwitch());
1400:       assertFalse(node1.isLabelName());
1401:       assertFalse(node1.isGetElem());
1402:       assertFalse(node1.isDelProp());
1403:       assertFalse(node1.isArrayLit());
1404:       assertFalse(node1.isVar());
1405:       assertFalse(node1.isDefaultCase());
1406:       assertFalse(node1.isEmpty());
1407:       assertFalse(node1.isAdd());
1408:       assertFalse(node1.isDo());
1409:       assertFalse(node1.isAssignAdd());
1410:       assertFalse(node1.isNew());
1411:       assertFalse(node0.equals((Object)node1));
1412:       assertFalse(node1.equals((Object)node0));
1413:       assertTrue(boolean5 == boolean3);
1414:       assertTrue(boolean5 == boolean2);
1415:       assertTrue(boolean5 == boolean1);
1416:       assertTrue(boolean5 == boolean4);
1417:       assertTrue(boolean5 == boolean0);
1418:       
1419:       boolean boolean6 = node1.isObjectLit();
1420:       assertEquals(56, Node.CHANGE_TIME);
1421:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1422:       assertEquals(2, Node.POST_FLAG);
1423:       assertEquals(12, Node.COLUMN_BITS);
1424:       assertEquals(46, Node.IS_NAMESPACE);
1425:       assertEquals(47, Node.IS_DISPATCHER);
1426:       assertEquals(30, Node.VAR_ARGS_NAME);
1427:       assertEquals(49, Node.DIRECT_EVAL);
1428:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1429:       assertEquals(37, Node.OPT_ARG_NAME);
1430:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1431:       assertEquals(54, Node.SLASH_V);
1432:       assertEquals(43, Node.IS_CONSTANT_NAME);
1433:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1434:       assertEquals(1, Node.DECR_FLAG);
1435:       assertEquals(50, Node.FREE_CALL);
1436:       assertEquals(32, Node.INCRDECR_PROP);
1437:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1438:       assertEquals(48, Node.DIRECTIVES);
1439:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1440:       assertEquals(8, Node.FLAG_NO_THROWS);
1441:       assertEquals(4095, Node.COLUMN_MASK);
1442:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1443:       assertEquals(40, Node.ORIGINALNAME_PROP);
1444:       assertEquals(53, Node.INPUT_ID);
1445:       assertEquals(52, Node.LENGTH);
1446:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1447:       assertEquals(36, Node.QUOTED_PROP);
1448:       assertEquals(57, Node.REFLECTED_OBJECT);
1449:       assertEquals(29, Node.JSDOC_INFO_PROP);
1450:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1451:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1452:       assertEquals(57, Node.LAST_PROP);
1453:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1454:       assertEquals(55, Node.INFERRED_FUNCTION);
1455:       assertEquals(39, Node.EMPTY_BLOCK);
1456:       assertFalse(boolean6);
1457:       assertNotSame(node1, node0);
1458:       assertFalse(node1.isCatch());
1459:       assertEquals(40, node1.getType());
1460:       assertEquals(0, node1.getChildCount());
1461:       assertFalse(node1.isRegExp());
1462:       assertFalse(node1.isNull());
1463:       assertFalse(node1.isFunction());
1464:       assertFalse(node1.isTrue());
1465:       assertFalse(node1.isParamList());
1466:       assertFalse(node1.isName());
1467:       assertFalse(node1.isVoid());
1468:       assertFalse(node1.isCall());
1469:       assertFalse(node1.isStringKey());
1470:       assertFalse(node1.isFor());
1471:       assertFalse(node1.isBlock());
1472:       assertFalse(node1.isDebugger());
1473:       assertFalse(node1.isGetterDef());
1474:       assertFalse(node1.isWhile());
1475:       assertFalse(node1.isTry());
1476:       assertTrue(node1.isString());
1477:       assertFalse(node1.hasMoreThanOneChild());
1478:       assertFalse(node1.isIn());
1479:       assertFalse(node1.isContinue());
1480:       assertFalse(node1.isNE());
1481:       assertFalse(node1.isIf());
1482:       assertEquals((-1), node1.getLineno());
1483:       assertFalse(node1.isCast());
1484:       assertFalse(node1.isThrow());
1485:       assertFalse(node1.isFalse());
1486:       assertFalse(node1.isSetterDef());
1487:       assertFalse(node1.isInc());
1488:       assertFalse(node1.isAnd());
1489:       assertFalse(node1.isInstanceOf());
1490:       assertFalse(node1.isNot());
1491:       assertFalse(node1.isWith());
1492:       assertFalse(node1.isObjectLit());
1493:       assertFalse(node1.isComma());
1494:       assertFalse(node1.isExprResult());
1495:       assertFalse(node1.isBreak());
1496:       assertFalse(node1.isHook());
1497:       assertFalse(node1.isAssign());
1498:       assertEquals((-1), node1.getCharno());
1499:       assertFalse(node1.hasChildren());
1500:       assertEquals((-1), node1.getSourcePosition());
1501:       assertFalse(node1.isDec());
1502:       assertFalse(node1.isScript());
1503:       assertFalse(node1.isThis());
1504:       assertFalse(node1.isNumber());
1505:       assertFalse(node1.isGetProp());
1506:       assertFalse(node1.hasOneChild());
1507:       assertFalse(node1.isCase());
1508:       assertFalse(node1.isLabel());
1509:       assertFalse(node1.isOr());
1510:       assertFalse(node1.isReturn());
1511:       assertFalse(node1.isTypeOf());
1512:       assertFalse(node1.isSwitch());
1513:       assertFalse(node1.isLabelName());
1514:       assertFalse(node1.isGetElem());
1515:       assertFalse(node1.isDelProp());
1516:       assertFalse(node1.isArrayLit());
1517:       assertFalse(node1.isVar());
1518:       assertFalse(node1.isDefaultCase());
1519:       assertFalse(node1.isEmpty());
1520:       assertFalse(node1.isAdd());
1521:       assertFalse(node1.isDo());
1522:       assertFalse(node1.isAssignAdd());
1523:       assertFalse(node1.isNew());
1524:       assertFalse(node1.equals((Object)node0));
1525:       assertTrue(boolean6 == boolean1);
1526:       assertTrue(boolean6 == boolean4);
1527:       assertTrue(boolean6 == boolean3);
1528:       assertTrue(boolean6 == boolean5);
1529:       assertTrue(boolean6 == boolean0);
1530:       assertTrue(boolean6 == boolean2);
1531:       
1532:       Node node2 = node1.getParent();
1533:       assertEquals(56, Node.CHANGE_TIME);
1534:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1535:       assertEquals(2, Node.POST_FLAG);
1536:       assertEquals(12, Node.COLUMN_BITS);
1537:       assertEquals(46, Node.IS_NAMESPACE);
1538:       assertEquals(47, Node.IS_DISPATCHER);
1539:       assertEquals(30, Node.VAR_ARGS_NAME);
1540:       assertEquals(49, Node.DIRECT_EVAL);
1541:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1542:       assertEquals(37, Node.OPT_ARG_NAME);
1543:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1544:       assertEquals(54, Node.SLASH_V);
1545:       assertEquals(43, Node.IS_CONSTANT_NAME);
1546:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1547:       assertEquals(1, Node.DECR_FLAG);
1548:       assertEquals(50, Node.FREE_CALL);
1549:       assertEquals(32, Node.INCRDECR_PROP);
1550:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1551:       assertEquals(48, Node.DIRECTIVES);
1552:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1553:       assertEquals(8, Node.FLAG_NO_THROWS);
1554:       assertEquals(4095, Node.COLUMN_MASK);
1555:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1556:       assertEquals(40, Node.ORIGINALNAME_PROP);
1557:       assertEquals(53, Node.INPUT_ID);
1558:       assertEquals(52, Node.LENGTH);
1559:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1560:       assertEquals(36, Node.QUOTED_PROP);
1561:       assertEquals(57, Node.REFLECTED_OBJECT);
1562:       assertEquals(29, Node.JSDOC_INFO_PROP);
1563:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1564:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1565:       assertEquals(57, Node.LAST_PROP);
1566:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1567:       assertEquals(55, Node.INFERRED_FUNCTION);
1568:       assertEquals(39, Node.EMPTY_BLOCK);
1569:       assertNull(node2);
1570:       assertNotSame(node1, node0);
1571:       assertFalse(node1.isCatch());
1572:       assertEquals(40, node1.getType());
1573:       assertEquals(0, node1.getChildCount());
1574:       assertFalse(node1.isRegExp());
1575:       assertFalse(node1.isNull());
1576:       assertFalse(node1.isFunction());
1577:       assertFalse(node1.isTrue());
1578:       assertFalse(node1.isParamList());
1579:       assertFalse(node1.isName());
1580:       assertFalse(node1.isVoid());
1581:       assertFalse(node1.isCall());
1582:       assertFalse(node1.isStringKey());
1583:       assertFalse(node1.isFor());
1584:       assertFalse(node1.isBlock());
1585:       assertFalse(node1.isDebugger());
1586:       assertFalse(node1.isGetterDef());
1587:       assertFalse(node1.isWhile());
1588:       assertFalse(node1.isTry());
1589:       assertTrue(node1.isString());
1590:       assertFalse(node1.hasMoreThanOneChild());
1591:       assertFalse(node1.isIn());
1592:       assertFalse(node1.isContinue());
1593:       assertFalse(node1.isNE());
1594:       assertFalse(node1.isIf());
1595:       assertEquals((-1), node1.getLineno());
1596:       assertFalse(node1.isCast());
1597:       assertFalse(node1.isThrow());
1598:       assertFalse(node1.isFalse());
1599:       assertFalse(node1.isSetterDef());
1600:       assertFalse(node1.isInc());
1601:       assertFalse(node1.isAnd());
1602:       assertFalse(node1.isInstanceOf());
1603:       assertFalse(node1.isNot());
1604:       assertFalse(node1.isWith());
1605:       assertFalse(node1.isObjectLit());
1606:       assertFalse(node1.isComma());
1607:       assertFalse(node1.isExprResult());
1608:       assertFalse(node1.isBreak());
1609:       assertFalse(node1.isHook());
1610:       assertFalse(node1.isAssign());
1611:       assertEquals((-1), node1.getCharno());
1612:       assertFalse(node1.hasChildren());
1613:       assertEquals((-1), node1.getSourcePosition());
1614:       assertFalse(node1.isDec());
1615:       assertFalse(node1.isScript());
1616:       assertFalse(node1.isThis());
1617:       assertFalse(node1.isNumber());
1618:       assertFalse(node1.isGetProp());
1619:       assertFalse(node1.hasOneChild());
1620:       assertFalse(node1.isCase());
1621:       assertFalse(node1.isLabel());
1622:       assertFalse(node1.isOr());
1623:       assertFalse(node1.isReturn());
1624:       assertFalse(node1.isTypeOf());
1625:       assertFalse(node1.isSwitch());
1626:       assertFalse(node1.isLabelName());
1627:       assertFalse(node1.isGetElem());
1628:       assertFalse(node1.isDelProp());
1629:       assertFalse(node1.isArrayLit());
1630:       assertFalse(node1.isVar());
1631:       assertFalse(node1.isDefaultCase());
1632:       assertFalse(node1.isEmpty());
1633:       assertFalse(node1.isAdd());
1634:       assertFalse(node1.isDo());
1635:       assertFalse(node1.isAssignAdd());
1636:       assertFalse(node1.isNew());
1637:       assertFalse(node1.equals((Object)node0));
1638:       
1639:       String string0 = node0.getQualifiedName();
1640:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1641:       assertEquals(43, Node.IS_CONSTANT_NAME);
1642:       assertEquals(8, Node.FLAG_NO_THROWS);
1643:       assertEquals(39, Node.EMPTY_BLOCK);
1644:       assertEquals(53, Node.INPUT_ID);
1645:       assertEquals(36, Node.QUOTED_PROP);
1646:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1647:       assertEquals(55, Node.INFERRED_FUNCTION);
1648:       assertEquals(40, Node.ORIGINALNAME_PROP);
1649:       assertEquals(50, Node.FREE_CALL);
1650:       assertEquals(47, Node.IS_DISPATCHER);
1651:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1652:       assertEquals(2, Node.POST_FLAG);
1653:       assertEquals(30, Node.VAR_ARGS_NAME);
1654:       assertEquals(49, Node.DIRECT_EVAL);
1655:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1656:       assertEquals(1, Node.DECR_FLAG);
1657:       assertEquals(57, Node.LAST_PROP);
1658:       assertEquals(32, Node.INCRDECR_PROP);
1659:       assertEquals(46, Node.IS_NAMESPACE);
1660:       assertEquals(12, Node.COLUMN_BITS);
1661:       assertEquals(54, Node.SLASH_V);
1662:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1663:       assertEquals(52, Node.LENGTH);
1664:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1665:       assertEquals(29, Node.JSDOC_INFO_PROP);
1666:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1667:       assertEquals(57, Node.REFLECTED_OBJECT);
1668:       assertEquals(56, Node.CHANGE_TIME);
1669:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1670:       assertEquals(48, Node.DIRECTIVES);
1671:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1672:       assertEquals(37, Node.OPT_ARG_NAME);
1673:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1674:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1675:       assertEquals(4095, Node.COLUMN_MASK);
1676:       assertNull(string0);
1677:       assertNotSame(node0, node1);
1678:       assertFalse(node0.isDo());
1679:       assertFalse(node0.isBlock());
1680:       assertFalse(node0.isWhile());
1681:       assertFalse(node0.isOr());
1682:       assertFalse(node0.isNew());
1683:       assertFalse(node0.isAdd());
1684:       assertFalse(node0.isNumber());
1685:       assertFalse(node0.isLabelName());
1686:       assertFalse(node0.isStringKey());
1687:       assertFalse(node0.isLabel());
1688:       assertFalse(node0.isAssignAdd());
1689:       assertFalse(node0.isParamList());
1690:       assertFalse(node0.isVar());
1691:       assertEquals(0, node0.getChildCount());
1692:       assertEquals(13, node0.getCharno());
1693:       assertFalse(node0.isContinue());
1694:       assertFalse(node0.isCast());
1695:       assertFalse(node0.isDefaultCase());
1696:       assertFalse(node0.isVoid());
1697:       assertFalse(node0.isNot());
1698:       assertFalse(node0.isDebugger());
1699:       assertFalse(node0.isAnd());
1700:       assertFalse(node0.isTrue());
1701:       assertFalse(node0.isObjectLit());
1702:       assertFalse(node0.isGetProp());
1703:       assertFalse(node0.isEmpty());
1704:       assertFalse(node0.isDec());
1705:       assertFalse(node0.isBreak());
1706:       assertFalse(node0.hasChildren());
1707:       assertFalse(node0.isComma());
1708:       assertFalse(node0.isDelProp());
1709:       assertFalse(node0.isName());
1710:       assertFalse(node0.isAssign());
1711:       assertFalse(node0.isTypeOf());
1712:       assertFalse(node0.isNull());
1713:       assertFalse(node0.isGetElem());
1714:       assertFalse(node0.isExprResult());
1715:       assertFalse(node0.isCall());
1716:       assertFalse(node0.isString());
1717:       assertFalse(node0.isSwitch());
1718:       assertEquals(4, node0.getType());
1719:       assertEquals(26, node0.getLineno());
1720:       assertFalse(node0.isIn());
1721:       assertFalse(node0.isCase());
1722:       assertFalse(node0.isInc());
1723:       assertFalse(node0.isGetterDef());
1724:       assertFalse(node0.isThrow());
1725:       assertFalse(node0.isArrayLit());
1726:       assertFalse(node0.isFalse());
1727:       assertFalse(node0.isFunction());
1728:       assertFalse(node0.isWith());
1729:       assertFalse(node0.isRegExp());
1730:       assertFalse(node0.hasOneChild());
1731:       assertFalse(node0.isTry());
1732:       assertFalse(node0.isSetterDef());
1733:       assertFalse(node0.isScript());
1734:       assertEquals(106509, node0.getSourcePosition());
1735:       assertFalse(node0.isIf());
1736:       assertFalse(node0.isThis());
1737:       assertFalse(node0.isNE());
1738:       assertFalse(node0.isFor());
1739:       assertFalse(node0.isHook());
1740:       assertFalse(node0.isInstanceOf());
1741:       assertFalse(node0.hasMoreThanOneChild());
1742:       assertTrue(node0.isReturn());
1743:       assertFalse(node0.isCatch());
1744:       assertFalse(node0.equals((Object)node1));
1745:       
1746:       boolean boolean7 = node1.isAnd();
1747:       assertEquals(56, Node.CHANGE_TIME);
1748:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1749:       assertEquals(2, Node.POST_FLAG);
1750:       assertEquals(12, Node.COLUMN_BITS);
1751:       assertEquals(46, Node.IS_NAMESPACE);
1752:       assertEquals(47, Node.IS_DISPATCHER);
1753:       assertEquals(30, Node.VAR_ARGS_NAME);
1754:       assertEquals(49, Node.DIRECT_EVAL);
1755:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1756:       assertEquals(37, Node.OPT_ARG_NAME);
1757:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1758:       assertEquals(54, Node.SLASH_V);
1759:       assertEquals(43, Node.IS_CONSTANT_NAME);
1760:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1761:       assertEquals(1, Node.DECR_FLAG);
1762:       assertEquals(50, Node.FREE_CALL);
1763:       assertEquals(32, Node.INCRDECR_PROP);
1764:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1765:       assertEquals(48, Node.DIRECTIVES);
1766:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1767:       assertEquals(8, Node.FLAG_NO_THROWS);
1768:       assertEquals(4095, Node.COLUMN_MASK);
1769:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1770:       assertEquals(40, Node.ORIGINALNAME_PROP);
1771:       assertEquals(53, Node.INPUT_ID);
1772:       assertEquals(52, Node.LENGTH);
1773:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1774:       assertEquals(36, Node.QUOTED_PROP);
1775:       assertEquals(57, Node.REFLECTED_OBJECT);
1776:       assertEquals(29, Node.JSDOC_INFO_PROP);
1777:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1778:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1779:       assertEquals(57, Node.LAST_PROP);
1780:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1781:       assertEquals(55, Node.INFERRED_FUNCTION);
1782:       assertEquals(39, Node.EMPTY_BLOCK);
1783:       assertFalse(boolean7);
1784:       assertNotSame(node1, node0);
1785:       assertFalse(node1.isCatch());
1786:       assertEquals(40, node1.getType());
1787:       assertEquals(0, node1.getChildCount());
1788:       assertFalse(node1.isRegExp());
1789:       assertFalse(node1.isNull());
1790:       assertFalse(node1.isFunction());
1791:       assertFalse(node1.isTrue());
1792:       assertFalse(node1.isParamList());
1793:       assertFalse(node1.isName());
1794:       assertFalse(node1.isVoid());
1795:       assertFalse(node1.isCall());
1796:       assertFalse(node1.isStringKey());
1797:       assertFalse(node1.isFor());
1798:       assertFalse(node1.isBlock());
1799:       assertFalse(node1.isDebugger());
1800:       assertFalse(node1.isGetterDef());
1801:       assertFalse(node1.isWhile());
1802:       assertFalse(node1.isTry());
1803:       assertTrue(node1.isString());
1804:       assertFalse(node1.hasMoreThanOneChild());
1805:       assertFalse(node1.isIn());
1806:       assertFalse(node1.isContinue());
1807:       assertFalse(node1.isNE());
1808:       assertFalse(node1.isIf());
1809:       assertEquals((-1), node1.getLineno());
1810:       assertFalse(node1.isCast());
1811:       assertFalse(node1.isThrow());
1812:       assertFalse(node1.isFalse());
1813:       assertFalse(node1.isSetterDef());
1814:       assertFalse(node1.isInc());
1815:       assertFalse(node1.isAnd());
1816:       assertFalse(node1.isInstanceOf());
1817:       assertFalse(node1.isNot());
1818:       assertFalse(node1.isWith());
1819:       assertFalse(node1.isObjectLit());
1820:       assertFalse(node1.isComma());
1821:       assertFalse(node1.isExprResult());
1822:       assertFalse(node1.isBreak());
1823:       assertFalse(node1.isHook());
1824:       assertFalse(node1.isAssign());
1825:       assertEquals((-1), node1.getCharno());
1826:       assertFalse(node1.hasChildren());
1827:       assertEquals((-1), node1.getSourcePosition());
1828:       assertFalse(node1.isDec());
1829:       assertFalse(node1.isScript());
1830:       assertFalse(node1.isThis());
1831:       assertFalse(node1.isNumber());
1832:       assertFalse(node1.isGetProp());
1833:       assertFalse(node1.hasOneChild());
1834:       assertFalse(node1.isCase());
1835:       assertFalse(node1.isLabel());
1836:       assertFalse(node1.isOr());
1837:       assertFalse(node1.isReturn());
1838:       assertFalse(node1.isTypeOf());
1839:       assertFalse(node1.isSwitch());
1840:       assertFalse(node1.isLabelName());
1841:       assertFalse(node1.isGetElem());
1842:       assertFalse(node1.isDelProp());
1843:       assertFalse(node1.isArrayLit());
1844:       assertFalse(node1.isVar());
1845:       assertFalse(node1.isDefaultCase());
1846:       assertFalse(node1.isEmpty());
1847:       assertFalse(node1.isAdd());
1848:       assertFalse(node1.isDo());
1849:       assertFalse(node1.isAssignAdd());
1850:       assertFalse(node1.isNew());
1851:       assertTrue(boolean7 == boolean1);
1852:       assertTrue(boolean7 == boolean6);
1853:       assertTrue(boolean7 == boolean2);
1854:       assertTrue(boolean7 == boolean5);
1855:       assertTrue(boolean7 == boolean4);
1856:       assertTrue(boolean7 == boolean3);
1857:       assertTrue(boolean7 == boolean0);
1858:       assertFalse(node1.equals((Object)node0));
1859:   }
1860: }
RegularFileObject[/tmp/EvoSuite_63_1629222874101/com/google/javascript/rhino/Node_63_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:34 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_63_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_63_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.common.collect.RegularImmutableSet",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.common.collect.SingletonImmutableSet",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.javascript.rhino.JSDocInfo$1",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.EmptyImmutableSet",
224:       "com.google.common.collect.Maps$ImprovedAbstractMap",
225:       "com.google.common.collect.ImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
227:       "com.google.common.collect.ImmutableList",
228:       "com.google.common.collect.SingletonImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
230:       "com.google.javascript.rhino.jstype.StringType",
231:       "com.google.javascript.rhino.Node$AbstractPropListItem",
232:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
233:       "com.google.javascript.rhino.jstype.TemplatizedType",
234:       "com.google.javascript.rhino.jstype.Visitor",
235:       "com.google.javascript.rhino.jstype.NoResolvedType",
236:       "com.google.javascript.rhino.jstype.JSTypeNative",
237:       "com.google.javascript.rhino.jstype.AllType",
238:       "com.google.common.collect.Maps",
239:       "com.google.common.collect.SetMultimap",
240:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
241:       "com.google.common.collect.Maps$EntryTransformer",
242:       "com.google.javascript.rhino.JSTypeExpression",
243:       "com.google.common.collect.Iterators$MergingIterator"
244:     );
245:   } 
246: 
247:   private static void resetClasses() {
248:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_63_tmp__ESTest_scaffolding.class.getClassLoader()); 
249: 
250:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
251:       "com.google.javascript.rhino.Node",
252:       "com.google.javascript.rhino.Node$NumberNode",
253:       "com.google.javascript.rhino.Node$StringNode",
254:       "com.google.javascript.rhino.Node$AbstractPropListItem",
255:       "com.google.javascript.rhino.Node$ObjectPropListItem",
256:       "com.google.javascript.rhino.Node$IntPropListItem",
257:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
258:       "com.google.javascript.rhino.Node$AncestorIterable",
259:       "com.google.javascript.rhino.Node$NodeMismatch",
260:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
261:       "com.google.javascript.rhino.Node$SideEffectFlags",
262:       "com.google.javascript.rhino.Token",
263:       "com.google.common.base.Preconditions",
264:       "com.google.javascript.rhino.SimpleErrorReporter",
265:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
266:       "com.google.common.base.Joiner",
267:       "com.google.common.base.Joiner$1",
268:       "com.google.common.collect.Collections2",
269:       "com.google.common.base.Joiner$MapJoiner",
270:       "com.google.common.collect.Maps",
271:       "com.google.common.collect.AbstractMultimap",
272:       "com.google.common.collect.AbstractMapBasedMultimap",
273:       "com.google.common.collect.AbstractSetMultimap",
274:       "com.google.common.collect.LinkedHashMultimap",
275:       "com.google.common.collect.AbstractMapEntry",
276:       "com.google.common.collect.ImmutableEntry",
277:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
278:       "com.google.common.collect.AbstractListMultimap",
279:       "com.google.common.collect.ArrayListMultimap",
280:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
281:       "com.google.common.collect.ImmutableCollection",
282:       "com.google.common.collect.RegularImmutableList",
283:       "com.google.common.collect.ObjectArrays",
284:       "com.google.common.collect.ImmutableList",
285:       "com.google.javascript.rhino.jstype.ModificationVisitor",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
287:       "com.google.common.collect.ImmutableCollection$Builder",
288:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
289:       "com.google.common.collect.ImmutableList$Builder",
290:       "com.google.common.collect.UnmodifiableIterator",
291:       "com.google.common.collect.UnmodifiableListIterator",
292:       "com.google.common.collect.Iterators$1",
293:       "com.google.common.collect.Iterators$2",
294:       "com.google.common.collect.Iterators",
295:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
296:       "com.google.javascript.rhino.jstype.JSType$1",
297:       "com.google.javascript.rhino.jstype.JSType",
298:       "com.google.javascript.rhino.jstype.ObjectType",
299:       "com.google.javascript.rhino.jstype.ProxyObjectType",
300:       "com.google.javascript.rhino.jstype.TemplateType",
301:       "com.google.javascript.rhino.jstype.ValueType",
302:       "com.google.javascript.rhino.jstype.BooleanType",
303:       "com.google.javascript.rhino.jstype.NullType",
304:       "com.google.javascript.rhino.jstype.NumberType",
305:       "com.google.javascript.rhino.jstype.StringType",
306:       "com.google.javascript.rhino.jstype.UnknownType",
307:       "com.google.javascript.rhino.jstype.VoidType",
308:       "com.google.javascript.rhino.jstype.AllType",
309:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
310:       "com.google.common.collect.ImmutableMap",
311:       "com.google.common.collect.ImmutableBiMap",
312:       "com.google.common.collect.EmptyImmutableBiMap",
313:       "com.google.javascript.rhino.jstype.PropertyMap$1",
314:       "com.google.javascript.rhino.jstype.PropertyMap",
315:       "com.google.javascript.rhino.jstype.FunctionType",
316:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.collect.AbstractIndexedListIterator",
338:       "com.google.common.collect.Iterators$11",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.Iterables",
348:       "com.google.javascript.rhino.jstype.TernaryValue",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.javascript.rhino.Node$AncestorIterable$1",
351:       "com.google.javascript.rhino.jstype.NamedType",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.javascript.rhino.jstype.JSType$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
356:       "com.google.common.collect.Platform",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2"
363:     );
364:   }
365: }

[MASTER] 17:54:34.665 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
assertFalse(boolean0);

boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

Node node0 = Node.newString("t4`]M|KApUSxQvO}GR", 26, 13);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(node0);
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(13, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());

node0.removeProp(13);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(13, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());

boolean boolean2 = node0.wasEmptyNode();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(boolean2);
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(13, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(iterable0);
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(13, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());

boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
assertFalse(boolean3);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);

node0.setType(4);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(13, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals(4, node0.getType());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isReturn());
assertFalse(node0.isCatch());

boolean boolean4 = node0.isTry();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(boolean4);
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(13, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals(4, node0.getType());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isReturn());
assertFalse(node0.isCatch());
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);

Node node1 = Node.newString("");
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertNotNull(node1);
assertNotSame(node1, node0);
assertFalse(node1.isCatch());
assertEquals(40, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.equals((Object)node0));

InputId inputId0 = node0.getInputId();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNull(inputId0);
assertNotSame(node0, node1);
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(13, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals(4, node0.getType());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.equals((Object)node1));

node1.detachChildren();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertNotSame(node1, node0);
assertFalse(node1.isCatch());
assertEquals(40, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.equals((Object)node0));

node1.detachChildren();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertNotSame(node1, node0);
assertFalse(node1.isCatch());
assertEquals(40, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.equals((Object)node0));

node0.setInputId((InputId) null);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node0, node1);
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(13, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals(4, node0.getType());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.equals((Object)node1));

boolean boolean5 = node1.isEquivalentTo(node0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(boolean5);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(13, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals(4, node0.getType());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node1.isCatch());
assertEquals(40, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean0);

boolean boolean6 = node1.isObjectLit();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(boolean6);
assertNotSame(node1, node0);
assertFalse(node1.isCatch());
assertEquals(40, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.equals((Object)node0));
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean2);

Node node2 = node1.getParent();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertNull(node2);
assertNotSame(node1, node0);
assertFalse(node1.isCatch());
assertEquals(40, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.equals((Object)node0));

String string0 = node0.getQualifiedName();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNull(string0);
assertNotSame(node0, node1);
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertEquals(13, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isTrue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals(4, node0.getType());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.equals((Object)node1));

boolean boolean7 = node1.isAnd();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(boolean7);
assertNotSame(node1, node0);
assertFalse(node1.isCatch());
assertEquals(40, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isNull());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean0);
assertFalse(node1.equals((Object)node0));


[MASTER] 17:54:39.628 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_86_1629222879114/com/google/javascript/rhino/Node_86_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_86_1629222879114/com/google/javascript/rhino/Node_86_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:39.628 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:39.628 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:39.629 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 347
[MASTER] 17:54:39.631 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_86_1629222879114/com/google/javascript/rhino/Node_86_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:39 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.testdata.EvoSuiteFile;
15: import org.evosuite.runtime.testdata.FileSystemHandling;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_86_tmp__ESTest extends Node_86_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
24:       assertFalse(boolean0);
25:       
26:       boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
27:       assertFalse(boolean1);
28:       assertTrue(boolean1 == boolean0);
29:       
30:       Node node0 = Node.newString("t4`]M|KApUSxQvO}GR", 26, 13);
31:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
32:       assertEquals(50, Node.FREE_CALL);
33:       assertEquals(40, Node.ORIGINALNAME_PROP);
34:       assertEquals(8, Node.FLAG_NO_THROWS);
35:       assertEquals(39, Node.EMPTY_BLOCK);
36:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
37:       assertEquals(52, Node.LENGTH);
38:       assertEquals(48, Node.DIRECTIVES);
39:       assertEquals(57, Node.REFLECTED_OBJECT);
40:       assertEquals(54, Node.SLASH_V);
41:       assertEquals(49, Node.DIRECT_EVAL);
42:       assertEquals(1, Node.DECR_FLAG);
43:       assertEquals(4095, Node.COLUMN_MASK);
44:       assertEquals(32, Node.INCRDECR_PROP);
45:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
46:       assertEquals(12, Node.COLUMN_BITS);
47:       assertEquals(29, Node.JSDOC_INFO_PROP);
48:       assertEquals(47, Node.IS_DISPATCHER);
49:       assertEquals(2, Node.POST_FLAG);
50:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
51:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
52:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
53:       assertEquals(37, Node.OPT_ARG_NAME);
54:       assertEquals(51, Node.STATIC_SOURCE_FILE);
55:       assertEquals(46, Node.IS_NAMESPACE);
56:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
57:       assertEquals(43, Node.IS_CONSTANT_NAME);
58:       assertEquals(56, Node.CHANGE_TIME);
59:       assertEquals(30, Node.VAR_ARGS_NAME);
60:       assertEquals(15, Node.NO_SIDE_EFFECTS);
61:       assertEquals(36, Node.QUOTED_PROP);
62:       assertEquals(55, Node.INFERRED_FUNCTION);
63:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
64:       assertEquals(53, Node.INPUT_ID);
65:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
66:       assertEquals(57, Node.LAST_PROP);
67:       assertNotNull(node0);
68:       assertFalse(node0.isNumber());
69:       assertFalse(node0.isTypeOf());
70:       assertFalse(node0.isDec());
71:       assertEquals(13, node0.getCharno());
72:       assertFalse(node0.isOr());
73:       assertFalse(node0.isGetElem());
74:       assertEquals(106509, node0.getSourcePosition());
75:       assertFalse(node0.isLabelName());
76:       assertFalse(node0.isExprResult());
77:       assertTrue(node0.isString());
78:       assertFalse(node0.isWith());
79:       assertFalse(node0.isScript());
80:       assertFalse(node0.hasMoreThanOneChild());
81:       assertFalse(node0.hasOneChild());
82:       assertFalse(node0.isAssign());
83:       assertFalse(node0.isWhile());
84:       assertFalse(node0.isReturn());
85:       assertFalse(node0.hasChildren());
86:       assertFalse(node0.isBlock());
87:       assertFalse(node0.isParamList());
88:       assertFalse(node0.isComma());
89:       assertFalse(node0.isBreak());
90:       assertFalse(node0.isCall());
91:       assertFalse(node0.isName());
92:       assertFalse(node0.isNull());
93:       assertFalse(node0.isStringKey());
94:       assertFalse(node0.isTrue());
95:       assertFalse(node0.isSwitch());
96:       assertFalse(node0.isNew());
97:       assertFalse(node0.isAdd());
98:       assertFalse(node0.isDo());
99:       assertEquals(0, node0.getChildCount());
100:       assertFalse(node0.isDefaultCase());
101:       assertFalse(node0.isLabel());
102:       assertFalse(node0.isAssignAdd());
103:       assertFalse(node0.isVar());
104:       assertFalse(node0.isDelProp());
105:       assertFalse(node0.isGetterDef());
106:       assertFalse(node0.isIn());
107:       assertFalse(node0.isEmpty());
108:       assertFalse(node0.isArrayLit());
109:       assertFalse(node0.isIf());
110:       assertFalse(node0.isNE());
111:       assertEquals(26, node0.getLineno());
112:       assertFalse(node0.isDebugger());
113:       assertFalse(node0.isRegExp());
114:       assertFalse(node0.isVoid());
115:       assertFalse(node0.isTry());
116:       assertFalse(node0.isCatch());
117:       assertFalse(node0.isCase());
118:       assertFalse(node0.isHook());
119:       assertFalse(node0.isFor());
120:       assertFalse(node0.isSetterDef());
121:       assertFalse(node0.isThis());
122:       assertFalse(node0.isGetProp());
123:       assertFalse(node0.isInstanceOf());
124:       assertFalse(node0.isAnd());
125:       assertFalse(node0.isObjectLit());
126:       assertFalse(node0.isNot());
127:       assertFalse(node0.isFunction());
128:       assertFalse(node0.isInc());
129:       assertFalse(node0.isCast());
130:       assertFalse(node0.isContinue());
131:       assertFalse(node0.isFalse());
132:       assertEquals(40, node0.getType());
133:       assertFalse(node0.isThrow());
134:       
135:       node0.removeProp(13);
136:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
137:       assertEquals(50, Node.FREE_CALL);
138:       assertEquals(40, Node.ORIGINALNAME_PROP);
139:       assertEquals(8, Node.FLAG_NO_THROWS);
140:       assertEquals(39, Node.EMPTY_BLOCK);
141:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
142:       assertEquals(52, Node.LENGTH);
143:       assertEquals(48, Node.DIRECTIVES);
144:       assertEquals(57, Node.REFLECTED_OBJECT);
145:       assertEquals(54, Node.SLASH_V);
146:       assertEquals(49, Node.DIRECT_EVAL);
147:       assertEquals(1, Node.DECR_FLAG);
148:       assertEquals(4095, Node.COLUMN_MASK);
149:       assertEquals(32, Node.INCRDECR_PROP);
150:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
151:       assertEquals(12, Node.COLUMN_BITS);
152:       assertEquals(29, Node.JSDOC_INFO_PROP);
153:       assertEquals(47, Node.IS_DISPATCHER);
154:       assertEquals(2, Node.POST_FLAG);
155:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
156:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
157:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
158:       assertEquals(37, Node.OPT_ARG_NAME);
159:       assertEquals(51, Node.STATIC_SOURCE_FILE);
160:       assertEquals(46, Node.IS_NAMESPACE);
161:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
162:       assertEquals(43, Node.IS_CONSTANT_NAME);
163:       assertEquals(56, Node.CHANGE_TIME);
164:       assertEquals(30, Node.VAR_ARGS_NAME);
165:       assertEquals(15, Node.NO_SIDE_EFFECTS);
166:       assertEquals(36, Node.QUOTED_PROP);
167:       assertEquals(55, Node.INFERRED_FUNCTION);
168:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
169:       assertEquals(53, Node.INPUT_ID);
170:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
171:       assertEquals(57, Node.LAST_PROP);
172:       assertFalse(node0.isNumber());
173:       assertFalse(node0.isTypeOf());
174:       assertFalse(node0.isDec());
175:       assertEquals(13, node0.getCharno());
176:       assertFalse(node0.isOr());
177:       assertFalse(node0.isGetElem());
178:       assertEquals(106509, node0.getSourcePosition());
179:       assertFalse(node0.isLabelName());
180:       assertFalse(node0.isExprResult());
181:       assertTrue(node0.isString());
182:       assertFalse(node0.isWith());
183:       assertFalse(node0.isScript());
184:       assertFalse(node0.hasMoreThanOneChild());
185:       assertFalse(node0.hasOneChild());
186:       assertFalse(node0.isAssign());
187:       assertFalse(node0.isWhile());
188:       assertFalse(node0.isReturn());
189:       assertFalse(node0.hasChildren());
190:       assertFalse(node0.isBlock());
191:       assertFalse(node0.isParamList());
192:       assertFalse(node0.isComma());
193:       assertFalse(node0.isBreak());
194:       assertFalse(node0.isCall());
195:       assertFalse(node0.isName());
196:       assertFalse(node0.isNull());
197:       assertFalse(node0.isStringKey());
198:       assertFalse(node0.isTrue());
199:       assertFalse(node0.isSwitch());
200:       assertFalse(node0.isNew());
201:       assertFalse(node0.isAdd());
202:       assertFalse(node0.isDo());
203:       assertEquals(0, node0.getChildCount());
204:       assertFalse(node0.isDefaultCase());
205:       assertFalse(node0.isLabel());
206:       assertFalse(node0.isAssignAdd());
207:       assertFalse(node0.isVar());
208:       assertFalse(node0.isDelProp());
209:       assertFalse(node0.isGetterDef());
210:       assertFalse(node0.isIn());
211:       assertFalse(node0.isEmpty());
212:       assertFalse(node0.isArrayLit());
213:       assertFalse(node0.isIf());
214:       assertFalse(node0.isNE());
215:       assertEquals(26, node0.getLineno());
216:       assertFalse(node0.isDebugger());
217:       assertFalse(node0.isRegExp());
218:       assertFalse(node0.isVoid());
219:       assertFalse(node0.isTry());
220:       assertFalse(node0.isCatch());
221:       assertFalse(node0.isCase());
222:       assertFalse(node0.isHook());
223:       assertFalse(node0.isFor());
224:       assertFalse(node0.isSetterDef());
225:       assertFalse(node0.isThis());
226:       assertFalse(node0.isGetProp());
227:       assertFalse(node0.isInstanceOf());
228:       assertFalse(node0.isAnd());
229:       assertFalse(node0.isObjectLit());
230:       assertFalse(node0.isNot());
231:       assertFalse(node0.isFunction());
232:       assertFalse(node0.isInc());
233:       assertFalse(node0.isCast());
234:       assertFalse(node0.isContinue());
235:       assertFalse(node0.isFalse());
236:       assertEquals(40, node0.getType());
237:       assertFalse(node0.isThrow());
238:       
239:       boolean boolean2 = node0.wasEmptyNode();
240:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
241:       assertEquals(50, Node.FREE_CALL);
242:       assertEquals(40, Node.ORIGINALNAME_PROP);
243:       assertEquals(8, Node.FLAG_NO_THROWS);
244:       assertEquals(39, Node.EMPTY_BLOCK);
245:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
246:       assertEquals(52, Node.LENGTH);
247:       assertEquals(48, Node.DIRECTIVES);
248:       assertEquals(57, Node.REFLECTED_OBJECT);
249:       assertEquals(54, Node.SLASH_V);
250:       assertEquals(49, Node.DIRECT_EVAL);
251:       assertEquals(1, Node.DECR_FLAG);
252:       assertEquals(4095, Node.COLUMN_MASK);
253:       assertEquals(32, Node.INCRDECR_PROP);
254:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
255:       assertEquals(12, Node.COLUMN_BITS);
256:       assertEquals(29, Node.JSDOC_INFO_PROP);
257:       assertEquals(47, Node.IS_DISPATCHER);
258:       assertEquals(2, Node.POST_FLAG);
259:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
260:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
261:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
262:       assertEquals(37, Node.OPT_ARG_NAME);
263:       assertEquals(51, Node.STATIC_SOURCE_FILE);
264:       assertEquals(46, Node.IS_NAMESPACE);
265:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
266:       assertEquals(43, Node.IS_CONSTANT_NAME);
267:       assertEquals(56, Node.CHANGE_TIME);
268:       assertEquals(30, Node.VAR_ARGS_NAME);
269:       assertEquals(15, Node.NO_SIDE_EFFECTS);
270:       assertEquals(36, Node.QUOTED_PROP);
271:       assertEquals(55, Node.INFERRED_FUNCTION);
272:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
273:       assertEquals(53, Node.INPUT_ID);
274:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
275:       assertEquals(57, Node.LAST_PROP);
276:       assertFalse(boolean2);
277:       assertFalse(node0.isNumber());
278:       assertFalse(node0.isTypeOf());
279:       assertFalse(node0.isDec());
280:       assertEquals(13, node0.getCharno());
281:       assertFalse(node0.isOr());
282:       assertFalse(node0.isGetElem());
283:       assertEquals(106509, node0.getSourcePosition());
284:       assertFalse(node0.isLabelName());
285:       assertFalse(node0.isExprResult());
286:       assertTrue(node0.isString());
287:       assertFalse(node0.isWith());
288:       assertFalse(node0.isScript());
289:       assertFalse(node0.hasMoreThanOneChild());
290:       assertFalse(node0.hasOneChild());
291:       assertFalse(node0.isAssign());
292:       assertFalse(node0.isWhile());
293:       assertFalse(node0.isReturn());
294:       assertFalse(node0.hasChildren());
295:       assertFalse(node0.isBlock());
296:       assertFalse(node0.isParamList());
297:       assertFalse(node0.isComma());
298:       assertFalse(node0.isBreak());
299:       assertFalse(node0.isCall());
300:       assertFalse(node0.isName());
301:       assertFalse(node0.isNull());
302:       assertFalse(node0.isStringKey());
303:       assertFalse(node0.isTrue());
304:       assertFalse(node0.isSwitch());
305:       assertFalse(node0.isNew());
306:       assertFalse(node0.isAdd());
307:       assertFalse(node0.isDo());
308:       assertEquals(0, node0.getChildCount());
309:       assertFalse(node0.isDefaultCase());
310:       assertFalse(node0.isLabel());
311:       assertFalse(node0.isAssignAdd());
312:       assertFalse(node0.isVar());
313:       assertFalse(node0.isDelProp());
314:       assertFalse(node0.isGetterDef());
315:       assertFalse(node0.isIn());
316:       assertFalse(node0.isEmpty());
317:       assertFalse(node0.isArrayLit());
318:       assertFalse(node0.isIf());
319:       assertFalse(node0.isNE());
320:       assertEquals(26, node0.getLineno());
321:       assertFalse(node0.isDebugger());
322:       assertFalse(node0.isRegExp());
323:       assertFalse(node0.isVoid());
324:       assertFalse(node0.isTry());
325:       assertFalse(node0.isCatch());
326:       assertFalse(node0.isCase());
327:       assertFalse(node0.isHook());
328:       assertFalse(node0.isFor());
329:       assertFalse(node0.isSetterDef());
330:       assertFalse(node0.isThis());
331:       assertFalse(node0.isGetProp());
332:       assertFalse(node0.isInstanceOf());
333:       assertFalse(node0.isAnd());
334:       assertFalse(node0.isObjectLit());
335:       assertFalse(node0.isNot());
336:       assertFalse(node0.isFunction());
337:       assertFalse(node0.isInc());
338:       assertFalse(node0.isCast());
339:       assertFalse(node0.isContinue());
340:       assertFalse(node0.isFalse());
341:       assertEquals(40, node0.getType());
342:       assertFalse(node0.isThrow());
343:       assertTrue(boolean2 == boolean0);
344:       assertTrue(boolean2 == boolean1);
345:       
346:       Iterable<Node> iterable0 = node0.children();
347:       assertFalse(iterable0.contains(node0));
348:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
349:       assertEquals(50, Node.FREE_CALL);
350:       assertEquals(40, Node.ORIGINALNAME_PROP);
351:       assertEquals(8, Node.FLAG_NO_THROWS);
352:       assertEquals(39, Node.EMPTY_BLOCK);
353:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
354:       assertEquals(52, Node.LENGTH);
355:       assertEquals(48, Node.DIRECTIVES);
356:       assertEquals(57, Node.REFLECTED_OBJECT);
357:       assertEquals(54, Node.SLASH_V);
358:       assertEquals(49, Node.DIRECT_EVAL);
359:       assertEquals(1, Node.DECR_FLAG);
360:       assertEquals(4095, Node.COLUMN_MASK);
361:       assertEquals(32, Node.INCRDECR_PROP);
362:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
363:       assertEquals(12, Node.COLUMN_BITS);
364:       assertEquals(29, Node.JSDOC_INFO_PROP);
365:       assertEquals(47, Node.IS_DISPATCHER);
366:       assertEquals(2, Node.POST_FLAG);
367:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
368:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
369:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
370:       assertEquals(37, Node.OPT_ARG_NAME);
371:       assertEquals(51, Node.STATIC_SOURCE_FILE);
372:       assertEquals(46, Node.IS_NAMESPACE);
373:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
374:       assertEquals(43, Node.IS_CONSTANT_NAME);
375:       assertEquals(56, Node.CHANGE_TIME);
376:       assertEquals(30, Node.VAR_ARGS_NAME);
377:       assertEquals(15, Node.NO_SIDE_EFFECTS);
378:       assertEquals(36, Node.QUOTED_PROP);
379:       assertEquals(55, Node.INFERRED_FUNCTION);
380:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
381:       assertEquals(53, Node.INPUT_ID);
382:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
383:       assertEquals(57, Node.LAST_PROP);
384:       assertNotNull(iterable0);
385:       assertFalse(node0.isNumber());
386:       assertFalse(node0.isTypeOf());
387:       assertFalse(node0.isDec());
388:       assertEquals(13, node0.getCharno());
389:       assertFalse(node0.isOr());
390:       assertFalse(node0.isGetElem());
391:       assertEquals(106509, node0.getSourcePosition());
392:       assertFalse(node0.isLabelName());
393:       assertFalse(node0.isExprResult());
394:       assertTrue(node0.isString());
395:       assertFalse(node0.isWith());
396:       assertFalse(node0.isScript());
397:       assertFalse(node0.hasMoreThanOneChild());
398:       assertFalse(node0.hasOneChild());
399:       assertFalse(node0.isAssign());
400:       assertFalse(node0.isWhile());
401:       assertFalse(node0.isReturn());
402:       assertFalse(node0.hasChildren());
403:       assertFalse(node0.isBlock());
404:       assertFalse(node0.isParamList());
405:       assertFalse(node0.isComma());
406:       assertFalse(node0.isBreak());
407:       assertFalse(node0.isCall());
408:       assertFalse(node0.isName());
409:       assertFalse(node0.isNull());
410:       assertFalse(node0.isStringKey());
411:       assertFalse(node0.isTrue());
412:       assertFalse(node0.isSwitch());
413:       assertFalse(node0.isNew());
414:       assertFalse(node0.isAdd());
415:       assertFalse(node0.isDo());
416:       assertEquals(0, node0.getChildCount());
417:       assertFalse(node0.isDefaultCase());
418:       assertFalse(node0.isLabel());
419:       assertFalse(node0.isAssignAdd());
420:       assertFalse(node0.isVar());
421:       assertFalse(node0.isDelProp());
422:       assertFalse(node0.isGetterDef());
423:       assertFalse(node0.isIn());
424:       assertFalse(node0.isEmpty());
425:       assertFalse(node0.isArrayLit());
426:       assertFalse(node0.isIf());
427:       assertFalse(node0.isNE());
428:       assertEquals(26, node0.getLineno());
429:       assertFalse(node0.isDebugger());
430:       assertFalse(node0.isRegExp());
431:       assertFalse(node0.isVoid());
432:       assertFalse(node0.isTry());
433:       assertFalse(node0.isCatch());
434:       assertFalse(node0.isCase());
435:       assertFalse(node0.isHook());
436:       assertFalse(node0.isFor());
437:       assertFalse(node0.isSetterDef());
438:       assertFalse(node0.isThis());
439:       assertFalse(node0.isGetProp());
440:       assertFalse(node0.isInstanceOf());
441:       assertFalse(node0.isAnd());
442:       assertFalse(node0.isObjectLit());
443:       assertFalse(node0.isNot());
444:       assertFalse(node0.isFunction());
445:       assertFalse(node0.isInc());
446:       assertFalse(node0.isCast());
447:       assertFalse(node0.isContinue());
448:       assertFalse(node0.isFalse());
449:       assertEquals(40, node0.getType());
450:       assertFalse(node0.isThrow());
451:       
452:       boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
453:       assertFalse(boolean3);
454:       assertTrue(boolean3 == boolean0);
455:       assertTrue(boolean3 == boolean1);
456:       assertTrue(boolean3 == boolean2);
457:       
458:       node0.setType(4);
459:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
460:       assertEquals(50, Node.FREE_CALL);
461:       assertEquals(40, Node.ORIGINALNAME_PROP);
462:       assertEquals(8, Node.FLAG_NO_THROWS);
463:       assertEquals(39, Node.EMPTY_BLOCK);
464:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
465:       assertEquals(52, Node.LENGTH);
466:       assertEquals(48, Node.DIRECTIVES);
467:       assertEquals(57, Node.REFLECTED_OBJECT);
468:       assertEquals(54, Node.SLASH_V);
469:       assertEquals(49, Node.DIRECT_EVAL);
470:       assertEquals(1, Node.DECR_FLAG);
471:       assertEquals(4095, Node.COLUMN_MASK);
472:       assertEquals(32, Node.INCRDECR_PROP);
473:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
474:       assertEquals(12, Node.COLUMN_BITS);
475:       assertEquals(29, Node.JSDOC_INFO_PROP);
476:       assertEquals(47, Node.IS_DISPATCHER);
477:       assertEquals(2, Node.POST_FLAG);
478:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
479:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
480:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
481:       assertEquals(37, Node.OPT_ARG_NAME);
482:       assertEquals(51, Node.STATIC_SOURCE_FILE);
483:       assertEquals(46, Node.IS_NAMESPACE);
484:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
485:       assertEquals(43, Node.IS_CONSTANT_NAME);
486:       assertEquals(56, Node.CHANGE_TIME);
487:       assertEquals(30, Node.VAR_ARGS_NAME);
488:       assertEquals(15, Node.NO_SIDE_EFFECTS);
489:       assertEquals(36, Node.QUOTED_PROP);
490:       assertEquals(55, Node.INFERRED_FUNCTION);
491:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
492:       assertEquals(53, Node.INPUT_ID);
493:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
494:       assertEquals(57, Node.LAST_PROP);
495:       assertFalse(node0.isNumber());
496:       assertFalse(node0.isTypeOf());
497:       assertFalse(node0.isDec());
498:       assertEquals(13, node0.getCharno());
499:       assertFalse(node0.isOr());
500:       assertFalse(node0.isGetElem());
501:       assertEquals(106509, node0.getSourcePosition());
502:       assertFalse(node0.isLabelName());
503:       assertFalse(node0.isExprResult());
504:       assertFalse(node0.isWith());
505:       assertFalse(node0.isScript());
506:       assertFalse(node0.hasMoreThanOneChild());
507:       assertFalse(node0.hasOneChild());
508:       assertFalse(node0.isAssign());
509:       assertFalse(node0.isWhile());
510:       assertFalse(node0.hasChildren());
511:       assertFalse(node0.isBlock());
512:       assertFalse(node0.isParamList());
513:       assertFalse(node0.isComma());
514:       assertFalse(node0.isBreak());
515:       assertFalse(node0.isCall());
516:       assertFalse(node0.isName());
517:       assertFalse(node0.isNull());
518:       assertFalse(node0.isStringKey());
519:       assertFalse(node0.isTrue());
520:       assertFalse(node0.isSwitch());
521:       assertFalse(node0.isNew());
522:       assertFalse(node0.isAdd());
523:       assertFalse(node0.isDo());
524:       assertEquals(0, node0.getChildCount());
525:       assertFalse(node0.isDefaultCase());
526:       assertFalse(node0.isLabel());
527:       assertFalse(node0.isAssignAdd());
528:       assertFalse(node0.isVar());
529:       assertFalse(node0.isDelProp());
530:       assertFalse(node0.isGetterDef());
531:       assertFalse(node0.isIn());
532:       assertFalse(node0.isEmpty());
533:       assertFalse(node0.isArrayLit());
534:       assertFalse(node0.isIf());
535:       assertFalse(node0.isNE());
536:       assertEquals(26, node0.getLineno());
537:       assertFalse(node0.isDebugger());
538:       assertEquals(4, node0.getType());
539:       assertFalse(node0.isRegExp());
540:       assertFalse(node0.isVoid());
541:       assertFalse(node0.isTry());
542:       assertFalse(node0.isString());
543:       assertTrue(node0.isReturn());
544:       assertFalse(node0.isCatch());
545:       assertFalse(node0.isCase());
546:       assertFalse(node0.isHook());
547:       assertFalse(node0.isFor());
548:       assertFalse(node0.isSetterDef());
549:       assertFalse(node0.isThis());
550:       assertFalse(node0.isGetProp());
551:       assertFalse(node0.isInstanceOf());
552:       assertFalse(node0.isAnd());
553:       assertFalse(node0.isObjectLit());
554:       assertFalse(node0.isNot());
555:       assertFalse(node0.isFunction());
556:       assertFalse(node0.isInc());
557:       assertFalse(node0.isCast());
558:       assertFalse(node0.isContinue());
559:       assertFalse(node0.isFalse());
560:       assertFalse(node0.isThrow());
561:       
562:       Node node1 = Node.newString("");
563:       assertEquals(43, Node.IS_CONSTANT_NAME);
564:       assertEquals(36, Node.QUOTED_PROP);
565:       assertEquals(53, Node.INPUT_ID);
566:       assertEquals(55, Node.INFERRED_FUNCTION);
567:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
568:       assertEquals(37, Node.OPT_ARG_NAME);
569:       assertEquals(56, Node.CHANGE_TIME);
570:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
571:       assertEquals(39, Node.EMPTY_BLOCK);
572:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
573:       assertEquals(29, Node.JSDOC_INFO_PROP);
574:       assertEquals(8, Node.FLAG_NO_THROWS);
575:       assertEquals(4095, Node.COLUMN_MASK);
576:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
577:       assertEquals(57, Node.REFLECTED_OBJECT);
578:       assertEquals(49, Node.DIRECT_EVAL);
579:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
580:       assertEquals(48, Node.DIRECTIVES);
581:       assertEquals(54, Node.SLASH_V);
582:       assertEquals(15, Node.NO_SIDE_EFFECTS);
583:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
584:       assertEquals(30, Node.VAR_ARGS_NAME);
585:       assertEquals(52, Node.LENGTH);
586:       assertEquals(12, Node.COLUMN_BITS);
587:       assertEquals(1, Node.DECR_FLAG);
588:       assertEquals(57, Node.LAST_PROP);
589:       assertEquals(32, Node.INCRDECR_PROP);
590:       assertEquals(2, Node.POST_FLAG);
591:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
592:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
593:       assertEquals(47, Node.IS_DISPATCHER);
594:       assertEquals(50, Node.FREE_CALL);
595:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
596:       assertEquals(51, Node.STATIC_SOURCE_FILE);
597:       assertEquals(46, Node.IS_NAMESPACE);
598:       assertEquals(40, Node.ORIGINALNAME_PROP);
599:       assertNotNull(node1);
600:       assertNotSame(node1, node0);
601:       assertFalse(node1.isAdd());
602:       assertTrue(node1.isString());
603:       assertFalse(node1.isNew());
604:       assertFalse(node1.isBlock());
605:       assertFalse(node1.isCall());
606:       assertFalse(node1.isWhile());
607:       assertFalse(node1.isDo());
608:       assertFalse(node1.isVar());
609:       assertEquals((-1), node1.getLineno());
610:       assertFalse(node1.isReturn());
611:       assertFalse(node1.isOr());
612:       assertFalse(node1.isCatch());
613:       assertFalse(node1.isSetterDef());
614:       assertFalse(node1.hasMoreThanOneChild());
615:       assertFalse(node1.isTypeOf());
616:       assertFalse(node1.isName());
617:       assertFalse(node1.isGetElem());
618:       assertFalse(node1.isTrue());
619:       assertFalse(node1.isVoid());
620:       assertFalse(node1.isNull());
621:       assertFalse(node1.isDebugger());
622:       assertFalse(node1.isFunction());
623:       assertFalse(node1.isCast());
624:       assertFalse(node1.isExprResult());
625:       assertFalse(node1.isAssign());
626:       assertEquals(40, node1.getType());
627:       assertFalse(node1.isDec());
628:       assertFalse(node1.hasChildren());
629:       assertFalse(node1.isGetProp());
630:       assertFalse(node1.isObjectLit());
631:       assertFalse(node1.isContinue());
632:       assertFalse(node1.isNot());
633:       assertEquals((-1), node1.getSourcePosition());
634:       assertFalse(node1.isAnd());
635:       assertFalse(node1.isHook());
636:       assertEquals((-1), node1.getCharno());
637:       assertFalse(node1.isInc());
638:       assertFalse(node1.isFalse());
639:       assertFalse(node1.isCase());
640:       assertFalse(node1.isThis());
641:       assertFalse(node1.isThrow());
642:       assertFalse(node1.isComma());
643:       assertFalse(node1.isInstanceOf());
644:       assertFalse(node1.isIn());
645:       assertFalse(node1.isDelProp());
646:       assertFalse(node1.isBreak());
647:       assertFalse(node1.isNE());
648:       assertFalse(node1.isIf());
649:       assertFalse(node1.isTry());
650:       assertFalse(node1.hasOneChild());
651:       assertFalse(node1.isArrayLit());
652:       assertFalse(node1.isRegExp());
653:       assertFalse(node1.isScript());
654:       assertFalse(node1.isWith());
655:       assertFalse(node1.isEmpty());
656:       assertFalse(node1.isFor());
657:       assertFalse(node1.isDefaultCase());
658:       assertFalse(node1.isAssignAdd());
659:       assertEquals(0, node1.getChildCount());
660:       assertFalse(node1.isLabel());
661:       assertFalse(node1.isNumber());
662:       assertFalse(node1.isGetterDef());
663:       assertFalse(node1.isLabelName());
664:       assertFalse(node1.isSwitch());
665:       assertFalse(node1.isParamList());
666:       assertFalse(node1.isStringKey());
667:       assertFalse(node1.equals((Object)node0));
668:       
669:       InputId inputId0 = node0.getInputId();
670:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
671:       assertEquals(50, Node.FREE_CALL);
672:       assertEquals(40, Node.ORIGINALNAME_PROP);
673:       assertEquals(8, Node.FLAG_NO_THROWS);
674:       assertEquals(39, Node.EMPTY_BLOCK);
675:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
676:       assertEquals(52, Node.LENGTH);
677:       assertEquals(48, Node.DIRECTIVES);
678:       assertEquals(57, Node.REFLECTED_OBJECT);
679:       assertEquals(54, Node.SLASH_V);
680:       assertEquals(49, Node.DIRECT_EVAL);
681:       assertEquals(1, Node.DECR_FLAG);
682:       assertEquals(4095, Node.COLUMN_MASK);
683:       assertEquals(32, Node.INCRDECR_PROP);
684:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
685:       assertEquals(12, Node.COLUMN_BITS);
686:       assertEquals(29, Node.JSDOC_INFO_PROP);
687:       assertEquals(47, Node.IS_DISPATCHER);
688:       assertEquals(2, Node.POST_FLAG);
689:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
690:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
691:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
692:       assertEquals(37, Node.OPT_ARG_NAME);
693:       assertEquals(51, Node.STATIC_SOURCE_FILE);
694:       assertEquals(46, Node.IS_NAMESPACE);
695:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
696:       assertEquals(43, Node.IS_CONSTANT_NAME);
697:       assertEquals(56, Node.CHANGE_TIME);
698:       assertEquals(30, Node.VAR_ARGS_NAME);
699:       assertEquals(15, Node.NO_SIDE_EFFECTS);
700:       assertEquals(36, Node.QUOTED_PROP);
701:       assertEquals(55, Node.INFERRED_FUNCTION);
702:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
703:       assertEquals(53, Node.INPUT_ID);
704:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
705:       assertEquals(57, Node.LAST_PROP);
706:       assertNull(inputId0);
707:       assertNotSame(node0, node1);
708:       assertFalse(node0.isNumber());
709:       assertFalse(node0.isTypeOf());
710:       assertFalse(node0.isDec());
711:       assertEquals(13, node0.getCharno());
712:       assertFalse(node0.isOr());
713:       assertFalse(node0.isGetElem());
714:       assertEquals(106509, node0.getSourcePosition());
715:       assertFalse(node0.isLabelName());
716:       assertFalse(node0.isExprResult());
717:       assertFalse(node0.isWith());
718:       assertFalse(node0.isScript());
719:       assertFalse(node0.hasMoreThanOneChild());
720:       assertFalse(node0.hasOneChild());
721:       assertFalse(node0.isAssign());
722:       assertFalse(node0.isWhile());
723:       assertFalse(node0.hasChildren());
724:       assertFalse(node0.isBlock());
725:       assertFalse(node0.isParamList());
726:       assertFalse(node0.isComma());
727:       assertFalse(node0.isBreak());
728:       assertFalse(node0.isCall());
729:       assertFalse(node0.isName());
730:       assertFalse(node0.isNull());
731:       assertFalse(node0.isStringKey());
732:       assertFalse(node0.isTrue());
733:       assertFalse(node0.isSwitch());
734:       assertFalse(node0.isNew());
735:       assertFalse(node0.isAdd());
736:       assertFalse(node0.isDo());
737:       assertEquals(0, node0.getChildCount());
738:       assertFalse(node0.isDefaultCase());
739:       assertFalse(node0.isLabel());
740:       assertFalse(node0.isAssignAdd());
741:       assertFalse(node0.isVar());
742:       assertFalse(node0.isDelProp());
743:       assertFalse(node0.isGetterDef());
744:       assertFalse(node0.isIn());
745:       assertFalse(node0.isEmpty());
746:       assertFalse(node0.isArrayLit());
747:       assertFalse(node0.isIf());
748:       assertFalse(node0.isNE());
749:       assertEquals(26, node0.getLineno());
750:       assertFalse(node0.isDebugger());
751:       assertEquals(4, node0.getType());
752:       assertFalse(node0.isRegExp());
753:       assertFalse(node0.isVoid());
754:       assertFalse(node0.isTry());
755:       assertFalse(node0.isString());
756:       assertTrue(node0.isReturn());
757:       assertFalse(node0.isCatch());
758:       assertFalse(node0.isCase());
759:       assertFalse(node0.isHook());
760:       assertFalse(node0.isFor());
761:       assertFalse(node0.isSetterDef());
762:       assertFalse(node0.isThis());
763:       assertFalse(node0.isGetProp());
764:       assertFalse(node0.isInstanceOf());
765:       assertFalse(node0.isAnd());
766:       assertFalse(node0.isObjectLit());
767:       assertFalse(node0.isNot());
768:       assertFalse(node0.isFunction());
769:       assertFalse(node0.isInc());
770:       assertFalse(node0.isCast());
771:       assertFalse(node0.isContinue());
772:       assertFalse(node0.isFalse());
773:       assertFalse(node0.isThrow());
774:       assertFalse(node0.equals((Object)node1));
775:       
776:       node1.detachChildren();
777:       assertEquals(43, Node.IS_CONSTANT_NAME);
778:       assertEquals(36, Node.QUOTED_PROP);
779:       assertEquals(53, Node.INPUT_ID);
780:       assertEquals(55, Node.INFERRED_FUNCTION);
781:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
782:       assertEquals(37, Node.OPT_ARG_NAME);
783:       assertEquals(56, Node.CHANGE_TIME);
784:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
785:       assertEquals(39, Node.EMPTY_BLOCK);
786:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
787:       assertEquals(29, Node.JSDOC_INFO_PROP);
788:       assertEquals(8, Node.FLAG_NO_THROWS);
789:       assertEquals(4095, Node.COLUMN_MASK);
790:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
791:       assertEquals(57, Node.REFLECTED_OBJECT);
792:       assertEquals(49, Node.DIRECT_EVAL);
793:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
794:       assertEquals(48, Node.DIRECTIVES);
795:       assertEquals(54, Node.SLASH_V);
796:       assertEquals(15, Node.NO_SIDE_EFFECTS);
797:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
798:       assertEquals(30, Node.VAR_ARGS_NAME);
799:       assertEquals(52, Node.LENGTH);
800:       assertEquals(12, Node.COLUMN_BITS);
801:       assertEquals(1, Node.DECR_FLAG);
802:       assertEquals(57, Node.LAST_PROP);
803:       assertEquals(32, Node.INCRDECR_PROP);
804:       assertEquals(2, Node.POST_FLAG);
805:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
806:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
807:       assertEquals(47, Node.IS_DISPATCHER);
808:       assertEquals(50, Node.FREE_CALL);
809:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
810:       assertEquals(51, Node.STATIC_SOURCE_FILE);
811:       assertEquals(46, Node.IS_NAMESPACE);
812:       assertEquals(40, Node.ORIGINALNAME_PROP);
813:       assertNotSame(node1, node0);
814:       assertFalse(node1.isAdd());
815:       assertTrue(node1.isString());
816:       assertFalse(node1.isNew());
817:       assertFalse(node1.isBlock());
818:       assertFalse(node1.isCall());
819:       assertFalse(node1.isWhile());
820:       assertFalse(node1.isDo());
821:       assertFalse(node1.isVar());
822:       assertEquals((-1), node1.getLineno());
823:       assertFalse(node1.isReturn());
824:       assertFalse(node1.isOr());
825:       assertFalse(node1.isCatch());
826:       assertFalse(node1.isSetterDef());
827:       assertFalse(node1.hasMoreThanOneChild());
828:       assertFalse(node1.isTypeOf());
829:       assertFalse(node1.isName());
830:       assertFalse(node1.isGetElem());
831:       assertFalse(node1.isTrue());
832:       assertFalse(node1.isVoid());
833:       assertFalse(node1.isNull());
834:       assertFalse(node1.isDebugger());
835:       assertFalse(node1.isFunction());
836:       assertFalse(node1.isCast());
837:       assertFalse(node1.isExprResult());
838:       assertFalse(node1.isAssign());
839:       assertEquals(40, node1.getType());
840:       assertFalse(node1.isDec());
841:       assertFalse(node1.hasChildren());
842:       assertFalse(node1.isGetProp());
843:       assertFalse(node1.isObjectLit());
844:       assertFalse(node1.isContinue());
845:       assertFalse(node1.isNot());
846:       assertEquals((-1), node1.getSourcePosition());
847:       assertFalse(node1.isAnd());
848:       assertFalse(node1.isHook());
849:       assertEquals((-1), node1.getCharno());
850:       assertFalse(node1.isInc());
851:       assertFalse(node1.isFalse());
852:       assertFalse(node1.isCase());
853:       assertFalse(node1.isThis());
854:       assertFalse(node1.isThrow());
855:       assertFalse(node1.isComma());
856:       assertFalse(node1.isInstanceOf());
857:       assertFalse(node1.isIn());
858:       assertFalse(node1.isDelProp());
859:       assertFalse(node1.isBreak());
860:       assertFalse(node1.isNE());
861:       assertFalse(node1.isIf());
862:       assertFalse(node1.isTry());
863:       assertFalse(node1.hasOneChild());
864:       assertFalse(node1.isArrayLit());
865:       assertFalse(node1.isRegExp());
866:       assertFalse(node1.isScript());
867:       assertFalse(node1.isWith());
868:       assertFalse(node1.isEmpty());
869:       assertFalse(node1.isFor());
870:       assertFalse(node1.isDefaultCase());
871:       assertFalse(node1.isAssignAdd());
872:       assertEquals(0, node1.getChildCount());
873:       assertFalse(node1.isLabel());
874:       assertFalse(node1.isNumber());
875:       assertFalse(node1.isGetterDef());
876:       assertFalse(node1.isLabelName());
877:       assertFalse(node1.isSwitch());
878:       assertFalse(node1.isParamList());
879:       assertFalse(node1.isStringKey());
880:       assertFalse(node1.equals((Object)node0));
881:       
882:       node1.detachChildren();
883:       assertEquals(43, Node.IS_CONSTANT_NAME);
884:       assertEquals(36, Node.QUOTED_PROP);
885:       assertEquals(53, Node.INPUT_ID);
886:       assertEquals(55, Node.INFERRED_FUNCTION);
887:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
888:       assertEquals(37, Node.OPT_ARG_NAME);
889:       assertEquals(56, Node.CHANGE_TIME);
890:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
891:       assertEquals(39, Node.EMPTY_BLOCK);
892:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
893:       assertEquals(29, Node.JSDOC_INFO_PROP);
894:       assertEquals(8, Node.FLAG_NO_THROWS);
895:       assertEquals(4095, Node.COLUMN_MASK);
896:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
897:       assertEquals(57, Node.REFLECTED_OBJECT);
898:       assertEquals(49, Node.DIRECT_EVAL);
899:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
900:       assertEquals(48, Node.DIRECTIVES);
901:       assertEquals(54, Node.SLASH_V);
902:       assertEquals(15, Node.NO_SIDE_EFFECTS);
903:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
904:       assertEquals(30, Node.VAR_ARGS_NAME);
905:       assertEquals(52, Node.LENGTH);
906:       assertEquals(12, Node.COLUMN_BITS);
907:       assertEquals(1, Node.DECR_FLAG);
908:       assertEquals(57, Node.LAST_PROP);
909:       assertEquals(32, Node.INCRDECR_PROP);
910:       assertEquals(2, Node.POST_FLAG);
911:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
912:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
913:       assertEquals(47, Node.IS_DISPATCHER);
914:       assertEquals(50, Node.FREE_CALL);
915:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
916:       assertEquals(51, Node.STATIC_SOURCE_FILE);
917:       assertEquals(46, Node.IS_NAMESPACE);
918:       assertEquals(40, Node.ORIGINALNAME_PROP);
919:       assertNotSame(node1, node0);
920:       assertFalse(node1.isAdd());
921:       assertTrue(node1.isString());
922:       assertFalse(node1.isNew());
923:       assertFalse(node1.isBlock());
924:       assertFalse(node1.isCall());
925:       assertFalse(node1.isWhile());
926:       assertFalse(node1.isDo());
927:       assertFalse(node1.isVar());
928:       assertEquals((-1), node1.getLineno());
929:       assertFalse(node1.isReturn());
930:       assertFalse(node1.isOr());
931:       assertFalse(node1.isCatch());
932:       assertFalse(node1.isSetterDef());
933:       assertFalse(node1.hasMoreThanOneChild());
934:       assertFalse(node1.isTypeOf());
935:       assertFalse(node1.isName());
936:       assertFalse(node1.isGetElem());
937:       assertFalse(node1.isTrue());
938:       assertFalse(node1.isVoid());
939:       assertFalse(node1.isNull());
940:       assertFalse(node1.isDebugger());
941:       assertFalse(node1.isFunction());
942:       assertFalse(node1.isCast());
943:       assertFalse(node1.isExprResult());
944:       assertFalse(node1.isAssign());
945:       assertEquals(40, node1.getType());
946:       assertFalse(node1.isDec());
947:       assertFalse(node1.hasChildren());
948:       assertFalse(node1.isGetProp());
949:       assertFalse(node1.isObjectLit());
950:       assertFalse(node1.isContinue());
951:       assertFalse(node1.isNot());
952:       assertEquals((-1), node1.getSourcePosition());
953:       assertFalse(node1.isAnd());
954:       assertFalse(node1.isHook());
955:       assertEquals((-1), node1.getCharno());
956:       assertFalse(node1.isInc());
957:       assertFalse(node1.isFalse());
958:       assertFalse(node1.isCase());
959:       assertFalse(node1.isThis());
960:       assertFalse(node1.isThrow());
961:       assertFalse(node1.isComma());
962:       assertFalse(node1.isInstanceOf());
963:       assertFalse(node1.isIn());
964:       assertFalse(node1.isDelProp());
965:       assertFalse(node1.isBreak());
966:       assertFalse(node1.isNE());
967:       assertFalse(node1.isIf());
968:       assertFalse(node1.isTry());
969:       assertFalse(node1.hasOneChild());
970:       assertFalse(node1.isArrayLit());
971:       assertFalse(node1.isRegExp());
972:       assertFalse(node1.isScript());
973:       assertFalse(node1.isWith());
974:       assertFalse(node1.isEmpty());
975:       assertFalse(node1.isFor());
976:       assertFalse(node1.isDefaultCase());
977:       assertFalse(node1.isAssignAdd());
978:       assertEquals(0, node1.getChildCount());
979:       assertFalse(node1.isLabel());
980:       assertFalse(node1.isNumber());
981:       assertFalse(node1.isGetterDef());
982:       assertFalse(node1.isLabelName());
983:       assertFalse(node1.isSwitch());
984:       assertFalse(node1.isParamList());
985:       assertFalse(node1.isStringKey());
986:       assertFalse(node1.equals((Object)node0));
987:       
988:       node0.setInputId((InputId) null);
989:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
990:       assertEquals(50, Node.FREE_CALL);
991:       assertEquals(40, Node.ORIGINALNAME_PROP);
992:       assertEquals(8, Node.FLAG_NO_THROWS);
993:       assertEquals(39, Node.EMPTY_BLOCK);
994:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
995:       assertEquals(52, Node.LENGTH);
996:       assertEquals(48, Node.DIRECTIVES);
997:       assertEquals(57, Node.REFLECTED_OBJECT);
998:       assertEquals(54, Node.SLASH_V);
999:       assertEquals(49, Node.DIRECT_EVAL);
1000:       assertEquals(1, Node.DECR_FLAG);
1001:       assertEquals(4095, Node.COLUMN_MASK);
1002:       assertEquals(32, Node.INCRDECR_PROP);
1003:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1004:       assertEquals(12, Node.COLUMN_BITS);
1005:       assertEquals(29, Node.JSDOC_INFO_PROP);
1006:       assertEquals(47, Node.IS_DISPATCHER);
1007:       assertEquals(2, Node.POST_FLAG);
1008:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1009:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1010:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1011:       assertEquals(37, Node.OPT_ARG_NAME);
1012:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1013:       assertEquals(46, Node.IS_NAMESPACE);
1014:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1015:       assertEquals(43, Node.IS_CONSTANT_NAME);
1016:       assertEquals(56, Node.CHANGE_TIME);
1017:       assertEquals(30, Node.VAR_ARGS_NAME);
1018:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1019:       assertEquals(36, Node.QUOTED_PROP);
1020:       assertEquals(55, Node.INFERRED_FUNCTION);
1021:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1022:       assertEquals(53, Node.INPUT_ID);
1023:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1024:       assertEquals(57, Node.LAST_PROP);
1025:       assertNotSame(node0, node1);
1026:       assertFalse(node0.isNumber());
1027:       assertFalse(node0.isTypeOf());
1028:       assertFalse(node0.isDec());
1029:       assertEquals(13, node0.getCharno());
1030:       assertFalse(node0.isOr());
1031:       assertFalse(node0.isGetElem());
1032:       assertEquals(106509, node0.getSourcePosition());
1033:       assertFalse(node0.isLabelName());
1034:       assertFalse(node0.isExprResult());
1035:       assertFalse(node0.isWith());
1036:       assertFalse(node0.isScript());
1037:       assertFalse(node0.hasMoreThanOneChild());
1038:       assertFalse(node0.hasOneChild());
1039:       assertFalse(node0.isAssign());
1040:       assertFalse(node0.isWhile());
1041:       assertFalse(node0.hasChildren());
1042:       assertFalse(node0.isBlock());
1043:       assertFalse(node0.isParamList());
1044:       assertFalse(node0.isComma());
1045:       assertFalse(node0.isBreak());
1046:       assertFalse(node0.isCall());
1047:       assertFalse(node0.isName());
1048:       assertFalse(node0.isNull());
1049:       assertFalse(node0.isStringKey());
1050:       assertFalse(node0.isTrue());
1051:       assertFalse(node0.isSwitch());
1052:       assertFalse(node0.isNew());
1053:       assertFalse(node0.isAdd());
1054:       assertFalse(node0.isDo());
1055:       assertEquals(0, node0.getChildCount());
1056:       assertFalse(node0.isDefaultCase());
1057:       assertFalse(node0.isLabel());
1058:       assertFalse(node0.isAssignAdd());
1059:       assertFalse(node0.isVar());
1060:       assertFalse(node0.isDelProp());
1061:       assertFalse(node0.isGetterDef());
1062:       assertFalse(node0.isIn());
1063:       assertFalse(node0.isEmpty());
1064:       assertFalse(node0.isArrayLit());
1065:       assertFalse(node0.isIf());
1066:       assertFalse(node0.isNE());
1067:       assertEquals(26, node0.getLineno());
1068:       assertFalse(node0.isDebugger());
1069:       assertEquals(4, node0.getType());
1070:       assertFalse(node0.isRegExp());
1071:       assertFalse(node0.isVoid());
1072:       assertFalse(node0.isTry());
1073:       assertFalse(node0.isString());
1074:       assertTrue(node0.isReturn());
1075:       assertFalse(node0.isCatch());
1076:       assertFalse(node0.isCase());
1077:       assertFalse(node0.isHook());
1078:       assertFalse(node0.isFor());
1079:       assertFalse(node0.isSetterDef());
1080:       assertFalse(node0.isThis());
1081:       assertFalse(node0.isGetProp());
1082:       assertFalse(node0.isInstanceOf());
1083:       assertFalse(node0.isAnd());
1084:       assertFalse(node0.isObjectLit());
1085:       assertFalse(node0.isNot());
1086:       assertFalse(node0.isFunction());
1087:       assertFalse(node0.isInc());
1088:       assertFalse(node0.isCast());
1089:       assertFalse(node0.isContinue());
1090:       assertFalse(node0.isFalse());
1091:       assertFalse(node0.isThrow());
1092:       assertFalse(node0.equals((Object)node1));
1093:       
1094:       boolean boolean4 = node1.isEquivalentTo(node0);
1095:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1096:       assertEquals(50, Node.FREE_CALL);
1097:       assertEquals(40, Node.ORIGINALNAME_PROP);
1098:       assertEquals(8, Node.FLAG_NO_THROWS);
1099:       assertEquals(39, Node.EMPTY_BLOCK);
1100:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1101:       assertEquals(52, Node.LENGTH);
1102:       assertEquals(48, Node.DIRECTIVES);
1103:       assertEquals(57, Node.REFLECTED_OBJECT);
1104:       assertEquals(54, Node.SLASH_V);
1105:       assertEquals(49, Node.DIRECT_EVAL);
1106:       assertEquals(1, Node.DECR_FLAG);
1107:       assertEquals(4095, Node.COLUMN_MASK);
1108:       assertEquals(32, Node.INCRDECR_PROP);
1109:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1110:       assertEquals(12, Node.COLUMN_BITS);
1111:       assertEquals(29, Node.JSDOC_INFO_PROP);
1112:       assertEquals(47, Node.IS_DISPATCHER);
1113:       assertEquals(2, Node.POST_FLAG);
1114:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1115:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1116:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1117:       assertEquals(37, Node.OPT_ARG_NAME);
1118:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1119:       assertEquals(46, Node.IS_NAMESPACE);
1120:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1121:       assertEquals(43, Node.IS_CONSTANT_NAME);
1122:       assertEquals(56, Node.CHANGE_TIME);
1123:       assertEquals(30, Node.VAR_ARGS_NAME);
1124:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1125:       assertEquals(36, Node.QUOTED_PROP);
1126:       assertEquals(55, Node.INFERRED_FUNCTION);
1127:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1128:       assertEquals(53, Node.INPUT_ID);
1129:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1130:       assertEquals(57, Node.LAST_PROP);
1131:       assertEquals(43, Node.IS_CONSTANT_NAME);
1132:       assertEquals(36, Node.QUOTED_PROP);
1133:       assertEquals(53, Node.INPUT_ID);
1134:       assertEquals(55, Node.INFERRED_FUNCTION);
1135:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1136:       assertEquals(37, Node.OPT_ARG_NAME);
1137:       assertEquals(56, Node.CHANGE_TIME);
1138:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1139:       assertEquals(39, Node.EMPTY_BLOCK);
1140:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1141:       assertEquals(29, Node.JSDOC_INFO_PROP);
1142:       assertEquals(8, Node.FLAG_NO_THROWS);
1143:       assertEquals(4095, Node.COLUMN_MASK);
1144:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1145:       assertEquals(57, Node.REFLECTED_OBJECT);
1146:       assertEquals(49, Node.DIRECT_EVAL);
1147:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1148:       assertEquals(48, Node.DIRECTIVES);
1149:       assertEquals(54, Node.SLASH_V);
1150:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1151:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1152:       assertEquals(30, Node.VAR_ARGS_NAME);
1153:       assertEquals(52, Node.LENGTH);
1154:       assertEquals(12, Node.COLUMN_BITS);
1155:       assertEquals(1, Node.DECR_FLAG);
1156:       assertEquals(57, Node.LAST_PROP);
1157:       assertEquals(32, Node.INCRDECR_PROP);
1158:       assertEquals(2, Node.POST_FLAG);
1159:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1160:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1161:       assertEquals(47, Node.IS_DISPATCHER);
1162:       assertEquals(50, Node.FREE_CALL);
1163:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1164:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1165:       assertEquals(46, Node.IS_NAMESPACE);
1166:       assertEquals(40, Node.ORIGINALNAME_PROP);
1167:       assertFalse(boolean4);
1168:       assertNotSame(node0, node1);
1169:       assertNotSame(node1, node0);
1170:       assertFalse(node0.isNumber());
1171:       assertFalse(node0.isTypeOf());
1172:       assertFalse(node0.isDec());
1173:       assertEquals(13, node0.getCharno());
1174:       assertFalse(node0.isOr());
1175:       assertFalse(node0.isGetElem());
1176:       assertEquals(106509, node0.getSourcePosition());
1177:       assertFalse(node0.isLabelName());
1178:       assertFalse(node0.isExprResult());
1179:       assertFalse(node0.isWith());
1180:       assertFalse(node0.isScript());
1181:       assertFalse(node0.hasMoreThanOneChild());
1182:       assertFalse(node0.hasOneChild());
1183:       assertFalse(node0.isAssign());
1184:       assertFalse(node0.isWhile());
1185:       assertFalse(node0.hasChildren());
1186:       assertFalse(node0.isBlock());
1187:       assertFalse(node0.isParamList());
1188:       assertFalse(node0.isComma());
1189:       assertFalse(node0.isBreak());
1190:       assertFalse(node0.isCall());
1191:       assertFalse(node0.isName());
1192:       assertFalse(node0.isNull());
1193:       assertFalse(node0.isStringKey());
1194:       assertFalse(node0.isTrue());
1195:       assertFalse(node0.isSwitch());
1196:       assertFalse(node0.isNew());
1197:       assertFalse(node0.isAdd());
1198:       assertFalse(node0.isDo());
1199:       assertEquals(0, node0.getChildCount());
1200:       assertFalse(node0.isDefaultCase());
1201:       assertFalse(node0.isLabel());
1202:       assertFalse(node0.isAssignAdd());
1203:       assertFalse(node0.isVar());
1204:       assertFalse(node0.isDelProp());
1205:       assertFalse(node0.isGetterDef());
1206:       assertFalse(node0.isIn());
1207:       assertFalse(node0.isEmpty());
1208:       assertFalse(node0.isArrayLit());
1209:       assertFalse(node0.isIf());
1210:       assertFalse(node0.isNE());
1211:       assertEquals(26, node0.getLineno());
1212:       assertFalse(node0.isDebugger());
1213:       assertEquals(4, node0.getType());
1214:       assertFalse(node0.isRegExp());
1215:       assertFalse(node0.isVoid());
1216:       assertFalse(node0.isTry());
1217:       assertFalse(node0.isString());
1218:       assertTrue(node0.isReturn());
1219:       assertFalse(node0.isCatch());
1220:       assertFalse(node0.isCase());
1221:       assertFalse(node0.isHook());
1222:       assertFalse(node0.isFor());
1223:       assertFalse(node0.isSetterDef());
1224:       assertFalse(node0.isThis());
1225:       assertFalse(node0.isGetProp());
1226:       assertFalse(node0.isInstanceOf());
1227:       assertFalse(node0.isAnd());
1228:       assertFalse(node0.isObjectLit());
1229:       assertFalse(node0.isNot());
1230:       assertFalse(node0.isFunction());
1231:       assertFalse(node0.isInc());
1232:       assertFalse(node0.isCast());
1233:       assertFalse(node0.isContinue());
1234:       assertFalse(node0.isFalse());
1235:       assertFalse(node0.isThrow());
1236:       assertFalse(node1.isAdd());
1237:       assertTrue(node1.isString());
1238:       assertFalse(node1.isNew());
1239:       assertFalse(node1.isBlock());
1240:       assertFalse(node1.isCall());
1241:       assertFalse(node1.isWhile());
1242:       assertFalse(node1.isDo());
1243:       assertFalse(node1.isVar());
1244:       assertEquals((-1), node1.getLineno());
1245:       assertFalse(node1.isReturn());
1246:       assertFalse(node1.isOr());
1247:       assertFalse(node1.isCatch());
1248:       assertFalse(node1.isSetterDef());
1249:       assertFalse(node1.hasMoreThanOneChild());
1250:       assertFalse(node1.isTypeOf());
1251:       assertFalse(node1.isName());
1252:       assertFalse(node1.isGetElem());
1253:       assertFalse(node1.isTrue());
1254:       assertFalse(node1.isVoid());
1255:       assertFalse(node1.isNull());
1256:       assertFalse(node1.isDebugger());
1257:       assertFalse(node1.isFunction());
1258:       assertFalse(node1.isCast());
1259:       assertFalse(node1.isExprResult());
1260:       assertFalse(node1.isAssign());
1261:       assertEquals(40, node1.getType());
1262:       assertFalse(node1.isDec());
1263:       assertFalse(node1.hasChildren());
1264:       assertFalse(node1.isGetProp());
1265:       assertFalse(node1.isObjectLit());
1266:       assertFalse(node1.isContinue());
1267:       assertFalse(node1.isNot());
1268:       assertEquals((-1), node1.getSourcePosition());
1269:       assertFalse(node1.isAnd());
1270:       assertFalse(node1.isHook());
1271:       assertEquals((-1), node1.getCharno());
1272:       assertFalse(node1.isInc());
1273:       assertFalse(node1.isFalse());
1274:       assertFalse(node1.isCase());
1275:       assertFalse(node1.isThis());
1276:       assertFalse(node1.isThrow());
1277:       assertFalse(node1.isComma());
1278:       assertFalse(node1.isInstanceOf());
1279:       assertFalse(node1.isIn());
1280:       assertFalse(node1.isDelProp());
1281:       assertFalse(node1.isBreak());
1282:       assertFalse(node1.isNE());
1283:       assertFalse(node1.isIf());
1284:       assertFalse(node1.isTry());
1285:       assertFalse(node1.hasOneChild());
1286:       assertFalse(node1.isArrayLit());
1287:       assertFalse(node1.isRegExp());
1288:       assertFalse(node1.isScript());
1289:       assertFalse(node1.isWith());
1290:       assertFalse(node1.isEmpty());
1291:       assertFalse(node1.isFor());
1292:       assertFalse(node1.isDefaultCase());
1293:       assertFalse(node1.isAssignAdd());
1294:       assertEquals(0, node1.getChildCount());
1295:       assertFalse(node1.isLabel());
1296:       assertFalse(node1.isNumber());
1297:       assertFalse(node1.isGetterDef());
1298:       assertFalse(node1.isLabelName());
1299:       assertFalse(node1.isSwitch());
1300:       assertFalse(node1.isParamList());
1301:       assertFalse(node1.isStringKey());
1302:       assertFalse(node0.equals((Object)node1));
1303:       assertFalse(node1.equals((Object)node0));
1304:       assertTrue(boolean4 == boolean2);
1305:       assertTrue(boolean4 == boolean0);
1306:       assertTrue(boolean4 == boolean3);
1307:       assertTrue(boolean4 == boolean1);
1308:       
1309:       boolean boolean5 = node1.isObjectLit();
1310:       assertEquals(43, Node.IS_CONSTANT_NAME);
1311:       assertEquals(36, Node.QUOTED_PROP);
1312:       assertEquals(53, Node.INPUT_ID);
1313:       assertEquals(55, Node.INFERRED_FUNCTION);
1314:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1315:       assertEquals(37, Node.OPT_ARG_NAME);
1316:       assertEquals(56, Node.CHANGE_TIME);
1317:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1318:       assertEquals(39, Node.EMPTY_BLOCK);
1319:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1320:       assertEquals(29, Node.JSDOC_INFO_PROP);
1321:       assertEquals(8, Node.FLAG_NO_THROWS);
1322:       assertEquals(4095, Node.COLUMN_MASK);
1323:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1324:       assertEquals(57, Node.REFLECTED_OBJECT);
1325:       assertEquals(49, Node.DIRECT_EVAL);
1326:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1327:       assertEquals(48, Node.DIRECTIVES);
1328:       assertEquals(54, Node.SLASH_V);
1329:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1330:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1331:       assertEquals(30, Node.VAR_ARGS_NAME);
1332:       assertEquals(52, Node.LENGTH);
1333:       assertEquals(12, Node.COLUMN_BITS);
1334:       assertEquals(1, Node.DECR_FLAG);
1335:       assertEquals(57, Node.LAST_PROP);
1336:       assertEquals(32, Node.INCRDECR_PROP);
1337:       assertEquals(2, Node.POST_FLAG);
1338:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1339:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1340:       assertEquals(47, Node.IS_DISPATCHER);
1341:       assertEquals(50, Node.FREE_CALL);
1342:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1343:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1344:       assertEquals(46, Node.IS_NAMESPACE);
1345:       assertEquals(40, Node.ORIGINALNAME_PROP);
1346:       assertFalse(boolean5);
1347:       assertNotSame(node1, node0);
1348:       assertFalse(node1.isAdd());
1349:       assertTrue(node1.isString());
1350:       assertFalse(node1.isNew());
1351:       assertFalse(node1.isBlock());
1352:       assertFalse(node1.isCall());
1353:       assertFalse(node1.isWhile());
1354:       assertFalse(node1.isDo());
1355:       assertFalse(node1.isVar());
1356:       assertEquals((-1), node1.getLineno());
1357:       assertFalse(node1.isReturn());
1358:       assertFalse(node1.isOr());
1359:       assertFalse(node1.isCatch());
1360:       assertFalse(node1.isSetterDef());
1361:       assertFalse(node1.hasMoreThanOneChild());
1362:       assertFalse(node1.isTypeOf());
1363:       assertFalse(node1.isName());
1364:       assertFalse(node1.isGetElem());
1365:       assertFalse(node1.isTrue());
1366:       assertFalse(node1.isVoid());
1367:       assertFalse(node1.isNull());
1368:       assertFalse(node1.isDebugger());
1369:       assertFalse(node1.isFunction());
1370:       assertFalse(node1.isCast());
1371:       assertFalse(node1.isExprResult());
1372:       assertFalse(node1.isAssign());
1373:       assertEquals(40, node1.getType());
1374:       assertFalse(node1.isDec());
1375:       assertFalse(node1.hasChildren());
1376:       assertFalse(node1.isGetProp());
1377:       assertFalse(node1.isObjectLit());
1378:       assertFalse(node1.isContinue());
1379:       assertFalse(node1.isNot());
1380:       assertEquals((-1), node1.getSourcePosition());
1381:       assertFalse(node1.isAnd());
1382:       assertFalse(node1.isHook());
1383:       assertEquals((-1), node1.getCharno());
1384:       assertFalse(node1.isInc());
1385:       assertFalse(node1.isFalse());
1386:       assertFalse(node1.isCase());
1387:       assertFalse(node1.isThis());
1388:       assertFalse(node1.isThrow());
1389:       assertFalse(node1.isComma());
1390:       assertFalse(node1.isInstanceOf());
1391:       assertFalse(node1.isIn());
1392:       assertFalse(node1.isDelProp());
1393:       assertFalse(node1.isBreak());
1394:       assertFalse(node1.isNE());
1395:       assertFalse(node1.isIf());
1396:       assertFalse(node1.isTry());
1397:       assertFalse(node1.hasOneChild());
1398:       assertFalse(node1.isArrayLit());
1399:       assertFalse(node1.isRegExp());
1400:       assertFalse(node1.isScript());
1401:       assertFalse(node1.isWith());
1402:       assertFalse(node1.isEmpty());
1403:       assertFalse(node1.isFor());
1404:       assertFalse(node1.isDefaultCase());
1405:       assertFalse(node1.isAssignAdd());
1406:       assertEquals(0, node1.getChildCount());
1407:       assertFalse(node1.isLabel());
1408:       assertFalse(node1.isNumber());
1409:       assertFalse(node1.isGetterDef());
1410:       assertFalse(node1.isLabelName());
1411:       assertFalse(node1.isSwitch());
1412:       assertFalse(node1.isParamList());
1413:       assertFalse(node1.isStringKey());
1414:       assertFalse(node1.equals((Object)node0));
1415:       assertTrue(boolean5 == boolean2);
1416:       assertTrue(boolean5 == boolean3);
1417:       assertTrue(boolean5 == boolean0);
1418:       assertTrue(boolean5 == boolean1);
1419:       assertTrue(boolean5 == boolean4);
1420:       
1421:       Node node2 = node1.getParent();
1422:       assertEquals(43, Node.IS_CONSTANT_NAME);
1423:       assertEquals(36, Node.QUOTED_PROP);
1424:       assertEquals(53, Node.INPUT_ID);
1425:       assertEquals(55, Node.INFERRED_FUNCTION);
1426:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1427:       assertEquals(37, Node.OPT_ARG_NAME);
1428:       assertEquals(56, Node.CHANGE_TIME);
1429:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1430:       assertEquals(39, Node.EMPTY_BLOCK);
1431:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1432:       assertEquals(29, Node.JSDOC_INFO_PROP);
1433:       assertEquals(8, Node.FLAG_NO_THROWS);
1434:       assertEquals(4095, Node.COLUMN_MASK);
1435:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1436:       assertEquals(57, Node.REFLECTED_OBJECT);
1437:       assertEquals(49, Node.DIRECT_EVAL);
1438:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1439:       assertEquals(48, Node.DIRECTIVES);
1440:       assertEquals(54, Node.SLASH_V);
1441:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1442:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1443:       assertEquals(30, Node.VAR_ARGS_NAME);
1444:       assertEquals(52, Node.LENGTH);
1445:       assertEquals(12, Node.COLUMN_BITS);
1446:       assertEquals(1, Node.DECR_FLAG);
1447:       assertEquals(57, Node.LAST_PROP);
1448:       assertEquals(32, Node.INCRDECR_PROP);
1449:       assertEquals(2, Node.POST_FLAG);
1450:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1451:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1452:       assertEquals(47, Node.IS_DISPATCHER);
1453:       assertEquals(50, Node.FREE_CALL);
1454:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1455:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1456:       assertEquals(46, Node.IS_NAMESPACE);
1457:       assertEquals(40, Node.ORIGINALNAME_PROP);
1458:       assertNull(node2);
1459:       assertNotSame(node1, node0);
1460:       assertFalse(node1.isAdd());
1461:       assertTrue(node1.isString());
1462:       assertFalse(node1.isNew());
1463:       assertFalse(node1.isBlock());
1464:       assertFalse(node1.isCall());
1465:       assertFalse(node1.isWhile());
1466:       assertFalse(node1.isDo());
1467:       assertFalse(node1.isVar());
1468:       assertEquals((-1), node1.getLineno());
1469:       assertFalse(node1.isReturn());
1470:       assertFalse(node1.isOr());
1471:       assertFalse(node1.isCatch());
1472:       assertFalse(node1.isSetterDef());
1473:       assertFalse(node1.hasMoreThanOneChild());
1474:       assertFalse(node1.isTypeOf());
1475:       assertFalse(node1.isName());
1476:       assertFalse(node1.isGetElem());
1477:       assertFalse(node1.isTrue());
1478:       assertFalse(node1.isVoid());
1479:       assertFalse(node1.isNull());
1480:       assertFalse(node1.isDebugger());
1481:       assertFalse(node1.isFunction());
1482:       assertFalse(node1.isCast());
1483:       assertFalse(node1.isExprResult());
1484:       assertFalse(node1.isAssign());
1485:       assertEquals(40, node1.getType());
1486:       assertFalse(node1.isDec());
1487:       assertFalse(node1.hasChildren());
1488:       assertFalse(node1.isGetProp());
1489:       assertFalse(node1.isObjectLit());
1490:       assertFalse(node1.isContinue());
1491:       assertFalse(node1.isNot());
1492:       assertEquals((-1), node1.getSourcePosition());
1493:       assertFalse(node1.isAnd());
1494:       assertFalse(node1.isHook());
1495:       assertEquals((-1), node1.getCharno());
1496:       assertFalse(node1.isInc());
1497:       assertFalse(node1.isFalse());
1498:       assertFalse(node1.isCase());
1499:       assertFalse(node1.isThis());
1500:       assertFalse(node1.isThrow());
1501:       assertFalse(node1.isComma());
1502:       assertFalse(node1.isInstanceOf());
1503:       assertFalse(node1.isIn());
1504:       assertFalse(node1.isDelProp());
1505:       assertFalse(node1.isBreak());
1506:       assertFalse(node1.isNE());
1507:       assertFalse(node1.isIf());
1508:       assertFalse(node1.isTry());
1509:       assertFalse(node1.hasOneChild());
1510:       assertFalse(node1.isArrayLit());
1511:       assertFalse(node1.isRegExp());
1512:       assertFalse(node1.isScript());
1513:       assertFalse(node1.isWith());
1514:       assertFalse(node1.isEmpty());
1515:       assertFalse(node1.isFor());
1516:       assertFalse(node1.isDefaultCase());
1517:       assertFalse(node1.isAssignAdd());
1518:       assertEquals(0, node1.getChildCount());
1519:       assertFalse(node1.isLabel());
1520:       assertFalse(node1.isNumber());
1521:       assertFalse(node1.isGetterDef());
1522:       assertFalse(node1.isLabelName());
1523:       assertFalse(node1.isSwitch());
1524:       assertFalse(node1.isParamList());
1525:       assertFalse(node1.isStringKey());
1526:       assertFalse(node1.equals((Object)node0));
1527:       
1528:       boolean boolean6 = node0.isOr();
1529:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1530:       assertEquals(50, Node.FREE_CALL);
1531:       assertEquals(40, Node.ORIGINALNAME_PROP);
1532:       assertEquals(8, Node.FLAG_NO_THROWS);
1533:       assertEquals(39, Node.EMPTY_BLOCK);
1534:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1535:       assertEquals(52, Node.LENGTH);
1536:       assertEquals(48, Node.DIRECTIVES);
1537:       assertEquals(57, Node.REFLECTED_OBJECT);
1538:       assertEquals(54, Node.SLASH_V);
1539:       assertEquals(49, Node.DIRECT_EVAL);
1540:       assertEquals(1, Node.DECR_FLAG);
1541:       assertEquals(4095, Node.COLUMN_MASK);
1542:       assertEquals(32, Node.INCRDECR_PROP);
1543:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1544:       assertEquals(12, Node.COLUMN_BITS);
1545:       assertEquals(29, Node.JSDOC_INFO_PROP);
1546:       assertEquals(47, Node.IS_DISPATCHER);
1547:       assertEquals(2, Node.POST_FLAG);
1548:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1549:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1550:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1551:       assertEquals(37, Node.OPT_ARG_NAME);
1552:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1553:       assertEquals(46, Node.IS_NAMESPACE);
1554:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1555:       assertEquals(43, Node.IS_CONSTANT_NAME);
1556:       assertEquals(56, Node.CHANGE_TIME);
1557:       assertEquals(30, Node.VAR_ARGS_NAME);
1558:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1559:       assertEquals(36, Node.QUOTED_PROP);
1560:       assertEquals(55, Node.INFERRED_FUNCTION);
1561:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1562:       assertEquals(53, Node.INPUT_ID);
1563:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1564:       assertEquals(57, Node.LAST_PROP);
1565:       assertFalse(boolean6);
1566:       assertNotSame(node0, node1);
1567:       assertFalse(node0.isNumber());
1568:       assertFalse(node0.isTypeOf());
1569:       assertFalse(node0.isDec());
1570:       assertEquals(13, node0.getCharno());
1571:       assertFalse(node0.isOr());
1572:       assertFalse(node0.isGetElem());
1573:       assertEquals(106509, node0.getSourcePosition());
1574:       assertFalse(node0.isLabelName());
1575:       assertFalse(node0.isExprResult());
1576:       assertFalse(node0.isWith());
1577:       assertFalse(node0.isScript());
1578:       assertFalse(node0.hasMoreThanOneChild());
1579:       assertFalse(node0.hasOneChild());
1580:       assertFalse(node0.isAssign());
1581:       assertFalse(node0.isWhile());
1582:       assertFalse(node0.hasChildren());
1583:       assertFalse(node0.isBlock());
1584:       assertFalse(node0.isParamList());
1585:       assertFalse(node0.isComma());
1586:       assertFalse(node0.isBreak());
1587:       assertFalse(node0.isCall());
1588:       assertFalse(node0.isName());
1589:       assertFalse(node0.isNull());
1590:       assertFalse(node0.isStringKey());
1591:       assertFalse(node0.isTrue());
1592:       assertFalse(node0.isSwitch());
1593:       assertFalse(node0.isNew());
1594:       assertFalse(node0.isAdd());
1595:       assertFalse(node0.isDo());
1596:       assertEquals(0, node0.getChildCount());
1597:       assertFalse(node0.isDefaultCase());
1598:       assertFalse(node0.isLabel());
1599:       assertFalse(node0.isAssignAdd());
1600:       assertFalse(node0.isVar());
1601:       assertFalse(node0.isDelProp());
1602:       assertFalse(node0.isGetterDef());
1603:       assertFalse(node0.isIn());
1604:       assertFalse(node0.isEmpty());
1605:       assertFalse(node0.isArrayLit());
1606:       assertFalse(node0.isIf());
1607:       assertFalse(node0.isNE());
1608:       assertEquals(26, node0.getLineno());
1609:       assertFalse(node0.isDebugger());
1610:       assertEquals(4, node0.getType());
1611:       assertFalse(node0.isRegExp());
1612:       assertFalse(node0.isVoid());
1613:       assertFalse(node0.isTry());
1614:       assertFalse(node0.isString());
1615:       assertTrue(node0.isReturn());
1616:       assertFalse(node0.isCatch());
1617:       assertFalse(node0.isCase());
1618:       assertFalse(node0.isHook());
1619:       assertFalse(node0.isFor());
1620:       assertFalse(node0.isSetterDef());
1621:       assertFalse(node0.isThis());
1622:       assertFalse(node0.isGetProp());
1623:       assertFalse(node0.isInstanceOf());
1624:       assertFalse(node0.isAnd());
1625:       assertFalse(node0.isObjectLit());
1626:       assertFalse(node0.isNot());
1627:       assertFalse(node0.isFunction());
1628:       assertFalse(node0.isInc());
1629:       assertFalse(node0.isCast());
1630:       assertFalse(node0.isContinue());
1631:       assertFalse(node0.isFalse());
1632:       assertFalse(node0.isThrow());
1633:       assertTrue(boolean6 == boolean4);
1634:       assertTrue(boolean6 == boolean2);
1635:       assertTrue(boolean6 == boolean5);
1636:       assertTrue(boolean6 == boolean3);
1637:       assertTrue(boolean6 == boolean1);
1638:       assertTrue(boolean6 == boolean0);
1639:       assertFalse(node0.equals((Object)node1));
1640:       
1641:       boolean boolean7 = node0.isCatch();
1642:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1643:       assertEquals(50, Node.FREE_CALL);
1644:       assertEquals(40, Node.ORIGINALNAME_PROP);
1645:       assertEquals(8, Node.FLAG_NO_THROWS);
1646:       assertEquals(39, Node.EMPTY_BLOCK);
1647:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1648:       assertEquals(52, Node.LENGTH);
1649:       assertEquals(48, Node.DIRECTIVES);
1650:       assertEquals(57, Node.REFLECTED_OBJECT);
1651:       assertEquals(54, Node.SLASH_V);
1652:       assertEquals(49, Node.DIRECT_EVAL);
1653:       assertEquals(1, Node.DECR_FLAG);
1654:       assertEquals(4095, Node.COLUMN_MASK);
1655:       assertEquals(32, Node.INCRDECR_PROP);
1656:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1657:       assertEquals(12, Node.COLUMN_BITS);
1658:       assertEquals(29, Node.JSDOC_INFO_PROP);
1659:       assertEquals(47, Node.IS_DISPATCHER);
1660:       assertEquals(2, Node.POST_FLAG);
1661:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1662:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1663:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1664:       assertEquals(37, Node.OPT_ARG_NAME);
1665:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1666:       assertEquals(46, Node.IS_NAMESPACE);
1667:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1668:       assertEquals(43, Node.IS_CONSTANT_NAME);
1669:       assertEquals(56, Node.CHANGE_TIME);
1670:       assertEquals(30, Node.VAR_ARGS_NAME);
1671:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1672:       assertEquals(36, Node.QUOTED_PROP);
1673:       assertEquals(55, Node.INFERRED_FUNCTION);
1674:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1675:       assertEquals(53, Node.INPUT_ID);
1676:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1677:       assertEquals(57, Node.LAST_PROP);
1678:       assertFalse(boolean7);
1679:       assertNotSame(node0, node1);
1680:       assertFalse(node0.isNumber());
1681:       assertFalse(node0.isTypeOf());
1682:       assertFalse(node0.isDec());
1683:       assertEquals(13, node0.getCharno());
1684:       assertFalse(node0.isOr());
1685:       assertFalse(node0.isGetElem());
1686:       assertEquals(106509, node0.getSourcePosition());
1687:       assertFalse(node0.isLabelName());
1688:       assertFalse(node0.isExprResult());
1689:       assertFalse(node0.isWith());
1690:       assertFalse(node0.isScript());
1691:       assertFalse(node0.hasMoreThanOneChild());
1692:       assertFalse(node0.hasOneChild());
1693:       assertFalse(node0.isAssign());
1694:       assertFalse(node0.isWhile());
1695:       assertFalse(node0.hasChildren());
1696:       assertFalse(node0.isBlock());
1697:       assertFalse(node0.isParamList());
1698:       assertFalse(node0.isComma());
1699:       assertFalse(node0.isBreak());
1700:       assertFalse(node0.isCall());
1701:       assertFalse(node0.isName());
1702:       assertFalse(node0.isNull());
1703:       assertFalse(node0.isStringKey());
1704:       assertFalse(node0.isTrue());
1705:       assertFalse(node0.isSwitch());
1706:       assertFalse(node0.isNew());
1707:       assertFalse(node0.isAdd());
1708:       assertFalse(node0.isDo());
1709:       assertEquals(0, node0.getChildCount());
1710:       assertFalse(node0.isDefaultCase());
1711:       assertFalse(node0.isLabel());
1712:       assertFalse(node0.isAssignAdd());
1713:       assertFalse(node0.isVar());
1714:       assertFalse(node0.isDelProp());
1715:       assertFalse(node0.isGetterDef());
1716:       assertFalse(node0.isIn());
1717:       assertFalse(node0.isEmpty());
1718:       assertFalse(node0.isArrayLit());
1719:       assertFalse(node0.isIf());
1720:       assertFalse(node0.isNE());
1721:       assertEquals(26, node0.getLineno());
1722:       assertFalse(node0.isDebugger());
1723:       assertEquals(4, node0.getType());
1724:       assertFalse(node0.isRegExp());
1725:       assertFalse(node0.isVoid());
1726:       assertFalse(node0.isTry());
1727:       assertFalse(node0.isString());
1728:       assertTrue(node0.isReturn());
1729:       assertFalse(node0.isCatch());
1730:       assertFalse(node0.isCase());
1731:       assertFalse(node0.isHook());
1732:       assertFalse(node0.isFor());
1733:       assertFalse(node0.isSetterDef());
1734:       assertFalse(node0.isThis());
1735:       assertFalse(node0.isGetProp());
1736:       assertFalse(node0.isInstanceOf());
1737:       assertFalse(node0.isAnd());
1738:       assertFalse(node0.isObjectLit());
1739:       assertFalse(node0.isNot());
1740:       assertFalse(node0.isFunction());
1741:       assertFalse(node0.isInc());
1742:       assertFalse(node0.isCast());
1743:       assertFalse(node0.isContinue());
1744:       assertFalse(node0.isFalse());
1745:       assertFalse(node0.isThrow());
1746:       assertTrue(boolean7 == boolean6);
1747:       assertTrue(boolean7 == boolean1);
1748:       assertTrue(boolean7 == boolean5);
1749:       assertTrue(boolean7 == boolean3);
1750:       assertTrue(boolean7 == boolean0);
1751:       assertTrue(boolean7 == boolean2);
1752:       assertTrue(boolean7 == boolean4);
1753:       assertFalse(node0.equals((Object)node1));
1754:   }
1755: }
RegularFileObject[/tmp/EvoSuite_86_1629222879114/com/google/javascript/rhino/Node_86_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:39 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_86_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_86_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.common.collect.RegularImmutableSet",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.common.collect.SingletonImmutableSet",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.javascript.rhino.JSDocInfo$1",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.EmptyImmutableSet",
224:       "com.google.common.collect.Maps$ImprovedAbstractMap",
225:       "com.google.common.collect.ImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
227:       "com.google.common.collect.ImmutableList",
228:       "com.google.common.collect.SingletonImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
230:       "com.google.javascript.rhino.jstype.StringType",
231:       "com.google.javascript.rhino.Node$AbstractPropListItem",
232:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
233:       "com.google.javascript.rhino.jstype.TemplatizedType",
234:       "com.google.javascript.rhino.jstype.Visitor",
235:       "com.google.javascript.rhino.jstype.NoResolvedType",
236:       "com.google.javascript.rhino.jstype.JSTypeNative",
237:       "com.google.javascript.rhino.jstype.AllType",
238:       "com.google.common.collect.Maps",
239:       "com.google.common.collect.SetMultimap",
240:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
241:       "com.google.common.collect.Maps$EntryTransformer",
242:       "com.google.javascript.rhino.JSTypeExpression",
243:       "com.google.common.collect.Iterators$MergingIterator"
244:     );
245:   } 
246: 
247:   private static void resetClasses() {
248:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_86_tmp__ESTest_scaffolding.class.getClassLoader()); 
249: 
250:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
251:       "com.google.javascript.rhino.Node",
252:       "com.google.javascript.rhino.Node$NumberNode",
253:       "com.google.javascript.rhino.Node$StringNode",
254:       "com.google.javascript.rhino.Node$AbstractPropListItem",
255:       "com.google.javascript.rhino.Node$ObjectPropListItem",
256:       "com.google.javascript.rhino.Node$IntPropListItem",
257:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
258:       "com.google.javascript.rhino.Node$AncestorIterable",
259:       "com.google.javascript.rhino.Node$NodeMismatch",
260:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
261:       "com.google.javascript.rhino.Node$SideEffectFlags",
262:       "com.google.javascript.rhino.Token",
263:       "com.google.common.base.Preconditions",
264:       "com.google.javascript.rhino.SimpleErrorReporter",
265:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
266:       "com.google.common.base.Joiner",
267:       "com.google.common.base.Joiner$1",
268:       "com.google.common.collect.Collections2",
269:       "com.google.common.base.Joiner$MapJoiner",
270:       "com.google.common.collect.Maps",
271:       "com.google.common.collect.AbstractMultimap",
272:       "com.google.common.collect.AbstractMapBasedMultimap",
273:       "com.google.common.collect.AbstractSetMultimap",
274:       "com.google.common.collect.LinkedHashMultimap",
275:       "com.google.common.collect.AbstractMapEntry",
276:       "com.google.common.collect.ImmutableEntry",
277:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
278:       "com.google.common.collect.AbstractListMultimap",
279:       "com.google.common.collect.ArrayListMultimap",
280:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
281:       "com.google.common.collect.ImmutableCollection",
282:       "com.google.common.collect.RegularImmutableList",
283:       "com.google.common.collect.ObjectArrays",
284:       "com.google.common.collect.ImmutableList",
285:       "com.google.javascript.rhino.jstype.ModificationVisitor",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
287:       "com.google.common.collect.ImmutableCollection$Builder",
288:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
289:       "com.google.common.collect.ImmutableList$Builder",
290:       "com.google.common.collect.UnmodifiableIterator",
291:       "com.google.common.collect.UnmodifiableListIterator",
292:       "com.google.common.collect.Iterators$1",
293:       "com.google.common.collect.Iterators$2",
294:       "com.google.common.collect.Iterators",
295:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
296:       "com.google.javascript.rhino.jstype.JSType$1",
297:       "com.google.javascript.rhino.jstype.JSType",
298:       "com.google.javascript.rhino.jstype.ObjectType",
299:       "com.google.javascript.rhino.jstype.ProxyObjectType",
300:       "com.google.javascript.rhino.jstype.TemplateType",
301:       "com.google.javascript.rhino.jstype.ValueType",
302:       "com.google.javascript.rhino.jstype.BooleanType",
303:       "com.google.javascript.rhino.jstype.NullType",
304:       "com.google.javascript.rhino.jstype.NumberType",
305:       "com.google.javascript.rhino.jstype.StringType",
306:       "com.google.javascript.rhino.jstype.UnknownType",
307:       "com.google.javascript.rhino.jstype.VoidType",
308:       "com.google.javascript.rhino.jstype.AllType",
309:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
310:       "com.google.common.collect.ImmutableMap",
311:       "com.google.common.collect.ImmutableBiMap",
312:       "com.google.common.collect.EmptyImmutableBiMap",
313:       "com.google.javascript.rhino.jstype.PropertyMap$1",
314:       "com.google.javascript.rhino.jstype.PropertyMap",
315:       "com.google.javascript.rhino.jstype.FunctionType",
316:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.collect.AbstractIndexedListIterator",
338:       "com.google.common.collect.Iterators$11",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.Iterables",
348:       "com.google.javascript.rhino.jstype.TernaryValue",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.javascript.rhino.Node$AncestorIterable$1",
351:       "com.google.javascript.rhino.jstype.NamedType",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.javascript.rhino.jstype.JSType$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
356:       "com.google.common.collect.Platform",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2"
363:     );
364:   }
365: }

[MASTER] 17:54:39.766 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
assertFalse(boolean0);

boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

Node node0 = Node.newString("t4`]M|KApUSxQvO}GR", 26, 13);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertNotNull(node0);
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertTrue(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(26, node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());

node0.removeProp(13);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertTrue(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(26, node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());

boolean boolean2 = node0.wasEmptyNode();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertFalse(boolean2);
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertTrue(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(26, node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertNotNull(iterable0);
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertTrue(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(26, node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());

boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
assertFalse(boolean3);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);

node0.setType(4);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(26, node0.getLineno());
assertFalse(node0.isDebugger());
assertEquals(4, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertTrue(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());

Node node1 = Node.newString("");
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node1);
assertNotSame(node1, node0);
assertFalse(node1.isAdd());
assertTrue(node1.isString());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertEquals(40, node1.getType());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.equals((Object)node0));

InputId inputId0 = node0.getInputId();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertNull(inputId0);
assertNotSame(node0, node1);
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(26, node0.getLineno());
assertFalse(node0.isDebugger());
assertEquals(4, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertTrue(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.equals((Object)node1));

node1.detachChildren();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotSame(node1, node0);
assertFalse(node1.isAdd());
assertTrue(node1.isString());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertEquals(40, node1.getType());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.equals((Object)node0));

node1.detachChildren();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotSame(node1, node0);
assertFalse(node1.isAdd());
assertTrue(node1.isString());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertEquals(40, node1.getType());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.equals((Object)node0));

node0.setInputId((InputId) null);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertNotSame(node0, node1);
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(26, node0.getLineno());
assertFalse(node0.isDebugger());
assertEquals(4, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertTrue(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.equals((Object)node1));

boolean boolean4 = node1.isEquivalentTo(node0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(boolean4);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(26, node0.getLineno());
assertFalse(node0.isDebugger());
assertEquals(4, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertTrue(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node1.isAdd());
assertTrue(node1.isString());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertEquals(40, node1.getType());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);

boolean boolean5 = node1.isObjectLit();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(boolean5);
assertNotSame(node1, node0);
assertFalse(node1.isAdd());
assertTrue(node1.isString());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertEquals(40, node1.getType());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.equals((Object)node0));
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);

Node node2 = node1.getParent();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNull(node2);
assertNotSame(node1, node0);
assertFalse(node1.isAdd());
assertTrue(node1.isString());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertEquals(40, node1.getType());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isHook());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.equals((Object)node0));

boolean boolean6 = node0.isOr();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertFalse(boolean6);
assertNotSame(node0, node1);
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(26, node0.getLineno());
assertFalse(node0.isDebugger());
assertEquals(4, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertTrue(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean0);
assertFalse(node0.equals((Object)node1));

boolean boolean7 = node0.isCatch();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertFalse(boolean7);
assertNotSame(node0, node1);
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isParamList());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(26, node0.getLineno());
assertFalse(node0.isDebugger());
assertEquals(4, node0.getType());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isString());
assertTrue(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean4);
assertFalse(node0.equals((Object)node1));


[MASTER] 17:54:40.107 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_90_1629222880045/com/google/javascript/rhino/Node_90_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_90_1629222880045/com/google/javascript/rhino/Node_90_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:40.107 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:40.107 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:40.108 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 348
[MASTER] 17:54:40.109 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_90_1629222880045/com/google/javascript/rhino/Node_90_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:40 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.EvoSuiteFile;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_90_tmp__ESTest extends Node_90_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
25:       assertFalse(boolean0);
26:       
27:       boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
28:       assertFalse(boolean1);
29:       assertTrue(boolean1 == boolean0);
30:       
31:       Node node0 = Node.newString("/Lgw", 43, (-289));
32:       assertEquals(4095, Node.COLUMN_MASK);
33:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
34:       assertEquals(55, Node.INFERRED_FUNCTION);
35:       assertEquals(53, Node.INPUT_ID);
36:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
37:       assertEquals(29, Node.JSDOC_INFO_PROP);
38:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
39:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
40:       assertEquals(8, Node.FLAG_NO_THROWS);
41:       assertEquals(39, Node.EMPTY_BLOCK);
42:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
43:       assertEquals(52, Node.LENGTH);
44:       assertEquals(37, Node.OPT_ARG_NAME);
45:       assertEquals(48, Node.DIRECTIVES);
46:       assertEquals(36, Node.QUOTED_PROP);
47:       assertEquals(57, Node.REFLECTED_OBJECT);
48:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
49:       assertEquals(56, Node.CHANGE_TIME);
50:       assertEquals(49, Node.DIRECT_EVAL);
51:       assertEquals(30, Node.VAR_ARGS_NAME);
52:       assertEquals(1, Node.DECR_FLAG);
53:       assertEquals(15, Node.NO_SIDE_EFFECTS);
54:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
55:       assertEquals(32, Node.INCRDECR_PROP);
56:       assertEquals(2, Node.POST_FLAG);
57:       assertEquals(12, Node.COLUMN_BITS);
58:       assertEquals(57, Node.LAST_PROP);
59:       assertEquals(47, Node.IS_DISPATCHER);
60:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
61:       assertEquals(50, Node.FREE_CALL);
62:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
63:       assertEquals(40, Node.ORIGINALNAME_PROP);
64:       assertEquals(43, Node.IS_CONSTANT_NAME);
65:       assertEquals(51, Node.STATIC_SOURCE_FILE);
66:       assertEquals(46, Node.IS_NAMESPACE);
67:       assertEquals(54, Node.SLASH_V);
68:       assertNotNull(node0);
69:       assertTrue(node0.isString());
70:       assertFalse(node0.isDo());
71:       assertFalse(node0.isNew());
72:       assertFalse(node0.isAdd());
73:       assertFalse(node0.hasMoreThanOneChild());
74:       assertFalse(node0.isVar());
75:       assertFalse(node0.isContinue());
76:       assertFalse(node0.isLabel());
77:       assertFalse(node0.isAssignAdd());
78:       assertFalse(node0.isWhile());
79:       assertFalse(node0.isBlock());
80:       assertFalse(node0.isReturn());
81:       assertFalse(node0.isSetterDef());
82:       assertFalse(node0.isDec());
83:       assertFalse(node0.isTypeOf());
84:       assertEquals((-1), node0.getLineno());
85:       assertFalse(node0.isGetElem());
86:       assertFalse(node0.isCall());
87:       assertFalse(node0.isName());
88:       assertFalse(node0.isOr());
89:       assertFalse(node0.isNull());
90:       assertFalse(node0.isDebugger());
91:       assertFalse(node0.isVoid());
92:       assertFalse(node0.isFunction());
93:       assertFalse(node0.isExprResult());
94:       assertFalse(node0.isCast());
95:       assertFalse(node0.isAssign());
96:       assertFalse(node0.hasChildren());
97:       assertEquals(40, node0.getType());
98:       assertEquals((-1), node0.getSourcePosition());
99:       assertFalse(node0.isGetProp());
100:       assertFalse(node0.isAnd());
101:       assertFalse(node0.isObjectLit());
102:       assertFalse(node0.isNot());
103:       assertFalse(node0.isSwitch());
104:       assertFalse(node0.isCase());
105:       assertFalse(node0.isInc());
106:       assertFalse(node0.isFalse());
107:       assertFalse(node0.isHook());
108:       assertFalse(node0.isThrow());
109:       assertFalse(node0.isNE());
110:       assertFalse(node0.isComma());
111:       assertFalse(node0.isIf());
112:       assertFalse(node0.isDelProp());
113:       assertFalse(node0.isEmpty());
114:       assertFalse(node0.isInstanceOf());
115:       assertFalse(node0.isBreak());
116:       assertFalse(node0.isIn());
117:       assertFalse(node0.isTrue());
118:       assertFalse(node0.isDefaultCase());
119:       assertFalse(node0.isRegExp());
120:       assertFalse(node0.isTry());
121:       assertFalse(node0.isWith());
122:       assertFalse(node0.isScript());
123:       assertFalse(node0.isCatch());
124:       assertFalse(node0.hasOneChild());
125:       assertEquals(0, node0.getChildCount());
126:       assertFalse(node0.isThis());
127:       assertFalse(node0.isFor());
128:       assertFalse(node0.isParamList());
129:       assertFalse(node0.isNumber());
130:       assertFalse(node0.isGetterDef());
131:       assertFalse(node0.isLabelName());
132:       assertFalse(node0.isArrayLit());
133:       assertEquals((-1), node0.getCharno());
134:       assertFalse(node0.isStringKey());
135:       
136:       node0.removeProp(13);
137:       assertEquals(4095, Node.COLUMN_MASK);
138:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
139:       assertEquals(55, Node.INFERRED_FUNCTION);
140:       assertEquals(53, Node.INPUT_ID);
141:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
142:       assertEquals(29, Node.JSDOC_INFO_PROP);
143:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
144:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
145:       assertEquals(8, Node.FLAG_NO_THROWS);
146:       assertEquals(39, Node.EMPTY_BLOCK);
147:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
148:       assertEquals(52, Node.LENGTH);
149:       assertEquals(37, Node.OPT_ARG_NAME);
150:       assertEquals(48, Node.DIRECTIVES);
151:       assertEquals(36, Node.QUOTED_PROP);
152:       assertEquals(57, Node.REFLECTED_OBJECT);
153:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
154:       assertEquals(56, Node.CHANGE_TIME);
155:       assertEquals(49, Node.DIRECT_EVAL);
156:       assertEquals(30, Node.VAR_ARGS_NAME);
157:       assertEquals(1, Node.DECR_FLAG);
158:       assertEquals(15, Node.NO_SIDE_EFFECTS);
159:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
160:       assertEquals(32, Node.INCRDECR_PROP);
161:       assertEquals(2, Node.POST_FLAG);
162:       assertEquals(12, Node.COLUMN_BITS);
163:       assertEquals(57, Node.LAST_PROP);
164:       assertEquals(47, Node.IS_DISPATCHER);
165:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
166:       assertEquals(50, Node.FREE_CALL);
167:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
168:       assertEquals(40, Node.ORIGINALNAME_PROP);
169:       assertEquals(43, Node.IS_CONSTANT_NAME);
170:       assertEquals(51, Node.STATIC_SOURCE_FILE);
171:       assertEquals(46, Node.IS_NAMESPACE);
172:       assertEquals(54, Node.SLASH_V);
173:       assertTrue(node0.isString());
174:       assertFalse(node0.isDo());
175:       assertFalse(node0.isNew());
176:       assertFalse(node0.isAdd());
177:       assertFalse(node0.hasMoreThanOneChild());
178:       assertFalse(node0.isVar());
179:       assertFalse(node0.isContinue());
180:       assertFalse(node0.isLabel());
181:       assertFalse(node0.isAssignAdd());
182:       assertFalse(node0.isWhile());
183:       assertFalse(node0.isBlock());
184:       assertFalse(node0.isReturn());
185:       assertFalse(node0.isSetterDef());
186:       assertFalse(node0.isDec());
187:       assertFalse(node0.isTypeOf());
188:       assertEquals((-1), node0.getLineno());
189:       assertFalse(node0.isGetElem());
190:       assertFalse(node0.isCall());
191:       assertFalse(node0.isName());
192:       assertFalse(node0.isOr());
193:       assertFalse(node0.isNull());
194:       assertFalse(node0.isDebugger());
195:       assertFalse(node0.isVoid());
196:       assertFalse(node0.isFunction());
197:       assertFalse(node0.isExprResult());
198:       assertFalse(node0.isCast());
199:       assertFalse(node0.isAssign());
200:       assertFalse(node0.hasChildren());
201:       assertEquals(40, node0.getType());
202:       assertEquals((-1), node0.getSourcePosition());
203:       assertFalse(node0.isGetProp());
204:       assertFalse(node0.isAnd());
205:       assertFalse(node0.isObjectLit());
206:       assertFalse(node0.isNot());
207:       assertFalse(node0.isSwitch());
208:       assertFalse(node0.isCase());
209:       assertFalse(node0.isInc());
210:       assertFalse(node0.isFalse());
211:       assertFalse(node0.isHook());
212:       assertFalse(node0.isThrow());
213:       assertFalse(node0.isNE());
214:       assertFalse(node0.isComma());
215:       assertFalse(node0.isIf());
216:       assertFalse(node0.isDelProp());
217:       assertFalse(node0.isEmpty());
218:       assertFalse(node0.isInstanceOf());
219:       assertFalse(node0.isBreak());
220:       assertFalse(node0.isIn());
221:       assertFalse(node0.isTrue());
222:       assertFalse(node0.isDefaultCase());
223:       assertFalse(node0.isRegExp());
224:       assertFalse(node0.isTry());
225:       assertFalse(node0.isWith());
226:       assertFalse(node0.isScript());
227:       assertFalse(node0.isCatch());
228:       assertFalse(node0.hasOneChild());
229:       assertEquals(0, node0.getChildCount());
230:       assertFalse(node0.isThis());
231:       assertFalse(node0.isFor());
232:       assertFalse(node0.isParamList());
233:       assertFalse(node0.isNumber());
234:       assertFalse(node0.isGetterDef());
235:       assertFalse(node0.isLabelName());
236:       assertFalse(node0.isArrayLit());
237:       assertEquals((-1), node0.getCharno());
238:       assertFalse(node0.isStringKey());
239:       
240:       boolean boolean2 = node0.wasEmptyNode();
241:       assertEquals(4095, Node.COLUMN_MASK);
242:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
243:       assertEquals(55, Node.INFERRED_FUNCTION);
244:       assertEquals(53, Node.INPUT_ID);
245:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
246:       assertEquals(29, Node.JSDOC_INFO_PROP);
247:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
248:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
249:       assertEquals(8, Node.FLAG_NO_THROWS);
250:       assertEquals(39, Node.EMPTY_BLOCK);
251:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
252:       assertEquals(52, Node.LENGTH);
253:       assertEquals(37, Node.OPT_ARG_NAME);
254:       assertEquals(48, Node.DIRECTIVES);
255:       assertEquals(36, Node.QUOTED_PROP);
256:       assertEquals(57, Node.REFLECTED_OBJECT);
257:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
258:       assertEquals(56, Node.CHANGE_TIME);
259:       assertEquals(49, Node.DIRECT_EVAL);
260:       assertEquals(30, Node.VAR_ARGS_NAME);
261:       assertEquals(1, Node.DECR_FLAG);
262:       assertEquals(15, Node.NO_SIDE_EFFECTS);
263:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
264:       assertEquals(32, Node.INCRDECR_PROP);
265:       assertEquals(2, Node.POST_FLAG);
266:       assertEquals(12, Node.COLUMN_BITS);
267:       assertEquals(57, Node.LAST_PROP);
268:       assertEquals(47, Node.IS_DISPATCHER);
269:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
270:       assertEquals(50, Node.FREE_CALL);
271:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
272:       assertEquals(40, Node.ORIGINALNAME_PROP);
273:       assertEquals(43, Node.IS_CONSTANT_NAME);
274:       assertEquals(51, Node.STATIC_SOURCE_FILE);
275:       assertEquals(46, Node.IS_NAMESPACE);
276:       assertEquals(54, Node.SLASH_V);
277:       assertFalse(boolean2);
278:       assertTrue(node0.isString());
279:       assertFalse(node0.isDo());
280:       assertFalse(node0.isNew());
281:       assertFalse(node0.isAdd());
282:       assertFalse(node0.hasMoreThanOneChild());
283:       assertFalse(node0.isVar());
284:       assertFalse(node0.isContinue());
285:       assertFalse(node0.isLabel());
286:       assertFalse(node0.isAssignAdd());
287:       assertFalse(node0.isWhile());
288:       assertFalse(node0.isBlock());
289:       assertFalse(node0.isReturn());
290:       assertFalse(node0.isSetterDef());
291:       assertFalse(node0.isDec());
292:       assertFalse(node0.isTypeOf());
293:       assertEquals((-1), node0.getLineno());
294:       assertFalse(node0.isGetElem());
295:       assertFalse(node0.isCall());
296:       assertFalse(node0.isName());
297:       assertFalse(node0.isOr());
298:       assertFalse(node0.isNull());
299:       assertFalse(node0.isDebugger());
300:       assertFalse(node0.isVoid());
301:       assertFalse(node0.isFunction());
302:       assertFalse(node0.isExprResult());
303:       assertFalse(node0.isCast());
304:       assertFalse(node0.isAssign());
305:       assertFalse(node0.hasChildren());
306:       assertEquals(40, node0.getType());
307:       assertEquals((-1), node0.getSourcePosition());
308:       assertFalse(node0.isGetProp());
309:       assertFalse(node0.isAnd());
310:       assertFalse(node0.isObjectLit());
311:       assertFalse(node0.isNot());
312:       assertFalse(node0.isSwitch());
313:       assertFalse(node0.isCase());
314:       assertFalse(node0.isInc());
315:       assertFalse(node0.isFalse());
316:       assertFalse(node0.isHook());
317:       assertFalse(node0.isThrow());
318:       assertFalse(node0.isNE());
319:       assertFalse(node0.isComma());
320:       assertFalse(node0.isIf());
321:       assertFalse(node0.isDelProp());
322:       assertFalse(node0.isEmpty());
323:       assertFalse(node0.isInstanceOf());
324:       assertFalse(node0.isBreak());
325:       assertFalse(node0.isIn());
326:       assertFalse(node0.isTrue());
327:       assertFalse(node0.isDefaultCase());
328:       assertFalse(node0.isRegExp());
329:       assertFalse(node0.isTry());
330:       assertFalse(node0.isWith());
331:       assertFalse(node0.isScript());
332:       assertFalse(node0.isCatch());
333:       assertFalse(node0.hasOneChild());
334:       assertEquals(0, node0.getChildCount());
335:       assertFalse(node0.isThis());
336:       assertFalse(node0.isFor());
337:       assertFalse(node0.isParamList());
338:       assertFalse(node0.isNumber());
339:       assertFalse(node0.isGetterDef());
340:       assertFalse(node0.isLabelName());
341:       assertFalse(node0.isArrayLit());
342:       assertEquals((-1), node0.getCharno());
343:       assertFalse(node0.isStringKey());
344:       assertTrue(boolean2 == boolean0);
345:       assertTrue(boolean2 == boolean1);
346:       
347:       Iterable<Node> iterable0 = node0.children();
348:       assertFalse(iterable0.contains(node0));
349:       assertEquals(4095, Node.COLUMN_MASK);
350:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
351:       assertEquals(55, Node.INFERRED_FUNCTION);
352:       assertEquals(53, Node.INPUT_ID);
353:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
354:       assertEquals(29, Node.JSDOC_INFO_PROP);
355:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
356:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
357:       assertEquals(8, Node.FLAG_NO_THROWS);
358:       assertEquals(39, Node.EMPTY_BLOCK);
359:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
360:       assertEquals(52, Node.LENGTH);
361:       assertEquals(37, Node.OPT_ARG_NAME);
362:       assertEquals(48, Node.DIRECTIVES);
363:       assertEquals(36, Node.QUOTED_PROP);
364:       assertEquals(57, Node.REFLECTED_OBJECT);
365:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
366:       assertEquals(56, Node.CHANGE_TIME);
367:       assertEquals(49, Node.DIRECT_EVAL);
368:       assertEquals(30, Node.VAR_ARGS_NAME);
369:       assertEquals(1, Node.DECR_FLAG);
370:       assertEquals(15, Node.NO_SIDE_EFFECTS);
371:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
372:       assertEquals(32, Node.INCRDECR_PROP);
373:       assertEquals(2, Node.POST_FLAG);
374:       assertEquals(12, Node.COLUMN_BITS);
375:       assertEquals(57, Node.LAST_PROP);
376:       assertEquals(47, Node.IS_DISPATCHER);
377:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
378:       assertEquals(50, Node.FREE_CALL);
379:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
380:       assertEquals(40, Node.ORIGINALNAME_PROP);
381:       assertEquals(43, Node.IS_CONSTANT_NAME);
382:       assertEquals(51, Node.STATIC_SOURCE_FILE);
383:       assertEquals(46, Node.IS_NAMESPACE);
384:       assertEquals(54, Node.SLASH_V);
385:       assertNotNull(iterable0);
386:       assertTrue(node0.isString());
387:       assertFalse(node0.isDo());
388:       assertFalse(node0.isNew());
389:       assertFalse(node0.isAdd());
390:       assertFalse(node0.hasMoreThanOneChild());
391:       assertFalse(node0.isVar());
392:       assertFalse(node0.isContinue());
393:       assertFalse(node0.isLabel());
394:       assertFalse(node0.isAssignAdd());
395:       assertFalse(node0.isWhile());
396:       assertFalse(node0.isBlock());
397:       assertFalse(node0.isReturn());
398:       assertFalse(node0.isSetterDef());
399:       assertFalse(node0.isDec());
400:       assertFalse(node0.isTypeOf());
401:       assertEquals((-1), node0.getLineno());
402:       assertFalse(node0.isGetElem());
403:       assertFalse(node0.isCall());
404:       assertFalse(node0.isName());
405:       assertFalse(node0.isOr());
406:       assertFalse(node0.isNull());
407:       assertFalse(node0.isDebugger());
408:       assertFalse(node0.isVoid());
409:       assertFalse(node0.isFunction());
410:       assertFalse(node0.isExprResult());
411:       assertFalse(node0.isCast());
412:       assertFalse(node0.isAssign());
413:       assertFalse(node0.hasChildren());
414:       assertEquals(40, node0.getType());
415:       assertEquals((-1), node0.getSourcePosition());
416:       assertFalse(node0.isGetProp());
417:       assertFalse(node0.isAnd());
418:       assertFalse(node0.isObjectLit());
419:       assertFalse(node0.isNot());
420:       assertFalse(node0.isSwitch());
421:       assertFalse(node0.isCase());
422:       assertFalse(node0.isInc());
423:       assertFalse(node0.isFalse());
424:       assertFalse(node0.isHook());
425:       assertFalse(node0.isThrow());
426:       assertFalse(node0.isNE());
427:       assertFalse(node0.isComma());
428:       assertFalse(node0.isIf());
429:       assertFalse(node0.isDelProp());
430:       assertFalse(node0.isEmpty());
431:       assertFalse(node0.isInstanceOf());
432:       assertFalse(node0.isBreak());
433:       assertFalse(node0.isIn());
434:       assertFalse(node0.isTrue());
435:       assertFalse(node0.isDefaultCase());
436:       assertFalse(node0.isRegExp());
437:       assertFalse(node0.isTry());
438:       assertFalse(node0.isWith());
439:       assertFalse(node0.isScript());
440:       assertFalse(node0.isCatch());
441:       assertFalse(node0.hasOneChild());
442:       assertEquals(0, node0.getChildCount());
443:       assertFalse(node0.isThis());
444:       assertFalse(node0.isFor());
445:       assertFalse(node0.isParamList());
446:       assertFalse(node0.isNumber());
447:       assertFalse(node0.isGetterDef());
448:       assertFalse(node0.isLabelName());
449:       assertFalse(node0.isArrayLit());
450:       assertEquals((-1), node0.getCharno());
451:       assertFalse(node0.isStringKey());
452:       
453:       boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
454:       assertFalse(boolean3);
455:       assertTrue(boolean3 == boolean0);
456:       assertTrue(boolean3 == boolean1);
457:       assertTrue(boolean3 == boolean2);
458:       
459:       node0.setType(1069);
460:       assertEquals(4095, Node.COLUMN_MASK);
461:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
462:       assertEquals(55, Node.INFERRED_FUNCTION);
463:       assertEquals(53, Node.INPUT_ID);
464:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
465:       assertEquals(29, Node.JSDOC_INFO_PROP);
466:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
467:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
468:       assertEquals(8, Node.FLAG_NO_THROWS);
469:       assertEquals(39, Node.EMPTY_BLOCK);
470:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
471:       assertEquals(52, Node.LENGTH);
472:       assertEquals(37, Node.OPT_ARG_NAME);
473:       assertEquals(48, Node.DIRECTIVES);
474:       assertEquals(36, Node.QUOTED_PROP);
475:       assertEquals(57, Node.REFLECTED_OBJECT);
476:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
477:       assertEquals(56, Node.CHANGE_TIME);
478:       assertEquals(49, Node.DIRECT_EVAL);
479:       assertEquals(30, Node.VAR_ARGS_NAME);
480:       assertEquals(1, Node.DECR_FLAG);
481:       assertEquals(15, Node.NO_SIDE_EFFECTS);
482:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
483:       assertEquals(32, Node.INCRDECR_PROP);
484:       assertEquals(2, Node.POST_FLAG);
485:       assertEquals(12, Node.COLUMN_BITS);
486:       assertEquals(57, Node.LAST_PROP);
487:       assertEquals(47, Node.IS_DISPATCHER);
488:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
489:       assertEquals(50, Node.FREE_CALL);
490:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
491:       assertEquals(40, Node.ORIGINALNAME_PROP);
492:       assertEquals(43, Node.IS_CONSTANT_NAME);
493:       assertEquals(51, Node.STATIC_SOURCE_FILE);
494:       assertEquals(46, Node.IS_NAMESPACE);
495:       assertEquals(54, Node.SLASH_V);
496:       assertFalse(node0.isDo());
497:       assertFalse(node0.isNew());
498:       assertFalse(node0.isAdd());
499:       assertFalse(node0.hasMoreThanOneChild());
500:       assertFalse(node0.isVar());
501:       assertFalse(node0.isContinue());
502:       assertFalse(node0.isLabel());
503:       assertFalse(node0.isAssignAdd());
504:       assertFalse(node0.isWhile());
505:       assertFalse(node0.isBlock());
506:       assertFalse(node0.isReturn());
507:       assertFalse(node0.isSetterDef());
508:       assertFalse(node0.isDec());
509:       assertFalse(node0.isTypeOf());
510:       assertEquals((-1), node0.getLineno());
511:       assertFalse(node0.isGetElem());
512:       assertFalse(node0.isCall());
513:       assertFalse(node0.isName());
514:       assertFalse(node0.isOr());
515:       assertFalse(node0.isNull());
516:       assertFalse(node0.isDebugger());
517:       assertFalse(node0.isVoid());
518:       assertFalse(node0.isFunction());
519:       assertFalse(node0.isExprResult());
520:       assertFalse(node0.isCast());
521:       assertFalse(node0.isAssign());
522:       assertFalse(node0.hasChildren());
523:       assertEquals((-1), node0.getSourcePosition());
524:       assertFalse(node0.isGetProp());
525:       assertFalse(node0.isAnd());
526:       assertFalse(node0.isObjectLit());
527:       assertFalse(node0.isNot());
528:       assertFalse(node0.isSwitch());
529:       assertFalse(node0.isCase());
530:       assertFalse(node0.isString());
531:       assertFalse(node0.isInc());
532:       assertFalse(node0.isFalse());
533:       assertEquals(1069, node0.getType());
534:       assertFalse(node0.isHook());
535:       assertFalse(node0.isThrow());
536:       assertFalse(node0.isNE());
537:       assertFalse(node0.isComma());
538:       assertFalse(node0.isIf());
539:       assertFalse(node0.isDelProp());
540:       assertFalse(node0.isEmpty());
541:       assertFalse(node0.isInstanceOf());
542:       assertFalse(node0.isBreak());
543:       assertFalse(node0.isIn());
544:       assertFalse(node0.isTrue());
545:       assertFalse(node0.isDefaultCase());
546:       assertFalse(node0.isRegExp());
547:       assertFalse(node0.isTry());
548:       assertFalse(node0.isWith());
549:       assertFalse(node0.isScript());
550:       assertFalse(node0.isCatch());
551:       assertFalse(node0.hasOneChild());
552:       assertEquals(0, node0.getChildCount());
553:       assertFalse(node0.isThis());
554:       assertFalse(node0.isFor());
555:       assertFalse(node0.isParamList());
556:       assertFalse(node0.isNumber());
557:       assertFalse(node0.isGetterDef());
558:       assertFalse(node0.isLabelName());
559:       assertFalse(node0.isArrayLit());
560:       assertEquals((-1), node0.getCharno());
561:       assertFalse(node0.isStringKey());
562:       
563:       boolean boolean4 = node0.isTry();
564:       assertEquals(4095, Node.COLUMN_MASK);
565:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
566:       assertEquals(55, Node.INFERRED_FUNCTION);
567:       assertEquals(53, Node.INPUT_ID);
568:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
569:       assertEquals(29, Node.JSDOC_INFO_PROP);
570:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
571:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
572:       assertEquals(8, Node.FLAG_NO_THROWS);
573:       assertEquals(39, Node.EMPTY_BLOCK);
574:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
575:       assertEquals(52, Node.LENGTH);
576:       assertEquals(37, Node.OPT_ARG_NAME);
577:       assertEquals(48, Node.DIRECTIVES);
578:       assertEquals(36, Node.QUOTED_PROP);
579:       assertEquals(57, Node.REFLECTED_OBJECT);
580:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
581:       assertEquals(56, Node.CHANGE_TIME);
582:       assertEquals(49, Node.DIRECT_EVAL);
583:       assertEquals(30, Node.VAR_ARGS_NAME);
584:       assertEquals(1, Node.DECR_FLAG);
585:       assertEquals(15, Node.NO_SIDE_EFFECTS);
586:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
587:       assertEquals(32, Node.INCRDECR_PROP);
588:       assertEquals(2, Node.POST_FLAG);
589:       assertEquals(12, Node.COLUMN_BITS);
590:       assertEquals(57, Node.LAST_PROP);
591:       assertEquals(47, Node.IS_DISPATCHER);
592:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
593:       assertEquals(50, Node.FREE_CALL);
594:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
595:       assertEquals(40, Node.ORIGINALNAME_PROP);
596:       assertEquals(43, Node.IS_CONSTANT_NAME);
597:       assertEquals(51, Node.STATIC_SOURCE_FILE);
598:       assertEquals(46, Node.IS_NAMESPACE);
599:       assertEquals(54, Node.SLASH_V);
600:       assertFalse(boolean4);
601:       assertFalse(node0.isDo());
602:       assertFalse(node0.isNew());
603:       assertFalse(node0.isAdd());
604:       assertFalse(node0.hasMoreThanOneChild());
605:       assertFalse(node0.isVar());
606:       assertFalse(node0.isContinue());
607:       assertFalse(node0.isLabel());
608:       assertFalse(node0.isAssignAdd());
609:       assertFalse(node0.isWhile());
610:       assertFalse(node0.isBlock());
611:       assertFalse(node0.isReturn());
612:       assertFalse(node0.isSetterDef());
613:       assertFalse(node0.isDec());
614:       assertFalse(node0.isTypeOf());
615:       assertEquals((-1), node0.getLineno());
616:       assertFalse(node0.isGetElem());
617:       assertFalse(node0.isCall());
618:       assertFalse(node0.isName());
619:       assertFalse(node0.isOr());
620:       assertFalse(node0.isNull());
621:       assertFalse(node0.isDebugger());
622:       assertFalse(node0.isVoid());
623:       assertFalse(node0.isFunction());
624:       assertFalse(node0.isExprResult());
625:       assertFalse(node0.isCast());
626:       assertFalse(node0.isAssign());
627:       assertFalse(node0.hasChildren());
628:       assertEquals((-1), node0.getSourcePosition());
629:       assertFalse(node0.isGetProp());
630:       assertFalse(node0.isAnd());
631:       assertFalse(node0.isObjectLit());
632:       assertFalse(node0.isNot());
633:       assertFalse(node0.isSwitch());
634:       assertFalse(node0.isCase());
635:       assertFalse(node0.isString());
636:       assertFalse(node0.isInc());
637:       assertFalse(node0.isFalse());
638:       assertEquals(1069, node0.getType());
639:       assertFalse(node0.isHook());
640:       assertFalse(node0.isThrow());
641:       assertFalse(node0.isNE());
642:       assertFalse(node0.isComma());
643:       assertFalse(node0.isIf());
644:       assertFalse(node0.isDelProp());
645:       assertFalse(node0.isEmpty());
646:       assertFalse(node0.isInstanceOf());
647:       assertFalse(node0.isBreak());
648:       assertFalse(node0.isIn());
649:       assertFalse(node0.isTrue());
650:       assertFalse(node0.isDefaultCase());
651:       assertFalse(node0.isRegExp());
652:       assertFalse(node0.isTry());
653:       assertFalse(node0.isWith());
654:       assertFalse(node0.isScript());
655:       assertFalse(node0.isCatch());
656:       assertFalse(node0.hasOneChild());
657:       assertEquals(0, node0.getChildCount());
658:       assertFalse(node0.isThis());
659:       assertFalse(node0.isFor());
660:       assertFalse(node0.isParamList());
661:       assertFalse(node0.isNumber());
662:       assertFalse(node0.isGetterDef());
663:       assertFalse(node0.isLabelName());
664:       assertFalse(node0.isArrayLit());
665:       assertEquals((-1), node0.getCharno());
666:       assertFalse(node0.isStringKey());
667:       assertTrue(boolean4 == boolean1);
668:       assertTrue(boolean4 == boolean3);
669:       assertTrue(boolean4 == boolean2);
670:       assertTrue(boolean4 == boolean0);
671:       
672:       // Undeclared exception!
673:       try { 
674:         Node.newString((String) null);
675:         fail("Expecting exception: IllegalArgumentException");
676:       
677:       } catch(IllegalArgumentException e) {
678:          //
679:          // StringNode: str is null
680:          //
681:          verifyException("com.google.javascript.rhino.Node$StringNode", e);
682:       }
683:   }
684: }
RegularFileObject[/tmp/EvoSuite_90_1629222880045/com/google/javascript/rhino/Node_90_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:40 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_90_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_90_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.common.collect.RegularImmutableSet",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.common.collect.SingletonImmutableSet",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.javascript.rhino.JSDocInfo$1",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.EmptyImmutableSet",
224:       "com.google.common.collect.Maps$ImprovedAbstractMap",
225:       "com.google.common.collect.ImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
227:       "com.google.common.collect.ImmutableList",
228:       "com.google.common.collect.SingletonImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
230:       "com.google.javascript.rhino.jstype.StringType",
231:       "com.google.javascript.rhino.Node$AbstractPropListItem",
232:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
233:       "com.google.javascript.rhino.jstype.TemplatizedType",
234:       "com.google.javascript.rhino.jstype.Visitor",
235:       "com.google.javascript.rhino.jstype.NoResolvedType",
236:       "com.google.javascript.rhino.jstype.JSTypeNative",
237:       "com.google.javascript.rhino.jstype.AllType",
238:       "com.google.common.collect.Maps",
239:       "com.google.common.collect.SetMultimap",
240:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
241:       "com.google.common.collect.Maps$EntryTransformer",
242:       "com.google.javascript.rhino.JSTypeExpression",
243:       "com.google.common.collect.Iterators$MergingIterator"
244:     );
245:   } 
246: 
247:   private static void resetClasses() {
248:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_90_tmp__ESTest_scaffolding.class.getClassLoader()); 
249: 
250:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
251:       "com.google.javascript.rhino.Node",
252:       "com.google.javascript.rhino.Node$NumberNode",
253:       "com.google.javascript.rhino.Node$StringNode",
254:       "com.google.javascript.rhino.Node$AbstractPropListItem",
255:       "com.google.javascript.rhino.Node$ObjectPropListItem",
256:       "com.google.javascript.rhino.Node$IntPropListItem",
257:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
258:       "com.google.javascript.rhino.Node$AncestorIterable",
259:       "com.google.javascript.rhino.Node$NodeMismatch",
260:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
261:       "com.google.javascript.rhino.Node$SideEffectFlags",
262:       "com.google.javascript.rhino.Token",
263:       "com.google.common.base.Preconditions",
264:       "com.google.javascript.rhino.SimpleErrorReporter",
265:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
266:       "com.google.common.base.Joiner",
267:       "com.google.common.base.Joiner$1",
268:       "com.google.common.collect.Collections2",
269:       "com.google.common.base.Joiner$MapJoiner",
270:       "com.google.common.collect.Maps",
271:       "com.google.common.collect.AbstractMultimap",
272:       "com.google.common.collect.AbstractMapBasedMultimap",
273:       "com.google.common.collect.AbstractSetMultimap",
274:       "com.google.common.collect.LinkedHashMultimap",
275:       "com.google.common.collect.AbstractMapEntry",
276:       "com.google.common.collect.ImmutableEntry",
277:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
278:       "com.google.common.collect.AbstractListMultimap",
279:       "com.google.common.collect.ArrayListMultimap",
280:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
281:       "com.google.common.collect.ImmutableCollection",
282:       "com.google.common.collect.RegularImmutableList",
283:       "com.google.common.collect.ObjectArrays",
284:       "com.google.common.collect.ImmutableList",
285:       "com.google.javascript.rhino.jstype.ModificationVisitor",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
287:       "com.google.common.collect.ImmutableCollection$Builder",
288:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
289:       "com.google.common.collect.ImmutableList$Builder",
290:       "com.google.common.collect.UnmodifiableIterator",
291:       "com.google.common.collect.UnmodifiableListIterator",
292:       "com.google.common.collect.Iterators$1",
293:       "com.google.common.collect.Iterators$2",
294:       "com.google.common.collect.Iterators",
295:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
296:       "com.google.javascript.rhino.jstype.JSType$1",
297:       "com.google.javascript.rhino.jstype.JSType",
298:       "com.google.javascript.rhino.jstype.ObjectType",
299:       "com.google.javascript.rhino.jstype.ProxyObjectType",
300:       "com.google.javascript.rhino.jstype.TemplateType",
301:       "com.google.javascript.rhino.jstype.ValueType",
302:       "com.google.javascript.rhino.jstype.BooleanType",
303:       "com.google.javascript.rhino.jstype.NullType",
304:       "com.google.javascript.rhino.jstype.NumberType",
305:       "com.google.javascript.rhino.jstype.StringType",
306:       "com.google.javascript.rhino.jstype.UnknownType",
307:       "com.google.javascript.rhino.jstype.VoidType",
308:       "com.google.javascript.rhino.jstype.AllType",
309:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
310:       "com.google.common.collect.ImmutableMap",
311:       "com.google.common.collect.ImmutableBiMap",
312:       "com.google.common.collect.EmptyImmutableBiMap",
313:       "com.google.javascript.rhino.jstype.PropertyMap$1",
314:       "com.google.javascript.rhino.jstype.PropertyMap",
315:       "com.google.javascript.rhino.jstype.FunctionType",
316:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.collect.AbstractIndexedListIterator",
338:       "com.google.common.collect.Iterators$11",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.Iterables",
348:       "com.google.javascript.rhino.jstype.TernaryValue",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.javascript.rhino.Node$AncestorIterable$1",
351:       "com.google.javascript.rhino.jstype.NamedType",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.javascript.rhino.jstype.JSType$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
356:       "com.google.common.collect.Platform",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2"
363:     );
364:   }
365: }

[MASTER] 17:54:40.120 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
assertFalse(boolean0);

boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

Node node0 = Node.newString("/Lgw", 43, (-289));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotNull(node0);
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());

node0.removeProp(13);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());

boolean boolean2 = node0.wasEmptyNode();
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(boolean2);
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotNull(iterable0);
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());

boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
assertFalse(boolean3);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);

node0.setType(1069);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertEquals(1069, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());

boolean boolean4 = node0.isTry();
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(boolean4);
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isVar());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertEquals(1069, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);

Node.newString((String) null);

[MASTER] 17:54:42.283 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_98_1629222882237/com/google/javascript/rhino/Node_98_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_98_1629222882237/com/google/javascript/rhino/Node_98_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:42.284 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:42.284 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:42.284 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 354
[MASTER] 17:54:42.285 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_98_1629222882237/com/google/javascript/rhino/Node_98_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:42 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.EvoSuiteFile;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_98_tmp__ESTest extends Node_98_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
25:       assertFalse(boolean0);
26:       
27:       boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
28:       assertFalse(boolean1);
29:       assertTrue(boolean1 == boolean0);
30:       
31:       boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
32:       assertFalse(boolean2);
33:       assertTrue(boolean2 == boolean0);
34:       assertTrue(boolean2 == boolean1);
35:       
36:       Node node0 = Node.newString("t4`]M|KApUSxQvO}GR", 26, 13);
37:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
38:       assertEquals(43, Node.IS_CONSTANT_NAME);
39:       assertEquals(36, Node.QUOTED_PROP);
40:       assertEquals(53, Node.INPUT_ID);
41:       assertEquals(55, Node.INFERRED_FUNCTION);
42:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
43:       assertEquals(29, Node.JSDOC_INFO_PROP);
44:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
45:       assertEquals(8, Node.FLAG_NO_THROWS);
46:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
47:       assertEquals(37, Node.OPT_ARG_NAME);
48:       assertEquals(56, Node.CHANGE_TIME);
49:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
50:       assertEquals(48, Node.DIRECTIVES);
51:       assertEquals(32, Node.INCRDECR_PROP);
52:       assertEquals(4095, Node.COLUMN_MASK);
53:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
54:       assertEquals(12, Node.COLUMN_BITS);
55:       assertEquals(15, Node.NO_SIDE_EFFECTS);
56:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
57:       assertEquals(54, Node.SLASH_V);
58:       assertEquals(49, Node.DIRECT_EVAL);
59:       assertEquals(57, Node.LAST_PROP);
60:       assertEquals(1, Node.DECR_FLAG);
61:       assertEquals(51, Node.STATIC_SOURCE_FILE);
62:       assertEquals(46, Node.IS_NAMESPACE);
63:       assertEquals(57, Node.REFLECTED_OBJECT);
64:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
65:       assertEquals(52, Node.LENGTH);
66:       assertEquals(50, Node.FREE_CALL);
67:       assertEquals(2, Node.POST_FLAG);
68:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
69:       assertEquals(39, Node.EMPTY_BLOCK);
70:       assertEquals(47, Node.IS_DISPATCHER);
71:       assertEquals(40, Node.ORIGINALNAME_PROP);
72:       assertEquals(30, Node.VAR_ARGS_NAME);
73:       assertNotNull(node0);
74:       assertFalse(node0.isAdd());
75:       assertFalse(node0.isNew());
76:       assertFalse(node0.isBlock());
77:       assertFalse(node0.isVar());
78:       assertFalse(node0.isName());
79:       assertFalse(node0.isStringKey());
80:       assertTrue(node0.isString());
81:       assertFalse(node0.isDo());
82:       assertFalse(node0.isNull());
83:       assertFalse(node0.isSetterDef());
84:       assertFalse(node0.isReturn());
85:       assertFalse(node0.isOr());
86:       assertFalse(node0.isWhile());
87:       assertFalse(node0.isAssign());
88:       assertFalse(node0.isGetElem());
89:       assertFalse(node0.isDec());
90:       assertFalse(node0.hasChildren());
91:       assertFalse(node0.isCatch());
92:       assertFalse(node0.isCall());
93:       assertFalse(node0.isRegExp());
94:       assertFalse(node0.isTypeOf());
95:       assertFalse(node0.hasMoreThanOneChild());
96:       assertFalse(node0.isTry());
97:       assertFalse(node0.hasOneChild());
98:       assertFalse(node0.isArrayLit());
99:       assertFalse(node0.isTrue());
100:       assertFalse(node0.isVoid());
101:       assertFalse(node0.isDefaultCase());
102:       assertFalse(node0.isEmpty());
103:       assertFalse(node0.isGetterDef());
104:       assertFalse(node0.isScript());
105:       assertFalse(node0.isNumber());
106:       assertEquals(0, node0.getChildCount());
107:       assertFalse(node0.isLabel());
108:       assertFalse(node0.isParamList());
109:       assertFalse(node0.isAssignAdd());
110:       assertFalse(node0.isLabelName());
111:       assertFalse(node0.isHook());
112:       assertFalse(node0.isThrow());
113:       assertFalse(node0.isSwitch());
114:       assertFalse(node0.isCase());
115:       assertFalse(node0.isInc());
116:       assertFalse(node0.isIn());
117:       assertFalse(node0.isGetProp());
118:       assertFalse(node0.isThis());
119:       assertFalse(node0.isNE());
120:       assertEquals(26, node0.getLineno());
121:       assertFalse(node0.isIf());
122:       assertFalse(node0.isDelProp());
123:       assertFalse(node0.isFor());
124:       assertFalse(node0.isBreak());
125:       assertFalse(node0.isExprResult());
126:       assertFalse(node0.isComma());
127:       assertFalse(node0.isInstanceOf());
128:       assertFalse(node0.isWith());
129:       assertFalse(node0.isDebugger());
130:       assertFalse(node0.isNot());
131:       assertFalse(node0.isObjectLit());
132:       assertEquals(106509, node0.getSourcePosition());
133:       assertEquals(13, node0.getCharno());
134:       assertFalse(node0.isAnd());
135:       assertEquals(40, node0.getType());
136:       assertFalse(node0.isFunction());
137:       assertFalse(node0.isCast());
138:       assertFalse(node0.isFalse());
139:       assertFalse(node0.isContinue());
140:       
141:       node0.removeProp(13);
142:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
143:       assertEquals(43, Node.IS_CONSTANT_NAME);
144:       assertEquals(36, Node.QUOTED_PROP);
145:       assertEquals(53, Node.INPUT_ID);
146:       assertEquals(55, Node.INFERRED_FUNCTION);
147:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
148:       assertEquals(29, Node.JSDOC_INFO_PROP);
149:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
150:       assertEquals(8, Node.FLAG_NO_THROWS);
151:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
152:       assertEquals(37, Node.OPT_ARG_NAME);
153:       assertEquals(56, Node.CHANGE_TIME);
154:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
155:       assertEquals(48, Node.DIRECTIVES);
156:       assertEquals(32, Node.INCRDECR_PROP);
157:       assertEquals(4095, Node.COLUMN_MASK);
158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
159:       assertEquals(12, Node.COLUMN_BITS);
160:       assertEquals(15, Node.NO_SIDE_EFFECTS);
161:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
162:       assertEquals(54, Node.SLASH_V);
163:       assertEquals(49, Node.DIRECT_EVAL);
164:       assertEquals(57, Node.LAST_PROP);
165:       assertEquals(1, Node.DECR_FLAG);
166:       assertEquals(51, Node.STATIC_SOURCE_FILE);
167:       assertEquals(46, Node.IS_NAMESPACE);
168:       assertEquals(57, Node.REFLECTED_OBJECT);
169:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
170:       assertEquals(52, Node.LENGTH);
171:       assertEquals(50, Node.FREE_CALL);
172:       assertEquals(2, Node.POST_FLAG);
173:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
174:       assertEquals(39, Node.EMPTY_BLOCK);
175:       assertEquals(47, Node.IS_DISPATCHER);
176:       assertEquals(40, Node.ORIGINALNAME_PROP);
177:       assertEquals(30, Node.VAR_ARGS_NAME);
178:       assertFalse(node0.isAdd());
179:       assertFalse(node0.isNew());
180:       assertFalse(node0.isBlock());
181:       assertFalse(node0.isVar());
182:       assertFalse(node0.isName());
183:       assertFalse(node0.isStringKey());
184:       assertTrue(node0.isString());
185:       assertFalse(node0.isDo());
186:       assertFalse(node0.isNull());
187:       assertFalse(node0.isSetterDef());
188:       assertFalse(node0.isReturn());
189:       assertFalse(node0.isOr());
190:       assertFalse(node0.isWhile());
191:       assertFalse(node0.isAssign());
192:       assertFalse(node0.isGetElem());
193:       assertFalse(node0.isDec());
194:       assertFalse(node0.hasChildren());
195:       assertFalse(node0.isCatch());
196:       assertFalse(node0.isCall());
197:       assertFalse(node0.isRegExp());
198:       assertFalse(node0.isTypeOf());
199:       assertFalse(node0.hasMoreThanOneChild());
200:       assertFalse(node0.isTry());
201:       assertFalse(node0.hasOneChild());
202:       assertFalse(node0.isArrayLit());
203:       assertFalse(node0.isTrue());
204:       assertFalse(node0.isVoid());
205:       assertFalse(node0.isDefaultCase());
206:       assertFalse(node0.isEmpty());
207:       assertFalse(node0.isGetterDef());
208:       assertFalse(node0.isScript());
209:       assertFalse(node0.isNumber());
210:       assertEquals(0, node0.getChildCount());
211:       assertFalse(node0.isLabel());
212:       assertFalse(node0.isParamList());
213:       assertFalse(node0.isAssignAdd());
214:       assertFalse(node0.isLabelName());
215:       assertFalse(node0.isHook());
216:       assertFalse(node0.isThrow());
217:       assertFalse(node0.isSwitch());
218:       assertFalse(node0.isCase());
219:       assertFalse(node0.isInc());
220:       assertFalse(node0.isIn());
221:       assertFalse(node0.isGetProp());
222:       assertFalse(node0.isThis());
223:       assertFalse(node0.isNE());
224:       assertEquals(26, node0.getLineno());
225:       assertFalse(node0.isIf());
226:       assertFalse(node0.isDelProp());
227:       assertFalse(node0.isFor());
228:       assertFalse(node0.isBreak());
229:       assertFalse(node0.isExprResult());
230:       assertFalse(node0.isComma());
231:       assertFalse(node0.isInstanceOf());
232:       assertFalse(node0.isWith());
233:       assertFalse(node0.isDebugger());
234:       assertFalse(node0.isNot());
235:       assertFalse(node0.isObjectLit());
236:       assertEquals(106509, node0.getSourcePosition());
237:       assertEquals(13, node0.getCharno());
238:       assertFalse(node0.isAnd());
239:       assertEquals(40, node0.getType());
240:       assertFalse(node0.isFunction());
241:       assertFalse(node0.isCast());
242:       assertFalse(node0.isFalse());
243:       assertFalse(node0.isContinue());
244:       
245:       boolean boolean3 = node0.wasEmptyNode();
246:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
247:       assertEquals(43, Node.IS_CONSTANT_NAME);
248:       assertEquals(36, Node.QUOTED_PROP);
249:       assertEquals(53, Node.INPUT_ID);
250:       assertEquals(55, Node.INFERRED_FUNCTION);
251:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
252:       assertEquals(29, Node.JSDOC_INFO_PROP);
253:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
254:       assertEquals(8, Node.FLAG_NO_THROWS);
255:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
256:       assertEquals(37, Node.OPT_ARG_NAME);
257:       assertEquals(56, Node.CHANGE_TIME);
258:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
259:       assertEquals(48, Node.DIRECTIVES);
260:       assertEquals(32, Node.INCRDECR_PROP);
261:       assertEquals(4095, Node.COLUMN_MASK);
262:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
263:       assertEquals(12, Node.COLUMN_BITS);
264:       assertEquals(15, Node.NO_SIDE_EFFECTS);
265:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
266:       assertEquals(54, Node.SLASH_V);
267:       assertEquals(49, Node.DIRECT_EVAL);
268:       assertEquals(57, Node.LAST_PROP);
269:       assertEquals(1, Node.DECR_FLAG);
270:       assertEquals(51, Node.STATIC_SOURCE_FILE);
271:       assertEquals(46, Node.IS_NAMESPACE);
272:       assertEquals(57, Node.REFLECTED_OBJECT);
273:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
274:       assertEquals(52, Node.LENGTH);
275:       assertEquals(50, Node.FREE_CALL);
276:       assertEquals(2, Node.POST_FLAG);
277:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
278:       assertEquals(39, Node.EMPTY_BLOCK);
279:       assertEquals(47, Node.IS_DISPATCHER);
280:       assertEquals(40, Node.ORIGINALNAME_PROP);
281:       assertEquals(30, Node.VAR_ARGS_NAME);
282:       assertFalse(boolean3);
283:       assertFalse(node0.isAdd());
284:       assertFalse(node0.isNew());
285:       assertFalse(node0.isBlock());
286:       assertFalse(node0.isVar());
287:       assertFalse(node0.isName());
288:       assertFalse(node0.isStringKey());
289:       assertTrue(node0.isString());
290:       assertFalse(node0.isDo());
291:       assertFalse(node0.isNull());
292:       assertFalse(node0.isSetterDef());
293:       assertFalse(node0.isReturn());
294:       assertFalse(node0.isOr());
295:       assertFalse(node0.isWhile());
296:       assertFalse(node0.isAssign());
297:       assertFalse(node0.isGetElem());
298:       assertFalse(node0.isDec());
299:       assertFalse(node0.hasChildren());
300:       assertFalse(node0.isCatch());
301:       assertFalse(node0.isCall());
302:       assertFalse(node0.isRegExp());
303:       assertFalse(node0.isTypeOf());
304:       assertFalse(node0.hasMoreThanOneChild());
305:       assertFalse(node0.isTry());
306:       assertFalse(node0.hasOneChild());
307:       assertFalse(node0.isArrayLit());
308:       assertFalse(node0.isTrue());
309:       assertFalse(node0.isVoid());
310:       assertFalse(node0.isDefaultCase());
311:       assertFalse(node0.isEmpty());
312:       assertFalse(node0.isGetterDef());
313:       assertFalse(node0.isScript());
314:       assertFalse(node0.isNumber());
315:       assertEquals(0, node0.getChildCount());
316:       assertFalse(node0.isLabel());
317:       assertFalse(node0.isParamList());
318:       assertFalse(node0.isAssignAdd());
319:       assertFalse(node0.isLabelName());
320:       assertFalse(node0.isHook());
321:       assertFalse(node0.isThrow());
322:       assertFalse(node0.isSwitch());
323:       assertFalse(node0.isCase());
324:       assertFalse(node0.isInc());
325:       assertFalse(node0.isIn());
326:       assertFalse(node0.isGetProp());
327:       assertFalse(node0.isThis());
328:       assertFalse(node0.isNE());
329:       assertEquals(26, node0.getLineno());
330:       assertFalse(node0.isIf());
331:       assertFalse(node0.isDelProp());
332:       assertFalse(node0.isFor());
333:       assertFalse(node0.isBreak());
334:       assertFalse(node0.isExprResult());
335:       assertFalse(node0.isComma());
336:       assertFalse(node0.isInstanceOf());
337:       assertFalse(node0.isWith());
338:       assertFalse(node0.isDebugger());
339:       assertFalse(node0.isNot());
340:       assertFalse(node0.isObjectLit());
341:       assertEquals(106509, node0.getSourcePosition());
342:       assertEquals(13, node0.getCharno());
343:       assertFalse(node0.isAnd());
344:       assertEquals(40, node0.getType());
345:       assertFalse(node0.isFunction());
346:       assertFalse(node0.isCast());
347:       assertFalse(node0.isFalse());
348:       assertFalse(node0.isContinue());
349:       assertTrue(boolean3 == boolean0);
350:       assertTrue(boolean3 == boolean2);
351:       assertTrue(boolean3 == boolean1);
352:       
353:       Iterable<Node> iterable0 = node0.children();
354:       assertFalse(iterable0.contains(node0));
355:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
356:       assertEquals(43, Node.IS_CONSTANT_NAME);
357:       assertEquals(36, Node.QUOTED_PROP);
358:       assertEquals(53, Node.INPUT_ID);
359:       assertEquals(55, Node.INFERRED_FUNCTION);
360:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
361:       assertEquals(29, Node.JSDOC_INFO_PROP);
362:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
363:       assertEquals(8, Node.FLAG_NO_THROWS);
364:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
365:       assertEquals(37, Node.OPT_ARG_NAME);
366:       assertEquals(56, Node.CHANGE_TIME);
367:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
368:       assertEquals(48, Node.DIRECTIVES);
369:       assertEquals(32, Node.INCRDECR_PROP);
370:       assertEquals(4095, Node.COLUMN_MASK);
371:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
372:       assertEquals(12, Node.COLUMN_BITS);
373:       assertEquals(15, Node.NO_SIDE_EFFECTS);
374:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
375:       assertEquals(54, Node.SLASH_V);
376:       assertEquals(49, Node.DIRECT_EVAL);
377:       assertEquals(57, Node.LAST_PROP);
378:       assertEquals(1, Node.DECR_FLAG);
379:       assertEquals(51, Node.STATIC_SOURCE_FILE);
380:       assertEquals(46, Node.IS_NAMESPACE);
381:       assertEquals(57, Node.REFLECTED_OBJECT);
382:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
383:       assertEquals(52, Node.LENGTH);
384:       assertEquals(50, Node.FREE_CALL);
385:       assertEquals(2, Node.POST_FLAG);
386:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
387:       assertEquals(39, Node.EMPTY_BLOCK);
388:       assertEquals(47, Node.IS_DISPATCHER);
389:       assertEquals(40, Node.ORIGINALNAME_PROP);
390:       assertEquals(30, Node.VAR_ARGS_NAME);
391:       assertNotNull(iterable0);
392:       assertFalse(node0.isAdd());
393:       assertFalse(node0.isNew());
394:       assertFalse(node0.isBlock());
395:       assertFalse(node0.isVar());
396:       assertFalse(node0.isName());
397:       assertFalse(node0.isStringKey());
398:       assertTrue(node0.isString());
399:       assertFalse(node0.isDo());
400:       assertFalse(node0.isNull());
401:       assertFalse(node0.isSetterDef());
402:       assertFalse(node0.isReturn());
403:       assertFalse(node0.isOr());
404:       assertFalse(node0.isWhile());
405:       assertFalse(node0.isAssign());
406:       assertFalse(node0.isGetElem());
407:       assertFalse(node0.isDec());
408:       assertFalse(node0.hasChildren());
409:       assertFalse(node0.isCatch());
410:       assertFalse(node0.isCall());
411:       assertFalse(node0.isRegExp());
412:       assertFalse(node0.isTypeOf());
413:       assertFalse(node0.hasMoreThanOneChild());
414:       assertFalse(node0.isTry());
415:       assertFalse(node0.hasOneChild());
416:       assertFalse(node0.isArrayLit());
417:       assertFalse(node0.isTrue());
418:       assertFalse(node0.isVoid());
419:       assertFalse(node0.isDefaultCase());
420:       assertFalse(node0.isEmpty());
421:       assertFalse(node0.isGetterDef());
422:       assertFalse(node0.isScript());
423:       assertFalse(node0.isNumber());
424:       assertEquals(0, node0.getChildCount());
425:       assertFalse(node0.isLabel());
426:       assertFalse(node0.isParamList());
427:       assertFalse(node0.isAssignAdd());
428:       assertFalse(node0.isLabelName());
429:       assertFalse(node0.isHook());
430:       assertFalse(node0.isThrow());
431:       assertFalse(node0.isSwitch());
432:       assertFalse(node0.isCase());
433:       assertFalse(node0.isInc());
434:       assertFalse(node0.isIn());
435:       assertFalse(node0.isGetProp());
436:       assertFalse(node0.isThis());
437:       assertFalse(node0.isNE());
438:       assertEquals(26, node0.getLineno());
439:       assertFalse(node0.isIf());
440:       assertFalse(node0.isDelProp());
441:       assertFalse(node0.isFor());
442:       assertFalse(node0.isBreak());
443:       assertFalse(node0.isExprResult());
444:       assertFalse(node0.isComma());
445:       assertFalse(node0.isInstanceOf());
446:       assertFalse(node0.isWith());
447:       assertFalse(node0.isDebugger());
448:       assertFalse(node0.isNot());
449:       assertFalse(node0.isObjectLit());
450:       assertEquals(106509, node0.getSourcePosition());
451:       assertEquals(13, node0.getCharno());
452:       assertFalse(node0.isAnd());
453:       assertEquals(40, node0.getType());
454:       assertFalse(node0.isFunction());
455:       assertFalse(node0.isCast());
456:       assertFalse(node0.isFalse());
457:       assertFalse(node0.isContinue());
458:       
459:       boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
460:       assertFalse(boolean4);
461:       assertTrue(boolean4 == boolean1);
462:       assertTrue(boolean4 == boolean2);
463:       assertTrue(boolean4 == boolean0);
464:       assertTrue(boolean4 == boolean3);
465:       
466:       int int0 = 4;
467:       Node node1 = new Node(4227);
468:       assertEquals(37, Node.OPT_ARG_NAME);
469:       assertEquals(2, Node.POST_FLAG);
470:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
471:       assertEquals(47, Node.IS_DISPATCHER);
472:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
473:       assertEquals(51, Node.STATIC_SOURCE_FILE);
474:       assertEquals(46, Node.IS_NAMESPACE);
475:       assertEquals(56, Node.CHANGE_TIME);
476:       assertEquals(49, Node.DIRECT_EVAL);
477:       assertEquals(54, Node.SLASH_V);
478:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
479:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
480:       assertEquals(1, Node.DECR_FLAG);
481:       assertEquals(12, Node.COLUMN_BITS);
482:       assertEquals(32, Node.INCRDECR_PROP);
483:       assertEquals(48, Node.DIRECTIVES);
484:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
485:       assertEquals(39, Node.EMPTY_BLOCK);
486:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
487:       assertEquals(50, Node.FREE_CALL);
488:       assertEquals(4095, Node.COLUMN_MASK);
489:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
490:       assertEquals(8, Node.FLAG_NO_THROWS);
491:       assertEquals(40, Node.ORIGINALNAME_PROP);
492:       assertEquals(57, Node.REFLECTED_OBJECT);
493:       assertEquals(43, Node.IS_CONSTANT_NAME);
494:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
495:       assertEquals(36, Node.QUOTED_PROP);
496:       assertEquals(53, Node.INPUT_ID);
497:       assertEquals(15, Node.NO_SIDE_EFFECTS);
498:       assertEquals(30, Node.VAR_ARGS_NAME);
499:       assertEquals(52, Node.LENGTH);
500:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
501:       assertEquals(55, Node.INFERRED_FUNCTION);
502:       assertEquals(29, Node.JSDOC_INFO_PROP);
503:       assertEquals(57, Node.LAST_PROP);
504:       assertNotNull(node1);
505:       assertEquals(0, node1.getChildCount());
506:       assertFalse(node1.isCatch());
507:       assertEquals(4227, node1.getType());
508:       assertFalse(node1.isNull());
509:       assertFalse(node1.isDebugger());
510:       assertFalse(node1.isVoid());
511:       assertFalse(node1.isTrue());
512:       assertFalse(node1.isName());
513:       assertFalse(node1.isParamList());
514:       assertFalse(node1.isStringKey());
515:       assertFalse(node1.isTry());
516:       assertFalse(node1.isCall());
517:       assertFalse(node1.isRegExp());
518:       assertFalse(node1.isBlock());
519:       assertFalse(node1.isFor());
520:       assertFalse(node1.isWhile());
521:       assertFalse(node1.isReturn());
522:       assertFalse(node1.isLabel());
523:       assertFalse(node1.isOr());
524:       assertFalse(node1.isGetterDef());
525:       assertFalse(node1.isDelProp());
526:       assertFalse(node1.isNumber());
527:       assertFalse(node1.isLabelName());
528:       assertEquals((-1), node1.getCharno());
529:       assertFalse(node1.isSwitch());
530:       assertFalse(node1.isArrayLit());
531:       assertFalse(node1.isNew());
532:       assertFalse(node1.isAdd());
533:       assertFalse(node1.isEmpty());
534:       assertFalse(node1.isDefaultCase());
535:       assertFalse(node1.isDo());
536:       assertFalse(node1.isVar());
537:       assertFalse(node1.isAssignAdd());
538:       assertFalse(node1.isGetProp());
539:       assertFalse(node1.isObjectLit());
540:       assertFalse(node1.isWith());
541:       assertFalse(node1.isInstanceOf());
542:       assertFalse(node1.isBreak());
543:       assertFalse(node1.isNot());
544:       assertFalse(node1.isAnd());
545:       assertFalse(node1.isHook());
546:       assertFalse(node1.hasOneChild());
547:       assertFalse(node1.isExprResult());
548:       assertFalse(node1.isGetElem());
549:       assertFalse(node1.isScript());
550:       assertFalse(node1.isDec());
551:       assertFalse(node1.hasChildren());
552:       assertFalse(node1.isTypeOf());
553:       assertFalse(node1.isAssign());
554:       assertFalse(node1.isCase());
555:       assertFalse(node1.isComma());
556:       assertFalse(node1.isThis());
557:       assertFalse(node1.isIn());
558:       assertEquals((-1), node1.getLineno());
559:       assertFalse(node1.isContinue());
560:       assertFalse(node1.hasMoreThanOneChild());
561:       assertFalse(node1.isString());
562:       assertFalse(node1.isIf());
563:       assertEquals((-1), node1.getSourcePosition());
564:       assertFalse(node1.isNE());
565:       assertFalse(node1.isFunction());
566:       assertFalse(node1.isInc());
567:       assertFalse(node1.isFalse());
568:       assertFalse(node1.isCast());
569:       assertFalse(node1.isSetterDef());
570:       assertFalse(node1.isThrow());
571:       assertFalse(node1.equals((Object)node0));
572:       
573:       // Undeclared exception!
574:       try { 
575:         node0.checkTreeEquals(node1);
576:         fail("Expecting exception: IllegalStateException");
577:       
578:       } catch(IllegalStateException e) {
579:          //
580:          // 4227
581:          //
582:          verifyException("com.google.javascript.rhino.Token", e);
583:       }
584:   }
585: }
RegularFileObject[/tmp/EvoSuite_98_1629222882237/com/google/javascript/rhino/Node_98_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:42 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_98_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_98_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.common.collect.RegularImmutableSet",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.common.collect.SingletonImmutableSet",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.javascript.rhino.JSDocInfo$1",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.EmptyImmutableSet",
224:       "com.google.common.collect.Maps$ImprovedAbstractMap",
225:       "com.google.common.collect.ImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
227:       "com.google.common.collect.ImmutableList",
228:       "com.google.common.collect.SingletonImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
230:       "com.google.javascript.rhino.jstype.StringType",
231:       "com.google.javascript.rhino.Node$AbstractPropListItem",
232:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
233:       "com.google.javascript.rhino.jstype.TemplatizedType",
234:       "com.google.javascript.rhino.jstype.Visitor",
235:       "com.google.javascript.rhino.jstype.NoResolvedType",
236:       "com.google.javascript.rhino.jstype.JSTypeNative",
237:       "com.google.javascript.rhino.jstype.AllType",
238:       "com.google.common.collect.Maps",
239:       "com.google.common.collect.SetMultimap",
240:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
241:       "com.google.common.collect.Maps$EntryTransformer",
242:       "com.google.javascript.rhino.JSTypeExpression",
243:       "com.google.common.collect.Iterators$MergingIterator"
244:     );
245:   } 
246: 
247:   private static void resetClasses() {
248:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_98_tmp__ESTest_scaffolding.class.getClassLoader()); 
249: 
250:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
251:       "com.google.javascript.rhino.Node",
252:       "com.google.javascript.rhino.Node$NumberNode",
253:       "com.google.javascript.rhino.Node$StringNode",
254:       "com.google.javascript.rhino.Node$AbstractPropListItem",
255:       "com.google.javascript.rhino.Node$ObjectPropListItem",
256:       "com.google.javascript.rhino.Node$IntPropListItem",
257:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
258:       "com.google.javascript.rhino.Node$AncestorIterable",
259:       "com.google.javascript.rhino.Node$NodeMismatch",
260:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
261:       "com.google.javascript.rhino.Node$SideEffectFlags",
262:       "com.google.javascript.rhino.Token",
263:       "com.google.common.base.Preconditions",
264:       "com.google.javascript.rhino.SimpleErrorReporter",
265:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
266:       "com.google.common.base.Joiner",
267:       "com.google.common.base.Joiner$1",
268:       "com.google.common.collect.Collections2",
269:       "com.google.common.base.Joiner$MapJoiner",
270:       "com.google.common.collect.Maps",
271:       "com.google.common.collect.AbstractMultimap",
272:       "com.google.common.collect.AbstractMapBasedMultimap",
273:       "com.google.common.collect.AbstractSetMultimap",
274:       "com.google.common.collect.LinkedHashMultimap",
275:       "com.google.common.collect.AbstractMapEntry",
276:       "com.google.common.collect.ImmutableEntry",
277:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
278:       "com.google.common.collect.AbstractListMultimap",
279:       "com.google.common.collect.ArrayListMultimap",
280:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
281:       "com.google.common.collect.ImmutableCollection",
282:       "com.google.common.collect.RegularImmutableList",
283:       "com.google.common.collect.ObjectArrays",
284:       "com.google.common.collect.ImmutableList",
285:       "com.google.javascript.rhino.jstype.ModificationVisitor",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
287:       "com.google.common.collect.ImmutableCollection$Builder",
288:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
289:       "com.google.common.collect.ImmutableList$Builder",
290:       "com.google.common.collect.UnmodifiableIterator",
291:       "com.google.common.collect.UnmodifiableListIterator",
292:       "com.google.common.collect.Iterators$1",
293:       "com.google.common.collect.Iterators$2",
294:       "com.google.common.collect.Iterators",
295:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
296:       "com.google.javascript.rhino.jstype.JSType$1",
297:       "com.google.javascript.rhino.jstype.JSType",
298:       "com.google.javascript.rhino.jstype.ObjectType",
299:       "com.google.javascript.rhino.jstype.ProxyObjectType",
300:       "com.google.javascript.rhino.jstype.TemplateType",
301:       "com.google.javascript.rhino.jstype.ValueType",
302:       "com.google.javascript.rhino.jstype.BooleanType",
303:       "com.google.javascript.rhino.jstype.NullType",
304:       "com.google.javascript.rhino.jstype.NumberType",
305:       "com.google.javascript.rhino.jstype.StringType",
306:       "com.google.javascript.rhino.jstype.UnknownType",
307:       "com.google.javascript.rhino.jstype.VoidType",
308:       "com.google.javascript.rhino.jstype.AllType",
309:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
310:       "com.google.common.collect.ImmutableMap",
311:       "com.google.common.collect.ImmutableBiMap",
312:       "com.google.common.collect.EmptyImmutableBiMap",
313:       "com.google.javascript.rhino.jstype.PropertyMap$1",
314:       "com.google.javascript.rhino.jstype.PropertyMap",
315:       "com.google.javascript.rhino.jstype.FunctionType",
316:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.collect.AbstractIndexedListIterator",
338:       "com.google.common.collect.Iterators$11",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.Iterables",
348:       "com.google.javascript.rhino.jstype.TernaryValue",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.javascript.rhino.Node$AncestorIterable$1",
351:       "com.google.javascript.rhino.jstype.NamedType",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.javascript.rhino.jstype.JSType$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
356:       "com.google.common.collect.Platform",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2"
363:     );
364:   }
365: }

[MASTER] 17:54:42.296 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean2);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

Node node0 = Node.newString("t4`]M|KApUSxQvO}GR", 26, 13);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node0);
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(106509, node0.getSourcePosition());
assertEquals(13, node0.getCharno());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());

node0.removeProp(13);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(106509, node0.getSourcePosition());
assertEquals(13, node0.getCharno());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());

boolean boolean3 = node0.wasEmptyNode();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(boolean3);
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(106509, node0.getSourcePosition());
assertEquals(13, node0.getCharno());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(iterable0);
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals(106509, node0.getSourcePosition());
assertEquals(13, node0.getCharno());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());

boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
assertFalse(boolean4);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);

int int0 = 4;
Node node1 = new Node(4227);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertNotNull(node1);
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertEquals(4227, node1.getType());
assertFalse(node1.isNull());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isTry());
assertFalse(node1.isCall());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isCase());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isString());
assertFalse(node1.isIf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.equals((Object)node0));

node0.checkTreeEquals(node1);

[MASTER] 17:54:52.523 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_133_1629222892028/com/google/javascript/rhino/Node_133_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_133_1629222892028/com/google/javascript/rhino/Node_133_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:52.524 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:52.524 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:52.525 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 347
[MASTER] 17:54:52.530 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_133_1629222892028/com/google/javascript/rhino/Node_133_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:52 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.testdata.EvoSuiteFile;
15: import org.evosuite.runtime.testdata.FileSystemHandling;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_133_tmp__ESTest extends Node_133_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
24:       assertFalse(boolean0);
25:       
26:       boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
27:       assertFalse(boolean1);
28:       assertTrue(boolean1 == boolean0);
29:       
30:       Node node0 = Node.newString("t4`]M|KApUSxQvO}GR", 26, 13);
31:       assertEquals(43, Node.IS_CONSTANT_NAME);
32:       assertEquals(36, Node.QUOTED_PROP);
33:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
34:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
35:       assertEquals(4095, Node.COLUMN_MASK);
36:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
37:       assertEquals(47, Node.IS_DISPATCHER);
38:       assertEquals(56, Node.CHANGE_TIME);
39:       assertEquals(29, Node.JSDOC_INFO_PROP);
40:       assertEquals(39, Node.EMPTY_BLOCK);
41:       assertEquals(48, Node.DIRECTIVES);
42:       assertEquals(37, Node.OPT_ARG_NAME);
43:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
44:       assertEquals(53, Node.INPUT_ID);
45:       assertEquals(57, Node.REFLECTED_OBJECT);
46:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
47:       assertEquals(55, Node.INFERRED_FUNCTION);
48:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
49:       assertEquals(52, Node.LENGTH);
50:       assertEquals(8, Node.FLAG_NO_THROWS);
51:       assertEquals(57, Node.LAST_PROP);
52:       assertEquals(15, Node.NO_SIDE_EFFECTS);
53:       assertEquals(54, Node.SLASH_V);
54:       assertEquals(1, Node.DECR_FLAG);
55:       assertEquals(49, Node.DIRECT_EVAL);
56:       assertEquals(12, Node.COLUMN_BITS);
57:       assertEquals(40, Node.ORIGINALNAME_PROP);
58:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
59:       assertEquals(2, Node.POST_FLAG);
60:       assertEquals(30, Node.VAR_ARGS_NAME);
61:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
62:       assertEquals(32, Node.INCRDECR_PROP);
63:       assertEquals(46, Node.IS_NAMESPACE);
64:       assertEquals(51, Node.STATIC_SOURCE_FILE);
65:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
66:       assertEquals(50, Node.FREE_CALL);
67:       assertNotNull(node0);
68:       assertFalse(node0.isNew());
69:       assertFalse(node0.isBlock());
70:       assertTrue(node0.isString());
71:       assertFalse(node0.isAdd());
72:       assertFalse(node0.isVar());
73:       assertFalse(node0.isWhile());
74:       assertFalse(node0.isName());
75:       assertFalse(node0.isCall());
76:       assertFalse(node0.hasMoreThanOneChild());
77:       assertFalse(node0.isContinue());
78:       assertEquals(13, node0.getCharno());
79:       assertFalse(node0.isOr());
80:       assertFalse(node0.isSetterDef());
81:       assertFalse(node0.isLabel());
82:       assertFalse(node0.isNull());
83:       assertFalse(node0.isAssignAdd());
84:       assertFalse(node0.isDo());
85:       assertEquals(106509, node0.getSourcePosition());
86:       assertFalse(node0.isVoid());
87:       assertFalse(node0.isExprResult());
88:       assertFalse(node0.isTrue());
89:       assertFalse(node0.isDebugger());
90:       assertEquals(40, node0.getType());
91:       assertFalse(node0.isGetElem());
92:       assertFalse(node0.isAssign());
93:       assertFalse(node0.hasChildren());
94:       assertFalse(node0.isDec());
95:       assertFalse(node0.isTypeOf());
96:       assertFalse(node0.isFunction());
97:       assertFalse(node0.isCast());
98:       assertFalse(node0.isComma());
99:       assertFalse(node0.isReturn());
100:       assertFalse(node0.isGetProp());
101:       assertFalse(node0.isAnd());
102:       assertFalse(node0.isObjectLit());
103:       assertFalse(node0.isNot());
104:       assertFalse(node0.isInc());
105:       assertFalse(node0.isHook());
106:       assertFalse(node0.isSwitch());
107:       assertFalse(node0.isFalse());
108:       assertFalse(node0.isThrow());
109:       assertFalse(node0.isBreak());
110:       assertFalse(node0.isNE());
111:       assertFalse(node0.isDelProp());
112:       assertFalse(node0.isIf());
113:       assertFalse(node0.isEmpty());
114:       assertEquals(26, node0.getLineno());
115:       assertFalse(node0.isIn());
116:       assertFalse(node0.isTry());
117:       assertFalse(node0.isDefaultCase());
118:       assertFalse(node0.hasOneChild());
119:       assertFalse(node0.isLabelName());
120:       assertFalse(node0.isFor());
121:       assertFalse(node0.isArrayLit());
122:       assertFalse(node0.isInstanceOf());
123:       assertFalse(node0.isRegExp());
124:       assertEquals(0, node0.getChildCount());
125:       assertFalse(node0.isCatch());
126:       assertFalse(node0.isWith());
127:       assertFalse(node0.isThis());
128:       assertFalse(node0.isParamList());
129:       assertFalse(node0.isStringKey());
130:       assertFalse(node0.isCase());
131:       assertFalse(node0.isNumber());
132:       assertFalse(node0.isGetterDef());
133:       assertFalse(node0.isScript());
134:       
135:       node0.removeProp(13);
136:       assertEquals(43, Node.IS_CONSTANT_NAME);
137:       assertEquals(36, Node.QUOTED_PROP);
138:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
139:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
140:       assertEquals(4095, Node.COLUMN_MASK);
141:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
142:       assertEquals(47, Node.IS_DISPATCHER);
143:       assertEquals(56, Node.CHANGE_TIME);
144:       assertEquals(29, Node.JSDOC_INFO_PROP);
145:       assertEquals(39, Node.EMPTY_BLOCK);
146:       assertEquals(48, Node.DIRECTIVES);
147:       assertEquals(37, Node.OPT_ARG_NAME);
148:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
149:       assertEquals(53, Node.INPUT_ID);
150:       assertEquals(57, Node.REFLECTED_OBJECT);
151:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
152:       assertEquals(55, Node.INFERRED_FUNCTION);
153:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
154:       assertEquals(52, Node.LENGTH);
155:       assertEquals(8, Node.FLAG_NO_THROWS);
156:       assertEquals(57, Node.LAST_PROP);
157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
158:       assertEquals(54, Node.SLASH_V);
159:       assertEquals(1, Node.DECR_FLAG);
160:       assertEquals(49, Node.DIRECT_EVAL);
161:       assertEquals(12, Node.COLUMN_BITS);
162:       assertEquals(40, Node.ORIGINALNAME_PROP);
163:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
164:       assertEquals(2, Node.POST_FLAG);
165:       assertEquals(30, Node.VAR_ARGS_NAME);
166:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
167:       assertEquals(32, Node.INCRDECR_PROP);
168:       assertEquals(46, Node.IS_NAMESPACE);
169:       assertEquals(51, Node.STATIC_SOURCE_FILE);
170:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
171:       assertEquals(50, Node.FREE_CALL);
172:       assertFalse(node0.isNew());
173:       assertFalse(node0.isBlock());
174:       assertTrue(node0.isString());
175:       assertFalse(node0.isAdd());
176:       assertFalse(node0.isVar());
177:       assertFalse(node0.isWhile());
178:       assertFalse(node0.isName());
179:       assertFalse(node0.isCall());
180:       assertFalse(node0.hasMoreThanOneChild());
181:       assertFalse(node0.isContinue());
182:       assertEquals(13, node0.getCharno());
183:       assertFalse(node0.isOr());
184:       assertFalse(node0.isSetterDef());
185:       assertFalse(node0.isLabel());
186:       assertFalse(node0.isNull());
187:       assertFalse(node0.isAssignAdd());
188:       assertFalse(node0.isDo());
189:       assertEquals(106509, node0.getSourcePosition());
190:       assertFalse(node0.isVoid());
191:       assertFalse(node0.isExprResult());
192:       assertFalse(node0.isTrue());
193:       assertFalse(node0.isDebugger());
194:       assertEquals(40, node0.getType());
195:       assertFalse(node0.isGetElem());
196:       assertFalse(node0.isAssign());
197:       assertFalse(node0.hasChildren());
198:       assertFalse(node0.isDec());
199:       assertFalse(node0.isTypeOf());
200:       assertFalse(node0.isFunction());
201:       assertFalse(node0.isCast());
202:       assertFalse(node0.isComma());
203:       assertFalse(node0.isReturn());
204:       assertFalse(node0.isGetProp());
205:       assertFalse(node0.isAnd());
206:       assertFalse(node0.isObjectLit());
207:       assertFalse(node0.isNot());
208:       assertFalse(node0.isInc());
209:       assertFalse(node0.isHook());
210:       assertFalse(node0.isSwitch());
211:       assertFalse(node0.isFalse());
212:       assertFalse(node0.isThrow());
213:       assertFalse(node0.isBreak());
214:       assertFalse(node0.isNE());
215:       assertFalse(node0.isDelProp());
216:       assertFalse(node0.isIf());
217:       assertFalse(node0.isEmpty());
218:       assertEquals(26, node0.getLineno());
219:       assertFalse(node0.isIn());
220:       assertFalse(node0.isTry());
221:       assertFalse(node0.isDefaultCase());
222:       assertFalse(node0.hasOneChild());
223:       assertFalse(node0.isLabelName());
224:       assertFalse(node0.isFor());
225:       assertFalse(node0.isArrayLit());
226:       assertFalse(node0.isInstanceOf());
227:       assertFalse(node0.isRegExp());
228:       assertEquals(0, node0.getChildCount());
229:       assertFalse(node0.isCatch());
230:       assertFalse(node0.isWith());
231:       assertFalse(node0.isThis());
232:       assertFalse(node0.isParamList());
233:       assertFalse(node0.isStringKey());
234:       assertFalse(node0.isCase());
235:       assertFalse(node0.isNumber());
236:       assertFalse(node0.isGetterDef());
237:       assertFalse(node0.isScript());
238:       
239:       boolean boolean2 = node0.wasEmptyNode();
240:       assertEquals(43, Node.IS_CONSTANT_NAME);
241:       assertEquals(36, Node.QUOTED_PROP);
242:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
243:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
244:       assertEquals(4095, Node.COLUMN_MASK);
245:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
246:       assertEquals(47, Node.IS_DISPATCHER);
247:       assertEquals(56, Node.CHANGE_TIME);
248:       assertEquals(29, Node.JSDOC_INFO_PROP);
249:       assertEquals(39, Node.EMPTY_BLOCK);
250:       assertEquals(48, Node.DIRECTIVES);
251:       assertEquals(37, Node.OPT_ARG_NAME);
252:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
253:       assertEquals(53, Node.INPUT_ID);
254:       assertEquals(57, Node.REFLECTED_OBJECT);
255:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
256:       assertEquals(55, Node.INFERRED_FUNCTION);
257:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
258:       assertEquals(52, Node.LENGTH);
259:       assertEquals(8, Node.FLAG_NO_THROWS);
260:       assertEquals(57, Node.LAST_PROP);
261:       assertEquals(15, Node.NO_SIDE_EFFECTS);
262:       assertEquals(54, Node.SLASH_V);
263:       assertEquals(1, Node.DECR_FLAG);
264:       assertEquals(49, Node.DIRECT_EVAL);
265:       assertEquals(12, Node.COLUMN_BITS);
266:       assertEquals(40, Node.ORIGINALNAME_PROP);
267:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
268:       assertEquals(2, Node.POST_FLAG);
269:       assertEquals(30, Node.VAR_ARGS_NAME);
270:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
271:       assertEquals(32, Node.INCRDECR_PROP);
272:       assertEquals(46, Node.IS_NAMESPACE);
273:       assertEquals(51, Node.STATIC_SOURCE_FILE);
274:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
275:       assertEquals(50, Node.FREE_CALL);
276:       assertFalse(boolean2);
277:       assertFalse(node0.isNew());
278:       assertFalse(node0.isBlock());
279:       assertTrue(node0.isString());
280:       assertFalse(node0.isAdd());
281:       assertFalse(node0.isVar());
282:       assertFalse(node0.isWhile());
283:       assertFalse(node0.isName());
284:       assertFalse(node0.isCall());
285:       assertFalse(node0.hasMoreThanOneChild());
286:       assertFalse(node0.isContinue());
287:       assertEquals(13, node0.getCharno());
288:       assertFalse(node0.isOr());
289:       assertFalse(node0.isSetterDef());
290:       assertFalse(node0.isLabel());
291:       assertFalse(node0.isNull());
292:       assertFalse(node0.isAssignAdd());
293:       assertFalse(node0.isDo());
294:       assertEquals(106509, node0.getSourcePosition());
295:       assertFalse(node0.isVoid());
296:       assertFalse(node0.isExprResult());
297:       assertFalse(node0.isTrue());
298:       assertFalse(node0.isDebugger());
299:       assertEquals(40, node0.getType());
300:       assertFalse(node0.isGetElem());
301:       assertFalse(node0.isAssign());
302:       assertFalse(node0.hasChildren());
303:       assertFalse(node0.isDec());
304:       assertFalse(node0.isTypeOf());
305:       assertFalse(node0.isFunction());
306:       assertFalse(node0.isCast());
307:       assertFalse(node0.isComma());
308:       assertFalse(node0.isReturn());
309:       assertFalse(node0.isGetProp());
310:       assertFalse(node0.isAnd());
311:       assertFalse(node0.isObjectLit());
312:       assertFalse(node0.isNot());
313:       assertFalse(node0.isInc());
314:       assertFalse(node0.isHook());
315:       assertFalse(node0.isSwitch());
316:       assertFalse(node0.isFalse());
317:       assertFalse(node0.isThrow());
318:       assertFalse(node0.isBreak());
319:       assertFalse(node0.isNE());
320:       assertFalse(node0.isDelProp());
321:       assertFalse(node0.isIf());
322:       assertFalse(node0.isEmpty());
323:       assertEquals(26, node0.getLineno());
324:       assertFalse(node0.isIn());
325:       assertFalse(node0.isTry());
326:       assertFalse(node0.isDefaultCase());
327:       assertFalse(node0.hasOneChild());
328:       assertFalse(node0.isLabelName());
329:       assertFalse(node0.isFor());
330:       assertFalse(node0.isArrayLit());
331:       assertFalse(node0.isInstanceOf());
332:       assertFalse(node0.isRegExp());
333:       assertEquals(0, node0.getChildCount());
334:       assertFalse(node0.isCatch());
335:       assertFalse(node0.isWith());
336:       assertFalse(node0.isThis());
337:       assertFalse(node0.isParamList());
338:       assertFalse(node0.isStringKey());
339:       assertFalse(node0.isCase());
340:       assertFalse(node0.isNumber());
341:       assertFalse(node0.isGetterDef());
342:       assertFalse(node0.isScript());
343:       assertTrue(boolean2 == boolean0);
344:       assertTrue(boolean2 == boolean1);
345:       
346:       Iterable<Node> iterable0 = node0.children();
347:       assertFalse(iterable0.contains(node0));
348:       assertEquals(43, Node.IS_CONSTANT_NAME);
349:       assertEquals(36, Node.QUOTED_PROP);
350:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
351:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
352:       assertEquals(4095, Node.COLUMN_MASK);
353:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
354:       assertEquals(47, Node.IS_DISPATCHER);
355:       assertEquals(56, Node.CHANGE_TIME);
356:       assertEquals(29, Node.JSDOC_INFO_PROP);
357:       assertEquals(39, Node.EMPTY_BLOCK);
358:       assertEquals(48, Node.DIRECTIVES);
359:       assertEquals(37, Node.OPT_ARG_NAME);
360:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
361:       assertEquals(53, Node.INPUT_ID);
362:       assertEquals(57, Node.REFLECTED_OBJECT);
363:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
364:       assertEquals(55, Node.INFERRED_FUNCTION);
365:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
366:       assertEquals(52, Node.LENGTH);
367:       assertEquals(8, Node.FLAG_NO_THROWS);
368:       assertEquals(57, Node.LAST_PROP);
369:       assertEquals(15, Node.NO_SIDE_EFFECTS);
370:       assertEquals(54, Node.SLASH_V);
371:       assertEquals(1, Node.DECR_FLAG);
372:       assertEquals(49, Node.DIRECT_EVAL);
373:       assertEquals(12, Node.COLUMN_BITS);
374:       assertEquals(40, Node.ORIGINALNAME_PROP);
375:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
376:       assertEquals(2, Node.POST_FLAG);
377:       assertEquals(30, Node.VAR_ARGS_NAME);
378:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
379:       assertEquals(32, Node.INCRDECR_PROP);
380:       assertEquals(46, Node.IS_NAMESPACE);
381:       assertEquals(51, Node.STATIC_SOURCE_FILE);
382:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
383:       assertEquals(50, Node.FREE_CALL);
384:       assertNotNull(iterable0);
385:       assertFalse(node0.isNew());
386:       assertFalse(node0.isBlock());
387:       assertTrue(node0.isString());
388:       assertFalse(node0.isAdd());
389:       assertFalse(node0.isVar());
390:       assertFalse(node0.isWhile());
391:       assertFalse(node0.isName());
392:       assertFalse(node0.isCall());
393:       assertFalse(node0.hasMoreThanOneChild());
394:       assertFalse(node0.isContinue());
395:       assertEquals(13, node0.getCharno());
396:       assertFalse(node0.isOr());
397:       assertFalse(node0.isSetterDef());
398:       assertFalse(node0.isLabel());
399:       assertFalse(node0.isNull());
400:       assertFalse(node0.isAssignAdd());
401:       assertFalse(node0.isDo());
402:       assertEquals(106509, node0.getSourcePosition());
403:       assertFalse(node0.isVoid());
404:       assertFalse(node0.isExprResult());
405:       assertFalse(node0.isTrue());
406:       assertFalse(node0.isDebugger());
407:       assertEquals(40, node0.getType());
408:       assertFalse(node0.isGetElem());
409:       assertFalse(node0.isAssign());
410:       assertFalse(node0.hasChildren());
411:       assertFalse(node0.isDec());
412:       assertFalse(node0.isTypeOf());
413:       assertFalse(node0.isFunction());
414:       assertFalse(node0.isCast());
415:       assertFalse(node0.isComma());
416:       assertFalse(node0.isReturn());
417:       assertFalse(node0.isGetProp());
418:       assertFalse(node0.isAnd());
419:       assertFalse(node0.isObjectLit());
420:       assertFalse(node0.isNot());
421:       assertFalse(node0.isInc());
422:       assertFalse(node0.isHook());
423:       assertFalse(node0.isSwitch());
424:       assertFalse(node0.isFalse());
425:       assertFalse(node0.isThrow());
426:       assertFalse(node0.isBreak());
427:       assertFalse(node0.isNE());
428:       assertFalse(node0.isDelProp());
429:       assertFalse(node0.isIf());
430:       assertFalse(node0.isEmpty());
431:       assertEquals(26, node0.getLineno());
432:       assertFalse(node0.isIn());
433:       assertFalse(node0.isTry());
434:       assertFalse(node0.isDefaultCase());
435:       assertFalse(node0.hasOneChild());
436:       assertFalse(node0.isLabelName());
437:       assertFalse(node0.isFor());
438:       assertFalse(node0.isArrayLit());
439:       assertFalse(node0.isInstanceOf());
440:       assertFalse(node0.isRegExp());
441:       assertEquals(0, node0.getChildCount());
442:       assertFalse(node0.isCatch());
443:       assertFalse(node0.isWith());
444:       assertFalse(node0.isThis());
445:       assertFalse(node0.isParamList());
446:       assertFalse(node0.isStringKey());
447:       assertFalse(node0.isCase());
448:       assertFalse(node0.isNumber());
449:       assertFalse(node0.isGetterDef());
450:       assertFalse(node0.isScript());
451:       
452:       boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
453:       assertFalse(boolean3);
454:       assertTrue(boolean3 == boolean2);
455:       assertTrue(boolean3 == boolean1);
456:       assertTrue(boolean3 == boolean0);
457:       
458:       node0.setType(4);
459:       assertEquals(43, Node.IS_CONSTANT_NAME);
460:       assertEquals(36, Node.QUOTED_PROP);
461:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
462:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
463:       assertEquals(4095, Node.COLUMN_MASK);
464:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
465:       assertEquals(47, Node.IS_DISPATCHER);
466:       assertEquals(56, Node.CHANGE_TIME);
467:       assertEquals(29, Node.JSDOC_INFO_PROP);
468:       assertEquals(39, Node.EMPTY_BLOCK);
469:       assertEquals(48, Node.DIRECTIVES);
470:       assertEquals(37, Node.OPT_ARG_NAME);
471:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
472:       assertEquals(53, Node.INPUT_ID);
473:       assertEquals(57, Node.REFLECTED_OBJECT);
474:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
475:       assertEquals(55, Node.INFERRED_FUNCTION);
476:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
477:       assertEquals(52, Node.LENGTH);
478:       assertEquals(8, Node.FLAG_NO_THROWS);
479:       assertEquals(57, Node.LAST_PROP);
480:       assertEquals(15, Node.NO_SIDE_EFFECTS);
481:       assertEquals(54, Node.SLASH_V);
482:       assertEquals(1, Node.DECR_FLAG);
483:       assertEquals(49, Node.DIRECT_EVAL);
484:       assertEquals(12, Node.COLUMN_BITS);
485:       assertEquals(40, Node.ORIGINALNAME_PROP);
486:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
487:       assertEquals(2, Node.POST_FLAG);
488:       assertEquals(30, Node.VAR_ARGS_NAME);
489:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
490:       assertEquals(32, Node.INCRDECR_PROP);
491:       assertEquals(46, Node.IS_NAMESPACE);
492:       assertEquals(51, Node.STATIC_SOURCE_FILE);
493:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
494:       assertEquals(50, Node.FREE_CALL);
495:       assertFalse(node0.isNew());
496:       assertFalse(node0.isBlock());
497:       assertFalse(node0.isAdd());
498:       assertFalse(node0.isVar());
499:       assertFalse(node0.isWhile());
500:       assertFalse(node0.isName());
501:       assertFalse(node0.isCall());
502:       assertFalse(node0.hasMoreThanOneChild());
503:       assertFalse(node0.isContinue());
504:       assertEquals(13, node0.getCharno());
505:       assertFalse(node0.isOr());
506:       assertFalse(node0.isSetterDef());
507:       assertFalse(node0.isLabel());
508:       assertFalse(node0.isNull());
509:       assertFalse(node0.isAssignAdd());
510:       assertFalse(node0.isDo());
511:       assertEquals(106509, node0.getSourcePosition());
512:       assertFalse(node0.isVoid());
513:       assertFalse(node0.isExprResult());
514:       assertFalse(node0.isTrue());
515:       assertFalse(node0.isDebugger());
516:       assertFalse(node0.isGetElem());
517:       assertFalse(node0.isAssign());
518:       assertFalse(node0.hasChildren());
519:       assertFalse(node0.isDec());
520:       assertFalse(node0.isTypeOf());
521:       assertFalse(node0.isFunction());
522:       assertFalse(node0.isCast());
523:       assertFalse(node0.isComma());
524:       assertFalse(node0.isGetProp());
525:       assertFalse(node0.isAnd());
526:       assertFalse(node0.isObjectLit());
527:       assertFalse(node0.isNot());
528:       assertFalse(node0.isString());
529:       assertFalse(node0.isInc());
530:       assertFalse(node0.isHook());
531:       assertFalse(node0.isSwitch());
532:       assertFalse(node0.isFalse());
533:       assertTrue(node0.isReturn());
534:       assertFalse(node0.isThrow());
535:       assertFalse(node0.isBreak());
536:       assertEquals(4, node0.getType());
537:       assertFalse(node0.isNE());
538:       assertFalse(node0.isDelProp());
539:       assertFalse(node0.isIf());
540:       assertFalse(node0.isEmpty());
541:       assertEquals(26, node0.getLineno());
542:       assertFalse(node0.isIn());
543:       assertFalse(node0.isTry());
544:       assertFalse(node0.isDefaultCase());
545:       assertFalse(node0.hasOneChild());
546:       assertFalse(node0.isLabelName());
547:       assertFalse(node0.isFor());
548:       assertFalse(node0.isArrayLit());
549:       assertFalse(node0.isInstanceOf());
550:       assertFalse(node0.isRegExp());
551:       assertEquals(0, node0.getChildCount());
552:       assertFalse(node0.isCatch());
553:       assertFalse(node0.isWith());
554:       assertFalse(node0.isThis());
555:       assertFalse(node0.isParamList());
556:       assertFalse(node0.isStringKey());
557:       assertFalse(node0.isCase());
558:       assertFalse(node0.isNumber());
559:       assertFalse(node0.isGetterDef());
560:       assertFalse(node0.isScript());
561:       
562:       boolean boolean4 = node0.isTry();
563:       assertEquals(43, Node.IS_CONSTANT_NAME);
564:       assertEquals(36, Node.QUOTED_PROP);
565:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
566:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
567:       assertEquals(4095, Node.COLUMN_MASK);
568:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
569:       assertEquals(47, Node.IS_DISPATCHER);
570:       assertEquals(56, Node.CHANGE_TIME);
571:       assertEquals(29, Node.JSDOC_INFO_PROP);
572:       assertEquals(39, Node.EMPTY_BLOCK);
573:       assertEquals(48, Node.DIRECTIVES);
574:       assertEquals(37, Node.OPT_ARG_NAME);
575:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
576:       assertEquals(53, Node.INPUT_ID);
577:       assertEquals(57, Node.REFLECTED_OBJECT);
578:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
579:       assertEquals(55, Node.INFERRED_FUNCTION);
580:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
581:       assertEquals(52, Node.LENGTH);
582:       assertEquals(8, Node.FLAG_NO_THROWS);
583:       assertEquals(57, Node.LAST_PROP);
584:       assertEquals(15, Node.NO_SIDE_EFFECTS);
585:       assertEquals(54, Node.SLASH_V);
586:       assertEquals(1, Node.DECR_FLAG);
587:       assertEquals(49, Node.DIRECT_EVAL);
588:       assertEquals(12, Node.COLUMN_BITS);
589:       assertEquals(40, Node.ORIGINALNAME_PROP);
590:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
591:       assertEquals(2, Node.POST_FLAG);
592:       assertEquals(30, Node.VAR_ARGS_NAME);
593:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
594:       assertEquals(32, Node.INCRDECR_PROP);
595:       assertEquals(46, Node.IS_NAMESPACE);
596:       assertEquals(51, Node.STATIC_SOURCE_FILE);
597:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
598:       assertEquals(50, Node.FREE_CALL);
599:       assertFalse(boolean4);
600:       assertFalse(node0.isNew());
601:       assertFalse(node0.isBlock());
602:       assertFalse(node0.isAdd());
603:       assertFalse(node0.isVar());
604:       assertFalse(node0.isWhile());
605:       assertFalse(node0.isName());
606:       assertFalse(node0.isCall());
607:       assertFalse(node0.hasMoreThanOneChild());
608:       assertFalse(node0.isContinue());
609:       assertEquals(13, node0.getCharno());
610:       assertFalse(node0.isOr());
611:       assertFalse(node0.isSetterDef());
612:       assertFalse(node0.isLabel());
613:       assertFalse(node0.isNull());
614:       assertFalse(node0.isAssignAdd());
615:       assertFalse(node0.isDo());
616:       assertEquals(106509, node0.getSourcePosition());
617:       assertFalse(node0.isVoid());
618:       assertFalse(node0.isExprResult());
619:       assertFalse(node0.isTrue());
620:       assertFalse(node0.isDebugger());
621:       assertFalse(node0.isGetElem());
622:       assertFalse(node0.isAssign());
623:       assertFalse(node0.hasChildren());
624:       assertFalse(node0.isDec());
625:       assertFalse(node0.isTypeOf());
626:       assertFalse(node0.isFunction());
627:       assertFalse(node0.isCast());
628:       assertFalse(node0.isComma());
629:       assertFalse(node0.isGetProp());
630:       assertFalse(node0.isAnd());
631:       assertFalse(node0.isObjectLit());
632:       assertFalse(node0.isNot());
633:       assertFalse(node0.isString());
634:       assertFalse(node0.isInc());
635:       assertFalse(node0.isHook());
636:       assertFalse(node0.isSwitch());
637:       assertFalse(node0.isFalse());
638:       assertTrue(node0.isReturn());
639:       assertFalse(node0.isThrow());
640:       assertFalse(node0.isBreak());
641:       assertEquals(4, node0.getType());
642:       assertFalse(node0.isNE());
643:       assertFalse(node0.isDelProp());
644:       assertFalse(node0.isIf());
645:       assertFalse(node0.isEmpty());
646:       assertEquals(26, node0.getLineno());
647:       assertFalse(node0.isIn());
648:       assertFalse(node0.isTry());
649:       assertFalse(node0.isDefaultCase());
650:       assertFalse(node0.hasOneChild());
651:       assertFalse(node0.isLabelName());
652:       assertFalse(node0.isFor());
653:       assertFalse(node0.isArrayLit());
654:       assertFalse(node0.isInstanceOf());
655:       assertFalse(node0.isRegExp());
656:       assertEquals(0, node0.getChildCount());
657:       assertFalse(node0.isCatch());
658:       assertFalse(node0.isWith());
659:       assertFalse(node0.isThis());
660:       assertFalse(node0.isParamList());
661:       assertFalse(node0.isStringKey());
662:       assertFalse(node0.isCase());
663:       assertFalse(node0.isNumber());
664:       assertFalse(node0.isGetterDef());
665:       assertFalse(node0.isScript());
666:       assertTrue(boolean4 == boolean1);
667:       assertTrue(boolean4 == boolean0);
668:       assertTrue(boolean4 == boolean2);
669:       assertTrue(boolean4 == boolean3);
670:       
671:       Node node1 = Node.newString("");
672:       assertEquals(43, Node.IS_CONSTANT_NAME);
673:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
674:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
675:       assertEquals(53, Node.INPUT_ID);
676:       assertEquals(55, Node.INFERRED_FUNCTION);
677:       assertEquals(8, Node.FLAG_NO_THROWS);
678:       assertEquals(36, Node.QUOTED_PROP);
679:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
680:       assertEquals(47, Node.IS_DISPATCHER);
681:       assertEquals(29, Node.JSDOC_INFO_PROP);
682:       assertEquals(40, Node.ORIGINALNAME_PROP);
683:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
684:       assertEquals(39, Node.EMPTY_BLOCK);
685:       assertEquals(2, Node.POST_FLAG);
686:       assertEquals(30, Node.VAR_ARGS_NAME);
687:       assertEquals(15, Node.NO_SIDE_EFFECTS);
688:       assertEquals(57, Node.LAST_PROP);
689:       assertEquals(49, Node.DIRECT_EVAL);
690:       assertEquals(32, Node.INCRDECR_PROP);
691:       assertEquals(1, Node.DECR_FLAG);
692:       assertEquals(52, Node.LENGTH);
693:       assertEquals(57, Node.REFLECTED_OBJECT);
694:       assertEquals(46, Node.IS_NAMESPACE);
695:       assertEquals(54, Node.SLASH_V);
696:       assertEquals(51, Node.STATIC_SOURCE_FILE);
697:       assertEquals(50, Node.FREE_CALL);
698:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
699:       assertEquals(56, Node.CHANGE_TIME);
700:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
701:       assertEquals(37, Node.OPT_ARG_NAME);
702:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
703:       assertEquals(48, Node.DIRECTIVES);
704:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
705:       assertEquals(12, Node.COLUMN_BITS);
706:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
707:       assertEquals(4095, Node.COLUMN_MASK);
708:       assertNotNull(node1);
709:       assertNotSame(node1, node0);
710:       assertFalse(node1.isNew());
711:       assertFalse(node1.isAdd());
712:       assertFalse(node1.isBlock());
713:       assertFalse(node1.isWhile());
714:       assertFalse(node1.isDo());
715:       assertTrue(node1.isString());
716:       assertFalse(node1.isStringKey());
717:       assertFalse(node1.isOr());
718:       assertFalse(node1.isParamList());
719:       assertFalse(node1.isLabel());
720:       assertFalse(node1.isSetterDef());
721:       assertFalse(node1.isLabelName());
722:       assertFalse(node1.isAssignAdd());
723:       assertFalse(node1.isContinue());
724:       assertFalse(node1.isVar());
725:       assertFalse(node1.isCast());
726:       assertEquals(40, node1.getType());
727:       assertEquals(0, node1.getChildCount());
728:       assertFalse(node1.isFunction());
729:       assertFalse(node1.isScript());
730:       assertFalse(node1.hasOneChild());
731:       assertFalse(node1.isTry());
732:       assertFalse(node1.isGetterDef());
733:       assertFalse(node1.isNumber());
734:       assertFalse(node1.isNE());
735:       assertFalse(node1.isThis());
736:       assertFalse(node1.isIf());
737:       assertEquals((-1), node1.getLineno());
738:       assertFalse(node1.isCatch());
739:       assertFalse(node1.isFor());
740:       assertFalse(node1.isHook());
741:       assertFalse(node1.isInstanceOf());
742:       assertFalse(node1.isRegExp());
743:       assertFalse(node1.hasMoreThanOneChild());
744:       assertFalse(node1.isWith());
745:       assertEquals((-1), node1.getCharno());
746:       assertFalse(node1.isInc());
747:       assertFalse(node1.isSwitch());
748:       assertFalse(node1.isCase());
749:       assertFalse(node1.isIn());
750:       assertFalse(node1.isThrow());
751:       assertFalse(node1.isArrayLit());
752:       assertFalse(node1.isFalse());
753:       assertFalse(node1.isVoid());
754:       assertFalse(node1.isDebugger());
755:       assertFalse(node1.isTrue());
756:       assertFalse(node1.isExprResult());
757:       assertFalse(node1.isDefaultCase());
758:       assertFalse(node1.isAnd());
759:       assertFalse(node1.isObjectLit());
760:       assertFalse(node1.isEmpty());
761:       assertEquals((-1), node1.getSourcePosition());
762:       assertFalse(node1.isNot());
763:       assertFalse(node1.isGetProp());
764:       assertFalse(node1.isComma());
765:       assertFalse(node1.isNull());
766:       assertFalse(node1.isReturn());
767:       assertFalse(node1.isDelProp());
768:       assertFalse(node1.isBreak());
769:       assertFalse(node1.isName());
770:       assertFalse(node1.isGetElem());
771:       assertFalse(node1.isCall());
772:       assertFalse(node1.hasChildren());
773:       assertFalse(node1.isDec());
774:       assertFalse(node1.isAssign());
775:       assertFalse(node1.isTypeOf());
776:       assertFalse(node1.equals((Object)node0));
777:       
778:       InputId inputId0 = node0.getInputId();
779:       assertEquals(43, Node.IS_CONSTANT_NAME);
780:       assertEquals(36, Node.QUOTED_PROP);
781:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
782:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
783:       assertEquals(4095, Node.COLUMN_MASK);
784:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
785:       assertEquals(47, Node.IS_DISPATCHER);
786:       assertEquals(56, Node.CHANGE_TIME);
787:       assertEquals(29, Node.JSDOC_INFO_PROP);
788:       assertEquals(39, Node.EMPTY_BLOCK);
789:       assertEquals(48, Node.DIRECTIVES);
790:       assertEquals(37, Node.OPT_ARG_NAME);
791:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
792:       assertEquals(53, Node.INPUT_ID);
793:       assertEquals(57, Node.REFLECTED_OBJECT);
794:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
795:       assertEquals(55, Node.INFERRED_FUNCTION);
796:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
797:       assertEquals(52, Node.LENGTH);
798:       assertEquals(8, Node.FLAG_NO_THROWS);
799:       assertEquals(57, Node.LAST_PROP);
800:       assertEquals(15, Node.NO_SIDE_EFFECTS);
801:       assertEquals(54, Node.SLASH_V);
802:       assertEquals(1, Node.DECR_FLAG);
803:       assertEquals(49, Node.DIRECT_EVAL);
804:       assertEquals(12, Node.COLUMN_BITS);
805:       assertEquals(40, Node.ORIGINALNAME_PROP);
806:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
807:       assertEquals(2, Node.POST_FLAG);
808:       assertEquals(30, Node.VAR_ARGS_NAME);
809:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
810:       assertEquals(32, Node.INCRDECR_PROP);
811:       assertEquals(46, Node.IS_NAMESPACE);
812:       assertEquals(51, Node.STATIC_SOURCE_FILE);
813:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
814:       assertEquals(50, Node.FREE_CALL);
815:       assertNull(inputId0);
816:       assertNotSame(node0, node1);
817:       assertFalse(node0.isNew());
818:       assertFalse(node0.isBlock());
819:       assertFalse(node0.isAdd());
820:       assertFalse(node0.isVar());
821:       assertFalse(node0.isWhile());
822:       assertFalse(node0.isName());
823:       assertFalse(node0.isCall());
824:       assertFalse(node0.hasMoreThanOneChild());
825:       assertFalse(node0.isContinue());
826:       assertEquals(13, node0.getCharno());
827:       assertFalse(node0.isOr());
828:       assertFalse(node0.isSetterDef());
829:       assertFalse(node0.isLabel());
830:       assertFalse(node0.isNull());
831:       assertFalse(node0.isAssignAdd());
832:       assertFalse(node0.isDo());
833:       assertEquals(106509, node0.getSourcePosition());
834:       assertFalse(node0.isVoid());
835:       assertFalse(node0.isExprResult());
836:       assertFalse(node0.isTrue());
837:       assertFalse(node0.isDebugger());
838:       assertFalse(node0.isGetElem());
839:       assertFalse(node0.isAssign());
840:       assertFalse(node0.hasChildren());
841:       assertFalse(node0.isDec());
842:       assertFalse(node0.isTypeOf());
843:       assertFalse(node0.isFunction());
844:       assertFalse(node0.isCast());
845:       assertFalse(node0.isComma());
846:       assertFalse(node0.isGetProp());
847:       assertFalse(node0.isAnd());
848:       assertFalse(node0.isObjectLit());
849:       assertFalse(node0.isNot());
850:       assertFalse(node0.isString());
851:       assertFalse(node0.isInc());
852:       assertFalse(node0.isHook());
853:       assertFalse(node0.isSwitch());
854:       assertFalse(node0.isFalse());
855:       assertTrue(node0.isReturn());
856:       assertFalse(node0.isThrow());
857:       assertFalse(node0.isBreak());
858:       assertEquals(4, node0.getType());
859:       assertFalse(node0.isNE());
860:       assertFalse(node0.isDelProp());
861:       assertFalse(node0.isIf());
862:       assertFalse(node0.isEmpty());
863:       assertEquals(26, node0.getLineno());
864:       assertFalse(node0.isIn());
865:       assertFalse(node0.isTry());
866:       assertFalse(node0.isDefaultCase());
867:       assertFalse(node0.hasOneChild());
868:       assertFalse(node0.isLabelName());
869:       assertFalse(node0.isFor());
870:       assertFalse(node0.isArrayLit());
871:       assertFalse(node0.isInstanceOf());
872:       assertFalse(node0.isRegExp());
873:       assertEquals(0, node0.getChildCount());
874:       assertFalse(node0.isCatch());
875:       assertFalse(node0.isWith());
876:       assertFalse(node0.isThis());
877:       assertFalse(node0.isParamList());
878:       assertFalse(node0.isStringKey());
879:       assertFalse(node0.isCase());
880:       assertFalse(node0.isNumber());
881:       assertFalse(node0.isGetterDef());
882:       assertFalse(node0.isScript());
883:       assertFalse(node0.equals((Object)node1));
884:       
885:       node1.detachChildren();
886:       assertEquals(43, Node.IS_CONSTANT_NAME);
887:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
888:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
889:       assertEquals(53, Node.INPUT_ID);
890:       assertEquals(55, Node.INFERRED_FUNCTION);
891:       assertEquals(8, Node.FLAG_NO_THROWS);
892:       assertEquals(36, Node.QUOTED_PROP);
893:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
894:       assertEquals(47, Node.IS_DISPATCHER);
895:       assertEquals(29, Node.JSDOC_INFO_PROP);
896:       assertEquals(40, Node.ORIGINALNAME_PROP);
897:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
898:       assertEquals(39, Node.EMPTY_BLOCK);
899:       assertEquals(2, Node.POST_FLAG);
900:       assertEquals(30, Node.VAR_ARGS_NAME);
901:       assertEquals(15, Node.NO_SIDE_EFFECTS);
902:       assertEquals(57, Node.LAST_PROP);
903:       assertEquals(49, Node.DIRECT_EVAL);
904:       assertEquals(32, Node.INCRDECR_PROP);
905:       assertEquals(1, Node.DECR_FLAG);
906:       assertEquals(52, Node.LENGTH);
907:       assertEquals(57, Node.REFLECTED_OBJECT);
908:       assertEquals(46, Node.IS_NAMESPACE);
909:       assertEquals(54, Node.SLASH_V);
910:       assertEquals(51, Node.STATIC_SOURCE_FILE);
911:       assertEquals(50, Node.FREE_CALL);
912:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
913:       assertEquals(56, Node.CHANGE_TIME);
914:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
915:       assertEquals(37, Node.OPT_ARG_NAME);
916:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
917:       assertEquals(48, Node.DIRECTIVES);
918:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
919:       assertEquals(12, Node.COLUMN_BITS);
920:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
921:       assertEquals(4095, Node.COLUMN_MASK);
922:       assertNotSame(node1, node0);
923:       assertFalse(node1.isNew());
924:       assertFalse(node1.isAdd());
925:       assertFalse(node1.isBlock());
926:       assertFalse(node1.isWhile());
927:       assertFalse(node1.isDo());
928:       assertTrue(node1.isString());
929:       assertFalse(node1.isStringKey());
930:       assertFalse(node1.isOr());
931:       assertFalse(node1.isParamList());
932:       assertFalse(node1.isLabel());
933:       assertFalse(node1.isSetterDef());
934:       assertFalse(node1.isLabelName());
935:       assertFalse(node1.isAssignAdd());
936:       assertFalse(node1.isContinue());
937:       assertFalse(node1.isVar());
938:       assertFalse(node1.isCast());
939:       assertEquals(40, node1.getType());
940:       assertEquals(0, node1.getChildCount());
941:       assertFalse(node1.isFunction());
942:       assertFalse(node1.isScript());
943:       assertFalse(node1.hasOneChild());
944:       assertFalse(node1.isTry());
945:       assertFalse(node1.isGetterDef());
946:       assertFalse(node1.isNumber());
947:       assertFalse(node1.isNE());
948:       assertFalse(node1.isThis());
949:       assertFalse(node1.isIf());
950:       assertEquals((-1), node1.getLineno());
951:       assertFalse(node1.isCatch());
952:       assertFalse(node1.isFor());
953:       assertFalse(node1.isHook());
954:       assertFalse(node1.isInstanceOf());
955:       assertFalse(node1.isRegExp());
956:       assertFalse(node1.hasMoreThanOneChild());
957:       assertFalse(node1.isWith());
958:       assertEquals((-1), node1.getCharno());
959:       assertFalse(node1.isInc());
960:       assertFalse(node1.isSwitch());
961:       assertFalse(node1.isCase());
962:       assertFalse(node1.isIn());
963:       assertFalse(node1.isThrow());
964:       assertFalse(node1.isArrayLit());
965:       assertFalse(node1.isFalse());
966:       assertFalse(node1.isVoid());
967:       assertFalse(node1.isDebugger());
968:       assertFalse(node1.isTrue());
969:       assertFalse(node1.isExprResult());
970:       assertFalse(node1.isDefaultCase());
971:       assertFalse(node1.isAnd());
972:       assertFalse(node1.isObjectLit());
973:       assertFalse(node1.isEmpty());
974:       assertEquals((-1), node1.getSourcePosition());
975:       assertFalse(node1.isNot());
976:       assertFalse(node1.isGetProp());
977:       assertFalse(node1.isComma());
978:       assertFalse(node1.isNull());
979:       assertFalse(node1.isReturn());
980:       assertFalse(node1.isDelProp());
981:       assertFalse(node1.isBreak());
982:       assertFalse(node1.isName());
983:       assertFalse(node1.isGetElem());
984:       assertFalse(node1.isCall());
985:       assertFalse(node1.hasChildren());
986:       assertFalse(node1.isDec());
987:       assertFalse(node1.isAssign());
988:       assertFalse(node1.isTypeOf());
989:       assertFalse(node1.equals((Object)node0));
990:       
991:       node1.detachChildren();
992:       assertEquals(43, Node.IS_CONSTANT_NAME);
993:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
994:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
995:       assertEquals(53, Node.INPUT_ID);
996:       assertEquals(55, Node.INFERRED_FUNCTION);
997:       assertEquals(8, Node.FLAG_NO_THROWS);
998:       assertEquals(36, Node.QUOTED_PROP);
999:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1000:       assertEquals(47, Node.IS_DISPATCHER);
1001:       assertEquals(29, Node.JSDOC_INFO_PROP);
1002:       assertEquals(40, Node.ORIGINALNAME_PROP);
1003:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1004:       assertEquals(39, Node.EMPTY_BLOCK);
1005:       assertEquals(2, Node.POST_FLAG);
1006:       assertEquals(30, Node.VAR_ARGS_NAME);
1007:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1008:       assertEquals(57, Node.LAST_PROP);
1009:       assertEquals(49, Node.DIRECT_EVAL);
1010:       assertEquals(32, Node.INCRDECR_PROP);
1011:       assertEquals(1, Node.DECR_FLAG);
1012:       assertEquals(52, Node.LENGTH);
1013:       assertEquals(57, Node.REFLECTED_OBJECT);
1014:       assertEquals(46, Node.IS_NAMESPACE);
1015:       assertEquals(54, Node.SLASH_V);
1016:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1017:       assertEquals(50, Node.FREE_CALL);
1018:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1019:       assertEquals(56, Node.CHANGE_TIME);
1020:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1021:       assertEquals(37, Node.OPT_ARG_NAME);
1022:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1023:       assertEquals(48, Node.DIRECTIVES);
1024:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1025:       assertEquals(12, Node.COLUMN_BITS);
1026:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1027:       assertEquals(4095, Node.COLUMN_MASK);
1028:       assertNotSame(node1, node0);
1029:       assertFalse(node1.isNew());
1030:       assertFalse(node1.isAdd());
1031:       assertFalse(node1.isBlock());
1032:       assertFalse(node1.isWhile());
1033:       assertFalse(node1.isDo());
1034:       assertTrue(node1.isString());
1035:       assertFalse(node1.isStringKey());
1036:       assertFalse(node1.isOr());
1037:       assertFalse(node1.isParamList());
1038:       assertFalse(node1.isLabel());
1039:       assertFalse(node1.isSetterDef());
1040:       assertFalse(node1.isLabelName());
1041:       assertFalse(node1.isAssignAdd());
1042:       assertFalse(node1.isContinue());
1043:       assertFalse(node1.isVar());
1044:       assertFalse(node1.isCast());
1045:       assertEquals(40, node1.getType());
1046:       assertEquals(0, node1.getChildCount());
1047:       assertFalse(node1.isFunction());
1048:       assertFalse(node1.isScript());
1049:       assertFalse(node1.hasOneChild());
1050:       assertFalse(node1.isTry());
1051:       assertFalse(node1.isGetterDef());
1052:       assertFalse(node1.isNumber());
1053:       assertFalse(node1.isNE());
1054:       assertFalse(node1.isThis());
1055:       assertFalse(node1.isIf());
1056:       assertEquals((-1), node1.getLineno());
1057:       assertFalse(node1.isCatch());
1058:       assertFalse(node1.isFor());
1059:       assertFalse(node1.isHook());
1060:       assertFalse(node1.isInstanceOf());
1061:       assertFalse(node1.isRegExp());
1062:       assertFalse(node1.hasMoreThanOneChild());
1063:       assertFalse(node1.isWith());
1064:       assertEquals((-1), node1.getCharno());
1065:       assertFalse(node1.isInc());
1066:       assertFalse(node1.isSwitch());
1067:       assertFalse(node1.isCase());
1068:       assertFalse(node1.isIn());
1069:       assertFalse(node1.isThrow());
1070:       assertFalse(node1.isArrayLit());
1071:       assertFalse(node1.isFalse());
1072:       assertFalse(node1.isVoid());
1073:       assertFalse(node1.isDebugger());
1074:       assertFalse(node1.isTrue());
1075:       assertFalse(node1.isExprResult());
1076:       assertFalse(node1.isDefaultCase());
1077:       assertFalse(node1.isAnd());
1078:       assertFalse(node1.isObjectLit());
1079:       assertFalse(node1.isEmpty());
1080:       assertEquals((-1), node1.getSourcePosition());
1081:       assertFalse(node1.isNot());
1082:       assertFalse(node1.isGetProp());
1083:       assertFalse(node1.isComma());
1084:       assertFalse(node1.isNull());
1085:       assertFalse(node1.isReturn());
1086:       assertFalse(node1.isDelProp());
1087:       assertFalse(node1.isBreak());
1088:       assertFalse(node1.isName());
1089:       assertFalse(node1.isGetElem());
1090:       assertFalse(node1.isCall());
1091:       assertFalse(node1.hasChildren());
1092:       assertFalse(node1.isDec());
1093:       assertFalse(node1.isAssign());
1094:       assertFalse(node1.isTypeOf());
1095:       assertFalse(node1.equals((Object)node0));
1096:       
1097:       node0.setInputId((InputId) null);
1098:       assertEquals(43, Node.IS_CONSTANT_NAME);
1099:       assertEquals(36, Node.QUOTED_PROP);
1100:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1101:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1102:       assertEquals(4095, Node.COLUMN_MASK);
1103:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1104:       assertEquals(47, Node.IS_DISPATCHER);
1105:       assertEquals(56, Node.CHANGE_TIME);
1106:       assertEquals(29, Node.JSDOC_INFO_PROP);
1107:       assertEquals(39, Node.EMPTY_BLOCK);
1108:       assertEquals(48, Node.DIRECTIVES);
1109:       assertEquals(37, Node.OPT_ARG_NAME);
1110:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1111:       assertEquals(53, Node.INPUT_ID);
1112:       assertEquals(57, Node.REFLECTED_OBJECT);
1113:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1114:       assertEquals(55, Node.INFERRED_FUNCTION);
1115:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1116:       assertEquals(52, Node.LENGTH);
1117:       assertEquals(8, Node.FLAG_NO_THROWS);
1118:       assertEquals(57, Node.LAST_PROP);
1119:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1120:       assertEquals(54, Node.SLASH_V);
1121:       assertEquals(1, Node.DECR_FLAG);
1122:       assertEquals(49, Node.DIRECT_EVAL);
1123:       assertEquals(12, Node.COLUMN_BITS);
1124:       assertEquals(40, Node.ORIGINALNAME_PROP);
1125:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1126:       assertEquals(2, Node.POST_FLAG);
1127:       assertEquals(30, Node.VAR_ARGS_NAME);
1128:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1129:       assertEquals(32, Node.INCRDECR_PROP);
1130:       assertEquals(46, Node.IS_NAMESPACE);
1131:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1132:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1133:       assertEquals(50, Node.FREE_CALL);
1134:       assertNotSame(node0, node1);
1135:       assertFalse(node0.isNew());
1136:       assertFalse(node0.isBlock());
1137:       assertFalse(node0.isAdd());
1138:       assertFalse(node0.isVar());
1139:       assertFalse(node0.isWhile());
1140:       assertFalse(node0.isName());
1141:       assertFalse(node0.isCall());
1142:       assertFalse(node0.hasMoreThanOneChild());
1143:       assertFalse(node0.isContinue());
1144:       assertEquals(13, node0.getCharno());
1145:       assertFalse(node0.isOr());
1146:       assertFalse(node0.isSetterDef());
1147:       assertFalse(node0.isLabel());
1148:       assertFalse(node0.isNull());
1149:       assertFalse(node0.isAssignAdd());
1150:       assertFalse(node0.isDo());
1151:       assertEquals(106509, node0.getSourcePosition());
1152:       assertFalse(node0.isVoid());
1153:       assertFalse(node0.isExprResult());
1154:       assertFalse(node0.isTrue());
1155:       assertFalse(node0.isDebugger());
1156:       assertFalse(node0.isGetElem());
1157:       assertFalse(node0.isAssign());
1158:       assertFalse(node0.hasChildren());
1159:       assertFalse(node0.isDec());
1160:       assertFalse(node0.isTypeOf());
1161:       assertFalse(node0.isFunction());
1162:       assertFalse(node0.isCast());
1163:       assertFalse(node0.isComma());
1164:       assertFalse(node0.isGetProp());
1165:       assertFalse(node0.isAnd());
1166:       assertFalse(node0.isObjectLit());
1167:       assertFalse(node0.isNot());
1168:       assertFalse(node0.isString());
1169:       assertFalse(node0.isInc());
1170:       assertFalse(node0.isHook());
1171:       assertFalse(node0.isSwitch());
1172:       assertFalse(node0.isFalse());
1173:       assertTrue(node0.isReturn());
1174:       assertFalse(node0.isThrow());
1175:       assertFalse(node0.isBreak());
1176:       assertEquals(4, node0.getType());
1177:       assertFalse(node0.isNE());
1178:       assertFalse(node0.isDelProp());
1179:       assertFalse(node0.isIf());
1180:       assertFalse(node0.isEmpty());
1181:       assertEquals(26, node0.getLineno());
1182:       assertFalse(node0.isIn());
1183:       assertFalse(node0.isTry());
1184:       assertFalse(node0.isDefaultCase());
1185:       assertFalse(node0.hasOneChild());
1186:       assertFalse(node0.isLabelName());
1187:       assertFalse(node0.isFor());
1188:       assertFalse(node0.isArrayLit());
1189:       assertFalse(node0.isInstanceOf());
1190:       assertFalse(node0.isRegExp());
1191:       assertEquals(0, node0.getChildCount());
1192:       assertFalse(node0.isCatch());
1193:       assertFalse(node0.isWith());
1194:       assertFalse(node0.isThis());
1195:       assertFalse(node0.isParamList());
1196:       assertFalse(node0.isStringKey());
1197:       assertFalse(node0.isCase());
1198:       assertFalse(node0.isNumber());
1199:       assertFalse(node0.isGetterDef());
1200:       assertFalse(node0.isScript());
1201:       assertFalse(node0.equals((Object)node1));
1202:       
1203:       node0.setLineno(54);
1204:       assertEquals(43, Node.IS_CONSTANT_NAME);
1205:       assertEquals(36, Node.QUOTED_PROP);
1206:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1207:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1208:       assertEquals(4095, Node.COLUMN_MASK);
1209:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1210:       assertEquals(47, Node.IS_DISPATCHER);
1211:       assertEquals(56, Node.CHANGE_TIME);
1212:       assertEquals(29, Node.JSDOC_INFO_PROP);
1213:       assertEquals(39, Node.EMPTY_BLOCK);
1214:       assertEquals(48, Node.DIRECTIVES);
1215:       assertEquals(37, Node.OPT_ARG_NAME);
1216:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1217:       assertEquals(53, Node.INPUT_ID);
1218:       assertEquals(57, Node.REFLECTED_OBJECT);
1219:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1220:       assertEquals(55, Node.INFERRED_FUNCTION);
1221:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1222:       assertEquals(52, Node.LENGTH);
1223:       assertEquals(8, Node.FLAG_NO_THROWS);
1224:       assertEquals(57, Node.LAST_PROP);
1225:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1226:       assertEquals(54, Node.SLASH_V);
1227:       assertEquals(1, Node.DECR_FLAG);
1228:       assertEquals(49, Node.DIRECT_EVAL);
1229:       assertEquals(12, Node.COLUMN_BITS);
1230:       assertEquals(40, Node.ORIGINALNAME_PROP);
1231:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1232:       assertEquals(2, Node.POST_FLAG);
1233:       assertEquals(30, Node.VAR_ARGS_NAME);
1234:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1235:       assertEquals(32, Node.INCRDECR_PROP);
1236:       assertEquals(46, Node.IS_NAMESPACE);
1237:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1238:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1239:       assertEquals(50, Node.FREE_CALL);
1240:       assertNotSame(node0, node1);
1241:       assertFalse(node0.isNew());
1242:       assertFalse(node0.isBlock());
1243:       assertFalse(node0.isAdd());
1244:       assertFalse(node0.isVar());
1245:       assertFalse(node0.isWhile());
1246:       assertFalse(node0.isName());
1247:       assertFalse(node0.isCall());
1248:       assertFalse(node0.hasMoreThanOneChild());
1249:       assertFalse(node0.isContinue());
1250:       assertEquals(13, node0.getCharno());
1251:       assertFalse(node0.isOr());
1252:       assertFalse(node0.isSetterDef());
1253:       assertFalse(node0.isLabel());
1254:       assertFalse(node0.isNull());
1255:       assertFalse(node0.isAssignAdd());
1256:       assertFalse(node0.isDo());
1257:       assertFalse(node0.isVoid());
1258:       assertFalse(node0.isExprResult());
1259:       assertFalse(node0.isTrue());
1260:       assertFalse(node0.isDebugger());
1261:       assertFalse(node0.isGetElem());
1262:       assertFalse(node0.isAssign());
1263:       assertFalse(node0.hasChildren());
1264:       assertFalse(node0.isDec());
1265:       assertFalse(node0.isTypeOf());
1266:       assertFalse(node0.isFunction());
1267:       assertFalse(node0.isCast());
1268:       assertFalse(node0.isComma());
1269:       assertFalse(node0.isGetProp());
1270:       assertFalse(node0.isAnd());
1271:       assertFalse(node0.isObjectLit());
1272:       assertFalse(node0.isNot());
1273:       assertEquals(54, node0.getLineno());
1274:       assertFalse(node0.isString());
1275:       assertFalse(node0.isInc());
1276:       assertFalse(node0.isHook());
1277:       assertFalse(node0.isSwitch());
1278:       assertFalse(node0.isFalse());
1279:       assertTrue(node0.isReturn());
1280:       assertFalse(node0.isThrow());
1281:       assertFalse(node0.isBreak());
1282:       assertEquals(4, node0.getType());
1283:       assertFalse(node0.isNE());
1284:       assertFalse(node0.isDelProp());
1285:       assertEquals(221197, node0.getSourcePosition());
1286:       assertFalse(node0.isIf());
1287:       assertFalse(node0.isEmpty());
1288:       assertFalse(node0.isIn());
1289:       assertFalse(node0.isTry());
1290:       assertFalse(node0.isDefaultCase());
1291:       assertFalse(node0.hasOneChild());
1292:       assertFalse(node0.isLabelName());
1293:       assertFalse(node0.isFor());
1294:       assertFalse(node0.isArrayLit());
1295:       assertFalse(node0.isInstanceOf());
1296:       assertFalse(node0.isRegExp());
1297:       assertEquals(0, node0.getChildCount());
1298:       assertFalse(node0.isCatch());
1299:       assertFalse(node0.isWith());
1300:       assertFalse(node0.isThis());
1301:       assertFalse(node0.isParamList());
1302:       assertFalse(node0.isStringKey());
1303:       assertFalse(node0.isCase());
1304:       assertFalse(node0.isNumber());
1305:       assertFalse(node0.isGetterDef());
1306:       assertFalse(node0.isScript());
1307:       assertFalse(node0.equals((Object)node1));
1308:       
1309:       boolean boolean5 = node1.isEquivalentTo(node0);
1310:       assertEquals(43, Node.IS_CONSTANT_NAME);
1311:       assertEquals(36, Node.QUOTED_PROP);
1312:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1313:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1314:       assertEquals(4095, Node.COLUMN_MASK);
1315:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1316:       assertEquals(47, Node.IS_DISPATCHER);
1317:       assertEquals(56, Node.CHANGE_TIME);
1318:       assertEquals(29, Node.JSDOC_INFO_PROP);
1319:       assertEquals(39, Node.EMPTY_BLOCK);
1320:       assertEquals(48, Node.DIRECTIVES);
1321:       assertEquals(37, Node.OPT_ARG_NAME);
1322:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1323:       assertEquals(53, Node.INPUT_ID);
1324:       assertEquals(57, Node.REFLECTED_OBJECT);
1325:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1326:       assertEquals(55, Node.INFERRED_FUNCTION);
1327:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1328:       assertEquals(52, Node.LENGTH);
1329:       assertEquals(8, Node.FLAG_NO_THROWS);
1330:       assertEquals(57, Node.LAST_PROP);
1331:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1332:       assertEquals(54, Node.SLASH_V);
1333:       assertEquals(1, Node.DECR_FLAG);
1334:       assertEquals(49, Node.DIRECT_EVAL);
1335:       assertEquals(12, Node.COLUMN_BITS);
1336:       assertEquals(40, Node.ORIGINALNAME_PROP);
1337:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1338:       assertEquals(2, Node.POST_FLAG);
1339:       assertEquals(30, Node.VAR_ARGS_NAME);
1340:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1341:       assertEquals(32, Node.INCRDECR_PROP);
1342:       assertEquals(46, Node.IS_NAMESPACE);
1343:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1344:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1345:       assertEquals(50, Node.FREE_CALL);
1346:       assertEquals(43, Node.IS_CONSTANT_NAME);
1347:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1348:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1349:       assertEquals(53, Node.INPUT_ID);
1350:       assertEquals(55, Node.INFERRED_FUNCTION);
1351:       assertEquals(8, Node.FLAG_NO_THROWS);
1352:       assertEquals(36, Node.QUOTED_PROP);
1353:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1354:       assertEquals(47, Node.IS_DISPATCHER);
1355:       assertEquals(29, Node.JSDOC_INFO_PROP);
1356:       assertEquals(40, Node.ORIGINALNAME_PROP);
1357:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1358:       assertEquals(39, Node.EMPTY_BLOCK);
1359:       assertEquals(2, Node.POST_FLAG);
1360:       assertEquals(30, Node.VAR_ARGS_NAME);
1361:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1362:       assertEquals(57, Node.LAST_PROP);
1363:       assertEquals(49, Node.DIRECT_EVAL);
1364:       assertEquals(32, Node.INCRDECR_PROP);
1365:       assertEquals(1, Node.DECR_FLAG);
1366:       assertEquals(52, Node.LENGTH);
1367:       assertEquals(57, Node.REFLECTED_OBJECT);
1368:       assertEquals(46, Node.IS_NAMESPACE);
1369:       assertEquals(54, Node.SLASH_V);
1370:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1371:       assertEquals(50, Node.FREE_CALL);
1372:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1373:       assertEquals(56, Node.CHANGE_TIME);
1374:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1375:       assertEquals(37, Node.OPT_ARG_NAME);
1376:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1377:       assertEquals(48, Node.DIRECTIVES);
1378:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1379:       assertEquals(12, Node.COLUMN_BITS);
1380:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1381:       assertEquals(4095, Node.COLUMN_MASK);
1382:       assertFalse(boolean5);
1383:       assertNotSame(node0, node1);
1384:       assertNotSame(node1, node0);
1385:       assertFalse(node0.isNew());
1386:       assertFalse(node0.isBlock());
1387:       assertFalse(node0.isAdd());
1388:       assertFalse(node0.isVar());
1389:       assertFalse(node0.isWhile());
1390:       assertFalse(node0.isName());
1391:       assertFalse(node0.isCall());
1392:       assertFalse(node0.hasMoreThanOneChild());
1393:       assertFalse(node0.isContinue());
1394:       assertEquals(13, node0.getCharno());
1395:       assertFalse(node0.isOr());
1396:       assertFalse(node0.isSetterDef());
1397:       assertFalse(node0.isLabel());
1398:       assertFalse(node0.isNull());
1399:       assertFalse(node0.isAssignAdd());
1400:       assertFalse(node0.isDo());
1401:       assertFalse(node0.isVoid());
1402:       assertFalse(node0.isExprResult());
1403:       assertFalse(node0.isTrue());
1404:       assertFalse(node0.isDebugger());
1405:       assertFalse(node0.isGetElem());
1406:       assertFalse(node0.isAssign());
1407:       assertFalse(node0.hasChildren());
1408:       assertFalse(node0.isDec());
1409:       assertFalse(node0.isTypeOf());
1410:       assertFalse(node0.isFunction());
1411:       assertFalse(node0.isCast());
1412:       assertFalse(node0.isComma());
1413:       assertFalse(node0.isGetProp());
1414:       assertFalse(node0.isAnd());
1415:       assertFalse(node0.isObjectLit());
1416:       assertFalse(node0.isNot());
1417:       assertEquals(54, node0.getLineno());
1418:       assertFalse(node0.isString());
1419:       assertFalse(node0.isInc());
1420:       assertFalse(node0.isHook());
1421:       assertFalse(node0.isSwitch());
1422:       assertFalse(node0.isFalse());
1423:       assertTrue(node0.isReturn());
1424:       assertFalse(node0.isThrow());
1425:       assertFalse(node0.isBreak());
1426:       assertEquals(4, node0.getType());
1427:       assertFalse(node0.isNE());
1428:       assertFalse(node0.isDelProp());
1429:       assertEquals(221197, node0.getSourcePosition());
1430:       assertFalse(node0.isIf());
1431:       assertFalse(node0.isEmpty());
1432:       assertFalse(node0.isIn());
1433:       assertFalse(node0.isTry());
1434:       assertFalse(node0.isDefaultCase());
1435:       assertFalse(node0.hasOneChild());
1436:       assertFalse(node0.isLabelName());
1437:       assertFalse(node0.isFor());
1438:       assertFalse(node0.isArrayLit());
1439:       assertFalse(node0.isInstanceOf());
1440:       assertFalse(node0.isRegExp());
1441:       assertEquals(0, node0.getChildCount());
1442:       assertFalse(node0.isCatch());
1443:       assertFalse(node0.isWith());
1444:       assertFalse(node0.isThis());
1445:       assertFalse(node0.isParamList());
1446:       assertFalse(node0.isStringKey());
1447:       assertFalse(node0.isCase());
1448:       assertFalse(node0.isNumber());
1449:       assertFalse(node0.isGetterDef());
1450:       assertFalse(node0.isScript());
1451:       assertFalse(node1.isNew());
1452:       assertFalse(node1.isAdd());
1453:       assertFalse(node1.isBlock());
1454:       assertFalse(node1.isWhile());
1455:       assertFalse(node1.isDo());
1456:       assertTrue(node1.isString());
1457:       assertFalse(node1.isStringKey());
1458:       assertFalse(node1.isOr());
1459:       assertFalse(node1.isParamList());
1460:       assertFalse(node1.isLabel());
1461:       assertFalse(node1.isSetterDef());
1462:       assertFalse(node1.isLabelName());
1463:       assertFalse(node1.isAssignAdd());
1464:       assertFalse(node1.isContinue());
1465:       assertFalse(node1.isVar());
1466:       assertFalse(node1.isCast());
1467:       assertEquals(40, node1.getType());
1468:       assertEquals(0, node1.getChildCount());
1469:       assertFalse(node1.isFunction());
1470:       assertFalse(node1.isScript());
1471:       assertFalse(node1.hasOneChild());
1472:       assertFalse(node1.isTry());
1473:       assertFalse(node1.isGetterDef());
1474:       assertFalse(node1.isNumber());
1475:       assertFalse(node1.isNE());
1476:       assertFalse(node1.isThis());
1477:       assertFalse(node1.isIf());
1478:       assertEquals((-1), node1.getLineno());
1479:       assertFalse(node1.isCatch());
1480:       assertFalse(node1.isFor());
1481:       assertFalse(node1.isHook());
1482:       assertFalse(node1.isInstanceOf());
1483:       assertFalse(node1.isRegExp());
1484:       assertFalse(node1.hasMoreThanOneChild());
1485:       assertFalse(node1.isWith());
1486:       assertEquals((-1), node1.getCharno());
1487:       assertFalse(node1.isInc());
1488:       assertFalse(node1.isSwitch());
1489:       assertFalse(node1.isCase());
1490:       assertFalse(node1.isIn());
1491:       assertFalse(node1.isThrow());
1492:       assertFalse(node1.isArrayLit());
1493:       assertFalse(node1.isFalse());
1494:       assertFalse(node1.isVoid());
1495:       assertFalse(node1.isDebugger());
1496:       assertFalse(node1.isTrue());
1497:       assertFalse(node1.isExprResult());
1498:       assertFalse(node1.isDefaultCase());
1499:       assertFalse(node1.isAnd());
1500:       assertFalse(node1.isObjectLit());
1501:       assertFalse(node1.isEmpty());
1502:       assertEquals((-1), node1.getSourcePosition());
1503:       assertFalse(node1.isNot());
1504:       assertFalse(node1.isGetProp());
1505:       assertFalse(node1.isComma());
1506:       assertFalse(node1.isNull());
1507:       assertFalse(node1.isReturn());
1508:       assertFalse(node1.isDelProp());
1509:       assertFalse(node1.isBreak());
1510:       assertFalse(node1.isName());
1511:       assertFalse(node1.isGetElem());
1512:       assertFalse(node1.isCall());
1513:       assertFalse(node1.hasChildren());
1514:       assertFalse(node1.isDec());
1515:       assertFalse(node1.isAssign());
1516:       assertFalse(node1.isTypeOf());
1517:       assertFalse(node0.equals((Object)node1));
1518:       assertFalse(node1.equals((Object)node0));
1519:       assertTrue(boolean5 == boolean3);
1520:       assertTrue(boolean5 == boolean4);
1521:       assertTrue(boolean5 == boolean0);
1522:       assertTrue(boolean5 == boolean1);
1523:       assertTrue(boolean5 == boolean2);
1524:       
1525:       boolean boolean6 = node1.isObjectLit();
1526:       assertEquals(43, Node.IS_CONSTANT_NAME);
1527:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1528:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1529:       assertEquals(53, Node.INPUT_ID);
1530:       assertEquals(55, Node.INFERRED_FUNCTION);
1531:       assertEquals(8, Node.FLAG_NO_THROWS);
1532:       assertEquals(36, Node.QUOTED_PROP);
1533:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1534:       assertEquals(47, Node.IS_DISPATCHER);
1535:       assertEquals(29, Node.JSDOC_INFO_PROP);
1536:       assertEquals(40, Node.ORIGINALNAME_PROP);
1537:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1538:       assertEquals(39, Node.EMPTY_BLOCK);
1539:       assertEquals(2, Node.POST_FLAG);
1540:       assertEquals(30, Node.VAR_ARGS_NAME);
1541:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1542:       assertEquals(57, Node.LAST_PROP);
1543:       assertEquals(49, Node.DIRECT_EVAL);
1544:       assertEquals(32, Node.INCRDECR_PROP);
1545:       assertEquals(1, Node.DECR_FLAG);
1546:       assertEquals(52, Node.LENGTH);
1547:       assertEquals(57, Node.REFLECTED_OBJECT);
1548:       assertEquals(46, Node.IS_NAMESPACE);
1549:       assertEquals(54, Node.SLASH_V);
1550:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1551:       assertEquals(50, Node.FREE_CALL);
1552:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1553:       assertEquals(56, Node.CHANGE_TIME);
1554:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1555:       assertEquals(37, Node.OPT_ARG_NAME);
1556:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1557:       assertEquals(48, Node.DIRECTIVES);
1558:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1559:       assertEquals(12, Node.COLUMN_BITS);
1560:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1561:       assertEquals(4095, Node.COLUMN_MASK);
1562:       assertFalse(boolean6);
1563:       assertNotSame(node1, node0);
1564:       assertFalse(node1.isNew());
1565:       assertFalse(node1.isAdd());
1566:       assertFalse(node1.isBlock());
1567:       assertFalse(node1.isWhile());
1568:       assertFalse(node1.isDo());
1569:       assertTrue(node1.isString());
1570:       assertFalse(node1.isStringKey());
1571:       assertFalse(node1.isOr());
1572:       assertFalse(node1.isParamList());
1573:       assertFalse(node1.isLabel());
1574:       assertFalse(node1.isSetterDef());
1575:       assertFalse(node1.isLabelName());
1576:       assertFalse(node1.isAssignAdd());
1577:       assertFalse(node1.isContinue());
1578:       assertFalse(node1.isVar());
1579:       assertFalse(node1.isCast());
1580:       assertEquals(40, node1.getType());
1581:       assertEquals(0, node1.getChildCount());
1582:       assertFalse(node1.isFunction());
1583:       assertFalse(node1.isScript());
1584:       assertFalse(node1.hasOneChild());
1585:       assertFalse(node1.isTry());
1586:       assertFalse(node1.isGetterDef());
1587:       assertFalse(node1.isNumber());
1588:       assertFalse(node1.isNE());
1589:       assertFalse(node1.isThis());
1590:       assertFalse(node1.isIf());
1591:       assertEquals((-1), node1.getLineno());
1592:       assertFalse(node1.isCatch());
1593:       assertFalse(node1.isFor());
1594:       assertFalse(node1.isHook());
1595:       assertFalse(node1.isInstanceOf());
1596:       assertFalse(node1.isRegExp());
1597:       assertFalse(node1.hasMoreThanOneChild());
1598:       assertFalse(node1.isWith());
1599:       assertEquals((-1), node1.getCharno());
1600:       assertFalse(node1.isInc());
1601:       assertFalse(node1.isSwitch());
1602:       assertFalse(node1.isCase());
1603:       assertFalse(node1.isIn());
1604:       assertFalse(node1.isThrow());
1605:       assertFalse(node1.isArrayLit());
1606:       assertFalse(node1.isFalse());
1607:       assertFalse(node1.isVoid());
1608:       assertFalse(node1.isDebugger());
1609:       assertFalse(node1.isTrue());
1610:       assertFalse(node1.isExprResult());
1611:       assertFalse(node1.isDefaultCase());
1612:       assertFalse(node1.isAnd());
1613:       assertFalse(node1.isObjectLit());
1614:       assertFalse(node1.isEmpty());
1615:       assertEquals((-1), node1.getSourcePosition());
1616:       assertFalse(node1.isNot());
1617:       assertFalse(node1.isGetProp());
1618:       assertFalse(node1.isComma());
1619:       assertFalse(node1.isNull());
1620:       assertFalse(node1.isReturn());
1621:       assertFalse(node1.isDelProp());
1622:       assertFalse(node1.isBreak());
1623:       assertFalse(node1.isName());
1624:       assertFalse(node1.isGetElem());
1625:       assertFalse(node1.isCall());
1626:       assertFalse(node1.hasChildren());
1627:       assertFalse(node1.isDec());
1628:       assertFalse(node1.isAssign());
1629:       assertFalse(node1.isTypeOf());
1630:       assertTrue(boolean6 == boolean3);
1631:       assertTrue(boolean6 == boolean5);
1632:       assertTrue(boolean6 == boolean2);
1633:       assertTrue(boolean6 == boolean4);
1634:       assertTrue(boolean6 == boolean0);
1635:       assertTrue(boolean6 == boolean1);
1636:       assertFalse(node1.equals((Object)node0));
1637:       
1638:       Node node2 = node1.getParent();
1639:       assertEquals(43, Node.IS_CONSTANT_NAME);
1640:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1641:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1642:       assertEquals(53, Node.INPUT_ID);
1643:       assertEquals(55, Node.INFERRED_FUNCTION);
1644:       assertEquals(8, Node.FLAG_NO_THROWS);
1645:       assertEquals(36, Node.QUOTED_PROP);
1646:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1647:       assertEquals(47, Node.IS_DISPATCHER);
1648:       assertEquals(29, Node.JSDOC_INFO_PROP);
1649:       assertEquals(40, Node.ORIGINALNAME_PROP);
1650:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1651:       assertEquals(39, Node.EMPTY_BLOCK);
1652:       assertEquals(2, Node.POST_FLAG);
1653:       assertEquals(30, Node.VAR_ARGS_NAME);
1654:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1655:       assertEquals(57, Node.LAST_PROP);
1656:       assertEquals(49, Node.DIRECT_EVAL);
1657:       assertEquals(32, Node.INCRDECR_PROP);
1658:       assertEquals(1, Node.DECR_FLAG);
1659:       assertEquals(52, Node.LENGTH);
1660:       assertEquals(57, Node.REFLECTED_OBJECT);
1661:       assertEquals(46, Node.IS_NAMESPACE);
1662:       assertEquals(54, Node.SLASH_V);
1663:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1664:       assertEquals(50, Node.FREE_CALL);
1665:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1666:       assertEquals(56, Node.CHANGE_TIME);
1667:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1668:       assertEquals(37, Node.OPT_ARG_NAME);
1669:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1670:       assertEquals(48, Node.DIRECTIVES);
1671:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1672:       assertEquals(12, Node.COLUMN_BITS);
1673:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1674:       assertEquals(4095, Node.COLUMN_MASK);
1675:       assertNull(node2);
1676:       assertNotSame(node1, node0);
1677:       assertFalse(node1.isNew());
1678:       assertFalse(node1.isAdd());
1679:       assertFalse(node1.isBlock());
1680:       assertFalse(node1.isWhile());
1681:       assertFalse(node1.isDo());
1682:       assertTrue(node1.isString());
1683:       assertFalse(node1.isStringKey());
1684:       assertFalse(node1.isOr());
1685:       assertFalse(node1.isParamList());
1686:       assertFalse(node1.isLabel());
1687:       assertFalse(node1.isSetterDef());
1688:       assertFalse(node1.isLabelName());
1689:       assertFalse(node1.isAssignAdd());
1690:       assertFalse(node1.isContinue());
1691:       assertFalse(node1.isVar());
1692:       assertFalse(node1.isCast());
1693:       assertEquals(40, node1.getType());
1694:       assertEquals(0, node1.getChildCount());
1695:       assertFalse(node1.isFunction());
1696:       assertFalse(node1.isScript());
1697:       assertFalse(node1.hasOneChild());
1698:       assertFalse(node1.isTry());
1699:       assertFalse(node1.isGetterDef());
1700:       assertFalse(node1.isNumber());
1701:       assertFalse(node1.isNE());
1702:       assertFalse(node1.isThis());
1703:       assertFalse(node1.isIf());
1704:       assertEquals((-1), node1.getLineno());
1705:       assertFalse(node1.isCatch());
1706:       assertFalse(node1.isFor());
1707:       assertFalse(node1.isHook());
1708:       assertFalse(node1.isInstanceOf());
1709:       assertFalse(node1.isRegExp());
1710:       assertFalse(node1.hasMoreThanOneChild());
1711:       assertFalse(node1.isWith());
1712:       assertEquals((-1), node1.getCharno());
1713:       assertFalse(node1.isInc());
1714:       assertFalse(node1.isSwitch());
1715:       assertFalse(node1.isCase());
1716:       assertFalse(node1.isIn());
1717:       assertFalse(node1.isThrow());
1718:       assertFalse(node1.isArrayLit());
1719:       assertFalse(node1.isFalse());
1720:       assertFalse(node1.isVoid());
1721:       assertFalse(node1.isDebugger());
1722:       assertFalse(node1.isTrue());
1723:       assertFalse(node1.isExprResult());
1724:       assertFalse(node1.isDefaultCase());
1725:       assertFalse(node1.isAnd());
1726:       assertFalse(node1.isObjectLit());
1727:       assertFalse(node1.isEmpty());
1728:       assertEquals((-1), node1.getSourcePosition());
1729:       assertFalse(node1.isNot());
1730:       assertFalse(node1.isGetProp());
1731:       assertFalse(node1.isComma());
1732:       assertFalse(node1.isNull());
1733:       assertFalse(node1.isReturn());
1734:       assertFalse(node1.isDelProp());
1735:       assertFalse(node1.isBreak());
1736:       assertFalse(node1.isName());
1737:       assertFalse(node1.isGetElem());
1738:       assertFalse(node1.isCall());
1739:       assertFalse(node1.hasChildren());
1740:       assertFalse(node1.isDec());
1741:       assertFalse(node1.isAssign());
1742:       assertFalse(node1.isTypeOf());
1743:       assertFalse(node1.equals((Object)node0));
1744:       
1745:       String string0 = node0.getQualifiedName();
1746:       assertEquals(43, Node.IS_CONSTANT_NAME);
1747:       assertEquals(36, Node.QUOTED_PROP);
1748:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1749:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1750:       assertEquals(4095, Node.COLUMN_MASK);
1751:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1752:       assertEquals(47, Node.IS_DISPATCHER);
1753:       assertEquals(56, Node.CHANGE_TIME);
1754:       assertEquals(29, Node.JSDOC_INFO_PROP);
1755:       assertEquals(39, Node.EMPTY_BLOCK);
1756:       assertEquals(48, Node.DIRECTIVES);
1757:       assertEquals(37, Node.OPT_ARG_NAME);
1758:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1759:       assertEquals(53, Node.INPUT_ID);
1760:       assertEquals(57, Node.REFLECTED_OBJECT);
1761:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1762:       assertEquals(55, Node.INFERRED_FUNCTION);
1763:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1764:       assertEquals(52, Node.LENGTH);
1765:       assertEquals(8, Node.FLAG_NO_THROWS);
1766:       assertEquals(57, Node.LAST_PROP);
1767:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1768:       assertEquals(54, Node.SLASH_V);
1769:       assertEquals(1, Node.DECR_FLAG);
1770:       assertEquals(49, Node.DIRECT_EVAL);
1771:       assertEquals(12, Node.COLUMN_BITS);
1772:       assertEquals(40, Node.ORIGINALNAME_PROP);
1773:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1774:       assertEquals(2, Node.POST_FLAG);
1775:       assertEquals(30, Node.VAR_ARGS_NAME);
1776:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1777:       assertEquals(32, Node.INCRDECR_PROP);
1778:       assertEquals(46, Node.IS_NAMESPACE);
1779:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1780:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1781:       assertEquals(50, Node.FREE_CALL);
1782:       assertNull(string0);
1783:       assertNotSame(node0, node1);
1784:       assertFalse(node0.isNew());
1785:       assertFalse(node0.isBlock());
1786:       assertFalse(node0.isAdd());
1787:       assertFalse(node0.isVar());
1788:       assertFalse(node0.isWhile());
1789:       assertFalse(node0.isName());
1790:       assertFalse(node0.isCall());
1791:       assertFalse(node0.hasMoreThanOneChild());
1792:       assertFalse(node0.isContinue());
1793:       assertEquals(13, node0.getCharno());
1794:       assertFalse(node0.isOr());
1795:       assertFalse(node0.isSetterDef());
1796:       assertFalse(node0.isLabel());
1797:       assertFalse(node0.isNull());
1798:       assertFalse(node0.isAssignAdd());
1799:       assertFalse(node0.isDo());
1800:       assertFalse(node0.isVoid());
1801:       assertFalse(node0.isExprResult());
1802:       assertFalse(node0.isTrue());
1803:       assertFalse(node0.isDebugger());
1804:       assertFalse(node0.isGetElem());
1805:       assertFalse(node0.isAssign());
1806:       assertFalse(node0.hasChildren());
1807:       assertFalse(node0.isDec());
1808:       assertFalse(node0.isTypeOf());
1809:       assertFalse(node0.isFunction());
1810:       assertFalse(node0.isCast());
1811:       assertFalse(node0.isComma());
1812:       assertFalse(node0.isGetProp());
1813:       assertFalse(node0.isAnd());
1814:       assertFalse(node0.isObjectLit());
1815:       assertFalse(node0.isNot());
1816:       assertEquals(54, node0.getLineno());
1817:       assertFalse(node0.isString());
1818:       assertFalse(node0.isInc());
1819:       assertFalse(node0.isHook());
1820:       assertFalse(node0.isSwitch());
1821:       assertFalse(node0.isFalse());
1822:       assertTrue(node0.isReturn());
1823:       assertFalse(node0.isThrow());
1824:       assertFalse(node0.isBreak());
1825:       assertEquals(4, node0.getType());
1826:       assertFalse(node0.isNE());
1827:       assertFalse(node0.isDelProp());
1828:       assertEquals(221197, node0.getSourcePosition());
1829:       assertFalse(node0.isIf());
1830:       assertFalse(node0.isEmpty());
1831:       assertFalse(node0.isIn());
1832:       assertFalse(node0.isTry());
1833:       assertFalse(node0.isDefaultCase());
1834:       assertFalse(node0.hasOneChild());
1835:       assertFalse(node0.isLabelName());
1836:       assertFalse(node0.isFor());
1837:       assertFalse(node0.isArrayLit());
1838:       assertFalse(node0.isInstanceOf());
1839:       assertFalse(node0.isRegExp());
1840:       assertEquals(0, node0.getChildCount());
1841:       assertFalse(node0.isCatch());
1842:       assertFalse(node0.isWith());
1843:       assertFalse(node0.isThis());
1844:       assertFalse(node0.isParamList());
1845:       assertFalse(node0.isStringKey());
1846:       assertFalse(node0.isCase());
1847:       assertFalse(node0.isNumber());
1848:       assertFalse(node0.isGetterDef());
1849:       assertFalse(node0.isScript());
1850:       assertFalse(node0.equals((Object)node1));
1851:       
1852:       boolean boolean7 = node1.isAnd();
1853:       assertEquals(43, Node.IS_CONSTANT_NAME);
1854:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1855:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1856:       assertEquals(53, Node.INPUT_ID);
1857:       assertEquals(55, Node.INFERRED_FUNCTION);
1858:       assertEquals(8, Node.FLAG_NO_THROWS);
1859:       assertEquals(36, Node.QUOTED_PROP);
1860:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1861:       assertEquals(47, Node.IS_DISPATCHER);
1862:       assertEquals(29, Node.JSDOC_INFO_PROP);
1863:       assertEquals(40, Node.ORIGINALNAME_PROP);
1864:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1865:       assertEquals(39, Node.EMPTY_BLOCK);
1866:       assertEquals(2, Node.POST_FLAG);
1867:       assertEquals(30, Node.VAR_ARGS_NAME);
1868:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1869:       assertEquals(57, Node.LAST_PROP);
1870:       assertEquals(49, Node.DIRECT_EVAL);
1871:       assertEquals(32, Node.INCRDECR_PROP);
1872:       assertEquals(1, Node.DECR_FLAG);
1873:       assertEquals(52, Node.LENGTH);
1874:       assertEquals(57, Node.REFLECTED_OBJECT);
1875:       assertEquals(46, Node.IS_NAMESPACE);
1876:       assertEquals(54, Node.SLASH_V);
1877:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1878:       assertEquals(50, Node.FREE_CALL);
1879:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1880:       assertEquals(56, Node.CHANGE_TIME);
1881:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1882:       assertEquals(37, Node.OPT_ARG_NAME);
1883:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1884:       assertEquals(48, Node.DIRECTIVES);
1885:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1886:       assertEquals(12, Node.COLUMN_BITS);
1887:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1888:       assertEquals(4095, Node.COLUMN_MASK);
1889:       assertFalse(boolean7);
1890:       assertNotSame(node1, node0);
1891:       assertFalse(node1.isNew());
1892:       assertFalse(node1.isAdd());
1893:       assertFalse(node1.isBlock());
1894:       assertFalse(node1.isWhile());
1895:       assertFalse(node1.isDo());
1896:       assertTrue(node1.isString());
1897:       assertFalse(node1.isStringKey());
1898:       assertFalse(node1.isOr());
1899:       assertFalse(node1.isParamList());
1900:       assertFalse(node1.isLabel());
1901:       assertFalse(node1.isSetterDef());
1902:       assertFalse(node1.isLabelName());
1903:       assertFalse(node1.isAssignAdd());
1904:       assertFalse(node1.isContinue());
1905:       assertFalse(node1.isVar());
1906:       assertFalse(node1.isCast());
1907:       assertEquals(40, node1.getType());
1908:       assertEquals(0, node1.getChildCount());
1909:       assertFalse(node1.isFunction());
1910:       assertFalse(node1.isScript());
1911:       assertFalse(node1.hasOneChild());
1912:       assertFalse(node1.isTry());
1913:       assertFalse(node1.isGetterDef());
1914:       assertFalse(node1.isNumber());
1915:       assertFalse(node1.isNE());
1916:       assertFalse(node1.isThis());
1917:       assertFalse(node1.isIf());
1918:       assertEquals((-1), node1.getLineno());
1919:       assertFalse(node1.isCatch());
1920:       assertFalse(node1.isFor());
1921:       assertFalse(node1.isHook());
1922:       assertFalse(node1.isInstanceOf());
1923:       assertFalse(node1.isRegExp());
1924:       assertFalse(node1.hasMoreThanOneChild());
1925:       assertFalse(node1.isWith());
1926:       assertEquals((-1), node1.getCharno());
1927:       assertFalse(node1.isInc());
1928:       assertFalse(node1.isSwitch());
1929:       assertFalse(node1.isCase());
1930:       assertFalse(node1.isIn());
1931:       assertFalse(node1.isThrow());
1932:       assertFalse(node1.isArrayLit());
1933:       assertFalse(node1.isFalse());
1934:       assertFalse(node1.isVoid());
1935:       assertFalse(node1.isDebugger());
1936:       assertFalse(node1.isTrue());
1937:       assertFalse(node1.isExprResult());
1938:       assertFalse(node1.isDefaultCase());
1939:       assertFalse(node1.isAnd());
1940:       assertFalse(node1.isObjectLit());
1941:       assertFalse(node1.isEmpty());
1942:       assertEquals((-1), node1.getSourcePosition());
1943:       assertFalse(node1.isNot());
1944:       assertFalse(node1.isGetProp());
1945:       assertFalse(node1.isComma());
1946:       assertFalse(node1.isNull());
1947:       assertFalse(node1.isReturn());
1948:       assertFalse(node1.isDelProp());
1949:       assertFalse(node1.isBreak());
1950:       assertFalse(node1.isName());
1951:       assertFalse(node1.isGetElem());
1952:       assertFalse(node1.isCall());
1953:       assertFalse(node1.hasChildren());
1954:       assertFalse(node1.isDec());
1955:       assertFalse(node1.isAssign());
1956:       assertFalse(node1.isTypeOf());
1957:       assertTrue(boolean7 == boolean3);
1958:       assertTrue(boolean7 == boolean1);
1959:       assertTrue(boolean7 == boolean2);
1960:       assertTrue(boolean7 == boolean4);
1961:       assertTrue(boolean7 == boolean0);
1962:       assertTrue(boolean7 == boolean5);
1963:       assertTrue(boolean7 == boolean6);
1964:       assertFalse(node1.equals((Object)node0));
1965:   }
1966: }
RegularFileObject[/tmp/EvoSuite_133_1629222892028/com/google/javascript/rhino/Node_133_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:52 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_133_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_133_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.common.collect.RegularImmutableSet",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.common.collect.SingletonImmutableSet",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.javascript.rhino.JSDocInfo$1",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.EmptyImmutableSet",
224:       "com.google.common.collect.Maps$ImprovedAbstractMap",
225:       "com.google.common.collect.ImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
227:       "com.google.common.collect.ImmutableList",
228:       "com.google.common.collect.SingletonImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
230:       "com.google.javascript.rhino.jstype.StringType",
231:       "com.google.javascript.rhino.Node$AbstractPropListItem",
232:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
233:       "com.google.javascript.rhino.jstype.TemplatizedType",
234:       "com.google.javascript.rhino.jstype.Visitor",
235:       "com.google.javascript.rhino.jstype.NoResolvedType",
236:       "com.google.javascript.rhino.jstype.JSTypeNative",
237:       "com.google.javascript.rhino.jstype.AllType",
238:       "com.google.common.collect.Maps",
239:       "com.google.common.collect.SetMultimap",
240:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
241:       "com.google.common.collect.Maps$EntryTransformer",
242:       "com.google.javascript.rhino.JSTypeExpression",
243:       "com.google.common.collect.Iterators$MergingIterator"
244:     );
245:   } 
246: 
247:   private static void resetClasses() {
248:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_133_tmp__ESTest_scaffolding.class.getClassLoader()); 
249: 
250:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
251:       "com.google.javascript.rhino.Node",
252:       "com.google.javascript.rhino.Node$NumberNode",
253:       "com.google.javascript.rhino.Node$StringNode",
254:       "com.google.javascript.rhino.Node$AbstractPropListItem",
255:       "com.google.javascript.rhino.Node$ObjectPropListItem",
256:       "com.google.javascript.rhino.Node$IntPropListItem",
257:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
258:       "com.google.javascript.rhino.Node$AncestorIterable",
259:       "com.google.javascript.rhino.Node$NodeMismatch",
260:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
261:       "com.google.javascript.rhino.Node$SideEffectFlags",
262:       "com.google.javascript.rhino.Token",
263:       "com.google.common.base.Preconditions",
264:       "com.google.javascript.rhino.SimpleErrorReporter",
265:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
266:       "com.google.common.base.Joiner",
267:       "com.google.common.base.Joiner$1",
268:       "com.google.common.collect.Collections2",
269:       "com.google.common.base.Joiner$MapJoiner",
270:       "com.google.common.collect.Maps",
271:       "com.google.common.collect.AbstractMultimap",
272:       "com.google.common.collect.AbstractMapBasedMultimap",
273:       "com.google.common.collect.AbstractSetMultimap",
274:       "com.google.common.collect.LinkedHashMultimap",
275:       "com.google.common.collect.AbstractMapEntry",
276:       "com.google.common.collect.ImmutableEntry",
277:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
278:       "com.google.common.collect.AbstractListMultimap",
279:       "com.google.common.collect.ArrayListMultimap",
280:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
281:       "com.google.common.collect.ImmutableCollection",
282:       "com.google.common.collect.RegularImmutableList",
283:       "com.google.common.collect.ObjectArrays",
284:       "com.google.common.collect.ImmutableList",
285:       "com.google.javascript.rhino.jstype.ModificationVisitor",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
287:       "com.google.common.collect.ImmutableCollection$Builder",
288:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
289:       "com.google.common.collect.ImmutableList$Builder",
290:       "com.google.common.collect.UnmodifiableIterator",
291:       "com.google.common.collect.UnmodifiableListIterator",
292:       "com.google.common.collect.Iterators$1",
293:       "com.google.common.collect.Iterators$2",
294:       "com.google.common.collect.Iterators",
295:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
296:       "com.google.javascript.rhino.jstype.JSType$1",
297:       "com.google.javascript.rhino.jstype.JSType",
298:       "com.google.javascript.rhino.jstype.ObjectType",
299:       "com.google.javascript.rhino.jstype.ProxyObjectType",
300:       "com.google.javascript.rhino.jstype.TemplateType",
301:       "com.google.javascript.rhino.jstype.ValueType",
302:       "com.google.javascript.rhino.jstype.BooleanType",
303:       "com.google.javascript.rhino.jstype.NullType",
304:       "com.google.javascript.rhino.jstype.NumberType",
305:       "com.google.javascript.rhino.jstype.StringType",
306:       "com.google.javascript.rhino.jstype.UnknownType",
307:       "com.google.javascript.rhino.jstype.VoidType",
308:       "com.google.javascript.rhino.jstype.AllType",
309:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
310:       "com.google.common.collect.ImmutableMap",
311:       "com.google.common.collect.ImmutableBiMap",
312:       "com.google.common.collect.EmptyImmutableBiMap",
313:       "com.google.javascript.rhino.jstype.PropertyMap$1",
314:       "com.google.javascript.rhino.jstype.PropertyMap",
315:       "com.google.javascript.rhino.jstype.FunctionType",
316:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.collect.AbstractIndexedListIterator",
338:       "com.google.common.collect.Iterators$11",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.Iterables",
348:       "com.google.javascript.rhino.jstype.TernaryValue",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.javascript.rhino.Node$AncestorIterable$1",
351:       "com.google.javascript.rhino.jstype.NamedType",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.javascript.rhino.jstype.JSType$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
356:       "com.google.common.collect.Platform",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2"
363:     );
364:   }
365: }

[MASTER] 17:54:52.676 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
assertFalse(boolean0);

boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

Node node0 = Node.newString("t4`]M|KApUSxQvO}GR", 26, 13);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertNotNull(node0);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertEquals(40, node0.getType());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());

node0.removeProp(13);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertEquals(40, node0.getType());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());

boolean boolean2 = node0.wasEmptyNode();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(boolean2);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertEquals(40, node0.getType());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertNotNull(iterable0);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertEquals(40, node0.getType());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());

boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
assertFalse(boolean3);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);

node0.setType(4);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertTrue(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertEquals(4, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());

boolean boolean4 = node0.isTry();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(boolean4);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertTrue(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertEquals(4, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);

Node node1 = Node.newString("");
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(node1);
assertNotSame(node1, node0);
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertTrue(node1.isString());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertEquals(40, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.equals((Object)node0));

InputId inputId0 = node0.getInputId();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertNull(inputId0);
assertNotSame(node0, node1);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertTrue(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertEquals(4, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.equals((Object)node1));

node1.detachChildren();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node1, node0);
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertTrue(node1.isString());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertEquals(40, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.equals((Object)node0));

node1.detachChildren();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node1, node0);
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertTrue(node1.isString());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertEquals(40, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.equals((Object)node0));

node0.setInputId((InputId) null);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertNotSame(node0, node1);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(106509, node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertTrue(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertEquals(4, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertEquals(26, node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.equals((Object)node1));

node0.setLineno(54);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertNotSame(node0, node1);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(54, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertTrue(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertEquals(4, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertEquals(221197, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.equals((Object)node1));

boolean boolean5 = node1.isEquivalentTo(node0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(boolean5);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(54, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertTrue(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertEquals(4, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertEquals(221197, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertTrue(node1.isString());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertEquals(40, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);

boolean boolean6 = node1.isObjectLit();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(boolean6);
assertNotSame(node1, node0);
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertTrue(node1.isString());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertEquals(40, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean1);
assertFalse(node1.equals((Object)node0));

Node node2 = node1.getParent();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertNull(node2);
assertNotSame(node1, node0);
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertTrue(node1.isString());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertEquals(40, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.equals((Object)node0));

String string0 = node0.getQualifiedName();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertNull(string0);
assertNotSame(node0, node1);
assertFalse(node0.isNew());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals(13, node0.getCharno());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals(54, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertTrue(node0.isReturn());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertEquals(4, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertEquals(221197, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.equals((Object)node1));

boolean boolean7 = node1.isAnd();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(boolean7);
assertNotSame(node1, node0);
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertTrue(node1.isString());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertFalse(node1.isLabel());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertEquals(40, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean6);
assertFalse(node1.equals((Object)node0));


[MASTER] 17:54:55.516 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_145_1629222895066/com/google/javascript/rhino/Node_145_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_145_1629222895066/com/google/javascript/rhino/Node_145_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:55.517 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:55.517 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:55.518 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 442
[MASTER] 17:54:55.520 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_145_1629222895066/com/google/javascript/rhino/Node_145_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:55 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.testdata.EvoSuiteFile;
15: import org.evosuite.runtime.testdata.FileSystemHandling;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_145_tmp__ESTest extends Node_145_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = new Node((-1792));
24:       assertEquals(56, Node.CHANGE_TIME);
25:       assertEquals(37, Node.OPT_ARG_NAME);
26:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
27:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
28:       assertEquals(29, Node.JSDOC_INFO_PROP);
29:       assertEquals(32, Node.INCRDECR_PROP);
30:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
31:       assertEquals(2, Node.POST_FLAG);
32:       assertEquals(12, Node.COLUMN_BITS);
33:       assertEquals(47, Node.IS_DISPATCHER);
34:       assertEquals(30, Node.VAR_ARGS_NAME);
35:       assertEquals(43, Node.IS_CONSTANT_NAME);
36:       assertEquals(1, Node.DECR_FLAG);
37:       assertEquals(46, Node.IS_NAMESPACE);
38:       assertEquals(54, Node.SLASH_V);
39:       assertEquals(51, Node.STATIC_SOURCE_FILE);
40:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
41:       assertEquals(50, Node.FREE_CALL);
42:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
43:       assertEquals(8, Node.FLAG_NO_THROWS);
44:       assertEquals(40, Node.ORIGINALNAME_PROP);
45:       assertEquals(48, Node.DIRECTIVES);
46:       assertEquals(39, Node.EMPTY_BLOCK);
47:       assertEquals(4095, Node.COLUMN_MASK);
48:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
49:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
50:       assertEquals(49, Node.DIRECT_EVAL);
51:       assertEquals(57, Node.LAST_PROP);
52:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
53:       assertEquals(55, Node.INFERRED_FUNCTION);
54:       assertEquals(53, Node.INPUT_ID);
55:       assertEquals(15, Node.NO_SIDE_EFFECTS);
56:       assertEquals(52, Node.LENGTH);
57:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
58:       assertEquals(36, Node.QUOTED_PROP);
59:       assertEquals(57, Node.REFLECTED_OBJECT);
60:       assertNotNull(node0);
61:       assertFalse(node0.isParamList());
62:       assertFalse(node0.isSetterDef());
63:       assertFalse(node0.isCall());
64:       assertFalse(node0.isCatch());
65:       assertFalse(node0.isVar());
66:       assertEquals(0, node0.getChildCount());
67:       assertFalse(node0.isRegExp());
68:       assertFalse(node0.isFunction());
69:       assertFalse(node0.isBlock());
70:       assertFalse(node0.isTry());
71:       assertFalse(node0.isArrayLit());
72:       assertFalse(node0.isStringKey());
73:       assertFalse(node0.isGetterDef());
74:       assertFalse(node0.isDebugger());
75:       assertFalse(node0.isAssignAdd());
76:       assertFalse(node0.isDelProp());
77:       assertFalse(node0.isLabelName());
78:       assertFalse(node0.isGetElem());
79:       assertFalse(node0.isWhile());
80:       assertFalse(node0.isDec());
81:       assertFalse(node0.hasChildren());
82:       assertFalse(node0.isTypeOf());
83:       assertFalse(node0.isReturn());
84:       assertFalse(node0.isAssign());
85:       assertFalse(node0.isLabel());
86:       assertFalse(node0.isVoid());
87:       assertFalse(node0.isTrue());
88:       assertFalse(node0.isAdd());
89:       assertFalse(node0.isExprResult());
90:       assertEquals((-1792), node0.getType());
91:       assertFalse(node0.isDefaultCase());
92:       assertFalse(node0.isDo());
93:       assertFalse(node0.isNew());
94:       assertFalse(node0.isName());
95:       assertFalse(node0.isEmpty());
96:       assertFalse(node0.isNull());
97:       assertFalse(node0.isOr());
98:       assertFalse(node0.isGetProp());
99:       assertFalse(node0.isThis());
100:       assertFalse(node0.isInstanceOf());
101:       assertFalse(node0.isBreak());
102:       assertFalse(node0.isThrow());
103:       assertFalse(node0.isFalse());
104:       assertFalse(node0.isWith());
105:       assertFalse(node0.isHook());
106:       assertFalse(node0.isComma());
107:       assertFalse(node0.isSwitch());
108:       assertFalse(node0.isScript());
109:       assertFalse(node0.hasOneChild());
110:       assertFalse(node0.isCase());
111:       assertFalse(node0.isObjectLit());
112:       assertFalse(node0.isAnd());
113:       assertFalse(node0.isString());
114:       assertFalse(node0.isNumber());
115:       assertFalse(node0.isNot());
116:       assertEquals((-1), node0.getCharno());
117:       assertEquals((-1), node0.getSourcePosition());
118:       assertFalse(node0.isNE());
119:       assertFalse(node0.isIf());
120:       assertEquals((-1), node0.getLineno());
121:       assertFalse(node0.isFor());
122:       assertFalse(node0.hasMoreThanOneChild());
123:       assertFalse(node0.isCast());
124:       assertFalse(node0.isContinue());
125:       assertFalse(node0.isInc());
126:       assertFalse(node0.isIn());
127:       
128:       node0.setSourceEncodedPositionForTree(31);
129:       assertEquals(56, Node.CHANGE_TIME);
130:       assertEquals(37, Node.OPT_ARG_NAME);
131:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
132:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
133:       assertEquals(29, Node.JSDOC_INFO_PROP);
134:       assertEquals(32, Node.INCRDECR_PROP);
135:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
136:       assertEquals(2, Node.POST_FLAG);
137:       assertEquals(12, Node.COLUMN_BITS);
138:       assertEquals(47, Node.IS_DISPATCHER);
139:       assertEquals(30, Node.VAR_ARGS_NAME);
140:       assertEquals(43, Node.IS_CONSTANT_NAME);
141:       assertEquals(1, Node.DECR_FLAG);
142:       assertEquals(46, Node.IS_NAMESPACE);
143:       assertEquals(54, Node.SLASH_V);
144:       assertEquals(51, Node.STATIC_SOURCE_FILE);
145:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
146:       assertEquals(50, Node.FREE_CALL);
147:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
148:       assertEquals(8, Node.FLAG_NO_THROWS);
149:       assertEquals(40, Node.ORIGINALNAME_PROP);
150:       assertEquals(48, Node.DIRECTIVES);
151:       assertEquals(39, Node.EMPTY_BLOCK);
152:       assertEquals(4095, Node.COLUMN_MASK);
153:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
154:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
155:       assertEquals(49, Node.DIRECT_EVAL);
156:       assertEquals(57, Node.LAST_PROP);
157:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
158:       assertEquals(55, Node.INFERRED_FUNCTION);
159:       assertEquals(53, Node.INPUT_ID);
160:       assertEquals(15, Node.NO_SIDE_EFFECTS);
161:       assertEquals(52, Node.LENGTH);
162:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
163:       assertEquals(36, Node.QUOTED_PROP);
164:       assertEquals(57, Node.REFLECTED_OBJECT);
165:       assertFalse(node0.isParamList());
166:       assertFalse(node0.isSetterDef());
167:       assertEquals(0, node0.getLineno());
168:       assertFalse(node0.isCall());
169:       assertFalse(node0.isCatch());
170:       assertFalse(node0.isVar());
171:       assertEquals(0, node0.getChildCount());
172:       assertFalse(node0.isRegExp());
173:       assertFalse(node0.isFunction());
174:       assertFalse(node0.isBlock());
175:       assertFalse(node0.isTry());
176:       assertFalse(node0.isArrayLit());
177:       assertFalse(node0.isStringKey());
178:       assertFalse(node0.isGetterDef());
179:       assertFalse(node0.isDebugger());
180:       assertFalse(node0.isAssignAdd());
181:       assertFalse(node0.isDelProp());
182:       assertFalse(node0.isLabelName());
183:       assertFalse(node0.isGetElem());
184:       assertFalse(node0.isWhile());
185:       assertFalse(node0.isDec());
186:       assertFalse(node0.hasChildren());
187:       assertFalse(node0.isTypeOf());
188:       assertFalse(node0.isReturn());
189:       assertFalse(node0.isAssign());
190:       assertFalse(node0.isLabel());
191:       assertFalse(node0.isVoid());
192:       assertFalse(node0.isTrue());
193:       assertFalse(node0.isAdd());
194:       assertFalse(node0.isExprResult());
195:       assertEquals((-1792), node0.getType());
196:       assertFalse(node0.isDefaultCase());
197:       assertFalse(node0.isDo());
198:       assertFalse(node0.isNew());
199:       assertFalse(node0.isName());
200:       assertFalse(node0.isEmpty());
201:       assertFalse(node0.isNull());
202:       assertFalse(node0.isOr());
203:       assertEquals(31, node0.getCharno());
204:       assertFalse(node0.isGetProp());
205:       assertFalse(node0.isThis());
206:       assertFalse(node0.isInstanceOf());
207:       assertFalse(node0.isBreak());
208:       assertFalse(node0.isThrow());
209:       assertFalse(node0.isFalse());
210:       assertFalse(node0.isWith());
211:       assertFalse(node0.isHook());
212:       assertFalse(node0.isComma());
213:       assertFalse(node0.isSwitch());
214:       assertFalse(node0.isScript());
215:       assertFalse(node0.hasOneChild());
216:       assertFalse(node0.isCase());
217:       assertFalse(node0.isObjectLit());
218:       assertFalse(node0.isAnd());
219:       assertFalse(node0.isString());
220:       assertFalse(node0.isNumber());
221:       assertFalse(node0.isNot());
222:       assertFalse(node0.isNE());
223:       assertFalse(node0.isIf());
224:       assertFalse(node0.isFor());
225:       assertFalse(node0.hasMoreThanOneChild());
226:       assertFalse(node0.isCast());
227:       assertFalse(node0.isContinue());
228:       assertFalse(node0.isInc());
229:       assertFalse(node0.isIn());
230:       assertEquals(31, node0.getSourcePosition());
231:       
232:       node0.removeProp((-1792));
233:       assertEquals(56, Node.CHANGE_TIME);
234:       assertEquals(37, Node.OPT_ARG_NAME);
235:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
236:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
237:       assertEquals(29, Node.JSDOC_INFO_PROP);
238:       assertEquals(32, Node.INCRDECR_PROP);
239:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
240:       assertEquals(2, Node.POST_FLAG);
241:       assertEquals(12, Node.COLUMN_BITS);
242:       assertEquals(47, Node.IS_DISPATCHER);
243:       assertEquals(30, Node.VAR_ARGS_NAME);
244:       assertEquals(43, Node.IS_CONSTANT_NAME);
245:       assertEquals(1, Node.DECR_FLAG);
246:       assertEquals(46, Node.IS_NAMESPACE);
247:       assertEquals(54, Node.SLASH_V);
248:       assertEquals(51, Node.STATIC_SOURCE_FILE);
249:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
250:       assertEquals(50, Node.FREE_CALL);
251:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
252:       assertEquals(8, Node.FLAG_NO_THROWS);
253:       assertEquals(40, Node.ORIGINALNAME_PROP);
254:       assertEquals(48, Node.DIRECTIVES);
255:       assertEquals(39, Node.EMPTY_BLOCK);
256:       assertEquals(4095, Node.COLUMN_MASK);
257:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
258:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
259:       assertEquals(49, Node.DIRECT_EVAL);
260:       assertEquals(57, Node.LAST_PROP);
261:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
262:       assertEquals(55, Node.INFERRED_FUNCTION);
263:       assertEquals(53, Node.INPUT_ID);
264:       assertEquals(15, Node.NO_SIDE_EFFECTS);
265:       assertEquals(52, Node.LENGTH);
266:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
267:       assertEquals(36, Node.QUOTED_PROP);
268:       assertEquals(57, Node.REFLECTED_OBJECT);
269:       assertFalse(node0.isParamList());
270:       assertFalse(node0.isSetterDef());
271:       assertEquals(0, node0.getLineno());
272:       assertFalse(node0.isCall());
273:       assertFalse(node0.isCatch());
274:       assertFalse(node0.isVar());
275:       assertEquals(0, node0.getChildCount());
276:       assertFalse(node0.isRegExp());
277:       assertFalse(node0.isFunction());
278:       assertFalse(node0.isBlock());
279:       assertFalse(node0.isTry());
280:       assertFalse(node0.isArrayLit());
281:       assertFalse(node0.isStringKey());
282:       assertFalse(node0.isGetterDef());
283:       assertFalse(node0.isDebugger());
284:       assertFalse(node0.isAssignAdd());
285:       assertFalse(node0.isDelProp());
286:       assertFalse(node0.isLabelName());
287:       assertFalse(node0.isGetElem());
288:       assertFalse(node0.isWhile());
289:       assertFalse(node0.isDec());
290:       assertFalse(node0.hasChildren());
291:       assertFalse(node0.isTypeOf());
292:       assertFalse(node0.isReturn());
293:       assertFalse(node0.isAssign());
294:       assertFalse(node0.isLabel());
295:       assertFalse(node0.isVoid());
296:       assertFalse(node0.isTrue());
297:       assertFalse(node0.isAdd());
298:       assertFalse(node0.isExprResult());
299:       assertEquals((-1792), node0.getType());
300:       assertFalse(node0.isDefaultCase());
301:       assertFalse(node0.isDo());
302:       assertFalse(node0.isNew());
303:       assertFalse(node0.isName());
304:       assertFalse(node0.isEmpty());
305:       assertFalse(node0.isNull());
306:       assertFalse(node0.isOr());
307:       assertEquals(31, node0.getCharno());
308:       assertFalse(node0.isGetProp());
309:       assertFalse(node0.isThis());
310:       assertFalse(node0.isInstanceOf());
311:       assertFalse(node0.isBreak());
312:       assertFalse(node0.isThrow());
313:       assertFalse(node0.isFalse());
314:       assertFalse(node0.isWith());
315:       assertFalse(node0.isHook());
316:       assertFalse(node0.isComma());
317:       assertFalse(node0.isSwitch());
318:       assertFalse(node0.isScript());
319:       assertFalse(node0.hasOneChild());
320:       assertFalse(node0.isCase());
321:       assertFalse(node0.isObjectLit());
322:       assertFalse(node0.isAnd());
323:       assertFalse(node0.isString());
324:       assertFalse(node0.isNumber());
325:       assertFalse(node0.isNot());
326:       assertFalse(node0.isNE());
327:       assertFalse(node0.isIf());
328:       assertFalse(node0.isFor());
329:       assertFalse(node0.hasMoreThanOneChild());
330:       assertFalse(node0.isCast());
331:       assertFalse(node0.isContinue());
332:       assertFalse(node0.isInc());
333:       assertFalse(node0.isIn());
334:       assertEquals(31, node0.getSourcePosition());
335:       
336:       boolean boolean0 = node0.wasEmptyNode();
337:       assertEquals(56, Node.CHANGE_TIME);
338:       assertEquals(37, Node.OPT_ARG_NAME);
339:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
340:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
341:       assertEquals(29, Node.JSDOC_INFO_PROP);
342:       assertEquals(32, Node.INCRDECR_PROP);
343:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
344:       assertEquals(2, Node.POST_FLAG);
345:       assertEquals(12, Node.COLUMN_BITS);
346:       assertEquals(47, Node.IS_DISPATCHER);
347:       assertEquals(30, Node.VAR_ARGS_NAME);
348:       assertEquals(43, Node.IS_CONSTANT_NAME);
349:       assertEquals(1, Node.DECR_FLAG);
350:       assertEquals(46, Node.IS_NAMESPACE);
351:       assertEquals(54, Node.SLASH_V);
352:       assertEquals(51, Node.STATIC_SOURCE_FILE);
353:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
354:       assertEquals(50, Node.FREE_CALL);
355:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
356:       assertEquals(8, Node.FLAG_NO_THROWS);
357:       assertEquals(40, Node.ORIGINALNAME_PROP);
358:       assertEquals(48, Node.DIRECTIVES);
359:       assertEquals(39, Node.EMPTY_BLOCK);
360:       assertEquals(4095, Node.COLUMN_MASK);
361:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
362:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
363:       assertEquals(49, Node.DIRECT_EVAL);
364:       assertEquals(57, Node.LAST_PROP);
365:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
366:       assertEquals(55, Node.INFERRED_FUNCTION);
367:       assertEquals(53, Node.INPUT_ID);
368:       assertEquals(15, Node.NO_SIDE_EFFECTS);
369:       assertEquals(52, Node.LENGTH);
370:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
371:       assertEquals(36, Node.QUOTED_PROP);
372:       assertEquals(57, Node.REFLECTED_OBJECT);
373:       assertFalse(boolean0);
374:       assertFalse(node0.isParamList());
375:       assertFalse(node0.isSetterDef());
376:       assertEquals(0, node0.getLineno());
377:       assertFalse(node0.isCall());
378:       assertFalse(node0.isCatch());
379:       assertFalse(node0.isVar());
380:       assertEquals(0, node0.getChildCount());
381:       assertFalse(node0.isRegExp());
382:       assertFalse(node0.isFunction());
383:       assertFalse(node0.isBlock());
384:       assertFalse(node0.isTry());
385:       assertFalse(node0.isArrayLit());
386:       assertFalse(node0.isStringKey());
387:       assertFalse(node0.isGetterDef());
388:       assertFalse(node0.isDebugger());
389:       assertFalse(node0.isAssignAdd());
390:       assertFalse(node0.isDelProp());
391:       assertFalse(node0.isLabelName());
392:       assertFalse(node0.isGetElem());
393:       assertFalse(node0.isWhile());
394:       assertFalse(node0.isDec());
395:       assertFalse(node0.hasChildren());
396:       assertFalse(node0.isTypeOf());
397:       assertFalse(node0.isReturn());
398:       assertFalse(node0.isAssign());
399:       assertFalse(node0.isLabel());
400:       assertFalse(node0.isVoid());
401:       assertFalse(node0.isTrue());
402:       assertFalse(node0.isAdd());
403:       assertFalse(node0.isExprResult());
404:       assertEquals((-1792), node0.getType());
405:       assertFalse(node0.isDefaultCase());
406:       assertFalse(node0.isDo());
407:       assertFalse(node0.isNew());
408:       assertFalse(node0.isName());
409:       assertFalse(node0.isEmpty());
410:       assertFalse(node0.isNull());
411:       assertFalse(node0.isOr());
412:       assertEquals(31, node0.getCharno());
413:       assertFalse(node0.isGetProp());
414:       assertFalse(node0.isThis());
415:       assertFalse(node0.isInstanceOf());
416:       assertFalse(node0.isBreak());
417:       assertFalse(node0.isThrow());
418:       assertFalse(node0.isFalse());
419:       assertFalse(node0.isWith());
420:       assertFalse(node0.isHook());
421:       assertFalse(node0.isComma());
422:       assertFalse(node0.isSwitch());
423:       assertFalse(node0.isScript());
424:       assertFalse(node0.hasOneChild());
425:       assertFalse(node0.isCase());
426:       assertFalse(node0.isObjectLit());
427:       assertFalse(node0.isAnd());
428:       assertFalse(node0.isString());
429:       assertFalse(node0.isNumber());
430:       assertFalse(node0.isNot());
431:       assertFalse(node0.isNE());
432:       assertFalse(node0.isIf());
433:       assertFalse(node0.isFor());
434:       assertFalse(node0.hasMoreThanOneChild());
435:       assertFalse(node0.isCast());
436:       assertFalse(node0.isContinue());
437:       assertFalse(node0.isInc());
438:       assertFalse(node0.isIn());
439:       assertEquals(31, node0.getSourcePosition());
440:       
441:       Iterable<Node> iterable0 = node0.children();
442:       assertFalse(iterable0.contains(node0));
443:       assertEquals(56, Node.CHANGE_TIME);
444:       assertEquals(37, Node.OPT_ARG_NAME);
445:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
446:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
447:       assertEquals(29, Node.JSDOC_INFO_PROP);
448:       assertEquals(32, Node.INCRDECR_PROP);
449:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
450:       assertEquals(2, Node.POST_FLAG);
451:       assertEquals(12, Node.COLUMN_BITS);
452:       assertEquals(47, Node.IS_DISPATCHER);
453:       assertEquals(30, Node.VAR_ARGS_NAME);
454:       assertEquals(43, Node.IS_CONSTANT_NAME);
455:       assertEquals(1, Node.DECR_FLAG);
456:       assertEquals(46, Node.IS_NAMESPACE);
457:       assertEquals(54, Node.SLASH_V);
458:       assertEquals(51, Node.STATIC_SOURCE_FILE);
459:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
460:       assertEquals(50, Node.FREE_CALL);
461:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
462:       assertEquals(8, Node.FLAG_NO_THROWS);
463:       assertEquals(40, Node.ORIGINALNAME_PROP);
464:       assertEquals(48, Node.DIRECTIVES);
465:       assertEquals(39, Node.EMPTY_BLOCK);
466:       assertEquals(4095, Node.COLUMN_MASK);
467:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
468:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
469:       assertEquals(49, Node.DIRECT_EVAL);
470:       assertEquals(57, Node.LAST_PROP);
471:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
472:       assertEquals(55, Node.INFERRED_FUNCTION);
473:       assertEquals(53, Node.INPUT_ID);
474:       assertEquals(15, Node.NO_SIDE_EFFECTS);
475:       assertEquals(52, Node.LENGTH);
476:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
477:       assertEquals(36, Node.QUOTED_PROP);
478:       assertEquals(57, Node.REFLECTED_OBJECT);
479:       assertNotNull(iterable0);
480:       assertFalse(node0.isParamList());
481:       assertFalse(node0.isSetterDef());
482:       assertEquals(0, node0.getLineno());
483:       assertFalse(node0.isCall());
484:       assertFalse(node0.isCatch());
485:       assertFalse(node0.isVar());
486:       assertEquals(0, node0.getChildCount());
487:       assertFalse(node0.isRegExp());
488:       assertFalse(node0.isFunction());
489:       assertFalse(node0.isBlock());
490:       assertFalse(node0.isTry());
491:       assertFalse(node0.isArrayLit());
492:       assertFalse(node0.isStringKey());
493:       assertFalse(node0.isGetterDef());
494:       assertFalse(node0.isDebugger());
495:       assertFalse(node0.isAssignAdd());
496:       assertFalse(node0.isDelProp());
497:       assertFalse(node0.isLabelName());
498:       assertFalse(node0.isGetElem());
499:       assertFalse(node0.isWhile());
500:       assertFalse(node0.isDec());
501:       assertFalse(node0.hasChildren());
502:       assertFalse(node0.isTypeOf());
503:       assertFalse(node0.isReturn());
504:       assertFalse(node0.isAssign());
505:       assertFalse(node0.isLabel());
506:       assertFalse(node0.isVoid());
507:       assertFalse(node0.isTrue());
508:       assertFalse(node0.isAdd());
509:       assertFalse(node0.isExprResult());
510:       assertEquals((-1792), node0.getType());
511:       assertFalse(node0.isDefaultCase());
512:       assertFalse(node0.isDo());
513:       assertFalse(node0.isNew());
514:       assertFalse(node0.isName());
515:       assertFalse(node0.isEmpty());
516:       assertFalse(node0.isNull());
517:       assertFalse(node0.isOr());
518:       assertEquals(31, node0.getCharno());
519:       assertFalse(node0.isGetProp());
520:       assertFalse(node0.isThis());
521:       assertFalse(node0.isInstanceOf());
522:       assertFalse(node0.isBreak());
523:       assertFalse(node0.isThrow());
524:       assertFalse(node0.isFalse());
525:       assertFalse(node0.isWith());
526:       assertFalse(node0.isHook());
527:       assertFalse(node0.isComma());
528:       assertFalse(node0.isSwitch());
529:       assertFalse(node0.isScript());
530:       assertFalse(node0.hasOneChild());
531:       assertFalse(node0.isCase());
532:       assertFalse(node0.isObjectLit());
533:       assertFalse(node0.isAnd());
534:       assertFalse(node0.isString());
535:       assertFalse(node0.isNumber());
536:       assertFalse(node0.isNot());
537:       assertFalse(node0.isNE());
538:       assertFalse(node0.isIf());
539:       assertFalse(node0.isFor());
540:       assertFalse(node0.hasMoreThanOneChild());
541:       assertFalse(node0.isCast());
542:       assertFalse(node0.isContinue());
543:       assertFalse(node0.isInc());
544:       assertFalse(node0.isIn());
545:       assertEquals(31, node0.getSourcePosition());
546:       
547:       boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
548:       assertFalse(boolean1);
549:       assertTrue(boolean1 == boolean0);
550:       
551:       node0.setType(1860);
552:       assertEquals(56, Node.CHANGE_TIME);
553:       assertEquals(37, Node.OPT_ARG_NAME);
554:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
555:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
556:       assertEquals(29, Node.JSDOC_INFO_PROP);
557:       assertEquals(32, Node.INCRDECR_PROP);
558:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
559:       assertEquals(2, Node.POST_FLAG);
560:       assertEquals(12, Node.COLUMN_BITS);
561:       assertEquals(47, Node.IS_DISPATCHER);
562:       assertEquals(30, Node.VAR_ARGS_NAME);
563:       assertEquals(43, Node.IS_CONSTANT_NAME);
564:       assertEquals(1, Node.DECR_FLAG);
565:       assertEquals(46, Node.IS_NAMESPACE);
566:       assertEquals(54, Node.SLASH_V);
567:       assertEquals(51, Node.STATIC_SOURCE_FILE);
568:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
569:       assertEquals(50, Node.FREE_CALL);
570:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
571:       assertEquals(8, Node.FLAG_NO_THROWS);
572:       assertEquals(40, Node.ORIGINALNAME_PROP);
573:       assertEquals(48, Node.DIRECTIVES);
574:       assertEquals(39, Node.EMPTY_BLOCK);
575:       assertEquals(4095, Node.COLUMN_MASK);
576:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
577:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
578:       assertEquals(49, Node.DIRECT_EVAL);
579:       assertEquals(57, Node.LAST_PROP);
580:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
581:       assertEquals(55, Node.INFERRED_FUNCTION);
582:       assertEquals(53, Node.INPUT_ID);
583:       assertEquals(15, Node.NO_SIDE_EFFECTS);
584:       assertEquals(52, Node.LENGTH);
585:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
586:       assertEquals(36, Node.QUOTED_PROP);
587:       assertEquals(57, Node.REFLECTED_OBJECT);
588:       assertFalse(node0.isParamList());
589:       assertFalse(node0.isSetterDef());
590:       assertEquals(0, node0.getLineno());
591:       assertFalse(node0.isCall());
592:       assertFalse(node0.isCatch());
593:       assertFalse(node0.isVar());
594:       assertEquals(0, node0.getChildCount());
595:       assertFalse(node0.isRegExp());
596:       assertFalse(node0.isFunction());
597:       assertFalse(node0.isBlock());
598:       assertFalse(node0.isTry());
599:       assertFalse(node0.isArrayLit());
600:       assertFalse(node0.isStringKey());
601:       assertFalse(node0.isGetterDef());
602:       assertFalse(node0.isDebugger());
603:       assertFalse(node0.isAssignAdd());
604:       assertFalse(node0.isDelProp());
605:       assertFalse(node0.isLabelName());
606:       assertFalse(node0.isGetElem());
607:       assertFalse(node0.isWhile());
608:       assertFalse(node0.isDec());
609:       assertFalse(node0.hasChildren());
610:       assertFalse(node0.isTypeOf());
611:       assertFalse(node0.isReturn());
612:       assertFalse(node0.isAssign());
613:       assertFalse(node0.isLabel());
614:       assertFalse(node0.isVoid());
615:       assertFalse(node0.isTrue());
616:       assertFalse(node0.isAdd());
617:       assertFalse(node0.isExprResult());
618:       assertFalse(node0.isDefaultCase());
619:       assertFalse(node0.isDo());
620:       assertFalse(node0.isNew());
621:       assertFalse(node0.isName());
622:       assertFalse(node0.isEmpty());
623:       assertFalse(node0.isNull());
624:       assertFalse(node0.isOr());
625:       assertEquals(31, node0.getCharno());
626:       assertFalse(node0.isGetProp());
627:       assertFalse(node0.isThis());
628:       assertFalse(node0.isInstanceOf());
629:       assertFalse(node0.isBreak());
630:       assertFalse(node0.isThrow());
631:       assertFalse(node0.isFalse());
632:       assertFalse(node0.isWith());
633:       assertFalse(node0.isHook());
634:       assertFalse(node0.isComma());
635:       assertFalse(node0.isSwitch());
636:       assertFalse(node0.isScript());
637:       assertFalse(node0.hasOneChild());
638:       assertFalse(node0.isCase());
639:       assertFalse(node0.isObjectLit());
640:       assertFalse(node0.isAnd());
641:       assertFalse(node0.isString());
642:       assertFalse(node0.isNumber());
643:       assertFalse(node0.isNot());
644:       assertFalse(node0.isNE());
645:       assertFalse(node0.isIf());
646:       assertFalse(node0.isFor());
647:       assertFalse(node0.hasMoreThanOneChild());
648:       assertFalse(node0.isCast());
649:       assertFalse(node0.isContinue());
650:       assertEquals(1860, node0.getType());
651:       assertFalse(node0.isInc());
652:       assertFalse(node0.isIn());
653:       assertEquals(31, node0.getSourcePosition());
654:       
655:       boolean boolean2 = node0.isTry();
656:       assertEquals(56, Node.CHANGE_TIME);
657:       assertEquals(37, Node.OPT_ARG_NAME);
658:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
659:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
660:       assertEquals(29, Node.JSDOC_INFO_PROP);
661:       assertEquals(32, Node.INCRDECR_PROP);
662:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
663:       assertEquals(2, Node.POST_FLAG);
664:       assertEquals(12, Node.COLUMN_BITS);
665:       assertEquals(47, Node.IS_DISPATCHER);
666:       assertEquals(30, Node.VAR_ARGS_NAME);
667:       assertEquals(43, Node.IS_CONSTANT_NAME);
668:       assertEquals(1, Node.DECR_FLAG);
669:       assertEquals(46, Node.IS_NAMESPACE);
670:       assertEquals(54, Node.SLASH_V);
671:       assertEquals(51, Node.STATIC_SOURCE_FILE);
672:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
673:       assertEquals(50, Node.FREE_CALL);
674:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
675:       assertEquals(8, Node.FLAG_NO_THROWS);
676:       assertEquals(40, Node.ORIGINALNAME_PROP);
677:       assertEquals(48, Node.DIRECTIVES);
678:       assertEquals(39, Node.EMPTY_BLOCK);
679:       assertEquals(4095, Node.COLUMN_MASK);
680:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
681:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
682:       assertEquals(49, Node.DIRECT_EVAL);
683:       assertEquals(57, Node.LAST_PROP);
684:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
685:       assertEquals(55, Node.INFERRED_FUNCTION);
686:       assertEquals(53, Node.INPUT_ID);
687:       assertEquals(15, Node.NO_SIDE_EFFECTS);
688:       assertEquals(52, Node.LENGTH);
689:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
690:       assertEquals(36, Node.QUOTED_PROP);
691:       assertEquals(57, Node.REFLECTED_OBJECT);
692:       assertFalse(boolean2);
693:       assertFalse(node0.isParamList());
694:       assertFalse(node0.isSetterDef());
695:       assertEquals(0, node0.getLineno());
696:       assertFalse(node0.isCall());
697:       assertFalse(node0.isCatch());
698:       assertFalse(node0.isVar());
699:       assertEquals(0, node0.getChildCount());
700:       assertFalse(node0.isRegExp());
701:       assertFalse(node0.isFunction());
702:       assertFalse(node0.isBlock());
703:       assertFalse(node0.isTry());
704:       assertFalse(node0.isArrayLit());
705:       assertFalse(node0.isStringKey());
706:       assertFalse(node0.isGetterDef());
707:       assertFalse(node0.isDebugger());
708:       assertFalse(node0.isAssignAdd());
709:       assertFalse(node0.isDelProp());
710:       assertFalse(node0.isLabelName());
711:       assertFalse(node0.isGetElem());
712:       assertFalse(node0.isWhile());
713:       assertFalse(node0.isDec());
714:       assertFalse(node0.hasChildren());
715:       assertFalse(node0.isTypeOf());
716:       assertFalse(node0.isReturn());
717:       assertFalse(node0.isAssign());
718:       assertFalse(node0.isLabel());
719:       assertFalse(node0.isVoid());
720:       assertFalse(node0.isTrue());
721:       assertFalse(node0.isAdd());
722:       assertFalse(node0.isExprResult());
723:       assertFalse(node0.isDefaultCase());
724:       assertFalse(node0.isDo());
725:       assertFalse(node0.isNew());
726:       assertFalse(node0.isName());
727:       assertFalse(node0.isEmpty());
728:       assertFalse(node0.isNull());
729:       assertFalse(node0.isOr());
730:       assertEquals(31, node0.getCharno());
731:       assertFalse(node0.isGetProp());
732:       assertFalse(node0.isThis());
733:       assertFalse(node0.isInstanceOf());
734:       assertFalse(node0.isBreak());
735:       assertFalse(node0.isThrow());
736:       assertFalse(node0.isFalse());
737:       assertFalse(node0.isWith());
738:       assertFalse(node0.isHook());
739:       assertFalse(node0.isComma());
740:       assertFalse(node0.isSwitch());
741:       assertFalse(node0.isScript());
742:       assertFalse(node0.hasOneChild());
743:       assertFalse(node0.isCase());
744:       assertFalse(node0.isObjectLit());
745:       assertFalse(node0.isAnd());
746:       assertFalse(node0.isString());
747:       assertFalse(node0.isNumber());
748:       assertFalse(node0.isNot());
749:       assertFalse(node0.isNE());
750:       assertFalse(node0.isIf());
751:       assertFalse(node0.isFor());
752:       assertFalse(node0.hasMoreThanOneChild());
753:       assertFalse(node0.isCast());
754:       assertFalse(node0.isContinue());
755:       assertEquals(1860, node0.getType());
756:       assertFalse(node0.isInc());
757:       assertFalse(node0.isIn());
758:       assertEquals(31, node0.getSourcePosition());
759:       assertTrue(boolean2 == boolean1);
760:       assertTrue(boolean2 == boolean0);
761:       
762:       Node node1 = Node.newString("kjy`Y/_^+M`DK");
763:       assertEquals(2, Node.POST_FLAG);
764:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
765:       assertEquals(37, Node.OPT_ARG_NAME);
766:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
767:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
768:       assertEquals(29, Node.JSDOC_INFO_PROP);
769:       assertEquals(51, Node.STATIC_SOURCE_FILE);
770:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
771:       assertEquals(43, Node.IS_CONSTANT_NAME);
772:       assertEquals(56, Node.CHANGE_TIME);
773:       assertEquals(46, Node.IS_NAMESPACE);
774:       assertEquals(57, Node.LAST_PROP);
775:       assertEquals(36, Node.QUOTED_PROP);
776:       assertEquals(30, Node.VAR_ARGS_NAME);
777:       assertEquals(55, Node.INFERRED_FUNCTION);
778:       assertEquals(15, Node.NO_SIDE_EFFECTS);
779:       assertEquals(53, Node.INPUT_ID);
780:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
781:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
782:       assertEquals(47, Node.IS_DISPATCHER);
783:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
784:       assertEquals(50, Node.FREE_CALL);
785:       assertEquals(40, Node.ORIGINALNAME_PROP);
786:       assertEquals(8, Node.FLAG_NO_THROWS);
787:       assertEquals(39, Node.EMPTY_BLOCK);
788:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
789:       assertEquals(52, Node.LENGTH);
790:       assertEquals(48, Node.DIRECTIVES);
791:       assertEquals(57, Node.REFLECTED_OBJECT);
792:       assertEquals(54, Node.SLASH_V);
793:       assertEquals(1, Node.DECR_FLAG);
794:       assertEquals(49, Node.DIRECT_EVAL);
795:       assertEquals(4095, Node.COLUMN_MASK);
796:       assertEquals(32, Node.INCRDECR_PROP);
797:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
798:       assertEquals(12, Node.COLUMN_BITS);
799:       assertNotNull(node1);
800:       assertFalse(node1.isParamList());
801:       assertFalse(node1.isSetterDef());
802:       assertFalse(node1.isStringKey());
803:       assertFalse(node1.isName());
804:       assertFalse(node1.isNull());
805:       assertFalse(node1.isNew());
806:       assertFalse(node1.isFunction());
807:       assertFalse(node1.isDefaultCase());
808:       assertFalse(node1.isArrayLit());
809:       assertFalse(node1.isAdd());
810:       assertFalse(node1.isContinue());
811:       assertFalse(node1.isDo());
812:       assertEquals(0, node1.getChildCount());
813:       assertEquals(40, node1.getType());
814:       assertFalse(node1.isVar());
815:       assertFalse(node1.isLabel());
816:       assertFalse(node1.isNumber());
817:       assertFalse(node1.isIn());
818:       assertEquals((-1), node1.getLineno());
819:       assertFalse(node1.isLabelName());
820:       assertFalse(node1.isIf());
821:       assertFalse(node1.isGetterDef());
822:       assertFalse(node1.isNE());
823:       assertEquals((-1), node1.getCharno());
824:       assertFalse(node1.isRegExp());
825:       assertFalse(node1.isTry());
826:       assertTrue(node1.isString());
827:       assertFalse(node1.hasOneChild());
828:       assertFalse(node1.isCase());
829:       assertFalse(node1.isScript());
830:       assertFalse(node1.isCatch());
831:       assertFalse(node1.hasMoreThanOneChild());
832:       assertFalse(node1.isWith());
833:       assertFalse(node1.isFor());
834:       assertFalse(node1.isBlock());
835:       assertFalse(node1.isHook());
836:       assertFalse(node1.isThis());
837:       assertFalse(node1.isComma());
838:       assertFalse(node1.isBreak());
839:       assertFalse(node1.isInstanceOf());
840:       assertFalse(node1.isGetProp());
841:       assertFalse(node1.isAnd());
842:       assertFalse(node1.isObjectLit());
843:       assertFalse(node1.isNot());
844:       assertFalse(node1.isSwitch());
845:       assertFalse(node1.isInc());
846:       assertFalse(node1.isCast());
847:       assertFalse(node1.isThrow());
848:       assertFalse(node1.isFalse());
849:       assertFalse(node1.isAssignAdd());
850:       assertFalse(node1.isOr());
851:       assertFalse(node1.isTypeOf());
852:       assertFalse(node1.isDelProp());
853:       assertFalse(node1.isEmpty());
854:       assertFalse(node1.isGetElem());
855:       assertEquals((-1), node1.getSourcePosition());
856:       assertFalse(node1.isTrue());
857:       assertFalse(node1.isVoid());
858:       assertFalse(node1.isDebugger());
859:       assertFalse(node1.isExprResult());
860:       assertFalse(node1.isCall());
861:       assertFalse(node1.isAssign());
862:       assertFalse(node1.hasChildren());
863:       assertFalse(node1.isWhile());
864:       assertFalse(node1.isDec());
865:       assertFalse(node1.isReturn());
866:       assertFalse(node1.equals((Object)node0));
867:       
868:       InputId inputId0 = node0.getInputId();
869:       assertEquals(56, Node.CHANGE_TIME);
870:       assertEquals(37, Node.OPT_ARG_NAME);
871:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
872:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
873:       assertEquals(29, Node.JSDOC_INFO_PROP);
874:       assertEquals(32, Node.INCRDECR_PROP);
875:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
876:       assertEquals(2, Node.POST_FLAG);
877:       assertEquals(12, Node.COLUMN_BITS);
878:       assertEquals(47, Node.IS_DISPATCHER);
879:       assertEquals(30, Node.VAR_ARGS_NAME);
880:       assertEquals(43, Node.IS_CONSTANT_NAME);
881:       assertEquals(1, Node.DECR_FLAG);
882:       assertEquals(46, Node.IS_NAMESPACE);
883:       assertEquals(54, Node.SLASH_V);
884:       assertEquals(51, Node.STATIC_SOURCE_FILE);
885:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
886:       assertEquals(50, Node.FREE_CALL);
887:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
888:       assertEquals(8, Node.FLAG_NO_THROWS);
889:       assertEquals(40, Node.ORIGINALNAME_PROP);
890:       assertEquals(48, Node.DIRECTIVES);
891:       assertEquals(39, Node.EMPTY_BLOCK);
892:       assertEquals(4095, Node.COLUMN_MASK);
893:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
894:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
895:       assertEquals(49, Node.DIRECT_EVAL);
896:       assertEquals(57, Node.LAST_PROP);
897:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
898:       assertEquals(55, Node.INFERRED_FUNCTION);
899:       assertEquals(53, Node.INPUT_ID);
900:       assertEquals(15, Node.NO_SIDE_EFFECTS);
901:       assertEquals(52, Node.LENGTH);
902:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
903:       assertEquals(36, Node.QUOTED_PROP);
904:       assertEquals(57, Node.REFLECTED_OBJECT);
905:       assertNull(inputId0);
906:       assertFalse(node0.isParamList());
907:       assertFalse(node0.isSetterDef());
908:       assertEquals(0, node0.getLineno());
909:       assertFalse(node0.isCall());
910:       assertFalse(node0.isCatch());
911:       assertFalse(node0.isVar());
912:       assertEquals(0, node0.getChildCount());
913:       assertFalse(node0.isRegExp());
914:       assertFalse(node0.isFunction());
915:       assertFalse(node0.isBlock());
916:       assertFalse(node0.isTry());
917:       assertFalse(node0.isArrayLit());
918:       assertFalse(node0.isStringKey());
919:       assertFalse(node0.isGetterDef());
920:       assertFalse(node0.isDebugger());
921:       assertFalse(node0.isAssignAdd());
922:       assertFalse(node0.isDelProp());
923:       assertFalse(node0.isLabelName());
924:       assertFalse(node0.isGetElem());
925:       assertFalse(node0.isWhile());
926:       assertFalse(node0.isDec());
927:       assertFalse(node0.hasChildren());
928:       assertFalse(node0.isTypeOf());
929:       assertFalse(node0.isReturn());
930:       assertFalse(node0.isAssign());
931:       assertFalse(node0.isLabel());
932:       assertFalse(node0.isVoid());
933:       assertFalse(node0.isTrue());
934:       assertFalse(node0.isAdd());
935:       assertFalse(node0.isExprResult());
936:       assertFalse(node0.isDefaultCase());
937:       assertFalse(node0.isDo());
938:       assertFalse(node0.isNew());
939:       assertFalse(node0.isName());
940:       assertFalse(node0.isEmpty());
941:       assertFalse(node0.isNull());
942:       assertFalse(node0.isOr());
943:       assertEquals(31, node0.getCharno());
944:       assertFalse(node0.isGetProp());
945:       assertFalse(node0.isThis());
946:       assertFalse(node0.isInstanceOf());
947:       assertFalse(node0.isBreak());
948:       assertFalse(node0.isThrow());
949:       assertFalse(node0.isFalse());
950:       assertFalse(node0.isWith());
951:       assertFalse(node0.isHook());
952:       assertFalse(node0.isComma());
953:       assertFalse(node0.isSwitch());
954:       assertFalse(node0.isScript());
955:       assertFalse(node0.hasOneChild());
956:       assertFalse(node0.isCase());
957:       assertFalse(node0.isObjectLit());
958:       assertFalse(node0.isAnd());
959:       assertFalse(node0.isString());
960:       assertFalse(node0.isNumber());
961:       assertFalse(node0.isNot());
962:       assertFalse(node0.isNE());
963:       assertFalse(node0.isIf());
964:       assertFalse(node0.isFor());
965:       assertFalse(node0.hasMoreThanOneChild());
966:       assertFalse(node0.isCast());
967:       assertFalse(node0.isContinue());
968:       assertEquals(1860, node0.getType());
969:       assertFalse(node0.isInc());
970:       assertFalse(node0.isIn());
971:       assertEquals(31, node0.getSourcePosition());
972:       assertFalse(node0.equals((Object)node1));
973:       
974:       Node node2 = Node.newString("16XeyoAj");
975:       assertEquals(55, Node.INFERRED_FUNCTION);
976:       assertEquals(4095, Node.COLUMN_MASK);
977:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
978:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
979:       assertEquals(8, Node.FLAG_NO_THROWS);
980:       assertEquals(39, Node.EMPTY_BLOCK);
981:       assertEquals(53, Node.INPUT_ID);
982:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
983:       assertEquals(57, Node.REFLECTED_OBJECT);
984:       assertEquals(29, Node.JSDOC_INFO_PROP);
985:       assertEquals(52, Node.LENGTH);
986:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
987:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
988:       assertEquals(37, Node.OPT_ARG_NAME);
989:       assertEquals(36, Node.QUOTED_PROP);
990:       assertEquals(56, Node.CHANGE_TIME);
991:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
992:       assertEquals(48, Node.DIRECTIVES);
993:       assertEquals(49, Node.DIRECT_EVAL);
994:       assertEquals(12, Node.COLUMN_BITS);
995:       assertEquals(46, Node.IS_NAMESPACE);
996:       assertEquals(30, Node.VAR_ARGS_NAME);
997:       assertEquals(51, Node.STATIC_SOURCE_FILE);
998:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
999:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1000:       assertEquals(47, Node.IS_DISPATCHER);
1001:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1002:       assertEquals(57, Node.LAST_PROP);
1003:       assertEquals(1, Node.DECR_FLAG);
1004:       assertEquals(32, Node.INCRDECR_PROP);
1005:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1006:       assertEquals(40, Node.ORIGINALNAME_PROP);
1007:       assertEquals(2, Node.POST_FLAG);
1008:       assertEquals(50, Node.FREE_CALL);
1009:       assertEquals(43, Node.IS_CONSTANT_NAME);
1010:       assertEquals(54, Node.SLASH_V);
1011:       assertNotNull(node2);
1012:       assertNotSame(node2, node1);
1013:       assertFalse(node2.isWhile());
1014:       assertFalse(node2.isDo());
1015:       assertFalse(node2.isContinue());
1016:       assertFalse(node2.hasMoreThanOneChild());
1017:       assertFalse(node2.isAdd());
1018:       assertFalse(node2.isNew());
1019:       assertFalse(node2.isBlock());
1020:       assertFalse(node2.isVar());
1021:       assertFalse(node2.isLabel());
1022:       assertFalse(node2.isReturn());
1023:       assertTrue(node2.isString());
1024:       assertFalse(node2.isAssignAdd());
1025:       assertFalse(node2.isAssign());
1026:       assertFalse(node2.isDec());
1027:       assertFalse(node2.isNull());
1028:       assertFalse(node2.isSetterDef());
1029:       assertFalse(node2.isGetElem());
1030:       assertFalse(node2.hasChildren());
1031:       assertFalse(node2.isCall());
1032:       assertFalse(node2.isTypeOf());
1033:       assertEquals((-1), node2.getLineno());
1034:       assertFalse(node2.isOr());
1035:       assertFalse(node2.isName());
1036:       assertFalse(node2.isNot());
1037:       assertEquals(40, node2.getType());
1038:       assertFalse(node2.isFunction());
1039:       assertFalse(node2.isDebugger());
1040:       assertFalse(node2.isExprResult());
1041:       assertFalse(node2.isObjectLit());
1042:       assertFalse(node2.isGetProp());
1043:       assertEquals((-1), node2.getSourcePosition());
1044:       assertFalse(node2.isCast());
1045:       assertFalse(node2.isFalse());
1046:       assertFalse(node2.isAnd());
1047:       assertFalse(node2.isCase());
1048:       assertFalse(node2.isInc());
1049:       assertEquals((-1), node2.getCharno());
1050:       assertFalse(node2.isIn());
1051:       assertFalse(node2.isHook());
1052:       assertFalse(node2.isThrow());
1053:       assertFalse(node2.isDelProp());
1054:       assertFalse(node2.isBreak());
1055:       assertFalse(node2.isEmpty());
1056:       assertFalse(node2.isFor());
1057:       assertFalse(node2.isThis());
1058:       assertFalse(node2.isComma());
1059:       assertFalse(node2.isInstanceOf());
1060:       assertFalse(node2.isTrue());
1061:       assertFalse(node2.isVoid());
1062:       assertFalse(node2.isNE());
1063:       assertFalse(node2.isIf());
1064:       assertFalse(node2.isScript());
1065:       assertFalse(node2.isCatch());
1066:       assertFalse(node2.isRegExp());
1067:       assertFalse(node2.isWith());
1068:       assertFalse(node2.hasOneChild());
1069:       assertEquals(0, node2.getChildCount());
1070:       assertFalse(node2.isTry());
1071:       assertFalse(node2.isDefaultCase());
1072:       assertFalse(node2.isGetterDef());
1073:       assertFalse(node2.isLabelName());
1074:       assertFalse(node2.isNumber());
1075:       assertFalse(node2.isArrayLit());
1076:       assertFalse(node2.isParamList());
1077:       assertFalse(node2.isStringKey());
1078:       assertFalse(node2.isSwitch());
1079:       assertFalse(node2.equals((Object)node0));
1080:       assertFalse(node2.equals((Object)node1));
1081:       
1082:       node2.detachChildren();
1083:       assertEquals(55, Node.INFERRED_FUNCTION);
1084:       assertEquals(4095, Node.COLUMN_MASK);
1085:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1086:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1087:       assertEquals(8, Node.FLAG_NO_THROWS);
1088:       assertEquals(39, Node.EMPTY_BLOCK);
1089:       assertEquals(53, Node.INPUT_ID);
1090:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1091:       assertEquals(57, Node.REFLECTED_OBJECT);
1092:       assertEquals(29, Node.JSDOC_INFO_PROP);
1093:       assertEquals(52, Node.LENGTH);
1094:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1095:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1096:       assertEquals(37, Node.OPT_ARG_NAME);
1097:       assertEquals(36, Node.QUOTED_PROP);
1098:       assertEquals(56, Node.CHANGE_TIME);
1099:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1100:       assertEquals(48, Node.DIRECTIVES);
1101:       assertEquals(49, Node.DIRECT_EVAL);
1102:       assertEquals(12, Node.COLUMN_BITS);
1103:       assertEquals(46, Node.IS_NAMESPACE);
1104:       assertEquals(30, Node.VAR_ARGS_NAME);
1105:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1106:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1107:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1108:       assertEquals(47, Node.IS_DISPATCHER);
1109:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1110:       assertEquals(57, Node.LAST_PROP);
1111:       assertEquals(1, Node.DECR_FLAG);
1112:       assertEquals(32, Node.INCRDECR_PROP);
1113:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1114:       assertEquals(40, Node.ORIGINALNAME_PROP);
1115:       assertEquals(2, Node.POST_FLAG);
1116:       assertEquals(50, Node.FREE_CALL);
1117:       assertEquals(43, Node.IS_CONSTANT_NAME);
1118:       assertEquals(54, Node.SLASH_V);
1119:       assertNotSame(node2, node1);
1120:       assertFalse(node2.isWhile());
1121:       assertFalse(node2.isDo());
1122:       assertFalse(node2.isContinue());
1123:       assertFalse(node2.hasMoreThanOneChild());
1124:       assertFalse(node2.isAdd());
1125:       assertFalse(node2.isNew());
1126:       assertFalse(node2.isBlock());
1127:       assertFalse(node2.isVar());
1128:       assertFalse(node2.isLabel());
1129:       assertFalse(node2.isReturn());
1130:       assertTrue(node2.isString());
1131:       assertFalse(node2.isAssignAdd());
1132:       assertFalse(node2.isAssign());
1133:       assertFalse(node2.isDec());
1134:       assertFalse(node2.isNull());
1135:       assertFalse(node2.isSetterDef());
1136:       assertFalse(node2.isGetElem());
1137:       assertFalse(node2.hasChildren());
1138:       assertFalse(node2.isCall());
1139:       assertFalse(node2.isTypeOf());
1140:       assertEquals((-1), node2.getLineno());
1141:       assertFalse(node2.isOr());
1142:       assertFalse(node2.isName());
1143:       assertFalse(node2.isNot());
1144:       assertEquals(40, node2.getType());
1145:       assertFalse(node2.isFunction());
1146:       assertFalse(node2.isDebugger());
1147:       assertFalse(node2.isExprResult());
1148:       assertFalse(node2.isObjectLit());
1149:       assertFalse(node2.isGetProp());
1150:       assertEquals((-1), node2.getSourcePosition());
1151:       assertFalse(node2.isCast());
1152:       assertFalse(node2.isFalse());
1153:       assertFalse(node2.isAnd());
1154:       assertFalse(node2.isCase());
1155:       assertFalse(node2.isInc());
1156:       assertEquals((-1), node2.getCharno());
1157:       assertFalse(node2.isIn());
1158:       assertFalse(node2.isHook());
1159:       assertFalse(node2.isThrow());
1160:       assertFalse(node2.isDelProp());
1161:       assertFalse(node2.isBreak());
1162:       assertFalse(node2.isEmpty());
1163:       assertFalse(node2.isFor());
1164:       assertFalse(node2.isThis());
1165:       assertFalse(node2.isComma());
1166:       assertFalse(node2.isInstanceOf());
1167:       assertFalse(node2.isTrue());
1168:       assertFalse(node2.isVoid());
1169:       assertFalse(node2.isNE());
1170:       assertFalse(node2.isIf());
1171:       assertFalse(node2.isScript());
1172:       assertFalse(node2.isCatch());
1173:       assertFalse(node2.isRegExp());
1174:       assertFalse(node2.isWith());
1175:       assertFalse(node2.hasOneChild());
1176:       assertEquals(0, node2.getChildCount());
1177:       assertFalse(node2.isTry());
1178:       assertFalse(node2.isDefaultCase());
1179:       assertFalse(node2.isGetterDef());
1180:       assertFalse(node2.isLabelName());
1181:       assertFalse(node2.isNumber());
1182:       assertFalse(node2.isArrayLit());
1183:       assertFalse(node2.isParamList());
1184:       assertFalse(node2.isStringKey());
1185:       assertFalse(node2.isSwitch());
1186:       assertFalse(node2.equals((Object)node0));
1187:       assertFalse(node2.equals((Object)node1));
1188:       
1189:       node2.detachChildren();
1190:       assertEquals(55, Node.INFERRED_FUNCTION);
1191:       assertEquals(4095, Node.COLUMN_MASK);
1192:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1193:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1194:       assertEquals(8, Node.FLAG_NO_THROWS);
1195:       assertEquals(39, Node.EMPTY_BLOCK);
1196:       assertEquals(53, Node.INPUT_ID);
1197:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1198:       assertEquals(57, Node.REFLECTED_OBJECT);
1199:       assertEquals(29, Node.JSDOC_INFO_PROP);
1200:       assertEquals(52, Node.LENGTH);
1201:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1202:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1203:       assertEquals(37, Node.OPT_ARG_NAME);
1204:       assertEquals(36, Node.QUOTED_PROP);
1205:       assertEquals(56, Node.CHANGE_TIME);
1206:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1207:       assertEquals(48, Node.DIRECTIVES);
1208:       assertEquals(49, Node.DIRECT_EVAL);
1209:       assertEquals(12, Node.COLUMN_BITS);
1210:       assertEquals(46, Node.IS_NAMESPACE);
1211:       assertEquals(30, Node.VAR_ARGS_NAME);
1212:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1213:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1214:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1215:       assertEquals(47, Node.IS_DISPATCHER);
1216:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1217:       assertEquals(57, Node.LAST_PROP);
1218:       assertEquals(1, Node.DECR_FLAG);
1219:       assertEquals(32, Node.INCRDECR_PROP);
1220:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1221:       assertEquals(40, Node.ORIGINALNAME_PROP);
1222:       assertEquals(2, Node.POST_FLAG);
1223:       assertEquals(50, Node.FREE_CALL);
1224:       assertEquals(43, Node.IS_CONSTANT_NAME);
1225:       assertEquals(54, Node.SLASH_V);
1226:       assertNotSame(node2, node1);
1227:       assertFalse(node2.isWhile());
1228:       assertFalse(node2.isDo());
1229:       assertFalse(node2.isContinue());
1230:       assertFalse(node2.hasMoreThanOneChild());
1231:       assertFalse(node2.isAdd());
1232:       assertFalse(node2.isNew());
1233:       assertFalse(node2.isBlock());
1234:       assertFalse(node2.isVar());
1235:       assertFalse(node2.isLabel());
1236:       assertFalse(node2.isReturn());
1237:       assertTrue(node2.isString());
1238:       assertFalse(node2.isAssignAdd());
1239:       assertFalse(node2.isAssign());
1240:       assertFalse(node2.isDec());
1241:       assertFalse(node2.isNull());
1242:       assertFalse(node2.isSetterDef());
1243:       assertFalse(node2.isGetElem());
1244:       assertFalse(node2.hasChildren());
1245:       assertFalse(node2.isCall());
1246:       assertFalse(node2.isTypeOf());
1247:       assertEquals((-1), node2.getLineno());
1248:       assertFalse(node2.isOr());
1249:       assertFalse(node2.isName());
1250:       assertFalse(node2.isNot());
1251:       assertEquals(40, node2.getType());
1252:       assertFalse(node2.isFunction());
1253:       assertFalse(node2.isDebugger());
1254:       assertFalse(node2.isExprResult());
1255:       assertFalse(node2.isObjectLit());
1256:       assertFalse(node2.isGetProp());
1257:       assertEquals((-1), node2.getSourcePosition());
1258:       assertFalse(node2.isCast());
1259:       assertFalse(node2.isFalse());
1260:       assertFalse(node2.isAnd());
1261:       assertFalse(node2.isCase());
1262:       assertFalse(node2.isInc());
1263:       assertEquals((-1), node2.getCharno());
1264:       assertFalse(node2.isIn());
1265:       assertFalse(node2.isHook());
1266:       assertFalse(node2.isThrow());
1267:       assertFalse(node2.isDelProp());
1268:       assertFalse(node2.isBreak());
1269:       assertFalse(node2.isEmpty());
1270:       assertFalse(node2.isFor());
1271:       assertFalse(node2.isThis());
1272:       assertFalse(node2.isComma());
1273:       assertFalse(node2.isInstanceOf());
1274:       assertFalse(node2.isTrue());
1275:       assertFalse(node2.isVoid());
1276:       assertFalse(node2.isNE());
1277:       assertFalse(node2.isIf());
1278:       assertFalse(node2.isScript());
1279:       assertFalse(node2.isCatch());
1280:       assertFalse(node2.isRegExp());
1281:       assertFalse(node2.isWith());
1282:       assertFalse(node2.hasOneChild());
1283:       assertEquals(0, node2.getChildCount());
1284:       assertFalse(node2.isTry());
1285:       assertFalse(node2.isDefaultCase());
1286:       assertFalse(node2.isGetterDef());
1287:       assertFalse(node2.isLabelName());
1288:       assertFalse(node2.isNumber());
1289:       assertFalse(node2.isArrayLit());
1290:       assertFalse(node2.isParamList());
1291:       assertFalse(node2.isStringKey());
1292:       assertFalse(node2.isSwitch());
1293:       assertFalse(node2.equals((Object)node0));
1294:       assertFalse(node2.equals((Object)node1));
1295:       
1296:       boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
1297:       assertFalse(boolean3);
1298:       assertTrue(boolean3 == boolean2);
1299:       assertTrue(boolean3 == boolean1);
1300:       assertTrue(boolean3 == boolean0);
1301:       
1302:       boolean boolean4 = node1.isEquivalentTo(node0, false, false, false);
1303:       assertEquals(56, Node.CHANGE_TIME);
1304:       assertEquals(37, Node.OPT_ARG_NAME);
1305:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1306:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1307:       assertEquals(29, Node.JSDOC_INFO_PROP);
1308:       assertEquals(32, Node.INCRDECR_PROP);
1309:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1310:       assertEquals(2, Node.POST_FLAG);
1311:       assertEquals(12, Node.COLUMN_BITS);
1312:       assertEquals(47, Node.IS_DISPATCHER);
1313:       assertEquals(30, Node.VAR_ARGS_NAME);
1314:       assertEquals(43, Node.IS_CONSTANT_NAME);
1315:       assertEquals(1, Node.DECR_FLAG);
1316:       assertEquals(46, Node.IS_NAMESPACE);
1317:       assertEquals(54, Node.SLASH_V);
1318:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1319:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1320:       assertEquals(50, Node.FREE_CALL);
1321:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1322:       assertEquals(8, Node.FLAG_NO_THROWS);
1323:       assertEquals(40, Node.ORIGINALNAME_PROP);
1324:       assertEquals(48, Node.DIRECTIVES);
1325:       assertEquals(39, Node.EMPTY_BLOCK);
1326:       assertEquals(4095, Node.COLUMN_MASK);
1327:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1328:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1329:       assertEquals(49, Node.DIRECT_EVAL);
1330:       assertEquals(57, Node.LAST_PROP);
1331:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1332:       assertEquals(55, Node.INFERRED_FUNCTION);
1333:       assertEquals(53, Node.INPUT_ID);
1334:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1335:       assertEquals(52, Node.LENGTH);
1336:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1337:       assertEquals(36, Node.QUOTED_PROP);
1338:       assertEquals(57, Node.REFLECTED_OBJECT);
1339:       assertEquals(2, Node.POST_FLAG);
1340:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1341:       assertEquals(37, Node.OPT_ARG_NAME);
1342:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1343:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1344:       assertEquals(29, Node.JSDOC_INFO_PROP);
1345:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1346:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1347:       assertEquals(43, Node.IS_CONSTANT_NAME);
1348:       assertEquals(56, Node.CHANGE_TIME);
1349:       assertEquals(46, Node.IS_NAMESPACE);
1350:       assertEquals(57, Node.LAST_PROP);
1351:       assertEquals(36, Node.QUOTED_PROP);
1352:       assertEquals(30, Node.VAR_ARGS_NAME);
1353:       assertEquals(55, Node.INFERRED_FUNCTION);
1354:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1355:       assertEquals(53, Node.INPUT_ID);
1356:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1357:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1358:       assertEquals(47, Node.IS_DISPATCHER);
1359:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1360:       assertEquals(50, Node.FREE_CALL);
1361:       assertEquals(40, Node.ORIGINALNAME_PROP);
1362:       assertEquals(8, Node.FLAG_NO_THROWS);
1363:       assertEquals(39, Node.EMPTY_BLOCK);
1364:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1365:       assertEquals(52, Node.LENGTH);
1366:       assertEquals(48, Node.DIRECTIVES);
1367:       assertEquals(57, Node.REFLECTED_OBJECT);
1368:       assertEquals(54, Node.SLASH_V);
1369:       assertEquals(1, Node.DECR_FLAG);
1370:       assertEquals(49, Node.DIRECT_EVAL);
1371:       assertEquals(4095, Node.COLUMN_MASK);
1372:       assertEquals(32, Node.INCRDECR_PROP);
1373:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1374:       assertEquals(12, Node.COLUMN_BITS);
1375:       assertFalse(boolean4);
1376:       assertNotSame(node1, node2);
1377:       assertFalse(node0.isParamList());
1378:       assertFalse(node0.isSetterDef());
1379:       assertEquals(0, node0.getLineno());
1380:       assertFalse(node0.isCall());
1381:       assertFalse(node0.isCatch());
1382:       assertFalse(node0.isVar());
1383:       assertEquals(0, node0.getChildCount());
1384:       assertFalse(node0.isRegExp());
1385:       assertFalse(node0.isFunction());
1386:       assertFalse(node0.isBlock());
1387:       assertFalse(node0.isTry());
1388:       assertFalse(node0.isArrayLit());
1389:       assertFalse(node0.isStringKey());
1390:       assertFalse(node0.isGetterDef());
1391:       assertFalse(node0.isDebugger());
1392:       assertFalse(node0.isAssignAdd());
1393:       assertFalse(node0.isDelProp());
1394:       assertFalse(node0.isLabelName());
1395:       assertFalse(node0.isGetElem());
1396:       assertFalse(node0.isWhile());
1397:       assertFalse(node0.isDec());
1398:       assertFalse(node0.hasChildren());
1399:       assertFalse(node0.isTypeOf());
1400:       assertFalse(node0.isReturn());
1401:       assertFalse(node0.isAssign());
1402:       assertFalse(node0.isLabel());
1403:       assertFalse(node0.isVoid());
1404:       assertFalse(node0.isTrue());
1405:       assertFalse(node0.isAdd());
1406:       assertFalse(node0.isExprResult());
1407:       assertFalse(node0.isDefaultCase());
1408:       assertFalse(node0.isDo());
1409:       assertFalse(node0.isNew());
1410:       assertFalse(node0.isName());
1411:       assertFalse(node0.isEmpty());
1412:       assertFalse(node0.isNull());
1413:       assertFalse(node0.isOr());
1414:       assertEquals(31, node0.getCharno());
1415:       assertFalse(node0.isGetProp());
1416:       assertFalse(node0.isThis());
1417:       assertFalse(node0.isInstanceOf());
1418:       assertFalse(node0.isBreak());
1419:       assertFalse(node0.isThrow());
1420:       assertFalse(node0.isFalse());
1421:       assertFalse(node0.isWith());
1422:       assertFalse(node0.isHook());
1423:       assertFalse(node0.isComma());
1424:       assertFalse(node0.isSwitch());
1425:       assertFalse(node0.isScript());
1426:       assertFalse(node0.hasOneChild());
1427:       assertFalse(node0.isCase());
1428:       assertFalse(node0.isObjectLit());
1429:       assertFalse(node0.isAnd());
1430:       assertFalse(node0.isString());
1431:       assertFalse(node0.isNumber());
1432:       assertFalse(node0.isNot());
1433:       assertFalse(node0.isNE());
1434:       assertFalse(node0.isIf());
1435:       assertFalse(node0.isFor());
1436:       assertFalse(node0.hasMoreThanOneChild());
1437:       assertFalse(node0.isCast());
1438:       assertFalse(node0.isContinue());
1439:       assertEquals(1860, node0.getType());
1440:       assertFalse(node0.isInc());
1441:       assertFalse(node0.isIn());
1442:       assertEquals(31, node0.getSourcePosition());
1443:       assertFalse(node1.isParamList());
1444:       assertFalse(node1.isSetterDef());
1445:       assertFalse(node1.isStringKey());
1446:       assertFalse(node1.isName());
1447:       assertFalse(node1.isNull());
1448:       assertFalse(node1.isNew());
1449:       assertFalse(node1.isFunction());
1450:       assertFalse(node1.isDefaultCase());
1451:       assertFalse(node1.isArrayLit());
1452:       assertFalse(node1.isAdd());
1453:       assertFalse(node1.isContinue());
1454:       assertFalse(node1.isDo());
1455:       assertEquals(0, node1.getChildCount());
1456:       assertEquals(40, node1.getType());
1457:       assertFalse(node1.isVar());
1458:       assertFalse(node1.isLabel());
1459:       assertFalse(node1.isNumber());
1460:       assertFalse(node1.isIn());
1461:       assertEquals((-1), node1.getLineno());
1462:       assertFalse(node1.isLabelName());
1463:       assertFalse(node1.isIf());
1464:       assertFalse(node1.isGetterDef());
1465:       assertFalse(node1.isNE());
1466:       assertEquals((-1), node1.getCharno());
1467:       assertFalse(node1.isRegExp());
1468:       assertFalse(node1.isTry());
1469:       assertTrue(node1.isString());
1470:       assertFalse(node1.hasOneChild());
1471:       assertFalse(node1.isCase());
1472:       assertFalse(node1.isScript());
1473:       assertFalse(node1.isCatch());
1474:       assertFalse(node1.hasMoreThanOneChild());
1475:       assertFalse(node1.isWith());
1476:       assertFalse(node1.isFor());
1477:       assertFalse(node1.isBlock());
1478:       assertFalse(node1.isHook());
1479:       assertFalse(node1.isThis());
1480:       assertFalse(node1.isComma());
1481:       assertFalse(node1.isBreak());
1482:       assertFalse(node1.isInstanceOf());
1483:       assertFalse(node1.isGetProp());
1484:       assertFalse(node1.isAnd());
1485:       assertFalse(node1.isObjectLit());
1486:       assertFalse(node1.isNot());
1487:       assertFalse(node1.isSwitch());
1488:       assertFalse(node1.isInc());
1489:       assertFalse(node1.isCast());
1490:       assertFalse(node1.isThrow());
1491:       assertFalse(node1.isFalse());
1492:       assertFalse(node1.isAssignAdd());
1493:       assertFalse(node1.isOr());
1494:       assertFalse(node1.isTypeOf());
1495:       assertFalse(node1.isDelProp());
1496:       assertFalse(node1.isEmpty());
1497:       assertFalse(node1.isGetElem());
1498:       assertEquals((-1), node1.getSourcePosition());
1499:       assertFalse(node1.isTrue());
1500:       assertFalse(node1.isVoid());
1501:       assertFalse(node1.isDebugger());
1502:       assertFalse(node1.isExprResult());
1503:       assertFalse(node1.isCall());
1504:       assertFalse(node1.isAssign());
1505:       assertFalse(node1.hasChildren());
1506:       assertFalse(node1.isWhile());
1507:       assertFalse(node1.isDec());
1508:       assertFalse(node1.isReturn());
1509:       assertFalse(node0.equals((Object)node2));
1510:       assertFalse(node0.equals((Object)node1));
1511:       assertFalse(node1.equals((Object)node0));
1512:       assertFalse(node1.equals((Object)node2));
1513:       assertTrue(boolean4 == boolean1);
1514:       assertTrue(boolean4 == boolean0);
1515:       assertTrue(boolean4 == boolean3);
1516:       assertTrue(boolean4 == boolean2);
1517:       
1518:       node2.setInputId((InputId) null);
1519:       assertEquals(55, Node.INFERRED_FUNCTION);
1520:       assertEquals(4095, Node.COLUMN_MASK);
1521:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1522:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1523:       assertEquals(8, Node.FLAG_NO_THROWS);
1524:       assertEquals(39, Node.EMPTY_BLOCK);
1525:       assertEquals(53, Node.INPUT_ID);
1526:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1527:       assertEquals(57, Node.REFLECTED_OBJECT);
1528:       assertEquals(29, Node.JSDOC_INFO_PROP);
1529:       assertEquals(52, Node.LENGTH);
1530:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1531:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1532:       assertEquals(37, Node.OPT_ARG_NAME);
1533:       assertEquals(36, Node.QUOTED_PROP);
1534:       assertEquals(56, Node.CHANGE_TIME);
1535:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1536:       assertEquals(48, Node.DIRECTIVES);
1537:       assertEquals(49, Node.DIRECT_EVAL);
1538:       assertEquals(12, Node.COLUMN_BITS);
1539:       assertEquals(46, Node.IS_NAMESPACE);
1540:       assertEquals(30, Node.VAR_ARGS_NAME);
1541:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1542:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1543:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1544:       assertEquals(47, Node.IS_DISPATCHER);
1545:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1546:       assertEquals(57, Node.LAST_PROP);
1547:       assertEquals(1, Node.DECR_FLAG);
1548:       assertEquals(32, Node.INCRDECR_PROP);
1549:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1550:       assertEquals(40, Node.ORIGINALNAME_PROP);
1551:       assertEquals(2, Node.POST_FLAG);
1552:       assertEquals(50, Node.FREE_CALL);
1553:       assertEquals(43, Node.IS_CONSTANT_NAME);
1554:       assertEquals(54, Node.SLASH_V);
1555:       assertNotSame(node2, node1);
1556:       assertFalse(node2.isWhile());
1557:       assertFalse(node2.isDo());
1558:       assertFalse(node2.isContinue());
1559:       assertFalse(node2.hasMoreThanOneChild());
1560:       assertFalse(node2.isAdd());
1561:       assertFalse(node2.isNew());
1562:       assertFalse(node2.isBlock());
1563:       assertFalse(node2.isVar());
1564:       assertFalse(node2.isLabel());
1565:       assertFalse(node2.isReturn());
1566:       assertTrue(node2.isString());
1567:       assertFalse(node2.isAssignAdd());
1568:       assertFalse(node2.isAssign());
1569:       assertFalse(node2.isDec());
1570:       assertFalse(node2.isNull());
1571:       assertFalse(node2.isSetterDef());
1572:       assertFalse(node2.isGetElem());
1573:       assertFalse(node2.hasChildren());
1574:       assertFalse(node2.isCall());
1575:       assertFalse(node2.isTypeOf());
1576:       assertEquals((-1), node2.getLineno());
1577:       assertFalse(node2.isOr());
1578:       assertFalse(node2.isName());
1579:       assertFalse(node2.isNot());
1580:       assertEquals(40, node2.getType());
1581:       assertFalse(node2.isFunction());
1582:       assertFalse(node2.isDebugger());
1583:       assertFalse(node2.isExprResult());
1584:       assertFalse(node2.isObjectLit());
1585:       assertFalse(node2.isGetProp());
1586:       assertEquals((-1), node2.getSourcePosition());
1587:       assertFalse(node2.isCast());
1588:       assertFalse(node2.isFalse());
1589:       assertFalse(node2.isAnd());
1590:       assertFalse(node2.isCase());
1591:       assertFalse(node2.isInc());
1592:       assertEquals((-1), node2.getCharno());
1593:       assertFalse(node2.isIn());
1594:       assertFalse(node2.isHook());
1595:       assertFalse(node2.isThrow());
1596:       assertFalse(node2.isDelProp());
1597:       assertFalse(node2.isBreak());
1598:       assertFalse(node2.isEmpty());
1599:       assertFalse(node2.isFor());
1600:       assertFalse(node2.isThis());
1601:       assertFalse(node2.isComma());
1602:       assertFalse(node2.isInstanceOf());
1603:       assertFalse(node2.isTrue());
1604:       assertFalse(node2.isVoid());
1605:       assertFalse(node2.isNE());
1606:       assertFalse(node2.isIf());
1607:       assertFalse(node2.isScript());
1608:       assertFalse(node2.isCatch());
1609:       assertFalse(node2.isRegExp());
1610:       assertFalse(node2.isWith());
1611:       assertFalse(node2.hasOneChild());
1612:       assertEquals(0, node2.getChildCount());
1613:       assertFalse(node2.isTry());
1614:       assertFalse(node2.isDefaultCase());
1615:       assertFalse(node2.isGetterDef());
1616:       assertFalse(node2.isLabelName());
1617:       assertFalse(node2.isNumber());
1618:       assertFalse(node2.isArrayLit());
1619:       assertFalse(node2.isParamList());
1620:       assertFalse(node2.isStringKey());
1621:       assertFalse(node2.isSwitch());
1622:       assertFalse(node2.equals((Object)node0));
1623:       assertFalse(node2.equals((Object)node1));
1624:       
1625:       node2.setLineno(154);
1626:       assertEquals(55, Node.INFERRED_FUNCTION);
1627:       assertEquals(4095, Node.COLUMN_MASK);
1628:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1629:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1630:       assertEquals(8, Node.FLAG_NO_THROWS);
1631:       assertEquals(39, Node.EMPTY_BLOCK);
1632:       assertEquals(53, Node.INPUT_ID);
1633:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1634:       assertEquals(57, Node.REFLECTED_OBJECT);
1635:       assertEquals(29, Node.JSDOC_INFO_PROP);
1636:       assertEquals(52, Node.LENGTH);
1637:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1638:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1639:       assertEquals(37, Node.OPT_ARG_NAME);
1640:       assertEquals(36, Node.QUOTED_PROP);
1641:       assertEquals(56, Node.CHANGE_TIME);
1642:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1643:       assertEquals(48, Node.DIRECTIVES);
1644:       assertEquals(49, Node.DIRECT_EVAL);
1645:       assertEquals(12, Node.COLUMN_BITS);
1646:       assertEquals(46, Node.IS_NAMESPACE);
1647:       assertEquals(30, Node.VAR_ARGS_NAME);
1648:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1649:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1650:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1651:       assertEquals(47, Node.IS_DISPATCHER);
1652:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1653:       assertEquals(57, Node.LAST_PROP);
1654:       assertEquals(1, Node.DECR_FLAG);
1655:       assertEquals(32, Node.INCRDECR_PROP);
1656:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1657:       assertEquals(40, Node.ORIGINALNAME_PROP);
1658:       assertEquals(2, Node.POST_FLAG);
1659:       assertEquals(50, Node.FREE_CALL);
1660:       assertEquals(43, Node.IS_CONSTANT_NAME);
1661:       assertEquals(54, Node.SLASH_V);
1662:       assertNotSame(node2, node1);
1663:       assertFalse(node2.isWhile());
1664:       assertFalse(node2.isDo());
1665:       assertFalse(node2.isContinue());
1666:       assertFalse(node2.hasMoreThanOneChild());
1667:       assertFalse(node2.isAdd());
1668:       assertFalse(node2.isNew());
1669:       assertFalse(node2.isBlock());
1670:       assertFalse(node2.isVar());
1671:       assertFalse(node2.isLabel());
1672:       assertFalse(node2.isReturn());
1673:       assertTrue(node2.isString());
1674:       assertFalse(node2.isAssignAdd());
1675:       assertFalse(node2.isAssign());
1676:       assertFalse(node2.isDec());
1677:       assertFalse(node2.isNull());
1678:       assertFalse(node2.isSetterDef());
1679:       assertFalse(node2.isGetElem());
1680:       assertFalse(node2.hasChildren());
1681:       assertFalse(node2.isCall());
1682:       assertFalse(node2.isTypeOf());
1683:       assertFalse(node2.isOr());
1684:       assertFalse(node2.isName());
1685:       assertFalse(node2.isNot());
1686:       assertEquals(40, node2.getType());
1687:       assertEquals(0, node2.getCharno());
1688:       assertFalse(node2.isFunction());
1689:       assertFalse(node2.isDebugger());
1690:       assertFalse(node2.isExprResult());
1691:       assertFalse(node2.isObjectLit());
1692:       assertFalse(node2.isGetProp());
1693:       assertFalse(node2.isCast());
1694:       assertFalse(node2.isFalse());
1695:       assertFalse(node2.isAnd());
1696:       assertFalse(node2.isCase());
1697:       assertFalse(node2.isInc());
1698:       assertFalse(node2.isIn());
1699:       assertFalse(node2.isHook());
1700:       assertFalse(node2.isThrow());
1701:       assertFalse(node2.isDelProp());
1702:       assertFalse(node2.isBreak());
1703:       assertFalse(node2.isEmpty());
1704:       assertFalse(node2.isFor());
1705:       assertFalse(node2.isThis());
1706:       assertFalse(node2.isComma());
1707:       assertFalse(node2.isInstanceOf());
1708:       assertFalse(node2.isTrue());
1709:       assertFalse(node2.isVoid());
1710:       assertEquals(154, node2.getLineno());
1711:       assertFalse(node2.isNE());
1712:       assertFalse(node2.isIf());
1713:       assertFalse(node2.isScript());
1714:       assertFalse(node2.isCatch());
1715:       assertFalse(node2.isRegExp());
1716:       assertFalse(node2.isWith());
1717:       assertFalse(node2.hasOneChild());
1718:       assertEquals(0, node2.getChildCount());
1719:       assertFalse(node2.isTry());
1720:       assertEquals(630784, node2.getSourcePosition());
1721:       assertFalse(node2.isDefaultCase());
1722:       assertFalse(node2.isGetterDef());
1723:       assertFalse(node2.isLabelName());
1724:       assertFalse(node2.isNumber());
1725:       assertFalse(node2.isArrayLit());
1726:       assertFalse(node2.isParamList());
1727:       assertFalse(node2.isStringKey());
1728:       assertFalse(node2.isSwitch());
1729:       assertFalse(node2.equals((Object)node0));
1730:       assertFalse(node2.equals((Object)node1));
1731:       
1732:       boolean boolean5 = node0.isEquivalentTo(node1);
1733:       assertEquals(56, Node.CHANGE_TIME);
1734:       assertEquals(37, Node.OPT_ARG_NAME);
1735:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1736:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1737:       assertEquals(29, Node.JSDOC_INFO_PROP);
1738:       assertEquals(32, Node.INCRDECR_PROP);
1739:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1740:       assertEquals(2, Node.POST_FLAG);
1741:       assertEquals(12, Node.COLUMN_BITS);
1742:       assertEquals(47, Node.IS_DISPATCHER);
1743:       assertEquals(30, Node.VAR_ARGS_NAME);
1744:       assertEquals(43, Node.IS_CONSTANT_NAME);
1745:       assertEquals(1, Node.DECR_FLAG);
1746:       assertEquals(46, Node.IS_NAMESPACE);
1747:       assertEquals(54, Node.SLASH_V);
1748:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1749:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1750:       assertEquals(50, Node.FREE_CALL);
1751:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1752:       assertEquals(8, Node.FLAG_NO_THROWS);
1753:       assertEquals(40, Node.ORIGINALNAME_PROP);
1754:       assertEquals(48, Node.DIRECTIVES);
1755:       assertEquals(39, Node.EMPTY_BLOCK);
1756:       assertEquals(4095, Node.COLUMN_MASK);
1757:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1758:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1759:       assertEquals(49, Node.DIRECT_EVAL);
1760:       assertEquals(57, Node.LAST_PROP);
1761:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1762:       assertEquals(55, Node.INFERRED_FUNCTION);
1763:       assertEquals(53, Node.INPUT_ID);
1764:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1765:       assertEquals(52, Node.LENGTH);
1766:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1767:       assertEquals(36, Node.QUOTED_PROP);
1768:       assertEquals(57, Node.REFLECTED_OBJECT);
1769:       assertEquals(2, Node.POST_FLAG);
1770:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1771:       assertEquals(37, Node.OPT_ARG_NAME);
1772:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1773:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1774:       assertEquals(29, Node.JSDOC_INFO_PROP);
1775:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1776:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1777:       assertEquals(43, Node.IS_CONSTANT_NAME);
1778:       assertEquals(56, Node.CHANGE_TIME);
1779:       assertEquals(46, Node.IS_NAMESPACE);
1780:       assertEquals(57, Node.LAST_PROP);
1781:       assertEquals(36, Node.QUOTED_PROP);
1782:       assertEquals(30, Node.VAR_ARGS_NAME);
1783:       assertEquals(55, Node.INFERRED_FUNCTION);
1784:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1785:       assertEquals(53, Node.INPUT_ID);
1786:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1787:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1788:       assertEquals(47, Node.IS_DISPATCHER);
1789:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1790:       assertEquals(50, Node.FREE_CALL);
1791:       assertEquals(40, Node.ORIGINALNAME_PROP);
1792:       assertEquals(8, Node.FLAG_NO_THROWS);
1793:       assertEquals(39, Node.EMPTY_BLOCK);
1794:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1795:       assertEquals(52, Node.LENGTH);
1796:       assertEquals(48, Node.DIRECTIVES);
1797:       assertEquals(57, Node.REFLECTED_OBJECT);
1798:       assertEquals(54, Node.SLASH_V);
1799:       assertEquals(1, Node.DECR_FLAG);
1800:       assertEquals(49, Node.DIRECT_EVAL);
1801:       assertEquals(4095, Node.COLUMN_MASK);
1802:       assertEquals(32, Node.INCRDECR_PROP);
1803:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1804:       assertEquals(12, Node.COLUMN_BITS);
1805:       assertFalse(boolean5);
1806:       assertNotSame(node1, node2);
1807:       assertFalse(node0.isParamList());
1808:       assertFalse(node0.isSetterDef());
1809:       assertEquals(0, node0.getLineno());
1810:       assertFalse(node0.isCall());
1811:       assertFalse(node0.isCatch());
1812:       assertFalse(node0.isVar());
1813:       assertEquals(0, node0.getChildCount());
1814:       assertFalse(node0.isRegExp());
1815:       assertFalse(node0.isFunction());
1816:       assertFalse(node0.isBlock());
1817:       assertFalse(node0.isTry());
1818:       assertFalse(node0.isArrayLit());
1819:       assertFalse(node0.isStringKey());
1820:       assertFalse(node0.isGetterDef());
1821:       assertFalse(node0.isDebugger());
1822:       assertFalse(node0.isAssignAdd());
1823:       assertFalse(node0.isDelProp());
1824:       assertFalse(node0.isLabelName());
1825:       assertFalse(node0.isGetElem());
1826:       assertFalse(node0.isWhile());
1827:       assertFalse(node0.isDec());
1828:       assertFalse(node0.hasChildren());
1829:       assertFalse(node0.isTypeOf());
1830:       assertFalse(node0.isReturn());
1831:       assertFalse(node0.isAssign());
1832:       assertFalse(node0.isLabel());
1833:       assertFalse(node0.isVoid());
1834:       assertFalse(node0.isTrue());
1835:       assertFalse(node0.isAdd());
1836:       assertFalse(node0.isExprResult());
1837:       assertFalse(node0.isDefaultCase());
1838:       assertFalse(node0.isDo());
1839:       assertFalse(node0.isNew());
1840:       assertFalse(node0.isName());
1841:       assertFalse(node0.isEmpty());
1842:       assertFalse(node0.isNull());
1843:       assertFalse(node0.isOr());
1844:       assertEquals(31, node0.getCharno());
1845:       assertFalse(node0.isGetProp());
1846:       assertFalse(node0.isThis());
1847:       assertFalse(node0.isInstanceOf());
1848:       assertFalse(node0.isBreak());
1849:       assertFalse(node0.isThrow());
1850:       assertFalse(node0.isFalse());
1851:       assertFalse(node0.isWith());
1852:       assertFalse(node0.isHook());
1853:       assertFalse(node0.isComma());
1854:       assertFalse(node0.isSwitch());
1855:       assertFalse(node0.isScript());
1856:       assertFalse(node0.hasOneChild());
1857:       assertFalse(node0.isCase());
1858:       assertFalse(node0.isObjectLit());
1859:       assertFalse(node0.isAnd());
1860:       assertFalse(node0.isString());
1861:       assertFalse(node0.isNumber());
1862:       assertFalse(node0.isNot());
1863:       assertFalse(node0.isNE());
1864:       assertFalse(node0.isIf());
1865:       assertFalse(node0.isFor());
1866:       assertFalse(node0.hasMoreThanOneChild());
1867:       assertFalse(node0.isCast());
1868:       assertFalse(node0.isContinue());
1869:       assertEquals(1860, node0.getType());
1870:       assertFalse(node0.isInc());
1871:       assertFalse(node0.isIn());
1872:       assertEquals(31, node0.getSourcePosition());
1873:       assertFalse(node1.isParamList());
1874:       assertFalse(node1.isSetterDef());
1875:       assertFalse(node1.isStringKey());
1876:       assertFalse(node1.isName());
1877:       assertFalse(node1.isNull());
1878:       assertFalse(node1.isNew());
1879:       assertFalse(node1.isFunction());
1880:       assertFalse(node1.isDefaultCase());
1881:       assertFalse(node1.isArrayLit());
1882:       assertFalse(node1.isAdd());
1883:       assertFalse(node1.isContinue());
1884:       assertFalse(node1.isDo());
1885:       assertEquals(0, node1.getChildCount());
1886:       assertEquals(40, node1.getType());
1887:       assertFalse(node1.isVar());
1888:       assertFalse(node1.isLabel());
1889:       assertFalse(node1.isNumber());
1890:       assertFalse(node1.isIn());
1891:       assertEquals((-1), node1.getLineno());
1892:       assertFalse(node1.isLabelName());
1893:       assertFalse(node1.isIf());
1894:       assertFalse(node1.isGetterDef());
1895:       assertFalse(node1.isNE());
1896:       assertEquals((-1), node1.getCharno());
1897:       assertFalse(node1.isRegExp());
1898:       assertFalse(node1.isTry());
1899:       assertTrue(node1.isString());
1900:       assertFalse(node1.hasOneChild());
1901:       assertFalse(node1.isCase());
1902:       assertFalse(node1.isScript());
1903:       assertFalse(node1.isCatch());
1904:       assertFalse(node1.hasMoreThanOneChild());
1905:       assertFalse(node1.isWith());
1906:       assertFalse(node1.isFor());
1907:       assertFalse(node1.isBlock());
1908:       assertFalse(node1.isHook());
1909:       assertFalse(node1.isThis());
1910:       assertFalse(node1.isComma());
1911:       assertFalse(node1.isBreak());
1912:       assertFalse(node1.isInstanceOf());
1913:       assertFalse(node1.isGetProp());
1914:       assertFalse(node1.isAnd());
1915:       assertFalse(node1.isObjectLit());
1916:       assertFalse(node1.isNot());
1917:       assertFalse(node1.isSwitch());
1918:       assertFalse(node1.isInc());
1919:       assertFalse(node1.isCast());
1920:       assertFalse(node1.isThrow());
1921:       assertFalse(node1.isFalse());
1922:       assertFalse(node1.isAssignAdd());
1923:       assertFalse(node1.isOr());
1924:       assertFalse(node1.isTypeOf());
1925:       assertFalse(node1.isDelProp());
1926:       assertFalse(node1.isEmpty());
1927:       assertFalse(node1.isGetElem());
1928:       assertEquals((-1), node1.getSourcePosition());
1929:       assertFalse(node1.isTrue());
1930:       assertFalse(node1.isVoid());
1931:       assertFalse(node1.isDebugger());
1932:       assertFalse(node1.isExprResult());
1933:       assertFalse(node1.isCall());
1934:       assertFalse(node1.isAssign());
1935:       assertFalse(node1.hasChildren());
1936:       assertFalse(node1.isWhile());
1937:       assertFalse(node1.isDec());
1938:       assertFalse(node1.isReturn());
1939:       assertFalse(node0.equals((Object)node2));
1940:       assertFalse(node0.equals((Object)node1));
1941:       assertTrue(boolean5 == boolean2);
1942:       assertTrue(boolean5 == boolean0);
1943:       assertTrue(boolean5 == boolean3);
1944:       assertTrue(boolean5 == boolean4);
1945:       assertTrue(boolean5 == boolean1);
1946:       assertFalse(node1.equals((Object)node0));
1947:       assertFalse(node1.equals((Object)node2));
1948:       
1949:       boolean boolean6 = node2.isObjectLit();
1950:       assertEquals(55, Node.INFERRED_FUNCTION);
1951:       assertEquals(4095, Node.COLUMN_MASK);
1952:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1953:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1954:       assertEquals(8, Node.FLAG_NO_THROWS);
1955:       assertEquals(39, Node.EMPTY_BLOCK);
1956:       assertEquals(53, Node.INPUT_ID);
1957:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1958:       assertEquals(57, Node.REFLECTED_OBJECT);
1959:       assertEquals(29, Node.JSDOC_INFO_PROP);
1960:       assertEquals(52, Node.LENGTH);
1961:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1962:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1963:       assertEquals(37, Node.OPT_ARG_NAME);
1964:       assertEquals(36, Node.QUOTED_PROP);
1965:       assertEquals(56, Node.CHANGE_TIME);
1966:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1967:       assertEquals(48, Node.DIRECTIVES);
1968:       assertEquals(49, Node.DIRECT_EVAL);
1969:       assertEquals(12, Node.COLUMN_BITS);
1970:       assertEquals(46, Node.IS_NAMESPACE);
1971:       assertEquals(30, Node.VAR_ARGS_NAME);
1972:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1973:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1974:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1975:       assertEquals(47, Node.IS_DISPATCHER);
1976:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1977:       assertEquals(57, Node.LAST_PROP);
1978:       assertEquals(1, Node.DECR_FLAG);
1979:       assertEquals(32, Node.INCRDECR_PROP);
1980:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1981:       assertEquals(40, Node.ORIGINALNAME_PROP);
1982:       assertEquals(2, Node.POST_FLAG);
1983:       assertEquals(50, Node.FREE_CALL);
1984:       assertEquals(43, Node.IS_CONSTANT_NAME);
1985:       assertEquals(54, Node.SLASH_V);
1986:       assertFalse(boolean6);
1987:       assertNotSame(node2, node1);
1988:       assertFalse(node2.isWhile());
1989:       assertFalse(node2.isDo());
1990:       assertFalse(node2.isContinue());
1991:       assertFalse(node2.hasMoreThanOneChild());
1992:       assertFalse(node2.isAdd());
1993:       assertFalse(node2.isNew());
1994:       assertFalse(node2.isBlock());
1995:       assertFalse(node2.isVar());
1996:       assertFalse(node2.isLabel());
1997:       assertFalse(node2.isReturn());
1998:       assertTrue(node2.isString());
1999:       assertFalse(node2.isAssignAdd());
2000:       assertFalse(node2.isAssign());
2001:       assertFalse(node2.isDec());
2002:       assertFalse(node2.isNull());
2003:       assertFalse(node2.isSetterDef());
2004:       assertFalse(node2.isGetElem());
2005:       assertFalse(node2.hasChildren());
2006:       assertFalse(node2.isCall());
2007:       assertFalse(node2.isTypeOf());
2008:       assertFalse(node2.isOr());
2009:       assertFalse(node2.isName());
2010:       assertFalse(node2.isNot());
2011:       assertEquals(40, node2.getType());
2012:       assertEquals(0, node2.getCharno());
2013:       assertFalse(node2.isFunction());
2014:       assertFalse(node2.isDebugger());
2015:       assertFalse(node2.isExprResult());
2016:       assertFalse(node2.isObjectLit());
2017:       assertFalse(node2.isGetProp());
2018:       assertFalse(node2.isCast());
2019:       assertFalse(node2.isFalse());
2020:       assertFalse(node2.isAnd());
2021:       assertFalse(node2.isCase());
2022:       assertFalse(node2.isInc());
2023:       assertFalse(node2.isIn());
2024:       assertFalse(node2.isHook());
2025:       assertFalse(node2.isThrow());
2026:       assertFalse(node2.isDelProp());
2027:       assertFalse(node2.isBreak());
2028:       assertFalse(node2.isEmpty());
2029:       assertFalse(node2.isFor());
2030:       assertFalse(node2.isThis());
2031:       assertFalse(node2.isComma());
2032:       assertFalse(node2.isInstanceOf());
2033:       assertFalse(node2.isTrue());
2034:       assertFalse(node2.isVoid());
2035:       assertEquals(154, node2.getLineno());
2036:       assertFalse(node2.isNE());
2037:       assertFalse(node2.isIf());
2038:       assertFalse(node2.isScript());
2039:       assertFalse(node2.isCatch());
2040:       assertFalse(node2.isRegExp());
2041:       assertFalse(node2.isWith());
2042:       assertFalse(node2.hasOneChild());
2043:       assertEquals(0, node2.getChildCount());
2044:       assertFalse(node2.isTry());
2045:       assertEquals(630784, node2.getSourcePosition());
2046:       assertFalse(node2.isDefaultCase());
2047:       assertFalse(node2.isGetterDef());
2048:       assertFalse(node2.isLabelName());
2049:       assertFalse(node2.isNumber());
2050:       assertFalse(node2.isArrayLit());
2051:       assertFalse(node2.isParamList());
2052:       assertFalse(node2.isStringKey());
2053:       assertFalse(node2.isSwitch());
2054:       assertTrue(boolean6 == boolean0);
2055:       assertTrue(boolean6 == boolean3);
2056:       assertTrue(boolean6 == boolean2);
2057:       assertTrue(boolean6 == boolean5);
2058:       assertTrue(boolean6 == boolean1);
2059:       assertTrue(boolean6 == boolean4);
2060:       assertFalse(node2.equals((Object)node0));
2061:       assertFalse(node2.equals((Object)node1));
2062:       
2063:       Node node3 = node0.getParent();
2064:       assertEquals(56, Node.CHANGE_TIME);
2065:       assertEquals(37, Node.OPT_ARG_NAME);
2066:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2067:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2068:       assertEquals(29, Node.JSDOC_INFO_PROP);
2069:       assertEquals(32, Node.INCRDECR_PROP);
2070:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2071:       assertEquals(2, Node.POST_FLAG);
2072:       assertEquals(12, Node.COLUMN_BITS);
2073:       assertEquals(47, Node.IS_DISPATCHER);
2074:       assertEquals(30, Node.VAR_ARGS_NAME);
2075:       assertEquals(43, Node.IS_CONSTANT_NAME);
2076:       assertEquals(1, Node.DECR_FLAG);
2077:       assertEquals(46, Node.IS_NAMESPACE);
2078:       assertEquals(54, Node.SLASH_V);
2079:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2080:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2081:       assertEquals(50, Node.FREE_CALL);
2082:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2083:       assertEquals(8, Node.FLAG_NO_THROWS);
2084:       assertEquals(40, Node.ORIGINALNAME_PROP);
2085:       assertEquals(48, Node.DIRECTIVES);
2086:       assertEquals(39, Node.EMPTY_BLOCK);
2087:       assertEquals(4095, Node.COLUMN_MASK);
2088:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2089:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2090:       assertEquals(49, Node.DIRECT_EVAL);
2091:       assertEquals(57, Node.LAST_PROP);
2092:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2093:       assertEquals(55, Node.INFERRED_FUNCTION);
2094:       assertEquals(53, Node.INPUT_ID);
2095:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2096:       assertEquals(52, Node.LENGTH);
2097:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2098:       assertEquals(36, Node.QUOTED_PROP);
2099:       assertEquals(57, Node.REFLECTED_OBJECT);
2100:       assertNull(node3);
2101:       assertFalse(node0.isParamList());
2102:       assertFalse(node0.isSetterDef());
2103:       assertEquals(0, node0.getLineno());
2104:       assertFalse(node0.isCall());
2105:       assertFalse(node0.isCatch());
2106:       assertFalse(node0.isVar());
2107:       assertEquals(0, node0.getChildCount());
2108:       assertFalse(node0.isRegExp());
2109:       assertFalse(node0.isFunction());
2110:       assertFalse(node0.isBlock());
2111:       assertFalse(node0.isTry());
2112:       assertFalse(node0.isArrayLit());
2113:       assertFalse(node0.isStringKey());
2114:       assertFalse(node0.isGetterDef());
2115:       assertFalse(node0.isDebugger());
2116:       assertFalse(node0.isAssignAdd());
2117:       assertFalse(node0.isDelProp());
2118:       assertFalse(node0.isLabelName());
2119:       assertFalse(node0.isGetElem());
2120:       assertFalse(node0.isWhile());
2121:       assertFalse(node0.isDec());
2122:       assertFalse(node0.hasChildren());
2123:       assertFalse(node0.isTypeOf());
2124:       assertFalse(node0.isReturn());
2125:       assertFalse(node0.isAssign());
2126:       assertFalse(node0.isLabel());
2127:       assertFalse(node0.isVoid());
2128:       assertFalse(node0.isTrue());
2129:       assertFalse(node0.isAdd());
2130:       assertFalse(node0.isExprResult());
2131:       assertFalse(node0.isDefaultCase());
2132:       assertFalse(node0.isDo());
2133:       assertFalse(node0.isNew());
2134:       assertFalse(node0.isName());
2135:       assertFalse(node0.isEmpty());
2136:       assertFalse(node0.isNull());
2137:       assertFalse(node0.isOr());
2138:       assertEquals(31, node0.getCharno());
2139:       assertFalse(node0.isGetProp());
2140:       assertFalse(node0.isThis());
2141:       assertFalse(node0.isInstanceOf());
2142:       assertFalse(node0.isBreak());
2143:       assertFalse(node0.isThrow());
2144:       assertFalse(node0.isFalse());
2145:       assertFalse(node0.isWith());
2146:       assertFalse(node0.isHook());
2147:       assertFalse(node0.isComma());
2148:       assertFalse(node0.isSwitch());
2149:       assertFalse(node0.isScript());
2150:       assertFalse(node0.hasOneChild());
2151:       assertFalse(node0.isCase());
2152:       assertFalse(node0.isObjectLit());
2153:       assertFalse(node0.isAnd());
2154:       assertFalse(node0.isString());
2155:       assertFalse(node0.isNumber());
2156:       assertFalse(node0.isNot());
2157:       assertFalse(node0.isNE());
2158:       assertFalse(node0.isIf());
2159:       assertFalse(node0.isFor());
2160:       assertFalse(node0.hasMoreThanOneChild());
2161:       assertFalse(node0.isCast());
2162:       assertFalse(node0.isContinue());
2163:       assertEquals(1860, node0.getType());
2164:       assertFalse(node0.isInc());
2165:       assertFalse(node0.isIn());
2166:       assertEquals(31, node0.getSourcePosition());
2167:       assertFalse(node0.equals((Object)node2));
2168:       assertFalse(node0.equals((Object)node1));
2169:       
2170:       String string0 = node0.getQualifiedName();
2171:       assertEquals(56, Node.CHANGE_TIME);
2172:       assertEquals(37, Node.OPT_ARG_NAME);
2173:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2174:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2175:       assertEquals(29, Node.JSDOC_INFO_PROP);
2176:       assertEquals(32, Node.INCRDECR_PROP);
2177:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2178:       assertEquals(2, Node.POST_FLAG);
2179:       assertEquals(12, Node.COLUMN_BITS);
2180:       assertEquals(47, Node.IS_DISPATCHER);
2181:       assertEquals(30, Node.VAR_ARGS_NAME);
2182:       assertEquals(43, Node.IS_CONSTANT_NAME);
2183:       assertEquals(1, Node.DECR_FLAG);
2184:       assertEquals(46, Node.IS_NAMESPACE);
2185:       assertEquals(54, Node.SLASH_V);
2186:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2187:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2188:       assertEquals(50, Node.FREE_CALL);
2189:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2190:       assertEquals(8, Node.FLAG_NO_THROWS);
2191:       assertEquals(40, Node.ORIGINALNAME_PROP);
2192:       assertEquals(48, Node.DIRECTIVES);
2193:       assertEquals(39, Node.EMPTY_BLOCK);
2194:       assertEquals(4095, Node.COLUMN_MASK);
2195:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2196:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2197:       assertEquals(49, Node.DIRECT_EVAL);
2198:       assertEquals(57, Node.LAST_PROP);
2199:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2200:       assertEquals(55, Node.INFERRED_FUNCTION);
2201:       assertEquals(53, Node.INPUT_ID);
2202:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2203:       assertEquals(52, Node.LENGTH);
2204:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2205:       assertEquals(36, Node.QUOTED_PROP);
2206:       assertEquals(57, Node.REFLECTED_OBJECT);
2207:       assertNull(string0);
2208:       assertFalse(node0.isParamList());
2209:       assertFalse(node0.isSetterDef());
2210:       assertEquals(0, node0.getLineno());
2211:       assertFalse(node0.isCall());
2212:       assertFalse(node0.isCatch());
2213:       assertFalse(node0.isVar());
2214:       assertEquals(0, node0.getChildCount());
2215:       assertFalse(node0.isRegExp());
2216:       assertFalse(node0.isFunction());
2217:       assertFalse(node0.isBlock());
2218:       assertFalse(node0.isTry());
2219:       assertFalse(node0.isArrayLit());
2220:       assertFalse(node0.isStringKey());
2221:       assertFalse(node0.isGetterDef());
2222:       assertFalse(node0.isDebugger());
2223:       assertFalse(node0.isAssignAdd());
2224:       assertFalse(node0.isDelProp());
2225:       assertFalse(node0.isLabelName());
2226:       assertFalse(node0.isGetElem());
2227:       assertFalse(node0.isWhile());
2228:       assertFalse(node0.isDec());
2229:       assertFalse(node0.hasChildren());
2230:       assertFalse(node0.isTypeOf());
2231:       assertFalse(node0.isReturn());
2232:       assertFalse(node0.isAssign());
2233:       assertFalse(node0.isLabel());
2234:       assertFalse(node0.isVoid());
2235:       assertFalse(node0.isTrue());
2236:       assertFalse(node0.isAdd());
2237:       assertFalse(node0.isExprResult());
2238:       assertFalse(node0.isDefaultCase());
2239:       assertFalse(node0.isDo());
2240:       assertFalse(node0.isNew());
2241:       assertFalse(node0.isName());
2242:       assertFalse(node0.isEmpty());
2243:       assertFalse(node0.isNull());
2244:       assertFalse(node0.isOr());
2245:       assertEquals(31, node0.getCharno());
2246:       assertFalse(node0.isGetProp());
2247:       assertFalse(node0.isThis());
2248:       assertFalse(node0.isInstanceOf());
2249:       assertFalse(node0.isBreak());
2250:       assertFalse(node0.isThrow());
2251:       assertFalse(node0.isFalse());
2252:       assertFalse(node0.isWith());
2253:       assertFalse(node0.isHook());
2254:       assertFalse(node0.isComma());
2255:       assertFalse(node0.isSwitch());
2256:       assertFalse(node0.isScript());
2257:       assertFalse(node0.hasOneChild());
2258:       assertFalse(node0.isCase());
2259:       assertFalse(node0.isObjectLit());
2260:       assertFalse(node0.isAnd());
2261:       assertFalse(node0.isString());
2262:       assertFalse(node0.isNumber());
2263:       assertFalse(node0.isNot());
2264:       assertFalse(node0.isNE());
2265:       assertFalse(node0.isIf());
2266:       assertFalse(node0.isFor());
2267:       assertFalse(node0.hasMoreThanOneChild());
2268:       assertFalse(node0.isCast());
2269:       assertFalse(node0.isContinue());
2270:       assertEquals(1860, node0.getType());
2271:       assertFalse(node0.isInc());
2272:       assertFalse(node0.isIn());
2273:       assertEquals(31, node0.getSourcePosition());
2274:       assertFalse(node0.equals((Object)node2));
2275:       assertFalse(node0.equals((Object)node1));
2276:       
2277:       boolean boolean7 = node2.isAnd();
2278:       assertEquals(55, Node.INFERRED_FUNCTION);
2279:       assertEquals(4095, Node.COLUMN_MASK);
2280:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2281:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2282:       assertEquals(8, Node.FLAG_NO_THROWS);
2283:       assertEquals(39, Node.EMPTY_BLOCK);
2284:       assertEquals(53, Node.INPUT_ID);
2285:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2286:       assertEquals(57, Node.REFLECTED_OBJECT);
2287:       assertEquals(29, Node.JSDOC_INFO_PROP);
2288:       assertEquals(52, Node.LENGTH);
2289:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2290:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2291:       assertEquals(37, Node.OPT_ARG_NAME);
2292:       assertEquals(36, Node.QUOTED_PROP);
2293:       assertEquals(56, Node.CHANGE_TIME);
2294:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2295:       assertEquals(48, Node.DIRECTIVES);
2296:       assertEquals(49, Node.DIRECT_EVAL);
2297:       assertEquals(12, Node.COLUMN_BITS);
2298:       assertEquals(46, Node.IS_NAMESPACE);
2299:       assertEquals(30, Node.VAR_ARGS_NAME);
2300:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2301:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2302:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2303:       assertEquals(47, Node.IS_DISPATCHER);
2304:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2305:       assertEquals(57, Node.LAST_PROP);
2306:       assertEquals(1, Node.DECR_FLAG);
2307:       assertEquals(32, Node.INCRDECR_PROP);
2308:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2309:       assertEquals(40, Node.ORIGINALNAME_PROP);
2310:       assertEquals(2, Node.POST_FLAG);
2311:       assertEquals(50, Node.FREE_CALL);
2312:       assertEquals(43, Node.IS_CONSTANT_NAME);
2313:       assertEquals(54, Node.SLASH_V);
2314:       assertFalse(boolean7);
2315:       assertNotSame(node2, node1);
2316:       assertFalse(node2.isWhile());
2317:       assertFalse(node2.isDo());
2318:       assertFalse(node2.isContinue());
2319:       assertFalse(node2.hasMoreThanOneChild());
2320:       assertFalse(node2.isAdd());
2321:       assertFalse(node2.isNew());
2322:       assertFalse(node2.isBlock());
2323:       assertFalse(node2.isVar());
2324:       assertFalse(node2.isLabel());
2325:       assertFalse(node2.isReturn());
2326:       assertTrue(node2.isString());
2327:       assertFalse(node2.isAssignAdd());
2328:       assertFalse(node2.isAssign());
2329:       assertFalse(node2.isDec());
2330:       assertFalse(node2.isNull());
2331:       assertFalse(node2.isSetterDef());
2332:       assertFalse(node2.isGetElem());
2333:       assertFalse(node2.hasChildren());
2334:       assertFalse(node2.isCall());
2335:       assertFalse(node2.isTypeOf());
2336:       assertFalse(node2.isOr());
2337:       assertFalse(node2.isName());
2338:       assertFalse(node2.isNot());
2339:       assertEquals(40, node2.getType());
2340:       assertEquals(0, node2.getCharno());
2341:       assertFalse(node2.isFunction());
2342:       assertFalse(node2.isDebugger());
2343:       assertFalse(node2.isExprResult());
2344:       assertFalse(node2.isObjectLit());
2345:       assertFalse(node2.isGetProp());
2346:       assertFalse(node2.isCast());
2347:       assertFalse(node2.isFalse());
2348:       assertFalse(node2.isAnd());
2349:       assertFalse(node2.isCase());
2350:       assertFalse(node2.isInc());
2351:       assertFalse(node2.isIn());
2352:       assertFalse(node2.isHook());
2353:       assertFalse(node2.isThrow());
2354:       assertFalse(node2.isDelProp());
2355:       assertFalse(node2.isBreak());
2356:       assertFalse(node2.isEmpty());
2357:       assertFalse(node2.isFor());
2358:       assertFalse(node2.isThis());
2359:       assertFalse(node2.isComma());
2360:       assertFalse(node2.isInstanceOf());
2361:       assertFalse(node2.isTrue());
2362:       assertFalse(node2.isVoid());
2363:       assertEquals(154, node2.getLineno());
2364:       assertFalse(node2.isNE());
2365:       assertFalse(node2.isIf());
2366:       assertFalse(node2.isScript());
2367:       assertFalse(node2.isCatch());
2368:       assertFalse(node2.isRegExp());
2369:       assertFalse(node2.isWith());
2370:       assertFalse(node2.hasOneChild());
2371:       assertEquals(0, node2.getChildCount());
2372:       assertFalse(node2.isTry());
2373:       assertEquals(630784, node2.getSourcePosition());
2374:       assertFalse(node2.isDefaultCase());
2375:       assertFalse(node2.isGetterDef());
2376:       assertFalse(node2.isLabelName());
2377:       assertFalse(node2.isNumber());
2378:       assertFalse(node2.isArrayLit());
2379:       assertFalse(node2.isParamList());
2380:       assertFalse(node2.isStringKey());
2381:       assertFalse(node2.isSwitch());
2382:       assertTrue(boolean7 == boolean0);
2383:       assertTrue(boolean7 == boolean3);
2384:       assertTrue(boolean7 == boolean4);
2385:       assertTrue(boolean7 == boolean6);
2386:       assertTrue(boolean7 == boolean1);
2387:       assertTrue(boolean7 == boolean2);
2388:       assertTrue(boolean7 == boolean5);
2389:       assertFalse(node2.equals((Object)node0));
2390:       assertFalse(node2.equals((Object)node1));
2391:   }
2392: }
RegularFileObject[/tmp/EvoSuite_145_1629222895066/com/google/javascript/rhino/Node_145_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:55 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_145_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_145_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.common.collect.RegularImmutableSet",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.common.collect.SingletonImmutableSet",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.javascript.rhino.JSDocInfo$1",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.EmptyImmutableSet",
224:       "com.google.common.collect.Maps$ImprovedAbstractMap",
225:       "com.google.common.collect.ImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
227:       "com.google.common.collect.ImmutableList",
228:       "com.google.common.collect.SingletonImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
230:       "com.google.javascript.rhino.jstype.StringType",
231:       "com.google.javascript.rhino.Node$AbstractPropListItem",
232:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
233:       "com.google.javascript.rhino.jstype.TemplatizedType",
234:       "com.google.javascript.rhino.jstype.Visitor",
235:       "com.google.javascript.rhino.jstype.NoResolvedType",
236:       "com.google.javascript.rhino.jstype.JSTypeNative",
237:       "com.google.javascript.rhino.jstype.AllType",
238:       "com.google.common.collect.Maps",
239:       "com.google.common.collect.SetMultimap",
240:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
241:       "com.google.common.collect.Maps$EntryTransformer",
242:       "com.google.javascript.rhino.JSTypeExpression",
243:       "com.google.common.collect.Iterators$MergingIterator"
244:     );
245:   } 
246: 
247:   private static void resetClasses() {
248:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_145_tmp__ESTest_scaffolding.class.getClassLoader()); 
249: 
250:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
251:       "com.google.javascript.rhino.Node",
252:       "com.google.javascript.rhino.Node$NumberNode",
253:       "com.google.javascript.rhino.Node$StringNode",
254:       "com.google.javascript.rhino.Node$AbstractPropListItem",
255:       "com.google.javascript.rhino.Node$ObjectPropListItem",
256:       "com.google.javascript.rhino.Node$IntPropListItem",
257:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
258:       "com.google.javascript.rhino.Node$AncestorIterable",
259:       "com.google.javascript.rhino.Node$NodeMismatch",
260:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
261:       "com.google.javascript.rhino.Node$SideEffectFlags",
262:       "com.google.javascript.rhino.Token",
263:       "com.google.common.base.Preconditions",
264:       "com.google.javascript.rhino.SimpleErrorReporter",
265:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
266:       "com.google.common.base.Joiner",
267:       "com.google.common.base.Joiner$1",
268:       "com.google.common.collect.Collections2",
269:       "com.google.common.base.Joiner$MapJoiner",
270:       "com.google.common.collect.Maps",
271:       "com.google.common.collect.AbstractMultimap",
272:       "com.google.common.collect.AbstractMapBasedMultimap",
273:       "com.google.common.collect.AbstractSetMultimap",
274:       "com.google.common.collect.LinkedHashMultimap",
275:       "com.google.common.collect.AbstractMapEntry",
276:       "com.google.common.collect.ImmutableEntry",
277:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
278:       "com.google.common.collect.AbstractListMultimap",
279:       "com.google.common.collect.ArrayListMultimap",
280:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
281:       "com.google.common.collect.ImmutableCollection",
282:       "com.google.common.collect.RegularImmutableList",
283:       "com.google.common.collect.ObjectArrays",
284:       "com.google.common.collect.ImmutableList",
285:       "com.google.javascript.rhino.jstype.ModificationVisitor",
286:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
287:       "com.google.common.collect.ImmutableCollection$Builder",
288:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
289:       "com.google.common.collect.ImmutableList$Builder",
290:       "com.google.common.collect.UnmodifiableIterator",
291:       "com.google.common.collect.UnmodifiableListIterator",
292:       "com.google.common.collect.Iterators$1",
293:       "com.google.common.collect.Iterators$2",
294:       "com.google.common.collect.Iterators",
295:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
296:       "com.google.javascript.rhino.jstype.JSType$1",
297:       "com.google.javascript.rhino.jstype.JSType",
298:       "com.google.javascript.rhino.jstype.ObjectType",
299:       "com.google.javascript.rhino.jstype.ProxyObjectType",
300:       "com.google.javascript.rhino.jstype.TemplateType",
301:       "com.google.javascript.rhino.jstype.ValueType",
302:       "com.google.javascript.rhino.jstype.BooleanType",
303:       "com.google.javascript.rhino.jstype.NullType",
304:       "com.google.javascript.rhino.jstype.NumberType",
305:       "com.google.javascript.rhino.jstype.StringType",
306:       "com.google.javascript.rhino.jstype.UnknownType",
307:       "com.google.javascript.rhino.jstype.VoidType",
308:       "com.google.javascript.rhino.jstype.AllType",
309:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
310:       "com.google.common.collect.ImmutableMap",
311:       "com.google.common.collect.ImmutableBiMap",
312:       "com.google.common.collect.EmptyImmutableBiMap",
313:       "com.google.javascript.rhino.jstype.PropertyMap$1",
314:       "com.google.javascript.rhino.jstype.PropertyMap",
315:       "com.google.javascript.rhino.jstype.FunctionType",
316:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.collect.AbstractIndexedListIterator",
338:       "com.google.common.collect.Iterators$11",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.javascript.rhino.jstype.TemplatizedType",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.Iterables",
348:       "com.google.javascript.rhino.jstype.TernaryValue",
349:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
350:       "com.google.javascript.rhino.Node$AncestorIterable$1",
351:       "com.google.javascript.rhino.jstype.NamedType",
352:       "com.google.javascript.rhino.JSTypeExpression",
353:       "com.google.javascript.rhino.jstype.JSType$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
356:       "com.google.common.collect.Platform",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2"
363:     );
364:   }
365: }

[MASTER] 17:54:55.728 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node((-1792));
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotNull(node0);
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertEquals((-1792), node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isIn());

node0.setSourceEncodedPositionForTree(31);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertEquals((-1792), node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(31, node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(31, node0.getSourcePosition());

node0.removeProp((-1792));
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertEquals((-1792), node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(31, node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(31, node0.getSourcePosition());

boolean boolean0 = node0.wasEmptyNode();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(boolean0);
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertEquals((-1792), node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(31, node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(31, node0.getSourcePosition());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNotNull(iterable0);
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertEquals((-1792), node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(31, node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(31, node0.getSourcePosition());

boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

node0.setType(1860);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(31, node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals(1860, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(31, node0.getSourcePosition());

boolean boolean2 = node0.isTry();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(boolean2);
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(31, node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals(1860, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(31, node0.getSourcePosition());
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

Node node1 = Node.newString("kjy`Y/_^+M`DK");
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotNull(node1);
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.equals((Object)node0));

InputId inputId0 = node0.getInputId();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNull(inputId0);
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(31, node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals(1860, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(31, node0.getSourcePosition());
assertFalse(node0.equals((Object)node1));

Node node2 = Node.newString("16XeyoAj");
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertNotNull(node2);
assertNotSame(node2, node1);
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertTrue(node2.isString());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetElem());
assertFalse(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isName());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isExprResult());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isIn());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isScript());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

node2.detachChildren();
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertNotSame(node2, node1);
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertTrue(node2.isString());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetElem());
assertFalse(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isName());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isExprResult());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isIn());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isScript());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

node2.detachChildren();
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertNotSame(node2, node1);
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertTrue(node2.isString());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetElem());
assertFalse(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isName());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isExprResult());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isIn());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isScript());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
assertFalse(boolean3);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);

boolean boolean4 = node1.isEquivalentTo(node0, false, false, false);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(boolean4);
assertNotSame(node1, node2);
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(31, node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals(1860, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(31, node0.getSourcePosition());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);

node2.setInputId((InputId) null);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertNotSame(node2, node1);
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertTrue(node2.isString());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetElem());
assertFalse(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isName());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isExprResult());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isIn());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isScript());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

node2.setLineno(154);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertNotSame(node2, node1);
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertTrue(node2.isString());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetElem());
assertFalse(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isName());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertEquals(0, node2.getCharno());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isExprResult());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertEquals(154, node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isScript());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isTry());
assertEquals(630784, node2.getSourcePosition());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

boolean boolean5 = node0.isEquivalentTo(node1);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(boolean5);
assertNotSame(node1, node2);
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(31, node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals(1860, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(31, node0.getSourcePosition());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertEquals(0, node1.getChildCount());
assertEquals(40, node1.getType());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isNumber());
assertFalse(node1.isIn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));

boolean boolean6 = node2.isObjectLit();
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertFalse(boolean6);
assertNotSame(node2, node1);
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertTrue(node2.isString());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetElem());
assertFalse(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isName());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertEquals(0, node2.getCharno());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isExprResult());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertEquals(154, node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isScript());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isTry());
assertEquals(630784, node2.getSourcePosition());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean4);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

Node node3 = node0.getParent();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNull(node3);
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(31, node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals(1860, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(31, node0.getSourcePosition());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));

String string0 = node0.getQualifiedName();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertNull(string0);
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(31, node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals(1860, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(31, node0.getSourcePosition());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));

boolean boolean7 = node2.isAnd();
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertFalse(boolean7);
assertNotSame(node2, node1);
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertTrue(node2.isString());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetElem());
assertFalse(node2.hasChildren());
assertFalse(node2.isCall());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isName());
assertFalse(node2.isNot());
assertEquals(40, node2.getType());
assertEquals(0, node2.getCharno());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isExprResult());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertEquals(154, node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isScript());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isTry());
assertEquals(630784, node2.getSourcePosition());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean5);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));


* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/2
* Done!

* Computation finished
