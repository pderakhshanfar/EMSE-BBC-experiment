* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 20632
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 362527052
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 09:45:27.505 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 09:45:29.314 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V
[MASTER] 09:45:29.339 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: root-Branch in context: com.google.javascript.rhino.Node:<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V
[MASTER] 09:45:32.787 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 09:45:34.647 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 911
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 42719
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 82
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 3784
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 409
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 29
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 155
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 1715
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 510
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 22745
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 1715
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 1715
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 219
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 1715
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 86
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 2796
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 2779
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 1715
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - true: 223
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 698: 1472
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 846
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 133
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 3454
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 1088
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 9
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 3454
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 8921
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 409
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 3417
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 4356
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 3272
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 887
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 904
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 24821
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 6919
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 14
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 50
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 16805
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 4128
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 47
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 1625
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 2103
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 148
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 1114
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 223
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 42851
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 3000
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1168: 409
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 2056
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1169: 409
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 21106
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 745
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 2941
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 223
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 587
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 1069
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 3242
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 3454
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1164: 409
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 1460
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1165: 409
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 3705
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - false: 517
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 7895
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 63
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 101405
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 2941
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 517
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: root-Branch: 1934
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - true: 63
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 4199
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 4040
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 223
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 726
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 6471
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 133
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 8872
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 7090
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 2941
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 228
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 782
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 782
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 25165
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 782
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 183
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 183
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 183
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 133
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 2923
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 7397
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 10177
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 123
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 2098
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 7640
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.<init>(I)V: Line 2055: 47
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.<init>(I)V: Line 2057: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 223
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.<init>(I)V: Line 2056: 47
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 29468
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 8748
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 409
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 20669
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 119185
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 10457
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 52
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 3842
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 409
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 2077
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 736
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 2804
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 702
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 178
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 2423
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 1776
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 13
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 134
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 6967
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 5785
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 119185
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 9702
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 4356
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 3382
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 133
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 2484
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 232
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 4250
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 133
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 2923
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 433
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 19
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 9889
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 2667
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 887
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 325
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 517
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: root-Branch: 133
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 190
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 11464
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 47
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 13
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 550: 47
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 97
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 1934
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 782
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 782
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 7349
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 59913
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 223
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 4577
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 10177
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 90
Number of times BBC is called for com.google.javascript.rhino.Node.getCharno()I: Line 1144: 409
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 6243
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 5191
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 22878
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 2587
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 3272
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 9502
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 40804
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 9409
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 119185
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 16736
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 9985
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - true: 517
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 119185
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 2265
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 223
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 34421
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 30
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 31601
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - false: 63
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 4356
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 2265
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 2098
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 1
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 492
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 10992
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 6819
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 3454
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 29
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 2423
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 1088
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 101405
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 334
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 648
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 24778
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 47
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 6243
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 29453
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 1584
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 133
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 9860
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 133
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 422
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 644
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 491
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 2032
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 133
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 312
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 3802
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 911
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 54
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: Line 2135: 312
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 312
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 78
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - false: 47
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 1948
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 1179
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - false: 648
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 223
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 609
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - false: 10291
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 1332
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 434
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 223
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 2388
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 32804
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 2185
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 24024
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - true: 7
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 10200
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 4579
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 223
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 743
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 2221
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 836
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 1934
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: Line 2403: 312
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 405
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 2667
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 768
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 47
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 290
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 47
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 66767
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 14045
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 133
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 47
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 47
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 114
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 2587
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 409
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 9236
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 10318
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - false: 517
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 10654
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 10654
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 62709
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 10654
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 2722
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 10654
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 6063
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 3095
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 609
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 1191
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 5308
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 13761
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 6
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1732: 782
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.<init>(I)V: root-Branch: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 47
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 16847
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 3097
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 4373
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 1094
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 4072
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1720: 782
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 409
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1721: 782
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: Line 1616: 517
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 1934
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 4057
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 47
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 312
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: Line 312: 47
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 3639
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 133
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 1639
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 2726
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 1340
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 1625
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 1625
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 3454
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: root-Branch: 47
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 3097
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 109
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 18406
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - true: 3
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 1472
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 193
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 13487
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 1743
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 1096
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 524
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 648
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 2423
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 2923
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 3837
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 25153
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 54
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: Line 2351: 133
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 409
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 87
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 20894
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: Line 1221: 409
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 409
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 7397
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 34170
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 2074
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 960
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 1514
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 419
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 14882
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 5986
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 782
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 223
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - false: 3
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 334
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;)V: I9 Branch 284 IF_ACMPNE L194 - false: 184
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 1456
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 133
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 25028
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 182
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 2279
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 5887
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 14240
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 3408
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 133
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 1095
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 7397
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 409
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 5191
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 3097
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 5191
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 5191
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 8469
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 77
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 5191
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 26351
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 5191
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 5191
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 223
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 138
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 428
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 17745
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 17745
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 9
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 19771
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 1
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 1456
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 4923
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 62709
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 81
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 2636
Number of times BBC is called for com.google.javascript.rhino.Node.lookupProperty(I)Lcom/google/javascript/rhino/Node$PropListItem;: I12 Branch 98 IF_ICMPEQ L764 - false: 19
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 510
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 648
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 1934
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 1738
Number of times BBC is called for com.google.javascript.rhino.Node.getCharno()I: root-Branch: 409
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 1472
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 583
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 4423
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 517
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 16775
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 1048
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: Line 2084: 1934
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 10
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 648
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 13522
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 47
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: Line 2085: 1934
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 2856
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 1776
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 517
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 206
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 10295
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 851
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 86
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 2901
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 27299
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 4057
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 26154
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 4057
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 4356
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 274
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 1455
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 437
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 1639
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I70 Branch 122 IF_ICMPNE L966 - false: 9
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 24901
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - true: 3
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - false: 2098
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 23049
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 1715
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 5939
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 648
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 235
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 5110
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 2388
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 1744
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1978: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 24275
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 9177
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 2207
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1974: 47
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1977: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 38555
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 312
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 38555
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 6886
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 6908
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 37042
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 47
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 20960
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 312
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 133
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 2663
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 531: 911
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 530: 911
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 2423
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 4641
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 228
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - false: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 460
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 14
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 782
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 782
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 4103
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 517
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 2897
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 782
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1446: 648
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 147
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 85
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 16736
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 27728
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1137: 1191
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 2173
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1136: 1191
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 312
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 2221
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 100
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 201
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 37
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 29
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 316
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 38555
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 13522
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 3180
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 38555
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 1191
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 38555
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 38555
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 13586
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 104
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 2941
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 38555
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 109
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 38555
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 911
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 2941
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 2941
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 41604
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 2941
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 132
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 2941
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 17935
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 17935
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 19707
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 19908
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - true: 782
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 660: 2098
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 1215
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 662: 2098
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 3459
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 4913
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 44889
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: Line 2060: 133
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 517
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 12434
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 10457
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 1332
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 2923
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 12
Number of times BBC is called for com.google.javascript.rhino.Node.getProp(I)Ljava/lang/Object;: I9 Branch 104 IFNONNULL L814 - true: 19
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 26889
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 29644
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 2423
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 1358
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 782
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 718
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 47
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 47
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 10654
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 1390
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 23724
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 911
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 223
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 648
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 1019
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 648
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 47
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 255
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 6532
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 133
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 2610
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 409
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 2255
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 409
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 1715
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 5579
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 7598
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 34031
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: root-Branch: 911
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 466: 26
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 230
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 10654
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 1625
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 14532
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 1048
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 427
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 782
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 25909
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 2423
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 357
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 467: 26
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 468: 26
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 12
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1408: 223
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 18026
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 559
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1411: 223
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 37
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: root-Branch: 312
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 23255
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 66767
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1407: 223
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: root-Branch: 1191
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 133
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 133
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 133
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 133
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 133
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 133
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 133
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 55565
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 47
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 1547
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 2239
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 1048
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 28557
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 10363
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 119185
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - false: 409
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 10277
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - true: 524
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 517
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 47
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 312
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1173: 47
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1172: 47
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 3097
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 517
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 223
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 5130
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 7191
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 1757
Number of times BBC is called in total: 6710222
* Search finished after 604s and 778 generations, 314679 statements, best individual has fitness: 2624.0
* Minimizing test suite
[MASTER] 09:56:49.152 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 799
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 90%
* Total number of goals: 714
* Number of covered goals: 644
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 106
* Number of covered goals: 106
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 530
* Number of covered goals: 477
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 52%
* Total number of goals: 4536
* Number of covered goals: 2373
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 211
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 85%
* Total number of goals: 714
* Number of covered goals: 606
* Generated 890 tests with total length 11628
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 09:57:57.865 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6781166666666667% of time used, but only 38/890 tests minimized), falling back to using all assertions
[MASTER] 09:58:17.182 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 09:58:26.938 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 9 seconds more than allowed.
[MASTER] 09:58:36.073 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_90_1628157516030/com/google/javascript/rhino/Node_90_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_90_1628157516030/com/google/javascript/rhino/Node_90_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:36.073 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:36.073 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:36.076 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 656
[MASTER] 09:58:36.077 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_90_1628157516030/com/google/javascript/rhino/Node_90_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:36 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_90_tmp__ESTest extends Node_90_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(52);
22:       assertFalse(node0.isLabelName());
23:       assertFalse(node0.isAssign());
24:       assertFalse(node0.isAnd());
25:       assertFalse(node0.isWith());
26:       assertFalse(node0.isCast());
27:       assertFalse(node0.isExprResult());
28:       assertFalse(node0.isGetElem());
29:       assertFalse(node0.isTypeOf());
30:       assertEquals((-1), node0.getSourcePosition());
31:       assertFalse(node0.isDec());
32:       assertFalse(node0.isComma());
33:       assertFalse(node0.hasChildren());
34:       assertFalse(node0.isReturn());
35:       assertFalse(node0.isThis());
36:       assertFalse(node0.isNot());
37:       assertFalse(node0.isWhile());
38:       assertFalse(node0.isObjectLit());
39:       assertFalse(node0.isNumber());
40:       assertFalse(node0.isScript());
41:       assertFalse(node0.hasOneChild());
42:       assertFalse(node0.isGetProp());
43:       assertFalse(node0.isBlock());
44:       assertFalse(node0.isHook());
45:       assertFalse(node0.isContinue());
46:       assertFalse(node0.hasMoreThanOneChild());
47:       assertFalse(node0.isFalse());
48:       assertEquals((-1), node0.getLineno());
49:       assertFalse(node0.isIn());
50:       assertEquals(52, node0.getType());
51:       assertFalse(node0.isNE());
52:       assertFalse(node0.isThrow());
53:       assertFalse(node0.isSetterDef());
54:       assertFalse(node0.isInc());
55:       assertFalse(node0.isTry());
56:       assertFalse(node0.isVoid());
57:       assertFalse(node0.isFunction());
58:       assertFalse(node0.isRegExp());
59:       assertFalse(node0.isTrue());
60:       assertFalse(node0.isDebugger());
61:       assertFalse(node0.isDelProp());
62:       assertTrue(node0.isInstanceOf());
63:       assertFalse(node0.isIf());
64:       assertFalse(node0.isArrayLit());
65:       assertFalse(node0.isCatch());
66:       assertFalse(node0.isParamList());
67:       assertFalse(node0.isCase());
68:       assertFalse(node0.isFor());
69:       assertFalse(node0.isGetterDef());
70:       assertFalse(node0.isString());
71:       assertFalse(node0.isAdd());
72:       assertFalse(node0.isNew());
73:       assertFalse(node0.isSwitch());
74:       assertFalse(node0.isVar());
75:       assertEquals((-1), node0.getCharno());
76:       assertFalse(node0.isName());
77:       assertFalse(node0.isStringKey());
78:       assertFalse(node0.isBreak());
79:       assertFalse(node0.isCall());
80:       assertFalse(node0.isLabel());
81:       assertFalse(node0.isAssignAdd());
82:       assertFalse(node0.isOr());
83:       assertFalse(node0.isNull());
84:       assertEquals(0, node0.getChildCount());
85:       assertFalse(node0.isEmpty());
86:       assertFalse(node0.isDo());
87:       assertFalse(node0.isDefaultCase());
88:       assertEquals(47, Node.IS_DISPATCHER);
89:       assertEquals(56, Node.CHANGE_TIME);
90:       assertEquals(2, Node.POST_FLAG);
91:       assertEquals(37, Node.OPT_ARG_NAME);
92:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
93:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
94:       assertEquals(29, Node.JSDOC_INFO_PROP);
95:       assertEquals(46, Node.IS_NAMESPACE);
96:       assertEquals(51, Node.STATIC_SOURCE_FILE);
97:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
98:       assertEquals(57, Node.LAST_PROP);
99:       assertEquals(43, Node.IS_CONSTANT_NAME);
100:       assertEquals(36, Node.QUOTED_PROP);
101:       assertEquals(30, Node.VAR_ARGS_NAME);
102:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
103:       assertEquals(55, Node.INFERRED_FUNCTION);
104:       assertEquals(15, Node.NO_SIDE_EFFECTS);
105:       assertEquals(53, Node.INPUT_ID);
106:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
108:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
109:       assertEquals(50, Node.FREE_CALL);
110:       assertEquals(8, Node.FLAG_NO_THROWS);
111:       assertEquals(48, Node.DIRECTIVES);
112:       assertEquals(40, Node.ORIGINALNAME_PROP);
113:       assertEquals(39, Node.EMPTY_BLOCK);
114:       assertEquals(52, Node.LENGTH);
115:       assertEquals(54, Node.SLASH_V);
116:       assertEquals(57, Node.REFLECTED_OBJECT);
117:       assertEquals(49, Node.DIRECT_EVAL);
118:       assertEquals(1, Node.DECR_FLAG);
119:       assertEquals(32, Node.INCRDECR_PROP);
120:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
121:       assertEquals(4095, Node.COLUMN_MASK);
122:       assertEquals(12, Node.COLUMN_BITS);
123:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
124:       assertNotNull(node0);
125:       
126:       boolean boolean0 = node0.isQualifiedName();
127:       assertFalse(boolean0);
128:       assertFalse(node0.isLabelName());
129:       assertFalse(node0.isAssign());
130:       assertFalse(node0.isAnd());
131:       assertFalse(node0.isWith());
132:       assertFalse(node0.isCast());
133:       assertFalse(node0.isExprResult());
134:       assertFalse(node0.isGetElem());
135:       assertFalse(node0.isTypeOf());
136:       assertEquals((-1), node0.getSourcePosition());
137:       assertFalse(node0.isDec());
138:       assertFalse(node0.isComma());
139:       assertFalse(node0.hasChildren());
140:       assertFalse(node0.isReturn());
141:       assertFalse(node0.isThis());
142:       assertFalse(node0.isNot());
143:       assertFalse(node0.isWhile());
144:       assertFalse(node0.isObjectLit());
145:       assertFalse(node0.isNumber());
146:       assertFalse(node0.isScript());
147:       assertFalse(node0.hasOneChild());
148:       assertFalse(node0.isGetProp());
149:       assertFalse(node0.isBlock());
150:       assertFalse(node0.isHook());
151:       assertFalse(node0.isContinue());
152:       assertFalse(node0.hasMoreThanOneChild());
153:       assertFalse(node0.isFalse());
154:       assertEquals((-1), node0.getLineno());
155:       assertFalse(node0.isIn());
156:       assertEquals(52, node0.getType());
157:       assertFalse(node0.isNE());
158:       assertFalse(node0.isThrow());
159:       assertFalse(node0.isSetterDef());
160:       assertFalse(node0.isInc());
161:       assertFalse(node0.isTry());
162:       assertFalse(node0.isVoid());
163:       assertFalse(node0.isFunction());
164:       assertFalse(node0.isRegExp());
165:       assertFalse(node0.isTrue());
166:       assertFalse(node0.isDebugger());
167:       assertFalse(node0.isDelProp());
168:       assertTrue(node0.isInstanceOf());
169:       assertFalse(node0.isIf());
170:       assertFalse(node0.isArrayLit());
171:       assertFalse(node0.isCatch());
172:       assertFalse(node0.isParamList());
173:       assertFalse(node0.isCase());
174:       assertFalse(node0.isFor());
175:       assertFalse(node0.isGetterDef());
176:       assertFalse(node0.isString());
177:       assertFalse(node0.isAdd());
178:       assertFalse(node0.isNew());
179:       assertFalse(node0.isSwitch());
180:       assertFalse(node0.isVar());
181:       assertEquals((-1), node0.getCharno());
182:       assertFalse(node0.isName());
183:       assertFalse(node0.isStringKey());
184:       assertFalse(node0.isBreak());
185:       assertFalse(node0.isCall());
186:       assertFalse(node0.isLabel());
187:       assertFalse(node0.isAssignAdd());
188:       assertFalse(node0.isOr());
189:       assertFalse(node0.isNull());
190:       assertEquals(0, node0.getChildCount());
191:       assertFalse(node0.isEmpty());
192:       assertFalse(node0.isDo());
193:       assertFalse(node0.isDefaultCase());
194:       assertEquals(47, Node.IS_DISPATCHER);
195:       assertEquals(56, Node.CHANGE_TIME);
196:       assertEquals(2, Node.POST_FLAG);
197:       assertEquals(37, Node.OPT_ARG_NAME);
198:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
199:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
200:       assertEquals(29, Node.JSDOC_INFO_PROP);
201:       assertEquals(46, Node.IS_NAMESPACE);
202:       assertEquals(51, Node.STATIC_SOURCE_FILE);
203:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
204:       assertEquals(57, Node.LAST_PROP);
205:       assertEquals(43, Node.IS_CONSTANT_NAME);
206:       assertEquals(36, Node.QUOTED_PROP);
207:       assertEquals(30, Node.VAR_ARGS_NAME);
208:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
209:       assertEquals(55, Node.INFERRED_FUNCTION);
210:       assertEquals(15, Node.NO_SIDE_EFFECTS);
211:       assertEquals(53, Node.INPUT_ID);
212:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
213:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
214:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
215:       assertEquals(50, Node.FREE_CALL);
216:       assertEquals(8, Node.FLAG_NO_THROWS);
217:       assertEquals(48, Node.DIRECTIVES);
218:       assertEquals(40, Node.ORIGINALNAME_PROP);
219:       assertEquals(39, Node.EMPTY_BLOCK);
220:       assertEquals(52, Node.LENGTH);
221:       assertEquals(54, Node.SLASH_V);
222:       assertEquals(57, Node.REFLECTED_OBJECT);
223:       assertEquals(49, Node.DIRECT_EVAL);
224:       assertEquals(1, Node.DECR_FLAG);
225:       assertEquals(32, Node.INCRDECR_PROP);
226:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
227:       assertEquals(4095, Node.COLUMN_MASK);
228:       assertEquals(12, Node.COLUMN_BITS);
229:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
230:       
231:       node0.setVarArgs(false);
232:       assertFalse(node0.isLabelName());
233:       assertFalse(node0.isAssign());
234:       assertFalse(node0.isAnd());
235:       assertFalse(node0.isWith());
236:       assertFalse(node0.isCast());
237:       assertFalse(node0.isExprResult());
238:       assertFalse(node0.isGetElem());
239:       assertFalse(node0.isTypeOf());
240:       assertEquals((-1), node0.getSourcePosition());
241:       assertFalse(node0.isDec());
242:       assertFalse(node0.isComma());
243:       assertFalse(node0.hasChildren());
244:       assertFalse(node0.isReturn());
245:       assertFalse(node0.isThis());
246:       assertFalse(node0.isNot());
247:       assertFalse(node0.isWhile());
248:       assertFalse(node0.isObjectLit());
249:       assertFalse(node0.isNumber());
250:       assertFalse(node0.isScript());
251:       assertFalse(node0.hasOneChild());
252:       assertFalse(node0.isGetProp());
253:       assertFalse(node0.isBlock());
254:       assertFalse(node0.isHook());
255:       assertFalse(node0.isContinue());
256:       assertFalse(node0.hasMoreThanOneChild());
257:       assertFalse(node0.isFalse());
258:       assertEquals((-1), node0.getLineno());
259:       assertFalse(node0.isIn());
260:       assertEquals(52, node0.getType());
261:       assertFalse(node0.isNE());
262:       assertFalse(node0.isThrow());
263:       assertFalse(node0.isSetterDef());
264:       assertFalse(node0.isInc());
265:       assertFalse(node0.isTry());
266:       assertFalse(node0.isVoid());
267:       assertFalse(node0.isFunction());
268:       assertFalse(node0.isRegExp());
269:       assertFalse(node0.isTrue());
270:       assertFalse(node0.isDebugger());
271:       assertFalse(node0.isDelProp());
272:       assertTrue(node0.isInstanceOf());
273:       assertFalse(node0.isIf());
274:       assertFalse(node0.isArrayLit());
275:       assertFalse(node0.isCatch());
276:       assertFalse(node0.isParamList());
277:       assertFalse(node0.isCase());
278:       assertFalse(node0.isFor());
279:       assertFalse(node0.isGetterDef());
280:       assertFalse(node0.isString());
281:       assertFalse(node0.isAdd());
282:       assertFalse(node0.isNew());
283:       assertFalse(node0.isSwitch());
284:       assertFalse(node0.isVar());
285:       assertEquals((-1), node0.getCharno());
286:       assertFalse(node0.isName());
287:       assertFalse(node0.isStringKey());
288:       assertFalse(node0.isBreak());
289:       assertFalse(node0.isCall());
290:       assertFalse(node0.isLabel());
291:       assertFalse(node0.isAssignAdd());
292:       assertFalse(node0.isOr());
293:       assertFalse(node0.isNull());
294:       assertEquals(0, node0.getChildCount());
295:       assertFalse(node0.isEmpty());
296:       assertFalse(node0.isDo());
297:       assertFalse(node0.isDefaultCase());
298:       assertEquals(47, Node.IS_DISPATCHER);
299:       assertEquals(56, Node.CHANGE_TIME);
300:       assertEquals(2, Node.POST_FLAG);
301:       assertEquals(37, Node.OPT_ARG_NAME);
302:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
303:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
304:       assertEquals(29, Node.JSDOC_INFO_PROP);
305:       assertEquals(46, Node.IS_NAMESPACE);
306:       assertEquals(51, Node.STATIC_SOURCE_FILE);
307:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
308:       assertEquals(57, Node.LAST_PROP);
309:       assertEquals(43, Node.IS_CONSTANT_NAME);
310:       assertEquals(36, Node.QUOTED_PROP);
311:       assertEquals(30, Node.VAR_ARGS_NAME);
312:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
313:       assertEquals(55, Node.INFERRED_FUNCTION);
314:       assertEquals(15, Node.NO_SIDE_EFFECTS);
315:       assertEquals(53, Node.INPUT_ID);
316:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
317:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
318:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
319:       assertEquals(50, Node.FREE_CALL);
320:       assertEquals(8, Node.FLAG_NO_THROWS);
321:       assertEquals(48, Node.DIRECTIVES);
322:       assertEquals(40, Node.ORIGINALNAME_PROP);
323:       assertEquals(39, Node.EMPTY_BLOCK);
324:       assertEquals(52, Node.LENGTH);
325:       assertEquals(54, Node.SLASH_V);
326:       assertEquals(57, Node.REFLECTED_OBJECT);
327:       assertEquals(49, Node.DIRECT_EVAL);
328:       assertEquals(1, Node.DECR_FLAG);
329:       assertEquals(32, Node.INCRDECR_PROP);
330:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
331:       assertEquals(4095, Node.COLUMN_MASK);
332:       assertEquals(12, Node.COLUMN_BITS);
333:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
334:       
335:       int int0 = node0.getChangeTime();
336:       assertEquals(0, int0);
337:       assertFalse(node0.isLabelName());
338:       assertFalse(node0.isAssign());
339:       assertFalse(node0.isAnd());
340:       assertFalse(node0.isWith());
341:       assertFalse(node0.isCast());
342:       assertFalse(node0.isExprResult());
343:       assertFalse(node0.isGetElem());
344:       assertFalse(node0.isTypeOf());
345:       assertEquals((-1), node0.getSourcePosition());
346:       assertFalse(node0.isDec());
347:       assertFalse(node0.isComma());
348:       assertFalse(node0.hasChildren());
349:       assertFalse(node0.isReturn());
350:       assertFalse(node0.isThis());
351:       assertFalse(node0.isNot());
352:       assertFalse(node0.isWhile());
353:       assertFalse(node0.isObjectLit());
354:       assertFalse(node0.isNumber());
355:       assertFalse(node0.isScript());
356:       assertFalse(node0.hasOneChild());
357:       assertFalse(node0.isGetProp());
358:       assertFalse(node0.isBlock());
359:       assertFalse(node0.isHook());
360:       assertFalse(node0.isContinue());
361:       assertFalse(node0.hasMoreThanOneChild());
362:       assertFalse(node0.isFalse());
363:       assertEquals((-1), node0.getLineno());
364:       assertFalse(node0.isIn());
365:       assertEquals(52, node0.getType());
366:       assertFalse(node0.isNE());
367:       assertFalse(node0.isThrow());
368:       assertFalse(node0.isSetterDef());
369:       assertFalse(node0.isInc());
370:       assertFalse(node0.isTry());
371:       assertFalse(node0.isVoid());
372:       assertFalse(node0.isFunction());
373:       assertFalse(node0.isRegExp());
374:       assertFalse(node0.isTrue());
375:       assertFalse(node0.isDebugger());
376:       assertFalse(node0.isDelProp());
377:       assertTrue(node0.isInstanceOf());
378:       assertFalse(node0.isIf());
379:       assertFalse(node0.isArrayLit());
380:       assertFalse(node0.isCatch());
381:       assertFalse(node0.isParamList());
382:       assertFalse(node0.isCase());
383:       assertFalse(node0.isFor());
384:       assertFalse(node0.isGetterDef());
385:       assertFalse(node0.isString());
386:       assertFalse(node0.isAdd());
387:       assertFalse(node0.isNew());
388:       assertFalse(node0.isSwitch());
389:       assertFalse(node0.isVar());
390:       assertEquals((-1), node0.getCharno());
391:       assertFalse(node0.isName());
392:       assertFalse(node0.isStringKey());
393:       assertFalse(node0.isBreak());
394:       assertFalse(node0.isCall());
395:       assertFalse(node0.isLabel());
396:       assertFalse(node0.isAssignAdd());
397:       assertFalse(node0.isOr());
398:       assertFalse(node0.isNull());
399:       assertEquals(0, node0.getChildCount());
400:       assertFalse(node0.isEmpty());
401:       assertFalse(node0.isDo());
402:       assertFalse(node0.isDefaultCase());
403:       assertEquals(47, Node.IS_DISPATCHER);
404:       assertEquals(56, Node.CHANGE_TIME);
405:       assertEquals(2, Node.POST_FLAG);
406:       assertEquals(37, Node.OPT_ARG_NAME);
407:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
408:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
409:       assertEquals(29, Node.JSDOC_INFO_PROP);
410:       assertEquals(46, Node.IS_NAMESPACE);
411:       assertEquals(51, Node.STATIC_SOURCE_FILE);
412:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
413:       assertEquals(57, Node.LAST_PROP);
414:       assertEquals(43, Node.IS_CONSTANT_NAME);
415:       assertEquals(36, Node.QUOTED_PROP);
416:       assertEquals(30, Node.VAR_ARGS_NAME);
417:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
418:       assertEquals(55, Node.INFERRED_FUNCTION);
419:       assertEquals(15, Node.NO_SIDE_EFFECTS);
420:       assertEquals(53, Node.INPUT_ID);
421:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
422:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
423:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
424:       assertEquals(50, Node.FREE_CALL);
425:       assertEquals(8, Node.FLAG_NO_THROWS);
426:       assertEquals(48, Node.DIRECTIVES);
427:       assertEquals(40, Node.ORIGINALNAME_PROP);
428:       assertEquals(39, Node.EMPTY_BLOCK);
429:       assertEquals(52, Node.LENGTH);
430:       assertEquals(54, Node.SLASH_V);
431:       assertEquals(57, Node.REFLECTED_OBJECT);
432:       assertEquals(49, Node.DIRECT_EVAL);
433:       assertEquals(1, Node.DECR_FLAG);
434:       assertEquals(32, Node.INCRDECR_PROP);
435:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
436:       assertEquals(4095, Node.COLUMN_MASK);
437:       assertEquals(12, Node.COLUMN_BITS);
438:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
439:       
440:       int int1 = (-2266);
441:       String string0 = "NEW";
442:       Node node1 = Node.newString("NEW", 800, 0);
443:       assertFalse(node1.isGetElem());
444:       assertFalse(node1.isCast());
445:       assertFalse(node1.hasChildren());
446:       assertFalse(node1.isDec());
447:       assertFalse(node1.isTypeOf());
448:       assertFalse(node1.isNumber());
449:       assertFalse(node1.isAssign());
450:       assertFalse(node1.isScript());
451:       assertFalse(node1.isAssignAdd());
452:       assertFalse(node1.hasOneChild());
453:       assertFalse(node1.hasMoreThanOneChild());
454:       assertFalse(node1.isInstanceOf());
455:       assertFalse(node1.isReturn());
456:       assertFalse(node1.isWith());
457:       assertFalse(node1.isOr());
458:       assertFalse(node1.isExprResult());
459:       assertEquals(0, node1.getCharno());
460:       assertEquals(800, node1.getLineno());
461:       assertFalse(node1.isBreak());
462:       assertFalse(node1.isStringKey());
463:       assertFalse(node1.isHook());
464:       assertFalse(node1.isVar());
465:       assertFalse(node1.isThis());
466:       assertFalse(node1.isBlock());
467:       assertFalse(node1.isAdd());
468:       assertEquals(3276800, node1.getSourcePosition());
469:       assertFalse(node1.isNew());
470:       assertFalse(node1.isCase());
471:       assertTrue(node1.isString());
472:       assertFalse(node1.isDo());
473:       assertFalse(node1.isLabel());
474:       assertEquals(0, node1.getChildCount());
475:       assertFalse(node1.isParamList());
476:       assertFalse(node1.isSwitch());
477:       assertFalse(node1.isArrayLit());
478:       assertFalse(node1.isLabelName());
479:       assertFalse(node1.isEmpty());
480:       assertFalse(node1.isFor());
481:       assertFalse(node1.isGetterDef());
482:       assertFalse(node1.isDefaultCase());
483:       assertFalse(node1.isTry());
484:       assertFalse(node1.isCatch());
485:       assertFalse(node1.isIn());
486:       assertFalse(node1.isRegExp());
487:       assertFalse(node1.isTrue());
488:       assertFalse(node1.isNull());
489:       assertFalse(node1.isNE());
490:       assertFalse(node1.isIf());
491:       assertFalse(node1.isName());
492:       assertFalse(node1.isVoid());
493:       assertFalse(node1.isDelProp());
494:       assertFalse(node1.isCall());
495:       assertFalse(node1.isThrow());
496:       assertFalse(node1.isFalse());
497:       assertFalse(node1.isComma());
498:       assertFalse(node1.isSetterDef());
499:       assertFalse(node1.isInc());
500:       assertFalse(node1.isGetProp());
501:       assertFalse(node1.isWhile());
502:       assertFalse(node1.isObjectLit());
503:       assertFalse(node1.isContinue());
504:       assertFalse(node1.isAnd());
505:       assertEquals(40, node1.getType());
506:       assertFalse(node1.isNot());
507:       assertFalse(node1.isFunction());
508:       assertFalse(node1.isDebugger());
509:       assertEquals(46, Node.IS_NAMESPACE);
510:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
511:       assertEquals(37, Node.OPT_ARG_NAME);
512:       assertEquals(32, Node.INCRDECR_PROP);
513:       assertEquals(1, Node.DECR_FLAG);
514:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
515:       assertEquals(12, Node.COLUMN_BITS);
516:       assertEquals(47, Node.IS_DISPATCHER);
517:       assertEquals(2, Node.POST_FLAG);
518:       assertEquals(30, Node.VAR_ARGS_NAME);
519:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
520:       assertEquals(54, Node.SLASH_V);
521:       assertEquals(43, Node.IS_CONSTANT_NAME);
522:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
523:       assertEquals(50, Node.FREE_CALL);
524:       assertEquals(51, Node.STATIC_SOURCE_FILE);
525:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
526:       assertEquals(39, Node.EMPTY_BLOCK);
527:       assertEquals(48, Node.DIRECTIVES);
528:       assertEquals(40, Node.ORIGINALNAME_PROP);
529:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
530:       assertEquals(4095, Node.COLUMN_MASK);
531:       assertEquals(53, Node.INPUT_ID);
532:       assertEquals(52, Node.LENGTH);
533:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
534:       assertEquals(15, Node.NO_SIDE_EFFECTS);
535:       assertEquals(57, Node.LAST_PROP);
536:       assertEquals(29, Node.JSDOC_INFO_PROP);
537:       assertEquals(49, Node.DIRECT_EVAL);
538:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
539:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
540:       assertEquals(55, Node.INFERRED_FUNCTION);
541:       assertEquals(56, Node.CHANGE_TIME);
542:       assertEquals(36, Node.QUOTED_PROP);
543:       assertEquals(57, Node.REFLECTED_OBJECT);
544:       assertEquals(8, Node.FLAG_NO_THROWS);
545:       assertNotNull(node1);
546:       assertFalse(node1.equals((Object)node0));
547:       
548:       Node[] nodeArray0 = new Node[2];
549:       nodeArray0[0] = node1;
550:       nodeArray0[1] = node1;
551:       Iterable<Node> iterable0 = node1.children();
552:       assertFalse(node1.isGetElem());
553:       assertFalse(node1.isCast());
554:       assertFalse(node1.hasChildren());
555:       assertFalse(node1.isDec());
556:       assertFalse(node1.isTypeOf());
557:       assertFalse(node1.isNumber());
558:       assertFalse(node1.isAssign());
559:       assertFalse(node1.isScript());
560:       assertFalse(node1.isAssignAdd());
561:       assertFalse(node1.hasOneChild());
562:       assertFalse(node1.hasMoreThanOneChild());
563:       assertFalse(node1.isInstanceOf());
564:       assertFalse(node1.isReturn());
565:       assertFalse(node1.isWith());
566:       assertFalse(node1.isOr());
567:       assertFalse(node1.isExprResult());
568:       assertEquals(0, node1.getCharno());
569:       assertEquals(800, node1.getLineno());
570:       assertFalse(node1.isBreak());
571:       assertFalse(node1.isStringKey());
572:       assertFalse(node1.isHook());
573:       assertFalse(node1.isVar());
574:       assertFalse(node1.isThis());
575:       assertFalse(node1.isBlock());
576:       assertFalse(node1.isAdd());
577:       assertEquals(3276800, node1.getSourcePosition());
578:       assertFalse(node1.isNew());
579:       assertFalse(node1.isCase());
580:       assertTrue(node1.isString());
581:       assertFalse(node1.isDo());
582:       assertFalse(node1.isLabel());
583:       assertEquals(0, node1.getChildCount());
584:       assertFalse(node1.isParamList());
585:       assertFalse(node1.isSwitch());
586:       assertFalse(node1.isArrayLit());
587:       assertFalse(node1.isLabelName());
588:       assertFalse(node1.isEmpty());
589:       assertFalse(node1.isFor());
590:       assertFalse(node1.isGetterDef());
591:       assertFalse(node1.isDefaultCase());
592:       assertFalse(node1.isTry());
593:       assertFalse(node1.isCatch());
594:       assertFalse(node1.isIn());
595:       assertFalse(node1.isRegExp());
596:       assertFalse(node1.isTrue());
597:       assertFalse(node1.isNull());
598:       assertFalse(node1.isNE());
599:       assertFalse(node1.isIf());
600:       assertFalse(node1.isName());
601:       assertFalse(node1.isVoid());
602:       assertFalse(node1.isDelProp());
603:       assertFalse(node1.isCall());
604:       assertFalse(node1.isThrow());
605:       assertFalse(node1.isFalse());
606:       assertFalse(node1.isComma());
607:       assertFalse(node1.isSetterDef());
608:       assertFalse(node1.isInc());
609:       assertFalse(node1.isGetProp());
610:       assertFalse(node1.isWhile());
611:       assertFalse(node1.isObjectLit());
612:       assertFalse(node1.isContinue());
613:       assertFalse(node1.isAnd());
614:       assertEquals(40, node1.getType());
615:       assertFalse(node1.isNot());
616:       assertFalse(node1.isFunction());
617:       assertFalse(node1.isDebugger());
618:       assertEquals(46, Node.IS_NAMESPACE);
619:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
620:       assertEquals(37, Node.OPT_ARG_NAME);
621:       assertEquals(32, Node.INCRDECR_PROP);
622:       assertEquals(1, Node.DECR_FLAG);
623:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
624:       assertEquals(12, Node.COLUMN_BITS);
625:       assertEquals(47, Node.IS_DISPATCHER);
626:       assertEquals(2, Node.POST_FLAG);
627:       assertEquals(30, Node.VAR_ARGS_NAME);
628:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
629:       assertEquals(54, Node.SLASH_V);
630:       assertEquals(43, Node.IS_CONSTANT_NAME);
631:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
632:       assertEquals(50, Node.FREE_CALL);
633:       assertEquals(51, Node.STATIC_SOURCE_FILE);
634:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
635:       assertEquals(39, Node.EMPTY_BLOCK);
636:       assertEquals(48, Node.DIRECTIVES);
637:       assertEquals(40, Node.ORIGINALNAME_PROP);
638:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
639:       assertEquals(4095, Node.COLUMN_MASK);
640:       assertEquals(53, Node.INPUT_ID);
641:       assertEquals(52, Node.LENGTH);
642:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
643:       assertEquals(15, Node.NO_SIDE_EFFECTS);
644:       assertEquals(57, Node.LAST_PROP);
645:       assertEquals(29, Node.JSDOC_INFO_PROP);
646:       assertEquals(49, Node.DIRECT_EVAL);
647:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
648:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
649:       assertEquals(55, Node.INFERRED_FUNCTION);
650:       assertEquals(56, Node.CHANGE_TIME);
651:       assertEquals(36, Node.QUOTED_PROP);
652:       assertEquals(57, Node.REFLECTED_OBJECT);
653:       assertEquals(8, Node.FLAG_NO_THROWS);
654:       assertNotNull(iterable0);
655:       assertFalse(node1.equals((Object)node0));
656:       assertFalse(iterable0.contains(node1));
657:       
658:       Node node2 = null;
659:       try {
660:         node2 = new Node(2, nodeArray0, 8, (-436));
661:         fail("Expecting exception: IllegalArgumentException");
662:       
663:       } catch(IllegalArgumentException e) {
664:          //
665:          // no message in exception (getMessage() returned null)
666:          //
667:          verifyException("com.google.common.base.Preconditions", e);
668:       }
669:   }
670: }
RegularFileObject[/tmp/EvoSuite_90_1628157516030/com/google/javascript/rhino/Node_90_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:36 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_90_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_90_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_90_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.common.collect.Sets",
333:       "com.google.common.collect.AbstractIndexedListIterator",
334:       "com.google.common.collect.Iterators$11",
335:       "com.google.common.base.Objects",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.Iterables",
343:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.common.collect.ImmutableSet",
351:       "com.google.common.collect.EmptyImmutableSet",
352:       "com.google.common.collect.Platform",
353:       "com.google.javascript.rhino.JSTypeExpression",
354:       "com.google.javascript.rhino.jstype.NamedType",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
356:       "com.google.javascript.rhino.jstype.NamespaceType",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
362:       "com.google.javascript.rhino.jstype.TernaryValue",
363:       "com.google.javascript.rhino.jstype.JSType$2",
364:       "com.google.javascript.rhino.jstype.JSType$TypePair"
365:     );
366:   }
367: }

[MASTER] 09:58:36.085 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(52);
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertEquals(52, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertTrue(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotNull(node0);

boolean boolean0 = node0.isQualifiedName();
assertFalse(boolean0);
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertEquals(52, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertTrue(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

node0.setVarArgs(false);
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertEquals(52, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertTrue(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

int int0 = node0.getChangeTime();
assertEquals(0, int0);
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertFalse(node0.isWhile());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertEquals(52, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertTrue(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isVar());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

int int1 = (-2266);
String string0 = "NEW";
Node node1 = Node.newString("NEW", 800, 0);
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssign());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getCharno());
assertEquals(800, node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertEquals(3276800, node1.getSourcePosition());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

Node[] nodeArray0 = new Node[2];
nodeArray0[0] = node1;
nodeArray0[1] = node1;
Iterable<Node> iterable0 = node1.children();
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssign());
assertFalse(node1.isScript());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWith());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getCharno());
assertEquals(800, node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isStringKey());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertEquals(3276800, node1.getSourcePosition());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertTrue(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node0));
assertFalse(iterable0.contains(node1));

Node node2 = new Node(2, nodeArray0, 8, (-436));

[MASTER] 09:58:40.767 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_115_1628157520740/com/google/javascript/rhino/Node_115_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_115_1628157520740/com/google/javascript/rhino/Node_115_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:40.767 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:40.767 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:40.768 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 236
[MASTER] 09:58:40.769 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_115_1628157520740/com/google/javascript/rhino/Node_115_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:40 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.testdata.EvoSuiteFile;
15: import org.evosuite.runtime.testdata.FileSystemHandling;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_115_tmp__ESTest extends Node_115_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
24:       assertNotNull(fileSystemHandling0);
25:       
26:       Node node0 = Node.newString("");
27:       assertFalse(node0.isIf());
28:       assertFalse(node0.isNE());
29:       assertFalse(node0.isFor());
30:       assertFalse(node0.isGetterDef());
31:       assertFalse(node0.isArrayLit());
32:       assertFalse(node0.isVoid());
33:       assertFalse(node0.isDelProp());
34:       assertFalse(node0.isDefaultCase());
35:       assertFalse(node0.isInc());
36:       assertFalse(node0.isTrue());
37:       assertEquals(40, node0.getType());
38:       assertFalse(node0.isFunction());
39:       assertFalse(node0.isIn());
40:       assertFalse(node0.isThrow());
41:       assertFalse(node0.isEmpty());
42:       assertFalse(node0.isNull());
43:       assertFalse(node0.isFalse());
44:       assertFalse(node0.isComma());
45:       assertFalse(node0.isAnd());
46:       assertFalse(node0.isCall());
47:       assertFalse(node0.isName());
48:       assertFalse(node0.isBreak());
49:       assertFalse(node0.isWhile());
50:       assertFalse(node0.isExprResult());
51:       assertFalse(node0.isObjectLit());
52:       assertFalse(node0.isDebugger());
53:       assertFalse(node0.isNot());
54:       assertFalse(node0.isGetProp());
55:       assertFalse(node0.isTypeOf());
56:       assertEquals((-1), node0.getSourcePosition());
57:       assertFalse(node0.hasChildren());
58:       assertFalse(node0.isNumber());
59:       assertFalse(node0.isLabel());
60:       assertFalse(node0.isReturn());
61:       assertFalse(node0.isDec());
62:       assertFalse(node0.isAssign());
63:       assertFalse(node0.isOr());
64:       assertFalse(node0.hasMoreThanOneChild());
65:       assertFalse(node0.isContinue());
66:       assertFalse(node0.isCast());
67:       assertFalse(node0.isGetElem());
68:       assertEquals((-1), node0.getLineno());
69:       assertFalse(node0.isLabelName());
70:       assertFalse(node0.isVar());
71:       assertFalse(node0.isNew());
72:       assertFalse(node0.isAdd());
73:       assertFalse(node0.isAssignAdd());
74:       assertFalse(node0.isDo());
75:       assertFalse(node0.isSetterDef());
76:       assertFalse(node0.isThis());
77:       assertFalse(node0.isParamList());
78:       assertEquals(0, node0.getChildCount());
79:       assertFalse(node0.isStringKey());
80:       assertFalse(node0.isInstanceOf());
81:       assertFalse(node0.isCatch());
82:       assertFalse(node0.isScript());
83:       assertFalse(node0.isRegExp());
84:       assertFalse(node0.isSwitch());
85:       assertFalse(node0.isBlock());
86:       assertFalse(node0.isWith());
87:       assertEquals((-1), node0.getCharno());
88:       assertFalse(node0.isHook());
89:       assertFalse(node0.isCase());
90:       assertFalse(node0.isTry());
91:       assertTrue(node0.isString());
92:       assertFalse(node0.hasOneChild());
93:       assertEquals(12, Node.COLUMN_BITS);
94:       assertEquals(57, Node.LAST_PROP);
95:       assertEquals(32, Node.INCRDECR_PROP);
96:       assertEquals(15, Node.NO_SIDE_EFFECTS);
97:       assertEquals(49, Node.DIRECT_EVAL);
98:       assertEquals(1, Node.DECR_FLAG);
99:       assertEquals(54, Node.SLASH_V);
100:       assertEquals(56, Node.CHANGE_TIME);
101:       assertEquals(46, Node.IS_NAMESPACE);
102:       assertEquals(52, Node.LENGTH);
103:       assertEquals(57, Node.REFLECTED_OBJECT);
104:       assertEquals(51, Node.STATIC_SOURCE_FILE);
105:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
106:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
108:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
109:       assertEquals(37, Node.OPT_ARG_NAME);
110:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
111:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
112:       assertEquals(4095, Node.COLUMN_MASK);
113:       assertEquals(55, Node.INFERRED_FUNCTION);
114:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
115:       assertEquals(48, Node.DIRECTIVES);
116:       assertEquals(8, Node.FLAG_NO_THROWS);
117:       assertEquals(39, Node.EMPTY_BLOCK);
118:       assertEquals(53, Node.INPUT_ID);
119:       assertEquals(43, Node.IS_CONSTANT_NAME);
120:       assertEquals(50, Node.FREE_CALL);
121:       assertEquals(36, Node.QUOTED_PROP);
122:       assertEquals(40, Node.ORIGINALNAME_PROP);
123:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
124:       assertEquals(29, Node.JSDOC_INFO_PROP);
125:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
126:       assertEquals(47, Node.IS_DISPATCHER);
127:       assertEquals(2, Node.POST_FLAG);
128:       assertEquals(30, Node.VAR_ARGS_NAME);
129:       assertNotNull(node0);
130:       
131:       int int0 = 2453;
132:       Iterable<Node> iterable0 = node0.children();
133:       assertFalse(node0.isIf());
134:       assertFalse(node0.isNE());
135:       assertFalse(node0.isFor());
136:       assertFalse(node0.isGetterDef());
137:       assertFalse(node0.isArrayLit());
138:       assertFalse(node0.isVoid());
139:       assertFalse(node0.isDelProp());
140:       assertFalse(node0.isDefaultCase());
141:       assertFalse(node0.isInc());
142:       assertFalse(node0.isTrue());
143:       assertEquals(40, node0.getType());
144:       assertFalse(node0.isFunction());
145:       assertFalse(node0.isIn());
146:       assertFalse(node0.isThrow());
147:       assertFalse(node0.isEmpty());
148:       assertFalse(node0.isNull());
149:       assertFalse(node0.isFalse());
150:       assertFalse(node0.isComma());
151:       assertFalse(node0.isAnd());
152:       assertFalse(node0.isCall());
153:       assertFalse(node0.isName());
154:       assertFalse(node0.isBreak());
155:       assertFalse(node0.isWhile());
156:       assertFalse(node0.isExprResult());
157:       assertFalse(node0.isObjectLit());
158:       assertFalse(node0.isDebugger());
159:       assertFalse(node0.isNot());
160:       assertFalse(node0.isGetProp());
161:       assertFalse(node0.isTypeOf());
162:       assertEquals((-1), node0.getSourcePosition());
163:       assertFalse(node0.hasChildren());
164:       assertFalse(node0.isNumber());
165:       assertFalse(node0.isLabel());
166:       assertFalse(node0.isReturn());
167:       assertFalse(node0.isDec());
168:       assertFalse(node0.isAssign());
169:       assertFalse(node0.isOr());
170:       assertFalse(node0.hasMoreThanOneChild());
171:       assertFalse(node0.isContinue());
172:       assertFalse(node0.isCast());
173:       assertFalse(node0.isGetElem());
174:       assertEquals((-1), node0.getLineno());
175:       assertFalse(node0.isLabelName());
176:       assertFalse(node0.isVar());
177:       assertFalse(node0.isNew());
178:       assertFalse(node0.isAdd());
179:       assertFalse(node0.isAssignAdd());
180:       assertFalse(node0.isDo());
181:       assertFalse(node0.isSetterDef());
182:       assertFalse(node0.isThis());
183:       assertFalse(node0.isParamList());
184:       assertEquals(0, node0.getChildCount());
185:       assertFalse(node0.isStringKey());
186:       assertFalse(node0.isInstanceOf());
187:       assertFalse(node0.isCatch());
188:       assertFalse(node0.isScript());
189:       assertFalse(node0.isRegExp());
190:       assertFalse(node0.isSwitch());
191:       assertFalse(node0.isBlock());
192:       assertFalse(node0.isWith());
193:       assertEquals((-1), node0.getCharno());
194:       assertFalse(node0.isHook());
195:       assertFalse(node0.isCase());
196:       assertFalse(node0.isTry());
197:       assertTrue(node0.isString());
198:       assertFalse(node0.hasOneChild());
199:       assertEquals(12, Node.COLUMN_BITS);
200:       assertEquals(57, Node.LAST_PROP);
201:       assertEquals(32, Node.INCRDECR_PROP);
202:       assertEquals(15, Node.NO_SIDE_EFFECTS);
203:       assertEquals(49, Node.DIRECT_EVAL);
204:       assertEquals(1, Node.DECR_FLAG);
205:       assertEquals(54, Node.SLASH_V);
206:       assertEquals(56, Node.CHANGE_TIME);
207:       assertEquals(46, Node.IS_NAMESPACE);
208:       assertEquals(52, Node.LENGTH);
209:       assertEquals(57, Node.REFLECTED_OBJECT);
210:       assertEquals(51, Node.STATIC_SOURCE_FILE);
211:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
212:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
213:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
214:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
215:       assertEquals(37, Node.OPT_ARG_NAME);
216:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
217:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
218:       assertEquals(4095, Node.COLUMN_MASK);
219:       assertEquals(55, Node.INFERRED_FUNCTION);
220:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
221:       assertEquals(48, Node.DIRECTIVES);
222:       assertEquals(8, Node.FLAG_NO_THROWS);
223:       assertEquals(39, Node.EMPTY_BLOCK);
224:       assertEquals(53, Node.INPUT_ID);
225:       assertEquals(43, Node.IS_CONSTANT_NAME);
226:       assertEquals(50, Node.FREE_CALL);
227:       assertEquals(36, Node.QUOTED_PROP);
228:       assertEquals(40, Node.ORIGINALNAME_PROP);
229:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
230:       assertEquals(29, Node.JSDOC_INFO_PROP);
231:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
232:       assertEquals(47, Node.IS_DISPATCHER);
233:       assertEquals(2, Node.POST_FLAG);
234:       assertEquals(30, Node.VAR_ARGS_NAME);
235:       assertNotNull(iterable0);
236:       assertFalse(iterable0.contains(node0));
237:       
238:       boolean boolean0 = node0.isQualifiedName();
239:       assertFalse(boolean0);
240:       assertFalse(node0.isIf());
241:       assertFalse(node0.isNE());
242:       assertFalse(node0.isFor());
243:       assertFalse(node0.isGetterDef());
244:       assertFalse(node0.isArrayLit());
245:       assertFalse(node0.isVoid());
246:       assertFalse(node0.isDelProp());
247:       assertFalse(node0.isDefaultCase());
248:       assertFalse(node0.isInc());
249:       assertFalse(node0.isTrue());
250:       assertEquals(40, node0.getType());
251:       assertFalse(node0.isFunction());
252:       assertFalse(node0.isIn());
253:       assertFalse(node0.isThrow());
254:       assertFalse(node0.isEmpty());
255:       assertFalse(node0.isNull());
256:       assertFalse(node0.isFalse());
257:       assertFalse(node0.isComma());
258:       assertFalse(node0.isAnd());
259:       assertFalse(node0.isCall());
260:       assertFalse(node0.isName());
261:       assertFalse(node0.isBreak());
262:       assertFalse(node0.isWhile());
263:       assertFalse(node0.isExprResult());
264:       assertFalse(node0.isObjectLit());
265:       assertFalse(node0.isDebugger());
266:       assertFalse(node0.isNot());
267:       assertFalse(node0.isGetProp());
268:       assertFalse(node0.isTypeOf());
269:       assertEquals((-1), node0.getSourcePosition());
270:       assertFalse(node0.hasChildren());
271:       assertFalse(node0.isNumber());
272:       assertFalse(node0.isLabel());
273:       assertFalse(node0.isReturn());
274:       assertFalse(node0.isDec());
275:       assertFalse(node0.isAssign());
276:       assertFalse(node0.isOr());
277:       assertFalse(node0.hasMoreThanOneChild());
278:       assertFalse(node0.isContinue());
279:       assertFalse(node0.isCast());
280:       assertFalse(node0.isGetElem());
281:       assertEquals((-1), node0.getLineno());
282:       assertFalse(node0.isLabelName());
283:       assertFalse(node0.isVar());
284:       assertFalse(node0.isNew());
285:       assertFalse(node0.isAdd());
286:       assertFalse(node0.isAssignAdd());
287:       assertFalse(node0.isDo());
288:       assertFalse(node0.isSetterDef());
289:       assertFalse(node0.isThis());
290:       assertFalse(node0.isParamList());
291:       assertEquals(0, node0.getChildCount());
292:       assertFalse(node0.isStringKey());
293:       assertFalse(node0.isInstanceOf());
294:       assertFalse(node0.isCatch());
295:       assertFalse(node0.isScript());
296:       assertFalse(node0.isRegExp());
297:       assertFalse(node0.isSwitch());
298:       assertFalse(node0.isBlock());
299:       assertFalse(node0.isWith());
300:       assertEquals((-1), node0.getCharno());
301:       assertFalse(node0.isHook());
302:       assertFalse(node0.isCase());
303:       assertFalse(node0.isTry());
304:       assertTrue(node0.isString());
305:       assertFalse(node0.hasOneChild());
306:       assertEquals(12, Node.COLUMN_BITS);
307:       assertEquals(57, Node.LAST_PROP);
308:       assertEquals(32, Node.INCRDECR_PROP);
309:       assertEquals(15, Node.NO_SIDE_EFFECTS);
310:       assertEquals(49, Node.DIRECT_EVAL);
311:       assertEquals(1, Node.DECR_FLAG);
312:       assertEquals(54, Node.SLASH_V);
313:       assertEquals(56, Node.CHANGE_TIME);
314:       assertEquals(46, Node.IS_NAMESPACE);
315:       assertEquals(52, Node.LENGTH);
316:       assertEquals(57, Node.REFLECTED_OBJECT);
317:       assertEquals(51, Node.STATIC_SOURCE_FILE);
318:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
319:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
320:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
321:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
322:       assertEquals(37, Node.OPT_ARG_NAME);
323:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
324:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
325:       assertEquals(4095, Node.COLUMN_MASK);
326:       assertEquals(55, Node.INFERRED_FUNCTION);
327:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
328:       assertEquals(48, Node.DIRECTIVES);
329:       assertEquals(8, Node.FLAG_NO_THROWS);
330:       assertEquals(39, Node.EMPTY_BLOCK);
331:       assertEquals(53, Node.INPUT_ID);
332:       assertEquals(43, Node.IS_CONSTANT_NAME);
333:       assertEquals(50, Node.FREE_CALL);
334:       assertEquals(36, Node.QUOTED_PROP);
335:       assertEquals(40, Node.ORIGINALNAME_PROP);
336:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
337:       assertEquals(29, Node.JSDOC_INFO_PROP);
338:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
339:       assertEquals(47, Node.IS_DISPATCHER);
340:       assertEquals(2, Node.POST_FLAG);
341:       assertEquals(30, Node.VAR_ARGS_NAME);
342:       
343:       boolean boolean1 = node0.isUnscopedQualifiedName();
344:       assertFalse(boolean1);
345:       assertFalse(node0.isIf());
346:       assertFalse(node0.isNE());
347:       assertFalse(node0.isFor());
348:       assertFalse(node0.isGetterDef());
349:       assertFalse(node0.isArrayLit());
350:       assertFalse(node0.isVoid());
351:       assertFalse(node0.isDelProp());
352:       assertFalse(node0.isDefaultCase());
353:       assertFalse(node0.isInc());
354:       assertFalse(node0.isTrue());
355:       assertEquals(40, node0.getType());
356:       assertFalse(node0.isFunction());
357:       assertFalse(node0.isIn());
358:       assertFalse(node0.isThrow());
359:       assertFalse(node0.isEmpty());
360:       assertFalse(node0.isNull());
361:       assertFalse(node0.isFalse());
362:       assertFalse(node0.isComma());
363:       assertFalse(node0.isAnd());
364:       assertFalse(node0.isCall());
365:       assertFalse(node0.isName());
366:       assertFalse(node0.isBreak());
367:       assertFalse(node0.isWhile());
368:       assertFalse(node0.isExprResult());
369:       assertFalse(node0.isObjectLit());
370:       assertFalse(node0.isDebugger());
371:       assertFalse(node0.isNot());
372:       assertFalse(node0.isGetProp());
373:       assertFalse(node0.isTypeOf());
374:       assertEquals((-1), node0.getSourcePosition());
375:       assertFalse(node0.hasChildren());
376:       assertFalse(node0.isNumber());
377:       assertFalse(node0.isLabel());
378:       assertFalse(node0.isReturn());
379:       assertFalse(node0.isDec());
380:       assertFalse(node0.isAssign());
381:       assertFalse(node0.isOr());
382:       assertFalse(node0.hasMoreThanOneChild());
383:       assertFalse(node0.isContinue());
384:       assertFalse(node0.isCast());
385:       assertFalse(node0.isGetElem());
386:       assertEquals((-1), node0.getLineno());
387:       assertFalse(node0.isLabelName());
388:       assertFalse(node0.isVar());
389:       assertFalse(node0.isNew());
390:       assertFalse(node0.isAdd());
391:       assertFalse(node0.isAssignAdd());
392:       assertFalse(node0.isDo());
393:       assertFalse(node0.isSetterDef());
394:       assertFalse(node0.isThis());
395:       assertFalse(node0.isParamList());
396:       assertEquals(0, node0.getChildCount());
397:       assertFalse(node0.isStringKey());
398:       assertFalse(node0.isInstanceOf());
399:       assertFalse(node0.isCatch());
400:       assertFalse(node0.isScript());
401:       assertFalse(node0.isRegExp());
402:       assertFalse(node0.isSwitch());
403:       assertFalse(node0.isBlock());
404:       assertFalse(node0.isWith());
405:       assertEquals((-1), node0.getCharno());
406:       assertFalse(node0.isHook());
407:       assertFalse(node0.isCase());
408:       assertFalse(node0.isTry());
409:       assertTrue(node0.isString());
410:       assertFalse(node0.hasOneChild());
411:       assertEquals(12, Node.COLUMN_BITS);
412:       assertEquals(57, Node.LAST_PROP);
413:       assertEquals(32, Node.INCRDECR_PROP);
414:       assertEquals(15, Node.NO_SIDE_EFFECTS);
415:       assertEquals(49, Node.DIRECT_EVAL);
416:       assertEquals(1, Node.DECR_FLAG);
417:       assertEquals(54, Node.SLASH_V);
418:       assertEquals(56, Node.CHANGE_TIME);
419:       assertEquals(46, Node.IS_NAMESPACE);
420:       assertEquals(52, Node.LENGTH);
421:       assertEquals(57, Node.REFLECTED_OBJECT);
422:       assertEquals(51, Node.STATIC_SOURCE_FILE);
423:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
424:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
425:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
426:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
427:       assertEquals(37, Node.OPT_ARG_NAME);
428:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
429:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
430:       assertEquals(4095, Node.COLUMN_MASK);
431:       assertEquals(55, Node.INFERRED_FUNCTION);
432:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
433:       assertEquals(48, Node.DIRECTIVES);
434:       assertEquals(8, Node.FLAG_NO_THROWS);
435:       assertEquals(39, Node.EMPTY_BLOCK);
436:       assertEquals(53, Node.INPUT_ID);
437:       assertEquals(43, Node.IS_CONSTANT_NAME);
438:       assertEquals(50, Node.FREE_CALL);
439:       assertEquals(36, Node.QUOTED_PROP);
440:       assertEquals(40, Node.ORIGINALNAME_PROP);
441:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
442:       assertEquals(29, Node.JSDOC_INFO_PROP);
443:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
444:       assertEquals(47, Node.IS_DISPATCHER);
445:       assertEquals(2, Node.POST_FLAG);
446:       assertEquals(30, Node.VAR_ARGS_NAME);
447:       assertTrue(boolean1 == boolean0);
448:       
449:       // Undeclared exception!
450:       try { 
451:         node0.getExistingIntProp(831);
452:         fail("Expecting exception: IllegalStateException");
453:       
454:       } catch(IllegalStateException e) {
455:          //
456:          // missing prop: 831
457:          //
458:          verifyException("com.google.javascript.rhino.Node", e);
459:       }
460:   }
461: }
RegularFileObject[/tmp/EvoSuite_115_1628157520740/com/google/javascript/rhino/Node_115_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:40 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_115_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_115_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_115_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.common.collect.Sets",
333:       "com.google.common.collect.AbstractIndexedListIterator",
334:       "com.google.common.collect.Iterators$11",
335:       "com.google.common.base.Objects",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.Iterables",
343:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.common.collect.ImmutableSet",
351:       "com.google.common.collect.EmptyImmutableSet",
352:       "com.google.common.collect.Platform",
353:       "com.google.javascript.rhino.JSTypeExpression",
354:       "com.google.javascript.rhino.jstype.NamedType",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
356:       "com.google.javascript.rhino.jstype.NamespaceType",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
362:       "com.google.javascript.rhino.jstype.TernaryValue",
363:       "com.google.javascript.rhino.jstype.JSType$2",
364:       "com.google.javascript.rhino.jstype.JSType$TypePair"
365:     );
366:   }
367: }

[MASTER] 09:58:40.774 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

Node node0 = Node.newString("");
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(node0);

int int0 = 2453;
Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));

boolean boolean0 = node0.isQualifiedName();
assertFalse(boolean0);
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean1 = node0.isUnscopedQualifiedName();
assertFalse(boolean1);
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertTrue(boolean1 == boolean0);

node0.getExistingIntProp(831);

[MASTER] 09:58:44.740 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_130_1628157524381/com/google/javascript/rhino/Node_130_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_130_1628157524381/com/google/javascript/rhino/Node_130_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:44.740 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:44.740 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:44.741 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 833
[MASTER] 09:58:44.742 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_130_1628157524381/com/google/javascript/rhino/Node_130_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:44 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.StaticSourceFile;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.FileSystemHandling;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_130_tmp__ESTest extends Node_130_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
24:       assertNotNull(fileSystemHandling0);
25:       
26:       Node node0 = Node.newNumber((-1759.960241), 47, 47);
27:       assertFalse(node0.isTry());
28:       assertFalse(node0.isArrayLit());
29:       assertFalse(node0.isVoid());
30:       assertFalse(node0.isEmpty());
31:       assertFalse(node0.isIf());
32:       assertFalse(node0.isNE());
33:       assertFalse(node0.isTrue());
34:       assertFalse(node0.isGetterDef());
35:       assertFalse(node0.isDebugger());
36:       assertFalse(node0.isIn());
37:       assertFalse(node0.isParamList());
38:       assertFalse(node0.isSetterDef());
39:       assertFalse(node0.isDefaultCase());
40:       assertFalse(node0.isVar());
41:       assertFalse(node0.isFunction());
42:       assertEquals(0, node0.getChildCount());
43:       assertFalse(node0.isBlock());
44:       assertFalse(node0.isSwitch());
45:       assertFalse(node0.isInc());
46:       assertFalse(node0.isStringKey());
47:       assertFalse(node0.isInstanceOf());
48:       assertFalse(node0.isCase());
49:       assertFalse(node0.isFor());
50:       assertEquals(39, node0.getType());
51:       assertFalse(node0.isWith());
52:       assertFalse(node0.isCatch());
53:       assertFalse(node0.hasMoreThanOneChild());
54:       assertFalse(node0.isThis());
55:       assertFalse(node0.isHook());
56:       assertFalse(node0.isRegExp());
57:       assertEquals(192559, node0.getSourcePosition());
58:       assertFalse(node0.isScript());
59:       assertFalse(node0.isCast());
60:       assertFalse(node0.isExprResult());
61:       assertFalse(node0.hasOneChild());
62:       assertFalse(node0.isNot());
63:       assertFalse(node0.isLabelName());
64:       assertFalse(node0.isAnd());
65:       assertFalse(node0.isObjectLit());
66:       assertFalse(node0.isLabel());
67:       assertFalse(node0.isOr());
68:       assertFalse(node0.isAssignAdd());
69:       assertFalse(node0.isDo());
70:       assertFalse(node0.isFalse());
71:       assertFalse(node0.isContinue());
72:       assertFalse(node0.isThrow());
73:       assertFalse(node0.isAdd());
74:       assertFalse(node0.isCall());
75:       assertEquals(47, node0.getLineno());
76:       assertFalse(node0.isNew());
77:       assertFalse(node0.isName());
78:       assertFalse(node0.isString());
79:       assertFalse(node0.isNull());
80:       assertFalse(node0.isReturn());
81:       assertFalse(node0.isBreak());
82:       assertFalse(node0.isGetProp());
83:       assertFalse(node0.isDelProp());
84:       assertTrue(node0.isNumber());
85:       assertFalse(node0.isAssign());
86:       assertFalse(node0.isGetElem());
87:       assertFalse(node0.isWhile());
88:       assertFalse(node0.isTypeOf());
89:       assertFalse(node0.hasChildren());
90:       assertEquals(47, node0.getCharno());
91:       assertFalse(node0.isDec());
92:       assertFalse(node0.isComma());
93:       assertEquals(56, Node.CHANGE_TIME);
94:       assertEquals(47, Node.IS_DISPATCHER);
95:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
96:       assertEquals(2, Node.POST_FLAG);
97:       assertEquals(12, Node.COLUMN_BITS);
98:       assertEquals(32, Node.INCRDECR_PROP);
99:       assertEquals(1, Node.DECR_FLAG);
100:       assertEquals(29, Node.JSDOC_INFO_PROP);
101:       assertEquals(53, Node.INPUT_ID);
102:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
103:       assertEquals(15, Node.NO_SIDE_EFFECTS);
104:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
106:       assertEquals(36, Node.QUOTED_PROP);
107:       assertEquals(57, Node.REFLECTED_OBJECT);
108:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
109:       assertEquals(4095, Node.COLUMN_MASK);
110:       assertEquals(48, Node.DIRECTIVES);
111:       assertEquals(49, Node.DIRECT_EVAL);
112:       assertEquals(37, Node.OPT_ARG_NAME);
113:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
115:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
116:       assertEquals(8, Node.FLAG_NO_THROWS);
117:       assertEquals(50, Node.FREE_CALL);
118:       assertEquals(55, Node.INFERRED_FUNCTION);
119:       assertEquals(52, Node.LENGTH);
120:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
121:       assertEquals(39, Node.EMPTY_BLOCK);
122:       assertEquals(57, Node.LAST_PROP);
123:       assertEquals(43, Node.IS_CONSTANT_NAME);
124:       assertEquals(54, Node.SLASH_V);
125:       assertEquals(30, Node.VAR_ARGS_NAME);
126:       assertEquals(51, Node.STATIC_SOURCE_FILE);
127:       assertEquals(46, Node.IS_NAMESPACE);
128:       assertEquals(40, Node.ORIGINALNAME_PROP);
129:       assertNotNull(node0);
130:       
131:       node0.type = 47;
132:       assertFalse(node0.isTry());
133:       assertFalse(node0.isArrayLit());
134:       assertFalse(node0.isVoid());
135:       assertFalse(node0.isEmpty());
136:       assertFalse(node0.isIf());
137:       assertFalse(node0.isNE());
138:       assertFalse(node0.isTrue());
139:       assertFalse(node0.isGetterDef());
140:       assertFalse(node0.isDebugger());
141:       assertFalse(node0.isIn());
142:       assertFalse(node0.isParamList());
143:       assertFalse(node0.isSetterDef());
144:       assertFalse(node0.isDefaultCase());
145:       assertFalse(node0.isVar());
146:       assertFalse(node0.isFunction());
147:       assertEquals(0, node0.getChildCount());
148:       assertFalse(node0.isBlock());
149:       assertFalse(node0.isSwitch());
150:       assertFalse(node0.isInc());
151:       assertFalse(node0.isStringKey());
152:       assertEquals(47, node0.getType());
153:       assertFalse(node0.isInstanceOf());
154:       assertFalse(node0.isCase());
155:       assertFalse(node0.isFor());
156:       assertFalse(node0.isWith());
157:       assertFalse(node0.isCatch());
158:       assertFalse(node0.hasMoreThanOneChild());
159:       assertFalse(node0.isThis());
160:       assertFalse(node0.isHook());
161:       assertEquals(192559, node0.getSourcePosition());
162:       assertFalse(node0.isScript());
163:       assertFalse(node0.isCast());
164:       assertFalse(node0.isExprResult());
165:       assertFalse(node0.hasOneChild());
166:       assertTrue(node0.isRegExp());
167:       assertFalse(node0.isNot());
168:       assertFalse(node0.isLabelName());
169:       assertFalse(node0.isAnd());
170:       assertFalse(node0.isNumber());
171:       assertFalse(node0.isObjectLit());
172:       assertFalse(node0.isLabel());
173:       assertFalse(node0.isOr());
174:       assertFalse(node0.isAssignAdd());
175:       assertFalse(node0.isDo());
176:       assertFalse(node0.isFalse());
177:       assertFalse(node0.isContinue());
178:       assertFalse(node0.isThrow());
179:       assertFalse(node0.isAdd());
180:       assertFalse(node0.isCall());
181:       assertEquals(47, node0.getLineno());
182:       assertFalse(node0.isNew());
183:       assertFalse(node0.isName());
184:       assertFalse(node0.isString());
185:       assertFalse(node0.isNull());
186:       assertFalse(node0.isReturn());
187:       assertFalse(node0.isBreak());
188:       assertFalse(node0.isGetProp());
189:       assertFalse(node0.isDelProp());
190:       assertFalse(node0.isAssign());
191:       assertFalse(node0.isGetElem());
192:       assertFalse(node0.isWhile());
193:       assertFalse(node0.isTypeOf());
194:       assertFalse(node0.hasChildren());
195:       assertEquals(47, node0.getCharno());
196:       assertFalse(node0.isDec());
197:       assertFalse(node0.isComma());
198:       
199:       int int0 = node0.getChangeTime();
200:       assertEquals(0, int0);
201:       assertFalse(node0.isTry());
202:       assertFalse(node0.isArrayLit());
203:       assertFalse(node0.isVoid());
204:       assertFalse(node0.isEmpty());
205:       assertFalse(node0.isIf());
206:       assertFalse(node0.isNE());
207:       assertFalse(node0.isTrue());
208:       assertFalse(node0.isGetterDef());
209:       assertFalse(node0.isDebugger());
210:       assertFalse(node0.isIn());
211:       assertFalse(node0.isParamList());
212:       assertFalse(node0.isSetterDef());
213:       assertFalse(node0.isDefaultCase());
214:       assertFalse(node0.isVar());
215:       assertFalse(node0.isFunction());
216:       assertEquals(0, node0.getChildCount());
217:       assertFalse(node0.isBlock());
218:       assertFalse(node0.isSwitch());
219:       assertFalse(node0.isInc());
220:       assertFalse(node0.isStringKey());
221:       assertEquals(47, node0.getType());
222:       assertFalse(node0.isInstanceOf());
223:       assertFalse(node0.isCase());
224:       assertFalse(node0.isFor());
225:       assertFalse(node0.isWith());
226:       assertFalse(node0.isCatch());
227:       assertFalse(node0.hasMoreThanOneChild());
228:       assertFalse(node0.isThis());
229:       assertFalse(node0.isHook());
230:       assertEquals(192559, node0.getSourcePosition());
231:       assertFalse(node0.isScript());
232:       assertFalse(node0.isCast());
233:       assertFalse(node0.isExprResult());
234:       assertFalse(node0.hasOneChild());
235:       assertTrue(node0.isRegExp());
236:       assertFalse(node0.isNot());
237:       assertFalse(node0.isLabelName());
238:       assertFalse(node0.isAnd());
239:       assertFalse(node0.isNumber());
240:       assertFalse(node0.isObjectLit());
241:       assertFalse(node0.isLabel());
242:       assertFalse(node0.isOr());
243:       assertFalse(node0.isAssignAdd());
244:       assertFalse(node0.isDo());
245:       assertFalse(node0.isFalse());
246:       assertFalse(node0.isContinue());
247:       assertFalse(node0.isThrow());
248:       assertFalse(node0.isAdd());
249:       assertFalse(node0.isCall());
250:       assertEquals(47, node0.getLineno());
251:       assertFalse(node0.isNew());
252:       assertFalse(node0.isName());
253:       assertFalse(node0.isString());
254:       assertFalse(node0.isNull());
255:       assertFalse(node0.isReturn());
256:       assertFalse(node0.isBreak());
257:       assertFalse(node0.isGetProp());
258:       assertFalse(node0.isDelProp());
259:       assertFalse(node0.isAssign());
260:       assertFalse(node0.isGetElem());
261:       assertFalse(node0.isWhile());
262:       assertFalse(node0.isTypeOf());
263:       assertFalse(node0.hasChildren());
264:       assertEquals(47, node0.getCharno());
265:       assertFalse(node0.isDec());
266:       assertFalse(node0.isComma());
267:       assertEquals(56, Node.CHANGE_TIME);
268:       assertEquals(47, Node.IS_DISPATCHER);
269:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
270:       assertEquals(2, Node.POST_FLAG);
271:       assertEquals(12, Node.COLUMN_BITS);
272:       assertEquals(32, Node.INCRDECR_PROP);
273:       assertEquals(1, Node.DECR_FLAG);
274:       assertEquals(29, Node.JSDOC_INFO_PROP);
275:       assertEquals(53, Node.INPUT_ID);
276:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
277:       assertEquals(15, Node.NO_SIDE_EFFECTS);
278:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
279:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
280:       assertEquals(36, Node.QUOTED_PROP);
281:       assertEquals(57, Node.REFLECTED_OBJECT);
282:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
283:       assertEquals(4095, Node.COLUMN_MASK);
284:       assertEquals(48, Node.DIRECTIVES);
285:       assertEquals(49, Node.DIRECT_EVAL);
286:       assertEquals(37, Node.OPT_ARG_NAME);
287:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
288:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
289:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
290:       assertEquals(8, Node.FLAG_NO_THROWS);
291:       assertEquals(50, Node.FREE_CALL);
292:       assertEquals(55, Node.INFERRED_FUNCTION);
293:       assertEquals(52, Node.LENGTH);
294:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
295:       assertEquals(39, Node.EMPTY_BLOCK);
296:       assertEquals(57, Node.LAST_PROP);
297:       assertEquals(43, Node.IS_CONSTANT_NAME);
298:       assertEquals(54, Node.SLASH_V);
299:       assertEquals(30, Node.VAR_ARGS_NAME);
300:       assertEquals(51, Node.STATIC_SOURCE_FILE);
301:       assertEquals(46, Node.IS_NAMESPACE);
302:       assertEquals(40, Node.ORIGINALNAME_PROP);
303:       
304:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
305:       assertFalse(node0.isTry());
306:       assertFalse(node0.isArrayLit());
307:       assertFalse(node0.isVoid());
308:       assertFalse(node0.isEmpty());
309:       assertFalse(node0.isIf());
310:       assertFalse(node0.isNE());
311:       assertFalse(node0.isTrue());
312:       assertFalse(node0.isGetterDef());
313:       assertFalse(node0.isDebugger());
314:       assertFalse(node0.isIn());
315:       assertFalse(node0.isParamList());
316:       assertFalse(node0.isSetterDef());
317:       assertFalse(node0.isDefaultCase());
318:       assertFalse(node0.isVar());
319:       assertFalse(node0.isFunction());
320:       assertEquals(0, node0.getChildCount());
321:       assertFalse(node0.isBlock());
322:       assertFalse(node0.isSwitch());
323:       assertFalse(node0.isInc());
324:       assertFalse(node0.isStringKey());
325:       assertEquals(47, node0.getType());
326:       assertFalse(node0.isInstanceOf());
327:       assertFalse(node0.isCase());
328:       assertFalse(node0.isFor());
329:       assertFalse(node0.isWith());
330:       assertFalse(node0.isCatch());
331:       assertFalse(node0.hasMoreThanOneChild());
332:       assertFalse(node0.isThis());
333:       assertFalse(node0.isHook());
334:       assertEquals(192559, node0.getSourcePosition());
335:       assertFalse(node0.isScript());
336:       assertFalse(node0.isCast());
337:       assertFalse(node0.isExprResult());
338:       assertFalse(node0.hasOneChild());
339:       assertTrue(node0.isRegExp());
340:       assertFalse(node0.isNot());
341:       assertFalse(node0.isLabelName());
342:       assertFalse(node0.isAnd());
343:       assertFalse(node0.isNumber());
344:       assertFalse(node0.isObjectLit());
345:       assertFalse(node0.isLabel());
346:       assertFalse(node0.isOr());
347:       assertFalse(node0.isAssignAdd());
348:       assertFalse(node0.isDo());
349:       assertFalse(node0.isFalse());
350:       assertFalse(node0.isContinue());
351:       assertFalse(node0.isThrow());
352:       assertFalse(node0.isAdd());
353:       assertFalse(node0.isCall());
354:       assertEquals(47, node0.getLineno());
355:       assertFalse(node0.isNew());
356:       assertFalse(node0.isName());
357:       assertFalse(node0.isString());
358:       assertFalse(node0.isNull());
359:       assertFalse(node0.isReturn());
360:       assertFalse(node0.isBreak());
361:       assertFalse(node0.isGetProp());
362:       assertFalse(node0.isDelProp());
363:       assertFalse(node0.isAssign());
364:       assertFalse(node0.isGetElem());
365:       assertFalse(node0.isWhile());
366:       assertFalse(node0.isTypeOf());
367:       assertFalse(node0.hasChildren());
368:       assertEquals(47, node0.getCharno());
369:       assertFalse(node0.isDec());
370:       assertFalse(node0.isComma());
371:       assertEquals(56, Node.CHANGE_TIME);
372:       assertEquals(47, Node.IS_DISPATCHER);
373:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
374:       assertEquals(2, Node.POST_FLAG);
375:       assertEquals(12, Node.COLUMN_BITS);
376:       assertEquals(32, Node.INCRDECR_PROP);
377:       assertEquals(1, Node.DECR_FLAG);
378:       assertEquals(29, Node.JSDOC_INFO_PROP);
379:       assertEquals(53, Node.INPUT_ID);
380:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
381:       assertEquals(15, Node.NO_SIDE_EFFECTS);
382:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
383:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
384:       assertEquals(36, Node.QUOTED_PROP);
385:       assertEquals(57, Node.REFLECTED_OBJECT);
386:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
387:       assertEquals(4095, Node.COLUMN_MASK);
388:       assertEquals(48, Node.DIRECTIVES);
389:       assertEquals(49, Node.DIRECT_EVAL);
390:       assertEquals(37, Node.OPT_ARG_NAME);
391:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
392:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
393:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
394:       assertEquals(8, Node.FLAG_NO_THROWS);
395:       assertEquals(50, Node.FREE_CALL);
396:       assertEquals(55, Node.INFERRED_FUNCTION);
397:       assertEquals(52, Node.LENGTH);
398:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
399:       assertEquals(39, Node.EMPTY_BLOCK);
400:       assertEquals(57, Node.LAST_PROP);
401:       assertEquals(43, Node.IS_CONSTANT_NAME);
402:       assertEquals(54, Node.SLASH_V);
403:       assertEquals(30, Node.VAR_ARGS_NAME);
404:       assertEquals(51, Node.STATIC_SOURCE_FILE);
405:       assertEquals(46, Node.IS_NAMESPACE);
406:       assertEquals(40, Node.ORIGINALNAME_PROP);
407:       assertNotNull(node_FileLevelJsDocBuilder0);
408:       
409:       String string0 = node0.toStringTree();
410:       assertEquals("REGEXP 47\n", string0);
411:       assertFalse(node0.isTry());
412:       assertFalse(node0.isArrayLit());
413:       assertFalse(node0.isVoid());
414:       assertFalse(node0.isEmpty());
415:       assertFalse(node0.isIf());
416:       assertFalse(node0.isNE());
417:       assertFalse(node0.isTrue());
418:       assertFalse(node0.isGetterDef());
419:       assertFalse(node0.isDebugger());
420:       assertFalse(node0.isIn());
421:       assertFalse(node0.isParamList());
422:       assertFalse(node0.isSetterDef());
423:       assertFalse(node0.isDefaultCase());
424:       assertFalse(node0.isVar());
425:       assertFalse(node0.isFunction());
426:       assertEquals(0, node0.getChildCount());
427:       assertFalse(node0.isBlock());
428:       assertFalse(node0.isSwitch());
429:       assertFalse(node0.isInc());
430:       assertFalse(node0.isStringKey());
431:       assertEquals(47, node0.getType());
432:       assertFalse(node0.isInstanceOf());
433:       assertFalse(node0.isCase());
434:       assertFalse(node0.isFor());
435:       assertFalse(node0.isWith());
436:       assertFalse(node0.isCatch());
437:       assertFalse(node0.hasMoreThanOneChild());
438:       assertFalse(node0.isThis());
439:       assertFalse(node0.isHook());
440:       assertEquals(192559, node0.getSourcePosition());
441:       assertFalse(node0.isScript());
442:       assertFalse(node0.isCast());
443:       assertFalse(node0.isExprResult());
444:       assertFalse(node0.hasOneChild());
445:       assertTrue(node0.isRegExp());
446:       assertFalse(node0.isNot());
447:       assertFalse(node0.isLabelName());
448:       assertFalse(node0.isAnd());
449:       assertFalse(node0.isNumber());
450:       assertFalse(node0.isObjectLit());
451:       assertFalse(node0.isLabel());
452:       assertFalse(node0.isOr());
453:       assertFalse(node0.isAssignAdd());
454:       assertFalse(node0.isDo());
455:       assertFalse(node0.isFalse());
456:       assertFalse(node0.isContinue());
457:       assertFalse(node0.isThrow());
458:       assertFalse(node0.isAdd());
459:       assertFalse(node0.isCall());
460:       assertEquals(47, node0.getLineno());
461:       assertFalse(node0.isNew());
462:       assertFalse(node0.isName());
463:       assertFalse(node0.isString());
464:       assertFalse(node0.isNull());
465:       assertFalse(node0.isReturn());
466:       assertFalse(node0.isBreak());
467:       assertFalse(node0.isGetProp());
468:       assertFalse(node0.isDelProp());
469:       assertFalse(node0.isAssign());
470:       assertFalse(node0.isGetElem());
471:       assertFalse(node0.isWhile());
472:       assertFalse(node0.isTypeOf());
473:       assertFalse(node0.hasChildren());
474:       assertEquals(47, node0.getCharno());
475:       assertFalse(node0.isDec());
476:       assertFalse(node0.isComma());
477:       assertEquals(56, Node.CHANGE_TIME);
478:       assertEquals(47, Node.IS_DISPATCHER);
479:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
480:       assertEquals(2, Node.POST_FLAG);
481:       assertEquals(12, Node.COLUMN_BITS);
482:       assertEquals(32, Node.INCRDECR_PROP);
483:       assertEquals(1, Node.DECR_FLAG);
484:       assertEquals(29, Node.JSDOC_INFO_PROP);
485:       assertEquals(53, Node.INPUT_ID);
486:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
487:       assertEquals(15, Node.NO_SIDE_EFFECTS);
488:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
489:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
490:       assertEquals(36, Node.QUOTED_PROP);
491:       assertEquals(57, Node.REFLECTED_OBJECT);
492:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
493:       assertEquals(4095, Node.COLUMN_MASK);
494:       assertEquals(48, Node.DIRECTIVES);
495:       assertEquals(49, Node.DIRECT_EVAL);
496:       assertEquals(37, Node.OPT_ARG_NAME);
497:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
498:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
499:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
500:       assertEquals(8, Node.FLAG_NO_THROWS);
501:       assertEquals(50, Node.FREE_CALL);
502:       assertEquals(55, Node.INFERRED_FUNCTION);
503:       assertEquals(52, Node.LENGTH);
504:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
505:       assertEquals(39, Node.EMPTY_BLOCK);
506:       assertEquals(57, Node.LAST_PROP);
507:       assertEquals(43, Node.IS_CONSTANT_NAME);
508:       assertEquals(54, Node.SLASH_V);
509:       assertEquals(30, Node.VAR_ARGS_NAME);
510:       assertEquals(51, Node.STATIC_SOURCE_FILE);
511:       assertEquals(46, Node.IS_NAMESPACE);
512:       assertEquals(40, Node.ORIGINALNAME_PROP);
513:       assertNotNull(string0);
514:       
515:       Node node1 = new Node(4);
516:       assertFalse(node1.isNew());
517:       assertFalse(node1.isDo());
518:       assertFalse(node1.isBlock());
519:       assertFalse(node1.isWhile());
520:       assertFalse(node1.isVar());
521:       assertFalse(node1.hasMoreThanOneChild());
522:       assertEquals((-1), node1.getLineno());
523:       assertFalse(node1.isContinue());
524:       assertFalse(node1.isCall());
525:       assertFalse(node1.isTypeOf());
526:       assertFalse(node1.isNumber());
527:       assertFalse(node1.hasChildren());
528:       assertFalse(node1.isDec());
529:       assertEquals((-1), node1.getSourcePosition());
530:       assertFalse(node1.isLabelName());
531:       assertFalse(node1.isStringKey());
532:       assertFalse(node1.isParamList());
533:       assertFalse(node1.hasOneChild());
534:       assertFalse(node1.isDefaultCase());
535:       assertFalse(node1.isVoid());
536:       assertFalse(node1.isTrue());
537:       assertFalse(node1.isArrayLit());
538:       assertEquals(0, node1.getChildCount());
539:       assertFalse(node1.isAssign());
540:       assertFalse(node1.isGetElem());
541:       assertFalse(node1.isExprResult());
542:       assertFalse(node1.isNull());
543:       assertFalse(node1.isBreak());
544:       assertFalse(node1.isDelProp());
545:       assertFalse(node1.isLabel());
546:       assertFalse(node1.isAssignAdd());
547:       assertFalse(node1.isName());
548:       assertFalse(node1.isOr());
549:       assertFalse(node1.isAdd());
550:       assertFalse(node1.isEmpty());
551:       assertEquals(4, node1.getType());
552:       assertFalse(node1.isSwitch());
553:       assertFalse(node1.isInc());
554:       assertEquals((-1), node1.getCharno());
555:       assertFalse(node1.isHook());
556:       assertFalse(node1.isFalse());
557:       assertTrue(node1.isReturn());
558:       assertFalse(node1.isThis());
559:       assertFalse(node1.isGetterDef());
560:       assertFalse(node1.isComma());
561:       assertFalse(node1.isFor());
562:       assertFalse(node1.isObjectLit());
563:       assertFalse(node1.isNot());
564:       assertFalse(node1.isCase());
565:       assertFalse(node1.isGetProp());
566:       assertFalse(node1.isString());
567:       assertFalse(node1.isScript());
568:       assertFalse(node1.isRegExp());
569:       assertFalse(node1.isFunction());
570:       assertFalse(node1.isDebugger());
571:       assertFalse(node1.isTry());
572:       assertFalse(node1.isAnd());
573:       assertFalse(node1.isWith());
574:       assertFalse(node1.isCast());
575:       assertFalse(node1.isInstanceOf());
576:       assertFalse(node1.isCatch());
577:       assertFalse(node1.isNE());
578:       assertFalse(node1.isSetterDef());
579:       assertFalse(node1.isIf());
580:       assertFalse(node1.isThrow());
581:       assertFalse(node1.isIn());
582:       assertEquals(40, Node.ORIGINALNAME_PROP);
583:       assertEquals(50, Node.FREE_CALL);
584:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
585:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
586:       assertEquals(52, Node.LENGTH);
587:       assertEquals(48, Node.DIRECTIVES);
588:       assertEquals(54, Node.SLASH_V);
589:       assertEquals(8, Node.FLAG_NO_THROWS);
590:       assertEquals(57, Node.REFLECTED_OBJECT);
591:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
592:       assertEquals(30, Node.VAR_ARGS_NAME);
593:       assertEquals(15, Node.NO_SIDE_EFFECTS);
594:       assertEquals(55, Node.INFERRED_FUNCTION);
595:       assertEquals(39, Node.EMPTY_BLOCK);
596:       assertEquals(53, Node.INPUT_ID);
597:       assertEquals(2, Node.POST_FLAG);
598:       assertEquals(57, Node.LAST_PROP);
599:       assertEquals(47, Node.IS_DISPATCHER);
600:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
601:       assertEquals(29, Node.JSDOC_INFO_PROP);
602:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
603:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
604:       assertEquals(37, Node.OPT_ARG_NAME);
605:       assertEquals(36, Node.QUOTED_PROP);
606:       assertEquals(46, Node.IS_NAMESPACE);
607:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
608:       assertEquals(43, Node.IS_CONSTANT_NAME);
609:       assertEquals(56, Node.CHANGE_TIME);
610:       assertEquals(1, Node.DECR_FLAG);
611:       assertEquals(49, Node.DIRECT_EVAL);
612:       assertEquals(51, Node.STATIC_SOURCE_FILE);
613:       assertEquals(4095, Node.COLUMN_MASK);
614:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
615:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
616:       assertEquals(32, Node.INCRDECR_PROP);
617:       assertEquals(12, Node.COLUMN_BITS);
618:       assertNotNull(node1);
619:       assertFalse(node1.equals((Object)node0));
620:       
621:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
622:       assertFalse(node0.isTry());
623:       assertFalse(node0.isArrayLit());
624:       assertFalse(node0.isVoid());
625:       assertFalse(node0.isEmpty());
626:       assertFalse(node0.isIf());
627:       assertFalse(node0.isNE());
628:       assertFalse(node0.isTrue());
629:       assertFalse(node0.isGetterDef());
630:       assertFalse(node0.isDebugger());
631:       assertFalse(node0.isIn());
632:       assertFalse(node0.isParamList());
633:       assertFalse(node0.isSetterDef());
634:       assertFalse(node0.isDefaultCase());
635:       assertFalse(node0.isVar());
636:       assertFalse(node0.isFunction());
637:       assertEquals(0, node0.getChildCount());
638:       assertFalse(node0.isBlock());
639:       assertFalse(node0.isSwitch());
640:       assertFalse(node0.isInc());
641:       assertFalse(node0.isStringKey());
642:       assertEquals(47, node0.getType());
643:       assertFalse(node0.isInstanceOf());
644:       assertFalse(node0.isCase());
645:       assertFalse(node0.isFor());
646:       assertFalse(node0.isWith());
647:       assertFalse(node0.isCatch());
648:       assertFalse(node0.hasMoreThanOneChild());
649:       assertFalse(node0.isThis());
650:       assertFalse(node0.isHook());
651:       assertEquals(192559, node0.getSourcePosition());
652:       assertFalse(node0.isScript());
653:       assertFalse(node0.isCast());
654:       assertFalse(node0.isExprResult());
655:       assertFalse(node0.hasOneChild());
656:       assertTrue(node0.isRegExp());
657:       assertFalse(node0.isNot());
658:       assertFalse(node0.isLabelName());
659:       assertFalse(node0.isAnd());
660:       assertFalse(node0.isNumber());
661:       assertFalse(node0.isObjectLit());
662:       assertFalse(node0.isLabel());
663:       assertFalse(node0.isOr());
664:       assertFalse(node0.isAssignAdd());
665:       assertFalse(node0.isDo());
666:       assertFalse(node0.isFalse());
667:       assertFalse(node0.isContinue());
668:       assertFalse(node0.isThrow());
669:       assertFalse(node0.isAdd());
670:       assertFalse(node0.isCall());
671:       assertEquals(47, node0.getLineno());
672:       assertFalse(node0.isNew());
673:       assertFalse(node0.isName());
674:       assertFalse(node0.isString());
675:       assertFalse(node0.isNull());
676:       assertFalse(node0.isReturn());
677:       assertFalse(node0.isBreak());
678:       assertFalse(node0.isGetProp());
679:       assertFalse(node0.isDelProp());
680:       assertFalse(node0.isAssign());
681:       assertFalse(node0.isGetElem());
682:       assertFalse(node0.isWhile());
683:       assertFalse(node0.isTypeOf());
684:       assertFalse(node0.hasChildren());
685:       assertEquals(47, node0.getCharno());
686:       assertFalse(node0.isDec());
687:       assertFalse(node0.isComma());
688:       assertEquals(56, Node.CHANGE_TIME);
689:       assertEquals(47, Node.IS_DISPATCHER);
690:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
691:       assertEquals(2, Node.POST_FLAG);
692:       assertEquals(12, Node.COLUMN_BITS);
693:       assertEquals(32, Node.INCRDECR_PROP);
694:       assertEquals(1, Node.DECR_FLAG);
695:       assertEquals(29, Node.JSDOC_INFO_PROP);
696:       assertEquals(53, Node.INPUT_ID);
697:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
698:       assertEquals(15, Node.NO_SIDE_EFFECTS);
699:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
700:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
701:       assertEquals(36, Node.QUOTED_PROP);
702:       assertEquals(57, Node.REFLECTED_OBJECT);
703:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
704:       assertEquals(4095, Node.COLUMN_MASK);
705:       assertEquals(48, Node.DIRECTIVES);
706:       assertEquals(49, Node.DIRECT_EVAL);
707:       assertEquals(37, Node.OPT_ARG_NAME);
708:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
709:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
710:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
711:       assertEquals(8, Node.FLAG_NO_THROWS);
712:       assertEquals(50, Node.FREE_CALL);
713:       assertEquals(55, Node.INFERRED_FUNCTION);
714:       assertEquals(52, Node.LENGTH);
715:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
716:       assertEquals(39, Node.EMPTY_BLOCK);
717:       assertEquals(57, Node.LAST_PROP);
718:       assertEquals(43, Node.IS_CONSTANT_NAME);
719:       assertEquals(54, Node.SLASH_V);
720:       assertEquals(30, Node.VAR_ARGS_NAME);
721:       assertEquals(51, Node.STATIC_SOURCE_FILE);
722:       assertEquals(46, Node.IS_NAMESPACE);
723:       assertEquals(40, Node.ORIGINALNAME_PROP);
724:       assertNotNull(node_FileLevelJsDocBuilder1);
725:       assertFalse(node0.equals((Object)node1));
726:       assertFalse(node_FileLevelJsDocBuilder1.equals((Object)node_FileLevelJsDocBuilder0));
727:       
728:       Iterable<Node> iterable0 = node0.children();
729:       assertFalse(node0.isTry());
730:       assertFalse(node0.isArrayLit());
731:       assertFalse(node0.isVoid());
732:       assertFalse(node0.isEmpty());
733:       assertFalse(node0.isIf());
734:       assertFalse(node0.isNE());
735:       assertFalse(node0.isTrue());
736:       assertFalse(node0.isGetterDef());
737:       assertFalse(node0.isDebugger());
738:       assertFalse(node0.isIn());
739:       assertFalse(node0.isParamList());
740:       assertFalse(node0.isSetterDef());
741:       assertFalse(node0.isDefaultCase());
742:       assertFalse(node0.isVar());
743:       assertFalse(node0.isFunction());
744:       assertEquals(0, node0.getChildCount());
745:       assertFalse(node0.isBlock());
746:       assertFalse(node0.isSwitch());
747:       assertFalse(node0.isInc());
748:       assertFalse(node0.isStringKey());
749:       assertEquals(47, node0.getType());
750:       assertFalse(node0.isInstanceOf());
751:       assertFalse(node0.isCase());
752:       assertFalse(node0.isFor());
753:       assertFalse(node0.isWith());
754:       assertFalse(node0.isCatch());
755:       assertFalse(node0.hasMoreThanOneChild());
756:       assertFalse(node0.isThis());
757:       assertFalse(node0.isHook());
758:       assertEquals(192559, node0.getSourcePosition());
759:       assertFalse(node0.isScript());
760:       assertFalse(node0.isCast());
761:       assertFalse(node0.isExprResult());
762:       assertFalse(node0.hasOneChild());
763:       assertTrue(node0.isRegExp());
764:       assertFalse(node0.isNot());
765:       assertFalse(node0.isLabelName());
766:       assertFalse(node0.isAnd());
767:       assertFalse(node0.isNumber());
768:       assertFalse(node0.isObjectLit());
769:       assertFalse(node0.isLabel());
770:       assertFalse(node0.isOr());
771:       assertFalse(node0.isAssignAdd());
772:       assertFalse(node0.isDo());
773:       assertFalse(node0.isFalse());
774:       assertFalse(node0.isContinue());
775:       assertFalse(node0.isThrow());
776:       assertFalse(node0.isAdd());
777:       assertFalse(node0.isCall());
778:       assertEquals(47, node0.getLineno());
779:       assertFalse(node0.isNew());
780:       assertFalse(node0.isName());
781:       assertFalse(node0.isString());
782:       assertFalse(node0.isNull());
783:       assertFalse(node0.isReturn());
784:       assertFalse(node0.isBreak());
785:       assertFalse(node0.isGetProp());
786:       assertFalse(node0.isDelProp());
787:       assertFalse(node0.isAssign());
788:       assertFalse(node0.isGetElem());
789:       assertFalse(node0.isWhile());
790:       assertFalse(node0.isTypeOf());
791:       assertFalse(node0.hasChildren());
792:       assertEquals(47, node0.getCharno());
793:       assertFalse(node0.isDec());
794:       assertFalse(node0.isComma());
795:       assertEquals(56, Node.CHANGE_TIME);
796:       assertEquals(47, Node.IS_DISPATCHER);
797:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
798:       assertEquals(2, Node.POST_FLAG);
799:       assertEquals(12, Node.COLUMN_BITS);
800:       assertEquals(32, Node.INCRDECR_PROP);
801:       assertEquals(1, Node.DECR_FLAG);
802:       assertEquals(29, Node.JSDOC_INFO_PROP);
803:       assertEquals(53, Node.INPUT_ID);
804:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
805:       assertEquals(15, Node.NO_SIDE_EFFECTS);
806:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
807:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
808:       assertEquals(36, Node.QUOTED_PROP);
809:       assertEquals(57, Node.REFLECTED_OBJECT);
810:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
811:       assertEquals(4095, Node.COLUMN_MASK);
812:       assertEquals(48, Node.DIRECTIVES);
813:       assertEquals(49, Node.DIRECT_EVAL);
814:       assertEquals(37, Node.OPT_ARG_NAME);
815:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
816:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
817:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
818:       assertEquals(8, Node.FLAG_NO_THROWS);
819:       assertEquals(50, Node.FREE_CALL);
820:       assertEquals(55, Node.INFERRED_FUNCTION);
821:       assertEquals(52, Node.LENGTH);
822:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
823:       assertEquals(39, Node.EMPTY_BLOCK);
824:       assertEquals(57, Node.LAST_PROP);
825:       assertEquals(43, Node.IS_CONSTANT_NAME);
826:       assertEquals(54, Node.SLASH_V);
827:       assertEquals(30, Node.VAR_ARGS_NAME);
828:       assertEquals(51, Node.STATIC_SOURCE_FILE);
829:       assertEquals(46, Node.IS_NAMESPACE);
830:       assertEquals(40, Node.ORIGINALNAME_PROP);
831:       assertNotNull(iterable0);
832:       assertFalse(node0.equals((Object)node1));
833:       assertFalse(iterable0.contains(node0));
834:       
835:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
836:       assertFalse(node0.isTry());
837:       assertFalse(node0.isArrayLit());
838:       assertFalse(node0.isVoid());
839:       assertFalse(node0.isEmpty());
840:       assertFalse(node0.isIf());
841:       assertFalse(node0.isNE());
842:       assertFalse(node0.isTrue());
843:       assertFalse(node0.isGetterDef());
844:       assertFalse(node0.isDebugger());
845:       assertFalse(node0.isIn());
846:       assertFalse(node0.isParamList());
847:       assertFalse(node0.isSetterDef());
848:       assertFalse(node0.isDefaultCase());
849:       assertFalse(node0.isVar());
850:       assertFalse(node0.isFunction());
851:       assertEquals(0, node0.getChildCount());
852:       assertFalse(node0.isBlock());
853:       assertFalse(node0.isSwitch());
854:       assertFalse(node0.isInc());
855:       assertFalse(node0.isStringKey());
856:       assertEquals(47, node0.getType());
857:       assertFalse(node0.isInstanceOf());
858:       assertFalse(node0.isCase());
859:       assertFalse(node0.isFor());
860:       assertFalse(node0.isWith());
861:       assertFalse(node0.isCatch());
862:       assertFalse(node0.hasMoreThanOneChild());
863:       assertFalse(node0.isThis());
864:       assertFalse(node0.isHook());
865:       assertEquals(192559, node0.getSourcePosition());
866:       assertFalse(node0.isScript());
867:       assertFalse(node0.isCast());
868:       assertFalse(node0.isExprResult());
869:       assertFalse(node0.hasOneChild());
870:       assertTrue(node0.isRegExp());
871:       assertFalse(node0.isNot());
872:       assertFalse(node0.isLabelName());
873:       assertFalse(node0.isAnd());
874:       assertFalse(node0.isNumber());
875:       assertFalse(node0.isObjectLit());
876:       assertFalse(node0.isLabel());
877:       assertFalse(node0.isOr());
878:       assertFalse(node0.isAssignAdd());
879:       assertFalse(node0.isDo());
880:       assertFalse(node0.isFalse());
881:       assertFalse(node0.isContinue());
882:       assertFalse(node0.isThrow());
883:       assertFalse(node0.isAdd());
884:       assertFalse(node0.isCall());
885:       assertEquals(47, node0.getLineno());
886:       assertFalse(node0.isNew());
887:       assertFalse(node0.isName());
888:       assertFalse(node0.isString());
889:       assertFalse(node0.isNull());
890:       assertFalse(node0.isReturn());
891:       assertFalse(node0.isBreak());
892:       assertFalse(node0.isGetProp());
893:       assertFalse(node0.isDelProp());
894:       assertFalse(node0.isAssign());
895:       assertFalse(node0.isGetElem());
896:       assertFalse(node0.isWhile());
897:       assertFalse(node0.isTypeOf());
898:       assertFalse(node0.hasChildren());
899:       assertEquals(47, node0.getCharno());
900:       assertFalse(node0.isDec());
901:       assertFalse(node0.isComma());
902:       assertEquals(56, Node.CHANGE_TIME);
903:       assertEquals(47, Node.IS_DISPATCHER);
904:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
905:       assertEquals(2, Node.POST_FLAG);
906:       assertEquals(12, Node.COLUMN_BITS);
907:       assertEquals(32, Node.INCRDECR_PROP);
908:       assertEquals(1, Node.DECR_FLAG);
909:       assertEquals(29, Node.JSDOC_INFO_PROP);
910:       assertEquals(53, Node.INPUT_ID);
911:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
912:       assertEquals(15, Node.NO_SIDE_EFFECTS);
913:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
914:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
915:       assertEquals(36, Node.QUOTED_PROP);
916:       assertEquals(57, Node.REFLECTED_OBJECT);
917:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
918:       assertEquals(4095, Node.COLUMN_MASK);
919:       assertEquals(48, Node.DIRECTIVES);
920:       assertEquals(49, Node.DIRECT_EVAL);
921:       assertEquals(37, Node.OPT_ARG_NAME);
922:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
923:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
924:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
925:       assertEquals(8, Node.FLAG_NO_THROWS);
926:       assertEquals(50, Node.FREE_CALL);
927:       assertEquals(55, Node.INFERRED_FUNCTION);
928:       assertEquals(52, Node.LENGTH);
929:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
930:       assertEquals(39, Node.EMPTY_BLOCK);
931:       assertEquals(57, Node.LAST_PROP);
932:       assertEquals(43, Node.IS_CONSTANT_NAME);
933:       assertEquals(54, Node.SLASH_V);
934:       assertEquals(30, Node.VAR_ARGS_NAME);
935:       assertEquals(51, Node.STATIC_SOURCE_FILE);
936:       assertEquals(46, Node.IS_NAMESPACE);
937:       assertEquals(40, Node.ORIGINALNAME_PROP);
938:       assertNull(staticSourceFile0);
939:       assertFalse(node0.equals((Object)node1));
940:       
941:       Node node2 = node1.cloneTree();
942:       assertFalse(node1.isNew());
943:       assertFalse(node1.isDo());
944:       assertFalse(node1.isBlock());
945:       assertFalse(node1.isWhile());
946:       assertFalse(node1.isVar());
947:       assertFalse(node1.hasMoreThanOneChild());
948:       assertEquals((-1), node1.getLineno());
949:       assertFalse(node1.isContinue());
950:       assertFalse(node1.isCall());
951:       assertFalse(node1.isTypeOf());
952:       assertFalse(node1.isNumber());
953:       assertFalse(node1.hasChildren());
954:       assertFalse(node1.isDec());
955:       assertEquals((-1), node1.getSourcePosition());
956:       assertFalse(node1.isLabelName());
957:       assertFalse(node1.isStringKey());
958:       assertFalse(node1.isParamList());
959:       assertFalse(node1.hasOneChild());
960:       assertFalse(node1.isDefaultCase());
961:       assertFalse(node1.isVoid());
962:       assertFalse(node1.isTrue());
963:       assertFalse(node1.isArrayLit());
964:       assertEquals(0, node1.getChildCount());
965:       assertFalse(node1.isAssign());
966:       assertFalse(node1.isGetElem());
967:       assertFalse(node1.isExprResult());
968:       assertFalse(node1.isNull());
969:       assertFalse(node1.isBreak());
970:       assertFalse(node1.isDelProp());
971:       assertFalse(node1.isLabel());
972:       assertFalse(node1.isAssignAdd());
973:       assertFalse(node1.isName());
974:       assertFalse(node1.isOr());
975:       assertFalse(node1.isAdd());
976:       assertFalse(node1.isEmpty());
977:       assertEquals(4, node1.getType());
978:       assertFalse(node1.isSwitch());
979:       assertFalse(node1.isInc());
980:       assertEquals((-1), node1.getCharno());
981:       assertFalse(node1.isHook());
982:       assertFalse(node1.isFalse());
983:       assertTrue(node1.isReturn());
984:       assertFalse(node1.isThis());
985:       assertFalse(node1.isGetterDef());
986:       assertFalse(node1.isComma());
987:       assertFalse(node1.isFor());
988:       assertFalse(node1.isObjectLit());
989:       assertFalse(node1.isNot());
990:       assertFalse(node1.isCase());
991:       assertFalse(node1.isGetProp());
992:       assertFalse(node1.isString());
993:       assertFalse(node1.isScript());
994:       assertFalse(node1.isRegExp());
995:       assertFalse(node1.isFunction());
996:       assertFalse(node1.isDebugger());
997:       assertFalse(node1.isTry());
998:       assertFalse(node1.isAnd());
999:       assertFalse(node1.isWith());
1000:       assertFalse(node1.isCast());
1001:       assertFalse(node1.isInstanceOf());
1002:       assertFalse(node1.isCatch());
1003:       assertFalse(node1.isNE());
1004:       assertFalse(node1.isSetterDef());
1005:       assertFalse(node1.isIf());
1006:       assertFalse(node1.isThrow());
1007:       assertFalse(node1.isIn());
1008:       assertFalse(node2.isDelProp());
1009:       assertFalse(node2.isGetterDef());
1010:       assertFalse(node2.isIf());
1011:       assertFalse(node2.isEmpty());
1012:       assertFalse(node2.isFor());
1013:       assertFalse(node2.isNE());
1014:       assertFalse(node2.isIn());
1015:       assertFalse(node2.isCase());
1016:       assertFalse(node2.isTry());
1017:       assertFalse(node2.isString());
1018:       assertFalse(node2.isDefaultCase());
1019:       assertEquals((-1), node2.getCharno());
1020:       assertFalse(node2.isFunction());
1021:       assertFalse(node2.isDebugger());
1022:       assertEquals(0, node2.getChildCount());
1023:       assertFalse(node2.isParamList());
1024:       assertFalse(node2.isSwitch());
1025:       assertFalse(node2.isArrayLit());
1026:       assertFalse(node2.isBreak());
1027:       assertFalse(node2.isNull());
1028:       assertFalse(node2.isComma());
1029:       assertFalse(node2.isAdd());
1030:       assertFalse(node2.isVar());
1031:       assertFalse(node2.isGetProp());
1032:       assertFalse(node2.isNew());
1033:       assertFalse(node2.isWhile());
1034:       assertFalse(node2.isTrue());
1035:       assertEquals(4, node2.getType());
1036:       assertFalse(node2.isExprResult());
1037:       assertFalse(node2.isVoid());
1038:       assertFalse(node2.isCall());
1039:       assertFalse(node2.isName());
1040:       assertFalse(node2.hasChildren());
1041:       assertFalse(node2.isNumber());
1042:       assertFalse(node2.isGetElem());
1043:       assertFalse(node2.isLabel());
1044:       assertFalse(node2.isTypeOf());
1045:       assertEquals((-1), node2.getSourcePosition());
1046:       assertFalse(node2.isDec());
1047:       assertFalse(node2.isAssign());
1048:       assertFalse(node2.isOr());
1049:       assertFalse(node2.isAssignAdd());
1050:       assertFalse(node2.hasOneChild());
1051:       assertFalse(node2.isDo());
1052:       assertFalse(node2.isScript());
1053:       assertFalse(node2.isContinue());
1054:       assertFalse(node2.isObjectLit());
1055:       assertFalse(node2.isNot());
1056:       assertFalse(node2.isCast());
1057:       assertFalse(node2.isAnd());
1058:       assertFalse(node2.isLabelName());
1059:       assertFalse(node2.isStringKey());
1060:       assertFalse(node2.isThrow());
1061:       assertFalse(node2.isThis());
1062:       assertFalse(node2.isFalse());
1063:       assertFalse(node2.isHook());
1064:       assertFalse(node2.isBlock());
1065:       assertFalse(node2.isInc());
1066:       assertFalse(node2.isSetterDef());
1067:       assertFalse(node2.isWith());
1068:       assertTrue(node2.isReturn());
1069:       assertFalse(node2.hasMoreThanOneChild());
1070:       assertFalse(node2.isRegExp());
1071:       assertEquals((-1), node2.getLineno());
1072:       assertFalse(node2.isInstanceOf());
1073:       assertFalse(node2.isCatch());
1074:       assertEquals(40, Node.ORIGINALNAME_PROP);
1075:       assertEquals(50, Node.FREE_CALL);
1076:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1077:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1078:       assertEquals(52, Node.LENGTH);
1079:       assertEquals(48, Node.DIRECTIVES);
1080:       assertEquals(54, Node.SLASH_V);
1081:       assertEquals(8, Node.FLAG_NO_THROWS);
1082:       assertEquals(57, Node.REFLECTED_OBJECT);
1083:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1084:       assertEquals(30, Node.VAR_ARGS_NAME);
1085:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1086:       assertEquals(55, Node.INFERRED_FUNCTION);
1087:       assertEquals(39, Node.EMPTY_BLOCK);
1088:       assertEquals(53, Node.INPUT_ID);
1089:       assertEquals(2, Node.POST_FLAG);
1090:       assertEquals(57, Node.LAST_PROP);
1091:       assertEquals(47, Node.IS_DISPATCHER);
1092:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1093:       assertEquals(29, Node.JSDOC_INFO_PROP);
1094:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1095:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1096:       assertEquals(37, Node.OPT_ARG_NAME);
1097:       assertEquals(36, Node.QUOTED_PROP);
1098:       assertEquals(46, Node.IS_NAMESPACE);
1099:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1100:       assertEquals(43, Node.IS_CONSTANT_NAME);
1101:       assertEquals(56, Node.CHANGE_TIME);
1102:       assertEquals(1, Node.DECR_FLAG);
1103:       assertEquals(49, Node.DIRECT_EVAL);
1104:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1105:       assertEquals(4095, Node.COLUMN_MASK);
1106:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1107:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1108:       assertEquals(32, Node.INCRDECR_PROP);
1109:       assertEquals(12, Node.COLUMN_BITS);
1110:       assertEquals(12, Node.COLUMN_BITS);
1111:       assertEquals(46, Node.IS_NAMESPACE);
1112:       assertEquals(49, Node.DIRECT_EVAL);
1113:       assertEquals(37, Node.OPT_ARG_NAME);
1114:       assertEquals(32, Node.INCRDECR_PROP);
1115:       assertEquals(1, Node.DECR_FLAG);
1116:       assertEquals(2, Node.POST_FLAG);
1117:       assertEquals(47, Node.IS_DISPATCHER);
1118:       assertEquals(57, Node.LAST_PROP);
1119:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1120:       assertEquals(30, Node.VAR_ARGS_NAME);
1121:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1122:       assertEquals(57, Node.REFLECTED_OBJECT);
1123:       assertEquals(29, Node.JSDOC_INFO_PROP);
1124:       assertEquals(53, Node.INPUT_ID);
1125:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1126:       assertEquals(8, Node.FLAG_NO_THROWS);
1127:       assertEquals(39, Node.EMPTY_BLOCK);
1128:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1129:       assertEquals(56, Node.CHANGE_TIME);
1130:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1131:       assertEquals(52, Node.LENGTH);
1132:       assertEquals(36, Node.QUOTED_PROP);
1133:       assertEquals(4095, Node.COLUMN_MASK);
1134:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1135:       assertEquals(55, Node.INFERRED_FUNCTION);
1136:       assertEquals(48, Node.DIRECTIVES);
1137:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1138:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1139:       assertEquals(40, Node.ORIGINALNAME_PROP);
1140:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1141:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1142:       assertEquals(54, Node.SLASH_V);
1143:       assertEquals(43, Node.IS_CONSTANT_NAME);
1144:       assertEquals(50, Node.FREE_CALL);
1145:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1146:       assertNotNull(node2);
1147:       assertFalse(node1.equals((Object)node0));
1148:       assertFalse(node2.equals((Object)node0));
1149:       assertFalse(node2.equals((Object)node1));
1150:       assertNotSame(node1, node2);
1151:       assertNotSame(node2, node1);
1152:       
1153:       node2.setSourceFileForTesting("@:z");
1154:       assertFalse(node1.isNew());
1155:       assertFalse(node1.isDo());
1156:       assertFalse(node1.isBlock());
1157:       assertFalse(node1.isWhile());
1158:       assertFalse(node1.isVar());
1159:       assertFalse(node1.hasMoreThanOneChild());
1160:       assertEquals((-1), node1.getLineno());
1161:       assertFalse(node1.isContinue());
1162:       assertFalse(node1.isCall());
1163:       assertFalse(node1.isTypeOf());
1164:       assertFalse(node1.isNumber());
1165:       assertFalse(node1.hasChildren());
1166:       assertFalse(node1.isDec());
1167:       assertEquals((-1), node1.getSourcePosition());
1168:       assertFalse(node1.isLabelName());
1169:       assertFalse(node1.isStringKey());
1170:       assertFalse(node1.isParamList());
1171:       assertFalse(node1.hasOneChild());
1172:       assertFalse(node1.isDefaultCase());
1173:       assertFalse(node1.isVoid());
1174:       assertFalse(node1.isTrue());
1175:       assertFalse(node1.isArrayLit());
1176:       assertEquals(0, node1.getChildCount());
1177:       assertFalse(node1.isAssign());
1178:       assertFalse(node1.isGetElem());
1179:       assertFalse(node1.isExprResult());
1180:       assertFalse(node1.isNull());
1181:       assertFalse(node1.isBreak());
1182:       assertFalse(node1.isDelProp());
1183:       assertFalse(node1.isLabel());
1184:       assertFalse(node1.isAssignAdd());
1185:       assertFalse(node1.isName());
1186:       assertFalse(node1.isOr());
1187:       assertFalse(node1.isAdd());
1188:       assertFalse(node1.isEmpty());
1189:       assertEquals(4, node1.getType());
1190:       assertFalse(node1.isSwitch());
1191:       assertFalse(node1.isInc());
1192:       assertEquals((-1), node1.getCharno());
1193:       assertFalse(node1.isHook());
1194:       assertFalse(node1.isFalse());
1195:       assertTrue(node1.isReturn());
1196:       assertFalse(node1.isThis());
1197:       assertFalse(node1.isGetterDef());
1198:       assertFalse(node1.isComma());
1199:       assertFalse(node1.isFor());
1200:       assertFalse(node1.isObjectLit());
1201:       assertFalse(node1.isNot());
1202:       assertFalse(node1.isCase());
1203:       assertFalse(node1.isGetProp());
1204:       assertFalse(node1.isString());
1205:       assertFalse(node1.isScript());
1206:       assertFalse(node1.isRegExp());
1207:       assertFalse(node1.isFunction());
1208:       assertFalse(node1.isDebugger());
1209:       assertFalse(node1.isTry());
1210:       assertFalse(node1.isAnd());
1211:       assertFalse(node1.isWith());
1212:       assertFalse(node1.isCast());
1213:       assertFalse(node1.isInstanceOf());
1214:       assertFalse(node1.isCatch());
1215:       assertFalse(node1.isNE());
1216:       assertFalse(node1.isSetterDef());
1217:       assertFalse(node1.isIf());
1218:       assertFalse(node1.isThrow());
1219:       assertFalse(node1.isIn());
1220:       assertFalse(node2.isDelProp());
1221:       assertFalse(node2.isGetterDef());
1222:       assertFalse(node2.isIf());
1223:       assertFalse(node2.isEmpty());
1224:       assertFalse(node2.isFor());
1225:       assertFalse(node2.isNE());
1226:       assertFalse(node2.isIn());
1227:       assertFalse(node2.isCase());
1228:       assertFalse(node2.isTry());
1229:       assertFalse(node2.isString());
1230:       assertFalse(node2.isDefaultCase());
1231:       assertEquals((-1), node2.getCharno());
1232:       assertFalse(node2.isFunction());
1233:       assertFalse(node2.isDebugger());
1234:       assertEquals(0, node2.getChildCount());
1235:       assertFalse(node2.isParamList());
1236:       assertFalse(node2.isSwitch());
1237:       assertFalse(node2.isArrayLit());
1238:       assertFalse(node2.isBreak());
1239:       assertFalse(node2.isNull());
1240:       assertFalse(node2.isComma());
1241:       assertFalse(node2.isAdd());
1242:       assertFalse(node2.isVar());
1243:       assertFalse(node2.isGetProp());
1244:       assertFalse(node2.isNew());
1245:       assertFalse(node2.isWhile());
1246:       assertFalse(node2.isTrue());
1247:       assertEquals(4, node2.getType());
1248:       assertFalse(node2.isExprResult());
1249:       assertFalse(node2.isVoid());
1250:       assertFalse(node2.isCall());
1251:       assertFalse(node2.isName());
1252:       assertFalse(node2.hasChildren());
1253:       assertFalse(node2.isNumber());
1254:       assertFalse(node2.isGetElem());
1255:       assertFalse(node2.isLabel());
1256:       assertFalse(node2.isTypeOf());
1257:       assertEquals((-1), node2.getSourcePosition());
1258:       assertFalse(node2.isDec());
1259:       assertFalse(node2.isAssign());
1260:       assertFalse(node2.isOr());
1261:       assertFalse(node2.isAssignAdd());
1262:       assertFalse(node2.hasOneChild());
1263:       assertFalse(node2.isDo());
1264:       assertFalse(node2.isScript());
1265:       assertFalse(node2.isContinue());
1266:       assertFalse(node2.isObjectLit());
1267:       assertFalse(node2.isNot());
1268:       assertFalse(node2.isCast());
1269:       assertFalse(node2.isAnd());
1270:       assertFalse(node2.isLabelName());
1271:       assertFalse(node2.isStringKey());
1272:       assertFalse(node2.isThrow());
1273:       assertFalse(node2.isThis());
1274:       assertFalse(node2.isFalse());
1275:       assertFalse(node2.isHook());
1276:       assertFalse(node2.isBlock());
1277:       assertFalse(node2.isInc());
1278:       assertFalse(node2.isSetterDef());
1279:       assertFalse(node2.isWith());
1280:       assertTrue(node2.isReturn());
1281:       assertFalse(node2.hasMoreThanOneChild());
1282:       assertFalse(node2.isRegExp());
1283:       assertEquals((-1), node2.getLineno());
1284:       assertFalse(node2.isInstanceOf());
1285:       assertFalse(node2.isCatch());
1286:       assertEquals(40, Node.ORIGINALNAME_PROP);
1287:       assertEquals(50, Node.FREE_CALL);
1288:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1289:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1290:       assertEquals(52, Node.LENGTH);
1291:       assertEquals(48, Node.DIRECTIVES);
1292:       assertEquals(54, Node.SLASH_V);
1293:       assertEquals(8, Node.FLAG_NO_THROWS);
1294:       assertEquals(57, Node.REFLECTED_OBJECT);
1295:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1296:       assertEquals(30, Node.VAR_ARGS_NAME);
1297:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1298:       assertEquals(55, Node.INFERRED_FUNCTION);
1299:       assertEquals(39, Node.EMPTY_BLOCK);
1300:       assertEquals(53, Node.INPUT_ID);
1301:       assertEquals(2, Node.POST_FLAG);
1302:       assertEquals(57, Node.LAST_PROP);
1303:       assertEquals(47, Node.IS_DISPATCHER);
1304:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1305:       assertEquals(29, Node.JSDOC_INFO_PROP);
1306:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1307:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1308:       assertEquals(37, Node.OPT_ARG_NAME);
1309:       assertEquals(36, Node.QUOTED_PROP);
1310:       assertEquals(46, Node.IS_NAMESPACE);
1311:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1312:       assertEquals(43, Node.IS_CONSTANT_NAME);
1313:       assertEquals(56, Node.CHANGE_TIME);
1314:       assertEquals(1, Node.DECR_FLAG);
1315:       assertEquals(49, Node.DIRECT_EVAL);
1316:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1317:       assertEquals(4095, Node.COLUMN_MASK);
1318:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1319:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1320:       assertEquals(32, Node.INCRDECR_PROP);
1321:       assertEquals(12, Node.COLUMN_BITS);
1322:       assertEquals(12, Node.COLUMN_BITS);
1323:       assertEquals(46, Node.IS_NAMESPACE);
1324:       assertEquals(49, Node.DIRECT_EVAL);
1325:       assertEquals(37, Node.OPT_ARG_NAME);
1326:       assertEquals(32, Node.INCRDECR_PROP);
1327:       assertEquals(1, Node.DECR_FLAG);
1328:       assertEquals(2, Node.POST_FLAG);
1329:       assertEquals(47, Node.IS_DISPATCHER);
1330:       assertEquals(57, Node.LAST_PROP);
1331:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1332:       assertEquals(30, Node.VAR_ARGS_NAME);
1333:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1334:       assertEquals(57, Node.REFLECTED_OBJECT);
1335:       assertEquals(29, Node.JSDOC_INFO_PROP);
1336:       assertEquals(53, Node.INPUT_ID);
1337:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1338:       assertEquals(8, Node.FLAG_NO_THROWS);
1339:       assertEquals(39, Node.EMPTY_BLOCK);
1340:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1341:       assertEquals(56, Node.CHANGE_TIME);
1342:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1343:       assertEquals(52, Node.LENGTH);
1344:       assertEquals(36, Node.QUOTED_PROP);
1345:       assertEquals(4095, Node.COLUMN_MASK);
1346:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1347:       assertEquals(55, Node.INFERRED_FUNCTION);
1348:       assertEquals(48, Node.DIRECTIVES);
1349:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1350:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1351:       assertEquals(40, Node.ORIGINALNAME_PROP);
1352:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1353:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1354:       assertEquals(54, Node.SLASH_V);
1355:       assertEquals(43, Node.IS_CONSTANT_NAME);
1356:       assertEquals(50, Node.FREE_CALL);
1357:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1358:       assertFalse(node1.equals((Object)node0));
1359:       assertFalse(node1.equals((Object)node2));
1360:       assertFalse(node2.equals((Object)node0));
1361:       assertFalse(node2.equals((Object)node1));
1362:       assertNotSame(node1, node2);
1363:       assertNotSame(node2, node1);
1364:       
1365:       Node node3 = Node.newString(51, "@:z");
1366:       assertFalse(node3.isTrue());
1367:       assertFalse(node3.isFunction());
1368:       assertFalse(node3.isDebugger());
1369:       assertFalse(node3.isRegExp());
1370:       assertFalse(node3.isGetterDef());
1371:       assertFalse(node3.isDefaultCase());
1372:       assertFalse(node3.isFor());
1373:       assertFalse(node3.isEmpty());
1374:       assertFalse(node3.isTry());
1375:       assertEquals(0, node3.getChildCount());
1376:       assertFalse(node3.isStringKey());
1377:       assertFalse(node3.isParamList());
1378:       assertFalse(node3.isSwitch());
1379:       assertFalse(node3.isArrayLit());
1380:       assertFalse(node3.isHook());
1381:       assertFalse(node3.isBlock());
1382:       assertEquals((-1), node3.getCharno());
1383:       assertFalse(node3.isFalse());
1384:       assertFalse(node3.isThrow());
1385:       assertFalse(node3.isInc());
1386:       assertFalse(node3.isSetterDef());
1387:       assertFalse(node3.isCase());
1388:       assertEquals((-1), node3.getLineno());
1389:       assertFalse(node3.isInstanceOf());
1390:       assertFalse(node3.isCatch());
1391:       assertFalse(node3.isThis());
1392:       assertFalse(node3.hasMoreThanOneChild());
1393:       assertFalse(node3.isWith());
1394:       assertFalse(node3.isIf());
1395:       assertFalse(node3.isNE());
1396:       assertFalse(node3.isCast());
1397:       assertFalse(node3.isAssign());
1398:       assertFalse(node3.hasChildren());
1399:       assertFalse(node3.isNumber());
1400:       assertFalse(node3.isScript());
1401:       assertFalse(node3.hasOneChild());
1402:       assertFalse(node3.isLabel());
1403:       assertFalse(node3.isAssignAdd());
1404:       assertFalse(node3.isContinue());
1405:       assertFalse(node3.isObjectLit());
1406:       assertEquals(51, node3.getType());
1407:       assertEquals((-1), node3.getSourcePosition());
1408:       assertFalse(node3.isNot());
1409:       assertFalse(node3.isAnd());
1410:       assertFalse(node3.isLabelName());
1411:       assertFalse(node3.isAdd());
1412:       assertFalse(node3.isVar());
1413:       assertFalse(node3.isWhile());
1414:       assertFalse(node3.isString());
1415:       assertFalse(node3.isGetProp());
1416:       assertFalse(node3.isNew());
1417:       assertFalse(node3.isDo());
1418:       assertTrue(node3.isIn());
1419:       assertFalse(node3.isReturn());
1420:       assertFalse(node3.isTypeOf());
1421:       assertFalse(node3.isDec());
1422:       assertFalse(node3.isOr());
1423:       assertFalse(node3.isComma());
1424:       assertFalse(node3.isDelProp());
1425:       assertFalse(node3.isBreak());
1426:       assertFalse(node3.isNull());
1427:       assertFalse(node3.isGetElem());
1428:       assertFalse(node3.isExprResult());
1429:       assertFalse(node3.isCall());
1430:       assertFalse(node3.isName());
1431:       assertFalse(node3.isVoid());
1432:       assertEquals(2, Node.POST_FLAG);
1433:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1434:       assertEquals(47, Node.IS_DISPATCHER);
1435:       assertEquals(56, Node.CHANGE_TIME);
1436:       assertEquals(29, Node.JSDOC_INFO_PROP);
1437:       assertEquals(37, Node.OPT_ARG_NAME);
1438:       assertEquals(32, Node.INCRDECR_PROP);
1439:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1440:       assertEquals(12, Node.COLUMN_BITS);
1441:       assertEquals(30, Node.VAR_ARGS_NAME);
1442:       assertEquals(36, Node.QUOTED_PROP);
1443:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1444:       assertEquals(57, Node.LAST_PROP);
1445:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1446:       assertEquals(49, Node.DIRECT_EVAL);
1447:       assertEquals(53, Node.INPUT_ID);
1448:       assertEquals(57, Node.REFLECTED_OBJECT);
1449:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1450:       assertEquals(55, Node.INFERRED_FUNCTION);
1451:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1452:       assertEquals(52, Node.LENGTH);
1453:       assertEquals(8, Node.FLAG_NO_THROWS);
1454:       assertEquals(39, Node.EMPTY_BLOCK);
1455:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1456:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1457:       assertEquals(48, Node.DIRECTIVES);
1458:       assertEquals(4095, Node.COLUMN_MASK);
1459:       assertEquals(40, Node.ORIGINALNAME_PROP);
1460:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1461:       assertEquals(54, Node.SLASH_V);
1462:       assertEquals(43, Node.IS_CONSTANT_NAME);
1463:       assertEquals(1, Node.DECR_FLAG);
1464:       assertEquals(46, Node.IS_NAMESPACE);
1465:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1466:       assertEquals(50, Node.FREE_CALL);
1467:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1468:       assertNotNull(node3);
1469:       assertFalse(node3.equals((Object)node2));
1470:       assertFalse(node3.equals((Object)node0));
1471:       assertFalse(node3.equals((Object)node1));
1472:       
1473:       InputId inputId0 = node0.getInputId();
1474:       assertFalse(node0.isTry());
1475:       assertFalse(node0.isArrayLit());
1476:       assertFalse(node0.isVoid());
1477:       assertFalse(node0.isEmpty());
1478:       assertFalse(node0.isIf());
1479:       assertFalse(node0.isNE());
1480:       assertFalse(node0.isTrue());
1481:       assertFalse(node0.isGetterDef());
1482:       assertFalse(node0.isDebugger());
1483:       assertFalse(node0.isIn());
1484:       assertFalse(node0.isParamList());
1485:       assertFalse(node0.isSetterDef());
1486:       assertFalse(node0.isDefaultCase());
1487:       assertFalse(node0.isVar());
1488:       assertFalse(node0.isFunction());
1489:       assertEquals(0, node0.getChildCount());
1490:       assertFalse(node0.isBlock());
1491:       assertFalse(node0.isSwitch());
1492:       assertFalse(node0.isInc());
1493:       assertFalse(node0.isStringKey());
1494:       assertEquals(47, node0.getType());
1495:       assertFalse(node0.isInstanceOf());
1496:       assertFalse(node0.isCase());
1497:       assertFalse(node0.isFor());
1498:       assertFalse(node0.isWith());
1499:       assertFalse(node0.isCatch());
1500:       assertFalse(node0.hasMoreThanOneChild());
1501:       assertFalse(node0.isThis());
1502:       assertFalse(node0.isHook());
1503:       assertEquals(192559, node0.getSourcePosition());
1504:       assertFalse(node0.isScript());
1505:       assertFalse(node0.isCast());
1506:       assertFalse(node0.isExprResult());
1507:       assertFalse(node0.hasOneChild());
1508:       assertTrue(node0.isRegExp());
1509:       assertFalse(node0.isNot());
1510:       assertFalse(node0.isLabelName());
1511:       assertFalse(node0.isAnd());
1512:       assertFalse(node0.isNumber());
1513:       assertFalse(node0.isObjectLit());
1514:       assertFalse(node0.isLabel());
1515:       assertFalse(node0.isOr());
1516:       assertFalse(node0.isAssignAdd());
1517:       assertFalse(node0.isDo());
1518:       assertFalse(node0.isFalse());
1519:       assertFalse(node0.isContinue());
1520:       assertFalse(node0.isThrow());
1521:       assertFalse(node0.isAdd());
1522:       assertFalse(node0.isCall());
1523:       assertEquals(47, node0.getLineno());
1524:       assertFalse(node0.isNew());
1525:       assertFalse(node0.isName());
1526:       assertFalse(node0.isString());
1527:       assertFalse(node0.isNull());
1528:       assertFalse(node0.isReturn());
1529:       assertFalse(node0.isBreak());
1530:       assertFalse(node0.isGetProp());
1531:       assertFalse(node0.isDelProp());
1532:       assertFalse(node0.isAssign());
1533:       assertFalse(node0.isGetElem());
1534:       assertFalse(node0.isWhile());
1535:       assertFalse(node0.isTypeOf());
1536:       assertFalse(node0.hasChildren());
1537:       assertEquals(47, node0.getCharno());
1538:       assertFalse(node0.isDec());
1539:       assertFalse(node0.isComma());
1540:       assertEquals(56, Node.CHANGE_TIME);
1541:       assertEquals(47, Node.IS_DISPATCHER);
1542:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1543:       assertEquals(2, Node.POST_FLAG);
1544:       assertEquals(12, Node.COLUMN_BITS);
1545:       assertEquals(32, Node.INCRDECR_PROP);
1546:       assertEquals(1, Node.DECR_FLAG);
1547:       assertEquals(29, Node.JSDOC_INFO_PROP);
1548:       assertEquals(53, Node.INPUT_ID);
1549:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1550:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1551:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1552:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1553:       assertEquals(36, Node.QUOTED_PROP);
1554:       assertEquals(57, Node.REFLECTED_OBJECT);
1555:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1556:       assertEquals(4095, Node.COLUMN_MASK);
1557:       assertEquals(48, Node.DIRECTIVES);
1558:       assertEquals(49, Node.DIRECT_EVAL);
1559:       assertEquals(37, Node.OPT_ARG_NAME);
1560:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1561:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1562:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1563:       assertEquals(8, Node.FLAG_NO_THROWS);
1564:       assertEquals(50, Node.FREE_CALL);
1565:       assertEquals(55, Node.INFERRED_FUNCTION);
1566:       assertEquals(52, Node.LENGTH);
1567:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1568:       assertEquals(39, Node.EMPTY_BLOCK);
1569:       assertEquals(57, Node.LAST_PROP);
1570:       assertEquals(43, Node.IS_CONSTANT_NAME);
1571:       assertEquals(54, Node.SLASH_V);
1572:       assertEquals(30, Node.VAR_ARGS_NAME);
1573:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1574:       assertEquals(46, Node.IS_NAMESPACE);
1575:       assertEquals(40, Node.ORIGINALNAME_PROP);
1576:       assertNull(inputId0);
1577:       assertFalse(node0.equals((Object)node2));
1578:       assertFalse(node0.equals((Object)node1));
1579:       assertFalse(node0.equals((Object)node3));
1580:       
1581:       Node node4 = node3.useSourceInfoIfMissingFromForTree(node2);
1582:       assertFalse(node1.isNew());
1583:       assertFalse(node1.isDo());
1584:       assertFalse(node1.isBlock());
1585:       assertFalse(node1.isWhile());
1586:       assertFalse(node1.isVar());
1587:       assertFalse(node1.hasMoreThanOneChild());
1588:       assertEquals((-1), node1.getLineno());
1589:       assertFalse(node1.isContinue());
1590:       assertFalse(node1.isCall());
1591:       assertFalse(node1.isTypeOf());
1592:       assertFalse(node1.isNumber());
1593:       assertFalse(node1.hasChildren());
1594:       assertFalse(node1.isDec());
1595:       assertEquals((-1), node1.getSourcePosition());
1596:       assertFalse(node1.isLabelName());
1597:       assertFalse(node1.isStringKey());
1598:       assertFalse(node1.isParamList());
1599:       assertFalse(node1.hasOneChild());
1600:       assertFalse(node1.isDefaultCase());
1601:       assertFalse(node1.isVoid());
1602:       assertFalse(node1.isTrue());
1603:       assertFalse(node1.isArrayLit());
1604:       assertEquals(0, node1.getChildCount());
1605:       assertFalse(node1.isAssign());
1606:       assertFalse(node1.isGetElem());
1607:       assertFalse(node1.isExprResult());
1608:       assertFalse(node1.isNull());
1609:       assertFalse(node1.isBreak());
1610:       assertFalse(node1.isDelProp());
1611:       assertFalse(node1.isLabel());
1612:       assertFalse(node1.isAssignAdd());
1613:       assertFalse(node1.isName());
1614:       assertFalse(node1.isOr());
1615:       assertFalse(node1.isAdd());
1616:       assertFalse(node1.isEmpty());
1617:       assertEquals(4, node1.getType());
1618:       assertFalse(node1.isSwitch());
1619:       assertFalse(node1.isInc());
1620:       assertEquals((-1), node1.getCharno());
1621:       assertFalse(node1.isHook());
1622:       assertFalse(node1.isFalse());
1623:       assertTrue(node1.isReturn());
1624:       assertFalse(node1.isThis());
1625:       assertFalse(node1.isGetterDef());
1626:       assertFalse(node1.isComma());
1627:       assertFalse(node1.isFor());
1628:       assertFalse(node1.isObjectLit());
1629:       assertFalse(node1.isNot());
1630:       assertFalse(node1.isCase());
1631:       assertFalse(node1.isGetProp());
1632:       assertFalse(node1.isString());
1633:       assertFalse(node1.isScript());
1634:       assertFalse(node1.isRegExp());
1635:       assertFalse(node1.isFunction());
1636:       assertFalse(node1.isDebugger());
1637:       assertFalse(node1.isTry());
1638:       assertFalse(node1.isAnd());
1639:       assertFalse(node1.isWith());
1640:       assertFalse(node1.isCast());
1641:       assertFalse(node1.isInstanceOf());
1642:       assertFalse(node1.isCatch());
1643:       assertFalse(node1.isNE());
1644:       assertFalse(node1.isSetterDef());
1645:       assertFalse(node1.isIf());
1646:       assertFalse(node1.isThrow());
1647:       assertFalse(node1.isIn());
1648:       assertFalse(node2.isDelProp());
1649:       assertFalse(node2.isGetterDef());
1650:       assertFalse(node2.isIf());
1651:       assertFalse(node2.isEmpty());
1652:       assertFalse(node2.isFor());
1653:       assertFalse(node2.isNE());
1654:       assertFalse(node2.isIn());
1655:       assertFalse(node2.isCase());
1656:       assertFalse(node2.isTry());
1657:       assertFalse(node2.isString());
1658:       assertFalse(node2.isDefaultCase());
1659:       assertEquals((-1), node2.getCharno());
1660:       assertFalse(node2.isFunction());
1661:       assertFalse(node2.isDebugger());
1662:       assertEquals(0, node2.getChildCount());
1663:       assertFalse(node2.isParamList());
1664:       assertFalse(node2.isSwitch());
1665:       assertFalse(node2.isArrayLit());
1666:       assertFalse(node2.isBreak());
1667:       assertFalse(node2.isNull());
1668:       assertFalse(node2.isComma());
1669:       assertFalse(node2.isAdd());
1670:       assertFalse(node2.isVar());
1671:       assertFalse(node2.isGetProp());
1672:       assertFalse(node2.isNew());
1673:       assertFalse(node2.isWhile());
1674:       assertFalse(node2.isTrue());
1675:       assertEquals(4, node2.getType());
1676:       assertFalse(node2.isExprResult());
1677:       assertFalse(node2.isVoid());
1678:       assertFalse(node2.isCall());
1679:       assertFalse(node2.isName());
1680:       assertFalse(node2.hasChildren());
1681:       assertFalse(node2.isNumber());
1682:       assertFalse(node2.isGetElem());
1683:       assertFalse(node2.isLabel());
1684:       assertFalse(node2.isTypeOf());
1685:       assertEquals((-1), node2.getSourcePosition());
1686:       assertFalse(node2.isDec());
1687:       assertFalse(node2.isAssign());
1688:       assertFalse(node2.isOr());
1689:       assertFalse(node2.isAssignAdd());
1690:       assertFalse(node2.hasOneChild());
1691:       assertFalse(node2.isDo());
1692:       assertFalse(node2.isScript());
1693:       assertFalse(node2.isContinue());
1694:       assertFalse(node2.isObjectLit());
1695:       assertFalse(node2.isNot());
1696:       assertFalse(node2.isCast());
1697:       assertFalse(node2.isAnd());
1698:       assertFalse(node2.isLabelName());
1699:       assertFalse(node2.isStringKey());
1700:       assertFalse(node2.isThrow());
1701:       assertFalse(node2.isThis());
1702:       assertFalse(node2.isFalse());
1703:       assertFalse(node2.isHook());
1704:       assertFalse(node2.isBlock());
1705:       assertFalse(node2.isInc());
1706:       assertFalse(node2.isSetterDef());
1707:       assertFalse(node2.isWith());
1708:       assertTrue(node2.isReturn());
1709:       assertFalse(node2.hasMoreThanOneChild());
1710:       assertFalse(node2.isRegExp());
1711:       assertEquals((-1), node2.getLineno());
1712:       assertFalse(node2.isInstanceOf());
1713:       assertFalse(node2.isCatch());
1714:       assertFalse(node3.isTrue());
1715:       assertFalse(node3.isFunction());
1716:       assertFalse(node3.isDebugger());
1717:       assertFalse(node3.isRegExp());
1718:       assertFalse(node3.isGetterDef());
1719:       assertFalse(node3.isDefaultCase());
1720:       assertFalse(node3.isFor());
1721:       assertFalse(node3.isEmpty());
1722:       assertFalse(node3.isTry());
1723:       assertEquals(0, node3.getChildCount());
1724:       assertFalse(node3.isStringKey());
1725:       assertFalse(node3.isParamList());
1726:       assertFalse(node3.isSwitch());
1727:       assertFalse(node3.isArrayLit());
1728:       assertFalse(node3.isHook());
1729:       assertFalse(node3.isBlock());
1730:       assertEquals((-1), node3.getCharno());
1731:       assertFalse(node3.isFalse());
1732:       assertFalse(node3.isThrow());
1733:       assertFalse(node3.isInc());
1734:       assertFalse(node3.isSetterDef());
1735:       assertFalse(node3.isCase());
1736:       assertEquals((-1), node3.getLineno());
1737:       assertFalse(node3.isInstanceOf());
1738:       assertFalse(node3.isCatch());
1739:       assertFalse(node3.isThis());
1740:       assertFalse(node3.hasMoreThanOneChild());
1741:       assertFalse(node3.isWith());
1742:       assertFalse(node3.isIf());
1743:       assertFalse(node3.isNE());
1744:       assertFalse(node3.isCast());
1745:       assertFalse(node3.isAssign());
1746:       assertFalse(node3.hasChildren());
1747:       assertFalse(node3.isNumber());
1748:       assertFalse(node3.isScript());
1749:       assertFalse(node3.hasOneChild());
1750:       assertFalse(node3.isLabel());
1751:       assertFalse(node3.isAssignAdd());
1752:       assertFalse(node3.isContinue());
1753:       assertFalse(node3.isObjectLit());
1754:       assertEquals(51, node3.getType());
1755:       assertEquals((-1), node3.getSourcePosition());
1756:       assertFalse(node3.isNot());
1757:       assertFalse(node3.isAnd());
1758:       assertFalse(node3.isLabelName());
1759:       assertFalse(node3.isAdd());
1760:       assertFalse(node3.isVar());
1761:       assertFalse(node3.isWhile());
1762:       assertFalse(node3.isString());
1763:       assertFalse(node3.isGetProp());
1764:       assertFalse(node3.isNew());
1765:       assertFalse(node3.isDo());
1766:       assertTrue(node3.isIn());
1767:       assertFalse(node3.isReturn());
1768:       assertFalse(node3.isTypeOf());
1769:       assertFalse(node3.isDec());
1770:       assertFalse(node3.isOr());
1771:       assertFalse(node3.isComma());
1772:       assertFalse(node3.isDelProp());
1773:       assertFalse(node3.isBreak());
1774:       assertFalse(node3.isNull());
1775:       assertFalse(node3.isGetElem());
1776:       assertFalse(node3.isExprResult());
1777:       assertFalse(node3.isCall());
1778:       assertFalse(node3.isName());
1779:       assertFalse(node3.isVoid());
1780:       assertFalse(node4.isObjectLit());
1781:       assertFalse(node4.isAnd());
1782:       assertFalse(node4.isInstanceOf());
1783:       assertFalse(node4.isWith());
1784:       assertFalse(node4.isNot());
1785:       assertFalse(node4.isExprResult());
1786:       assertFalse(node4.isBreak());
1787:       assertFalse(node4.isFalse());
1788:       assertFalse(node4.isCast());
1789:       assertFalse(node4.isThrow());
1790:       assertFalse(node4.isInc());
1791:       assertFalse(node4.isAssignAdd());
1792:       assertFalse(node4.hasMoreThanOneChild());
1793:       assertFalse(node4.isLabel());
1794:       assertEquals((-1), node4.getCharno());
1795:       assertFalse(node4.isSwitch());
1796:       assertFalse(node4.isNE());
1797:       assertFalse(node4.isIf());
1798:       assertFalse(node4.isLabelName());
1799:       assertEquals((-1), node4.getLineno());
1800:       assertFalse(node4.isFor());
1801:       assertFalse(node4.isStringKey());
1802:       assertFalse(node4.isGetterDef());
1803:       assertFalse(node4.isNumber());
1804:       assertFalse(node4.isHook());
1805:       assertFalse(node4.isThis());
1806:       assertEquals(51, node4.getType());
1807:       assertFalse(node4.isBlock());
1808:       assertFalse(node4.isScript());
1809:       assertFalse(node4.isCase());
1810:       assertFalse(node4.isTry());
1811:       assertFalse(node4.hasOneChild());
1812:       assertFalse(node4.isCatch());
1813:       assertFalse(node4.isRegExp());
1814:       assertEquals(0, node4.getChildCount());
1815:       assertFalse(node4.isTrue());
1816:       assertFalse(node4.isVoid());
1817:       assertFalse(node4.isDebugger());
1818:       assertFalse(node4.isFunction());
1819:       assertFalse(node4.isNull());
1820:       assertFalse(node4.isParamList());
1821:       assertFalse(node4.isName());
1822:       assertFalse(node4.isArrayLit());
1823:       assertFalse(node4.isVar());
1824:       assertFalse(node4.isEmpty());
1825:       assertFalse(node4.isSetterDef());
1826:       assertFalse(node4.isAdd());
1827:       assertFalse(node4.isDefaultCase());
1828:       assertFalse(node4.isDo());
1829:       assertTrue(node4.isIn());
1830:       assertFalse(node4.isNew());
1831:       assertFalse(node4.isContinue());
1832:       assertFalse(node4.isWhile());
1833:       assertFalse(node4.isString());
1834:       assertFalse(node4.isReturn());
1835:       assertFalse(node4.isOr());
1836:       assertFalse(node4.isDelProp());
1837:       assertFalse(node4.isCall());
1838:       assertFalse(node4.isGetElem());
1839:       assertFalse(node4.hasChildren());
1840:       assertFalse(node4.isAssign());
1841:       assertFalse(node4.isTypeOf());
1842:       assertFalse(node4.isDec());
1843:       assertFalse(node4.isComma());
1844:       assertEquals((-1), node4.getSourcePosition());
1845:       assertFalse(node4.isGetProp());
1846:       assertEquals(40, Node.ORIGINALNAME_PROP);
1847:       assertEquals(50, Node.FREE_CALL);
1848:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1849:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1850:       assertEquals(52, Node.LENGTH);
1851:       assertEquals(48, Node.DIRECTIVES);
1852:       assertEquals(54, Node.SLASH_V);
1853:       assertEquals(8, Node.FLAG_NO_THROWS);
1854:       assertEquals(57, Node.REFLECTED_OBJECT);
1855:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1856:       assertEquals(30, Node.VAR_ARGS_NAME);
1857:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1858:       assertEquals(55, Node.INFERRED_FUNCTION);
1859:       assertEquals(39, Node.EMPTY_BLOCK);
1860:       assertEquals(53, Node.INPUT_ID);
1861:       assertEquals(2, Node.POST_FLAG);
1862:       assertEquals(57, Node.LAST_PROP);
1863:       assertEquals(47, Node.IS_DISPATCHER);
1864:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1865:       assertEquals(29, Node.JSDOC_INFO_PROP);
1866:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1867:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1868:       assertEquals(37, Node.OPT_ARG_NAME);
1869:       assertEquals(36, Node.QUOTED_PROP);
1870:       assertEquals(46, Node.IS_NAMESPACE);
1871:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1872:       assertEquals(43, Node.IS_CONSTANT_NAME);
1873:       assertEquals(56, Node.CHANGE_TIME);
1874:       assertEquals(1, Node.DECR_FLAG);
1875:       assertEquals(49, Node.DIRECT_EVAL);
1876:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1877:       assertEquals(4095, Node.COLUMN_MASK);
1878:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1879:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1880:       assertEquals(32, Node.INCRDECR_PROP);
1881:       assertEquals(12, Node.COLUMN_BITS);
1882:       assertEquals(12, Node.COLUMN_BITS);
1883:       assertEquals(46, Node.IS_NAMESPACE);
1884:       assertEquals(49, Node.DIRECT_EVAL);
1885:       assertEquals(37, Node.OPT_ARG_NAME);
1886:       assertEquals(32, Node.INCRDECR_PROP);
1887:       assertEquals(1, Node.DECR_FLAG);
1888:       assertEquals(2, Node.POST_FLAG);
1889:       assertEquals(47, Node.IS_DISPATCHER);
1890:       assertEquals(57, Node.LAST_PROP);
1891:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1892:       assertEquals(30, Node.VAR_ARGS_NAME);
1893:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1894:       assertEquals(57, Node.REFLECTED_OBJECT);
1895:       assertEquals(29, Node.JSDOC_INFO_PROP);
1896:       assertEquals(53, Node.INPUT_ID);
1897:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1898:       assertEquals(8, Node.FLAG_NO_THROWS);
1899:       assertEquals(39, Node.EMPTY_BLOCK);
1900:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1901:       assertEquals(56, Node.CHANGE_TIME);
1902:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1903:       assertEquals(52, Node.LENGTH);
1904:       assertEquals(36, Node.QUOTED_PROP);
1905:       assertEquals(4095, Node.COLUMN_MASK);
1906:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1907:       assertEquals(55, Node.INFERRED_FUNCTION);
1908:       assertEquals(48, Node.DIRECTIVES);
1909:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1910:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1911:       assertEquals(40, Node.ORIGINALNAME_PROP);
1912:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1913:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1914:       assertEquals(54, Node.SLASH_V);
1915:       assertEquals(43, Node.IS_CONSTANT_NAME);
1916:       assertEquals(50, Node.FREE_CALL);
1917:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1918:       assertEquals(2, Node.POST_FLAG);
1919:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1920:       assertEquals(47, Node.IS_DISPATCHER);
1921:       assertEquals(56, Node.CHANGE_TIME);
1922:       assertEquals(29, Node.JSDOC_INFO_PROP);
1923:       assertEquals(37, Node.OPT_ARG_NAME);
1924:       assertEquals(32, Node.INCRDECR_PROP);
1925:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1926:       assertEquals(12, Node.COLUMN_BITS);
1927:       assertEquals(30, Node.VAR_ARGS_NAME);
1928:       assertEquals(36, Node.QUOTED_PROP);
1929:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1930:       assertEquals(57, Node.LAST_PROP);
1931:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1932:       assertEquals(49, Node.DIRECT_EVAL);
1933:       assertEquals(53, Node.INPUT_ID);
1934:       assertEquals(57, Node.REFLECTED_OBJECT);
1935:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1936:       assertEquals(55, Node.INFERRED_FUNCTION);
1937:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1938:       assertEquals(52, Node.LENGTH);
1939:       assertEquals(8, Node.FLAG_NO_THROWS);
1940:       assertEquals(39, Node.EMPTY_BLOCK);
1941:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1942:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1943:       assertEquals(48, Node.DIRECTIVES);
1944:       assertEquals(4095, Node.COLUMN_MASK);
1945:       assertEquals(40, Node.ORIGINALNAME_PROP);
1946:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1947:       assertEquals(54, Node.SLASH_V);
1948:       assertEquals(43, Node.IS_CONSTANT_NAME);
1949:       assertEquals(1, Node.DECR_FLAG);
1950:       assertEquals(46, Node.IS_NAMESPACE);
1951:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1952:       assertEquals(50, Node.FREE_CALL);
1953:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1954:       assertEquals(53, Node.INPUT_ID);
1955:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1956:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1957:       assertEquals(29, Node.JSDOC_INFO_PROP);
1958:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1959:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1960:       assertEquals(43, Node.IS_CONSTANT_NAME);
1961:       assertEquals(56, Node.CHANGE_TIME);
1962:       assertEquals(36, Node.QUOTED_PROP);
1963:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1964:       assertEquals(48, Node.DIRECTIVES);
1965:       assertEquals(32, Node.INCRDECR_PROP);
1966:       assertEquals(1, Node.DECR_FLAG);
1967:       assertEquals(37, Node.OPT_ARG_NAME);
1968:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1969:       assertEquals(4095, Node.COLUMN_MASK);
1970:       assertEquals(12, Node.COLUMN_BITS);
1971:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1972:       assertEquals(52, Node.LENGTH);
1973:       assertEquals(54, Node.SLASH_V);
1974:       assertEquals(40, Node.ORIGINALNAME_PROP);
1975:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1976:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1977:       assertEquals(49, Node.DIRECT_EVAL);
1978:       assertEquals(50, Node.FREE_CALL);
1979:       assertEquals(8, Node.FLAG_NO_THROWS);
1980:       assertEquals(57, Node.REFLECTED_OBJECT);
1981:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1982:       assertEquals(46, Node.IS_NAMESPACE);
1983:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1984:       assertEquals(55, Node.INFERRED_FUNCTION);
1985:       assertEquals(39, Node.EMPTY_BLOCK);
1986:       assertEquals(30, Node.VAR_ARGS_NAME);
1987:       assertEquals(57, Node.LAST_PROP);
1988:       assertEquals(2, Node.POST_FLAG);
1989:       assertEquals(47, Node.IS_DISPATCHER);
1990:       assertNotNull(node4);
1991:       assertFalse(node1.equals((Object)node0));
1992:       assertFalse(node1.equals((Object)node2));
1993:       assertFalse(node1.equals((Object)node3));
1994:       assertFalse(node2.equals((Object)node3));
1995:       assertFalse(node2.equals((Object)node0));
1996:       assertFalse(node2.equals((Object)node1));
1997:       assertFalse(node3.equals((Object)node2));
1998:       assertFalse(node3.equals((Object)node0));
1999:       assertFalse(node3.equals((Object)node1));
2000:       assertFalse(node4.equals((Object)node1));
2001:       assertFalse(node4.equals((Object)node2));
2002:       assertFalse(node4.equals((Object)node0));
2003:       assertNotSame(node1, node2);
2004:       assertNotSame(node2, node1);
2005:       assertSame(node3, node4);
2006:       assertSame(node4, node3);
2007:       
2008:       String string1 = node3.toStringTree();
2009:       assertFalse(node3.isTrue());
2010:       assertFalse(node3.isFunction());
2011:       assertFalse(node3.isDebugger());
2012:       assertFalse(node3.isRegExp());
2013:       assertFalse(node3.isGetterDef());
2014:       assertFalse(node3.isDefaultCase());
2015:       assertFalse(node3.isFor());
2016:       assertFalse(node3.isEmpty());
2017:       assertFalse(node3.isTry());
2018:       assertEquals(0, node3.getChildCount());
2019:       assertFalse(node3.isStringKey());
2020:       assertFalse(node3.isParamList());
2021:       assertFalse(node3.isSwitch());
2022:       assertFalse(node3.isArrayLit());
2023:       assertFalse(node3.isHook());
2024:       assertFalse(node3.isBlock());
2025:       assertEquals((-1), node3.getCharno());
2026:       assertFalse(node3.isFalse());
2027:       assertFalse(node3.isThrow());
2028:       assertFalse(node3.isInc());
2029:       assertFalse(node3.isSetterDef());
2030:       assertFalse(node3.isCase());
2031:       assertEquals((-1), node3.getLineno());
2032:       assertFalse(node3.isInstanceOf());
2033:       assertFalse(node3.isCatch());
2034:       assertFalse(node3.isThis());
2035:       assertFalse(node3.hasMoreThanOneChild());
2036:       assertFalse(node3.isWith());
2037:       assertFalse(node3.isIf());
2038:       assertFalse(node3.isNE());
2039:       assertFalse(node3.isCast());
2040:       assertFalse(node3.isAssign());
2041:       assertFalse(node3.hasChildren());
2042:       assertFalse(node3.isNumber());
2043:       assertFalse(node3.isScript());
2044:       assertFalse(node3.hasOneChild());
2045:       assertFalse(node3.isLabel());
2046:       assertFalse(node3.isAssignAdd());
2047:       assertFalse(node3.isContinue());
2048:       assertFalse(node3.isObjectLit());
2049:       assertEquals(51, node3.getType());
2050:       assertEquals((-1), node3.getSourcePosition());
2051:       assertFalse(node3.isNot());
2052:       assertFalse(node3.isAnd());
2053:       assertFalse(node3.isLabelName());
2054:       assertFalse(node3.isAdd());
2055:       assertFalse(node3.isVar());
2056:       assertFalse(node3.isWhile());
2057:       assertFalse(node3.isString());
2058:       assertFalse(node3.isGetProp());
2059:       assertFalse(node3.isNew());
2060:       assertFalse(node3.isDo());
2061:       assertTrue(node3.isIn());
2062:       assertFalse(node3.isReturn());
2063:       assertFalse(node3.isTypeOf());
2064:       assertFalse(node3.isDec());
2065:       assertFalse(node3.isOr());
2066:       assertFalse(node3.isComma());
2067:       assertFalse(node3.isDelProp());
2068:       assertFalse(node3.isBreak());
2069:       assertFalse(node3.isNull());
2070:       assertFalse(node3.isGetElem());
2071:       assertFalse(node3.isExprResult());
2072:       assertFalse(node3.isCall());
2073:       assertFalse(node3.isName());
2074:       assertFalse(node3.isVoid());
2075:       assertEquals(2, Node.POST_FLAG);
2076:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2077:       assertEquals(47, Node.IS_DISPATCHER);
2078:       assertEquals(56, Node.CHANGE_TIME);
2079:       assertEquals(29, Node.JSDOC_INFO_PROP);
2080:       assertEquals(37, Node.OPT_ARG_NAME);
2081:       assertEquals(32, Node.INCRDECR_PROP);
2082:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2083:       assertEquals(12, Node.COLUMN_BITS);
2084:       assertEquals(30, Node.VAR_ARGS_NAME);
2085:       assertEquals(36, Node.QUOTED_PROP);
2086:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2087:       assertEquals(57, Node.LAST_PROP);
2088:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2089:       assertEquals(49, Node.DIRECT_EVAL);
2090:       assertEquals(53, Node.INPUT_ID);
2091:       assertEquals(57, Node.REFLECTED_OBJECT);
2092:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2093:       assertEquals(55, Node.INFERRED_FUNCTION);
2094:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2095:       assertEquals(52, Node.LENGTH);
2096:       assertEquals(8, Node.FLAG_NO_THROWS);
2097:       assertEquals(39, Node.EMPTY_BLOCK);
2098:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2099:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2100:       assertEquals(48, Node.DIRECTIVES);
2101:       assertEquals(4095, Node.COLUMN_MASK);
2102:       assertEquals(40, Node.ORIGINALNAME_PROP);
2103:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2104:       assertEquals(54, Node.SLASH_V);
2105:       assertEquals(43, Node.IS_CONSTANT_NAME);
2106:       assertEquals(1, Node.DECR_FLAG);
2107:       assertEquals(46, Node.IS_NAMESPACE);
2108:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2109:       assertEquals(50, Node.FREE_CALL);
2110:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2111:       assertNotNull(string1);
2112:       assertFalse(node3.equals((Object)node2));
2113:       assertFalse(node3.equals((Object)node0));
2114:       assertFalse(node3.equals((Object)node1));
2115:       assertFalse(string1.equals((Object)string0));
2116:       assertSame(node3, node4);
2117:       
2118:       node3.removeProp(46);
2119:       assertFalse(node3.isTrue());
2120:       assertFalse(node3.isFunction());
2121:       assertFalse(node3.isDebugger());
2122:       assertFalse(node3.isRegExp());
2123:       assertFalse(node3.isGetterDef());
2124:       assertFalse(node3.isDefaultCase());
2125:       assertFalse(node3.isFor());
2126:       assertFalse(node3.isEmpty());
2127:       assertFalse(node3.isTry());
2128:       assertEquals(0, node3.getChildCount());
2129:       assertFalse(node3.isStringKey());
2130:       assertFalse(node3.isParamList());
2131:       assertFalse(node3.isSwitch());
2132:       assertFalse(node3.isArrayLit());
2133:       assertFalse(node3.isHook());
2134:       assertFalse(node3.isBlock());
2135:       assertEquals((-1), node3.getCharno());
2136:       assertFalse(node3.isFalse());
2137:       assertFalse(node3.isThrow());
2138:       assertFalse(node3.isInc());
2139:       assertFalse(node3.isSetterDef());
2140:       assertFalse(node3.isCase());
2141:       assertEquals((-1), node3.getLineno());
2142:       assertFalse(node3.isInstanceOf());
2143:       assertFalse(node3.isCatch());
2144:       assertFalse(node3.isThis());
2145:       assertFalse(node3.hasMoreThanOneChild());
2146:       assertFalse(node3.isWith());
2147:       assertFalse(node3.isIf());
2148:       assertFalse(node3.isNE());
2149:       assertFalse(node3.isCast());
2150:       assertFalse(node3.isAssign());
2151:       assertFalse(node3.hasChildren());
2152:       assertFalse(node3.isNumber());
2153:       assertFalse(node3.isScript());
2154:       assertFalse(node3.hasOneChild());
2155:       assertFalse(node3.isLabel());
2156:       assertFalse(node3.isAssignAdd());
2157:       assertFalse(node3.isContinue());
2158:       assertFalse(node3.isObjectLit());
2159:       assertEquals(51, node3.getType());
2160:       assertEquals((-1), node3.getSourcePosition());
2161:       assertFalse(node3.isNot());
2162:       assertFalse(node3.isAnd());
2163:       assertFalse(node3.isLabelName());
2164:       assertFalse(node3.isAdd());
2165:       assertFalse(node3.isVar());
2166:       assertFalse(node3.isWhile());
2167:       assertFalse(node3.isString());
2168:       assertFalse(node3.isGetProp());
2169:       assertFalse(node3.isNew());
2170:       assertFalse(node3.isDo());
2171:       assertTrue(node3.isIn());
2172:       assertFalse(node3.isReturn());
2173:       assertFalse(node3.isTypeOf());
2174:       assertFalse(node3.isDec());
2175:       assertFalse(node3.isOr());
2176:       assertFalse(node3.isComma());
2177:       assertFalse(node3.isDelProp());
2178:       assertFalse(node3.isBreak());
2179:       assertFalse(node3.isNull());
2180:       assertFalse(node3.isGetElem());
2181:       assertFalse(node3.isExprResult());
2182:       assertFalse(node3.isCall());
2183:       assertFalse(node3.isName());
2184:       assertFalse(node3.isVoid());
2185:       assertEquals(2, Node.POST_FLAG);
2186:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2187:       assertEquals(47, Node.IS_DISPATCHER);
2188:       assertEquals(56, Node.CHANGE_TIME);
2189:       assertEquals(29, Node.JSDOC_INFO_PROP);
2190:       assertEquals(37, Node.OPT_ARG_NAME);
2191:       assertEquals(32, Node.INCRDECR_PROP);
2192:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2193:       assertEquals(12, Node.COLUMN_BITS);
2194:       assertEquals(30, Node.VAR_ARGS_NAME);
2195:       assertEquals(36, Node.QUOTED_PROP);
2196:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2197:       assertEquals(57, Node.LAST_PROP);
2198:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2199:       assertEquals(49, Node.DIRECT_EVAL);
2200:       assertEquals(53, Node.INPUT_ID);
2201:       assertEquals(57, Node.REFLECTED_OBJECT);
2202:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2203:       assertEquals(55, Node.INFERRED_FUNCTION);
2204:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2205:       assertEquals(52, Node.LENGTH);
2206:       assertEquals(8, Node.FLAG_NO_THROWS);
2207:       assertEquals(39, Node.EMPTY_BLOCK);
2208:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2209:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2210:       assertEquals(48, Node.DIRECTIVES);
2211:       assertEquals(4095, Node.COLUMN_MASK);
2212:       assertEquals(40, Node.ORIGINALNAME_PROP);
2213:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2214:       assertEquals(54, Node.SLASH_V);
2215:       assertEquals(43, Node.IS_CONSTANT_NAME);
2216:       assertEquals(1, Node.DECR_FLAG);
2217:       assertEquals(46, Node.IS_NAMESPACE);
2218:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2219:       assertEquals(50, Node.FREE_CALL);
2220:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2221:       assertFalse(node3.equals((Object)node2));
2222:       assertFalse(node3.equals((Object)node0));
2223:       assertFalse(node3.equals((Object)node1));
2224:       assertSame(node3, node4);
2225:       
2226:       Node node5 = node2.getParent();
2227:       assertFalse(node1.isNew());
2228:       assertFalse(node1.isDo());
2229:       assertFalse(node1.isBlock());
2230:       assertFalse(node1.isWhile());
2231:       assertFalse(node1.isVar());
2232:       assertFalse(node1.hasMoreThanOneChild());
2233:       assertEquals((-1), node1.getLineno());
2234:       assertFalse(node1.isContinue());
2235:       assertFalse(node1.isCall());
2236:       assertFalse(node1.isTypeOf());
2237:       assertFalse(node1.isNumber());
2238:       assertFalse(node1.hasChildren());
2239:       assertFalse(node1.isDec());
2240:       assertEquals((-1), node1.getSourcePosition());
2241:       assertFalse(node1.isLabelName());
2242:       assertFalse(node1.isStringKey());
2243:       assertFalse(node1.isParamList());
2244:       assertFalse(node1.hasOneChild());
2245:       assertFalse(node1.isDefaultCase());
2246:       assertFalse(node1.isVoid());
2247:       assertFalse(node1.isTrue());
2248:       assertFalse(node1.isArrayLit());
2249:       assertEquals(0, node1.getChildCount());
2250:       assertFalse(node1.isAssign());
2251:       assertFalse(node1.isGetElem());
2252:       assertFalse(node1.isExprResult());
2253:       assertFalse(node1.isNull());
2254:       assertFalse(node1.isBreak());
2255:       assertFalse(node1.isDelProp());
2256:       assertFalse(node1.isLabel());
2257:       assertFalse(node1.isAssignAdd());
2258:       assertFalse(node1.isName());
2259:       assertFalse(node1.isOr());
2260:       assertFalse(node1.isAdd());
2261:       assertFalse(node1.isEmpty());
2262:       assertEquals(4, node1.getType());
2263:       assertFalse(node1.isSwitch());
2264:       assertFalse(node1.isInc());
2265:       assertEquals((-1), node1.getCharno());
2266:       assertFalse(node1.isHook());
2267:       assertFalse(node1.isFalse());
2268:       assertTrue(node1.isReturn());
2269:       assertFalse(node1.isThis());
2270:       assertFalse(node1.isGetterDef());
2271:       assertFalse(node1.isComma());
2272:       assertFalse(node1.isFor());
2273:       assertFalse(node1.isObjectLit());
2274:       assertFalse(node1.isNot());
2275:       assertFalse(node1.isCase());
2276:       assertFalse(node1.isGetProp());
2277:       assertFalse(node1.isString());
2278:       assertFalse(node1.isScript());
2279:       assertFalse(node1.isRegExp());
2280:       assertFalse(node1.isFunction());
2281:       assertFalse(node1.isDebugger());
2282:       assertFalse(node1.isTry());
2283:       assertFalse(node1.isAnd());
2284:       assertFalse(node1.isWith());
2285:       assertFalse(node1.isCast());
2286:       assertFalse(node1.isInstanceOf());
2287:       assertFalse(node1.isCatch());
2288:       assertFalse(node1.isNE());
2289:       assertFalse(node1.isSetterDef());
2290:       assertFalse(node1.isIf());
2291:       assertFalse(node1.isThrow());
2292:       assertFalse(node1.isIn());
2293:       assertFalse(node2.isDelProp());
2294:       assertFalse(node2.isGetterDef());
2295:       assertFalse(node2.isIf());
2296:       assertFalse(node2.isEmpty());
2297:       assertFalse(node2.isFor());
2298:       assertFalse(node2.isNE());
2299:       assertFalse(node2.isIn());
2300:       assertFalse(node2.isCase());
2301:       assertFalse(node2.isTry());
2302:       assertFalse(node2.isString());
2303:       assertFalse(node2.isDefaultCase());
2304:       assertEquals((-1), node2.getCharno());
2305:       assertFalse(node2.isFunction());
2306:       assertFalse(node2.isDebugger());
2307:       assertEquals(0, node2.getChildCount());
2308:       assertFalse(node2.isParamList());
2309:       assertFalse(node2.isSwitch());
2310:       assertFalse(node2.isArrayLit());
2311:       assertFalse(node2.isBreak());
2312:       assertFalse(node2.isNull());
2313:       assertFalse(node2.isComma());
2314:       assertFalse(node2.isAdd());
2315:       assertFalse(node2.isVar());
2316:       assertFalse(node2.isGetProp());
2317:       assertFalse(node2.isNew());
2318:       assertFalse(node2.isWhile());
2319:       assertFalse(node2.isTrue());
2320:       assertEquals(4, node2.getType());
2321:       assertFalse(node2.isExprResult());
2322:       assertFalse(node2.isVoid());
2323:       assertFalse(node2.isCall());
2324:       assertFalse(node2.isName());
2325:       assertFalse(node2.hasChildren());
2326:       assertFalse(node2.isNumber());
2327:       assertFalse(node2.isGetElem());
2328:       assertFalse(node2.isLabel());
2329:       assertFalse(node2.isTypeOf());
2330:       assertEquals((-1), node2.getSourcePosition());
2331:       assertFalse(node2.isDec());
2332:       assertFalse(node2.isAssign());
2333:       assertFalse(node2.isOr());
2334:       assertFalse(node2.isAssignAdd());
2335:       assertFalse(node2.hasOneChild());
2336:       assertFalse(node2.isDo());
2337:       assertFalse(node2.isScript());
2338:       assertFalse(node2.isContinue());
2339:       assertFalse(node2.isObjectLit());
2340:       assertFalse(node2.isNot());
2341:       assertFalse(node2.isCast());
2342:       assertFalse(node2.isAnd());
2343:       assertFalse(node2.isLabelName());
2344:       assertFalse(node2.isStringKey());
2345:       assertFalse(node2.isThrow());
2346:       assertFalse(node2.isThis());
2347:       assertFalse(node2.isFalse());
2348:       assertFalse(node2.isHook());
2349:       assertFalse(node2.isBlock());
2350:       assertFalse(node2.isInc());
2351:       assertFalse(node2.isSetterDef());
2352:       assertFalse(node2.isWith());
2353:       assertTrue(node2.isReturn());
2354:       assertFalse(node2.hasMoreThanOneChild());
2355:       assertFalse(node2.isRegExp());
2356:       assertEquals((-1), node2.getLineno());
2357:       assertFalse(node2.isInstanceOf());
2358:       assertFalse(node2.isCatch());
2359:       assertEquals(40, Node.ORIGINALNAME_PROP);
2360:       assertEquals(50, Node.FREE_CALL);
2361:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2362:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2363:       assertEquals(52, Node.LENGTH);
2364:       assertEquals(48, Node.DIRECTIVES);
2365:       assertEquals(54, Node.SLASH_V);
2366:       assertEquals(8, Node.FLAG_NO_THROWS);
2367:       assertEquals(57, Node.REFLECTED_OBJECT);
2368:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2369:       assertEquals(30, Node.VAR_ARGS_NAME);
2370:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2371:       assertEquals(55, Node.INFERRED_FUNCTION);
2372:       assertEquals(39, Node.EMPTY_BLOCK);
2373:       assertEquals(53, Node.INPUT_ID);
2374:       assertEquals(2, Node.POST_FLAG);
2375:       assertEquals(57, Node.LAST_PROP);
2376:       assertEquals(47, Node.IS_DISPATCHER);
2377:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2378:       assertEquals(29, Node.JSDOC_INFO_PROP);
2379:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2380:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2381:       assertEquals(37, Node.OPT_ARG_NAME);
2382:       assertEquals(36, Node.QUOTED_PROP);
2383:       assertEquals(46, Node.IS_NAMESPACE);
2384:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2385:       assertEquals(43, Node.IS_CONSTANT_NAME);
2386:       assertEquals(56, Node.CHANGE_TIME);
2387:       assertEquals(1, Node.DECR_FLAG);
2388:       assertEquals(49, Node.DIRECT_EVAL);
2389:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2390:       assertEquals(4095, Node.COLUMN_MASK);
2391:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2392:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2393:       assertEquals(32, Node.INCRDECR_PROP);
2394:       assertEquals(12, Node.COLUMN_BITS);
2395:       assertEquals(12, Node.COLUMN_BITS);
2396:       assertEquals(46, Node.IS_NAMESPACE);
2397:       assertEquals(49, Node.DIRECT_EVAL);
2398:       assertEquals(37, Node.OPT_ARG_NAME);
2399:       assertEquals(32, Node.INCRDECR_PROP);
2400:       assertEquals(1, Node.DECR_FLAG);
2401:       assertEquals(2, Node.POST_FLAG);
2402:       assertEquals(47, Node.IS_DISPATCHER);
2403:       assertEquals(57, Node.LAST_PROP);
2404:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2405:       assertEquals(30, Node.VAR_ARGS_NAME);
2406:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2407:       assertEquals(57, Node.REFLECTED_OBJECT);
2408:       assertEquals(29, Node.JSDOC_INFO_PROP);
2409:       assertEquals(53, Node.INPUT_ID);
2410:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2411:       assertEquals(8, Node.FLAG_NO_THROWS);
2412:       assertEquals(39, Node.EMPTY_BLOCK);
2413:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2414:       assertEquals(56, Node.CHANGE_TIME);
2415:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2416:       assertEquals(52, Node.LENGTH);
2417:       assertEquals(36, Node.QUOTED_PROP);
2418:       assertEquals(4095, Node.COLUMN_MASK);
2419:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2420:       assertEquals(55, Node.INFERRED_FUNCTION);
2421:       assertEquals(48, Node.DIRECTIVES);
2422:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2423:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2424:       assertEquals(40, Node.ORIGINALNAME_PROP);
2425:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2426:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2427:       assertEquals(54, Node.SLASH_V);
2428:       assertEquals(43, Node.IS_CONSTANT_NAME);
2429:       assertEquals(50, Node.FREE_CALL);
2430:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2431:       assertNull(node5);
2432:       assertFalse(node1.equals((Object)node4));
2433:       assertFalse(node1.equals((Object)node0));
2434:       assertFalse(node1.equals((Object)node2));
2435:       assertFalse(node1.equals((Object)node3));
2436:       assertFalse(node2.equals((Object)node4));
2437:       assertFalse(node2.equals((Object)node3));
2438:       assertFalse(node2.equals((Object)node0));
2439:       assertFalse(node2.equals((Object)node1));
2440:       assertNotSame(node1, node2);
2441:       assertNotSame(node2, node1);
2442:   }
2443: }
RegularFileObject[/tmp/EvoSuite_130_1628157524381/com/google/javascript/rhino/Node_130_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:44 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_130_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_130_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_130_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.common.collect.Sets",
333:       "com.google.common.collect.AbstractIndexedListIterator",
334:       "com.google.common.collect.Iterators$11",
335:       "com.google.common.base.Objects",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.Iterables",
343:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.common.collect.ImmutableSet",
351:       "com.google.common.collect.EmptyImmutableSet",
352:       "com.google.common.collect.Platform",
353:       "com.google.javascript.rhino.JSTypeExpression",
354:       "com.google.javascript.rhino.jstype.NamedType",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
356:       "com.google.javascript.rhino.jstype.NamespaceType",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
362:       "com.google.javascript.rhino.jstype.TernaryValue",
363:       "com.google.javascript.rhino.jstype.JSType$2",
364:       "com.google.javascript.rhino.jstype.JSType$TypePair"
365:     );
366:   }
367: }

[MASTER] 09:58:44.867 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

Node node0 = Node.newNumber((-1759.960241), 47, 47);
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isStringKey());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertEquals(192559, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertEquals(47, node0.getLineno());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isDelProp());
assertTrue(node0.isNumber());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals(47, node0.getCharno());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node0);

node0.type = 47;
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isStringKey());
assertEquals(47, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals(192559, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertTrue(node0.isRegExp());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertEquals(47, node0.getLineno());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals(47, node0.getCharno());
assertFalse(node0.isDec());
assertFalse(node0.isComma());

int int0 = node0.getChangeTime();
assertEquals(0, int0);
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isStringKey());
assertEquals(47, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals(192559, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertTrue(node0.isRegExp());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertEquals(47, node0.getLineno());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals(47, node0.getCharno());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isStringKey());
assertEquals(47, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals(192559, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertTrue(node0.isRegExp());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertEquals(47, node0.getLineno());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals(47, node0.getCharno());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node_FileLevelJsDocBuilder0);

String string0 = node0.toStringTree();
assertEquals("REGEXP 47\n", string0);
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isStringKey());
assertEquals(47, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals(192559, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertTrue(node0.isRegExp());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertEquals(47, node0.getLineno());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals(47, node0.getCharno());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(string0);

Node node1 = new Node(4);
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals(4, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertTrue(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isGetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isFor());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isStringKey());
assertEquals(47, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals(192559, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertTrue(node0.isRegExp());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertEquals(47, node0.getLineno());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals(47, node0.getCharno());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node_FileLevelJsDocBuilder1);
assertFalse(node0.equals((Object)node1));
assertFalse(node_FileLevelJsDocBuilder1.equals((Object)node_FileLevelJsDocBuilder0));

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isStringKey());
assertEquals(47, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals(192559, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertTrue(node0.isRegExp());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertEquals(47, node0.getLineno());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals(47, node0.getCharno());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node0));

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isStringKey());
assertEquals(47, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals(192559, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertTrue(node0.isRegExp());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertEquals(47, node0.getLineno());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals(47, node0.getCharno());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNull(staticSourceFile0);
assertFalse(node0.equals((Object)node1));

Node node2 = node1.cloneTree();
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals(4, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertTrue(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isGetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isFor());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isString());
assertFalse(node2.isDefaultCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isGetProp());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertEquals(4, node2.getType());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabel());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isScript());
assertFalse(node2.isContinue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isWith());
assertTrue(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotNull(node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node1, node2);
assertNotSame(node2, node1);

node2.setSourceFileForTesting("@:z");
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals(4, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertTrue(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isGetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isFor());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isString());
assertFalse(node2.isDefaultCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isGetProp());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertEquals(4, node2.getType());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabel());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isScript());
assertFalse(node2.isContinue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isWith());
assertTrue(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node1, node2);
assertNotSame(node2, node1);

Node node3 = Node.newString(51, "@:z");
assertFalse(node3.isTrue());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isRegExp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isTry());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCase());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isThis());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWith());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isCast());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isContinue());
assertFalse(node3.isObjectLit());
assertEquals(51, node3.getType());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isLabelName());
assertFalse(node3.isAdd());
assertFalse(node3.isVar());
assertFalse(node3.isWhile());
assertFalse(node3.isString());
assertFalse(node3.isGetProp());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertTrue(node3.isIn());
assertFalse(node3.isReturn());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isOr());
assertFalse(node3.isComma());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isNull());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isVoid());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotNull(node3);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));

InputId inputId0 = node0.getInputId();
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isIn());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isStringKey());
assertEquals(47, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals(192559, node0.getSourcePosition());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertTrue(node0.isRegExp());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertEquals(47, node0.getLineno());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isString());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals(47, node0.getCharno());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNull(inputId0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));

Node node4 = node3.useSourceInfoIfMissingFromForTree(node2);
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals(4, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertTrue(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isGetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isFor());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isString());
assertFalse(node2.isDefaultCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isGetProp());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertEquals(4, node2.getType());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabel());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isScript());
assertFalse(node2.isContinue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isWith());
assertTrue(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node3.isTrue());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isRegExp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isTry());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCase());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isThis());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWith());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isCast());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isContinue());
assertFalse(node3.isObjectLit());
assertEquals(51, node3.getType());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isLabelName());
assertFalse(node3.isAdd());
assertFalse(node3.isVar());
assertFalse(node3.isWhile());
assertFalse(node3.isString());
assertFalse(node3.isGetProp());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertTrue(node3.isIn());
assertFalse(node3.isReturn());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isOr());
assertFalse(node3.isComma());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isNull());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isVoid());
assertFalse(node4.isObjectLit());
assertFalse(node4.isAnd());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isWith());
assertFalse(node4.isNot());
assertFalse(node4.isExprResult());
assertFalse(node4.isBreak());
assertFalse(node4.isFalse());
assertFalse(node4.isCast());
assertFalse(node4.isThrow());
assertFalse(node4.isInc());
assertFalse(node4.isAssignAdd());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isLabel());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isSwitch());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isLabelName());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isFor());
assertFalse(node4.isStringKey());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isHook());
assertFalse(node4.isThis());
assertEquals(51, node4.getType());
assertFalse(node4.isBlock());
assertFalse(node4.isScript());
assertFalse(node4.isCase());
assertFalse(node4.isTry());
assertFalse(node4.hasOneChild());
assertFalse(node4.isCatch());
assertFalse(node4.isRegExp());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertFalse(node4.isDebugger());
assertFalse(node4.isFunction());
assertFalse(node4.isNull());
assertFalse(node4.isParamList());
assertFalse(node4.isName());
assertFalse(node4.isArrayLit());
assertFalse(node4.isVar());
assertFalse(node4.isEmpty());
assertFalse(node4.isSetterDef());
assertFalse(node4.isAdd());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDo());
assertTrue(node4.isIn());
assertFalse(node4.isNew());
assertFalse(node4.isContinue());
assertFalse(node4.isWhile());
assertFalse(node4.isString());
assertFalse(node4.isReturn());
assertFalse(node4.isOr());
assertFalse(node4.isDelProp());
assertFalse(node4.isCall());
assertFalse(node4.isGetElem());
assertFalse(node4.hasChildren());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.isComma());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isGetProp());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertNotNull(node4);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertSame(node3, node4);
assertSame(node4, node3);

String string1 = node3.toStringTree();
assertFalse(node3.isTrue());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isRegExp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isTry());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCase());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isThis());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWith());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isCast());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isContinue());
assertFalse(node3.isObjectLit());
assertEquals(51, node3.getType());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isLabelName());
assertFalse(node3.isAdd());
assertFalse(node3.isVar());
assertFalse(node3.isWhile());
assertFalse(node3.isString());
assertFalse(node3.isGetProp());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertTrue(node3.isIn());
assertFalse(node3.isReturn());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isOr());
assertFalse(node3.isComma());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isNull());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isVoid());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotNull(string1);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(string1.equals((Object)string0));
assertSame(node3, node4);

node3.removeProp(46);
assertFalse(node3.isTrue());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isRegExp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isTry());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCase());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isThis());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWith());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isCast());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isContinue());
assertFalse(node3.isObjectLit());
assertEquals(51, node3.getType());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isLabelName());
assertFalse(node3.isAdd());
assertFalse(node3.isVar());
assertFalse(node3.isWhile());
assertFalse(node3.isString());
assertFalse(node3.isGetProp());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertTrue(node3.isIn());
assertFalse(node3.isReturn());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isOr());
assertFalse(node3.isComma());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isNull());
assertFalse(node3.isGetElem());
assertFalse(node3.isExprResult());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isVoid());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertSame(node3, node4);

Node node5 = node2.getParent();
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertEquals(4, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertTrue(node1.isReturn());
assertFalse(node1.isThis());
assertFalse(node1.isGetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isFor());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isString());
assertFalse(node2.isDefaultCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isGetProp());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isTrue());
assertEquals(4, node2.getType());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabel());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isScript());
assertFalse(node2.isContinue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isWith());
assertTrue(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNull(node5);
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node1, node2);
assertNotSame(node2, node1);


[MASTER] 09:58:58.966 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_202_1628157538926/com/google/javascript/rhino/Node_202_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_202_1628157538926/com/google/javascript/rhino/Node_202_tmp__ESTest_scaffolding.java]]
[MASTER] 09:58:58.966 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:58.966 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 09:58:58.966 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 340
[MASTER] 09:58:58.967 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_202_1628157538926/com/google/javascript/rhino/Node_202_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 09:58:58 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.StaticSourceFile;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.testdata.EvoSuiteFile;
15: import org.evosuite.runtime.testdata.FileSystemHandling;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_202_tmp__ESTest extends Node_202_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
24:       assertFalse(boolean0);
25:       
26:       Node node0 = new Node(338, 338, 338);
27:       assertFalse(node0.isInstanceOf());
28:       assertFalse(node0.isObjectLit());
29:       assertFalse(node0.isAnd());
30:       assertFalse(node0.isComma());
31:       assertFalse(node0.isThis());
32:       assertFalse(node0.isNot());
33:       assertEquals(338, node0.getCharno());
34:       assertFalse(node0.isScript());
35:       assertFalse(node0.isGetProp());
36:       assertFalse(node0.isThrow());
37:       assertFalse(node0.isLabelName());
38:       assertFalse(node0.isFalse());
39:       assertFalse(node0.isSwitch());
40:       assertFalse(node0.isCast());
41:       assertFalse(node0.hasMoreThanOneChild());
42:       assertFalse(node0.isIn());
43:       assertFalse(node0.isNE());
44:       assertFalse(node0.isGetterDef());
45:       assertFalse(node0.isFor());
46:       assertFalse(node0.isNumber());
47:       assertFalse(node0.isInc());
48:       assertEquals(338, node0.getLineno());
49:       assertFalse(node0.hasOneChild());
50:       assertFalse(node0.isCase());
51:       assertFalse(node0.isTry());
52:       assertFalse(node0.isHook());
53:       assertFalse(node0.isBlock());
54:       assertFalse(node0.isRegExp());
55:       assertFalse(node0.isWith());
56:       assertFalse(node0.isIf());
57:       assertFalse(node0.isCatch());
58:       assertEquals(0, node0.getChildCount());
59:       assertFalse(node0.isParamList());
60:       assertFalse(node0.isNull());
61:       assertFalse(node0.isDefaultCase());
62:       assertFalse(node0.isSetterDef());
63:       assertFalse(node0.isFunction());
64:       assertFalse(node0.isDebugger());
65:       assertFalse(node0.isVar());
66:       assertFalse(node0.isStringKey());
67:       assertFalse(node0.isContinue());
68:       assertFalse(node0.isArrayLit());
69:       assertFalse(node0.isReturn());
70:       assertFalse(node0.isOr());
71:       assertFalse(node0.isAssignAdd());
72:       assertFalse(node0.isDec());
73:       assertFalse(node0.isLabel());
74:       assertFalse(node0.hasChildren());
75:       assertFalse(node0.isWhile());
76:       assertFalse(node0.isString());
77:       assertFalse(node0.isDo());
78:       assertFalse(node0.isEmpty());
79:       assertEquals(338, node0.getType());
80:       assertFalse(node0.isNew());
81:       assertFalse(node0.isAdd());
82:       assertFalse(node0.isTrue());
83:       assertFalse(node0.isDelProp());
84:       assertEquals(1384786, node0.getSourcePosition());
85:       assertFalse(node0.isAssign());
86:       assertFalse(node0.isTypeOf());
87:       assertFalse(node0.isName());
88:       assertFalse(node0.isExprResult());
89:       assertFalse(node0.isCall());
90:       assertFalse(node0.isVoid());
91:       assertFalse(node0.isGetElem());
92:       assertFalse(node0.isBreak());
93:       assertEquals(43, Node.IS_CONSTANT_NAME);
94:       assertEquals(36, Node.QUOTED_PROP);
95:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
96:       assertEquals(53, Node.INPUT_ID);
97:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
98:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
99:       assertEquals(4095, Node.COLUMN_MASK);
100:       assertEquals(47, Node.IS_DISPATCHER);
101:       assertEquals(56, Node.CHANGE_TIME);
102:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
103:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
104:       assertEquals(8, Node.FLAG_NO_THROWS);
105:       assertEquals(29, Node.JSDOC_INFO_PROP);
106:       assertEquals(48, Node.DIRECTIVES);
107:       assertEquals(37, Node.OPT_ARG_NAME);
108:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
109:       assertEquals(39, Node.EMPTY_BLOCK);
110:       assertEquals(55, Node.INFERRED_FUNCTION);
111:       assertEquals(52, Node.LENGTH);
112:       assertEquals(57, Node.REFLECTED_OBJECT);
113:       assertEquals(57, Node.LAST_PROP);
114:       assertEquals(49, Node.DIRECT_EVAL);
115:       assertEquals(1, Node.DECR_FLAG);
116:       assertEquals(15, Node.NO_SIDE_EFFECTS);
117:       assertEquals(12, Node.COLUMN_BITS);
118:       assertEquals(32, Node.INCRDECR_PROP);
119:       assertEquals(30, Node.VAR_ARGS_NAME);
120:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
121:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
122:       assertEquals(2, Node.POST_FLAG);
123:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
124:       assertEquals(40, Node.ORIGINALNAME_PROP);
125:       assertEquals(51, Node.STATIC_SOURCE_FILE);
126:       assertEquals(50, Node.FREE_CALL);
127:       assertEquals(46, Node.IS_NAMESPACE);
128:       assertEquals(54, Node.SLASH_V);
129:       assertNotNull(node0);
130:       
131:       String string0 = node0.getSourceFileName();
132:       assertFalse(node0.isInstanceOf());
133:       assertFalse(node0.isObjectLit());
134:       assertFalse(node0.isAnd());
135:       assertFalse(node0.isComma());
136:       assertFalse(node0.isThis());
137:       assertFalse(node0.isNot());
138:       assertEquals(338, node0.getCharno());
139:       assertFalse(node0.isScript());
140:       assertFalse(node0.isGetProp());
141:       assertFalse(node0.isThrow());
142:       assertFalse(node0.isLabelName());
143:       assertFalse(node0.isFalse());
144:       assertFalse(node0.isSwitch());
145:       assertFalse(node0.isCast());
146:       assertFalse(node0.hasMoreThanOneChild());
147:       assertFalse(node0.isIn());
148:       assertFalse(node0.isNE());
149:       assertFalse(node0.isGetterDef());
150:       assertFalse(node0.isFor());
151:       assertFalse(node0.isNumber());
152:       assertFalse(node0.isInc());
153:       assertEquals(338, node0.getLineno());
154:       assertFalse(node0.hasOneChild());
155:       assertFalse(node0.isCase());
156:       assertFalse(node0.isTry());
157:       assertFalse(node0.isHook());
158:       assertFalse(node0.isBlock());
159:       assertFalse(node0.isRegExp());
160:       assertFalse(node0.isWith());
161:       assertFalse(node0.isIf());
162:       assertFalse(node0.isCatch());
163:       assertEquals(0, node0.getChildCount());
164:       assertFalse(node0.isParamList());
165:       assertFalse(node0.isNull());
166:       assertFalse(node0.isDefaultCase());
167:       assertFalse(node0.isSetterDef());
168:       assertFalse(node0.isFunction());
169:       assertFalse(node0.isDebugger());
170:       assertFalse(node0.isVar());
171:       assertFalse(node0.isStringKey());
172:       assertFalse(node0.isContinue());
173:       assertFalse(node0.isArrayLit());
174:       assertFalse(node0.isReturn());
175:       assertFalse(node0.isOr());
176:       assertFalse(node0.isAssignAdd());
177:       assertFalse(node0.isDec());
178:       assertFalse(node0.isLabel());
179:       assertFalse(node0.hasChildren());
180:       assertFalse(node0.isWhile());
181:       assertFalse(node0.isString());
182:       assertFalse(node0.isDo());
183:       assertFalse(node0.isEmpty());
184:       assertEquals(338, node0.getType());
185:       assertFalse(node0.isNew());
186:       assertFalse(node0.isAdd());
187:       assertFalse(node0.isTrue());
188:       assertFalse(node0.isDelProp());
189:       assertEquals(1384786, node0.getSourcePosition());
190:       assertFalse(node0.isAssign());
191:       assertFalse(node0.isTypeOf());
192:       assertFalse(node0.isName());
193:       assertFalse(node0.isExprResult());
194:       assertFalse(node0.isCall());
195:       assertFalse(node0.isVoid());
196:       assertFalse(node0.isGetElem());
197:       assertFalse(node0.isBreak());
198:       assertEquals(43, Node.IS_CONSTANT_NAME);
199:       assertEquals(36, Node.QUOTED_PROP);
200:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
201:       assertEquals(53, Node.INPUT_ID);
202:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
203:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
204:       assertEquals(4095, Node.COLUMN_MASK);
205:       assertEquals(47, Node.IS_DISPATCHER);
206:       assertEquals(56, Node.CHANGE_TIME);
207:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
208:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
209:       assertEquals(8, Node.FLAG_NO_THROWS);
210:       assertEquals(29, Node.JSDOC_INFO_PROP);
211:       assertEquals(48, Node.DIRECTIVES);
212:       assertEquals(37, Node.OPT_ARG_NAME);
213:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
214:       assertEquals(39, Node.EMPTY_BLOCK);
215:       assertEquals(55, Node.INFERRED_FUNCTION);
216:       assertEquals(52, Node.LENGTH);
217:       assertEquals(57, Node.REFLECTED_OBJECT);
218:       assertEquals(57, Node.LAST_PROP);
219:       assertEquals(49, Node.DIRECT_EVAL);
220:       assertEquals(1, Node.DECR_FLAG);
221:       assertEquals(15, Node.NO_SIDE_EFFECTS);
222:       assertEquals(12, Node.COLUMN_BITS);
223:       assertEquals(32, Node.INCRDECR_PROP);
224:       assertEquals(30, Node.VAR_ARGS_NAME);
225:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
226:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
227:       assertEquals(2, Node.POST_FLAG);
228:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
229:       assertEquals(40, Node.ORIGINALNAME_PROP);
230:       assertEquals(51, Node.STATIC_SOURCE_FILE);
231:       assertEquals(50, Node.FREE_CALL);
232:       assertEquals(46, Node.IS_NAMESPACE);
233:       assertEquals(54, Node.SLASH_V);
234:       assertNull(string0);
235:       
236:       Iterable<Node> iterable0 = node0.children();
237:       assertFalse(node0.isInstanceOf());
238:       assertFalse(node0.isObjectLit());
239:       assertFalse(node0.isAnd());
240:       assertFalse(node0.isComma());
241:       assertFalse(node0.isThis());
242:       assertFalse(node0.isNot());
243:       assertEquals(338, node0.getCharno());
244:       assertFalse(node0.isScript());
245:       assertFalse(node0.isGetProp());
246:       assertFalse(node0.isThrow());
247:       assertFalse(node0.isLabelName());
248:       assertFalse(node0.isFalse());
249:       assertFalse(node0.isSwitch());
250:       assertFalse(node0.isCast());
251:       assertFalse(node0.hasMoreThanOneChild());
252:       assertFalse(node0.isIn());
253:       assertFalse(node0.isNE());
254:       assertFalse(node0.isGetterDef());
255:       assertFalse(node0.isFor());
256:       assertFalse(node0.isNumber());
257:       assertFalse(node0.isInc());
258:       assertEquals(338, node0.getLineno());
259:       assertFalse(node0.hasOneChild());
260:       assertFalse(node0.isCase());
261:       assertFalse(node0.isTry());
262:       assertFalse(node0.isHook());
263:       assertFalse(node0.isBlock());
264:       assertFalse(node0.isRegExp());
265:       assertFalse(node0.isWith());
266:       assertFalse(node0.isIf());
267:       assertFalse(node0.isCatch());
268:       assertEquals(0, node0.getChildCount());
269:       assertFalse(node0.isParamList());
270:       assertFalse(node0.isNull());
271:       assertFalse(node0.isDefaultCase());
272:       assertFalse(node0.isSetterDef());
273:       assertFalse(node0.isFunction());
274:       assertFalse(node0.isDebugger());
275:       assertFalse(node0.isVar());
276:       assertFalse(node0.isStringKey());
277:       assertFalse(node0.isContinue());
278:       assertFalse(node0.isArrayLit());
279:       assertFalse(node0.isReturn());
280:       assertFalse(node0.isOr());
281:       assertFalse(node0.isAssignAdd());
282:       assertFalse(node0.isDec());
283:       assertFalse(node0.isLabel());
284:       assertFalse(node0.hasChildren());
285:       assertFalse(node0.isWhile());
286:       assertFalse(node0.isString());
287:       assertFalse(node0.isDo());
288:       assertFalse(node0.isEmpty());
289:       assertEquals(338, node0.getType());
290:       assertFalse(node0.isNew());
291:       assertFalse(node0.isAdd());
292:       assertFalse(node0.isTrue());
293:       assertFalse(node0.isDelProp());
294:       assertEquals(1384786, node0.getSourcePosition());
295:       assertFalse(node0.isAssign());
296:       assertFalse(node0.isTypeOf());
297:       assertFalse(node0.isName());
298:       assertFalse(node0.isExprResult());
299:       assertFalse(node0.isCall());
300:       assertFalse(node0.isVoid());
301:       assertFalse(node0.isGetElem());
302:       assertFalse(node0.isBreak());
303:       assertEquals(43, Node.IS_CONSTANT_NAME);
304:       assertEquals(36, Node.QUOTED_PROP);
305:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
306:       assertEquals(53, Node.INPUT_ID);
307:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
308:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
309:       assertEquals(4095, Node.COLUMN_MASK);
310:       assertEquals(47, Node.IS_DISPATCHER);
311:       assertEquals(56, Node.CHANGE_TIME);
312:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
313:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
314:       assertEquals(8, Node.FLAG_NO_THROWS);
315:       assertEquals(29, Node.JSDOC_INFO_PROP);
316:       assertEquals(48, Node.DIRECTIVES);
317:       assertEquals(37, Node.OPT_ARG_NAME);
318:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
319:       assertEquals(39, Node.EMPTY_BLOCK);
320:       assertEquals(55, Node.INFERRED_FUNCTION);
321:       assertEquals(52, Node.LENGTH);
322:       assertEquals(57, Node.REFLECTED_OBJECT);
323:       assertEquals(57, Node.LAST_PROP);
324:       assertEquals(49, Node.DIRECT_EVAL);
325:       assertEquals(1, Node.DECR_FLAG);
326:       assertEquals(15, Node.NO_SIDE_EFFECTS);
327:       assertEquals(12, Node.COLUMN_BITS);
328:       assertEquals(32, Node.INCRDECR_PROP);
329:       assertEquals(30, Node.VAR_ARGS_NAME);
330:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
331:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
332:       assertEquals(2, Node.POST_FLAG);
333:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
334:       assertEquals(40, Node.ORIGINALNAME_PROP);
335:       assertEquals(51, Node.STATIC_SOURCE_FILE);
336:       assertEquals(50, Node.FREE_CALL);
337:       assertEquals(46, Node.IS_NAMESPACE);
338:       assertEquals(54, Node.SLASH_V);
339:       assertNotNull(iterable0);
340:       assertFalse(iterable0.contains(node0));
341:       
342:       boolean boolean1 = node0.isFor();
343:       assertFalse(boolean1);
344:       assertFalse(node0.isInstanceOf());
345:       assertFalse(node0.isObjectLit());
346:       assertFalse(node0.isAnd());
347:       assertFalse(node0.isComma());
348:       assertFalse(node0.isThis());
349:       assertFalse(node0.isNot());
350:       assertEquals(338, node0.getCharno());
351:       assertFalse(node0.isScript());
352:       assertFalse(node0.isGetProp());
353:       assertFalse(node0.isThrow());
354:       assertFalse(node0.isLabelName());
355:       assertFalse(node0.isFalse());
356:       assertFalse(node0.isSwitch());
357:       assertFalse(node0.isCast());
358:       assertFalse(node0.hasMoreThanOneChild());
359:       assertFalse(node0.isIn());
360:       assertFalse(node0.isNE());
361:       assertFalse(node0.isGetterDef());
362:       assertFalse(node0.isFor());
363:       assertFalse(node0.isNumber());
364:       assertFalse(node0.isInc());
365:       assertEquals(338, node0.getLineno());
366:       assertFalse(node0.hasOneChild());
367:       assertFalse(node0.isCase());
368:       assertFalse(node0.isTry());
369:       assertFalse(node0.isHook());
370:       assertFalse(node0.isBlock());
371:       assertFalse(node0.isRegExp());
372:       assertFalse(node0.isWith());
373:       assertFalse(node0.isIf());
374:       assertFalse(node0.isCatch());
375:       assertEquals(0, node0.getChildCount());
376:       assertFalse(node0.isParamList());
377:       assertFalse(node0.isNull());
378:       assertFalse(node0.isDefaultCase());
379:       assertFalse(node0.isSetterDef());
380:       assertFalse(node0.isFunction());
381:       assertFalse(node0.isDebugger());
382:       assertFalse(node0.isVar());
383:       assertFalse(node0.isStringKey());
384:       assertFalse(node0.isContinue());
385:       assertFalse(node0.isArrayLit());
386:       assertFalse(node0.isReturn());
387:       assertFalse(node0.isOr());
388:       assertFalse(node0.isAssignAdd());
389:       assertFalse(node0.isDec());
390:       assertFalse(node0.isLabel());
391:       assertFalse(node0.hasChildren());
392:       assertFalse(node0.isWhile());
393:       assertFalse(node0.isString());
394:       assertFalse(node0.isDo());
395:       assertFalse(node0.isEmpty());
396:       assertEquals(338, node0.getType());
397:       assertFalse(node0.isNew());
398:       assertFalse(node0.isAdd());
399:       assertFalse(node0.isTrue());
400:       assertFalse(node0.isDelProp());
401:       assertEquals(1384786, node0.getSourcePosition());
402:       assertFalse(node0.isAssign());
403:       assertFalse(node0.isTypeOf());
404:       assertFalse(node0.isName());
405:       assertFalse(node0.isExprResult());
406:       assertFalse(node0.isCall());
407:       assertFalse(node0.isVoid());
408:       assertFalse(node0.isGetElem());
409:       assertFalse(node0.isBreak());
410:       assertEquals(43, Node.IS_CONSTANT_NAME);
411:       assertEquals(36, Node.QUOTED_PROP);
412:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
413:       assertEquals(53, Node.INPUT_ID);
414:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
415:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
416:       assertEquals(4095, Node.COLUMN_MASK);
417:       assertEquals(47, Node.IS_DISPATCHER);
418:       assertEquals(56, Node.CHANGE_TIME);
419:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
420:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
421:       assertEquals(8, Node.FLAG_NO_THROWS);
422:       assertEquals(29, Node.JSDOC_INFO_PROP);
423:       assertEquals(48, Node.DIRECTIVES);
424:       assertEquals(37, Node.OPT_ARG_NAME);
425:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
426:       assertEquals(39, Node.EMPTY_BLOCK);
427:       assertEquals(55, Node.INFERRED_FUNCTION);
428:       assertEquals(52, Node.LENGTH);
429:       assertEquals(57, Node.REFLECTED_OBJECT);
430:       assertEquals(57, Node.LAST_PROP);
431:       assertEquals(49, Node.DIRECT_EVAL);
432:       assertEquals(1, Node.DECR_FLAG);
433:       assertEquals(15, Node.NO_SIDE_EFFECTS);
434:       assertEquals(12, Node.COLUMN_BITS);
435:       assertEquals(32, Node.INCRDECR_PROP);
436:       assertEquals(30, Node.VAR_ARGS_NAME);
437:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
438:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
439:       assertEquals(2, Node.POST_FLAG);
440:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
441:       assertEquals(40, Node.ORIGINALNAME_PROP);
442:       assertEquals(51, Node.STATIC_SOURCE_FILE);
443:       assertEquals(50, Node.FREE_CALL);
444:       assertEquals(46, Node.IS_NAMESPACE);
445:       assertEquals(54, Node.SLASH_V);
446:       assertTrue(boolean1 == boolean0);
447:       
448:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
449:       assertFalse(node0.isInstanceOf());
450:       assertFalse(node0.isObjectLit());
451:       assertFalse(node0.isAnd());
452:       assertFalse(node0.isComma());
453:       assertFalse(node0.isThis());
454:       assertFalse(node0.isNot());
455:       assertEquals(338, node0.getCharno());
456:       assertFalse(node0.isScript());
457:       assertFalse(node0.isGetProp());
458:       assertFalse(node0.isThrow());
459:       assertFalse(node0.isLabelName());
460:       assertFalse(node0.isFalse());
461:       assertFalse(node0.isSwitch());
462:       assertFalse(node0.isCast());
463:       assertFalse(node0.hasMoreThanOneChild());
464:       assertFalse(node0.isIn());
465:       assertFalse(node0.isNE());
466:       assertFalse(node0.isGetterDef());
467:       assertFalse(node0.isFor());
468:       assertFalse(node0.isNumber());
469:       assertFalse(node0.isInc());
470:       assertEquals(338, node0.getLineno());
471:       assertFalse(node0.hasOneChild());
472:       assertFalse(node0.isCase());
473:       assertFalse(node0.isTry());
474:       assertFalse(node0.isHook());
475:       assertFalse(node0.isBlock());
476:       assertFalse(node0.isRegExp());
477:       assertFalse(node0.isWith());
478:       assertFalse(node0.isIf());
479:       assertFalse(node0.isCatch());
480:       assertEquals(0, node0.getChildCount());
481:       assertFalse(node0.isParamList());
482:       assertFalse(node0.isNull());
483:       assertFalse(node0.isDefaultCase());
484:       assertFalse(node0.isSetterDef());
485:       assertFalse(node0.isFunction());
486:       assertFalse(node0.isDebugger());
487:       assertFalse(node0.isVar());
488:       assertFalse(node0.isStringKey());
489:       assertFalse(node0.isContinue());
490:       assertFalse(node0.isArrayLit());
491:       assertFalse(node0.isReturn());
492:       assertFalse(node0.isOr());
493:       assertFalse(node0.isAssignAdd());
494:       assertFalse(node0.isDec());
495:       assertFalse(node0.isLabel());
496:       assertFalse(node0.hasChildren());
497:       assertFalse(node0.isWhile());
498:       assertFalse(node0.isString());
499:       assertFalse(node0.isDo());
500:       assertFalse(node0.isEmpty());
501:       assertEquals(338, node0.getType());
502:       assertFalse(node0.isNew());
503:       assertFalse(node0.isAdd());
504:       assertFalse(node0.isTrue());
505:       assertFalse(node0.isDelProp());
506:       assertEquals(1384786, node0.getSourcePosition());
507:       assertFalse(node0.isAssign());
508:       assertFalse(node0.isTypeOf());
509:       assertFalse(node0.isName());
510:       assertFalse(node0.isExprResult());
511:       assertFalse(node0.isCall());
512:       assertFalse(node0.isVoid());
513:       assertFalse(node0.isGetElem());
514:       assertFalse(node0.isBreak());
515:       assertEquals(43, Node.IS_CONSTANT_NAME);
516:       assertEquals(36, Node.QUOTED_PROP);
517:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
518:       assertEquals(53, Node.INPUT_ID);
519:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
520:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
521:       assertEquals(4095, Node.COLUMN_MASK);
522:       assertEquals(47, Node.IS_DISPATCHER);
523:       assertEquals(56, Node.CHANGE_TIME);
524:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
525:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
526:       assertEquals(8, Node.FLAG_NO_THROWS);
527:       assertEquals(29, Node.JSDOC_INFO_PROP);
528:       assertEquals(48, Node.DIRECTIVES);
529:       assertEquals(37, Node.OPT_ARG_NAME);
530:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
531:       assertEquals(39, Node.EMPTY_BLOCK);
532:       assertEquals(55, Node.INFERRED_FUNCTION);
533:       assertEquals(52, Node.LENGTH);
534:       assertEquals(57, Node.REFLECTED_OBJECT);
535:       assertEquals(57, Node.LAST_PROP);
536:       assertEquals(49, Node.DIRECT_EVAL);
537:       assertEquals(1, Node.DECR_FLAG);
538:       assertEquals(15, Node.NO_SIDE_EFFECTS);
539:       assertEquals(12, Node.COLUMN_BITS);
540:       assertEquals(32, Node.INCRDECR_PROP);
541:       assertEquals(30, Node.VAR_ARGS_NAME);
542:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
543:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
544:       assertEquals(2, Node.POST_FLAG);
545:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
546:       assertEquals(40, Node.ORIGINALNAME_PROP);
547:       assertEquals(51, Node.STATIC_SOURCE_FILE);
548:       assertEquals(50, Node.FREE_CALL);
549:       assertEquals(46, Node.IS_NAMESPACE);
550:       assertEquals(54, Node.SLASH_V);
551:       assertNull(staticSourceFile0);
552:       
553:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
554:       assertEquals(55, node_SideEffectFlags0.valueOf());
555:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
556:       assertNotNull(node_SideEffectFlags0);
557:       
558:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
559:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
560:       assertEquals(51, node_SideEffectFlags0.valueOf());
561:       assertEquals(51, node_SideEffectFlags1.valueOf());
562:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
563:       assertNotNull(node_SideEffectFlags1);
564:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
565:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
566:       
567:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
568:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
569:       assertEquals(51, node_SideEffectFlags0.valueOf());
570:       assertEquals(51, node_SideEffectFlags1.valueOf());
571:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
572:       assertEquals(51, node_SideEffectFlags2.valueOf());
573:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
574:       assertNotNull(node_SideEffectFlags2);
575:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
576:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
577:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
578:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
579:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
580:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
581:       
582:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
583:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
584:       assertEquals(48, node_SideEffectFlags0.valueOf());
585:       assertEquals(48, node_SideEffectFlags1.valueOf());
586:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
587:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
588:       assertEquals(48, node_SideEffectFlags2.valueOf());
589:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
590:       assertEquals(48, node_SideEffectFlags3.valueOf());
591:       assertNotNull(node_SideEffectFlags3);
592:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
593:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
594:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
595:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
596:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
597:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
598:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
599:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
600:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
601:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
602:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
603:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
604:       
605:       node_SideEffectFlags3.clearSideEffectFlags();
606:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
607:       assertEquals(63, node_SideEffectFlags0.valueOf());
608:       assertEquals(63, node_SideEffectFlags1.valueOf());
609:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
610:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
611:       assertEquals(63, node_SideEffectFlags2.valueOf());
612:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
613:       assertEquals(63, node_SideEffectFlags3.valueOf());
614:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
615:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
616:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
617:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
618:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
619:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
620:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
621:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
622:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
623:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
624:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
625:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
626:   }
627: }
RegularFileObject[/tmp/EvoSuite_202_1628157538926/com/google/javascript/rhino/Node_202_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 09:58:58 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_202_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_202_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_202_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Joiner$1",
264:       "com.google.common.collect.Collections2",
265:       "com.google.common.base.Joiner$MapJoiner",
266:       "com.google.common.collect.Maps",
267:       "com.google.common.collect.AbstractMultimap",
268:       "com.google.common.collect.AbstractMapBasedMultimap",
269:       "com.google.common.collect.AbstractSetMultimap",
270:       "com.google.common.collect.LinkedHashMultimap",
271:       "com.google.common.collect.AbstractMapEntry",
272:       "com.google.common.collect.ImmutableEntry",
273:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
274:       "com.google.common.collect.AbstractListMultimap",
275:       "com.google.common.collect.ArrayListMultimap",
276:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
277:       "com.google.common.collect.ImmutableCollection",
278:       "com.google.common.collect.RegularImmutableList",
279:       "com.google.common.collect.ObjectArrays",
280:       "com.google.common.collect.ImmutableList",
281:       "com.google.javascript.rhino.jstype.ModificationVisitor",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
283:       "com.google.common.collect.ImmutableCollection$Builder",
284:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
285:       "com.google.common.collect.ImmutableList$Builder",
286:       "com.google.common.collect.UnmodifiableIterator",
287:       "com.google.common.collect.UnmodifiableListIterator",
288:       "com.google.common.collect.Iterators$1",
289:       "com.google.common.collect.Iterators$2",
290:       "com.google.common.collect.Iterators",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.common.collect.Sets",
333:       "com.google.common.collect.AbstractIndexedListIterator",
334:       "com.google.common.collect.Iterators$11",
335:       "com.google.common.base.Objects",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.javascript.rhino.jstype.EnumType",
338:       "com.google.javascript.rhino.jstype.EnumElementType",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.Iterables",
343:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.common.collect.ImmutableSet",
351:       "com.google.common.collect.EmptyImmutableSet",
352:       "com.google.common.collect.Platform",
353:       "com.google.javascript.rhino.JSTypeExpression",
354:       "com.google.javascript.rhino.jstype.NamedType",
355:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
356:       "com.google.javascript.rhino.jstype.NamespaceType",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
362:       "com.google.javascript.rhino.jstype.TernaryValue",
363:       "com.google.javascript.rhino.jstype.JSType$2",
364:       "com.google.javascript.rhino.jstype.JSType$TypePair"
365:     );
366:   }
367: }

[MASTER] 09:58:58.975 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
assertFalse(boolean0);

Node node0 = new Node(338, 338, 338);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertEquals(338, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertEquals(338, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(338, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertEquals(1384786, node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotNull(node0);

String string0 = node0.getSourceFileName();
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertEquals(338, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertEquals(338, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(338, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertEquals(1384786, node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNull(string0);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertEquals(338, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertEquals(338, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(338, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertEquals(1384786, node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));

boolean boolean1 = node0.isFor();
assertFalse(boolean1);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertEquals(338, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertEquals(338, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(338, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertEquals(1384786, node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertTrue(boolean1 == boolean0);

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isNot());
assertEquals(338, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isSwitch());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertEquals(338, node0.getLineno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isContinue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(338, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertEquals(1384786, node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNull(staticSourceFile0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(55);
assertEquals(55, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(51, node_SideEffectFlags0.valueOf());
assertEquals(51, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(51, node_SideEffectFlags0.valueOf());
assertEquals(51, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(51, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags0.valueOf());
assertEquals(48, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags3.valueOf());
assertNotNull(node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);

node_SideEffectFlags3.clearSideEffectFlags();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(63, node_SideEffectFlags0.valueOf());
assertEquals(63, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(63, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(63, node_SideEffectFlags3.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);


[MASTER] 09:59:20.221 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:20.540 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:20.872 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:21.259 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:21.460 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:21.646 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:21.917 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:22.142 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:22.360 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:22.673 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:22.863 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:23.049 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:23.255 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:23.438 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:23.666 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:23.842 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 09:59:24.028 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/2
* Done!

* Computation finished
